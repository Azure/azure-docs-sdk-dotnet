### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Management.Network.Models.Probe
  commentId: T:Microsoft.Azure.Management.Network.Models.Probe
  id: Probe
  parent: Microsoft.Azure.Management.Network.Models
  children:
  - Microsoft.Azure.Management.Network.Models.Probe.#ctor
  - Microsoft.Azure.Management.Network.Models.Probe.#ctor(System.String,System.Int32,System.String,System.Collections.Generic.IList{Microsoft.Azure.Management.Network.Models.SubResource},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String)
  - Microsoft.Azure.Management.Network.Models.Probe.Etag
  - Microsoft.Azure.Management.Network.Models.Probe.IntervalInSeconds
  - Microsoft.Azure.Management.Network.Models.Probe.LoadBalancingRules
  - Microsoft.Azure.Management.Network.Models.Probe.Name
  - Microsoft.Azure.Management.Network.Models.Probe.NumberOfProbes
  - Microsoft.Azure.Management.Network.Models.Probe.Port
  - Microsoft.Azure.Management.Network.Models.Probe.Protocol
  - Microsoft.Azure.Management.Network.Models.Probe.ProvisioningState
  - Microsoft.Azure.Management.Network.Models.Probe.RequestPath
  - Microsoft.Azure.Management.Network.Models.Probe.Validate
  langs:
  - csharp
  - vb
  name: Probe
  nameWithType: Probe
  fullName: Microsoft.Azure.Management.Network.Models.Probe
  type: Class
  source:
    remote:
      path: src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/Probe.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Probe
    path: src/azure-sdk-for-net/src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/Probe.cs
    startLine: 23
  assemblies:
  - Microsoft.Azure.Management.Network
  namespace: Microsoft.Azure.Management.Network.Models
  summary: "\nA load balancer probe.\n"
  example: []
  syntax:
    content: 'public class Probe : SubResource, IResource'
    content.vb: >-
      Public Class Probe
          Inherits SubResource
          Implements IResource
  inheritance:
  - System.Object
  - Microsoft.Azure.Management.Network.Models.SubResource
  implements:
  - Microsoft.Rest.Azure.IResource
  inheritedMembers:
  - Microsoft.Azure.Management.Network.Models.SubResource.Id
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Management.Network.Models.Probe.#ctor
  commentId: M:Microsoft.Azure.Management.Network.Models.Probe.#ctor
  id: '#ctor'
  parent: Microsoft.Azure.Management.Network.Models.Probe
  langs:
  - csharp
  - vb
  name: Probe()
  nameWithType: Probe.Probe()
  fullName: Microsoft.Azure.Management.Network.Models.Probe.Probe()
  type: Constructor
  source:
    remote:
      path: src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/Probe.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/Probe.cs
    startLine: 29
  assemblies:
  - Microsoft.Azure.Management.Network
  namespace: Microsoft.Azure.Management.Network.Models
  summary: "\nInitializes a new instance of the Probe class.\n"
  example: []
  syntax:
    content: public Probe()
    content.vb: Public Sub New
  overload: Microsoft.Azure.Management.Network.Models.Probe.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.Network.Models.Probe.#ctor(System.String,System.Int32,System.String,System.Collections.Generic.IList{Microsoft.Azure.Management.Network.Models.SubResource},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String)
  commentId: M:Microsoft.Azure.Management.Network.Models.Probe.#ctor(System.String,System.Int32,System.String,System.Collections.Generic.IList{Microsoft.Azure.Management.Network.Models.SubResource},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String)
  id: '#ctor(System.String,System.Int32,System.String,System.Collections.Generic.IList{Microsoft.Azure.Management.Network.Models.SubResource},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String)'
  parent: Microsoft.Azure.Management.Network.Models.Probe
  langs:
  - csharp
  - vb
  name: Probe(String, Int32, String, IList<SubResource>, Nullable<Int32>, Nullable<Int32>, String, String, String, String)
  nameWithType: Probe.Probe(String, Int32, String, IList<SubResource>, Nullable<Int32>, Nullable<Int32>, String, String, String, String)
  fullName: Microsoft.Azure.Management.Network.Models.Probe.Probe(System.String, System.Int32, System.String, System.Collections.Generic.IList<Microsoft.Azure.Management.Network.Models.SubResource>, System.Nullable<System.Int32>, System.Nullable<System.Int32>, System.String, System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/Probe.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/Probe.cs
    startLine: 66
  assemblies:
  - Microsoft.Azure.Management.Network
  namespace: Microsoft.Azure.Management.Network.Models
  summary: "\nInitializes a new instance of the Probe class.\n"
  example: []
  syntax:
    content: public Probe(string protocol, int port, string id = null, IList<SubResource> loadBalancingRules = null, int ? intervalInSeconds = null, int ? numberOfProbes = null, string requestPath = null, string provisioningState = null, string name = null, string etag = null)
    content.vb: Public Sub New(protocol As String, port As Integer, id As String = Nothing, loadBalancingRules As IList(Of SubResource) = Nothing, intervalInSeconds As Integer? = Nothing, numberOfProbes As Integer? = Nothing, requestPath As String = Nothing, provisioningState As String = Nothing, name As String = Nothing, etag As String = Nothing)
    parameters:
    - id: protocol
      type: System.String
      description: >-
        The protocol of the end point. Possible

        values are: 'Http' or 'Tcp'. If 'Tcp' is specified, a received ACK

        is required for the probe to be successful. If 'Http' is specified,

        a 200 OK response from the specifies URI is required for the probe

        to be successful. Possible values include: 'Http', 'Tcp'
    - id: port
      type: System.Int32
      description: >-
        The port for communicating the probe. Possible

        values range from 1 to 65535, inclusive.
    - id: id
      type: System.String
      description: Resource ID.
    - id: loadBalancingRules
      type: System.Collections.Generic.IList{Microsoft.Azure.Management.Network.Models.SubResource}
      description: >-
        The load balancer rules that use

        this probe.
    - id: intervalInSeconds
      type: System.Nullable{System.Int32}
      description: >-
        The interval, in seconds, for how

        frequently to probe the endpoint for health status. Typically, the

        interval is slightly less than half the allocated timeout period

        (in seconds) which allows two full probes before taking the

        instance out of rotation. The default value is 15, the minimum

        value is 5.
    - id: numberOfProbes
      type: System.Nullable{System.Int32}
      description: >-
        The number of probes where if no

        response, will result in stopping further traffic from being

        delivered to the endpoint. This values allows endpoints to be taken

        out of rotation faster or slower than the typical times used in

        Azure.
    - id: requestPath
      type: System.String
      description: >-
        The URI used for requesting health status

        from the VM. Path is required if a protocol is set to http.

        Otherwise, it is not allowed. There is no default value.
    - id: provisioningState
      type: System.String
      description: >-
        Gets the provisioning state of the

        public IP resource. Possible values are: 'Updating', 'Deleting',

        and 'Failed'.
    - id: name
      type: System.String
      description: >-
        Gets name of the resource that is unique within

        a resource group. This name can be used to access the

        resource.
    - id: etag
      type: System.String
      description: >-
        A unique read-only string that changes whenever

        the resource is updated.
  overload: Microsoft.Azure.Management.Network.Models.Probe.#ctor*
  nameWithType.vb: Probe.Probe(String, Int32, String, IList(Of SubResource), Nullable(Of Int32), Nullable(Of Int32), String, String, String, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Management.Network.Models.Probe.Probe(System.String, System.Int32, System.String, System.Collections.Generic.IList(Of Microsoft.Azure.Management.Network.Models.SubResource), System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), System.String, System.String, System.String, System.String)
  name.vb: Probe(String, Int32, String, IList(Of SubResource), Nullable(Of Int32), Nullable(Of Int32), String, String, String, String)
- uid: Microsoft.Azure.Management.Network.Models.Probe.LoadBalancingRules
  commentId: P:Microsoft.Azure.Management.Network.Models.Probe.LoadBalancingRules
  id: LoadBalancingRules
  parent: Microsoft.Azure.Management.Network.Models.Probe
  langs:
  - csharp
  - vb
  name: LoadBalancingRules
  nameWithType: Probe.LoadBalancingRules
  fullName: Microsoft.Azure.Management.Network.Models.Probe.LoadBalancingRules
  type: Property
  source:
    remote:
      path: src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/Probe.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: LoadBalancingRules
    path: src/azure-sdk-for-net/src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/Probe.cs
    startLine: 83
  assemblies:
  - Microsoft.Azure.Management.Network
  namespace: Microsoft.Azure.Management.Network.Models
  summary: "\nGets the load balancer rules that use this probe.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "properties.loadBalancingRules")]

      public IList<SubResource> LoadBalancingRules { get; protected set; }
    content.vb: >-
      <JsonProperty(PropertyName:="properties.loadBalancingRules")>

      Public Property LoadBalancingRules As IList(Of SubResource)
    parameters: []
    return:
      type: System.Collections.Generic.IList{Microsoft.Azure.Management.Network.Models.SubResource}
  overload: Microsoft.Azure.Management.Network.Models.Probe.LoadBalancingRules*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: properties.loadBalancingRules
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Microsoft.Azure.Management.Network.Models.Probe.Protocol
  commentId: P:Microsoft.Azure.Management.Network.Models.Probe.Protocol
  id: Protocol
  parent: Microsoft.Azure.Management.Network.Models.Probe
  langs:
  - csharp
  - vb
  name: Protocol
  nameWithType: Probe.Protocol
  fullName: Microsoft.Azure.Management.Network.Models.Probe.Protocol
  type: Property
  source:
    remote:
      path: src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/Probe.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Protocol
    path: src/azure-sdk-for-net/src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/Probe.cs
    startLine: 93
  assemblies:
  - Microsoft.Azure.Management.Network
  namespace: Microsoft.Azure.Management.Network.Models
  summary: "\nGets or sets the protocol of the end point. Possible values are:\n'Http' or 'Tcp'. If 'Tcp' is specified, a received ACK is required\nfor the probe to be successful. If 'Http' is specified, a 200 OK\nresponse from the specifies URI is required for the probe to be\nsuccessful. Possible values include: 'Http', 'Tcp'\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "properties.protocol")]

      public string Protocol { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="properties.protocol")>

      Public Property Protocol As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Management.Network.Models.Probe.Protocol*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: properties.protocol
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.Network.Models.Probe.Port
  commentId: P:Microsoft.Azure.Management.Network.Models.Probe.Port
  id: Port
  parent: Microsoft.Azure.Management.Network.Models.Probe
  langs:
  - csharp
  - vb
  name: Port
  nameWithType: Probe.Port
  fullName: Microsoft.Azure.Management.Network.Models.Probe.Port
  type: Property
  source:
    remote:
      path: src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/Probe.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Port
    path: src/azure-sdk-for-net/src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/Probe.cs
    startLine: 100
  assemblies:
  - Microsoft.Azure.Management.Network
  namespace: Microsoft.Azure.Management.Network.Models
  summary: "\nGets or sets the port for communicating the probe. Possible values\nrange from 1 to 65535, inclusive.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "properties.port")]

      public int Port { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="properties.port")>

      Public Property Port As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.Azure.Management.Network.Models.Probe.Port*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: properties.port
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.Network.Models.Probe.IntervalInSeconds
  commentId: P:Microsoft.Azure.Management.Network.Models.Probe.IntervalInSeconds
  id: IntervalInSeconds
  parent: Microsoft.Azure.Management.Network.Models.Probe
  langs:
  - csharp
  - vb
  name: IntervalInSeconds
  nameWithType: Probe.IntervalInSeconds
  fullName: Microsoft.Azure.Management.Network.Models.Probe.IntervalInSeconds
  type: Property
  source:
    remote:
      path: src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/Probe.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: IntervalInSeconds
    path: src/azure-sdk-for-net/src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/Probe.cs
    startLine: 110
  assemblies:
  - Microsoft.Azure.Management.Network
  namespace: Microsoft.Azure.Management.Network.Models
  summary: "\nGets or sets the interval, in seconds, for how frequently to probe\nthe endpoint for health status. Typically, the interval is slightly\nless than half the allocated timeout period (in seconds) which\nallows two full probes before taking the instance out of rotation.\nThe default value is 15, the minimum value is 5.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "properties.intervalInSeconds")]

      public int ? IntervalInSeconds { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="properties.intervalInSeconds")>

      Public Property IntervalInSeconds As Integer?
    parameters: []
    return:
      type: System.Nullable{System.Int32}
  overload: Microsoft.Azure.Management.Network.Models.Probe.IntervalInSeconds*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: properties.intervalInSeconds
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.Network.Models.Probe.NumberOfProbes
  commentId: P:Microsoft.Azure.Management.Network.Models.Probe.NumberOfProbes
  id: NumberOfProbes
  parent: Microsoft.Azure.Management.Network.Models.Probe
  langs:
  - csharp
  - vb
  name: NumberOfProbes
  nameWithType: Probe.NumberOfProbes
  fullName: Microsoft.Azure.Management.Network.Models.Probe.NumberOfProbes
  type: Property
  source:
    remote:
      path: src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/Probe.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: NumberOfProbes
    path: src/azure-sdk-for-net/src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/Probe.cs
    startLine: 119
  assemblies:
  - Microsoft.Azure.Management.Network
  namespace: Microsoft.Azure.Management.Network.Models
  summary: "\nGets or sets the number of probes where if no response, will result\nin stopping further traffic from being delivered to the endpoint.\nThis values allows endpoints to be taken out of rotation faster or\nslower than the typical times used in Azure.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "properties.numberOfProbes")]

      public int ? NumberOfProbes { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="properties.numberOfProbes")>

      Public Property NumberOfProbes As Integer?
    parameters: []
    return:
      type: System.Nullable{System.Int32}
  overload: Microsoft.Azure.Management.Network.Models.Probe.NumberOfProbes*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: properties.numberOfProbes
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.Network.Models.Probe.RequestPath
  commentId: P:Microsoft.Azure.Management.Network.Models.Probe.RequestPath
  id: RequestPath
  parent: Microsoft.Azure.Management.Network.Models.Probe
  langs:
  - csharp
  - vb
  name: RequestPath
  nameWithType: Probe.RequestPath
  fullName: Microsoft.Azure.Management.Network.Models.Probe.RequestPath
  type: Property
  source:
    remote:
      path: src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/Probe.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: RequestPath
    path: src/azure-sdk-for-net/src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/Probe.cs
    startLine: 127
  assemblies:
  - Microsoft.Azure.Management.Network
  namespace: Microsoft.Azure.Management.Network.Models
  summary: "\nGets or sets the URI used for requesting health status from the VM.\nPath is required if a protocol is set to http. Otherwise, it is not\nallowed. There is no default value.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "properties.requestPath")]

      public string RequestPath { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="properties.requestPath")>

      Public Property RequestPath As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Management.Network.Models.Probe.RequestPath*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: properties.requestPath
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.Network.Models.Probe.ProvisioningState
  commentId: P:Microsoft.Azure.Management.Network.Models.Probe.ProvisioningState
  id: ProvisioningState
  parent: Microsoft.Azure.Management.Network.Models.Probe
  langs:
  - csharp
  - vb
  name: ProvisioningState
  nameWithType: Probe.ProvisioningState
  fullName: Microsoft.Azure.Management.Network.Models.Probe.ProvisioningState
  type: Property
  source:
    remote:
      path: src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/Probe.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ProvisioningState
    path: src/azure-sdk-for-net/src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/Probe.cs
    startLine: 134
  assemblies:
  - Microsoft.Azure.Management.Network
  namespace: Microsoft.Azure.Management.Network.Models
  summary: "\nGets the provisioning state of the public IP resource. Possible\nvalues are: 'Updating', 'Deleting', and 'Failed'.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "properties.provisioningState")]

      public string ProvisioningState { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="properties.provisioningState")>

      Public Property ProvisioningState As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Management.Network.Models.Probe.ProvisioningState*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: properties.provisioningState
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.Network.Models.Probe.Name
  commentId: P:Microsoft.Azure.Management.Network.Models.Probe.Name
  id: Name
  parent: Microsoft.Azure.Management.Network.Models.Probe
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Probe.Name
  fullName: Microsoft.Azure.Management.Network.Models.Probe.Name
  type: Property
  source:
    remote:
      path: src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/Probe.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Name
    path: src/azure-sdk-for-net/src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/Probe.cs
    startLine: 141
  assemblies:
  - Microsoft.Azure.Management.Network
  namespace: Microsoft.Azure.Management.Network.Models
  summary: "\nGets name of the resource that is unique within a resource group.\nThis name can be used to access the resource.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "name")]

      public string Name { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="name")>

      Public Property Name As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Management.Network.Models.Probe.Name*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: name
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.Network.Models.Probe.Etag
  commentId: P:Microsoft.Azure.Management.Network.Models.Probe.Etag
  id: Etag
  parent: Microsoft.Azure.Management.Network.Models.Probe
  langs:
  - csharp
  - vb
  name: Etag
  nameWithType: Probe.Etag
  fullName: Microsoft.Azure.Management.Network.Models.Probe.Etag
  type: Property
  source:
    remote:
      path: src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/Probe.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Etag
    path: src/azure-sdk-for-net/src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/Probe.cs
    startLine: 148
  assemblies:
  - Microsoft.Azure.Management.Network
  namespace: Microsoft.Azure.Management.Network.Models
  summary: "\nGets or sets a unique read-only string that changes whenever the\nresource is updated.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "etag")]

      public string Etag { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="etag")>

      Public Property Etag As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Management.Network.Models.Probe.Etag*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: etag
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.Network.Models.Probe.Validate
  commentId: M:Microsoft.Azure.Management.Network.Models.Probe.Validate
  id: Validate
  parent: Microsoft.Azure.Management.Network.Models.Probe
  langs:
  - csharp
  - vb
  name: Validate()
  nameWithType: Probe.Validate()
  fullName: Microsoft.Azure.Management.Network.Models.Probe.Validate()
  type: Method
  source:
    remote:
      path: src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/Probe.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Validate
    path: src/azure-sdk-for-net/src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/Probe.cs
    startLine: 157
  assemblies:
  - Microsoft.Azure.Management.Network
  namespace: Microsoft.Azure.Management.Network.Models
  summary: "\nValidate the object.\n"
  example: []
  syntax:
    content: public virtual void Validate()
    content.vb: Public Overridable Sub Validate
  overload: Microsoft.Azure.Management.Network.Models.Probe.Validate*
  exceptions:
  - type: Microsoft.Rest.ValidationException
    commentId: T:Microsoft.Rest.ValidationException
    description: "\nThrown if validation fails\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Microsoft.Azure.Management.Network.Models
  commentId: N:Microsoft.Azure.Management.Network.Models
  isExternal: false
  name: Microsoft.Azure.Management.Network.Models
  nameWithType: Microsoft.Azure.Management.Network.Models
  fullName: Microsoft.Azure.Management.Network.Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Azure.Management.Network.Models.SubResource
  commentId: T:Microsoft.Azure.Management.Network.Models.SubResource
  parent: Microsoft.Azure.Management.Network.Models
  isExternal: false
  name: SubResource
  nameWithType: SubResource
  fullName: Microsoft.Azure.Management.Network.Models.SubResource
- uid: Microsoft.Rest.Azure.IResource
  commentId: T:Microsoft.Rest.Azure.IResource
  parent: Microsoft.Rest.Azure
  isExternal: false
  name: IResource
  nameWithType: IResource
  fullName: Microsoft.Rest.Azure.IResource
- uid: Microsoft.Azure.Management.Network.Models.SubResource.Id
  commentId: P:Microsoft.Azure.Management.Network.Models.SubResource.Id
  parent: Microsoft.Azure.Management.Network.Models.SubResource
  isExternal: false
  name: Id
  nameWithType: SubResource.Id
  fullName: Microsoft.Azure.Management.Network.Models.SubResource.Id
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Rest.Azure
  commentId: N:Microsoft.Rest.Azure
  isExternal: false
  name: Microsoft.Rest.Azure
  nameWithType: Microsoft.Rest.Azure
  fullName: Microsoft.Rest.Azure
- uid: Microsoft.Azure.Management.Network.Models.Probe.#ctor*
  commentId: Overload:Microsoft.Azure.Management.Network.Models.Probe.#ctor
  isExternal: false
  name: Probe
  nameWithType: Probe.Probe
  fullName: Microsoft.Azure.Management.Network.Models.Probe.Probe
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IList{Microsoft.Azure.Management.Network.Models.SubResource}
  commentId: T:System.Collections.Generic.IList{Microsoft.Azure.Management.Network.Models.SubResource}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<SubResource>
  nameWithType: IList<SubResource>
  fullName: System.Collections.Generic.IList<Microsoft.Azure.Management.Network.Models.SubResource>
  nameWithType.vb: IList(Of SubResource)
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.Azure.Management.Network.Models.SubResource)
  name.vb: IList(Of SubResource)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Management.Network.Models.SubResource
    name: SubResource
    nameWithType: SubResource
    fullName: Microsoft.Azure.Management.Network.Models.SubResource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Management.Network.Models.SubResource
    name: SubResource
    nameWithType: SubResource
    fullName: Microsoft.Azure.Management.Network.Models.SubResource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullname.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Management.Network.Models.Probe.LoadBalancingRules*
  commentId: Overload:Microsoft.Azure.Management.Network.Models.Probe.LoadBalancingRules
  isExternal: false
  name: LoadBalancingRules
  nameWithType: Probe.LoadBalancingRules
  fullName: Microsoft.Azure.Management.Network.Models.Probe.LoadBalancingRules
- uid: Microsoft.Azure.Management.Network.Models.Probe.Protocol*
  commentId: Overload:Microsoft.Azure.Management.Network.Models.Probe.Protocol
  isExternal: false
  name: Protocol
  nameWithType: Probe.Protocol
  fullName: Microsoft.Azure.Management.Network.Models.Probe.Protocol
- uid: Microsoft.Azure.Management.Network.Models.Probe.Port*
  commentId: Overload:Microsoft.Azure.Management.Network.Models.Probe.Port
  isExternal: false
  name: Port
  nameWithType: Probe.Port
  fullName: Microsoft.Azure.Management.Network.Models.Probe.Port
- uid: Microsoft.Azure.Management.Network.Models.Probe.IntervalInSeconds*
  commentId: Overload:Microsoft.Azure.Management.Network.Models.Probe.IntervalInSeconds
  isExternal: false
  name: IntervalInSeconds
  nameWithType: Probe.IntervalInSeconds
  fullName: Microsoft.Azure.Management.Network.Models.Probe.IntervalInSeconds
- uid: Microsoft.Azure.Management.Network.Models.Probe.NumberOfProbes*
  commentId: Overload:Microsoft.Azure.Management.Network.Models.Probe.NumberOfProbes
  isExternal: false
  name: NumberOfProbes
  nameWithType: Probe.NumberOfProbes
  fullName: Microsoft.Azure.Management.Network.Models.Probe.NumberOfProbes
- uid: Microsoft.Azure.Management.Network.Models.Probe.RequestPath*
  commentId: Overload:Microsoft.Azure.Management.Network.Models.Probe.RequestPath
  isExternal: false
  name: RequestPath
  nameWithType: Probe.RequestPath
  fullName: Microsoft.Azure.Management.Network.Models.Probe.RequestPath
- uid: Microsoft.Azure.Management.Network.Models.Probe.ProvisioningState*
  commentId: Overload:Microsoft.Azure.Management.Network.Models.Probe.ProvisioningState
  isExternal: false
  name: ProvisioningState
  nameWithType: Probe.ProvisioningState
  fullName: Microsoft.Azure.Management.Network.Models.Probe.ProvisioningState
- uid: Microsoft.Azure.Management.Network.Models.Probe.Name*
  commentId: Overload:Microsoft.Azure.Management.Network.Models.Probe.Name
  isExternal: false
  name: Name
  nameWithType: Probe.Name
  fullName: Microsoft.Azure.Management.Network.Models.Probe.Name
- uid: Microsoft.Azure.Management.Network.Models.Probe.Etag*
  commentId: Overload:Microsoft.Azure.Management.Network.Models.Probe.Etag
  isExternal: false
  name: Etag
  nameWithType: Probe.Etag
  fullName: Microsoft.Azure.Management.Network.Models.Probe.Etag
- uid: Microsoft.Azure.Management.Network.Models.Probe.Validate*
  commentId: Overload:Microsoft.Azure.Management.Network.Models.Probe.Validate
  isExternal: false
  name: Validate
  nameWithType: Probe.Validate
  fullName: Microsoft.Azure.Management.Network.Models.Probe.Validate
- uid: Microsoft.Rest.ValidationException
  commentId: T:Microsoft.Rest.ValidationException
