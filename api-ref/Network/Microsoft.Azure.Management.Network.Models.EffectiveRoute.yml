### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Management.Network.Models.EffectiveRoute
  commentId: T:Microsoft.Azure.Management.Network.Models.EffectiveRoute
  id: EffectiveRoute
  parent: Microsoft.Azure.Management.Network.Models
  children:
  - Microsoft.Azure.Management.Network.Models.EffectiveRoute.#ctor
  - Microsoft.Azure.Management.Network.Models.EffectiveRoute.#ctor(System.String,System.String,System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.String)
  - Microsoft.Azure.Management.Network.Models.EffectiveRoute.AddressPrefix
  - Microsoft.Azure.Management.Network.Models.EffectiveRoute.Name
  - Microsoft.Azure.Management.Network.Models.EffectiveRoute.NextHopIpAddress
  - Microsoft.Azure.Management.Network.Models.EffectiveRoute.NextHopType
  - Microsoft.Azure.Management.Network.Models.EffectiveRoute.Source
  - Microsoft.Azure.Management.Network.Models.EffectiveRoute.State
  langs:
  - csharp
  - vb
  name: EffectiveRoute
  nameWithType: EffectiveRoute
  fullName: Microsoft.Azure.Management.Network.Models.EffectiveRoute
  type: Class
  source:
    remote:
      path: src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/EffectiveRoute.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: EffectiveRoute
    path: src/azure-sdk-for-net/src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/EffectiveRoute.cs
    startLine: 21
  assemblies:
  - Microsoft.Azure.Management.Network
  namespace: Microsoft.Azure.Management.Network.Models
  summary: "\nEffective Route\n"
  example: []
  syntax:
    content: public class EffectiveRoute
    content.vb: Public Class EffectiveRoute
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Management.Network.Models.EffectiveRoute.#ctor
  commentId: M:Microsoft.Azure.Management.Network.Models.EffectiveRoute.#ctor
  id: '#ctor'
  parent: Microsoft.Azure.Management.Network.Models.EffectiveRoute
  langs:
  - csharp
  - vb
  name: EffectiveRoute()
  nameWithType: EffectiveRoute.EffectiveRoute()
  fullName: Microsoft.Azure.Management.Network.Models.EffectiveRoute.EffectiveRoute()
  type: Constructor
  source:
    remote:
      path: src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/EffectiveRoute.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/EffectiveRoute.cs
    startLine: 26
  assemblies:
  - Microsoft.Azure.Management.Network
  namespace: Microsoft.Azure.Management.Network.Models
  summary: "\nInitializes a new instance of the EffectiveRoute class.\n"
  example: []
  syntax:
    content: public EffectiveRoute()
    content.vb: Public Sub New
  overload: Microsoft.Azure.Management.Network.Models.EffectiveRoute.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.Network.Models.EffectiveRoute.#ctor(System.String,System.String,System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.String)
  commentId: M:Microsoft.Azure.Management.Network.Models.EffectiveRoute.#ctor(System.String,System.String,System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.String)
  id: '#ctor(System.String,System.String,System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.String)'
  parent: Microsoft.Azure.Management.Network.Models.EffectiveRoute
  langs:
  - csharp
  - vb
  name: EffectiveRoute(String, String, String, IList<String>, IList<String>, String)
  nameWithType: EffectiveRoute.EffectiveRoute(String, String, String, IList<String>, IList<String>, String)
  fullName: Microsoft.Azure.Management.Network.Models.EffectiveRoute.EffectiveRoute(System.String, System.String, System.String, System.Collections.Generic.IList<System.String>, System.Collections.Generic.IList<System.String>, System.String)
  type: Constructor
  source:
    remote:
      path: src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/EffectiveRoute.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/EffectiveRoute.cs
    startLine: 49
  assemblies:
  - Microsoft.Azure.Management.Network
  namespace: Microsoft.Azure.Management.Network.Models
  summary: "\nInitializes a new instance of the EffectiveRoute class.\n"
  example: []
  syntax:
    content: public EffectiveRoute(string name = null, string source = null, string state = null, IList<string> addressPrefix = null, IList<string> nextHopIpAddress = null, string nextHopType = null)
    content.vb: Public Sub New(name As String = Nothing, source As String = Nothing, state As String = Nothing, addressPrefix As IList(Of String) = Nothing, nextHopIpAddress As IList(Of String) = Nothing, nextHopType As String = Nothing)
    parameters:
    - id: name
      type: System.String
      description: >-
        The name of the user defined route. This is

        optional.
    - id: source
      type: System.String
      description: >-
        Who created the route. Possible values are:

        'Unknown', 'User', 'VirtualNetworkGateway', and 'Default'. Possible

        values include: 'Unknown', 'User', 'VirtualNetworkGateway',

        'Default'
    - id: state
      type: System.String
      description: >-
        The value of effective route. Possible values

        are: 'Active' and 'Invalid'. Possible values include: 'Active',

        'Invalid'
    - id: addressPrefix
      type: System.Collections.Generic.IList{System.String}
      description: >-
        The address prefixes of the effective

        routes in CIDR notation.
    - id: nextHopIpAddress
      type: System.Collections.Generic.IList{System.String}
      description: >-
        The IP address of the next hop of

        the effective route.
    - id: nextHopType
      type: System.String
      description: >-
        The type of Azure hop the packet should

        be sent to. Possible values are: 'VirtualNetworkGateway',

        'VnetLocal', 'Internet', 'VirtualAppliance', and 'None'. Possible

        values include: 'VirtualNetworkGateway', 'VnetLocal', 'Internet',

        'VirtualAppliance', 'None'
  overload: Microsoft.Azure.Management.Network.Models.EffectiveRoute.#ctor*
  nameWithType.vb: EffectiveRoute.EffectiveRoute(String, String, String, IList(Of String), IList(Of String), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Management.Network.Models.EffectiveRoute.EffectiveRoute(System.String, System.String, System.String, System.Collections.Generic.IList(Of System.String), System.Collections.Generic.IList(Of System.String), System.String)
  name.vb: EffectiveRoute(String, String, String, IList(Of String), IList(Of String), String)
- uid: Microsoft.Azure.Management.Network.Models.EffectiveRoute.Name
  commentId: P:Microsoft.Azure.Management.Network.Models.EffectiveRoute.Name
  id: Name
  parent: Microsoft.Azure.Management.Network.Models.EffectiveRoute
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: EffectiveRoute.Name
  fullName: Microsoft.Azure.Management.Network.Models.EffectiveRoute.Name
  type: Property
  source:
    remote:
      path: src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/EffectiveRoute.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Name
    path: src/azure-sdk-for-net/src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/EffectiveRoute.cs
    startLine: 62
  assemblies:
  - Microsoft.Azure.Management.Network
  namespace: Microsoft.Azure.Management.Network.Models
  summary: "\nGets or sets the name of the user defined route. This is optional.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "name")]

      public string Name { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="name")>

      Public Property Name As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Management.Network.Models.EffectiveRoute.Name*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: name
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.Network.Models.EffectiveRoute.Source
  commentId: P:Microsoft.Azure.Management.Network.Models.EffectiveRoute.Source
  id: Source
  parent: Microsoft.Azure.Management.Network.Models.EffectiveRoute
  langs:
  - csharp
  - vb
  name: Source
  nameWithType: EffectiveRoute.Source
  fullName: Microsoft.Azure.Management.Network.Models.EffectiveRoute.Source
  type: Property
  source:
    remote:
      path: src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/EffectiveRoute.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Source
    path: src/azure-sdk-for-net/src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/EffectiveRoute.cs
    startLine: 70
  assemblies:
  - Microsoft.Azure.Management.Network
  namespace: Microsoft.Azure.Management.Network.Models
  summary: "\nGets or sets who created the route. Possible values are: 'Unknown',\n'User', 'VirtualNetworkGateway', and 'Default'. Possible values\ninclude: 'Unknown', 'User', 'VirtualNetworkGateway', 'Default'\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "source")]

      public string Source { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="source")>

      Public Property Source As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Management.Network.Models.EffectiveRoute.Source*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: source
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.Network.Models.EffectiveRoute.State
  commentId: P:Microsoft.Azure.Management.Network.Models.EffectiveRoute.State
  id: State
  parent: Microsoft.Azure.Management.Network.Models.EffectiveRoute
  langs:
  - csharp
  - vb
  name: State
  nameWithType: EffectiveRoute.State
  fullName: Microsoft.Azure.Management.Network.Models.EffectiveRoute.State
  type: Property
  source:
    remote:
      path: src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/EffectiveRoute.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: State
    path: src/azure-sdk-for-net/src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/EffectiveRoute.cs
    startLine: 78
  assemblies:
  - Microsoft.Azure.Management.Network
  namespace: Microsoft.Azure.Management.Network.Models
  summary: "\nGets or sets the value of effective route. Possible values are:\n'Active' and 'Invalid'. Possible values include: 'Active',\n'Invalid'\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "state")]

      public string State { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="state")>

      Public Property State As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Management.Network.Models.EffectiveRoute.State*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: state
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.Network.Models.EffectiveRoute.AddressPrefix
  commentId: P:Microsoft.Azure.Management.Network.Models.EffectiveRoute.AddressPrefix
  id: AddressPrefix
  parent: Microsoft.Azure.Management.Network.Models.EffectiveRoute
  langs:
  - csharp
  - vb
  name: AddressPrefix
  nameWithType: EffectiveRoute.AddressPrefix
  fullName: Microsoft.Azure.Management.Network.Models.EffectiveRoute.AddressPrefix
  type: Property
  source:
    remote:
      path: src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/EffectiveRoute.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: AddressPrefix
    path: src/azure-sdk-for-net/src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/EffectiveRoute.cs
    startLine: 85
  assemblies:
  - Microsoft.Azure.Management.Network
  namespace: Microsoft.Azure.Management.Network.Models
  summary: "\nGets or sets the address prefixes of the effective routes in CIDR\nnotation.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "addressPrefix")]

      public IList<string> AddressPrefix { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="addressPrefix")>

      Public Property AddressPrefix As IList(Of String)
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.String}
  overload: Microsoft.Azure.Management.Network.Models.EffectiveRoute.AddressPrefix*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: addressPrefix
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.Network.Models.EffectiveRoute.NextHopIpAddress
  commentId: P:Microsoft.Azure.Management.Network.Models.EffectiveRoute.NextHopIpAddress
  id: NextHopIpAddress
  parent: Microsoft.Azure.Management.Network.Models.EffectiveRoute
  langs:
  - csharp
  - vb
  name: NextHopIpAddress
  nameWithType: EffectiveRoute.NextHopIpAddress
  fullName: Microsoft.Azure.Management.Network.Models.EffectiveRoute.NextHopIpAddress
  type: Property
  source:
    remote:
      path: src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/EffectiveRoute.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: NextHopIpAddress
    path: src/azure-sdk-for-net/src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/EffectiveRoute.cs
    startLine: 91
  assemblies:
  - Microsoft.Azure.Management.Network
  namespace: Microsoft.Azure.Management.Network.Models
  summary: "\nGets or sets the IP address of the next hop of the effective route.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "nextHopIpAddress")]

      public IList<string> NextHopIpAddress { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="nextHopIpAddress")>

      Public Property NextHopIpAddress As IList(Of String)
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.String}
  overload: Microsoft.Azure.Management.Network.Models.EffectiveRoute.NextHopIpAddress*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: nextHopIpAddress
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.Network.Models.EffectiveRoute.NextHopType
  commentId: P:Microsoft.Azure.Management.Network.Models.EffectiveRoute.NextHopType
  id: NextHopType
  parent: Microsoft.Azure.Management.Network.Models.EffectiveRoute
  langs:
  - csharp
  - vb
  name: NextHopType
  nameWithType: EffectiveRoute.NextHopType
  fullName: Microsoft.Azure.Management.Network.Models.EffectiveRoute.NextHopType
  type: Property
  source:
    remote:
      path: src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/EffectiveRoute.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: NextHopType
    path: src/azure-sdk-for-net/src/ResourceManagement/Network/Microsoft.Azure.Management.Network/Generated/Models/EffectiveRoute.cs
    startLine: 101
  assemblies:
  - Microsoft.Azure.Management.Network
  namespace: Microsoft.Azure.Management.Network.Models
  summary: "\nGets or sets the type of Azure hop the packet should be sent to.\nPossible values are: 'VirtualNetworkGateway', 'VnetLocal',\n'Internet', 'VirtualAppliance', and 'None'. Possible values\ninclude: 'VirtualNetworkGateway', 'VnetLocal', 'Internet',\n'VirtualAppliance', 'None'\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "nextHopType")]

      public string NextHopType { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="nextHopType")>

      Public Property NextHopType As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Management.Network.Models.EffectiveRoute.NextHopType*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: nextHopType
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Azure.Management.Network.Models
  commentId: N:Microsoft.Azure.Management.Network.Models
  isExternal: false
  name: Microsoft.Azure.Management.Network.Models
  nameWithType: Microsoft.Azure.Management.Network.Models
  fullName: Microsoft.Azure.Management.Network.Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Management.Network.Models.EffectiveRoute.#ctor*
  commentId: Overload:Microsoft.Azure.Management.Network.Models.EffectiveRoute.#ctor
  isExternal: false
  name: EffectiveRoute
  nameWithType: EffectiveRoute.EffectiveRoute
  fullName: Microsoft.Azure.Management.Network.Models.EffectiveRoute.EffectiveRoute
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IList{System.String}
  commentId: T:System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  nameWithType.vb: IList(Of String)
  fullname.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Azure.Management.Network.Models.EffectiveRoute.Name*
  commentId: Overload:Microsoft.Azure.Management.Network.Models.EffectiveRoute.Name
  isExternal: false
  name: Name
  nameWithType: EffectiveRoute.Name
  fullName: Microsoft.Azure.Management.Network.Models.EffectiveRoute.Name
- uid: Microsoft.Azure.Management.Network.Models.EffectiveRoute.Source*
  commentId: Overload:Microsoft.Azure.Management.Network.Models.EffectiveRoute.Source
  isExternal: false
  name: Source
  nameWithType: EffectiveRoute.Source
  fullName: Microsoft.Azure.Management.Network.Models.EffectiveRoute.Source
- uid: Microsoft.Azure.Management.Network.Models.EffectiveRoute.State*
  commentId: Overload:Microsoft.Azure.Management.Network.Models.EffectiveRoute.State
  isExternal: false
  name: State
  nameWithType: EffectiveRoute.State
  fullName: Microsoft.Azure.Management.Network.Models.EffectiveRoute.State
- uid: Microsoft.Azure.Management.Network.Models.EffectiveRoute.AddressPrefix*
  commentId: Overload:Microsoft.Azure.Management.Network.Models.EffectiveRoute.AddressPrefix
  isExternal: false
  name: AddressPrefix
  nameWithType: EffectiveRoute.AddressPrefix
  fullName: Microsoft.Azure.Management.Network.Models.EffectiveRoute.AddressPrefix
- uid: Microsoft.Azure.Management.Network.Models.EffectiveRoute.NextHopIpAddress*
  commentId: Overload:Microsoft.Azure.Management.Network.Models.EffectiveRoute.NextHopIpAddress
  isExternal: false
  name: NextHopIpAddress
  nameWithType: EffectiveRoute.NextHopIpAddress
  fullName: Microsoft.Azure.Management.Network.Models.EffectiveRoute.NextHopIpAddress
- uid: Microsoft.Azure.Management.Network.Models.EffectiveRoute.NextHopType*
  commentId: Overload:Microsoft.Azure.Management.Network.Models.EffectiveRoute.NextHopType
  isExternal: false
  name: NextHopType
  nameWithType: EffectiveRoute.NextHopType
  fullName: Microsoft.Azure.Management.Network.Models.EffectiveRoute.NextHopType
