### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.BaseMappingUpdate`1
  commentId: T:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.BaseMappingUpdate`1
  id: BaseMappingUpdate`1
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  children:
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.BaseMappingUpdate`1.IsBeingTakenOffline(`0,`0)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.BaseMappingUpdate`1.Shard
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.BaseMappingUpdate`1.Status
  langs:
  - csharp
  - vb
  name: BaseMappingUpdate<TStatus>
  nameWithType: BaseMappingUpdate<TStatus>
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.BaseMappingUpdate<TStatus>
  type: Class
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Shard/BaseMappingUpdate.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: BaseMappingUpdate
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Shard/BaseMappingUpdate.cs
    startLine: 12
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nBase class for updates to mappings from shardlets to shards.\n"
  example: []
  syntax:
    content: 'public abstract class BaseMappingUpdate<TStatus> : IMappingUpdate<TStatus>'
    content.vb: >-
      Public MustInherit Class BaseMappingUpdate(Of TStatus)
          Implements IMappingUpdate(Of TStatus)
    typeParameters:
    - id: TStatus
      description: Type of status field.
  inheritance:
  - System.Object
  derivedClasses:
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.PointMappingUpdate
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.RangeMappingUpdate
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: BaseMappingUpdate(Of TStatus)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.BaseMappingUpdate(Of TStatus)
  name.vb: BaseMappingUpdate(Of TStatus)
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.BaseMappingUpdate`1.Status
  commentId: P:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.BaseMappingUpdate`1.Status
  id: Status
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.BaseMappingUpdate`1
  langs:
  - csharp
  - vb
  name: Status
  nameWithType: BaseMappingUpdate<TStatus>.Status
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.BaseMappingUpdate<TStatus>.Status
  type: Property
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Shard/BaseMappingUpdate.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: Status
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Shard/BaseMappingUpdate.cs
    startLine: 32
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nGets or sets the Status property.\n"
  example: []
  syntax:
    content: public TStatus Status { get; set; }
    content.vb: Public Property Status As TStatus
    parameters: []
    return:
      type: '{TStatus}'
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.BaseMappingUpdate`1.Status*
  nameWithType.vb: BaseMappingUpdate(Of TStatus).Status
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.BaseMappingUpdate(Of TStatus).Status
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.BaseMappingUpdate`1.Shard
  commentId: P:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.BaseMappingUpdate`1.Shard
  id: Shard
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.BaseMappingUpdate`1
  langs:
  - csharp
  - vb
  name: Shard
  nameWithType: BaseMappingUpdate<TStatus>.Shard
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.BaseMappingUpdate<TStatus>.Shard
  type: Property
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Shard/BaseMappingUpdate.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: Shard
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Shard/BaseMappingUpdate.cs
    startLine: 48
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nGets or sets the Shard property.\n"
  example: []
  syntax:
    content: public Shard Shard { get; set; }
    content.vb: Public Property Shard As Shard
    parameters: []
    return:
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.BaseMappingUpdate`1.Shard*
  nameWithType.vb: BaseMappingUpdate(Of TStatus).Shard
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.BaseMappingUpdate(Of TStatus).Shard
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.BaseMappingUpdate`1.IsBeingTakenOffline(`0,`0)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.BaseMappingUpdate`1.IsBeingTakenOffline(`0,`0)
  id: IsBeingTakenOffline(`0,`0)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.BaseMappingUpdate`1
  langs:
  - csharp
  - vb
  name: IsBeingTakenOffline(TStatus, TStatus)
  nameWithType: BaseMappingUpdate<TStatus>.IsBeingTakenOffline(TStatus, TStatus)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.BaseMappingUpdate<TStatus>.IsBeingTakenOffline(TStatus, TStatus)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Shard/BaseMappingUpdate.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: IsBeingTakenOffline
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Shard/BaseMappingUpdate.cs
    startLine: 119
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nDetects if the current mapping is being taken offline.\n"
  example: []
  syntax:
    content: protected abstract bool IsBeingTakenOffline(TStatus originalStatus, TStatus updatedStatus)
    content.vb: Protected MustOverride Function IsBeingTakenOffline(originalStatus As TStatus, updatedStatus As TStatus) As Boolean
    parameters:
    - id: originalStatus
      type: '{TStatus}'
      description: Original status.
    - id: updatedStatus
      type: '{TStatus}'
      description: Updated status.
    return:
      type: System.Boolean
      description: Detects in the derived types if the mapping is being taken offline.
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.BaseMappingUpdate`1.IsBeingTakenOffline*
  nameWithType.vb: BaseMappingUpdate(Of TStatus).IsBeingTakenOffline(TStatus, TStatus)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.BaseMappingUpdate(Of TStatus).IsBeingTakenOffline(TStatus, TStatus)
references:
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  commentId: N:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  isExternal: false
  name: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  nameWithType: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.BaseMappingUpdate`1.Status*
  commentId: Overload:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.BaseMappingUpdate`1.Status
  isExternal: false
  name: Status
  nameWithType: BaseMappingUpdate<TStatus>.Status
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.BaseMappingUpdate<TStatus>.Status
  nameWithType.vb: BaseMappingUpdate(Of TStatus).Status
  fullname.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.BaseMappingUpdate(Of TStatus).Status
- uid: '{TStatus}'
  commentId: '!:TStatus'
  definition: TStatus
  name: TStatus
  nameWithType: TStatus
  fullName: TStatus
- uid: TStatus
  isExternal: false
  name: TStatus
  nameWithType: TStatus
  fullName: TStatus
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.BaseMappingUpdate`1.Shard*
  commentId: Overload:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.BaseMappingUpdate`1.Shard
  isExternal: false
  name: Shard
  nameWithType: BaseMappingUpdate<TStatus>.Shard
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.BaseMappingUpdate<TStatus>.Shard
  nameWithType.vb: BaseMappingUpdate(Of TStatus).Shard
  fullname.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.BaseMappingUpdate(Of TStatus).Shard
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
  commentId: T:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  isExternal: false
  name: Shard
  nameWithType: Shard
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.BaseMappingUpdate`1.IsBeingTakenOffline*
  commentId: Overload:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.BaseMappingUpdate`1.IsBeingTakenOffline
  isExternal: false
  name: IsBeingTakenOffline
  nameWithType: BaseMappingUpdate.IsBeingTakenOffline
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.BaseMappingUpdate.IsBeingTakenOffline
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
