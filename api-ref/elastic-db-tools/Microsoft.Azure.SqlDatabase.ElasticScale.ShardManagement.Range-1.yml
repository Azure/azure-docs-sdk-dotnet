### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1
  commentId: T:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1
  id: Range`1
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  children:
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.#ctor(`0)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.#ctor(`0,`0)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.Equals(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range{`0})
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.Equals(System.Object)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.GetHashCode
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.High
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.HighIsMax
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.Low
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.ToString
  langs:
  - csharp
  - vb
  name: Range<TKey>
  nameWithType: Range<TKey>
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range<TKey>
  type: Class
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Shard/Range.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: Range
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Shard/Range.cs
    startLine: 9
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: Represents a left-inclusive, right-exclusive range of values of type T.
  example: []
  syntax:
    content: 'public sealed class Range<TKey> : IEquatable<Range<TKey>>'
    content.vb: >-
      Public NotInheritable Class Range(Of TKey)
          Implements IEquatable(Of Range(Of TKey))
    typeParameters:
    - id: TKey
      description: Type of values.
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: Range(Of TKey)
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  fullName.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range(Of TKey)
  name.vb: Range(Of TKey)
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.#ctor(`0,`0)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.#ctor(`0,`0)
  id: '#ctor(`0,`0)'
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1
  langs:
  - csharp
  - vb
  name: Range(TKey, TKey)
  nameWithType: Range<TKey>.Range(TKey, TKey)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range<TKey>.Range(TKey, TKey)
  type: Constructor
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Shard/Range.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: .ctor
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Shard/Range.cs
    startLine: 21
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nConstructs range based on its low and high boundary values.\n"
  example: []
  syntax:
    content: public Range(TKey low, TKey high)
    content.vb: Public Sub New(low As TKey, high As TKey)
    parameters:
    - id: low
      type: '{TKey}'
      description: Low boundary value (inclusive).
    - id: high
      type: '{TKey}'
      description: High boundary value (exclusive).
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.#ctor*
  nameWithType.vb: Range(Of TKey).Range(TKey, TKey)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range(Of TKey).Range(TKey, TKey)
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.#ctor(`0)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.#ctor(`0)
  id: '#ctor(`0)'
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1
  langs:
  - csharp
  - vb
  name: Range(TKey)
  nameWithType: Range<TKey>.Range(TKey)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range<TKey>.Range(TKey)
  type: Constructor
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Shard/Range.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: .ctor
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Shard/Range.cs
    startLine: 38
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nConstructs range based on its low boundary value. The low boundary value is\nset to the one specified in <span class=\"paramref\">low</span> while the\nhigh boundary value is set to maximum possible value i.e. +infinity.\n"
  example: []
  syntax:
    content: public Range(TKey low)
    content.vb: Public Sub New(low As TKey)
    parameters:
    - id: low
      type: '{TKey}'
      description: Low boundary value (inclusive).
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.#ctor*
  nameWithType.vb: Range(Of TKey).Range(TKey)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range(Of TKey).Range(TKey)
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.Low
  commentId: P:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.Low
  id: Low
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1
  langs:
  - csharp
  - vb
  name: Low
  nameWithType: Range<TKey>.Low
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range<TKey>.Low
  type: Property
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Shard/Range.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: Low
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Shard/Range.cs
    startLine: 52
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nGets the low boundary value (inclusive).\n"
  example: []
  syntax:
    content: public TKey Low { get; }
    content.vb: Public ReadOnly Property Low As TKey
    parameters: []
    return:
      type: '{TKey}'
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.Low*
  nameWithType.vb: Range(Of TKey).Low
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range(Of TKey).Low
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.High
  commentId: P:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.High
  id: High
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1
  langs:
  - csharp
  - vb
  name: High
  nameWithType: Range<TKey>.High
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range<TKey>.High
  type: Property
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Shard/Range.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: High
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Shard/Range.cs
    startLine: 61
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nGets the high boundary value (exclusive).\n"
  example: []
  syntax:
    content: public TKey High { get; }
    content.vb: Public ReadOnly Property High As TKey
    parameters: []
    return:
      type: '{TKey}'
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.High*
  nameWithType.vb: Range(Of TKey).High
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range(Of TKey).High
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.HighIsMax
  commentId: P:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.HighIsMax
  id: HighIsMax
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1
  langs:
  - csharp
  - vb
  name: HighIsMax
  nameWithType: Range<TKey>.HighIsMax
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range<TKey>.HighIsMax
  type: Property
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Shard/Range.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: HighIsMax
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Shard/Range.cs
    startLine: 70
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nTrue if the high boundary value equals +infinity; otherwise, false.\n"
  example: []
  syntax:
    content: public bool HighIsMax { get; }
    content.vb: Public ReadOnly Property HighIsMax As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.HighIsMax*
  nameWithType.vb: Range(Of TKey).HighIsMax
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range(Of TKey).HighIsMax
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.ToString
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.ToString
  id: ToString
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Range<TKey>.ToString()
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range<TKey>.ToString()
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Shard/Range.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: ToString
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Shard/Range.cs
    startLine: 80
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nConverts the object to its string representation.\n"
  example: []
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: String representation of the object.
  overridden: System.Object.ToString
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.ToString*
  nameWithType.vb: Range(Of TKey).ToString()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range(Of TKey).ToString()
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.GetHashCode
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.GetHashCode
  id: GetHashCode
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Range<TKey>.GetHashCode()
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range<TKey>.GetHashCode()
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Shard/Range.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: GetHashCode
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Shard/Range.cs
    startLine: 89
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nCalculates the hash code for this instance.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: Hash code for the object.
  overridden: System.Object.GetHashCode
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.GetHashCode*
  nameWithType.vb: Range(Of TKey).GetHashCode()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range(Of TKey).GetHashCode()
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.Equals(System.Object)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.Equals(System.Object)
  id: Equals(System.Object)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Range<TKey>.Equals(Object)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range<TKey>.Equals(System.Object)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Shard/Range.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: Equals
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Shard/Range.cs
    startLine: 99
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nDetermines whether the specified object is equal to the current object.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare with the current object.
    return:
      type: System.Boolean
      description: True if the specified object is equal to the current object; otherwise, false.
  overridden: System.Object.Equals(System.Object)
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.Equals*
  nameWithType.vb: Range(Of TKey).Equals(Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range(Of TKey).Equals(System.Object)
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.Equals(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range{`0})
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.Equals(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range{`0})
  id: Equals(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range{`0})
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1
  langs:
  - csharp
  - vb
  name: Equals(Range<TKey>)
  nameWithType: Range<TKey>.Equals(Range<TKey>)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range<TKey>.Equals(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range<TKey>)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Shard/Range.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: Equals
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Shard/Range.cs
    startLine: 109
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nPerforms equality comparison with another Range.\n"
  example: []
  syntax:
    content: public bool Equals(Range<TKey> other)
    content.vb: Public Function Equals(other As Range(Of TKey)) As Boolean
    parameters:
    - id: other
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1
      description: Range to compare with.
    return:
      type: System.Boolean
      description: True if same Range, false otherwise.
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.Equals*
  implements:
  - System.IEquatable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1}.Equals(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range{{TKey}})
  nameWithType.vb: Range(Of TKey).Equals(Range(Of TKey))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range(Of TKey).Equals(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range(Of TKey))
  name.vb: Equals(Range(Of TKey))
references:
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  commentId: N:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  isExternal: false
  name: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  nameWithType: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IEquatable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1}
  commentId: T:System.IEquatable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Range<TKey>>
  nameWithType: IEquatable<Range<TKey>>
  fullName: System.IEquatable<Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range<TKey>>
  nameWithType.vb: IEquatable(Of Range(Of TKey))
  fullname.vb: System.IEquatable(Of Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range(Of TKey))
  name.vb: IEquatable(Of Range(Of TKey))
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1
    name: Range
    nameWithType: Range
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1
    name: Range
    nameWithType: Range
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullname.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.#ctor*
  commentId: Overload:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.#ctor
  isExternal: false
  name: Range
  nameWithType: Range.Range
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range.Range
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TKey
  isExternal: false
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.Low*
  commentId: Overload:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.Low
  isExternal: false
  name: Low
  nameWithType: Range<TKey>.Low
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range<TKey>.Low
  nameWithType.vb: Range(Of TKey).Low
  fullname.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range(Of TKey).Low
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.High*
  commentId: Overload:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.High
  isExternal: false
  name: High
  nameWithType: Range<TKey>.High
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range<TKey>.High
  nameWithType.vb: Range(Of TKey).High
  fullname.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range(Of TKey).High
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.HighIsMax*
  commentId: Overload:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.HighIsMax
  isExternal: false
  name: HighIsMax
  nameWithType: Range<TKey>.HighIsMax
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range<TKey>.HighIsMax
  nameWithType.vb: Range(Of TKey).HighIsMax
  fullname.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range(Of TKey).HighIsMax
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.ToString*
  commentId: Overload:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.ToString
  isExternal: false
  name: ToString
  nameWithType: Range.ToString
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.GetHashCode*
  commentId: Overload:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.GetHashCode
  isExternal: false
  name: GetHashCode
  nameWithType: Range.GetHashCode
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.Equals*
  commentId: Overload:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1.Equals
  isExternal: false
  name: Equals
  nameWithType: Range.Equals
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range.Equals
- uid: System.IEquatable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1}.Equals(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range{{TKey}})
  commentId: M:System.IEquatable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1}.Equals(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range{`0})
  parent: System.IEquatable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Range<TKey>)
  nameWithType: IEquatable<Range<TKey>>.Equals(Range<TKey>)
  fullName: System.IEquatable<Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range<TKey>>.Equals(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range<TKey>)
  nameWithType.vb: IEquatable(Of Range(Of TKey)).Equals(Range(Of TKey))
  fullname.vb: System.IEquatable(Of Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range(Of TKey)).Equals(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range(Of TKey))
  name.vb: Equals(Range(Of TKey))
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Range<TKey>>.Equals
    fullName: System.IEquatable<Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range<TKey>>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1
    name: Range
    nameWithType: Range
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Range(Of TKey)).Equals
    fullName: System.IEquatable(Of Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range(Of TKey)).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1
    name: Range
    nameWithType: Range
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1
  commentId: T:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  isExternal: false
  name: Range<TKey>
  nameWithType: Range<TKey>
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range<TKey>
  nameWithType.vb: Range(Of TKey)
  fullname.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range(Of TKey)
  name.vb: Range(Of TKey)
  spec.csharp:
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1
    name: Range
    nameWithType: Range
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range`1
    name: Range
    nameWithType: Range
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Range
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
