### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo
  commentId: T:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo
  id: SchemaInfo
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema
  children:
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.#ctor
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.Add(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ReferenceTableInfo)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.Add(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ShardedTableInfo)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.ReferenceTables
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.Remove(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ReferenceTableInfo)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.Remove(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ShardedTableInfo)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.ShardedTables
  langs:
  - csharp
  - vb
  name: SchemaInfo
  nameWithType: SchemaInfo
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo
  type: Class
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/SchemaInformation/SchemaInfo.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: SchemaInfo
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/SchemaInformation/SchemaInfo.cs
    startLine: 19
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema
  summary: "\nRepresents information identifying the list of sharded tables and the list of reference\ntables associated with a sharding scheme. Reference tables are replicated across shards.\nThis class is thread safe.\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      [DataContract(Name = "Schema", Namespace = "")]

      [KnownType(typeof (HashSet<ShardedTableInfo>))]

      [KnownType(typeof (HashSet<ReferenceTableInfo>))]

      public class SchemaInfo
    content.vb: >-
      <Serializable>

      <DataContract(Name:="Schema", Namespace:="")>

      <KnownType(GetType(HashSet(Of ShardedTableInfo)))>

      <KnownType(GetType(HashSet(Of ReferenceTableInfo)))>

      Public Class SchemaInfo
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: Schema
    - name: Namespace
      type: System.String
      value: ''
  - type: System.Runtime.Serialization.KnownTypeAttribute
    ctor: System.Runtime.Serialization.KnownTypeAttribute.#ctor(System.Type)
    arguments:
    - type: System.Type
      value: System.Collections.Generic.HashSet{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ShardedTableInfo}
  - type: System.Runtime.Serialization.KnownTypeAttribute
    ctor: System.Runtime.Serialization.KnownTypeAttribute.#ctor(System.Type)
    arguments:
    - type: System.Type
      value: System.Collections.Generic.HashSet{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ReferenceTableInfo}
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.ShardedTables
  commentId: P:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.ShardedTables
  id: ShardedTables
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo
  langs:
  - csharp
  - vb
  name: ShardedTables
  nameWithType: SchemaInfo.ShardedTables
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.ShardedTables
  type: Property
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/SchemaInformation/SchemaInfo.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: ShardedTables
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/SchemaInformation/SchemaInfo.cs
    startLine: 63
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema
  summary: "\nRead-only list of information concerning all sharded tables.\n"
  example: []
  syntax:
    content: public ReadOnlyCollection<ShardedTableInfo> ShardedTables { get; }
    content.vb: Public ReadOnly Property ShardedTables As ReadOnlyCollection(Of ShardedTableInfo)
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ShardedTableInfo}
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.ShardedTables*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.ReferenceTables
  commentId: P:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.ReferenceTables
  id: ReferenceTables
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo
  langs:
  - csharp
  - vb
  name: ReferenceTables
  nameWithType: SchemaInfo.ReferenceTables
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.ReferenceTables
  type: Property
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/SchemaInformation/SchemaInfo.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: ReferenceTables
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/SchemaInformation/SchemaInfo.cs
    startLine: 71
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema
  summary: "\nRead-only list of information concerning all reference tables.\n"
  example: []
  syntax:
    content: public ReadOnlyCollection<ReferenceTableInfo> ReferenceTables { get; }
    content.vb: Public ReadOnly Property ReferenceTables As ReadOnlyCollection(Of ReferenceTableInfo)
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ReferenceTableInfo}
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.ReferenceTables*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.#ctor
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.#ctor
  id: '#ctor'
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo
  langs:
  - csharp
  - vb
  name: SchemaInfo()
  nameWithType: SchemaInfo.SchemaInfo()
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.SchemaInfo()
  type: Constructor
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/SchemaInformation/SchemaInfo.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: .ctor
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/SchemaInformation/SchemaInfo.cs
    startLine: 107
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public SchemaInfo()
    content.vb: Public Sub New
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.Add(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ShardedTableInfo)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.Add(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ShardedTableInfo)
  id: Add(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ShardedTableInfo)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo
  langs:
  - csharp
  - vb
  name: Add(ShardedTableInfo)
  nameWithType: SchemaInfo.Add(ShardedTableInfo)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.Add(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ShardedTableInfo)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/SchemaInformation/SchemaInfo.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: Add
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/SchemaInformation/SchemaInfo.cs
    startLine: 116
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema
  summary: "\nAdds information about a sharded table.\n"
  example: []
  syntax:
    content: public void Add(ShardedTableInfo shardedTableInfo)
    content.vb: Public Sub Add(shardedTableInfo As ShardedTableInfo)
    parameters:
    - id: shardedTableInfo
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ShardedTableInfo
      description: Sharded table info.
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.Add(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ReferenceTableInfo)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.Add(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ReferenceTableInfo)
  id: Add(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ReferenceTableInfo)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo
  langs:
  - csharp
  - vb
  name: Add(ReferenceTableInfo)
  nameWithType: SchemaInfo.Add(ReferenceTableInfo)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.Add(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ReferenceTableInfo)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/SchemaInformation/SchemaInfo.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: Add
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/SchemaInformation/SchemaInfo.cs
    startLine: 147
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema
  summary: "\nAdds information about a reference table.\n"
  example: []
  syntax:
    content: public void Add(ReferenceTableInfo referenceTableInfo)
    content.vb: Public Sub Add(referenceTableInfo As ReferenceTableInfo)
    parameters:
    - id: referenceTableInfo
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ReferenceTableInfo
      description: Reference table info.
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.Remove(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ShardedTableInfo)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.Remove(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ShardedTableInfo)
  id: Remove(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ShardedTableInfo)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo
  langs:
  - csharp
  - vb
  name: Remove(ShardedTableInfo)
  nameWithType: SchemaInfo.Remove(ShardedTableInfo)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.Remove(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ShardedTableInfo)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/SchemaInformation/SchemaInfo.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: Remove
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/SchemaInformation/SchemaInfo.cs
    startLine: 178
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema
  summary: "\nRemoves information about a sharded table.\n"
  example: []
  syntax:
    content: public bool Remove(ShardedTableInfo shardedTableInfo)
    content.vb: Public Function Remove(shardedTableInfo As ShardedTableInfo) As Boolean
    parameters:
    - id: shardedTableInfo
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ShardedTableInfo
      description: Sharded table info.
    return:
      type: System.Boolean
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.Remove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.Remove(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ReferenceTableInfo)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.Remove(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ReferenceTableInfo)
  id: Remove(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ReferenceTableInfo)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo
  langs:
  - csharp
  - vb
  name: Remove(ReferenceTableInfo)
  nameWithType: SchemaInfo.Remove(ReferenceTableInfo)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.Remove(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ReferenceTableInfo)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/SchemaInformation/SchemaInfo.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: Remove
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/SchemaInformation/SchemaInfo.cs
    startLine: 187
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema
  summary: "\nRemoves information about a reference table.\n"
  example: []
  syntax:
    content: public bool Remove(ReferenceTableInfo referenceTableInfo)
    content.vb: Public Function Remove(referenceTableInfo As ReferenceTableInfo) As Boolean
    parameters:
    - id: referenceTableInfo
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ReferenceTableInfo
      description: Reference table info.
    return:
      type: System.Boolean
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.Remove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema
  commentId: N:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema
  isExternal: false
  name: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema
  nameWithType: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.ShardedTables*
  commentId: Overload:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.ShardedTables
  isExternal: false
  name: ShardedTables
  nameWithType: SchemaInfo.ShardedTables
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.ShardedTables
- uid: System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ShardedTableInfo}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ShardedTableInfo}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<ShardedTableInfo>
  nameWithType: ReadOnlyCollection<ShardedTableInfo>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ShardedTableInfo>
  nameWithType.vb: ReadOnlyCollection(Of ShardedTableInfo)
  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ShardedTableInfo)
  name.vb: ReadOnlyCollection(Of ShardedTableInfo)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ShardedTableInfo
    name: ShardedTableInfo
    nameWithType: ShardedTableInfo
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ShardedTableInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ShardedTableInfo
    name: ShardedTableInfo
    nameWithType: ShardedTableInfo
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ShardedTableInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  nameWithType.vb: ReadOnlyCollection(Of T)
  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.ReferenceTables*
  commentId: Overload:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.ReferenceTables
  isExternal: false
  name: ReferenceTables
  nameWithType: SchemaInfo.ReferenceTables
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.ReferenceTables
- uid: System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ReferenceTableInfo}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ReferenceTableInfo}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<ReferenceTableInfo>
  nameWithType: ReadOnlyCollection<ReferenceTableInfo>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ReferenceTableInfo>
  nameWithType.vb: ReadOnlyCollection(Of ReferenceTableInfo)
  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ReferenceTableInfo)
  name.vb: ReadOnlyCollection(Of ReferenceTableInfo)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ReferenceTableInfo
    name: ReferenceTableInfo
    nameWithType: ReferenceTableInfo
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ReferenceTableInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ReferenceTableInfo
    name: ReferenceTableInfo
    nameWithType: ReferenceTableInfo
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ReferenceTableInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo
  commentId: T:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema
  isExternal: false
  name: SchemaInfo
  nameWithType: SchemaInfo
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.#ctor*
  commentId: Overload:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.#ctor
  isExternal: false
  name: SchemaInfo
  nameWithType: SchemaInfo.SchemaInfo
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.SchemaInfo
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.Add*
  commentId: Overload:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.Add
  isExternal: false
  name: Add
  nameWithType: SchemaInfo.Add
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.Add
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ShardedTableInfo
  commentId: T:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ShardedTableInfo
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema
  isExternal: false
  name: ShardedTableInfo
  nameWithType: ShardedTableInfo
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ShardedTableInfo
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ReferenceTableInfo
  commentId: T:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ReferenceTableInfo
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema
  isExternal: false
  name: ReferenceTableInfo
  nameWithType: ReferenceTableInfo
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.ReferenceTableInfo
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.Remove*
  commentId: Overload:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.Remove
  isExternal: false
  name: Remove
  nameWithType: SchemaInfo.Remove
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfo.Remove
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
