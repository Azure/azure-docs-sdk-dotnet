### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager
  commentId: T:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager
  id: RecoveryManager
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery
  children:
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.AttachShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.AttachShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation,System.String)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetachShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetachShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation,System.String)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetectMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetectMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation,System.String)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardInfo(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapType@,System.String@)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardInfo(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapType@,System.String@,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation@)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardLocation(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardMapName(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardMapType(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken,System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardRange})
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShardMapManagerFromShards(System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation})
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShardMapManagerFromShards(System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation},System.String)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShardsFromShardMapManager(System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation})
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShardsFromShardMapManager(System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation},System.String)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.ResolveMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.MappingDifferenceResolution)
  langs:
  - csharp
  - vb
  name: RecoveryManager
  nameWithType: RecoveryManager
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager
  type: Class
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: RecoveryManager
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
    startLine: 22
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery
  summary: "\nManages various recovery related tasks for a shard map manager. It helps \nresolving data corruption issues between shard map information stored\nlocally on the shards and in the global shard map manager database. \nIt also helps with certain 'oops' recovery scenarios where reconstruction\nof shard maps from database backups or database copies is necessary.\n"
  remarks: "\nNote that some of the recovery methods can cause unrecoverable data loss when not used \nproperly. It is recommend to take backups or copies of all databases that participate \nin recovery operations. \n"
  example: []
  syntax:
    content: public sealed class RecoveryManager
    content.vb: Public NotInheritable Class RecoveryManager
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.AttachShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.AttachShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation)
  id: AttachShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager
  langs:
  - csharp
  - vb
  name: AttachShard(ShardLocation)
  nameWithType: RecoveryManager.AttachShard(ShardLocation)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.AttachShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: AttachShard
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
    startLine: 96
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery
  summary: "\nAttaches a shard to the shard map manager. Earlier versions\nof mappings for the same shard map will automatically be updated \nif more recent versions are found on the shard to be attached.\nAfter attaching a shard, <xref href=\"Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetectMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref>\nshould be called to check for any inconsistencies that warrant\nmanual conflict resolution.\n"
  remarks: "\nNote that this method can cause unrecoverable data loss. Make sure you have taken backups or copies \nof your databases and only then proceed with great care.\n"
  example: []
  syntax:
    content: public void AttachShard(ShardLocation location)
    content.vb: Public Sub AttachShard(location As ShardLocation)
    parameters:
    - id: location
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation
      description: Location of the shard being attached.
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.AttachShard*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.AttachShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation,System.String)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.AttachShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation,System.String)
  id: AttachShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation,System.String)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager
  langs:
  - csharp
  - vb
  name: AttachShard(ShardLocation, String)
  nameWithType: RecoveryManager.AttachShard(ShardLocation, String)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.AttachShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation, System.String)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: AttachShard
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
    startLine: 116
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery
  summary: "\nAttaches a shard to the shard map manager. Earlier versions\nof mappings for the same shard map will automatically be updated \nif more recent versions are found on the shard to be attached.\nShard location will be upgraded to latest version of local store as part of this operation.\nAfter attaching a shard, <xref href=\"Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetectMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref>\nshould be called to check for any inconsistencies that warrant\nmanual conflict resolution.\n"
  remarks: "\nNote that this method can cause unrecoverable data loss. Make sure you have taken backups or copies \nof your databases and only then proceed with great care.\n"
  example: []
  syntax:
    content: public void AttachShard(ShardLocation location, string shardMapName)
    content.vb: Public Sub AttachShard(location As ShardLocation, shardMapName As String)
    parameters:
    - id: location
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation
      description: Location of the shard being attached.
    - id: shardMapName
      type: System.String
      description: Optional string to filter on the shard map name.
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.AttachShard*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetachShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetachShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation)
  id: DetachShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager
  langs:
  - csharp
  - vb
  name: DetachShard(ShardLocation)
  nameWithType: RecoveryManager.DetachShard(ShardLocation)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetachShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: DetachShard
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
    startLine: 169
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery
  summary: "\nDetaches the given shard from the shard map manager. Mappings pointing to the \nshard to be deleted will automatically be removed by this method.\n"
  remarks: "\nNote that this method can cause unrecoverable data loss. Make sure you have taken backups or copies \nof your databases and only then proceed with great care.\n"
  example: []
  syntax:
    content: public void DetachShard(ShardLocation location)
    content.vb: Public Sub DetachShard(location As ShardLocation)
    parameters:
    - id: location
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation
      description: Location of the shard being detached.
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetachShard*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetachShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation,System.String)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetachShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation,System.String)
  id: DetachShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation,System.String)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager
  langs:
  - csharp
  - vb
  name: DetachShard(ShardLocation, String)
  nameWithType: RecoveryManager.DetachShard(ShardLocation, String)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetachShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation, System.String)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: DetachShard
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
    startLine: 184
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery
  summary: "\nDetaches the given shard from the shard map manager. Mappings pointing to the \nshard to be deleted will automatically be removed by this method.\n"
  remarks: "\nNote that this method can cause unrecoverable data loss. Make sure you have taken backups or copies \nof your databases and only then proceed with great care.\n"
  example: []
  syntax:
    content: public void DetachShard(ShardLocation location, string shardMapName)
    content.vb: Public Sub DetachShard(location As ShardLocation, shardMapName As String)
    parameters:
    - id: location
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation
      description: Location of the shard being detached.
    - id: shardMapName
      type: System.String
      description: Optional string to filter on shard map name.
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetachShard*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken)
  id: GetMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager
  langs:
  - csharp
  - vb
  name: GetMappingDifferences(RecoveryToken)
  nameWithType: RecoveryManager.GetMappingDifferences(RecoveryToken)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: GetMappingDifferences
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
    startLine: 212
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery
  summary: "\nReturns a dictionary of range-to-location key-value pairs. The location returned is an enumerator stating \nwhether a given range (or point) is present only in the local shard map, only in the global shard map, or both. \nRanges not contained in either shard map cannot contain differences so those ranges are not shown.\n"
  remarks: "\nThis method assumes a previous call to <xref href=\"Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetectMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref> that provides the recovery token parameter.\nThe result of this method is typically used in subsequent calls to resolve inconsistencies such as \n<xref href=\"Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.ResolveMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken%2cMicrosoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.MappingDifferenceResolution)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardRange%7d)\" data-throw-if-not-resolved=\"false\"></xref>. \n"
  example: []
  syntax:
    content: public IDictionary<ShardRange, MappingLocation> GetMappingDifferences(RecoveryToken token)
    content.vb: Public Function GetMappingDifferences(token As RecoveryToken) As IDictionary(Of ShardRange, MappingLocation)
    parameters:
    - id: token
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken
      description: Recovery token returned from <xref href="Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetectMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation%2cSystem.String)" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Collections.Generic.IDictionary{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardRange,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.MappingLocation}
      description: The set of ranges and their corresponding <xref href="Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.MappingLocation" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetMappingDifferences*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardInfo(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapType@,System.String@,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation@)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardInfo(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapType@,System.String@,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation@)
  id: GetShardInfo(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapType@,System.String@,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation@)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager
  langs:
  - csharp
  - vb
  name: GetShardInfo(RecoveryToken, out ShardMapType, out String, out ShardLocation)
  nameWithType: RecoveryManager.GetShardInfo(RecoveryToken, out ShardMapType, out String, out ShardLocation)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardInfo(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken, out Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapType, out System.String, out Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: GetShardInfo
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
    startLine: 235
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery
  summary: "\nRetrieves shard map type, name and shard location based on the token returned from <xref href=\"Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetectMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void GetShardInfo(RecoveryToken token, out ShardMapType mapType, out string shardMapName, out ShardLocation shardLocation)
    content.vb: Public Sub GetShardInfo(token As RecoveryToken, ByRef mapType As ShardMapType, ByRef shardMapName As String, ByRef shardLocation As ShardLocation)
    parameters:
    - id: token
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken
      description: Recovery token returned from <xref href="Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetectMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation%2cSystem.String)" data-throw-if-not-resolved="false"></xref>.
    - id: mapType
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapType
      description: Outputs shard map type (Range or List).
    - id: shardMapName
      type: System.String
      description: Outputs shard map name.
    - id: shardLocation
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation
      description: Outputs shard location
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardInfo*
  nameWithType.vb: RecoveryManager.GetShardInfo(RecoveryToken, ByRef ShardMapType, ByRef String, ByRef ShardLocation)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardInfo(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken, ByRef Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapType, ByRef System.String, ByRef Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation)
  name.vb: GetShardInfo(RecoveryToken, ByRef ShardMapType, ByRef String, ByRef ShardLocation)
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardInfo(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapType@,System.String@)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardInfo(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapType@,System.String@)
  id: GetShardInfo(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapType@,System.String@)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager
  langs:
  - csharp
  - vb
  name: GetShardInfo(RecoveryToken, out ShardMapType, out String)
  nameWithType: RecoveryManager.GetShardInfo(RecoveryToken, out ShardMapType, out String)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardInfo(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken, out Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapType, out System.String)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: GetShardInfo
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
    startLine: 272
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery
  summary: "\nRetrieves shard map type and name based on the token returned from <xref href=\"Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetectMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void GetShardInfo(RecoveryToken token, out ShardMapType mapType, out string shardMapName)
    content.vb: Public Sub GetShardInfo(token As RecoveryToken, ByRef mapType As ShardMapType, ByRef shardMapName As String)
    parameters:
    - id: token
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken
      description: Recovery token returned from <xref href="Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetectMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation%2cSystem.String)" data-throw-if-not-resolved="false"></xref>.
    - id: mapType
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapType
      description: Output Shardmap type (Range or List).
    - id: shardMapName
      type: System.String
      description: Output name of shard map.
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardInfo*
  nameWithType.vb: RecoveryManager.GetShardInfo(RecoveryToken, ByRef ShardMapType, ByRef String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardInfo(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken, ByRef Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapType, ByRef System.String)
  name.vb: GetShardInfo(RecoveryToken, ByRef ShardMapType, ByRef String)
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardMapType(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardMapType(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken)
  id: GetShardMapType(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager
  langs:
  - csharp
  - vb
  name: GetShardMapType(RecoveryToken)
  nameWithType: RecoveryManager.GetShardMapType(RecoveryToken)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardMapType(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: GetShardMapType
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
    startLine: 298
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery
  summary: "\nReturns the shard map type of the shard map processed by <xref href=\"Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetectMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ShardMapType GetShardMapType(RecoveryToken token)
    content.vb: Public Function GetShardMapType(token As RecoveryToken) As ShardMapType
    parameters:
    - id: token
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken
      description: Recovery token returned from <xref href="Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetectMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation%2cSystem.String)" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapType
      description: The type of shard map (list, range, etc...) corresponding to the recovery token.
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardMapType*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardMapName(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardMapName(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken)
  id: GetShardMapName(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager
  langs:
  - csharp
  - vb
  name: GetShardMapName(RecoveryToken)
  nameWithType: RecoveryManager.GetShardMapName(RecoveryToken)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardMapName(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: GetShardMapName
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
    startLine: 321
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery
  summary: "\nReturns the shard map name of the shard map processed by <xref href=\"Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetectMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public string GetShardMapName(RecoveryToken token)
    content.vb: Public Function GetShardMapName(token As RecoveryToken) As String
    parameters:
    - id: token
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken
      description: Recovery token returned from <xref href="Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetectMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation%2cSystem.String)" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.String
      description: The name of the shard map for the given recovery token.
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardMapName*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardLocation(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardLocation(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken)
  id: GetShardLocation(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager
  langs:
  - csharp
  - vb
  name: GetShardLocation(RecoveryToken)
  nameWithType: RecoveryManager.GetShardLocation(RecoveryToken)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardLocation(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: GetShardLocation
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
    startLine: 344
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery
  summary: "\nReturns the shard location of the local shard map processed by <xref href=\"Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetectMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ShardLocation GetShardLocation(RecoveryToken token)
    content.vb: Public Function GetShardLocation(token As RecoveryToken) As ShardLocation
    parameters:
    - id: token
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken
      description: Recovery token returned from <xref href="Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetectMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation%2cSystem.String)" data-throw-if-not-resolved="false"></xref>
    return:
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation
      description: Location of the shard corresponding to the set of mapping differences detected in <xref href="Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetectMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation%2cSystem.String)" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardLocation*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShardsFromShardMapManager(System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation})
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShardsFromShardMapManager(System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation})
  id: RebuildMappingsOnShardsFromShardMapManager(System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation})
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager
  langs:
  - csharp
  - vb
  name: RebuildMappingsOnShardsFromShardMapManager(IEnumerable<ShardLocation>)
  nameWithType: RecoveryManager.RebuildMappingsOnShardsFromShardMapManager(IEnumerable<ShardLocation>)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShardsFromShardMapManager(System.Collections.Generic.IEnumerable<Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation>)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: RebuildMappingsOnShardsFromShardMapManager
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
    startLine: 375
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery
  summary: "\nGiven a collection of shard locations, reconstructs local shard maps based \non the mapping information stored in the global shard map. The specified\nshards need to be registered already in the global shard map. This method only \nrebuilds mappings. It does not rebuild shard membership within the global shard map.\n"
  remarks: "\nNote that this method can cause unrecoverable data loss. Make sure you have taken backups or copies \nof your databases and only then proceed with great care.\n"
  example: []
  syntax:
    content: public void RebuildMappingsOnShardsFromShardMapManager(IEnumerable<ShardLocation> shardLocations)
    content.vb: Public Sub RebuildMappingsOnShardsFromShardMapManager(shardLocations As IEnumerable(Of ShardLocation))
    parameters:
    - id: shardLocations
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation}
      description: Collection of shard locations.
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShardsFromShardMapManager*
  nameWithType.vb: RecoveryManager.RebuildMappingsOnShardsFromShardMapManager(IEnumerable(Of ShardLocation))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShardsFromShardMapManager(System.Collections.Generic.IEnumerable(Of Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation))
  name.vb: RebuildMappingsOnShardsFromShardMapManager(IEnumerable(Of ShardLocation))
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShardsFromShardMapManager(System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation},System.String)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShardsFromShardMapManager(System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation},System.String)
  id: RebuildMappingsOnShardsFromShardMapManager(System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation},System.String)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager
  langs:
  - csharp
  - vb
  name: RebuildMappingsOnShardsFromShardMapManager(IEnumerable<ShardLocation>, String)
  nameWithType: RecoveryManager.RebuildMappingsOnShardsFromShardMapManager(IEnumerable<ShardLocation>, String)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShardsFromShardMapManager(System.Collections.Generic.IEnumerable<Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation>, System.String)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: RebuildMappingsOnShardsFromShardMapManager
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
    startLine: 393
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery
  summary: "\nGiven a collection of shard locations, reconstructs local shard maps based \non the mapping information stored in the global shard map. The specified\nshards need to be registered already in the global shard map. This method only \nrebuilds mappings. It does not rebuild shard membership within the global shard map.\n"
  remarks: "\nNote that this method can cause unrecoverable data loss. Make sure you have taken backups or copies \nof your databases and only then proceed with great care.\n"
  example: []
  syntax:
    content: public void RebuildMappingsOnShardsFromShardMapManager(IEnumerable<ShardLocation> shardLocations, string shardMapName)
    content.vb: Public Sub RebuildMappingsOnShardsFromShardMapManager(shardLocations As IEnumerable(Of ShardLocation), shardMapName As String)
    parameters:
    - id: shardLocations
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation}
      description: Collection of shard locations.
    - id: shardMapName
      type: System.String
      description: Optional parameter to filter by shard map name. If omitted, all shard maps will be rebuilt.
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShardsFromShardMapManager*
  nameWithType.vb: RecoveryManager.RebuildMappingsOnShardsFromShardMapManager(IEnumerable(Of ShardLocation), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShardsFromShardMapManager(System.Collections.Generic.IEnumerable(Of Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation), System.String)
  name.vb: RebuildMappingsOnShardsFromShardMapManager(IEnumerable(Of ShardLocation), String)
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShardMapManagerFromShards(System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation})
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShardMapManagerFromShards(System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation})
  id: RebuildMappingsOnShardMapManagerFromShards(System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation})
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager
  langs:
  - csharp
  - vb
  name: RebuildMappingsOnShardMapManagerFromShards(IEnumerable<ShardLocation>)
  nameWithType: RecoveryManager.RebuildMappingsOnShardMapManagerFromShards(IEnumerable<ShardLocation>)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShardMapManagerFromShards(System.Collections.Generic.IEnumerable<Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation>)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: RebuildMappingsOnShardMapManagerFromShards
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
    startLine: 419
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery
  summary: "\nGiven a collection of shard locations, reconstructs the shard map manager based on mapping information\nstored in the individual shards. The specified\nshards need to be registered already in the global shard map. This method only \nrebuilds mappings. It does not rebuild shard membership within the global shard map.\nIf the information in the individual shard maps is or becomes inconsistent, the behavior is undefined.\nNo cross shard locks are taken, so if any shards become inconsistent during the execution of this\nmethod, the final state of the global shard map may be corrupt.\n"
  remarks: "\nNote that this method can cause unrecoverable data loss. Make sure you have taken backups or copies \nof your databases and only then proceed with great care.\n"
  example: []
  syntax:
    content: public void RebuildMappingsOnShardMapManagerFromShards(IEnumerable<ShardLocation> shardLocations)
    content.vb: Public Sub RebuildMappingsOnShardMapManagerFromShards(shardLocations As IEnumerable(Of ShardLocation))
    parameters:
    - id: shardLocations
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation}
      description: Collection of shard locations.
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShardMapManagerFromShards*
  nameWithType.vb: RecoveryManager.RebuildMappingsOnShardMapManagerFromShards(IEnumerable(Of ShardLocation))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShardMapManagerFromShards(System.Collections.Generic.IEnumerable(Of Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation))
  name.vb: RebuildMappingsOnShardMapManagerFromShards(IEnumerable(Of ShardLocation))
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShardMapManagerFromShards(System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation},System.String)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShardMapManagerFromShards(System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation},System.String)
  id: RebuildMappingsOnShardMapManagerFromShards(System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation},System.String)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager
  langs:
  - csharp
  - vb
  name: RebuildMappingsOnShardMapManagerFromShards(IEnumerable<ShardLocation>, String)
  nameWithType: RecoveryManager.RebuildMappingsOnShardMapManagerFromShards(IEnumerable<ShardLocation>, String)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShardMapManagerFromShards(System.Collections.Generic.IEnumerable<Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation>, System.String)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: RebuildMappingsOnShardMapManagerFromShards
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
    startLine: 440
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery
  summary: "\nGiven a collection of shard locations, reconstructs the shard map manager based on mapping information\nstored in the individual shards. The specified\nshards need to be registered already in the global shard map. This method only \nrebuilds mappings. It does not rebuild shard membership within the global shard map.\nIf the information in the individual shard maps is or becomes inconsistent, the behavior is undefined.\nNo cross shard locks are taken, so if any shards become inconsistent during the execution of this\nmethod, the final state of the global shard map may be corrupt.\n"
  remarks: "\nNote that this method can cause unrecoverable data loss. Make sure you have taken backups or copies \nof your databases and only then proceed with great care.\n"
  example: []
  syntax:
    content: public void RebuildMappingsOnShardMapManagerFromShards(IEnumerable<ShardLocation> shardLocations, string shardMapName)
    content.vb: Public Sub RebuildMappingsOnShardMapManagerFromShards(shardLocations As IEnumerable(Of ShardLocation), shardMapName As String)
    parameters:
    - id: shardLocations
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation}
      description: Collection of shard locations.
    - id: shardMapName
      type: System.String
      description: Optional name of shard map. If omitted, will attempt to recover from all shard maps present on each shard.
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShardMapManagerFromShards*
  nameWithType.vb: RecoveryManager.RebuildMappingsOnShardMapManagerFromShards(IEnumerable(Of ShardLocation), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShardMapManagerFromShards(System.Collections.Generic.IEnumerable(Of Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation), System.String)
  name.vb: RebuildMappingsOnShardMapManagerFromShards(IEnumerable(Of ShardLocation), String)
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken,System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardRange})
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken,System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardRange})
  id: RebuildMappingsOnShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken,System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardRange})
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager
  langs:
  - csharp
  - vb
  name: RebuildMappingsOnShard(RecoveryToken, IEnumerable<ShardRange>)
  nameWithType: RecoveryManager.RebuildMappingsOnShard(RecoveryToken, IEnumerable<ShardRange>)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken, System.Collections.Generic.IEnumerable<Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardRange>)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: RebuildMappingsOnShard
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
    startLine: 470
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery
  summary: "\nRebuilds a local range shard map from a list of inconsistent shard ranges\ndetected by <xref href=\"Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetectMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref> and then accessed by <xref href=\"Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken)\" data-throw-if-not-resolved=\"false\"></xref>.\nThe resulting local range shard map will always still be inconsistent with \nthe global shard map in the shard map manager database. A subsequent call to <xref href=\"Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.ResolveMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken%2cMicrosoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.MappingDifferenceResolution)\" data-throw-if-not-resolved=\"false\"></xref>\nis necessary to bring the system back to a healthy state.\n"
  remarks: "\nNote that this method can cause unrecoverable data loss. Make sure you have taken backups or copies \nof your databases and only then proceed with great care.\n\nOnly shard ranges with inconsistencies can be rebuilt using this method. All ranges with no inconsistencies between\nthe local shard and the global shard map will be kept intact on the local shard and are not affected by this call.\nSubsequent changes to the non-conflicting mappings can be made later using the regular interfaces in the shard map manager. \nIt is not necessary to use the recovery manager to change non-conflicting mappings.\n"
  example: []
  syntax:
    content: public void RebuildMappingsOnShard(RecoveryToken token, IEnumerable<ShardRange> ranges)
    content.vb: Public Sub RebuildMappingsOnShard(token As RecoveryToken, ranges As IEnumerable(Of ShardRange))
    parameters:
    - id: token
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken
      description: The recovery token from a previous call to <xref href="Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetectMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation%2cSystem.String)" data-throw-if-not-resolved="false"></xref>.
    - id: ranges
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardRange}
      description: The set of ranges to keep on the local shard when rebuilding the local shard map.
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShard*
  nameWithType.vb: RecoveryManager.RebuildMappingsOnShard(RecoveryToken, IEnumerable(Of ShardRange))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardRange))
  name.vb: RebuildMappingsOnShard(RecoveryToken, IEnumerable(Of ShardRange))
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetectMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetectMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation)
  id: DetectMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager
  langs:
  - csharp
  - vb
  name: DetectMappingDifferences(ShardLocation)
  nameWithType: RecoveryManager.DetectMappingDifferences(ShardLocation)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetectMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: DetectMappingDifferences
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
    startLine: 549
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery
  summary: "\nEnumerates differences in the mappings between the global shard map manager database and the local shard \ndatabase in the specified shard location.\n"
  example: []
  syntax:
    content: public IEnumerable<RecoveryToken> DetectMappingDifferences(ShardLocation location)
    content.vb: Public Function DetectMappingDifferences(location As ShardLocation) As IEnumerable(Of RecoveryToken)
    parameters:
    - id: location
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation
      description: Location of shard for which to detect inconsistencies.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken}
      description: Collection of tokens to be used for further resolution tasks (see <xref href="Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.ResolveMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken%2cMicrosoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.MappingDifferenceResolution)" data-throw-if-not-resolved="false"></xref>).
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetectMappingDifferences*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetectMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation,System.String)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetectMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation,System.String)
  id: DetectMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation,System.String)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager
  langs:
  - csharp
  - vb
  name: DetectMappingDifferences(ShardLocation, String)
  nameWithType: RecoveryManager.DetectMappingDifferences(ShardLocation, String)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetectMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation, System.String)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: DetectMappingDifferences
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
    startLine: 561
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery
  summary: "\nEnumerates differences in the mappings between the global shard map manager database and the local shard \ndatabase in the specified shard location.\n"
  example: []
  syntax:
    content: public IEnumerable<RecoveryToken> DetectMappingDifferences(ShardLocation location, string shardMapName)
    content.vb: Public Function DetectMappingDifferences(location As ShardLocation, shardMapName As String) As IEnumerable(Of RecoveryToken)
    parameters:
    - id: location
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation
      description: Location of shard for which to detect inconsistencies.
    - id: shardMapName
      type: System.String
      description: Optional parameter to specify a particular shard map.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken}
      description: Collection of tokens to be used for further resolution tasks (see <xref href="Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.ResolveMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken%2cMicrosoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.MappingDifferenceResolution)" data-throw-if-not-resolved="false"></xref>).
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetectMappingDifferences*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.ResolveMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.MappingDifferenceResolution)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.ResolveMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.MappingDifferenceResolution)
  id: ResolveMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.MappingDifferenceResolution)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager
  langs:
  - csharp
  - vb
  name: ResolveMappingDifferences(RecoveryToken, MappingDifferenceResolution)
  nameWithType: RecoveryManager.ResolveMappingDifferences(RecoveryToken, MappingDifferenceResolution)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.ResolveMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken, Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.MappingDifferenceResolution)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: ResolveMappingDifferences
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Recovery/RecoveryManager.cs
    startLine: 838
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery
  summary: "\nSelects one of the shard maps (either local or global) as a source of truth and brings \nmappings on both shard maps in sync.\n"
  remarks: "\nNote that this method can cause unrecoverable data loss. Make sure you have taken backups or copies \nof your databases and only then proceed with great care.\n"
  example: []
  syntax:
    content: public void ResolveMappingDifferences(RecoveryToken token, MappingDifferenceResolution resolution)
    content.vb: Public Sub ResolveMappingDifferences(token As RecoveryToken, resolution As MappingDifferenceResolution)
    parameters:
    - id: token
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken
      description: Recovery token returned from <xref href="Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetectMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation%2cSystem.String)" data-throw-if-not-resolved="false"></xref>.
    - id: resolution
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.MappingDifferenceResolution
      description: The resolution strategy to be used for resolution.
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.ResolveMappingDifferences*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery
  commentId: N:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery
  isExternal: false
  name: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery
  nameWithType: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetectMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation,System.String)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetectMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation,System.String)
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.AttachShard*
  commentId: Overload:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.AttachShard
  isExternal: false
  name: AttachShard
  nameWithType: RecoveryManager.AttachShard
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.AttachShard
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation
  commentId: T:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  isExternal: false
  name: ShardLocation
  nameWithType: ShardLocation
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  commentId: N:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  isExternal: false
  name: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  nameWithType: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetachShard*
  commentId: Overload:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetachShard
  isExternal: false
  name: DetachShard
  nameWithType: RecoveryManager.DetachShard
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetachShard
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.MappingLocation
  commentId: T:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.MappingLocation
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery
  isExternal: false
  name: MappingLocation
  nameWithType: MappingLocation
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.MappingLocation
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.ResolveMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.MappingDifferenceResolution)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.ResolveMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.MappingDifferenceResolution)
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken,System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardRange})
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken,System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardRange})
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetMappingDifferences*
  commentId: Overload:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetMappingDifferences
  isExternal: false
  name: GetMappingDifferences
  nameWithType: RecoveryManager.GetMappingDifferences
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetMappingDifferences
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken
  commentId: T:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery
  isExternal: false
  name: RecoveryToken
  nameWithType: RecoveryToken
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken
- uid: System.Collections.Generic.IDictionary{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardRange,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.MappingLocation}
  commentId: T:System.Collections.Generic.IDictionary{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardRange,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.MappingLocation}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<ShardRange, MappingLocation>
  nameWithType: IDictionary<ShardRange, MappingLocation>
  fullName: System.Collections.Generic.IDictionary<Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardRange, Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.MappingLocation>
  nameWithType.vb: IDictionary(Of ShardRange, MappingLocation)
  fullname.vb: System.Collections.Generic.IDictionary(Of Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardRange, Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.MappingLocation)
  name.vb: IDictionary(Of ShardRange, MappingLocation)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardRange
    name: ShardRange
    nameWithType: ShardRange
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.MappingLocation
    name: MappingLocation
    nameWithType: MappingLocation
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.MappingLocation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardRange
    name: ShardRange
    nameWithType: ShardRange
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardRange
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.MappingLocation
    name: MappingLocation
    nameWithType: MappingLocation
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.MappingLocation
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardInfo*
  commentId: Overload:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardInfo
  isExternal: false
  name: GetShardInfo
  nameWithType: RecoveryManager.GetShardInfo
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardInfo
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapType
  commentId: T:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapType
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  isExternal: false
  name: ShardMapType
  nameWithType: ShardMapType
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapType
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardMapType*
  commentId: Overload:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardMapType
  isExternal: false
  name: GetShardMapType
  nameWithType: RecoveryManager.GetShardMapType
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardMapType
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardMapName*
  commentId: Overload:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardMapName
  isExternal: false
  name: GetShardMapName
  nameWithType: RecoveryManager.GetShardMapName
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardMapName
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardLocation*
  commentId: Overload:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardLocation
  isExternal: false
  name: GetShardLocation
  nameWithType: RecoveryManager.GetShardLocation
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetShardLocation
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShardsFromShardMapManager*
  commentId: Overload:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShardsFromShardMapManager
  isExternal: false
  name: RebuildMappingsOnShardsFromShardMapManager
  nameWithType: RecoveryManager.RebuildMappingsOnShardsFromShardMapManager
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShardsFromShardMapManager
- uid: System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ShardLocation>
  nameWithType: IEnumerable<ShardLocation>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation>
  nameWithType.vb: IEnumerable(Of ShardLocation)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation)
  name.vb: IEnumerable(Of ShardLocation)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation
    name: ShardLocation
    nameWithType: ShardLocation
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation
    name: ShardLocation
    nameWithType: ShardLocation
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShardMapManagerFromShards*
  commentId: Overload:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShardMapManagerFromShards
  isExternal: false
  name: RebuildMappingsOnShardMapManagerFromShards
  nameWithType: RecoveryManager.RebuildMappingsOnShardMapManagerFromShards
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShardMapManagerFromShards
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.GetMappingDifferences(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken)
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShard*
  commentId: Overload:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShard
  isExternal: false
  name: RebuildMappingsOnShard
  nameWithType: RecoveryManager.RebuildMappingsOnShard
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.RebuildMappingsOnShard
- uid: System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardRange}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardRange}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ShardRange>
  nameWithType: IEnumerable<ShardRange>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardRange>
  nameWithType.vb: IEnumerable(Of ShardRange)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardRange)
  name.vb: IEnumerable(Of ShardRange)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardRange
    name: ShardRange
    nameWithType: ShardRange
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardRange
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardRange
    name: ShardRange
    nameWithType: ShardRange
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardRange
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetectMappingDifferences*
  commentId: Overload:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetectMappingDifferences
  isExternal: false
  name: DetectMappingDifferences
  nameWithType: RecoveryManager.DetectMappingDifferences
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.DetectMappingDifferences
- uid: System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<RecoveryToken>
  nameWithType: IEnumerable<RecoveryToken>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken>
  nameWithType.vb: IEnumerable(Of RecoveryToken)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken)
  name.vb: IEnumerable(Of RecoveryToken)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken
    name: RecoveryToken
    nameWithType: RecoveryToken
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken
    name: RecoveryToken
    nameWithType: RecoveryToken
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.ResolveMappingDifferences*
  commentId: Overload:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.ResolveMappingDifferences
  isExternal: false
  name: ResolveMappingDifferences
  nameWithType: RecoveryManager.ResolveMappingDifferences
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager.ResolveMappingDifferences
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.MappingDifferenceResolution
  commentId: T:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.MappingDifferenceResolution
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery
  isExternal: false
  name: MappingDifferenceResolution
  nameWithType: MappingDifferenceResolution
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.MappingDifferenceResolution
