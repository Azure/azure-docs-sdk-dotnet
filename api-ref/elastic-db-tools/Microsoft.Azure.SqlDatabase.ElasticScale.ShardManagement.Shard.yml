### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
  commentId: T:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
  id: Shard
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  children:
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.Clone
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.Equals(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.Equals(System.Object)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.GetHashCode
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.Location
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.OpenConnection(System.String)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.OpenConnection(System.String,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.OpenConnectionAsync(System.String)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.OpenConnectionAsync(System.String,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.ToString
  langs:
  - csharp
  - vb
  name: Shard
  nameWithType: Shard
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
  type: Class
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Shard/Shard.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: Shard
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Shard/Shard.cs
    startLine: 62
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nRepresentation of a single shard. Shards are basically locators for\ndata sources i.e. <xref href=\"Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation\" data-throw-if-not-resolved=\"false\"></xref>s that have been\nregistered with a shard map. Shards are used in\nmapping as targets of mappings (see <xref href=\"Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.PointMapping%601\" data-throw-if-not-resolved=\"false\"></xref>\nand <xref href=\"Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.RangeMapping%601\" data-throw-if-not-resolved=\"false\"></xref>).\n"
  example: []
  syntax:
    content: 'public sealed class Shard : IShardProvider<ShardLocation>, IShardProvider, ICloneable<Shard>, IEquatable<Shard>'
    content.vb: >-
      Public NotInheritable Class Shard
          Implements IShardProvider(Of ShardLocation), IShardProvider, ICloneable(Of Shard), IEquatable(Of Shard)
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.Location
  commentId: P:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.Location
  id: Location
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
  langs:
  - csharp
  - vb
  name: Location
  nameWithType: Shard.Location
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.Location
  type: Property
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Shard/Shard.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: Location
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Shard/Shard.cs
    startLine: 121
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nGets Location of the shard.\n"
  example: []
  syntax:
    content: public ShardLocation Location { get; }
    content.vb: Public ReadOnly Property Location As ShardLocation
    parameters: []
    return:
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.Location*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.OpenConnection(System.String)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.OpenConnection(System.String)
  id: OpenConnection(System.String)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
  langs:
  - csharp
  - vb
  name: OpenConnection(String)
  nameWithType: Shard.OpenConnection(String)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.OpenConnection(System.String)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Shard/Shard.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: OpenConnection
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Shard/Shard.cs
    startLine: 251
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nOpens a regular <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> to the specified shard, with <xref href=\"Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions.Validate\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nNote that the <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> object returned by this call is not protected against transient faults. \nCallers should follow best practices to protect the connection against transient faults in their application code, e.g., by using the transient fault handling \nfunctionality in the Enterprise Library from Microsoft Patterns and Practices team.\n"
  example: []
  syntax:
    content: public SqlConnection OpenConnection(string connectionString)
    content.vb: Public Function OpenConnection(connectionString As String) As SqlConnection
    parameters:
    - id: connectionString
      type: System.String
      description: "\nConnection string with credential information such as SQL Server credentials or Integrated Security settings. \nThe hostname of the server and the database name for the shard are obtained from the lookup operation for key.\n"
    return:
      type: System.Data.SqlClient.SqlConnection
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.OpenConnection*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.OpenConnection(System.String,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.OpenConnection(System.String,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions)
  id: OpenConnection(System.String,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
  langs:
  - csharp
  - vb
  name: OpenConnection(String, ConnectionOptions)
  nameWithType: Shard.OpenConnection(String, ConnectionOptions)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.OpenConnection(System.String, Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Shard/Shard.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: OpenConnection
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Shard/Shard.cs
    startLine: 269
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nOpens a regular <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> to the specified shard.\n"
  remarks: "\nNote that the <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> object returned by this call is not protected against transient faults. \nCallers should follow best practices to protect the connection against transient faults in their application code, e.g., by using the transient fault handling \nfunctionality in the Enterprise Library from Microsoft Patterns and Practices team.\n"
  example: []
  syntax:
    content: public SqlConnection OpenConnection(string connectionString, ConnectionOptions options)
    content.vb: Public Function OpenConnection(connectionString As String, options As ConnectionOptions) As SqlConnection
    parameters:
    - id: connectionString
      type: System.String
      description: "\nConnection string with credential information such as SQL Server credentials or Integrated Security settings. \nThe hostname of the server and the database name for the shard are obtained from the lookup operation for key.\n"
    - id: options
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions
      description: Options for validation operations to perform on opened connection.
    return:
      type: System.Data.SqlClient.SqlConnection
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.OpenConnection*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.OpenConnectionAsync(System.String)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.OpenConnectionAsync(System.String)
  id: OpenConnectionAsync(System.String)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
  langs:
  - csharp
  - vb
  name: OpenConnectionAsync(String)
  nameWithType: Shard.OpenConnectionAsync(String)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.OpenConnectionAsync(System.String)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Shard/Shard.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: OpenConnectionAsync
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Shard/Shard.cs
    startLine: 295
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nAsynchronously opens a regular <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> to the specified shard, with <xref href=\"Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions.Validate\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nNote that the <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> object returned by this call is not protected against transient faults. \nCallers should follow best practices to protect the connection against transient faults in their application code, e.g., by using the transient fault handling \nfunctionality in the Enterprise Library from Microsoft Patterns and Practices team.\nAll non-usage errors will be propagated via the returned Task.\n"
  example: []
  syntax:
    content: public Task<SqlConnection> OpenConnectionAsync(string connectionString)
    content.vb: Public Function OpenConnectionAsync(connectionString As String) As Task(Of SqlConnection)
    parameters:
    - id: connectionString
      type: System.String
      description: "\nConnection string with credential information such as SQL Server credentials or Integrated Security settings. \nThe hostname of the server and the database name for the shard are obtained from the lookup operation for key.\n"
    return:
      type: System.Threading.Tasks.Task{System.Data.SqlClient.SqlConnection}
      description: A Task encapsulating an opened SqlConnection
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.OpenConnectionAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.OpenConnectionAsync(System.String,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.OpenConnectionAsync(System.String,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions)
  id: OpenConnectionAsync(System.String,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
  langs:
  - csharp
  - vb
  name: OpenConnectionAsync(String, ConnectionOptions)
  nameWithType: Shard.OpenConnectionAsync(String, ConnectionOptions)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.OpenConnectionAsync(System.String, Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Shard/Shard.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: OpenConnectionAsync
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Shard/Shard.cs
    startLine: 315
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nAsynchronously a regular <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> to the specified shard.\n"
  remarks: "\nNote that the <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> object returned by this call is not protected against transient faults. \nCallers should follow best practices to protect the connection against transient faults in their application code, e.g., by using the transient fault handling \nfunctionality in the Enterprise Library from Microsoft Patterns and Practices team.\nAll non-usage errors will be propagated via the returned Task.\n"
  example: []
  syntax:
    content: public Task<SqlConnection> OpenConnectionAsync(string connectionString, ConnectionOptions options)
    content.vb: Public Function OpenConnectionAsync(connectionString As String, options As ConnectionOptions) As Task(Of SqlConnection)
    parameters:
    - id: connectionString
      type: System.String
      description: "\nConnection string with credential information such as SQL Server credentials or Integrated Security settings. \nThe hostname of the server and the database name for the shard are obtained from the lookup operation for key.\n"
    - id: options
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions
      description: Options for validation operations to perform on opened connection.
    return:
      type: System.Threading.Tasks.Task{System.Data.SqlClient.SqlConnection}
      description: A Task encapsulating an opened SqlConnection
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.OpenConnectionAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.Clone
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.Clone
  id: Clone
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: Shard.Clone()
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.Clone()
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Shard/Shard.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: Clone
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Shard/Shard.cs
    startLine: 409
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nClones the instance.\n"
  example: []
  syntax:
    content: public Shard Clone()
    content.vb: Public Function Clone As Shard
    return:
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
      description: Clone of the instance.
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.Clone*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.ToString
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.ToString
  id: ToString
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Shard.ToString()
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.ToString()
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Shard/Shard.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: ToString
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Shard/Shard.cs
    startLine: 420
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nConverts the object to its string representation.\n"
  example: []
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: String representation of the object.
  overridden: System.Object.ToString
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.Equals(System.Object)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.Equals(System.Object)
  id: Equals(System.Object)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Shard.Equals(Object)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.Equals(System.Object)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Shard/Shard.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: Equals
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Shard/Shard.cs
    startLine: 432
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nDetermines whether the specified object is equal to the current object.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare with the current object.
    return:
      type: System.Boolean
      description: True if the specified object is equal to the current object; otherwise, false.
  overridden: System.Object.Equals(System.Object)
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.Equals(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.Equals(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard)
  id: Equals(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
  langs:
  - csharp
  - vb
  name: Equals(Shard)
  nameWithType: Shard.Equals(Shard)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.Equals(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Shard/Shard.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: Equals
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Shard/Shard.cs
    startLine: 442
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nPerforms equality comparison with given Shard.\n"
  example: []
  syntax:
    content: public bool Equals(Shard other)
    content.vb: Public Function Equals(other As Shard) As Boolean
    parameters:
    - id: other
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
      description: Shard to compare with.
    return:
      type: System.Boolean
      description: True if this object is equal to other object, false otherwise.
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.Equals*
  implements:
  - System.IEquatable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard}.Equals(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.GetHashCode
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.GetHashCode
  id: GetHashCode
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Shard.GetHashCode()
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.GetHashCode()
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/Shard/Shard.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: GetHashCode
    path: src/elastic-db-tools/Src/ElasticScale.Client/ShardManagement/Shard/Shard.cs
    startLine: 472
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nCalculates the hash code for this instance.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: Hash code for the object.
  overridden: System.Object.GetHashCode
  overload: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation
  commentId: T:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  isExternal: false
  name: ShardLocation
  nameWithType: ShardLocation
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.PointMapping`1
  commentId: T:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.PointMapping`1
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  isExternal: false
  name: PointMapping<TKey>
  nameWithType: PointMapping<TKey>
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.PointMapping<TKey>
  nameWithType.vb: PointMapping(Of TKey)
  fullname.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.PointMapping(Of TKey)
  name.vb: PointMapping(Of TKey)
  spec.csharp:
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.PointMapping`1
    name: PointMapping
    nameWithType: PointMapping
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.PointMapping
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.PointMapping`1
    name: PointMapping
    nameWithType: PointMapping
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.PointMapping
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.RangeMapping`1
  commentId: T:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.RangeMapping`1
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  isExternal: false
  name: RangeMapping<TKey>
  nameWithType: RangeMapping<TKey>
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.RangeMapping<TKey>
  nameWithType.vb: RangeMapping(Of TKey)
  fullname.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.RangeMapping(Of TKey)
  name.vb: RangeMapping(Of TKey)
  spec.csharp:
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.RangeMapping`1
    name: RangeMapping
    nameWithType: RangeMapping
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.RangeMapping
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.RangeMapping`1
    name: RangeMapping
    nameWithType: RangeMapping
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.RangeMapping
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  commentId: N:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  isExternal: false
  name: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  nameWithType: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IEquatable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard}
  commentId: T:System.IEquatable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Shard>
  nameWithType: IEquatable<Shard>
  fullName: System.IEquatable<Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard>
  nameWithType.vb: IEquatable(Of Shard)
  fullname.vb: System.IEquatable(Of Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard)
  name.vb: IEquatable(Of Shard)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
    name: Shard
    nameWithType: Shard
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
    name: Shard
    nameWithType: Shard
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullname.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.Location*
  commentId: Overload:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.Location
  isExternal: false
  name: Location
  nameWithType: Shard.Location
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.Location
- uid: System.Data.SqlClient.SqlConnection
  commentId: T:System.Data.SqlClient.SqlConnection
  parent: System.Data.SqlClient
  isExternal: true
  name: SqlConnection
  nameWithType: SqlConnection
  fullName: System.Data.SqlClient.SqlConnection
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions.Validate
  commentId: F:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions.Validate
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.OpenConnection*
  commentId: Overload:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.OpenConnection
  isExternal: false
  name: OpenConnection
  nameWithType: Shard.OpenConnection
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.OpenConnection
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.SqlClient
  commentId: N:System.Data.SqlClient
  isExternal: false
  name: System.Data.SqlClient
  nameWithType: System.Data.SqlClient
  fullName: System.Data.SqlClient
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions
  commentId: T:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  isExternal: false
  name: ConnectionOptions
  nameWithType: ConnectionOptions
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.OpenConnectionAsync*
  commentId: Overload:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.OpenConnectionAsync
  isExternal: false
  name: OpenConnectionAsync
  nameWithType: Shard.OpenConnectionAsync
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.OpenConnectionAsync
- uid: System.Threading.Tasks.Task{System.Data.SqlClient.SqlConnection}
  commentId: T:System.Threading.Tasks.Task{System.Data.SqlClient.SqlConnection}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<SqlConnection>
  nameWithType: Task<SqlConnection>
  fullName: System.Threading.Tasks.Task<System.Data.SqlClient.SqlConnection>
  nameWithType.vb: Task(Of SqlConnection)
  fullname.vb: System.Threading.Tasks.Task(Of System.Data.SqlClient.SqlConnection)
  name.vb: Task(Of SqlConnection)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.SqlClient.SqlConnection
    name: SqlConnection
    nameWithType: SqlConnection
    fullName: System.Data.SqlClient.SqlConnection
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.SqlClient.SqlConnection
    name: SqlConnection
    nameWithType: SqlConnection
    fullName: System.Data.SqlClient.SqlConnection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.Clone*
  commentId: Overload:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.Clone
  isExternal: false
  name: Clone
  nameWithType: Shard.Clone
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.Clone
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
  commentId: T:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  isExternal: false
  name: Shard
  nameWithType: Shard
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.ToString*
  commentId: Overload:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.ToString
  isExternal: false
  name: ToString
  nameWithType: Shard.ToString
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.ToString
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.Equals*
  commentId: Overload:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.Equals
  isExternal: false
  name: Equals
  nameWithType: Shard.Equals
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IEquatable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard}.Equals(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard)
  commentId: M:System.IEquatable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard}.Equals(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard)
  parent: System.IEquatable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Shard)
  nameWithType: IEquatable<Shard>.Equals(Shard)
  fullName: System.IEquatable<Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard>.Equals(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard)
  nameWithType.vb: IEquatable(Of Shard).Equals(Shard)
  fullname.vb: System.IEquatable(Of Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard).Equals(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Shard>.Equals
    fullName: System.IEquatable<Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
    name: Shard
    nameWithType: Shard
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Shard).Equals
    fullName: System.IEquatable(Of Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
    name: Shard
    nameWithType: Shard
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.GetHashCode*
  commentId: Overload:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.GetHashCode
  isExternal: false
  name: GetHashCode
  nameWithType: Shard.GetHashCode
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
