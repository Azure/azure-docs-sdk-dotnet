### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Search.IndexBatchException
  commentId: T:Microsoft.Azure.Search.IndexBatchException
  id: IndexBatchException
  parent: Microsoft.Azure.Search
  children:
  - Microsoft.Azure.Search.IndexBatchException.#ctor(Microsoft.Azure.Search.Models.DocumentIndexResult)
  - Microsoft.Azure.Search.IndexBatchException.FindFailedActionsToRetry(Microsoft.Azure.Search.Models.IndexBatch,System.String)
  - Microsoft.Azure.Search.IndexBatchException.FindFailedActionsToRetry``1(Microsoft.Azure.Search.Models.IndexBatch{``0},System.Func{``0,System.String})
  - Microsoft.Azure.Search.IndexBatchException.IndexingResults
  langs:
  - csharp
  - vb
  name: IndexBatchException
  nameWithType: IndexBatchException
  fullName: Microsoft.Azure.Search.IndexBatchException
  type: Class
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/IndexBatchException.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: IndexBatchException
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/IndexBatchException.cs
    startLine: 15
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search
  summary: "\nException thrown when an indexing operation only partially succeeds.\n"
  example: []
  syntax:
    content: 'public class IndexBatchException : CloudException, ISerializable, _Exception'
    content.vb: >-
      Public Class IndexBatchException
          Inherits CloudException
          Implements ISerializable, _Exception
  inheritance:
  - System.Object
  - System.Exception
  - Microsoft.Rest.RestException
  - Microsoft.Rest.Azure.CloudException
  implements:
  - System.Runtime.Serialization.ISerializable
  - System.Runtime.InteropServices._Exception
  inheritedMembers:
  - Microsoft.Rest.Azure.CloudException.Request
  - Microsoft.Rest.Azure.CloudException.Response
  - Microsoft.Rest.Azure.CloudException.Body
  - Microsoft.Rest.Azure.CloudException.RequestId
  - System.Exception.GetBaseException
  - System.Exception.ToString
  - System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Exception.GetType
  - System.Exception.Message
  - System.Exception.Data
  - System.Exception.InnerException
  - System.Exception.TargetSite
  - System.Exception.StackTrace
  - System.Exception.HelpLink
  - System.Exception.Source
  - System.Exception.HResult
  - System.Exception.SerializeObjectState
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.MemberwiseClone
  extensionMethods:
  - Microsoft.Rest.Azure.CloudException.Microsoft.Rest.Azure.CloudExceptionExtensions.IsAccessConditionFailed
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Search.IndexBatchException.#ctor(Microsoft.Azure.Search.Models.DocumentIndexResult)
  commentId: M:Microsoft.Azure.Search.IndexBatchException.#ctor(Microsoft.Azure.Search.Models.DocumentIndexResult)
  id: '#ctor(Microsoft.Azure.Search.Models.DocumentIndexResult)'
  parent: Microsoft.Azure.Search.IndexBatchException
  langs:
  - csharp
  - vb
  name: IndexBatchException(DocumentIndexResult)
  nameWithType: IndexBatchException.IndexBatchException(DocumentIndexResult)
  fullName: Microsoft.Azure.Search.IndexBatchException.IndexBatchException(Microsoft.Azure.Search.Models.DocumentIndexResult)
  type: Constructor
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/IndexBatchException.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/IndexBatchException.cs
    startLine: 27
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search
  summary: "\nInitializes a new instance of the IndexBatchException class.\n"
  example: []
  syntax:
    content: public IndexBatchException(DocumentIndexResult documentIndexResult)
    content.vb: Public Sub New(documentIndexResult As DocumentIndexResult)
    parameters:
    - id: documentIndexResult
      type: Microsoft.Azure.Search.Models.DocumentIndexResult
      description: The deserialized response from the index request.
  overload: Microsoft.Azure.Search.IndexBatchException.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.IndexBatchException.IndexingResults
  commentId: P:Microsoft.Azure.Search.IndexBatchException.IndexingResults
  id: IndexingResults
  parent: Microsoft.Azure.Search.IndexBatchException
  langs:
  - csharp
  - vb
  name: IndexingResults
  nameWithType: IndexBatchException.IndexingResults
  fullName: Microsoft.Azure.Search.IndexBatchException.IndexingResults
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/IndexBatchException.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: IndexingResults
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/IndexBatchException.cs
    startLine: 38
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search
  summary: "\nGets the results for the index batch that contains the status for each individual index action.\n"
  example: []
  syntax:
    content: public IList<IndexingResult> IndexingResults { get; }
    content.vb: Public ReadOnly Property IndexingResults As IList(Of IndexingResult)
    parameters: []
    return:
      type: System.Collections.Generic.IList{Microsoft.Azure.Search.Models.IndexingResult}
  overload: Microsoft.Azure.Search.IndexBatchException.IndexingResults*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Search.IndexBatchException.FindFailedActionsToRetry(Microsoft.Azure.Search.Models.IndexBatch,System.String)
  commentId: M:Microsoft.Azure.Search.IndexBatchException.FindFailedActionsToRetry(Microsoft.Azure.Search.Models.IndexBatch,System.String)
  id: FindFailedActionsToRetry(Microsoft.Azure.Search.Models.IndexBatch,System.String)
  parent: Microsoft.Azure.Search.IndexBatchException
  langs:
  - csharp
  - vb
  name: FindFailedActionsToRetry(IndexBatch, String)
  nameWithType: IndexBatchException.FindFailedActionsToRetry(IndexBatch, String)
  fullName: Microsoft.Azure.Search.IndexBatchException.FindFailedActionsToRetry(Microsoft.Azure.Search.Models.IndexBatch, System.String)
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/IndexBatchException.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: FindFailedActionsToRetry
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/IndexBatchException.cs
    startLine: 52
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search
  summary: "\nFinds all index actions in the given batch that failed and need to be retried, and returns them in a\nnew batch.\n"
  example: []
  syntax:
    content: public IndexBatch FindFailedActionsToRetry(IndexBatch originalBatch, string keyFieldName)
    content.vb: Public Function FindFailedActionsToRetry(originalBatch As IndexBatch, keyFieldName As String) As IndexBatch
    parameters:
    - id: originalBatch
      type: Microsoft.Azure.Search.Models.IndexBatch
      description: The batch that partially failed indexing.
    - id: keyFieldName
      type: System.String
      description: The name of the key field from the index schema.
    return:
      type: Microsoft.Azure.Search.Models.IndexBatch
      description: "\nA new batch containing all the actions from the given batch that failed and should be retried.\n"
  overload: Microsoft.Azure.Search.IndexBatchException.FindFailedActionsToRetry*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.IndexBatchException.FindFailedActionsToRetry``1(Microsoft.Azure.Search.Models.IndexBatch{``0},System.Func{``0,System.String})
  commentId: M:Microsoft.Azure.Search.IndexBatchException.FindFailedActionsToRetry``1(Microsoft.Azure.Search.Models.IndexBatch{``0},System.Func{``0,System.String})
  id: FindFailedActionsToRetry``1(Microsoft.Azure.Search.Models.IndexBatch{``0},System.Func{``0,System.String})
  parent: Microsoft.Azure.Search.IndexBatchException
  langs:
  - csharp
  - vb
  name: FindFailedActionsToRetry<T>(IndexBatch<T>, Func<T, String>)
  nameWithType: IndexBatchException.FindFailedActionsToRetry<T>(IndexBatch<T>, Func<T, String>)
  fullName: Microsoft.Azure.Search.IndexBatchException.FindFailedActionsToRetry<T>(Microsoft.Azure.Search.Models.IndexBatch<T>, System.Func<T, System.String>)
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/IndexBatchException.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: FindFailedActionsToRetry
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/IndexBatchException.cs
    startLine: 72
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search
  summary: "\nFinds all index actions in the given batch that failed and need to be retried, and returns them in a\nnew batch.\n"
  example: []
  syntax:
    content: 'public IndexBatch<T> FindFailedActionsToRetry<T>(IndexBatch<T> originalBatch, Func<T, string> keySelector)where T : class'
    content.vb: Public Function FindFailedActionsToRetry(Of T As Class)(originalBatch As IndexBatch(Of T), keySelector As Func(Of T, String)) As IndexBatch(Of T)
    parameters:
    - id: originalBatch
      type: Microsoft.Azure.Search.Models.IndexBatch{{T}}
      description: The batch that partially failed indexing.
    - id: keySelector
      type: System.Func{{T},System.String}
      description: A lambda that retrieves a key value from a given document of type T.
    typeParameters:
    - id: T
      description: "\nThe CLR type that maps to the index schema. Instances of this type can be stored as documents in the index.\n"
    return:
      type: Microsoft.Azure.Search.Models.IndexBatch{{T}}
      description: "\nA new batch containing all the actions from the given batch that failed and should be retried.\n"
  overload: Microsoft.Azure.Search.IndexBatchException.FindFailedActionsToRetry*
  nameWithType.vb: IndexBatchException.FindFailedActionsToRetry(Of T)(IndexBatch(Of T), Func(Of T, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Search.IndexBatchException.FindFailedActionsToRetry(Of T)(Microsoft.Azure.Search.Models.IndexBatch(Of T), System.Func(Of T, System.String))
  name.vb: FindFailedActionsToRetry(Of T)(IndexBatch(Of T), Func(Of T, String))
references:
- uid: Microsoft.Azure.Search
  commentId: N:Microsoft.Azure.Search
  isExternal: false
  name: Microsoft.Azure.Search
  nameWithType: Microsoft.Azure.Search
  fullName: Microsoft.Azure.Search
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: Microsoft.Rest.RestException
  commentId: T:Microsoft.Rest.RestException
  parent: Microsoft.Rest
  isExternal: false
  name: RestException
  nameWithType: RestException
  fullName: Microsoft.Rest.RestException
- uid: Microsoft.Rest.Azure.CloudException
  commentId: T:Microsoft.Rest.Azure.CloudException
  parent: Microsoft.Rest.Azure
  isExternal: false
  name: CloudException
  nameWithType: CloudException
  fullName: Microsoft.Rest.Azure.CloudException
- uid: System.Runtime.Serialization.ISerializable
  commentId: T:System.Runtime.Serialization.ISerializable
  parent: System.Runtime.Serialization
  isExternal: true
  name: ISerializable
  nameWithType: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
- uid: System.Runtime.InteropServices._Exception
  commentId: T:System.Runtime.InteropServices._Exception
  parent: System.Runtime.InteropServices
  isExternal: true
  name: _Exception
  nameWithType: _Exception
  fullName: System.Runtime.InteropServices._Exception
- uid: Microsoft.Rest.Azure.CloudException.Request
  commentId: P:Microsoft.Rest.Azure.CloudException.Request
  parent: Microsoft.Rest.Azure.CloudException
  isExternal: false
  name: Request
  nameWithType: CloudException.Request
  fullName: Microsoft.Rest.Azure.CloudException.Request
- uid: Microsoft.Rest.Azure.CloudException.Response
  commentId: P:Microsoft.Rest.Azure.CloudException.Response
  parent: Microsoft.Rest.Azure.CloudException
  isExternal: false
  name: Response
  nameWithType: CloudException.Response
  fullName: Microsoft.Rest.Azure.CloudException.Response
- uid: Microsoft.Rest.Azure.CloudException.Body
  commentId: P:Microsoft.Rest.Azure.CloudException.Body
  parent: Microsoft.Rest.Azure.CloudException
  isExternal: false
  name: Body
  nameWithType: CloudException.Body
  fullName: Microsoft.Rest.Azure.CloudException.Body
- uid: Microsoft.Rest.Azure.CloudException.RequestId
  commentId: P:Microsoft.Rest.Azure.CloudException.RequestId
  parent: Microsoft.Rest.Azure.CloudException
  isExternal: false
  name: RequestId
  nameWithType: CloudException.RequestId
  fullName: Microsoft.Rest.Azure.CloudException.RequestId
- uid: System.Exception.GetBaseException
  commentId: M:System.Exception.GetBaseException
  parent: System.Exception
  isExternal: true
  name: GetBaseException()
  nameWithType: Exception.GetBaseException()
  fullName: System.Exception.GetBaseException()
  spec.csharp:
  - uid: System.Exception.GetBaseException
    name: GetBaseException
    nameWithType: Exception.GetBaseException
    fullName: System.Exception.GetBaseException
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Exception.GetBaseException
    name: GetBaseException
    nameWithType: Exception.GetBaseException
    fullName: System.Exception.GetBaseException
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Exception.ToString
  commentId: M:System.Exception.ToString
  parent: System.Exception
  isExternal: true
  name: ToString()
  nameWithType: Exception.ToString()
  fullName: System.Exception.ToString()
  spec.csharp:
  - uid: System.Exception.ToString
    name: ToString
    nameWithType: Exception.ToString
    fullName: System.Exception.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Exception.ToString
    name: ToString
    nameWithType: Exception.ToString
    fullName: System.Exception.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Exception
  isExternal: true
  name: GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: Exception.GetObjectData(SerializationInfo, StreamingContext)
  fullName: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  spec.csharp:
  - uid: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: Exception.GetObjectData
    fullName: System.Exception.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: Exception.GetObjectData
    fullName: System.Exception.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Exception.GetType
  commentId: M:System.Exception.GetType
  parent: System.Exception
  isExternal: true
  name: GetType()
  nameWithType: Exception.GetType()
  fullName: System.Exception.GetType()
  spec.csharp:
  - uid: System.Exception.GetType
    name: GetType
    nameWithType: Exception.GetType
    fullName: System.Exception.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Exception.GetType
    name: GetType
    nameWithType: Exception.GetType
    fullName: System.Exception.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Exception.Message
  commentId: P:System.Exception.Message
  parent: System.Exception
  isExternal: true
  name: Message
  nameWithType: Exception.Message
  fullName: System.Exception.Message
- uid: System.Exception.Data
  commentId: P:System.Exception.Data
  parent: System.Exception
  isExternal: true
  name: Data
  nameWithType: Exception.Data
  fullName: System.Exception.Data
- uid: System.Exception.InnerException
  commentId: P:System.Exception.InnerException
  parent: System.Exception
  isExternal: true
  name: InnerException
  nameWithType: Exception.InnerException
  fullName: System.Exception.InnerException
- uid: System.Exception.TargetSite
  commentId: P:System.Exception.TargetSite
  parent: System.Exception
  isExternal: true
  name: TargetSite
  nameWithType: Exception.TargetSite
  fullName: System.Exception.TargetSite
- uid: System.Exception.StackTrace
  commentId: P:System.Exception.StackTrace
  parent: System.Exception
  isExternal: true
  name: StackTrace
  nameWithType: Exception.StackTrace
  fullName: System.Exception.StackTrace
- uid: System.Exception.HelpLink
  commentId: P:System.Exception.HelpLink
  parent: System.Exception
  isExternal: true
  name: HelpLink
  nameWithType: Exception.HelpLink
  fullName: System.Exception.HelpLink
- uid: System.Exception.Source
  commentId: P:System.Exception.Source
  parent: System.Exception
  isExternal: true
  name: Source
  nameWithType: Exception.Source
  fullName: System.Exception.Source
- uid: System.Exception.HResult
  commentId: P:System.Exception.HResult
  parent: System.Exception
  isExternal: true
  name: HResult
  nameWithType: Exception.HResult
  fullName: System.Exception.HResult
- uid: System.Exception.SerializeObjectState
  commentId: E:System.Exception.SerializeObjectState
  parent: System.Exception
  isExternal: true
  name: SerializeObjectState
  nameWithType: Exception.SerializeObjectState
  fullName: System.Exception.SerializeObjectState
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Rest.Azure.CloudException.Microsoft.Rest.Azure.CloudExceptionExtensions.IsAccessConditionFailed
  commentId: M:Microsoft.Rest.Azure.CloudExceptionExtensions.IsAccessConditionFailed(Microsoft.Rest.Azure.CloudException)
  parent: Microsoft.Rest.Azure.CloudExceptionExtensions
  definition: Microsoft.Rest.Azure.CloudExceptionExtensions.IsAccessConditionFailed(Microsoft.Rest.Azure.CloudException)
  name: IsAccessConditionFailed()
  nameWithType: CloudExceptionExtensions.IsAccessConditionFailed()
  fullName: Microsoft.Rest.Azure.CloudExceptionExtensions.IsAccessConditionFailed()
  spec.csharp:
  - uid: Microsoft.Rest.Azure.CloudExceptionExtensions.IsAccessConditionFailed
    name: IsAccessConditionFailed
    nameWithType: CloudExceptionExtensions.IsAccessConditionFailed
    fullName: Microsoft.Rest.Azure.CloudExceptionExtensions.IsAccessConditionFailed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Rest.Azure.CloudExceptionExtensions.IsAccessConditionFailed
    name: IsAccessConditionFailed
    nameWithType: CloudExceptionExtensions.IsAccessConditionFailed
    fullName: Microsoft.Rest.Azure.CloudExceptionExtensions.IsAccessConditionFailed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Rest
  commentId: N:Microsoft.Rest
  isExternal: false
  name: Microsoft.Rest
  nameWithType: Microsoft.Rest
  fullName: Microsoft.Rest
- uid: Microsoft.Rest.Azure
  commentId: N:Microsoft.Rest.Azure
  isExternal: false
  name: Microsoft.Rest.Azure
  nameWithType: Microsoft.Rest.Azure
  fullName: Microsoft.Rest.Azure
- uid: System.Runtime.Serialization
  commentId: N:System.Runtime.Serialization
  isExternal: false
  name: System.Runtime.Serialization
  nameWithType: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
- uid: System.Runtime.InteropServices
  commentId: N:System.Runtime.InteropServices
  isExternal: false
  name: System.Runtime.InteropServices
  nameWithType: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
- uid: Microsoft.Rest.Azure.CloudExceptionExtensions.IsAccessConditionFailed(Microsoft.Rest.Azure.CloudException)
  commentId: M:Microsoft.Rest.Azure.CloudExceptionExtensions.IsAccessConditionFailed(Microsoft.Rest.Azure.CloudException)
  isExternal: false
  name: IsAccessConditionFailed(CloudException)
  nameWithType: CloudExceptionExtensions.IsAccessConditionFailed(CloudException)
  fullName: Microsoft.Rest.Azure.CloudExceptionExtensions.IsAccessConditionFailed(Microsoft.Rest.Azure.CloudException)
  spec.csharp:
  - uid: Microsoft.Rest.Azure.CloudExceptionExtensions.IsAccessConditionFailed(Microsoft.Rest.Azure.CloudException)
    name: IsAccessConditionFailed
    nameWithType: CloudExceptionExtensions.IsAccessConditionFailed
    fullName: Microsoft.Rest.Azure.CloudExceptionExtensions.IsAccessConditionFailed
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Rest.Azure.CloudException
    name: CloudException
    nameWithType: CloudException
    fullName: Microsoft.Rest.Azure.CloudException
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Rest.Azure.CloudExceptionExtensions.IsAccessConditionFailed(Microsoft.Rest.Azure.CloudException)
    name: IsAccessConditionFailed
    nameWithType: CloudExceptionExtensions.IsAccessConditionFailed
    fullName: Microsoft.Rest.Azure.CloudExceptionExtensions.IsAccessConditionFailed
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Rest.Azure.CloudException
    name: CloudException
    nameWithType: CloudException
    fullName: Microsoft.Rest.Azure.CloudException
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Rest.Azure.CloudExceptionExtensions
  commentId: T:Microsoft.Rest.Azure.CloudExceptionExtensions
  parent: Microsoft.Rest.Azure
  isExternal: false
  name: CloudExceptionExtensions
  nameWithType: CloudExceptionExtensions
  fullName: Microsoft.Rest.Azure.CloudExceptionExtensions
- uid: Microsoft.Azure.Search.IndexBatchException.#ctor*
  commentId: Overload:Microsoft.Azure.Search.IndexBatchException.#ctor
  isExternal: false
  name: IndexBatchException
  nameWithType: IndexBatchException.IndexBatchException
  fullName: Microsoft.Azure.Search.IndexBatchException.IndexBatchException
- uid: Microsoft.Azure.Search.Models.DocumentIndexResult
  commentId: T:Microsoft.Azure.Search.Models.DocumentIndexResult
  parent: Microsoft.Azure.Search.Models
  isExternal: false
  name: DocumentIndexResult
  nameWithType: DocumentIndexResult
  fullName: Microsoft.Azure.Search.Models.DocumentIndexResult
- uid: Microsoft.Azure.Search.Models
  commentId: N:Microsoft.Azure.Search.Models
  isExternal: false
  name: Microsoft.Azure.Search.Models
  nameWithType: Microsoft.Azure.Search.Models
  fullName: Microsoft.Azure.Search.Models
- uid: Microsoft.Azure.Search.IndexBatchException.IndexingResults*
  commentId: Overload:Microsoft.Azure.Search.IndexBatchException.IndexingResults
  isExternal: false
  name: IndexingResults
  nameWithType: IndexBatchException.IndexingResults
  fullName: Microsoft.Azure.Search.IndexBatchException.IndexingResults
- uid: System.Collections.Generic.IList{Microsoft.Azure.Search.Models.IndexingResult}
  commentId: T:System.Collections.Generic.IList{Microsoft.Azure.Search.Models.IndexingResult}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<IndexingResult>
  nameWithType: IList<IndexingResult>
  fullName: System.Collections.Generic.IList<Microsoft.Azure.Search.Models.IndexingResult>
  nameWithType.vb: IList(Of IndexingResult)
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.Azure.Search.Models.IndexingResult)
  name.vb: IList(Of IndexingResult)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Search.Models.IndexingResult
    name: IndexingResult
    nameWithType: IndexingResult
    fullName: Microsoft.Azure.Search.Models.IndexingResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Search.Models.IndexingResult
    name: IndexingResult
    nameWithType: IndexingResult
    fullName: Microsoft.Azure.Search.Models.IndexingResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Azure.Search.IndexBatchException.FindFailedActionsToRetry*
  commentId: Overload:Microsoft.Azure.Search.IndexBatchException.FindFailedActionsToRetry
  isExternal: false
  name: FindFailedActionsToRetry
  nameWithType: IndexBatchException.FindFailedActionsToRetry
  fullName: Microsoft.Azure.Search.IndexBatchException.FindFailedActionsToRetry
- uid: Microsoft.Azure.Search.Models.IndexBatch
  commentId: T:Microsoft.Azure.Search.Models.IndexBatch
  parent: Microsoft.Azure.Search.Models
  isExternal: false
  name: IndexBatch
  nameWithType: IndexBatch
  fullName: Microsoft.Azure.Search.Models.IndexBatch
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Azure.Search.Models.IndexBatch{{T}}
  commentId: T:Microsoft.Azure.Search.Models.IndexBatch{``0}
  parent: Microsoft.Azure.Search.Models
  definition: Microsoft.Azure.Search.Models.IndexBatch`1
  name: IndexBatch<T>
  nameWithType: IndexBatch<T>
  fullName: Microsoft.Azure.Search.Models.IndexBatch<T>
  nameWithType.vb: IndexBatch(Of T)
  fullname.vb: Microsoft.Azure.Search.Models.IndexBatch(Of T)
  name.vb: IndexBatch(Of T)
  spec.csharp:
  - uid: Microsoft.Azure.Search.Models.IndexBatch`1
    name: IndexBatch
    nameWithType: IndexBatch
    fullName: Microsoft.Azure.Search.Models.IndexBatch
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Search.Models.IndexBatch`1
    name: IndexBatch
    nameWithType: IndexBatch
    fullName: Microsoft.Azure.Search.Models.IndexBatch
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T},System.String}
  commentId: T:System.Func{``0,System.String}
  parent: System
  definition: System.Func`2
  name: Func<T, String>
  nameWithType: Func<T, String>
  fullName: System.Func<T, System.String>
  nameWithType.vb: Func(Of T, String)
  fullname.vb: System.Func(Of T, System.String)
  name.vb: Func(Of T, String)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Search.Models.IndexBatch`1
  commentId: T:Microsoft.Azure.Search.Models.IndexBatch`1
  isExternal: false
  name: IndexBatch<T>
  nameWithType: IndexBatch<T>
  fullName: Microsoft.Azure.Search.Models.IndexBatch<T>
  nameWithType.vb: IndexBatch(Of T)
  fullname.vb: Microsoft.Azure.Search.Models.IndexBatch(Of T)
  name.vb: IndexBatch(Of T)
  spec.csharp:
  - uid: Microsoft.Azure.Search.Models.IndexBatch`1
    name: IndexBatch
    nameWithType: IndexBatch
    fullName: Microsoft.Azure.Search.Models.IndexBatch
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Search.Models.IndexBatch`1
    name: IndexBatch
    nameWithType: IndexBatch
    fullName: Microsoft.Azure.Search.Models.IndexBatch
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
