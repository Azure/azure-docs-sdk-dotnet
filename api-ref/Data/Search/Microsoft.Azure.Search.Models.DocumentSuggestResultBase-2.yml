### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Search.Models.DocumentSuggestResultBase`2
  commentId: T:Microsoft.Azure.Search.Models.DocumentSuggestResultBase`2
  id: DocumentSuggestResultBase`2
  parent: Microsoft.Azure.Search.Models
  children:
  - Microsoft.Azure.Search.Models.DocumentSuggestResultBase`2.Coverage
  - Microsoft.Azure.Search.Models.DocumentSuggestResultBase`2.Results
  langs:
  - csharp
  - vb
  name: DocumentSuggestResultBase<TResult, TDoc>
  nameWithType: DocumentSuggestResultBase<TResult, TDoc>
  fullName: Microsoft.Azure.Search.Models.DocumentSuggestResultBase<TResult, TDoc>
  type: Class
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/DocumentSuggestResultBase.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DocumentSuggestResultBase
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/DocumentSuggestResultBase.cs
    startLine: 18
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nResponse containing suggestion query results from an Azure Search index.\n"
  example: []
  syntax:
    content: >-
      public class DocumentSuggestResultBase<TResult, TDoc>
          where TResult : SuggestResultBase<TDoc> where TDoc : class
    content.vb: Public Class DocumentSuggestResultBase(Of TResult As SuggestResultBase(Of TDoc), TDoc As Class)
    typeParameters:
    - id: TResult
      description: "\nType of the model class that encapsulates documents in a suggestion response.\n"
    - id: TDoc
      description: "\nThe CLR type that maps to the index schema. Instances of this type can be retrieved as documents\nfrom the index.\n"
  inheritance:
  - System.Object
  derivedClasses:
  - Microsoft.Azure.Search.Models.DocumentSuggestResult
  - Microsoft.Azure.Search.Models.DocumentSuggestResult`1
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: DocumentSuggestResultBase(Of TResult, TDoc)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.Azure.Search.Models.DocumentSuggestResultBase(Of TResult, TDoc)
  name.vb: DocumentSuggestResultBase(Of TResult, TDoc)
- uid: Microsoft.Azure.Search.Models.DocumentSuggestResultBase`2.Coverage
  commentId: P:Microsoft.Azure.Search.Models.DocumentSuggestResultBase`2.Coverage
  id: Coverage
  parent: Microsoft.Azure.Search.Models.DocumentSuggestResultBase`2
  langs:
  - csharp
  - vb
  name: Coverage
  nameWithType: DocumentSuggestResultBase<TResult, TDoc>.Coverage
  fullName: Microsoft.Azure.Search.Models.DocumentSuggestResultBase<TResult, TDoc>.Coverage
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/DocumentSuggestResultBase.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Coverage
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/DocumentSuggestResultBase.cs
    startLine: 26
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets a value indicating the percentage of the index that was included in the query, or null if\nMinimumCoverage was not set in the <code>SuggestParameters</code>.\n"
  example: []
  syntax:
    content: public double ? Coverage { get; set; }
    content.vb: Public Property Coverage As Double?
    parameters: []
    return:
      type: System.Nullable{System.Double}
  overload: Microsoft.Azure.Search.Models.DocumentSuggestResultBase`2.Coverage*
  nameWithType.vb: DocumentSuggestResultBase(Of TResult, TDoc).Coverage
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Search.Models.DocumentSuggestResultBase(Of TResult, TDoc).Coverage
- uid: Microsoft.Azure.Search.Models.DocumentSuggestResultBase`2.Results
  commentId: P:Microsoft.Azure.Search.Models.DocumentSuggestResultBase`2.Results
  id: Results
  parent: Microsoft.Azure.Search.Models.DocumentSuggestResultBase`2
  langs:
  - csharp
  - vb
  name: Results
  nameWithType: DocumentSuggestResultBase<TResult, TDoc>.Results
  fullName: Microsoft.Azure.Search.Models.DocumentSuggestResultBase<TResult, TDoc>.Results
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/DocumentSuggestResultBase.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Results
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/DocumentSuggestResultBase.cs
    startLine: 31
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets the sequence of results returned by the query.\n"
  example: []
  syntax:
    content: public IList<TResult> Results { get; set; }
    content.vb: Public Property Results As IList(Of TResult)
    parameters: []
    return:
      type: System.Collections.Generic.IList{{TResult}}
  overload: Microsoft.Azure.Search.Models.DocumentSuggestResultBase`2.Results*
  nameWithType.vb: DocumentSuggestResultBase(Of TResult, TDoc).Results
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Search.Models.DocumentSuggestResultBase(Of TResult, TDoc).Results
references:
- uid: Microsoft.Azure.Search.Models
  commentId: N:Microsoft.Azure.Search.Models
  isExternal: false
  name: Microsoft.Azure.Search.Models
  nameWithType: Microsoft.Azure.Search.Models
  fullName: Microsoft.Azure.Search.Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Search.Models.DocumentSuggestResultBase`2.Coverage*
  commentId: Overload:Microsoft.Azure.Search.Models.DocumentSuggestResultBase`2.Coverage
  isExternal: false
  name: Coverage
  nameWithType: DocumentSuggestResultBase<TResult, TDoc>.Coverage
  fullName: Microsoft.Azure.Search.Models.DocumentSuggestResultBase<TResult, TDoc>.Coverage
  nameWithType.vb: DocumentSuggestResultBase(Of TResult, TDoc).Coverage
  fullname.vb: Microsoft.Azure.Search.Models.DocumentSuggestResultBase(Of TResult, TDoc).Coverage
- uid: System.Nullable{System.Double}
  commentId: T:System.Nullable{System.Double}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Double>
  nameWithType: Nullable<Double>
  fullName: System.Nullable<System.Double>
  nameWithType.vb: Nullable(Of Double)
  fullname.vb: System.Nullable(Of System.Double)
  name.vb: Nullable(Of Double)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Search.Models.DocumentSuggestResultBase`2.Results*
  commentId: Overload:Microsoft.Azure.Search.Models.DocumentSuggestResultBase`2.Results
  isExternal: false
  name: Results
  nameWithType: DocumentSuggestResultBase<TResult, TDoc>.Results
  fullName: Microsoft.Azure.Search.Models.DocumentSuggestResultBase<TResult, TDoc>.Results
  nameWithType.vb: DocumentSuggestResultBase(Of TResult, TDoc).Results
  fullname.vb: Microsoft.Azure.Search.Models.DocumentSuggestResultBase(Of TResult, TDoc).Results
- uid: System.Collections.Generic.IList{{TResult}}
  commentId: T:System.Collections.Generic.IList{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<TResult>
  nameWithType: IList<TResult>
  fullName: System.Collections.Generic.IList<TResult>
  nameWithType.vb: IList(Of TResult)
  fullname.vb: System.Collections.Generic.IList(Of TResult)
  name.vb: IList(Of TResult)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
