### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Search.Models.RangeFacetResult`1
  commentId: T:Microsoft.Azure.Search.Models.RangeFacetResult`1
  id: RangeFacetResult`1
  parent: Microsoft.Azure.Search.Models
  children:
  - Microsoft.Azure.Search.Models.RangeFacetResult`1.Count
  - Microsoft.Azure.Search.Models.RangeFacetResult`1.From
  - Microsoft.Azure.Search.Models.RangeFacetResult`1.To
  langs:
  - csharp
  - vb
  name: RangeFacetResult<T>
  nameWithType: RangeFacetResult<T>
  fullName: Microsoft.Azure.Search.Models.RangeFacetResult<T>
  type: Class
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/RangeFacetResult.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: RangeFacetResult
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/RangeFacetResult.cs
    startLine: 15
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nA single bucket of a range facet query result that reports the number of documents with a field value falling\nwithin a particular range.\n"
  example: []
  syntax:
    content: >-
      public class RangeFacetResult<T>
          where T : struct
    content.vb: Public Class RangeFacetResult(Of T As Structure)
    typeParameters:
    - id: T
      description: "\nA type that matches the type of the field to which the facet was applied. Valid types include\n<code>DateTimeOffset</code>, <code>Double</code>, and\n<code>Int64</code> (long in C#).\n"
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: RangeFacetResult(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.Azure.Search.Models.RangeFacetResult(Of T)
  name.vb: RangeFacetResult(Of T)
- uid: Microsoft.Azure.Search.Models.RangeFacetResult`1.Count
  commentId: P:Microsoft.Azure.Search.Models.RangeFacetResult`1.Count
  id: Count
  parent: Microsoft.Azure.Search.Models.RangeFacetResult`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: RangeFacetResult<T>.Count
  fullName: Microsoft.Azure.Search.Models.RangeFacetResult<T>.Count
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/RangeFacetResult.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Count
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/RangeFacetResult.cs
    startLine: 27
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets the approximate count of documents falling within the bucket described by this facet.\n"
  example: []
  syntax:
    content: public long Count { get; }
    content.vb: Public ReadOnly Property Count As Long
    parameters: []
    return:
      type: System.Int64
  overload: Microsoft.Azure.Search.Models.RangeFacetResult`1.Count*
  nameWithType.vb: RangeFacetResult(Of T).Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Azure.Search.Models.RangeFacetResult(Of T).Count
- uid: Microsoft.Azure.Search.Models.RangeFacetResult`1.From
  commentId: P:Microsoft.Azure.Search.Models.RangeFacetResult`1.From
  id: From
  parent: Microsoft.Azure.Search.Models.RangeFacetResult`1
  langs:
  - csharp
  - vb
  name: From
  nameWithType: RangeFacetResult<T>.From
  fullName: Microsoft.Azure.Search.Models.RangeFacetResult<T>.From
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/RangeFacetResult.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: From
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/RangeFacetResult.cs
    startLine: 33
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets a value indicating the inclusive lower bound of the facet's range, or null to indicate that there is\nno lower bound (i.e. -- for the first bucket).\n"
  example: []
  syntax:
    content: public T? From { get; }
    content.vb: Public ReadOnly Property From As T?
    parameters: []
    return:
      type: System.Nullable{{T}}
  overload: Microsoft.Azure.Search.Models.RangeFacetResult`1.From*
  nameWithType.vb: RangeFacetResult(Of T).From
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Azure.Search.Models.RangeFacetResult(Of T).From
- uid: Microsoft.Azure.Search.Models.RangeFacetResult`1.To
  commentId: P:Microsoft.Azure.Search.Models.RangeFacetResult`1.To
  id: To
  parent: Microsoft.Azure.Search.Models.RangeFacetResult`1
  langs:
  - csharp
  - vb
  name: To
  nameWithType: RangeFacetResult<T>.To
  fullName: Microsoft.Azure.Search.Models.RangeFacetResult<T>.To
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/RangeFacetResult.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: To
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/RangeFacetResult.cs
    startLine: 39
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets a value indicating the exclusive upper bound of the facet's range, or null to indicate that there is\nno upper bound (i.e. -- for the last bucket).\n"
  example: []
  syntax:
    content: public T? To { get; }
    content.vb: Public ReadOnly Property To As T?
    parameters: []
    return:
      type: System.Nullable{{T}}
  overload: Microsoft.Azure.Search.Models.RangeFacetResult`1.To*
  nameWithType.vb: RangeFacetResult(Of T).To
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Azure.Search.Models.RangeFacetResult(Of T).To
references:
- uid: Microsoft.Azure.Search.Models
  commentId: N:Microsoft.Azure.Search.Models
  isExternal: false
  name: Microsoft.Azure.Search.Models
  nameWithType: Microsoft.Azure.Search.Models
  fullName: Microsoft.Azure.Search.Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Search.Models.RangeFacetResult`1.Count*
  commentId: Overload:Microsoft.Azure.Search.Models.RangeFacetResult`1.Count
  isExternal: false
  name: Count
  nameWithType: RangeFacetResult<T>.Count
  fullName: Microsoft.Azure.Search.Models.RangeFacetResult<T>.Count
  nameWithType.vb: RangeFacetResult(Of T).Count
  fullname.vb: Microsoft.Azure.Search.Models.RangeFacetResult(Of T).Count
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.Azure.Search.Models.RangeFacetResult`1.From*
  commentId: Overload:Microsoft.Azure.Search.Models.RangeFacetResult`1.From
  isExternal: false
  name: From
  nameWithType: RangeFacetResult<T>.From
  fullName: Microsoft.Azure.Search.Models.RangeFacetResult<T>.From
  nameWithType.vb: RangeFacetResult(Of T).From
  fullname.vb: Microsoft.Azure.Search.Models.RangeFacetResult(Of T).From
- uid: System.Nullable{{T}}
  commentId: T:System.Nullable{`0}
  parent: System
  definition: System.Nullable`1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Search.Models.RangeFacetResult`1.To*
  commentId: Overload:Microsoft.Azure.Search.Models.RangeFacetResult`1.To
  isExternal: false
  name: To
  nameWithType: RangeFacetResult<T>.To
  fullName: Microsoft.Azure.Search.Models.RangeFacetResult<T>.To
  nameWithType.vb: RangeFacetResult(Of T).To
  fullname.vb: Microsoft.Azure.Search.Models.RangeFacetResult(Of T).To
