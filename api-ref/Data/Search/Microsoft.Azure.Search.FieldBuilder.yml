### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Search.FieldBuilder
  commentId: T:Microsoft.Azure.Search.FieldBuilder
  id: FieldBuilder
  parent: Microsoft.Azure.Search
  children:
  - Microsoft.Azure.Search.FieldBuilder.BuildForType``1
  - Microsoft.Azure.Search.FieldBuilder.BuildForType``1(Newtonsoft.Json.Serialization.IContractResolver)
  langs:
  - csharp
  - vb
  name: FieldBuilder
  nameWithType: FieldBuilder
  fullName: Microsoft.Azure.Search.FieldBuilder
  type: Class
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Indexes/FieldBuilder.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: FieldBuilder
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/Indexes/FieldBuilder.cs
    startLine: 14
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search
  syntax:
    content: public static class FieldBuilder
    content.vb: Public Module FieldBuilder
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Azure.Search.FieldBuilder.BuildForType``1
  commentId: M:Microsoft.Azure.Search.FieldBuilder.BuildForType``1
  id: BuildForType``1
  parent: Microsoft.Azure.Search.FieldBuilder
  langs:
  - csharp
  - vb
  name: BuildForType<T>()
  nameWithType: FieldBuilder.BuildForType<T>()
  fullName: Microsoft.Azure.Search.FieldBuilder.BuildForType<T>()
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Indexes/FieldBuilder.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: BuildForType
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/Indexes/FieldBuilder.cs
    startLine: 24
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search
  summary: "\nCreates a collection of <xref href=\"Microsoft.Azure.Search.Models.Field\" data-throw-if-not-resolved=\"false\"></xref> objects corresponding to\nthe properties of the type supplied.\n"
  example: []
  syntax:
    content: public static IList<Field> BuildForType<T>()
    content.vb: Public Shared Function BuildForType(Of T) As IList(Of Field)
    typeParameters:
    - id: T
      description: "\nThe type for which fields will be created, based on its properties.\n"
    return:
      type: System.Collections.Generic.IList{Microsoft.Azure.Search.Models.Field}
      description: A collection of fields.
  overload: Microsoft.Azure.Search.FieldBuilder.BuildForType*
  nameWithType.vb: FieldBuilder.BuildForType(Of T)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.Search.FieldBuilder.BuildForType(Of T)()
  name.vb: BuildForType(Of T)()
- uid: Microsoft.Azure.Search.FieldBuilder.BuildForType``1(Newtonsoft.Json.Serialization.IContractResolver)
  commentId: M:Microsoft.Azure.Search.FieldBuilder.BuildForType``1(Newtonsoft.Json.Serialization.IContractResolver)
  id: BuildForType``1(Newtonsoft.Json.Serialization.IContractResolver)
  parent: Microsoft.Azure.Search.FieldBuilder
  langs:
  - csharp
  - vb
  name: BuildForType<T>(IContractResolver)
  nameWithType: FieldBuilder.BuildForType<T>(IContractResolver)
  fullName: Microsoft.Azure.Search.FieldBuilder.BuildForType<T>(Newtonsoft.Json.Serialization.IContractResolver)
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Indexes/FieldBuilder.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: BuildForType
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/Indexes/FieldBuilder.cs
    startLine: 46
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search
  summary: "\nCreates a collection of <xref href=\"Microsoft.Azure.Search.Models.Field\" data-throw-if-not-resolved=\"false\"></xref> objects corresponding to\nthe properties of the type supplied.\n"
  example: []
  syntax:
    content: public static IList<Field> BuildForType<T>(IContractResolver contractResolver)
    content.vb: Public Shared Function BuildForType(Of T)(contractResolver As IContractResolver) As IList(Of Field)
    parameters:
    - id: contractResolver
      type: Newtonsoft.Json.Serialization.IContractResolver
      description: "\nContract resolver that the <xref href=\"Microsoft.Azure.Search.SearchIndexClient\" data-throw-if-not-resolved=\"false\"></xref> will use.\nThis ensures that the field names are generated in a way that is\nconsistent with the way the model will be serialized.\n"
    typeParameters:
    - id: T
      description: "\nThe type for which fields will be created, based on its properties.\n"
    return:
      type: System.Collections.Generic.IList{Microsoft.Azure.Search.Models.Field}
      description: A collection of fields.
  overload: Microsoft.Azure.Search.FieldBuilder.BuildForType*
  nameWithType.vb: FieldBuilder.BuildForType(Of T)(IContractResolver)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.Search.FieldBuilder.BuildForType(Of T)(Newtonsoft.Json.Serialization.IContractResolver)
  name.vb: BuildForType(Of T)(IContractResolver)
references:
- uid: Microsoft.Azure.Search
  commentId: N:Microsoft.Azure.Search
  isExternal: false
  name: Microsoft.Azure.Search
  nameWithType: Microsoft.Azure.Search
  fullName: Microsoft.Azure.Search
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Search.Models.Field
  commentId: T:Microsoft.Azure.Search.Models.Field
  isExternal: false
  name: Field
  nameWithType: Field
  fullName: Microsoft.Azure.Search.Models.Field
- uid: Microsoft.Azure.Search.FieldBuilder.BuildForType*
  commentId: Overload:Microsoft.Azure.Search.FieldBuilder.BuildForType
  isExternal: false
  name: BuildForType<T>
  nameWithType: FieldBuilder.BuildForType<T>
  fullName: Microsoft.Azure.Search.FieldBuilder.BuildForType<T>
  nameWithType.vb: FieldBuilder.BuildForType(Of T)
  fullname.vb: Microsoft.Azure.Search.FieldBuilder.BuildForType(Of T)
  name.vb: BuildForType(Of T)
- uid: System.Collections.Generic.IList{Microsoft.Azure.Search.Models.Field}
  commentId: T:System.Collections.Generic.IList{Microsoft.Azure.Search.Models.Field}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Field>
  nameWithType: IList<Field>
  fullName: System.Collections.Generic.IList<Microsoft.Azure.Search.Models.Field>
  nameWithType.vb: IList(Of Field)
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.Azure.Search.Models.Field)
  name.vb: IList(Of Field)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Search.Models.Field
    name: Field
    nameWithType: Field
    fullName: Microsoft.Azure.Search.Models.Field
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Search.Models.Field
    name: Field
    nameWithType: Field
    fullName: Microsoft.Azure.Search.Models.Field
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Azure.Search.SearchIndexClient
  commentId: T:Microsoft.Azure.Search.SearchIndexClient
  isExternal: false
  name: SearchIndexClient
  nameWithType: SearchIndexClient
  fullName: Microsoft.Azure.Search.SearchIndexClient
- uid: Newtonsoft.Json.Serialization.IContractResolver
  commentId: T:Newtonsoft.Json.Serialization.IContractResolver
  parent: Newtonsoft.Json.Serialization
  isExternal: true
  name: IContractResolver
  nameWithType: IContractResolver
  fullName: Newtonsoft.Json.Serialization.IContractResolver
- uid: Newtonsoft.Json.Serialization
  commentId: N:Newtonsoft.Json.Serialization
  isExternal: false
  name: Newtonsoft.Json.Serialization
  nameWithType: Newtonsoft.Json.Serialization
  fullName: Newtonsoft.Json.Serialization
