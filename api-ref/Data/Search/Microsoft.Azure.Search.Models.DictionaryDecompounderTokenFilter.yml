### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter
  commentId: T:Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter
  id: DictionaryDecompounderTokenFilter
  parent: Microsoft.Azure.Search.Models
  children:
  - Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.#ctor
  - Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.#ctor(System.String,System.Collections.Generic.IList{System.String},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})
  - Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.MaxSubwordSize
  - Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.MinSubwordSize
  - Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.MinWordSize
  - Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.OnlyLongestMatch
  - Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.Validate
  - Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.WordList
  langs:
  - csharp
  - vb
  name: DictionaryDecompounderTokenFilter
  nameWithType: DictionaryDecompounderTokenFilter
  fullName: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter
  type: Class
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/DictionaryDecompounderTokenFilter.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DictionaryDecompounderTokenFilter
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/DictionaryDecompounderTokenFilter.cs
    startLine: 23
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nDecomposes compound words found in many Germanic languages. This token\nfilter is implemented using Apache Lucene.\n<a href=\"http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter.html\"></a>\n"
  example: []
  syntax:
    content: >-
      [JsonObject("#Microsoft.Azure.Search.DictionaryDecompounderTokenFilter")]

      public class DictionaryDecompounderTokenFilter : TokenFilter
    content.vb: >-
      <JsonObject("#Microsoft.Azure.Search.DictionaryDecompounderTokenFilter")>

      Public Class DictionaryDecompounderTokenFilter
          Inherits TokenFilter
  inheritance:
  - System.Object
  - Microsoft.Azure.Search.Models.TokenFilter
  inheritedMembers:
  - Microsoft.Azure.Search.Models.TokenFilter.Name
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: Newtonsoft.Json.JsonObjectAttribute
    ctor: Newtonsoft.Json.JsonObjectAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: '#Microsoft.Azure.Search.DictionaryDecompounderTokenFilter'
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.#ctor
  commentId: M:Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.#ctor
  id: '#ctor'
  parent: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter
  langs:
  - csharp
  - vb
  name: DictionaryDecompounderTokenFilter()
  nameWithType: DictionaryDecompounderTokenFilter.DictionaryDecompounderTokenFilter()
  fullName: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.DictionaryDecompounderTokenFilter()
  type: Constructor
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/DictionaryDecompounderTokenFilter.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/DictionaryDecompounderTokenFilter.cs
    startLine: 30
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nInitializes a new instance of the\nDictionaryDecompounderTokenFilter class.\n"
  example: []
  syntax:
    content: public DictionaryDecompounderTokenFilter()
    content.vb: Public Sub New
  overload: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.#ctor(System.String,System.Collections.Generic.IList{System.String},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})
  commentId: M:Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.#ctor(System.String,System.Collections.Generic.IList{System.String},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})
  id: '#ctor(System.String,System.Collections.Generic.IList{System.String},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})'
  parent: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter
  langs:
  - csharp
  - vb
  name: DictionaryDecompounderTokenFilter(String, IList<String>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Nullable<Boolean>)
  nameWithType: DictionaryDecompounderTokenFilter.DictionaryDecompounderTokenFilter(String, IList<String>, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, Nullable<Boolean>)
  fullName: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.DictionaryDecompounderTokenFilter(System.String, System.Collections.Generic.IList<System.String>, System.Nullable<System.Int32>, System.Nullable<System.Int32>, System.Nullable<System.Int32>, System.Nullable<System.Boolean>)
  type: Constructor
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/DictionaryDecompounderTokenFilter.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/DictionaryDecompounderTokenFilter.cs
    startLine: 36
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nInitializes a new instance of the\nDictionaryDecompounderTokenFilter class.\n"
  example: []
  syntax:
    content: public DictionaryDecompounderTokenFilter(string name, IList<string> wordList, int ? minWordSize = null, int ? minSubwordSize = null, int ? maxSubwordSize = null, bool ? onlyLongestMatch = null)
    content.vb: Public Sub New(name As String, wordList As IList(Of String), minWordSize As Integer? = Nothing, minSubwordSize As Integer? = Nothing, maxSubwordSize As Integer? = Nothing, onlyLongestMatch As Boolean? = Nothing)
    parameters:
    - id: name
      type: System.String
    - id: wordList
      type: System.Collections.Generic.IList{System.String}
    - id: minWordSize
      type: System.Nullable{System.Int32}
    - id: minSubwordSize
      type: System.Nullable{System.Int32}
    - id: maxSubwordSize
      type: System.Nullable{System.Int32}
    - id: onlyLongestMatch
      type: System.Nullable{System.Boolean}
  overload: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.#ctor*
  nameWithType.vb: DictionaryDecompounderTokenFilter.DictionaryDecompounderTokenFilter(String, IList(Of String), Nullable(Of Int32), Nullable(Of Int32), Nullable(Of Int32), Nullable(Of Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.DictionaryDecompounderTokenFilter(System.String, System.Collections.Generic.IList(Of System.String), System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), System.Nullable(Of System.Boolean))
  name.vb: DictionaryDecompounderTokenFilter(String, IList(Of String), Nullable(Of Int32), Nullable(Of Int32), Nullable(Of Int32), Nullable(Of Boolean))
- uid: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.WordList
  commentId: P:Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.WordList
  id: WordList
  parent: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter
  langs:
  - csharp
  - vb
  name: WordList
  nameWithType: DictionaryDecompounderTokenFilter.WordList
  fullName: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.WordList
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/DictionaryDecompounderTokenFilter.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: WordList
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/DictionaryDecompounderTokenFilter.cs
    startLine: 49
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets or sets the list of words to match against.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "wordList")]

      public IList<string> WordList { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="wordList")>

      Public Property WordList As IList(Of String)
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.String}
  overload: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.WordList*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: wordList
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.MinWordSize
  commentId: P:Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.MinWordSize
  id: MinWordSize
  parent: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter
  langs:
  - csharp
  - vb
  name: MinWordSize
  nameWithType: DictionaryDecompounderTokenFilter.MinWordSize
  fullName: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.MinWordSize
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/DictionaryDecompounderTokenFilter.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: MinWordSize
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/DictionaryDecompounderTokenFilter.cs
    startLine: 56
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets or sets the minimum word size. Only words longer than this\nget processed. Default is 5. Maximum is 300.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "minWordSize")]

      public int ? MinWordSize { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="minWordSize")>

      Public Property MinWordSize As Integer?
    parameters: []
    return:
      type: System.Nullable{System.Int32}
  overload: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.MinWordSize*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: minWordSize
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.MinSubwordSize
  commentId: P:Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.MinSubwordSize
  id: MinSubwordSize
  parent: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter
  langs:
  - csharp
  - vb
  name: MinSubwordSize
  nameWithType: DictionaryDecompounderTokenFilter.MinSubwordSize
  fullName: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.MinSubwordSize
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/DictionaryDecompounderTokenFilter.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: MinSubwordSize
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/DictionaryDecompounderTokenFilter.cs
    startLine: 63
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets or sets the minimum subword size. Only subwords longer than\nthis are outputted. Default is 2. Maximum is 300.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "minSubwordSize")]

      public int ? MinSubwordSize { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="minSubwordSize")>

      Public Property MinSubwordSize As Integer?
    parameters: []
    return:
      type: System.Nullable{System.Int32}
  overload: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.MinSubwordSize*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: minSubwordSize
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.MaxSubwordSize
  commentId: P:Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.MaxSubwordSize
  id: MaxSubwordSize
  parent: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter
  langs:
  - csharp
  - vb
  name: MaxSubwordSize
  nameWithType: DictionaryDecompounderTokenFilter.MaxSubwordSize
  fullName: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.MaxSubwordSize
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/DictionaryDecompounderTokenFilter.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: MaxSubwordSize
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/DictionaryDecompounderTokenFilter.cs
    startLine: 70
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets or sets the maximum subword size. Only subwords shorter than\nthis are outputted. Default is 15. Maximum is 300.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "maxSubwordSize")]

      public int ? MaxSubwordSize { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="maxSubwordSize")>

      Public Property MaxSubwordSize As Integer?
    parameters: []
    return:
      type: System.Nullable{System.Int32}
  overload: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.MaxSubwordSize*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: maxSubwordSize
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.OnlyLongestMatch
  commentId: P:Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.OnlyLongestMatch
  id: OnlyLongestMatch
  parent: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter
  langs:
  - csharp
  - vb
  name: OnlyLongestMatch
  nameWithType: DictionaryDecompounderTokenFilter.OnlyLongestMatch
  fullName: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.OnlyLongestMatch
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/DictionaryDecompounderTokenFilter.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: OnlyLongestMatch
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/DictionaryDecompounderTokenFilter.cs
    startLine: 77
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets or sets a value indicating whether to add only the longest\nmatching subword to the output. Default is false.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "onlyLongestMatch")]

      public bool ? OnlyLongestMatch { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="onlyLongestMatch")>

      Public Property OnlyLongestMatch As Boolean?
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
  overload: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.OnlyLongestMatch*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: onlyLongestMatch
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.Validate
  commentId: M:Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.Validate
  id: Validate
  parent: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter
  langs:
  - csharp
  - vb
  name: Validate()
  nameWithType: DictionaryDecompounderTokenFilter.Validate()
  fullName: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.Validate()
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/DictionaryDecompounderTokenFilter.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Validate
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/DictionaryDecompounderTokenFilter.cs
    startLine: 86
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nValidate the object.\n"
  example: []
  syntax:
    content: public override void Validate()
    content.vb: Public Overrides Sub Validate
  overridden: Microsoft.Azure.Search.Models.TokenFilter.Validate
  overload: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.Validate*
  exceptions:
  - type: Microsoft.Rest.ValidationException
    commentId: T:Microsoft.Rest.ValidationException
    description: "\nThrown if validation fails\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.Azure.Search.Models
  commentId: N:Microsoft.Azure.Search.Models
  isExternal: false
  name: Microsoft.Azure.Search.Models
  nameWithType: Microsoft.Azure.Search.Models
  fullName: Microsoft.Azure.Search.Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Azure.Search.Models.TokenFilter
  commentId: T:Microsoft.Azure.Search.Models.TokenFilter
  parent: Microsoft.Azure.Search.Models
  isExternal: false
  name: TokenFilter
  nameWithType: TokenFilter
  fullName: Microsoft.Azure.Search.Models.TokenFilter
- uid: Microsoft.Azure.Search.Models.TokenFilter.Name
  commentId: P:Microsoft.Azure.Search.Models.TokenFilter.Name
  parent: Microsoft.Azure.Search.Models.TokenFilter
  isExternal: false
  name: Name
  nameWithType: TokenFilter.Name
  fullName: Microsoft.Azure.Search.Models.TokenFilter.Name
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.#ctor*
  commentId: Overload:Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.#ctor
  isExternal: false
  name: DictionaryDecompounderTokenFilter
  nameWithType: DictionaryDecompounderTokenFilter.DictionaryDecompounderTokenFilter
  fullName: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.DictionaryDecompounderTokenFilter
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IList{System.String}
  commentId: T:System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  nameWithType.vb: IList(Of String)
  fullname.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullname.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullname.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.WordList*
  commentId: Overload:Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.WordList
  isExternal: false
  name: WordList
  nameWithType: DictionaryDecompounderTokenFilter.WordList
  fullName: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.WordList
- uid: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.MinWordSize*
  commentId: Overload:Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.MinWordSize
  isExternal: false
  name: MinWordSize
  nameWithType: DictionaryDecompounderTokenFilter.MinWordSize
  fullName: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.MinWordSize
- uid: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.MinSubwordSize*
  commentId: Overload:Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.MinSubwordSize
  isExternal: false
  name: MinSubwordSize
  nameWithType: DictionaryDecompounderTokenFilter.MinSubwordSize
  fullName: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.MinSubwordSize
- uid: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.MaxSubwordSize*
  commentId: Overload:Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.MaxSubwordSize
  isExternal: false
  name: MaxSubwordSize
  nameWithType: DictionaryDecompounderTokenFilter.MaxSubwordSize
  fullName: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.MaxSubwordSize
- uid: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.OnlyLongestMatch*
  commentId: Overload:Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.OnlyLongestMatch
  isExternal: false
  name: OnlyLongestMatch
  nameWithType: DictionaryDecompounderTokenFilter.OnlyLongestMatch
  fullName: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.OnlyLongestMatch
- uid: Microsoft.Azure.Search.Models.TokenFilter.Validate
  commentId: M:Microsoft.Azure.Search.Models.TokenFilter.Validate
  parent: Microsoft.Azure.Search.Models.TokenFilter
  isExternal: false
  name: Validate()
  nameWithType: TokenFilter.Validate()
  fullName: Microsoft.Azure.Search.Models.TokenFilter.Validate()
  spec.csharp:
  - uid: Microsoft.Azure.Search.Models.TokenFilter.Validate
    name: Validate
    nameWithType: TokenFilter.Validate
    fullName: Microsoft.Azure.Search.Models.TokenFilter.Validate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Search.Models.TokenFilter.Validate
    name: Validate
    nameWithType: TokenFilter.Validate
    fullName: Microsoft.Azure.Search.Models.TokenFilter.Validate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.Validate*
  commentId: Overload:Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.Validate
  isExternal: false
  name: Validate
  nameWithType: DictionaryDecompounderTokenFilter.Validate
  fullName: Microsoft.Azure.Search.Models.DictionaryDecompounderTokenFilter.Validate
- uid: Microsoft.Rest.ValidationException
  commentId: T:Microsoft.Rest.ValidationException
