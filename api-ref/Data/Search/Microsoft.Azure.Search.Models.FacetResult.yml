### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Search.Models.FacetResult
  commentId: T:Microsoft.Azure.Search.Models.FacetResult
  id: FacetResult
  parent: Microsoft.Azure.Search.Models
  children:
  - Microsoft.Azure.Search.Models.FacetResult.#ctor
  - Microsoft.Azure.Search.Models.FacetResult.AsRangeFacetResult``1
  - Microsoft.Azure.Search.Models.FacetResult.AsValueFacetResult``1
  - Microsoft.Azure.Search.Models.FacetResult.Count
  - Microsoft.Azure.Search.Models.FacetResult.From
  - Microsoft.Azure.Search.Models.FacetResult.To
  - Microsoft.Azure.Search.Models.FacetResult.Type
  - Microsoft.Azure.Search.Models.FacetResult.Value
  langs:
  - csharp
  - vb
  name: FacetResult
  nameWithType: FacetResult
  fullName: Microsoft.Azure.Search.Models.FacetResult
  type: Class
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/FacetResult.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: FacetResult
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/FacetResult.cs
    startLine: 13
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nA single bucket of a facet query result that reports the number of documents with a field falling within a\nparticular range or having a particular value or interval.\n"
  example: []
  syntax:
    content: public class FacetResult
    content.vb: Public Class FacetResult
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Search.Models.FacetResult.#ctor
  commentId: M:Microsoft.Azure.Search.Models.FacetResult.#ctor
  id: '#ctor'
  parent: Microsoft.Azure.Search.Models.FacetResult
  langs:
  - csharp
  - vb
  name: FacetResult()
  nameWithType: FacetResult.FacetResult()
  fullName: Microsoft.Azure.Search.Models.FacetResult.FacetResult()
  type: Constructor
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/FacetResult.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/FacetResult.cs
    startLine: 18
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nInitializes a new instance of the Facet class.\n"
  example: []
  syntax:
    content: public FacetResult()
    content.vb: Public Sub New
  overload: Microsoft.Azure.Search.Models.FacetResult.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.FacetResult.Type
  commentId: P:Microsoft.Azure.Search.Models.FacetResult.Type
  id: Type
  parent: Microsoft.Azure.Search.Models.FacetResult
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: FacetResult.Type
  fullName: Microsoft.Azure.Search.Models.FacetResult.Type
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/FacetResult.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Type
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/FacetResult.cs
    startLine: 26
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets a value indicating the type of this facet.\n"
  example: []
  syntax:
    content: public FacetType Type { get; }
    content.vb: Public ReadOnly Property Type As FacetType
    parameters: []
    return:
      type: Microsoft.Azure.Search.Models.FacetType
  overload: Microsoft.Azure.Search.Models.FacetResult.Type*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Search.Models.FacetResult.From
  commentId: P:Microsoft.Azure.Search.Models.FacetResult.From
  id: From
  parent: Microsoft.Azure.Search.Models.FacetResult
  langs:
  - csharp
  - vb
  name: From
  nameWithType: FacetResult.From
  fullName: Microsoft.Azure.Search.Models.FacetResult.From
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/FacetResult.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: From
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/FacetResult.cs
    startLine: 38
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets a value indicating the inclusive lower bound of the facet's range, or null to indicate that there is\nno lower bound (i.e. -- for the first bucket).\n"
  example: []
  syntax:
    content: >-
      [JsonProperty("from")]

      public object From { get; set; }
    content.vb: >-
      <JsonProperty("from")>

      Public Property From As Object
    parameters: []
    return:
      type: System.Object
  overload: Microsoft.Azure.Search.Models.FacetResult.From*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: from
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.FacetResult.To
  commentId: P:Microsoft.Azure.Search.Models.FacetResult.To
  id: To
  parent: Microsoft.Azure.Search.Models.FacetResult
  langs:
  - csharp
  - vb
  name: To
  nameWithType: FacetResult.To
  fullName: Microsoft.Azure.Search.Models.FacetResult.To
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/FacetResult.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: To
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/FacetResult.cs
    startLine: 45
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets a value indicating the exclusive upper bound of the facet's range, or null to indicate that there is\nno upper bound (i.e. -- for the last bucket).\n"
  example: []
  syntax:
    content: >-
      [JsonProperty("to")]

      public object To { get; set; }
    content.vb: >-
      <JsonProperty("to")>

      Public Property To As Object
    parameters: []
    return:
      type: System.Object
  overload: Microsoft.Azure.Search.Models.FacetResult.To*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: to
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.FacetResult.Value
  commentId: P:Microsoft.Azure.Search.Models.FacetResult.Value
  id: Value
  parent: Microsoft.Azure.Search.Models.FacetResult
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: FacetResult.Value
  fullName: Microsoft.Azure.Search.Models.FacetResult.Value
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/FacetResult.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Value
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/FacetResult.cs
    startLine: 51
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets the value of the facet, or the inclusive lower bound if it's an interval facet.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty("value")]

      public object Value { get; set; }
    content.vb: >-
      <JsonProperty("value")>

      Public Property Value As Object
    parameters: []
    return:
      type: System.Object
  overload: Microsoft.Azure.Search.Models.FacetResult.Value*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: value
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.FacetResult.Count
  commentId: P:Microsoft.Azure.Search.Models.FacetResult.Count
  id: Count
  parent: Microsoft.Azure.Search.Models.FacetResult
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: FacetResult.Count
  fullName: Microsoft.Azure.Search.Models.FacetResult.Count
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/FacetResult.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Count
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/FacetResult.cs
    startLine: 57
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets the approximate count of documents falling within the bucket described by this facet.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty("count")]

      public long ? Count { get; set; }
    content.vb: >-
      <JsonProperty("count")>

      Public Property Count As Long?
    parameters: []
    return:
      type: System.Nullable{System.Int64}
  overload: Microsoft.Azure.Search.Models.FacetResult.Count*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: count
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.FacetResult.AsRangeFacetResult``1
  commentId: M:Microsoft.Azure.Search.Models.FacetResult.AsRangeFacetResult``1
  id: AsRangeFacetResult``1
  parent: Microsoft.Azure.Search.Models.FacetResult
  langs:
  - csharp
  - vb
  name: AsRangeFacetResult<T>()
  nameWithType: FacetResult.AsRangeFacetResult<T>()
  fullName: Microsoft.Azure.Search.Models.FacetResult.AsRangeFacetResult<T>()
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/FacetResult.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: AsRangeFacetResult
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/FacetResult.cs
    startLine: 70
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nAttempts to convert the facet to a range facet of the given type.\n"
  example: []
  syntax:
    content: 'public RangeFacetResult<T> AsRangeFacetResult<T>()where T : struct'
    content.vb: Public Function AsRangeFacetResult(Of T As Structure) As RangeFacetResult(Of T)
    typeParameters:
    - id: T
      description: "\nA type that matches the type of the field to which the facet was applied. Valid types include\n<code>DateTimeOffset</code>, <code>Double</code>, and\n<code>Int64</code> (long in C#).\n"
    return:
      type: Microsoft.Azure.Search.Models.RangeFacetResult{{T}}
      description: A new strongly-typed range facet instance.
  overload: Microsoft.Azure.Search.Models.FacetResult.AsRangeFacetResult*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: This instance is not a range facet of the given type.
  nameWithType.vb: FacetResult.AsRangeFacetResult(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Search.Models.FacetResult.AsRangeFacetResult(Of T)()
  name.vb: AsRangeFacetResult(Of T)()
- uid: Microsoft.Azure.Search.Models.FacetResult.AsValueFacetResult``1
  commentId: M:Microsoft.Azure.Search.Models.FacetResult.AsValueFacetResult``1
  id: AsValueFacetResult``1
  parent: Microsoft.Azure.Search.Models.FacetResult
  langs:
  - csharp
  - vb
  name: AsValueFacetResult<T>()
  nameWithType: FacetResult.AsValueFacetResult<T>()
  fullName: Microsoft.Azure.Search.Models.FacetResult.AsValueFacetResult<T>()
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/FacetResult.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: AsValueFacetResult
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/FacetResult.cs
    startLine: 88
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nAttempts to convert the facet to a value facet of the given type.\n"
  example: []
  syntax:
    content: public ValueFacetResult<T> AsValueFacetResult<T>()
    content.vb: Public Function AsValueFacetResult(Of T) As ValueFacetResult(Of T)
    typeParameters:
    - id: T
      description: "\nA type that matches the type of the field to which the facet was applied.\n"
    return:
      type: Microsoft.Azure.Search.Models.ValueFacetResult{{T}}
      description: A new strongly-typed value facet instance.
  overload: Microsoft.Azure.Search.Models.FacetResult.AsValueFacetResult*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: This instance is not a value facet of the given type.
  nameWithType.vb: FacetResult.AsValueFacetResult(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Search.Models.FacetResult.AsValueFacetResult(Of T)()
  name.vb: AsValueFacetResult(Of T)()
references:
- uid: Microsoft.Azure.Search.Models
  commentId: N:Microsoft.Azure.Search.Models
  isExternal: false
  name: Microsoft.Azure.Search.Models
  nameWithType: Microsoft.Azure.Search.Models
  fullName: Microsoft.Azure.Search.Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Search.Models.FacetResult.#ctor*
  commentId: Overload:Microsoft.Azure.Search.Models.FacetResult.#ctor
  isExternal: false
  name: FacetResult
  nameWithType: FacetResult.FacetResult
  fullName: Microsoft.Azure.Search.Models.FacetResult.FacetResult
- uid: Microsoft.Azure.Search.Models.FacetResult.Type*
  commentId: Overload:Microsoft.Azure.Search.Models.FacetResult.Type
  isExternal: false
  name: Type
  nameWithType: FacetResult.Type
  fullName: Microsoft.Azure.Search.Models.FacetResult.Type
- uid: Microsoft.Azure.Search.Models.FacetType
  commentId: T:Microsoft.Azure.Search.Models.FacetType
  parent: Microsoft.Azure.Search.Models
  isExternal: false
  name: FacetType
  nameWithType: FacetType
  fullName: Microsoft.Azure.Search.Models.FacetType
- uid: Microsoft.Azure.Search.Models.FacetResult.From*
  commentId: Overload:Microsoft.Azure.Search.Models.FacetResult.From
  isExternal: false
  name: From
  nameWithType: FacetResult.From
  fullName: Microsoft.Azure.Search.Models.FacetResult.From
- uid: Microsoft.Azure.Search.Models.FacetResult.To*
  commentId: Overload:Microsoft.Azure.Search.Models.FacetResult.To
  isExternal: false
  name: To
  nameWithType: FacetResult.To
  fullName: Microsoft.Azure.Search.Models.FacetResult.To
- uid: Microsoft.Azure.Search.Models.FacetResult.Value*
  commentId: Overload:Microsoft.Azure.Search.Models.FacetResult.Value
  isExternal: false
  name: Value
  nameWithType: FacetResult.Value
  fullName: Microsoft.Azure.Search.Models.FacetResult.Value
- uid: Microsoft.Azure.Search.Models.FacetResult.Count*
  commentId: Overload:Microsoft.Azure.Search.Models.FacetResult.Count
  isExternal: false
  name: Count
  nameWithType: FacetResult.Count
  fullName: Microsoft.Azure.Search.Models.FacetResult.Count
- uid: System.Nullable{System.Int64}
  commentId: T:System.Nullable{System.Int64}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  nameWithType.vb: Nullable(Of Int64)
  fullname.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Search.Models.FacetResult.AsRangeFacetResult*
  commentId: Overload:Microsoft.Azure.Search.Models.FacetResult.AsRangeFacetResult
  isExternal: false
  name: AsRangeFacetResult<T>
  nameWithType: FacetResult.AsRangeFacetResult<T>
  fullName: Microsoft.Azure.Search.Models.FacetResult.AsRangeFacetResult<T>
  nameWithType.vb: FacetResult.AsRangeFacetResult(Of T)
  fullname.vb: Microsoft.Azure.Search.Models.FacetResult.AsRangeFacetResult(Of T)
  name.vb: AsRangeFacetResult(Of T)
- uid: System.InvalidCastException
  commentId: T:System.InvalidCastException
- uid: Microsoft.Azure.Search.Models.RangeFacetResult{{T}}
  commentId: T:Microsoft.Azure.Search.Models.RangeFacetResult{``0}
  parent: Microsoft.Azure.Search.Models
  definition: Microsoft.Azure.Search.Models.RangeFacetResult`1
  name: RangeFacetResult<T>
  nameWithType: RangeFacetResult<T>
  fullName: Microsoft.Azure.Search.Models.RangeFacetResult<T>
  nameWithType.vb: RangeFacetResult(Of T)
  fullname.vb: Microsoft.Azure.Search.Models.RangeFacetResult(Of T)
  name.vb: RangeFacetResult(Of T)
  spec.csharp:
  - uid: Microsoft.Azure.Search.Models.RangeFacetResult`1
    name: RangeFacetResult
    nameWithType: RangeFacetResult
    fullName: Microsoft.Azure.Search.Models.RangeFacetResult
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Search.Models.RangeFacetResult`1
    name: RangeFacetResult
    nameWithType: RangeFacetResult
    fullName: Microsoft.Azure.Search.Models.RangeFacetResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Search.Models.RangeFacetResult`1
  commentId: T:Microsoft.Azure.Search.Models.RangeFacetResult`1
  isExternal: false
  name: RangeFacetResult<T>
  nameWithType: RangeFacetResult<T>
  fullName: Microsoft.Azure.Search.Models.RangeFacetResult<T>
  nameWithType.vb: RangeFacetResult(Of T)
  fullname.vb: Microsoft.Azure.Search.Models.RangeFacetResult(Of T)
  name.vb: RangeFacetResult(Of T)
  spec.csharp:
  - uid: Microsoft.Azure.Search.Models.RangeFacetResult`1
    name: RangeFacetResult
    nameWithType: RangeFacetResult
    fullName: Microsoft.Azure.Search.Models.RangeFacetResult
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Search.Models.RangeFacetResult`1
    name: RangeFacetResult
    nameWithType: RangeFacetResult
    fullName: Microsoft.Azure.Search.Models.RangeFacetResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Search.Models.FacetResult.AsValueFacetResult*
  commentId: Overload:Microsoft.Azure.Search.Models.FacetResult.AsValueFacetResult
  isExternal: false
  name: AsValueFacetResult<T>
  nameWithType: FacetResult.AsValueFacetResult<T>
  fullName: Microsoft.Azure.Search.Models.FacetResult.AsValueFacetResult<T>
  nameWithType.vb: FacetResult.AsValueFacetResult(Of T)
  fullname.vb: Microsoft.Azure.Search.Models.FacetResult.AsValueFacetResult(Of T)
  name.vb: AsValueFacetResult(Of T)
- uid: Microsoft.Azure.Search.Models.ValueFacetResult{{T}}
  commentId: T:Microsoft.Azure.Search.Models.ValueFacetResult{``0}
  parent: Microsoft.Azure.Search.Models
  definition: Microsoft.Azure.Search.Models.ValueFacetResult`1
  name: ValueFacetResult<T>
  nameWithType: ValueFacetResult<T>
  fullName: Microsoft.Azure.Search.Models.ValueFacetResult<T>
  nameWithType.vb: ValueFacetResult(Of T)
  fullname.vb: Microsoft.Azure.Search.Models.ValueFacetResult(Of T)
  name.vb: ValueFacetResult(Of T)
  spec.csharp:
  - uid: Microsoft.Azure.Search.Models.ValueFacetResult`1
    name: ValueFacetResult
    nameWithType: ValueFacetResult
    fullName: Microsoft.Azure.Search.Models.ValueFacetResult
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Search.Models.ValueFacetResult`1
    name: ValueFacetResult
    nameWithType: ValueFacetResult
    fullName: Microsoft.Azure.Search.Models.ValueFacetResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Search.Models.ValueFacetResult`1
  commentId: T:Microsoft.Azure.Search.Models.ValueFacetResult`1
  isExternal: false
  name: ValueFacetResult<T>
  nameWithType: ValueFacetResult<T>
  fullName: Microsoft.Azure.Search.Models.ValueFacetResult<T>
  nameWithType.vb: ValueFacetResult(Of T)
  fullname.vb: Microsoft.Azure.Search.Models.ValueFacetResult(Of T)
  name.vb: ValueFacetResult(Of T)
  spec.csharp:
  - uid: Microsoft.Azure.Search.Models.ValueFacetResult`1
    name: ValueFacetResult
    nameWithType: ValueFacetResult
    fullName: Microsoft.Azure.Search.Models.ValueFacetResult
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Search.Models.ValueFacetResult`1
    name: ValueFacetResult
    nameWithType: ValueFacetResult
    fullName: Microsoft.Azure.Search.Models.ValueFacetResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
