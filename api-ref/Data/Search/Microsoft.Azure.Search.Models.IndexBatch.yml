### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Search.Models.IndexBatch
  commentId: T:Microsoft.Azure.Search.Models.IndexBatch
  id: IndexBatch
  parent: Microsoft.Azure.Search.Models
  children:
  - Microsoft.Azure.Search.Models.IndexBatch.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.IndexAction})
  - Microsoft.Azure.Search.Models.IndexBatch.Delete(System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.Document})
  - Microsoft.Azure.Search.Models.IndexBatch.Delete(System.String,System.Collections.Generic.IEnumerable{System.String})
  - Microsoft.Azure.Search.Models.IndexBatch.Delete``1(System.Collections.Generic.IEnumerable{``0})
  - Microsoft.Azure.Search.Models.IndexBatch.Merge(System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.Document})
  - Microsoft.Azure.Search.Models.IndexBatch.Merge``1(System.Collections.Generic.IEnumerable{``0})
  - Microsoft.Azure.Search.Models.IndexBatch.MergeOrUpload(System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.Document})
  - Microsoft.Azure.Search.Models.IndexBatch.MergeOrUpload``1(System.Collections.Generic.IEnumerable{``0})
  - Microsoft.Azure.Search.Models.IndexBatch.New(System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.IndexAction})
  - Microsoft.Azure.Search.Models.IndexBatch.New``1(System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.IndexAction{``0}})
  - Microsoft.Azure.Search.Models.IndexBatch.Upload(System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.Document})
  - Microsoft.Azure.Search.Models.IndexBatch.Upload``1(System.Collections.Generic.IEnumerable{``0})
  langs:
  - csharp
  - vb
  name: IndexBatch
  nameWithType: IndexBatch
  fullName: Microsoft.Azure.Search.Models.IndexBatch
  type: Class
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/IndexBatch.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: IndexBatch
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/IndexBatch.cs
    startLine: 13
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nContains a batch of document upload, merge, and/or delete operations to send to the Azure Search index.\n"
  example: []
  syntax:
    content: 'public class IndexBatch : IndexBatchBase<IndexAction, Document>'
    content.vb: >-
      Public Class IndexBatch
          Inherits IndexBatchBase(Of IndexAction, Document)
  inheritance:
  - System.Object
  - Microsoft.Azure.Search.Models.IndexBatchBase{Microsoft.Azure.Search.Models.IndexAction,Microsoft.Azure.Search.Models.Document}
  inheritedMembers:
  - Microsoft.Azure.Search.Models.IndexBatchBase{Microsoft.Azure.Search.Models.IndexAction,Microsoft.Azure.Search.Models.Document}.Actions
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Search.Models.IndexBatch.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.IndexAction})
  commentId: M:Microsoft.Azure.Search.Models.IndexBatch.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.IndexAction})
  id: '#ctor(System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.IndexAction})'
  parent: Microsoft.Azure.Search.Models.IndexBatch
  langs:
  - csharp
  - vb
  name: IndexBatch(IEnumerable<IndexAction>)
  nameWithType: IndexBatch.IndexBatch(IEnumerable<IndexAction>)
  fullName: Microsoft.Azure.Search.Models.IndexBatch.IndexBatch(System.Collections.Generic.IEnumerable<Microsoft.Azure.Search.Models.IndexAction>)
  type: Constructor
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/IndexBatch.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/IndexBatch.cs
    startLine: 19
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nInitializes a new instance of the IndexBatch class.\n"
  example: []
  syntax:
    content: public IndexBatch(IEnumerable<IndexAction> actions)
    content.vb: Public Sub New(actions As IEnumerable(Of IndexAction))
    parameters:
    - id: actions
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.IndexAction}
      description: The index actions to include in the batch.
  overload: Microsoft.Azure.Search.Models.IndexBatch.#ctor*
  nameWithType.vb: IndexBatch.IndexBatch(IEnumerable(Of IndexAction))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Search.Models.IndexBatch.IndexBatch(System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Search.Models.IndexAction))
  name.vb: IndexBatch(IEnumerable(Of IndexAction))
- uid: Microsoft.Azure.Search.Models.IndexBatch.Delete(System.String,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.Azure.Search.Models.IndexBatch.Delete(System.String,System.Collections.Generic.IEnumerable{System.String})
  id: Delete(System.String,System.Collections.Generic.IEnumerable{System.String})
  parent: Microsoft.Azure.Search.Models.IndexBatch
  langs:
  - csharp
  - vb
  name: Delete(String, IEnumerable<String>)
  nameWithType: IndexBatch.Delete(String, IEnumerable<String>)
  fullName: Microsoft.Azure.Search.Models.IndexBatch.Delete(System.String, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/IndexBatch.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Delete
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/IndexBatch.cs
    startLine: 30
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nCreates a new IndexBatch for deleting a batch of documents.\n"
  example: []
  syntax:
    content: public static IndexBatch Delete(string keyName, IEnumerable<string> keyValues)
    content.vb: Public Shared Function Delete(keyName As String, keyValues As IEnumerable(Of String)) As IndexBatch
    parameters:
    - id: keyName
      type: System.String
      description: The name of the key field that uniquely identifies documents in the index.
    - id: keyValues
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The keys of the documents to delete.
    return:
      type: Microsoft.Azure.Search.Models.IndexBatch
      description: A new IndexBatch.
  overload: Microsoft.Azure.Search.Models.IndexBatch.Delete*
  nameWithType.vb: IndexBatch.Delete(String, IEnumerable(Of String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.Search.Models.IndexBatch.Delete(System.String, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: Delete(String, IEnumerable(Of String))
- uid: Microsoft.Azure.Search.Models.IndexBatch.Delete(System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.Document})
  commentId: M:Microsoft.Azure.Search.Models.IndexBatch.Delete(System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.Document})
  id: Delete(System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.Document})
  parent: Microsoft.Azure.Search.Models.IndexBatch
  langs:
  - csharp
  - vb
  name: Delete(IEnumerable<Document>)
  nameWithType: IndexBatch.Delete(IEnumerable<Document>)
  fullName: Microsoft.Azure.Search.Models.IndexBatch.Delete(System.Collections.Generic.IEnumerable<Microsoft.Azure.Search.Models.Document>)
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/IndexBatch.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Delete
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/IndexBatch.cs
    startLine: 43
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nCreates a new IndexBatch for deleting a batch of documents.\n"
  example: []
  syntax:
    content: public static IndexBatch Delete(IEnumerable<Document> documents)
    content.vb: Public Shared Function Delete(documents As IEnumerable(Of Document)) As IndexBatch
    parameters:
    - id: documents
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.Document}
      description: The documents to delete; Fields other than the key are ignored.
    return:
      type: Microsoft.Azure.Search.Models.IndexBatch
      description: A new IndexBatch.
  overload: Microsoft.Azure.Search.Models.IndexBatch.Delete*
  nameWithType.vb: IndexBatch.Delete(IEnumerable(Of Document))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.Search.Models.IndexBatch.Delete(System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Search.Models.Document))
  name.vb: Delete(IEnumerable(Of Document))
- uid: Microsoft.Azure.Search.Models.IndexBatch.Delete``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.Azure.Search.Models.IndexBatch.Delete``1(System.Collections.Generic.IEnumerable{``0})
  id: Delete``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.Azure.Search.Models.IndexBatch
  langs:
  - csharp
  - vb
  name: Delete<T>(IEnumerable<T>)
  nameWithType: IndexBatch.Delete<T>(IEnumerable<T>)
  fullName: Microsoft.Azure.Search.Models.IndexBatch.Delete<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/IndexBatch.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Delete
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/IndexBatch.cs
    startLine: 58
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nCreates a new IndexBatch for deleting a batch of documents.\n"
  example: []
  syntax:
    content: 'public static IndexBatch<T> Delete<T>(IEnumerable<T> documents)where T : class'
    content.vb: Public Shared Function Delete(Of T As Class)(documents As IEnumerable(Of T)) As IndexBatch(Of T)
    parameters:
    - id: documents
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The documents to delete; Fields other than the key are ignored.
    typeParameters:
    - id: T
      description: "\nThe CLR type that maps to the index schema. Instances of this type can be stored as documents in the index.\n"
    return:
      type: Microsoft.Azure.Search.Models.IndexBatch{{T}}
      description: A new IndexBatch.
  overload: Microsoft.Azure.Search.Models.IndexBatch.Delete*
  nameWithType.vb: IndexBatch.Delete(Of T)(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.Search.Models.IndexBatch.Delete(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Delete(Of T)(IEnumerable(Of T))
- uid: Microsoft.Azure.Search.Models.IndexBatch.Merge(System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.Document})
  commentId: M:Microsoft.Azure.Search.Models.IndexBatch.Merge(System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.Document})
  id: Merge(System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.Document})
  parent: Microsoft.Azure.Search.Models.IndexBatch
  langs:
  - csharp
  - vb
  name: Merge(IEnumerable<Document>)
  nameWithType: IndexBatch.Merge(IEnumerable<Document>)
  fullName: Microsoft.Azure.Search.Models.IndexBatch.Merge(System.Collections.Generic.IEnumerable<Microsoft.Azure.Search.Models.Document>)
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/IndexBatch.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Merge
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/IndexBatch.cs
    startLine: 70
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nCreates a new IndexBatch for merging documents into existing documents in the index.\n"
  example: []
  syntax:
    content: public static IndexBatch Merge(IEnumerable<Document> documents)
    content.vb: Public Shared Function Merge(documents As IEnumerable(Of Document)) As IndexBatch
    parameters:
    - id: documents
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.Document}
      description: The documents to merge; Set only the fields that you want to change.
    return:
      type: Microsoft.Azure.Search.Models.IndexBatch
      description: A new IndexBatch.
  overload: Microsoft.Azure.Search.Models.IndexBatch.Merge*
  nameWithType.vb: IndexBatch.Merge(IEnumerable(Of Document))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.Search.Models.IndexBatch.Merge(System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Search.Models.Document))
  name.vb: Merge(IEnumerable(Of Document))
- uid: Microsoft.Azure.Search.Models.IndexBatch.Merge``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.Azure.Search.Models.IndexBatch.Merge``1(System.Collections.Generic.IEnumerable{``0})
  id: Merge``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.Azure.Search.Models.IndexBatch
  langs:
  - csharp
  - vb
  name: Merge<T>(IEnumerable<T>)
  nameWithType: IndexBatch.Merge<T>(IEnumerable<T>)
  fullName: Microsoft.Azure.Search.Models.IndexBatch.Merge<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/IndexBatch.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Merge
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/IndexBatch.cs
    startLine: 92
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nCreates a new IndexBatch for merging documents into existing documents in the index.\n"
  remarks: "\nIf type T contains non-nullable value-typed properties, these properties may not merge correctly. If you\ndo not set such a property, it will automatically take its default value (for example, 0 for int or false\nfor bool), which will override the value of the property currently stored in the index, even if this was\nnot your intent. For this reason, it is strongly recommended that you always declare value-typed\nproperties to be nullable in type T.\n"
  example: []
  syntax:
    content: 'public static IndexBatch<T> Merge<T>(IEnumerable<T> documents)where T : class'
    content.vb: Public Shared Function Merge(Of T As Class)(documents As IEnumerable(Of T)) As IndexBatch(Of T)
    parameters:
    - id: documents
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The documents to merge; Set only the properties that you want to change.
    typeParameters:
    - id: T
      description: "\nThe CLR type that maps to the index schema. Instances of this type can be stored as documents in the index.\n"
    return:
      type: Microsoft.Azure.Search.Models.IndexBatch{{T}}
      description: A new IndexBatch.
  overload: Microsoft.Azure.Search.Models.IndexBatch.Merge*
  nameWithType.vb: IndexBatch.Merge(Of T)(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.Search.Models.IndexBatch.Merge(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Merge(Of T)(IEnumerable(Of T))
- uid: Microsoft.Azure.Search.Models.IndexBatch.MergeOrUpload(System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.Document})
  commentId: M:Microsoft.Azure.Search.Models.IndexBatch.MergeOrUpload(System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.Document})
  id: MergeOrUpload(System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.Document})
  parent: Microsoft.Azure.Search.Models.IndexBatch
  langs:
  - csharp
  - vb
  name: MergeOrUpload(IEnumerable<Document>)
  nameWithType: IndexBatch.MergeOrUpload(IEnumerable<Document>)
  fullName: Microsoft.Azure.Search.Models.IndexBatch.MergeOrUpload(System.Collections.Generic.IEnumerable<Microsoft.Azure.Search.Models.Document>)
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/IndexBatch.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: MergeOrUpload
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/IndexBatch.cs
    startLine: 105
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nCreates a new IndexBatch for uploading documents to the index, or merging them into existing documents\nfor those that already exist in the index.\n"
  example: []
  syntax:
    content: public static IndexBatch MergeOrUpload(IEnumerable<Document> documents)
    content.vb: Public Shared Function MergeOrUpload(documents As IEnumerable(Of Document)) As IndexBatch
    parameters:
    - id: documents
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.Document}
      description: The documents to merge or upload.
    return:
      type: Microsoft.Azure.Search.Models.IndexBatch
      description: A new IndexBatch.
  overload: Microsoft.Azure.Search.Models.IndexBatch.MergeOrUpload*
  nameWithType.vb: IndexBatch.MergeOrUpload(IEnumerable(Of Document))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.Search.Models.IndexBatch.MergeOrUpload(System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Search.Models.Document))
  name.vb: MergeOrUpload(IEnumerable(Of Document))
- uid: Microsoft.Azure.Search.Models.IndexBatch.MergeOrUpload``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.Azure.Search.Models.IndexBatch.MergeOrUpload``1(System.Collections.Generic.IEnumerable{``0})
  id: MergeOrUpload``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.Azure.Search.Models.IndexBatch
  langs:
  - csharp
  - vb
  name: MergeOrUpload<T>(IEnumerable<T>)
  nameWithType: IndexBatch.MergeOrUpload<T>(IEnumerable<T>)
  fullName: Microsoft.Azure.Search.Models.IndexBatch.MergeOrUpload<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/IndexBatch.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: MergeOrUpload
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/IndexBatch.cs
    startLine: 128
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nCreates a new IndexBatch for uploading documents to the index, or merging them into existing documents\nfor those that already exist in the index.\n"
  remarks: "\nIf type T contains non-nullable value-typed properties, these properties may not merge correctly. If you\ndo not set such a property, it will automatically take its default value (for example, 0 for int or false\nfor bool), which will override the value of the property currently stored in the index, even if this was\nnot your intent. For this reason, it is strongly recommended that you always declare value-typed\nproperties to be nullable in type T.\n"
  example: []
  syntax:
    content: 'public static IndexBatch<T> MergeOrUpload<T>(IEnumerable<T> documents)where T : class'
    content.vb: Public Shared Function MergeOrUpload(Of T As Class)(documents As IEnumerable(Of T)) As IndexBatch(Of T)
    parameters:
    - id: documents
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The documents to merge or upload.
    typeParameters:
    - id: T
      description: "\nThe CLR type that maps to the index schema. Instances of this type can be stored as documents in the index.\n"
    return:
      type: Microsoft.Azure.Search.Models.IndexBatch{{T}}
      description: A new IndexBatch.
  overload: Microsoft.Azure.Search.Models.IndexBatch.MergeOrUpload*
  nameWithType.vb: IndexBatch.MergeOrUpload(Of T)(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.Search.Models.IndexBatch.MergeOrUpload(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: MergeOrUpload(Of T)(IEnumerable(Of T))
- uid: Microsoft.Azure.Search.Models.IndexBatch.New(System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.IndexAction})
  commentId: M:Microsoft.Azure.Search.Models.IndexBatch.New(System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.IndexAction})
  id: New(System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.IndexAction})
  parent: Microsoft.Azure.Search.Models.IndexBatch
  langs:
  - csharp
  - vb
  name: New(IEnumerable<IndexAction>)
  nameWithType: IndexBatch.New(IEnumerable<IndexAction>)
  fullName: Microsoft.Azure.Search.Models.IndexBatch.New(System.Collections.Generic.IEnumerable<Microsoft.Azure.Search.Models.IndexAction>)
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/IndexBatch.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: New
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/IndexBatch.cs
    startLine: 140
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nCreates a new instance of the IndexBatch class.\n"
  example: []
  syntax:
    content: public static IndexBatch New(IEnumerable<IndexAction> actions)
    content.vb: Public Shared Function New(actions As IEnumerable(Of IndexAction)) As IndexBatch
    parameters:
    - id: actions
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.IndexAction}
      description: The index actions to include in the batch.
    return:
      type: Microsoft.Azure.Search.Models.IndexBatch
      description: A new IndexBatch.
  overload: Microsoft.Azure.Search.Models.IndexBatch.New*
  nameWithType.vb: IndexBatch.New(IEnumerable(Of IndexAction))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.Search.Models.IndexBatch.New(System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Search.Models.IndexAction))
  name.vb: New(IEnumerable(Of IndexAction))
- uid: Microsoft.Azure.Search.Models.IndexBatch.New``1(System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.IndexAction{``0}})
  commentId: M:Microsoft.Azure.Search.Models.IndexBatch.New``1(System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.IndexAction{``0}})
  id: New``1(System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.IndexAction{``0}})
  parent: Microsoft.Azure.Search.Models.IndexBatch
  langs:
  - csharp
  - vb
  name: New<T>(IEnumerable<IndexAction<T>>)
  nameWithType: IndexBatch.New<T>(IEnumerable<IndexAction<T>>)
  fullName: Microsoft.Azure.Search.Models.IndexBatch.New<T>(System.Collections.Generic.IEnumerable<Microsoft.Azure.Search.Models.IndexAction<T>>)
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/IndexBatch.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: New
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/IndexBatch.cs
    startLine: 157
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nCreates a new instance of the IndexBatch class.\n"
  remarks: "\nYou can use this method as a convenience if you don't want to explicitly specify your model class as a\ntype parameter.\n"
  example: []
  syntax:
    content: 'public static IndexBatch<T> New<T>(IEnumerable<IndexAction<T>> actions)where T : class'
    content.vb: Public Shared Function New(Of T As Class)(actions As IEnumerable(Of IndexAction(Of T))) As IndexBatch(Of T)
    parameters:
    - id: actions
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.IndexAction{{T}}}
      description: The index actions to include in the batch.
    typeParameters:
    - id: T
      description: "\nThe CLR type that maps to the index schema. Instances of this type can be stored as documents in the index.\n"
    return:
      type: Microsoft.Azure.Search.Models.IndexBatch{{T}}
      description: A new IndexBatch.
  overload: Microsoft.Azure.Search.Models.IndexBatch.New*
  nameWithType.vb: IndexBatch.New(Of T)(IEnumerable(Of IndexAction(Of T)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.Search.Models.IndexBatch.New(Of T)(System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Search.Models.IndexAction(Of T)))
  name.vb: New(Of T)(IEnumerable(Of IndexAction(Of T)))
- uid: Microsoft.Azure.Search.Models.IndexBatch.Upload(System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.Document})
  commentId: M:Microsoft.Azure.Search.Models.IndexBatch.Upload(System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.Document})
  id: Upload(System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.Document})
  parent: Microsoft.Azure.Search.Models.IndexBatch
  langs:
  - csharp
  - vb
  name: Upload(IEnumerable<Document>)
  nameWithType: IndexBatch.Upload(IEnumerable<Document>)
  fullName: Microsoft.Azure.Search.Models.IndexBatch.Upload(System.Collections.Generic.IEnumerable<Microsoft.Azure.Search.Models.Document>)
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/IndexBatch.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Upload
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/IndexBatch.cs
    startLine: 167
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nCreates a new IndexBatch for uploading documents to the index.\n"
  example: []
  syntax:
    content: public static IndexBatch Upload(IEnumerable<Document> documents)
    content.vb: Public Shared Function Upload(documents As IEnumerable(Of Document)) As IndexBatch
    parameters:
    - id: documents
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.Document}
      description: The documents to upload.
    return:
      type: Microsoft.Azure.Search.Models.IndexBatch
      description: A new IndexBatch.
  overload: Microsoft.Azure.Search.Models.IndexBatch.Upload*
  nameWithType.vb: IndexBatch.Upload(IEnumerable(Of Document))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.Search.Models.IndexBatch.Upload(System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Search.Models.Document))
  name.vb: Upload(IEnumerable(Of Document))
- uid: Microsoft.Azure.Search.Models.IndexBatch.Upload``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Microsoft.Azure.Search.Models.IndexBatch.Upload``1(System.Collections.Generic.IEnumerable{``0})
  id: Upload``1(System.Collections.Generic.IEnumerable{``0})
  parent: Microsoft.Azure.Search.Models.IndexBatch
  langs:
  - csharp
  - vb
  name: Upload<T>(IEnumerable<T>)
  nameWithType: IndexBatch.Upload<T>(IEnumerable<T>)
  fullName: Microsoft.Azure.Search.Models.IndexBatch.Upload<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/IndexBatch.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Upload
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/IndexBatch.cs
    startLine: 182
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nCreates a new IndexBatch for uploading documents to the index.\n"
  example: []
  syntax:
    content: 'public static IndexBatch<T> Upload<T>(IEnumerable<T> documents)where T : class'
    content.vb: Public Shared Function Upload(Of T As Class)(documents As IEnumerable(Of T)) As IndexBatch(Of T)
    parameters:
    - id: documents
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The documents to upload.
    typeParameters:
    - id: T
      description: "\nThe CLR type that maps to the index schema. Instances of this type can be stored as documents in the index.\n"
    return:
      type: Microsoft.Azure.Search.Models.IndexBatch{{T}}
      description: A new IndexBatch.
  overload: Microsoft.Azure.Search.Models.IndexBatch.Upload*
  nameWithType.vb: IndexBatch.Upload(Of T)(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.Search.Models.IndexBatch.Upload(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Upload(Of T)(IEnumerable(Of T))
references:
- uid: Microsoft.Azure.Search.Models
  commentId: N:Microsoft.Azure.Search.Models
  isExternal: false
  name: Microsoft.Azure.Search.Models
  nameWithType: Microsoft.Azure.Search.Models
  fullName: Microsoft.Azure.Search.Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Azure.Search.Models.IndexBatchBase{Microsoft.Azure.Search.Models.IndexAction,Microsoft.Azure.Search.Models.Document}
  commentId: T:Microsoft.Azure.Search.Models.IndexBatchBase{Microsoft.Azure.Search.Models.IndexAction,Microsoft.Azure.Search.Models.Document}
  parent: Microsoft.Azure.Search.Models
  definition: Microsoft.Azure.Search.Models.IndexBatchBase`2
  name: IndexBatchBase<IndexAction, Document>
  nameWithType: IndexBatchBase<IndexAction, Document>
  fullName: Microsoft.Azure.Search.Models.IndexBatchBase<Microsoft.Azure.Search.Models.IndexAction, Microsoft.Azure.Search.Models.Document>
  nameWithType.vb: IndexBatchBase(Of IndexAction, Document)
  fullname.vb: Microsoft.Azure.Search.Models.IndexBatchBase(Of Microsoft.Azure.Search.Models.IndexAction, Microsoft.Azure.Search.Models.Document)
  name.vb: IndexBatchBase(Of IndexAction, Document)
  spec.csharp:
  - uid: Microsoft.Azure.Search.Models.IndexBatchBase`2
    name: IndexBatchBase
    nameWithType: IndexBatchBase
    fullName: Microsoft.Azure.Search.Models.IndexBatchBase
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Search.Models.IndexAction
    name: IndexAction
    nameWithType: IndexAction
    fullName: Microsoft.Azure.Search.Models.IndexAction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Azure.Search.Models.Document
    name: Document
    nameWithType: Document
    fullName: Microsoft.Azure.Search.Models.Document
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Search.Models.IndexBatchBase`2
    name: IndexBatchBase
    nameWithType: IndexBatchBase
    fullName: Microsoft.Azure.Search.Models.IndexBatchBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Search.Models.IndexAction
    name: IndexAction
    nameWithType: IndexAction
    fullName: Microsoft.Azure.Search.Models.IndexAction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Azure.Search.Models.Document
    name: Document
    nameWithType: Document
    fullName: Microsoft.Azure.Search.Models.Document
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Search.Models.IndexBatchBase{Microsoft.Azure.Search.Models.IndexAction,Microsoft.Azure.Search.Models.Document}.Actions
  commentId: P:Microsoft.Azure.Search.Models.IndexBatchBase{Microsoft.Azure.Search.Models.IndexAction,Microsoft.Azure.Search.Models.Document}.Actions
  parent: Microsoft.Azure.Search.Models.IndexBatchBase{Microsoft.Azure.Search.Models.IndexAction,Microsoft.Azure.Search.Models.Document}
  definition: Microsoft.Azure.Search.Models.IndexBatchBase`2.Actions
  name: Actions
  nameWithType: IndexBatchBase<IndexAction, Document>.Actions
  fullName: Microsoft.Azure.Search.Models.IndexBatchBase<Microsoft.Azure.Search.Models.IndexAction, Microsoft.Azure.Search.Models.Document>.Actions
  nameWithType.vb: IndexBatchBase(Of IndexAction, Document).Actions
  fullname.vb: Microsoft.Azure.Search.Models.IndexBatchBase(Of Microsoft.Azure.Search.Models.IndexAction, Microsoft.Azure.Search.Models.Document).Actions
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Search.Models.IndexBatchBase`2
  commentId: T:Microsoft.Azure.Search.Models.IndexBatchBase`2
  isExternal: false
  name: IndexBatchBase<TAction, TDoc>
  nameWithType: IndexBatchBase<TAction, TDoc>
  fullName: Microsoft.Azure.Search.Models.IndexBatchBase<TAction, TDoc>
  nameWithType.vb: IndexBatchBase(Of TAction, TDoc)
  fullname.vb: Microsoft.Azure.Search.Models.IndexBatchBase(Of TAction, TDoc)
  name.vb: IndexBatchBase(Of TAction, TDoc)
  spec.csharp:
  - uid: Microsoft.Azure.Search.Models.IndexBatchBase`2
    name: IndexBatchBase
    nameWithType: IndexBatchBase
    fullName: Microsoft.Azure.Search.Models.IndexBatchBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TAction
    nameWithType: TAction
    fullName: TAction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDoc
    nameWithType: TDoc
    fullName: TDoc
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Search.Models.IndexBatchBase`2
    name: IndexBatchBase
    nameWithType: IndexBatchBase
    fullName: Microsoft.Azure.Search.Models.IndexBatchBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAction
    nameWithType: TAction
    fullName: TAction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDoc
    nameWithType: TDoc
    fullName: TDoc
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Search.Models.IndexBatchBase`2.Actions
  commentId: P:Microsoft.Azure.Search.Models.IndexBatchBase`2.Actions
  isExternal: false
  name: Actions
  nameWithType: IndexBatchBase<TAction, TDoc>.Actions
  fullName: Microsoft.Azure.Search.Models.IndexBatchBase<TAction, TDoc>.Actions
  nameWithType.vb: IndexBatchBase(Of TAction, TDoc).Actions
  fullname.vb: Microsoft.Azure.Search.Models.IndexBatchBase(Of TAction, TDoc).Actions
- uid: Microsoft.Azure.Search.Models.IndexBatch.#ctor*
  commentId: Overload:Microsoft.Azure.Search.Models.IndexBatch.#ctor
  isExternal: false
  name: IndexBatch
  nameWithType: IndexBatch.IndexBatch
  fullName: Microsoft.Azure.Search.Models.IndexBatch.IndexBatch
- uid: System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.IndexAction}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.IndexAction}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IndexAction>
  nameWithType: IEnumerable<IndexAction>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Azure.Search.Models.IndexAction>
  nameWithType.vb: IEnumerable(Of IndexAction)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Search.Models.IndexAction)
  name.vb: IEnumerable(Of IndexAction)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Search.Models.IndexAction
    name: IndexAction
    nameWithType: IndexAction
    fullName: Microsoft.Azure.Search.Models.IndexAction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Search.Models.IndexAction
    name: IndexAction
    nameWithType: IndexAction
    fullName: Microsoft.Azure.Search.Models.IndexAction
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Azure.Search.Models.IndexBatch.Delete*
  commentId: Overload:Microsoft.Azure.Search.Models.IndexBatch.Delete
  isExternal: false
  name: Delete
  nameWithType: IndexBatch.Delete
  fullName: Microsoft.Azure.Search.Models.IndexBatch.Delete
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Search.Models.IndexBatch
  commentId: T:Microsoft.Azure.Search.Models.IndexBatch
  parent: Microsoft.Azure.Search.Models
  isExternal: false
  name: IndexBatch
  nameWithType: IndexBatch
  fullName: Microsoft.Azure.Search.Models.IndexBatch
- uid: System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.Document}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.Document}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Document>
  nameWithType: IEnumerable<Document>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Azure.Search.Models.Document>
  nameWithType.vb: IEnumerable(Of Document)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Search.Models.Document)
  name.vb: IEnumerable(Of Document)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Search.Models.Document
    name: Document
    nameWithType: Document
    fullName: Microsoft.Azure.Search.Models.Document
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Search.Models.Document
    name: Document
    nameWithType: Document
    fullName: Microsoft.Azure.Search.Models.Document
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Search.Models.IndexBatch{{T}}
  commentId: T:Microsoft.Azure.Search.Models.IndexBatch{``0}
  parent: Microsoft.Azure.Search.Models
  definition: Microsoft.Azure.Search.Models.IndexBatch`1
  name: IndexBatch<T>
  nameWithType: IndexBatch<T>
  fullName: Microsoft.Azure.Search.Models.IndexBatch<T>
  nameWithType.vb: IndexBatch(Of T)
  fullname.vb: Microsoft.Azure.Search.Models.IndexBatch(Of T)
  name.vb: IndexBatch(Of T)
  spec.csharp:
  - uid: Microsoft.Azure.Search.Models.IndexBatch`1
    name: IndexBatch
    nameWithType: IndexBatch
    fullName: Microsoft.Azure.Search.Models.IndexBatch
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Search.Models.IndexBatch`1
    name: IndexBatch
    nameWithType: IndexBatch
    fullName: Microsoft.Azure.Search.Models.IndexBatch
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Search.Models.IndexBatch`1
  commentId: T:Microsoft.Azure.Search.Models.IndexBatch`1
  isExternal: false
  name: IndexBatch<T>
  nameWithType: IndexBatch<T>
  fullName: Microsoft.Azure.Search.Models.IndexBatch<T>
  nameWithType.vb: IndexBatch(Of T)
  fullname.vb: Microsoft.Azure.Search.Models.IndexBatch(Of T)
  name.vb: IndexBatch(Of T)
  spec.csharp:
  - uid: Microsoft.Azure.Search.Models.IndexBatch`1
    name: IndexBatch
    nameWithType: IndexBatch
    fullName: Microsoft.Azure.Search.Models.IndexBatch
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Search.Models.IndexBatch`1
    name: IndexBatch
    nameWithType: IndexBatch
    fullName: Microsoft.Azure.Search.Models.IndexBatch
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Search.Models.IndexBatch.Merge*
  commentId: Overload:Microsoft.Azure.Search.Models.IndexBatch.Merge
  isExternal: false
  name: Merge
  nameWithType: IndexBatch.Merge
  fullName: Microsoft.Azure.Search.Models.IndexBatch.Merge
- uid: Microsoft.Azure.Search.Models.IndexBatch.MergeOrUpload*
  commentId: Overload:Microsoft.Azure.Search.Models.IndexBatch.MergeOrUpload
  isExternal: false
  name: MergeOrUpload
  nameWithType: IndexBatch.MergeOrUpload
  fullName: Microsoft.Azure.Search.Models.IndexBatch.MergeOrUpload
- uid: Microsoft.Azure.Search.Models.IndexBatch.New*
  commentId: Overload:Microsoft.Azure.Search.Models.IndexBatch.New
  isExternal: false
  name: New
  nameWithType: IndexBatch.New
  fullName: Microsoft.Azure.Search.Models.IndexBatch.New
- uid: System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.IndexAction{{T}}}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Azure.Search.Models.IndexAction{``0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IndexAction<T>>
  nameWithType: IEnumerable<IndexAction<T>>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Azure.Search.Models.IndexAction<T>>
  nameWithType.vb: IEnumerable(Of IndexAction(Of T))
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Search.Models.IndexAction(Of T))
  name.vb: IEnumerable(Of IndexAction(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Search.Models.IndexAction`1
    name: IndexAction
    nameWithType: IndexAction
    fullName: Microsoft.Azure.Search.Models.IndexAction
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Search.Models.IndexAction`1
    name: IndexAction
    nameWithType: IndexAction
    fullName: Microsoft.Azure.Search.Models.IndexAction
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Search.Models.IndexBatch.Upload*
  commentId: Overload:Microsoft.Azure.Search.Models.IndexBatch.Upload
  isExternal: false
  name: Upload
  nameWithType: IndexBatch.Upload
  fullName: Microsoft.Azure.Search.Models.IndexBatch.Upload
