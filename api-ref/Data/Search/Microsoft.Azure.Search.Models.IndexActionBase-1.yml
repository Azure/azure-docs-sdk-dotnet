### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Search.Models.IndexActionBase`1
  commentId: T:Microsoft.Azure.Search.Models.IndexActionBase`1
  id: IndexActionBase`1
  parent: Microsoft.Azure.Search.Models
  children:
  - Microsoft.Azure.Search.Models.IndexActionBase`1.#ctor(Microsoft.Azure.Search.Models.IndexActionType,`0)
  - Microsoft.Azure.Search.Models.IndexActionBase`1.ActionType
  - Microsoft.Azure.Search.Models.IndexActionBase`1.Document
  langs:
  - csharp
  - vb
  name: IndexActionBase<T>
  nameWithType: IndexActionBase<T>
  fullName: Microsoft.Azure.Search.Models.IndexActionBase<T>
  type: Class
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/IndexActionBase.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: IndexActionBase
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/IndexActionBase.cs
    startLine: 12
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nAbstract base class for index actions that operate on a document.\n"
  example: []
  syntax:
    content: >-
      public abstract class IndexActionBase<T>
          where T : class
    content.vb: Public MustInherit Class IndexActionBase(Of T As Class)
    typeParameters:
    - id: T
      description: "\nThe CLR type that maps to the index schema. Instances of this type can be stored as documents in the index.\n"
  inheritance:
  - System.Object
  derivedClasses:
  - Microsoft.Azure.Search.Models.IndexAction
  - Microsoft.Azure.Search.Models.IndexAction`1
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: IndexActionBase(Of T)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Microsoft.Azure.Search.Models.IndexActionBase(Of T)
  name.vb: IndexActionBase(Of T)
- uid: Microsoft.Azure.Search.Models.IndexActionBase`1.#ctor(Microsoft.Azure.Search.Models.IndexActionType,`0)
  commentId: M:Microsoft.Azure.Search.Models.IndexActionBase`1.#ctor(Microsoft.Azure.Search.Models.IndexActionType,`0)
  id: '#ctor(Microsoft.Azure.Search.Models.IndexActionType,`0)'
  parent: Microsoft.Azure.Search.Models.IndexActionBase`1
  langs:
  - csharp
  - vb
  name: IndexActionBase(IndexActionType, T)
  nameWithType: IndexActionBase<T>.IndexActionBase(IndexActionType, T)
  fullName: Microsoft.Azure.Search.Models.IndexActionBase<T>.IndexActionBase(Microsoft.Azure.Search.Models.IndexActionType, T)
  type: Constructor
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/IndexActionBase.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/IndexActionBase.cs
    startLine: 19
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nInitializes a new instance of the IndexActionBase class with the given action type.\n"
  example: []
  syntax:
    content: protected IndexActionBase(IndexActionType actionType, T document)
    content.vb: Protected Sub New(actionType As IndexActionType, document As T)
    parameters:
    - id: actionType
      type: Microsoft.Azure.Search.Models.IndexActionType
      description: The type of action to perform on the document.
    - id: document
      type: '{T}'
      description: The document on which the action will be performed.
  overload: Microsoft.Azure.Search.Models.IndexActionBase`1.#ctor*
  nameWithType.vb: IndexActionBase(Of T).IndexActionBase(IndexActionType, T)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.Azure.Search.Models.IndexActionBase(Of T).IndexActionBase(Microsoft.Azure.Search.Models.IndexActionType, T)
- uid: Microsoft.Azure.Search.Models.IndexActionBase`1.ActionType
  commentId: P:Microsoft.Azure.Search.Models.IndexActionBase`1.ActionType
  id: ActionType
  parent: Microsoft.Azure.Search.Models.IndexActionBase`1
  langs:
  - csharp
  - vb
  name: ActionType
  nameWithType: IndexActionBase<T>.ActionType
  fullName: Microsoft.Azure.Search.Models.IndexActionBase<T>.ActionType
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/IndexActionBase.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ActionType
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/IndexActionBase.cs
    startLine: 28
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets a value indicating the action to perform on a document in an indexing batch.\n"
  example: []
  syntax:
    content: public IndexActionType ActionType { get; }
    content.vb: Public ReadOnly Property ActionType As IndexActionType
    parameters: []
    return:
      type: Microsoft.Azure.Search.Models.IndexActionType
  overload: Microsoft.Azure.Search.Models.IndexActionBase`1.ActionType*
  nameWithType.vb: IndexActionBase(Of T).ActionType
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Azure.Search.Models.IndexActionBase(Of T).ActionType
- uid: Microsoft.Azure.Search.Models.IndexActionBase`1.Document
  commentId: P:Microsoft.Azure.Search.Models.IndexActionBase`1.Document
  id: Document
  parent: Microsoft.Azure.Search.Models.IndexActionBase`1
  langs:
  - csharp
  - vb
  name: Document
  nameWithType: IndexActionBase<T>.Document
  fullName: Microsoft.Azure.Search.Models.IndexActionBase<T>.Document
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/IndexActionBase.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Document
    path: src/azure-sdk-for-net/src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/IndexActionBase.cs
    startLine: 34
  assemblies:
  - Microsoft.Azure.Search
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets the document on which the action will be performed; Fields other than the key are ignored for\ndelete actions.\n"
  example: []
  syntax:
    content: public T Document { get; }
    content.vb: Public ReadOnly Property Document As T
    parameters: []
    return:
      type: '{T}'
  overload: Microsoft.Azure.Search.Models.IndexActionBase`1.Document*
  nameWithType.vb: IndexActionBase(Of T).Document
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Azure.Search.Models.IndexActionBase(Of T).Document
references:
- uid: Microsoft.Azure.Search.Models
  commentId: N:Microsoft.Azure.Search.Models
  isExternal: false
  name: Microsoft.Azure.Search.Models
  nameWithType: Microsoft.Azure.Search.Models
  fullName: Microsoft.Azure.Search.Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Search.Models.IndexActionBase`1.#ctor*
  commentId: Overload:Microsoft.Azure.Search.Models.IndexActionBase`1.#ctor
  isExternal: false
  name: IndexActionBase
  nameWithType: IndexActionBase.IndexActionBase
  fullName: Microsoft.Azure.Search.Models.IndexActionBase.IndexActionBase
- uid: Microsoft.Azure.Search.Models.IndexActionType
  commentId: T:Microsoft.Azure.Search.Models.IndexActionType
  parent: Microsoft.Azure.Search.Models
  isExternal: false
  name: IndexActionType
  nameWithType: IndexActionType
  fullName: Microsoft.Azure.Search.Models.IndexActionType
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: Microsoft.Azure.Search.Models.IndexActionBase`1.ActionType*
  commentId: Overload:Microsoft.Azure.Search.Models.IndexActionBase`1.ActionType
  isExternal: false
  name: ActionType
  nameWithType: IndexActionBase<T>.ActionType
  fullName: Microsoft.Azure.Search.Models.IndexActionBase<T>.ActionType
  nameWithType.vb: IndexActionBase(Of T).ActionType
  fullname.vb: Microsoft.Azure.Search.Models.IndexActionBase(Of T).ActionType
- uid: Microsoft.Azure.Search.Models.IndexActionBase`1.Document*
  commentId: Overload:Microsoft.Azure.Search.Models.IndexActionBase`1.Document
  isExternal: false
  name: Document
  nameWithType: IndexActionBase<T>.Document
  fullName: Microsoft.Azure.Search.Models.IndexActionBase<T>.Document
  nameWithType.vb: IndexActionBase(Of T).Document
  fullname.vb: Microsoft.Azure.Search.Models.IndexActionBase(Of T).Document
