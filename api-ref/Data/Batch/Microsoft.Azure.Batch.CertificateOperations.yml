### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Batch.CertificateOperations
  commentId: T:Microsoft.Azure.Batch.CertificateOperations
  id: CertificateOperations
  parent: Microsoft.Azure.Batch
  children:
  - Microsoft.Azure.Batch.CertificateOperations.CancelDeleteCertificate(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.CertificateOperations.CancelDeleteCertificateAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.CertificateOperations.CreateCertificate(System.Byte[])
  - Microsoft.Azure.Batch.CertificateOperations.CreateCertificate(System.Byte[],System.String)
  - Microsoft.Azure.Batch.CertificateOperations.CreateCertificate(System.String)
  - Microsoft.Azure.Batch.CertificateOperations.CreateCertificate(System.String,System.String)
  - Microsoft.Azure.Batch.CertificateOperations.CustomBehaviors
  - Microsoft.Azure.Batch.CertificateOperations.DeleteCertificate(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.CertificateOperations.DeleteCertificateAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.CertificateOperations.GetCertificate(System.String,System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.CertificateOperations.GetCertificateAsync(System.String,System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.CertificateOperations.ListCertificates(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  langs:
  - csharp
  - vb
  name: CertificateOperations
  nameWithType: CertificateOperations
  fullName: Microsoft.Azure.Batch.CertificateOperations
  type: Class
  source:
    remote:
      path: src/Batch/Client/Src/CertificateOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CertificateOperations
    path: src/azure-sdk-for-net/src/Batch/Client/Src/CertificateOperations.cs
    startLine: 27
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nPerforms certificate-related operations on an Azure Batch account.\n"
  example: []
  syntax:
    content: 'public class CertificateOperations : IInheritedBehaviors'
    content.vb: >-
      Public Class CertificateOperations
          Implements IInheritedBehaviors
  inheritance:
  - System.Object
  implements:
  - Microsoft.Azure.Batch.IInheritedBehaviors
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Batch.CertificateOperations.CustomBehaviors
  commentId: P:Microsoft.Azure.Batch.CertificateOperations.CustomBehaviors
  id: CustomBehaviors
  parent: Microsoft.Azure.Batch.CertificateOperations
  langs:
  - csharp
  - vb
  name: CustomBehaviors
  nameWithType: CertificateOperations.CustomBehaviors
  fullName: Microsoft.Azure.Batch.CertificateOperations.CustomBehaviors
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/CertificateOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CustomBehaviors
    path: src/azure-sdk-for-net/src/Batch/Client/Src/CertificateOperations.cs
    startLine: 65
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets a list of behaviors that modify or customize requests to the Batch service\nmade via this <xref href=\"Microsoft.Azure.Batch.CertificateOperations\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\n<p>These behaviors are inherited by child objects.</p>\n<p>Modifications are applied in the order of the collection. The last write wins.</p>\n"
  example: []
  syntax:
    content: public IList<BatchClientBehavior> CustomBehaviors { get; set; }
    content.vb: Public Property CustomBehaviors As IList(Of BatchClientBehavior)
    parameters: []
    return:
      type: System.Collections.Generic.IList{Microsoft.Azure.Batch.BatchClientBehavior}
  overload: Microsoft.Azure.Batch.CertificateOperations.CustomBehaviors*
  implements:
  - Microsoft.Azure.Batch.IInheritedBehaviors.CustomBehaviors
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.CertificateOperations.GetCertificateAsync(System.String,System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.CertificateOperations.GetCertificateAsync(System.String,System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: GetCertificateAsync(System.String,System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.CertificateOperations
  langs:
  - csharp
  - vb
  name: GetCertificateAsync(String, String, DetailLevel, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: CertificateOperations.GetCertificateAsync(String, String, DetailLevel, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.CertificateOperations.GetCertificateAsync(System.String, System.String, Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/CertificateOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: GetCertificateAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/CertificateOperations.cs
    startLine: 91
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the specified <xref href=\"Microsoft.Azure.Batch.Certificate\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: The get certificate operation runs asynchronously.
  example: []
  syntax:
    content: public Task<Certificate> GetCertificateAsync(string thumbprintAlgorithm, string thumbprint, DetailLevel detailLevel = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function GetCertificateAsync(thumbprintAlgorithm As String, thumbprint As String, detailLevel As DetailLevel = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of Certificate)
    parameters:
    - id: thumbprintAlgorithm
      type: System.String
      description: The algorithm used to derive the <span class="paramref">thumbprint</span> parameter. This must be sha1.
    - id: thumbprint
      type: System.String
      description: The thumbprint of the certificate to get.
    - id: detailLevel
      type: Microsoft.Azure.Batch.DetailLevel
      description: A <xref href="Microsoft.Azure.Batch.DetailLevel" data-throw-if-not-resolved="false"></xref> used for controlling which properties are retrieved from the service.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.CertificateOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref> and <span class="paramref">detailLevel</span>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.Batch.Certificate}
      description: A <xref href="Microsoft.Azure.Batch.Certificate" data-throw-if-not-resolved="false"></xref> containing information about the specified certificate in the Azure Batch account.
  overload: Microsoft.Azure.Batch.CertificateOperations.GetCertificateAsync*
  nameWithType.vb: CertificateOperations.GetCertificateAsync(String, String, DetailLevel, IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.CertificateOperations.GetCertificateAsync(System.String, System.String, Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: GetCertificateAsync(String, String, DetailLevel, IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.CertificateOperations.GetCertificate(System.String,System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.CertificateOperations.GetCertificate(System.String,System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: GetCertificate(System.String,System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.CertificateOperations
  langs:
  - csharp
  - vb
  name: GetCertificate(String, String, DetailLevel, IEnumerable<BatchClientBehavior>)
  nameWithType: CertificateOperations.GetCertificate(String, String, DetailLevel, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.CertificateOperations.GetCertificate(System.String, System.String, Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/CertificateOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: GetCertificate
    path: src/azure-sdk-for-net/src/Batch/Client/Src/CertificateOperations.cs
    startLine: 125
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the specified <xref href=\"Microsoft.Azure.Batch.Certificate\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: This is a blocking operation. For a non-blocking equivalent, see <xref href="Microsoft.Azure.Batch.CertificateOperations.GetCertificateAsync(System.String%2cSystem.String%2cMicrosoft.Azure.Batch.DetailLevel%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Certificate GetCertificate(string thumbprintAlgorithm, string thumbprint, DetailLevel detailLevel = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Function GetCertificate(thumbprintAlgorithm As String, thumbprint As String, detailLevel As DetailLevel = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing) As Certificate
    parameters:
    - id: thumbprintAlgorithm
      type: System.String
      description: The algorithm used to derive the <span class="paramref">thumbprint</span> parameter. This must be sha1.
    - id: thumbprint
      type: System.String
      description: The thumbprint of the certificate to get.
    - id: detailLevel
      type: Microsoft.Azure.Batch.DetailLevel
      description: A <xref href="Microsoft.Azure.Batch.DetailLevel" data-throw-if-not-resolved="false"></xref> used for controlling which properties are retrieved from the service.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.CertificateOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref> and <span class="paramref">detailLevel</span>.
    return:
      type: Microsoft.Azure.Batch.Certificate
      description: A <xref href="Microsoft.Azure.Batch.Certificate" data-throw-if-not-resolved="false"></xref> containing information about the specified certificate in the Azure Batch account.
  overload: Microsoft.Azure.Batch.CertificateOperations.GetCertificate*
  nameWithType.vb: CertificateOperations.GetCertificate(String, String, DetailLevel, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.CertificateOperations.GetCertificate(System.String, System.String, Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: GetCertificate(String, String, DetailLevel, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.CertificateOperations.CreateCertificate(System.String)
  commentId: M:Microsoft.Azure.Batch.CertificateOperations.CreateCertificate(System.String)
  id: CreateCertificate(System.String)
  parent: Microsoft.Azure.Batch.CertificateOperations
  langs:
  - csharp
  - vb
  name: CreateCertificate(String)
  nameWithType: CertificateOperations.CreateCertificate(String)
  fullName: Microsoft.Azure.Batch.CertificateOperations.CreateCertificate(System.String)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/CertificateOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CreateCertificate
    path: src/azure-sdk-for-net/src/Batch/Client/Src/CertificateOperations.cs
    startLine: 140
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nCreates a new <xref href=\"Microsoft.Azure.Batch.Certificate\" data-throw-if-not-resolved=\"false\"></xref> from a .cer file.\n"
  example: []
  syntax:
    content: public Certificate CreateCertificate(string cerFileName)
    content.vb: Public Function CreateCertificate(cerFileName As String) As Certificate
    parameters:
    - id: cerFileName
      type: System.String
      description: The path to the .cer file.
    return:
      type: Microsoft.Azure.Batch.Certificate
      description: A <xref href="Microsoft.Azure.Batch.Certificate" data-throw-if-not-resolved="false"></xref> representing a new certificate that has not been added to the Batch service.
  overload: Microsoft.Azure.Batch.CertificateOperations.CreateCertificate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.CertificateOperations.CreateCertificate(System.Byte[])
  commentId: M:Microsoft.Azure.Batch.CertificateOperations.CreateCertificate(System.Byte[])
  id: CreateCertificate(System.Byte[])
  parent: Microsoft.Azure.Batch.CertificateOperations
  langs:
  - csharp
  - vb
  name: CreateCertificate(Byte[])
  nameWithType: CertificateOperations.CreateCertificate(Byte[])
  fullName: Microsoft.Azure.Batch.CertificateOperations.CreateCertificate(System.Byte[])
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/CertificateOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CreateCertificate
    path: src/azure-sdk-for-net/src/Batch/Client/Src/CertificateOperations.cs
    startLine: 161
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nCreates a new <xref href=\"Microsoft.Azure.Batch.Certificate\" data-throw-if-not-resolved=\"false\"></xref> from .cer format data in memory.\n"
  example: []
  syntax:
    content: public Certificate CreateCertificate(byte[] cerRawData)
    content.vb: Public Function CreateCertificate(cerRawData As Byte()) As Certificate
    parameters:
    - id: cerRawData
      type: System.Byte[]
      description: The certificate data in .cer format.
    return:
      type: Microsoft.Azure.Batch.Certificate
      description: A <xref href="Microsoft.Azure.Batch.Certificate" data-throw-if-not-resolved="false"></xref> representing a new certificate that has not been added to the Batch service.
  overload: Microsoft.Azure.Batch.CertificateOperations.CreateCertificate*
  nameWithType.vb: CertificateOperations.CreateCertificate(Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.CertificateOperations.CreateCertificate(System.Byte())
  name.vb: CreateCertificate(Byte())
- uid: Microsoft.Azure.Batch.CertificateOperations.CreateCertificate(System.String,System.String)
  commentId: M:Microsoft.Azure.Batch.CertificateOperations.CreateCertificate(System.String,System.String)
  id: CreateCertificate(System.String,System.String)
  parent: Microsoft.Azure.Batch.CertificateOperations
  langs:
  - csharp
  - vb
  name: CreateCertificate(String, String)
  nameWithType: CertificateOperations.CreateCertificate(String, String)
  fullName: Microsoft.Azure.Batch.CertificateOperations.CreateCertificate(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/CertificateOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CreateCertificate
    path: src/azure-sdk-for-net/src/Batch/Client/Src/CertificateOperations.cs
    startLine: 175
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nCreates a new <xref href=\"Microsoft.Azure.Batch.Certificate\" data-throw-if-not-resolved=\"false\"></xref> from a .pfx file.\n"
  example: []
  syntax:
    content: public Certificate CreateCertificate(string pfxFileName, string password)
    content.vb: Public Function CreateCertificate(pfxFileName As String, password As String) As Certificate
    parameters:
    - id: pfxFileName
      type: System.String
      description: The path to the .pfx file.
    - id: password
      type: System.String
      description: The password to access the certificate private key.
    return:
      type: Microsoft.Azure.Batch.Certificate
      description: A <xref href="Microsoft.Azure.Batch.Certificate" data-throw-if-not-resolved="false"></xref> representing a new certificate that has not been added to the Batch service.
  overload: Microsoft.Azure.Batch.CertificateOperations.CreateCertificate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.CertificateOperations.CreateCertificate(System.Byte[],System.String)
  commentId: M:Microsoft.Azure.Batch.CertificateOperations.CreateCertificate(System.Byte[],System.String)
  id: CreateCertificate(System.Byte[],System.String)
  parent: Microsoft.Azure.Batch.CertificateOperations
  langs:
  - csharp
  - vb
  name: CreateCertificate(Byte[], String)
  nameWithType: CertificateOperations.CreateCertificate(Byte[], String)
  fullName: Microsoft.Azure.Batch.CertificateOperations.CreateCertificate(System.Byte[], System.String)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/CertificateOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CreateCertificate
    path: src/azure-sdk-for-net/src/Batch/Client/Src/CertificateOperations.cs
    startLine: 194
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nCreates a new <xref href=\"Microsoft.Azure.Batch.Certificate\" data-throw-if-not-resolved=\"false\"></xref> from .pfx format data in memory.\n"
  example: []
  syntax:
    content: public Certificate CreateCertificate(byte[] pfxRawData, string password)
    content.vb: Public Function CreateCertificate(pfxRawData As Byte(), password As String) As Certificate
    parameters:
    - id: pfxRawData
      type: System.Byte[]
      description: The certificate data in .pfx format.
    - id: password
      type: System.String
      description: The password to access the certificate private key.
    return:
      type: Microsoft.Azure.Batch.Certificate
      description: A <xref href="Microsoft.Azure.Batch.Certificate" data-throw-if-not-resolved="false"></xref> representing a new certificate that has not been added to the Batch service.
  overload: Microsoft.Azure.Batch.CertificateOperations.CreateCertificate*
  nameWithType.vb: CertificateOperations.CreateCertificate(Byte(), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.CertificateOperations.CreateCertificate(System.Byte(), System.String)
  name.vb: CreateCertificate(Byte(), String)
- uid: Microsoft.Azure.Batch.CertificateOperations.ListCertificates(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.CertificateOperations.ListCertificates(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: ListCertificates(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.CertificateOperations
  langs:
  - csharp
  - vb
  name: ListCertificates(DetailLevel, IEnumerable<BatchClientBehavior>)
  nameWithType: CertificateOperations.ListCertificates(DetailLevel, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.CertificateOperations.ListCertificates(Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/CertificateOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ListCertificates
    path: src/azure-sdk-for-net/src/Batch/Client/Src/CertificateOperations.cs
    startLine: 263
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nEnumerates the <xref href=\"Microsoft.Azure.Batch.Certificate\" data-throw-if-not-resolved=\"false\"></xref> in the Batch account.\n"
  remarks: >-
    This method returns immediately; the certificates are retrieved from the Batch service only when the collection is enumerated.

    Retrieval is non-atomic; certificates are retrieved in pages during enumeration of the collection.
  example: []
  syntax:
    content: public IPagedEnumerable<Certificate> ListCertificates(DetailLevel detailLevel = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Function ListCertificates(detailLevel As DetailLevel = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing) As IPagedEnumerable(Of Certificate)
    parameters:
    - id: detailLevel
      type: Microsoft.Azure.Batch.DetailLevel
      description: A <xref href="Microsoft.Azure.Batch.DetailLevel" data-throw-if-not-resolved="false"></xref> used for filtering the list and for controlling which properties are retrieved from the service.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.CertificateOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref> and <span class="paramref">detailLevel</span>.
    return:
      type: Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.Certificate}
      description: An <xref href="Microsoft.Azure.Batch.IPagedEnumerable%601" data-throw-if-not-resolved="false"></xref> that can be used to enumerate certificates asynchronously or synchronously.
  overload: Microsoft.Azure.Batch.CertificateOperations.ListCertificates*
  nameWithType.vb: CertificateOperations.ListCertificates(DetailLevel, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.CertificateOperations.ListCertificates(Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: ListCertificates(DetailLevel, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.CertificateOperations.DeleteCertificateAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.CertificateOperations.DeleteCertificateAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: DeleteCertificateAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.CertificateOperations
  langs:
  - csharp
  - vb
  name: DeleteCertificateAsync(String, String, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: CertificateOperations.DeleteCertificateAsync(String, String, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.CertificateOperations.DeleteCertificateAsync(System.String, System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/CertificateOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DeleteCertificateAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/CertificateOperations.cs
    startLine: 303
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nDeletes the certificate from the Batch account.\n"
  remarks: "\n<p>The delete operation requests that the certificate be deleted.  The request puts the certificate in the <xref href=\"Microsoft.Azure.Batch.Common.CertificateState.Deleting\" data-throw-if-not-resolved=\"false\"></xref> state.\nThe Batch service will perform the actual certificate deletion without any further client action.</p>\n<p>You cannot delete a certificate if a resource (pool or compute node) is using it. Before you can delete a certificate, you must therefore make sure that:</p>\n<ul><li>The certificate is not associated with any pools.</li><li>The certificate is not installed on any compute nodes.  (Even if you remove a certificate from a pool, it is not removed from existing compute nodes in that pool until they restart.)</li></ul>\n<p>If you try to delete a certificate that is in use, the deletion fails. The certificate state changes to <xref href=\"Microsoft.Azure.Batch.Common.CertificateState.DeleteFailed\" data-throw-if-not-resolved=\"false\"></xref>.\nYou can use <xref href=\"Microsoft.Azure.Batch.CertificateOperations.CancelDeleteCertificateAsync(System.String%2cSystem.String%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> to set the status back to Active if you decide that you want to continue using the certificate.</p>\n<p>The delete operation runs asynchronously.</p>\n"
  example: []
  syntax:
    content: public Task DeleteCertificateAsync(string thumbprintAlgorithm, string thumbprint, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function DeleteCertificateAsync(thumbprintAlgorithm As String, thumbprint As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: thumbprintAlgorithm
      type: System.String
      description: The algorithm used to derive the <span class="paramref">thumbprint</span> parameter. This must be sha1.
    - id: thumbprint
      type: System.String
      description: The thumbprint of the certificate to delete.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.CertificateOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.CertificateOperations.DeleteCertificateAsync*
  nameWithType.vb: CertificateOperations.DeleteCertificateAsync(String, String, IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.CertificateOperations.DeleteCertificateAsync(System.String, System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: DeleteCertificateAsync(String, String, IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.CertificateOperations.DeleteCertificate(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.CertificateOperations.DeleteCertificate(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: DeleteCertificate(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.CertificateOperations
  langs:
  - csharp
  - vb
  name: DeleteCertificate(String, String, IEnumerable<BatchClientBehavior>)
  nameWithType: CertificateOperations.DeleteCertificate(String, String, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.CertificateOperations.DeleteCertificate(System.String, System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/CertificateOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DeleteCertificate
    path: src/azure-sdk-for-net/src/Batch/Client/Src/CertificateOperations.cs
    startLine: 335
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nDeletes the certificate from the Batch account.\n"
  remarks: "\n<p>The delete operation requests that the certificate be deleted.  The request puts the certificate in the <xref href=\"Microsoft.Azure.Batch.Common.CertificateState.Deleting\" data-throw-if-not-resolved=\"false\"></xref> state.\nThe Batch service will perform the actual certificate deletion without any further client action.</p>\n<p>You cannot delete a certificate if a resource (pool or compute node) is using it. Before you can delete a certificate, you must therefore make sure that:</p>\n<ul><li>The certificate is not associated with any pools.</li><li>The certificate is not installed on any compute nodes.  (Even if you remove a certificate from a pool, it is not removed from existing compute nodes in that pool until they restart.)</li></ul>\n<p>If you try to delete a certificate that is in use, the deletion fails. The certificate state changes to <xref href=\"Microsoft.Azure.Batch.Common.CertificateState.DeleteFailed\" data-throw-if-not-resolved=\"false\"></xref>.\nYou can use <xref href=\"Microsoft.Azure.Batch.CertificateOperations.CancelDeleteCertificateAsync(System.String%2cSystem.String%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> to set the status back to Active if you decide that you want to continue using the certificate.</p>\n<p>This is a blocking operation. For a non-blocking equivalent, see <xref href=\"Microsoft.Azure.Batch.CertificateOperations.DeleteCertificateAsync(System.String%2cSystem.String%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public void DeleteCertificate(string thumbprintAlgorithm, string thumbprint, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub DeleteCertificate(thumbprintAlgorithm As String, thumbprint As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: thumbprintAlgorithm
      type: System.String
      description: The algorithm used to derive the <span class="paramref">thumbprint</span> parameter. This must be sha1.
    - id: thumbprint
      type: System.String
      description: The thumbprint of the certificate to delete.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.CertificateOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.CertificateOperations.DeleteCertificate*
  nameWithType.vb: CertificateOperations.DeleteCertificate(String, String, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.CertificateOperations.DeleteCertificate(System.String, System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: DeleteCertificate(String, String, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.CertificateOperations.CancelDeleteCertificateAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.CertificateOperations.CancelDeleteCertificateAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: CancelDeleteCertificateAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.CertificateOperations
  langs:
  - csharp
  - vb
  name: CancelDeleteCertificateAsync(String, String, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: CertificateOperations.CancelDeleteCertificateAsync(String, String, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.CertificateOperations.CancelDeleteCertificateAsync(System.String, System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/CertificateOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CancelDeleteCertificateAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/CertificateOperations.cs
    startLine: 358
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nCancels a failed deletion of the specified certificate.  This can be done only when\nthe certificate is in the <xref href=\"Microsoft.Azure.Batch.Common.CertificateState.DeleteFailed\" data-throw-if-not-resolved=\"false\"></xref> state, and restores the certificate to the <xref href=\"Microsoft.Azure.Batch.Common.CertificateState.Active\" data-throw-if-not-resolved=\"false\"></xref> state.\n"
  remarks: "\n<p>If you still wish to delete the certificate (instead of returning it to Active), you do not need to cancel\nthe failed deletion. You must make sure that the certificate is not being used by any resources, and then you\ncan try again to delete the certificate (see <xref href=\"Microsoft.Azure.Batch.CertificateOperations.DeleteCertificateAsync(System.String%2cSystem.String%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The cancel delete operation runs asynchronously.</p>\n"
  example: []
  syntax:
    content: public Task CancelDeleteCertificateAsync(string thumbprintAlgorithm, string thumbprint, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function CancelDeleteCertificateAsync(thumbprintAlgorithm As String, thumbprint As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: thumbprintAlgorithm
      type: System.String
      description: The algorithm used to derive the <span class="paramref">thumbprint</span> parameter. This must be sha1.
    - id: thumbprint
      type: System.String
      description: The thumbprint of the certificate that failed to delete.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.CertificateOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> object that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.CertificateOperations.CancelDeleteCertificateAsync*
  nameWithType.vb: CertificateOperations.CancelDeleteCertificateAsync(String, String, IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.CertificateOperations.CancelDeleteCertificateAsync(System.String, System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: CancelDeleteCertificateAsync(String, String, IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.CertificateOperations.CancelDeleteCertificate(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.CertificateOperations.CancelDeleteCertificate(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: CancelDeleteCertificate(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.CertificateOperations
  langs:
  - csharp
  - vb
  name: CancelDeleteCertificate(String, String, IEnumerable<BatchClientBehavior>)
  nameWithType: CertificateOperations.CancelDeleteCertificate(String, String, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.CertificateOperations.CancelDeleteCertificate(System.String, System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/CertificateOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CancelDeleteCertificate
    path: src/azure-sdk-for-net/src/Batch/Client/Src/CertificateOperations.cs
    startLine: 388
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nCancels a failed deletion of the specified certificate.  This can be done only when\nthe certificate is in the <xref href=\"Microsoft.Azure.Batch.Common.CertificateState.DeleteFailed\" data-throw-if-not-resolved=\"false\"></xref> state, and restores the certificate to the <xref href=\"Microsoft.Azure.Batch.Common.CertificateState.Active\" data-throw-if-not-resolved=\"false\"></xref> state.\n"
  remarks: "\n<p>If you still wish to delete the certificate (instead of returning it to Active), you do not need to cancel\nthe failed deletion. You must make sure that the certificate is not being used by any resources, and then you\ncan try again to delete the certificate (see <xref href=\"Microsoft.Azure.Batch.CertificateOperations.DeleteCertificateAsync(System.String%2cSystem.String%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This is a blocking operation. For a non-blocking equivalent, see <xref href=\"Microsoft.Azure.Batch.CertificateOperations.CancelDeleteCertificateAsync(System.String%2cSystem.String%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public void CancelDeleteCertificate(string thumbprintAlgorithm, string thumbprint, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub CancelDeleteCertificate(thumbprintAlgorithm As String, thumbprint As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: thumbprintAlgorithm
      type: System.String
      description: The algorithm used to derive the <span class="paramref">thumbprint</span> parameter. This must be sha1.
    - id: thumbprint
      type: System.String
      description: The thumbprint of the certificate that failed to delete.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.CertificateOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.CertificateOperations.CancelDeleteCertificate*
  nameWithType.vb: CertificateOperations.CancelDeleteCertificate(String, String, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.CertificateOperations.CancelDeleteCertificate(System.String, System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: CancelDeleteCertificate(String, String, IEnumerable(Of BatchClientBehavior))
references:
- uid: Microsoft.Azure.Batch
  commentId: N:Microsoft.Azure.Batch
  isExternal: false
  name: Microsoft.Azure.Batch
  nameWithType: Microsoft.Azure.Batch
  fullName: Microsoft.Azure.Batch
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Azure.Batch.IInheritedBehaviors
  commentId: T:Microsoft.Azure.Batch.IInheritedBehaviors
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: IInheritedBehaviors
  nameWithType: IInheritedBehaviors
  fullName: Microsoft.Azure.Batch.IInheritedBehaviors
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Batch.CertificateOperations
  commentId: T:Microsoft.Azure.Batch.CertificateOperations
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: CertificateOperations
  nameWithType: CertificateOperations
  fullName: Microsoft.Azure.Batch.CertificateOperations
- uid: Microsoft.Azure.Batch.CertificateOperations.CustomBehaviors*
  commentId: Overload:Microsoft.Azure.Batch.CertificateOperations.CustomBehaviors
  isExternal: false
  name: CustomBehaviors
  nameWithType: CertificateOperations.CustomBehaviors
  fullName: Microsoft.Azure.Batch.CertificateOperations.CustomBehaviors
- uid: Microsoft.Azure.Batch.IInheritedBehaviors.CustomBehaviors
  commentId: P:Microsoft.Azure.Batch.IInheritedBehaviors.CustomBehaviors
  parent: Microsoft.Azure.Batch.IInheritedBehaviors
  isExternal: false
  name: CustomBehaviors
  nameWithType: IInheritedBehaviors.CustomBehaviors
  fullName: Microsoft.Azure.Batch.IInheritedBehaviors.CustomBehaviors
- uid: System.Collections.Generic.IList{Microsoft.Azure.Batch.BatchClientBehavior}
  commentId: T:System.Collections.Generic.IList{Microsoft.Azure.Batch.BatchClientBehavior}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<BatchClientBehavior>
  nameWithType: IList<BatchClientBehavior>
  fullName: System.Collections.Generic.IList<Microsoft.Azure.Batch.BatchClientBehavior>
  nameWithType.vb: IList(Of BatchClientBehavior)
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.Azure.Batch.BatchClientBehavior)
  name.vb: IList(Of BatchClientBehavior)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.BatchClientBehavior
    name: BatchClientBehavior
    nameWithType: BatchClientBehavior
    fullName: Microsoft.Azure.Batch.BatchClientBehavior
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.BatchClientBehavior
    name: BatchClientBehavior
    nameWithType: BatchClientBehavior
    fullName: Microsoft.Azure.Batch.BatchClientBehavior
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Azure.Batch.Certificate
  commentId: T:Microsoft.Azure.Batch.Certificate
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: Certificate
  nameWithType: Certificate
  fullName: Microsoft.Azure.Batch.Certificate
- uid: Microsoft.Azure.Batch.DetailLevel
  commentId: T:Microsoft.Azure.Batch.DetailLevel
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: DetailLevel
  nameWithType: DetailLevel
  fullName: Microsoft.Azure.Batch.DetailLevel
- uid: Microsoft.Azure.Batch.BatchClientBehavior
  commentId: T:Microsoft.Azure.Batch.BatchClientBehavior
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: BatchClientBehavior
  nameWithType: BatchClientBehavior
  fullName: Microsoft.Azure.Batch.BatchClientBehavior
- uid: Microsoft.Azure.Batch.CertificateOperations.CustomBehaviors
  commentId: P:Microsoft.Azure.Batch.CertificateOperations.CustomBehaviors
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: Microsoft.Azure.Batch.CertificateOperations.GetCertificateAsync*
  commentId: Overload:Microsoft.Azure.Batch.CertificateOperations.GetCertificateAsync
  isExternal: false
  name: GetCertificateAsync
  nameWithType: CertificateOperations.GetCertificateAsync
  fullName: Microsoft.Azure.Batch.CertificateOperations.GetCertificateAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<BatchClientBehavior>
  nameWithType: IEnumerable<BatchClientBehavior>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>
  nameWithType.vb: IEnumerable(Of BatchClientBehavior)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior)
  name.vb: IEnumerable(Of BatchClientBehavior)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.BatchClientBehavior
    name: BatchClientBehavior
    nameWithType: BatchClientBehavior
    fullName: Microsoft.Azure.Batch.BatchClientBehavior
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.BatchClientBehavior
    name: BatchClientBehavior
    nameWithType: BatchClientBehavior
    fullName: Microsoft.Azure.Batch.BatchClientBehavior
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Microsoft.Azure.Batch.Certificate}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.Batch.Certificate}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Certificate>
  nameWithType: Task<Certificate>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.Batch.Certificate>
  nameWithType.vb: Task(Of Certificate)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.Batch.Certificate)
  name.vb: Task(Of Certificate)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.Certificate
    name: Certificate
    nameWithType: Certificate
    fullName: Microsoft.Azure.Batch.Certificate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.Certificate
    name: Certificate
    nameWithType: Certificate
    fullName: Microsoft.Azure.Batch.Certificate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.Azure.Batch.CertificateOperations.GetCertificateAsync(System.String,System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.CertificateOperations.GetCertificateAsync(System.String,System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.CertificateOperations.GetCertificate*
  commentId: Overload:Microsoft.Azure.Batch.CertificateOperations.GetCertificate
  isExternal: false
  name: GetCertificate
  nameWithType: CertificateOperations.GetCertificate
  fullName: Microsoft.Azure.Batch.CertificateOperations.GetCertificate
- uid: Microsoft.Azure.Batch.CertificateOperations.CreateCertificate*
  commentId: Overload:Microsoft.Azure.Batch.CertificateOperations.CreateCertificate
  isExternal: false
  name: CreateCertificate
  nameWithType: CertificateOperations.CreateCertificate
  fullName: Microsoft.Azure.Batch.CertificateOperations.CreateCertificate
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Azure.Batch.IPagedEnumerable`1
  commentId: T:Microsoft.Azure.Batch.IPagedEnumerable`1
  isExternal: false
  name: IPagedEnumerable<T>
  nameWithType: IPagedEnumerable<T>
  fullName: Microsoft.Azure.Batch.IPagedEnumerable<T>
  nameWithType.vb: IPagedEnumerable(Of T)
  fullname.vb: Microsoft.Azure.Batch.IPagedEnumerable(Of T)
  name.vb: IPagedEnumerable(Of T)
  spec.csharp:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.CertificateOperations.ListCertificates*
  commentId: Overload:Microsoft.Azure.Batch.CertificateOperations.ListCertificates
  isExternal: false
  name: ListCertificates
  nameWithType: CertificateOperations.ListCertificates
  fullName: Microsoft.Azure.Batch.CertificateOperations.ListCertificates
- uid: Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.Certificate}
  commentId: T:Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.Certificate}
  parent: Microsoft.Azure.Batch
  definition: Microsoft.Azure.Batch.IPagedEnumerable`1
  name: IPagedEnumerable<Certificate>
  nameWithType: IPagedEnumerable<Certificate>
  fullName: Microsoft.Azure.Batch.IPagedEnumerable<Microsoft.Azure.Batch.Certificate>
  nameWithType.vb: IPagedEnumerable(Of Certificate)
  fullname.vb: Microsoft.Azure.Batch.IPagedEnumerable(Of Microsoft.Azure.Batch.Certificate)
  name.vb: IPagedEnumerable(Of Certificate)
  spec.csharp:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.Certificate
    name: Certificate
    nameWithType: Certificate
    fullName: Microsoft.Azure.Batch.Certificate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.Certificate
    name: Certificate
    nameWithType: Certificate
    fullName: Microsoft.Azure.Batch.Certificate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.Azure.Batch.Common.CertificateState.Deleting
  commentId: F:Microsoft.Azure.Batch.Common.CertificateState.Deleting
- uid: Microsoft.Azure.Batch.Common.CertificateState.DeleteFailed
  commentId: F:Microsoft.Azure.Batch.Common.CertificateState.DeleteFailed
- uid: Microsoft.Azure.Batch.CertificateOperations.CancelDeleteCertificateAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.CertificateOperations.CancelDeleteCertificateAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.CertificateOperations.DeleteCertificateAsync*
  commentId: Overload:Microsoft.Azure.Batch.CertificateOperations.DeleteCertificateAsync
  isExternal: false
  name: DeleteCertificateAsync
  nameWithType: CertificateOperations.DeleteCertificateAsync
  fullName: Microsoft.Azure.Batch.CertificateOperations.DeleteCertificateAsync
- uid: Microsoft.Azure.Batch.CertificateOperations.DeleteCertificateAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.CertificateOperations.DeleteCertificateAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.CertificateOperations.DeleteCertificate*
  commentId: Overload:Microsoft.Azure.Batch.CertificateOperations.DeleteCertificate
  isExternal: false
  name: DeleteCertificate
  nameWithType: CertificateOperations.DeleteCertificate
  fullName: Microsoft.Azure.Batch.CertificateOperations.DeleteCertificate
- uid: Microsoft.Azure.Batch.Common.CertificateState.Active
  commentId: F:Microsoft.Azure.Batch.Common.CertificateState.Active
- uid: Microsoft.Azure.Batch.CertificateOperations.CancelDeleteCertificateAsync*
  commentId: Overload:Microsoft.Azure.Batch.CertificateOperations.CancelDeleteCertificateAsync
  isExternal: false
  name: CancelDeleteCertificateAsync
  nameWithType: CertificateOperations.CancelDeleteCertificateAsync
  fullName: Microsoft.Azure.Batch.CertificateOperations.CancelDeleteCertificateAsync
- uid: Microsoft.Azure.Batch.CertificateOperations.CancelDeleteCertificate*
  commentId: Overload:Microsoft.Azure.Batch.CertificateOperations.CancelDeleteCertificate
  isExternal: false
  name: CancelDeleteCertificate
  nameWithType: CertificateOperations.CancelDeleteCertificate
  fullName: Microsoft.Azure.Batch.CertificateOperations.CancelDeleteCertificate
