### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Batch.AddTaskCollectionResultHandler
  commentId: T:Microsoft.Azure.Batch.AddTaskCollectionResultHandler
  id: AddTaskCollectionResultHandler
  parent: Microsoft.Azure.Batch
  children:
  - Microsoft.Azure.Batch.AddTaskCollectionResultHandler.#ctor(System.Func{Microsoft.Azure.Batch.AddTaskResult,System.Threading.CancellationToken,Microsoft.Azure.Batch.AddTaskResultStatus})
  - Microsoft.Azure.Batch.AddTaskCollectionResultHandler.DefaultAddTaskCollectionResultHandler(Microsoft.Azure.Batch.AddTaskResult,System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.AddTaskCollectionResultHandler.ResultHandler
  langs:
  - csharp
  - vb
  name: AddTaskCollectionResultHandler
  nameWithType: AddTaskCollectionResultHandler
  fullName: Microsoft.Azure.Batch.AddTaskCollectionResultHandler
  type: Class
  source:
    remote:
      path: src/Batch/Client/Src/AddTaskCollectionResultHandler.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: AddTaskCollectionResultHandler
    path: src/azure-sdk-for-net/src/Batch/Client/Src/AddTaskCollectionResultHandler.cs
    startLine: 31
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nA <xref href=\"Microsoft.Azure.Batch.BatchClientBehavior\" data-throw-if-not-resolved=\"false\"></xref> which you can use to specify under what conditions an operation to\nadd multiple tasks to a job should retry, terminate or be considered successful.\n"
  remarks: >-
    You do not need to specify this behavior explicitly; if you do not, a default behavior

    is used.  This behavior uses the <xref href="Microsoft.Azure.Batch.AddTaskCollectionResultHandler.DefaultAddTaskCollectionResultHandler(Microsoft.Azure.Batch.AddTaskResult%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>

    criteria.
  example: []
  syntax:
    content: 'public class AddTaskCollectionResultHandler : BatchClientBehavior'
    content.vb: >-
      Public Class AddTaskCollectionResultHandler
          Inherits BatchClientBehavior
  inheritance:
  - System.Object
  - Microsoft.Azure.Batch.BatchClientBehavior
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Batch.AddTaskCollectionResultHandler.ResultHandler
  commentId: P:Microsoft.Azure.Batch.AddTaskCollectionResultHandler.ResultHandler
  id: ResultHandler
  parent: Microsoft.Azure.Batch.AddTaskCollectionResultHandler
  langs:
  - csharp
  - vb
  name: ResultHandler
  nameWithType: AddTaskCollectionResultHandler.ResultHandler
  fullName: Microsoft.Azure.Batch.AddTaskCollectionResultHandler.ResultHandler
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/AddTaskCollectionResultHandler.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ResultHandler
    path: src/azure-sdk-for-net/src/Batch/Client/Src/AddTaskCollectionResultHandler.cs
    startLine: 37
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets the function that defines whether a particular Add Task operation is considered\nsuccessful or unsuccessful, and whether it may be retried.\n"
  example: []
  syntax:
    content: public Func<AddTaskResult, CancellationToken, AddTaskResultStatus> ResultHandler { get; set; }
    content.vb: Public Property ResultHandler As Func(Of AddTaskResult, CancellationToken, AddTaskResultStatus)
    parameters: []
    return:
      type: System.Func{Microsoft.Azure.Batch.AddTaskResult,System.Threading.CancellationToken,Microsoft.Azure.Batch.AddTaskResultStatus}
  overload: Microsoft.Azure.Batch.AddTaskCollectionResultHandler.ResultHandler*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.AddTaskCollectionResultHandler.#ctor(System.Func{Microsoft.Azure.Batch.AddTaskResult,System.Threading.CancellationToken,Microsoft.Azure.Batch.AddTaskResultStatus})
  commentId: M:Microsoft.Azure.Batch.AddTaskCollectionResultHandler.#ctor(System.Func{Microsoft.Azure.Batch.AddTaskResult,System.Threading.CancellationToken,Microsoft.Azure.Batch.AddTaskResultStatus})
  id: '#ctor(System.Func{Microsoft.Azure.Batch.AddTaskResult,System.Threading.CancellationToken,Microsoft.Azure.Batch.AddTaskResultStatus})'
  parent: Microsoft.Azure.Batch.AddTaskCollectionResultHandler
  langs:
  - csharp
  - vb
  name: AddTaskCollectionResultHandler(Func<AddTaskResult, CancellationToken, AddTaskResultStatus>)
  nameWithType: AddTaskCollectionResultHandler.AddTaskCollectionResultHandler(Func<AddTaskResult, CancellationToken, AddTaskResultStatus>)
  fullName: Microsoft.Azure.Batch.AddTaskCollectionResultHandler.AddTaskCollectionResultHandler(System.Func<Microsoft.Azure.Batch.AddTaskResult, System.Threading.CancellationToken, Microsoft.Azure.Batch.AddTaskResultStatus>)
  type: Constructor
  source:
    remote:
      path: src/Batch/Client/Src/AddTaskCollectionResultHandler.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/Batch/Client/Src/AddTaskCollectionResultHandler.cs
    startLine: 44
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.Azure.Batch.AddTaskCollectionResultHandler\" data-throw-if-not-resolved=\"false\"></xref> class with the specified result handler function.\n"
  example: []
  syntax:
    content: public AddTaskCollectionResultHandler(Func<AddTaskResult, CancellationToken, AddTaskResultStatus> resultHandler)
    content.vb: Public Sub New(resultHandler As Func(Of AddTaskResult, CancellationToken, AddTaskResultStatus))
    parameters:
    - id: resultHandler
      type: System.Func{Microsoft.Azure.Batch.AddTaskResult,System.Threading.CancellationToken,Microsoft.Azure.Batch.AddTaskResultStatus}
      description: >-
        A function that defines whether a particular Add Task operation is considered

        successful or unsuccessful, and whether it may be retried.
  overload: Microsoft.Azure.Batch.AddTaskCollectionResultHandler.#ctor*
  nameWithType.vb: AddTaskCollectionResultHandler.AddTaskCollectionResultHandler(Func(Of AddTaskResult, CancellationToken, AddTaskResultStatus))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.AddTaskCollectionResultHandler.AddTaskCollectionResultHandler(System.Func(Of Microsoft.Azure.Batch.AddTaskResult, System.Threading.CancellationToken, Microsoft.Azure.Batch.AddTaskResultStatus))
  name.vb: AddTaskCollectionResultHandler(Func(Of AddTaskResult, CancellationToken, AddTaskResultStatus))
- uid: Microsoft.Azure.Batch.AddTaskCollectionResultHandler.DefaultAddTaskCollectionResultHandler(Microsoft.Azure.Batch.AddTaskResult,System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.AddTaskCollectionResultHandler.DefaultAddTaskCollectionResultHandler(Microsoft.Azure.Batch.AddTaskResult,System.Threading.CancellationToken)
  id: DefaultAddTaskCollectionResultHandler(Microsoft.Azure.Batch.AddTaskResult,System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.AddTaskCollectionResultHandler
  langs:
  - csharp
  - vb
  name: DefaultAddTaskCollectionResultHandler(AddTaskResult, CancellationToken)
  nameWithType: AddTaskCollectionResultHandler.DefaultAddTaskCollectionResultHandler(AddTaskResult, CancellationToken)
  fullName: Microsoft.Azure.Batch.AddTaskCollectionResultHandler.DefaultAddTaskCollectionResultHandler(Microsoft.Azure.Batch.AddTaskResult, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/AddTaskCollectionResultHandler.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DefaultAddTaskCollectionResultHandler
    path: src/azure-sdk-for-net/src/Batch/Client/Src/AddTaskCollectionResultHandler.cs
    startLine: 63
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nThe default result handler for the <xref href=\"Microsoft.Azure.Batch.AddTaskCollectionResultHandler\" data-throw-if-not-resolved=\"false\"></xref> behavior. This handler\ntreats success and 'TaskExists' errors as successful, retries server errors (HTTP 5xx), and throws\n<xref href=\"Microsoft.Azure.Batch.AddTaskCollectionTerminatedException\" data-throw-if-not-resolved=\"false\"></xref> on client error (HTTP 4xx).\n"
  example: []
  syntax:
    content: public static AddTaskResultStatus DefaultAddTaskCollectionResultHandler(AddTaskResult addTaskResult, CancellationToken cancellationToken)
    content.vb: Public Shared Function DefaultAddTaskCollectionResultHandler(addTaskResult As AddTaskResult, cancellationToken As CancellationToken) As AddTaskResultStatus
    parameters:
    - id: addTaskResult
      type: Microsoft.Azure.Batch.AddTaskResult
      description: The result of a single Add Task operation.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token associated with the AddTaskCollection operation.
    return:
      type: Microsoft.Azure.Batch.AddTaskResultStatus
      description: >-
        An <xref href="Microsoft.Azure.Batch.AddTaskResultStatus" data-throw-if-not-resolved="false"></xref> which indicates whether the <span class="paramref">addTaskResult</span>

        is classified as a success or as requiring a retry.
  overload: Microsoft.Azure.Batch.AddTaskCollectionResultHandler.DefaultAddTaskCollectionResultHandler*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Azure.Batch.BatchClientBehavior
  commentId: T:Microsoft.Azure.Batch.BatchClientBehavior
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: BatchClientBehavior
  nameWithType: BatchClientBehavior
  fullName: Microsoft.Azure.Batch.BatchClientBehavior
- uid: Microsoft.Azure.Batch.AddTaskCollectionResultHandler.DefaultAddTaskCollectionResultHandler(Microsoft.Azure.Batch.AddTaskResult,System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.AddTaskCollectionResultHandler.DefaultAddTaskCollectionResultHandler(Microsoft.Azure.Batch.AddTaskResult,System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch
  commentId: N:Microsoft.Azure.Batch
  isExternal: false
  name: Microsoft.Azure.Batch
  nameWithType: Microsoft.Azure.Batch
  fullName: Microsoft.Azure.Batch
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Batch.AddTaskCollectionResultHandler.ResultHandler*
  commentId: Overload:Microsoft.Azure.Batch.AddTaskCollectionResultHandler.ResultHandler
  isExternal: false
  name: ResultHandler
  nameWithType: AddTaskCollectionResultHandler.ResultHandler
  fullName: Microsoft.Azure.Batch.AddTaskCollectionResultHandler.ResultHandler
- uid: System.Func{Microsoft.Azure.Batch.AddTaskResult,System.Threading.CancellationToken,Microsoft.Azure.Batch.AddTaskResultStatus}
  commentId: T:System.Func{Microsoft.Azure.Batch.AddTaskResult,System.Threading.CancellationToken,Microsoft.Azure.Batch.AddTaskResultStatus}
  parent: System
  definition: System.Func`3
  name: Func<AddTaskResult, CancellationToken, AddTaskResultStatus>
  nameWithType: Func<AddTaskResult, CancellationToken, AddTaskResultStatus>
  fullName: System.Func<Microsoft.Azure.Batch.AddTaskResult, System.Threading.CancellationToken, Microsoft.Azure.Batch.AddTaskResultStatus>
  nameWithType.vb: Func(Of AddTaskResult, CancellationToken, AddTaskResultStatus)
  fullname.vb: System.Func(Of Microsoft.Azure.Batch.AddTaskResult, System.Threading.CancellationToken, Microsoft.Azure.Batch.AddTaskResultStatus)
  name.vb: Func(Of AddTaskResult, CancellationToken, AddTaskResultStatus)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.AddTaskResult
    name: AddTaskResult
    nameWithType: AddTaskResult
    fullName: Microsoft.Azure.Batch.AddTaskResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Azure.Batch.AddTaskResultStatus
    name: AddTaskResultStatus
    nameWithType: AddTaskResultStatus
    fullName: Microsoft.Azure.Batch.AddTaskResultStatus
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.AddTaskResult
    name: AddTaskResult
    nameWithType: AddTaskResult
    fullName: Microsoft.Azure.Batch.AddTaskResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Azure.Batch.AddTaskResultStatus
    name: AddTaskResultStatus
    nameWithType: AddTaskResultStatus
    fullName: Microsoft.Azure.Batch.AddTaskResultStatus
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullname.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.AddTaskCollectionResultHandler
  commentId: T:Microsoft.Azure.Batch.AddTaskCollectionResultHandler
  isExternal: false
  name: AddTaskCollectionResultHandler
  nameWithType: AddTaskCollectionResultHandler
  fullName: Microsoft.Azure.Batch.AddTaskCollectionResultHandler
- uid: Microsoft.Azure.Batch.AddTaskCollectionResultHandler.#ctor*
  commentId: Overload:Microsoft.Azure.Batch.AddTaskCollectionResultHandler.#ctor
  isExternal: false
  name: AddTaskCollectionResultHandler
  nameWithType: AddTaskCollectionResultHandler.AddTaskCollectionResultHandler
  fullName: Microsoft.Azure.Batch.AddTaskCollectionResultHandler.AddTaskCollectionResultHandler
- uid: Microsoft.Azure.Batch.AddTaskCollectionTerminatedException
  commentId: T:Microsoft.Azure.Batch.AddTaskCollectionTerminatedException
  isExternal: false
  name: AddTaskCollectionTerminatedException
  nameWithType: AddTaskCollectionTerminatedException
  fullName: Microsoft.Azure.Batch.AddTaskCollectionTerminatedException
- uid: Microsoft.Azure.Batch.AddTaskResultStatus
  commentId: T:Microsoft.Azure.Batch.AddTaskResultStatus
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: AddTaskResultStatus
  nameWithType: AddTaskResultStatus
  fullName: Microsoft.Azure.Batch.AddTaskResultStatus
- uid: Microsoft.Azure.Batch.AddTaskCollectionResultHandler.DefaultAddTaskCollectionResultHandler*
  commentId: Overload:Microsoft.Azure.Batch.AddTaskCollectionResultHandler.DefaultAddTaskCollectionResultHandler
  isExternal: false
  name: DefaultAddTaskCollectionResultHandler
  nameWithType: AddTaskCollectionResultHandler.DefaultAddTaskCollectionResultHandler
  fullName: Microsoft.Azure.Batch.AddTaskCollectionResultHandler.DefaultAddTaskCollectionResultHandler
- uid: Microsoft.Azure.Batch.AddTaskResult
  commentId: T:Microsoft.Azure.Batch.AddTaskResult
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: AddTaskResult
  nameWithType: AddTaskResult
  fullName: Microsoft.Azure.Batch.AddTaskResult
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
