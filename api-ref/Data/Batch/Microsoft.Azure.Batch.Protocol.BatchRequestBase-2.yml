### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2
  commentId: T:Microsoft.Azure.Batch.Protocol.BatchRequestBase`2
  id: BatchRequestBase`2
  parent: Microsoft.Azure.Batch.Protocol
  children:
  - Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.#ctor(Microsoft.Azure.Batch.Protocol.BatchServiceClient,System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.CancellationToken
  - Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.ClientRequestIdProvider
  - Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.CustomHeaders
  - Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.ExecuteRequestAsync
  - Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.Microsoft#Azure#Batch#Protocol#IBatchRequest#Options
  - Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.OperationContext
  - Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.Options
  - Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.RestClient
  - Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.RetryPolicy
  - Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.ServiceRequestFunc
  - Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.ThrowIfRequestExecutionHasStarted
  - Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.Timeout
  langs:
  - csharp
  - vb
  name: BatchRequestBase<TOptions, TResponse>
  nameWithType: BatchRequestBase<TOptions, TResponse>
  fullName: Microsoft.Azure.Batch.Protocol.BatchRequestBase<TOptions, TResponse>
  type: Class
  source:
    remote:
      path: src/Batch/Client/Src/Protocol/BatchRequest.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: BatchRequestBase
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Protocol/BatchRequest.cs
    startLine: 17
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol
  summary: "\nA base class for all Batch service requests. Represents the information required to make a particular call with no request body to the Batch service REST API.\n"
  example: []
  syntax:
    content: 'public abstract class BatchRequestBase<TOptions, TResponse> : IBatchRequest<TResponse>, IBatchRequest where TOptions : IOptions, new ()where TResponse : IAzureOperationResponse'
    content.vb: >-
      Public MustInherit Class BatchRequestBase(Of TOptions As {IOptions, New}, TResponse As IAzureOperationResponse)
          Implements IBatchRequest(Of TResponse), IBatchRequest
    typeParameters:
    - id: TOptions
      description: The type of the parameters passed outside the request body associated with the request.
    - id: TResponse
      description: The response type expected from the request.
  inheritance:
  - System.Object
  derivedClasses:
  - Microsoft.Azure.Batch.Protocol.BatchRequest`2
  - Microsoft.Azure.Batch.Protocol.BatchRequest`3
  implements:
  - Microsoft.Azure.Batch.Protocol.IBatchRequest{{TResponse}}
  - Microsoft.Azure.Batch.Protocol.IBatchRequest
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: BatchRequestBase(Of TOptions, TResponse)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Microsoft.Azure.Batch.Protocol.BatchRequestBase(Of TOptions, TResponse)
  name.vb: BatchRequestBase(Of TOptions, TResponse)
- uid: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.CustomHeaders
  commentId: P:Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.CustomHeaders
  id: CustomHeaders
  parent: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2
  langs:
  - csharp
  - vb
  name: CustomHeaders
  nameWithType: BatchRequestBase<TOptions, TResponse>.CustomHeaders
  fullName: Microsoft.Azure.Batch.Protocol.BatchRequestBase<TOptions, TResponse>.CustomHeaders
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Protocol/BatchRequest.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CustomHeaders
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Protocol/BatchRequest.cs
    startLine: 32
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol
  summary: "\nGets the headers used for the request.\n"
  example: []
  syntax:
    content: public Dictionary<string, List<string>> CustomHeaders { get; }
    content.vb: Public ReadOnly Property CustomHeaders As Dictionary(Of String, List(Of String))
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}}
  overload: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.CustomHeaders*
  nameWithType.vb: BatchRequestBase(Of TOptions, TResponse).CustomHeaders
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Azure.Batch.Protocol.BatchRequestBase(Of TOptions, TResponse).CustomHeaders
- uid: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.ServiceRequestFunc
  commentId: P:Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.ServiceRequestFunc
  id: ServiceRequestFunc
  parent: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2
  langs:
  - csharp
  - vb
  name: ServiceRequestFunc
  nameWithType: BatchRequestBase<TOptions, TResponse>.ServiceRequestFunc
  fullName: Microsoft.Azure.Batch.Protocol.BatchRequestBase<TOptions, TResponse>.ServiceRequestFunc
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Protocol/BatchRequest.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ServiceRequestFunc
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Protocol/BatchRequest.cs
    startLine: 37
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol
  summary: "\nGets or sets the function which will create a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> calling the Batch service.\n"
  example: []
  syntax:
    content: public Func<CancellationToken, Task<TResponse>> ServiceRequestFunc { get; set; }
    content.vb: Public Property ServiceRequestFunc As Func(Of CancellationToken, Task(Of TResponse))
    parameters: []
    return:
      type: System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{{TResponse}}}
  overload: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.ServiceRequestFunc*
  nameWithType.vb: BatchRequestBase(Of TOptions, TResponse).ServiceRequestFunc
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.Protocol.BatchRequestBase(Of TOptions, TResponse).ServiceRequestFunc
- uid: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.Options
  commentId: P:Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.Options
  id: Options
  parent: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2
  langs:
  - csharp
  - vb
  name: Options
  nameWithType: BatchRequestBase<TOptions, TResponse>.Options
  fullName: Microsoft.Azure.Batch.Protocol.BatchRequestBase<TOptions, TResponse>.Options
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Protocol/BatchRequest.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Options
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Protocol/BatchRequest.cs
    startLine: 50
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol
  summary: "\nGets or sets the options used for the request.\n"
  example: []
  syntax:
    content: public TOptions Options { get; set; }
    content.vb: Public Property Options As TOptions
    parameters: []
    return:
      type: '{TOptions}'
  overload: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.Options*
  nameWithType.vb: BatchRequestBase(Of TOptions, TResponse).Options
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.Protocol.BatchRequestBase(Of TOptions, TResponse).Options
- uid: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.Microsoft#Azure#Batch#Protocol#IBatchRequest#Options
  commentId: P:Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.Microsoft#Azure#Batch#Protocol#IBatchRequest#Options
  id: Microsoft#Azure#Batch#Protocol#IBatchRequest#Options
  isEii: true
  parent: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2
  langs:
  - csharp
  - vb
  name: IBatchRequest.Options
  nameWithType: BatchRequestBase<TOptions, TResponse>.IBatchRequest.Options
  fullName: Microsoft.Azure.Batch.Protocol.BatchRequestBase<TOptions, TResponse>.Microsoft.Azure.Batch.Protocol.IBatchRequest.Options
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Protocol/BatchRequest.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Microsoft.Azure.Batch.Protocol.IBatchRequest.Options
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Protocol/BatchRequest.cs
    startLine: 63
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol
  summary: "\nGets the options needed by the REST proxy for the current request.\n"
  example: []
  syntax:
    content: IOptions IBatchRequest.Options { get; }
    content.vb: ReadOnly WriteOnly Property Microsoft.Azure.Batch.Protocol.IBatchRequest.Options As IOptions Implements IBatchRequest.Options
    parameters: []
    return:
      type: Microsoft.Azure.Batch.Protocol.Models.IOptions
  overload: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.Microsoft#Azure#Batch#Protocol#IBatchRequest#Options*
  implements:
  - Microsoft.Azure.Batch.Protocol.IBatchRequest.Options
  nameWithType.vb: BatchRequestBase(Of TOptions, TResponse).Microsoft.Azure.Batch.Protocol.IBatchRequest.Options
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Microsoft.Azure.Batch.Protocol.BatchRequestBase(Of TOptions, TResponse).Microsoft.Azure.Batch.Protocol.IBatchRequest.Options
  name.vb: Microsoft.Azure.Batch.Protocol.IBatchRequest.Options
- uid: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.RestClient
  commentId: P:Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.RestClient
  id: RestClient
  parent: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2
  langs:
  - csharp
  - vb
  name: RestClient
  nameWithType: BatchRequestBase<TOptions, TResponse>.RestClient
  fullName: Microsoft.Azure.Batch.Protocol.BatchRequestBase<TOptions, TResponse>.RestClient
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Protocol/BatchRequest.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: RestClient
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Protocol/BatchRequest.cs
    startLine: 68
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol
  summary: "\nGets the REST client that will be used for this request.\n"
  example: []
  syntax:
    content: public BatchServiceClient RestClient { get; }
    content.vb: Public ReadOnly Property RestClient As BatchServiceClient
    parameters: []
    return:
      type: Microsoft.Azure.Batch.Protocol.BatchServiceClient
  overload: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.RestClient*
  implements:
  - Microsoft.Azure.Batch.Protocol.IBatchRequest.RestClient
  nameWithType.vb: BatchRequestBase(Of TOptions, TResponse).RestClient
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Azure.Batch.Protocol.BatchRequestBase(Of TOptions, TResponse).RestClient
- uid: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.RetryPolicy
  commentId: P:Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.RetryPolicy
  id: RetryPolicy
  parent: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2
  langs:
  - csharp
  - vb
  name: RetryPolicy
  nameWithType: BatchRequestBase<TOptions, TResponse>.RetryPolicy
  fullName: Microsoft.Azure.Batch.Protocol.BatchRequestBase<TOptions, TResponse>.RetryPolicy
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Protocol/BatchRequest.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: RetryPolicy
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Protocol/BatchRequest.cs
    startLine: 74
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol
  summary: "\nGets or sets the retry policy to be applied.\nNull means no retries will be attempted.\n"
  example: []
  syntax:
    content: public IRetryPolicy RetryPolicy { get; set; }
    content.vb: Public Property RetryPolicy As IRetryPolicy
    parameters: []
    return:
      type: Microsoft.Azure.Batch.Common.IRetryPolicy
  overload: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.RetryPolicy*
  implements:
  - Microsoft.Azure.Batch.Protocol.IBatchRequest.RetryPolicy
  nameWithType.vb: BatchRequestBase(Of TOptions, TResponse).RetryPolicy
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.Protocol.BatchRequestBase(Of TOptions, TResponse).RetryPolicy
- uid: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.OperationContext
  commentId: P:Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.OperationContext
  id: OperationContext
  parent: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2
  langs:
  - csharp
  - vb
  name: OperationContext
  nameWithType: BatchRequestBase<TOptions, TResponse>.OperationContext
  fullName: Microsoft.Azure.Batch.Protocol.BatchRequestBase<TOptions, TResponse>.OperationContext
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Protocol/BatchRequest.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: OperationContext
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Protocol/BatchRequest.cs
    startLine: 87
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol
  summary: "\nGets the operation context associated with this <xref href=\"Microsoft.Azure.Batch.Protocol.IBatchRequest\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public OperationContext OperationContext { get; }
    content.vb: Public ReadOnly Property OperationContext As OperationContext
    parameters: []
    return:
      type: Microsoft.Azure.Batch.Common.OperationContext
  overload: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.OperationContext*
  implements:
  - Microsoft.Azure.Batch.Protocol.IBatchRequest.OperationContext
  nameWithType.vb: BatchRequestBase(Of TOptions, TResponse).OperationContext
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Azure.Batch.Protocol.BatchRequestBase(Of TOptions, TResponse).OperationContext
- uid: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.Timeout
  commentId: P:Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.Timeout
  id: Timeout
  parent: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2
  langs:
  - csharp
  - vb
  name: Timeout
  nameWithType: BatchRequestBase<TOptions, TResponse>.Timeout
  fullName: Microsoft.Azure.Batch.Protocol.BatchRequestBase<TOptions, TResponse>.Timeout
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Protocol/BatchRequest.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Timeout
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Protocol/BatchRequest.cs
    startLine: 98
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol
  summary: "\nGets or sets the client side timeout for a request to the Batch service.\n"
  remarks: "\n<p>\nThis timeout applies to a single Batch service request; if a retry policy is specified, then each retry will be granted the\nfull duration of this value.\n</p>\n"
  example: []
  syntax:
    content: public TimeSpan Timeout { get; set; }
    content.vb: Public Property Timeout As TimeSpan
    parameters: []
    return:
      type: System.TimeSpan
  overload: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.Timeout*
  implements:
  - Microsoft.Azure.Batch.Protocol.IBatchRequest.Timeout
  nameWithType.vb: BatchRequestBase(Of TOptions, TResponse).Timeout
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.Protocol.BatchRequestBase(Of TOptions, TResponse).Timeout
- uid: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.CancellationToken
  commentId: P:Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.CancellationToken
  id: CancellationToken
  parent: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2
  langs:
  - csharp
  - vb
  name: CancellationToken
  nameWithType: BatchRequestBase<TOptions, TResponse>.CancellationToken
  fullName: Microsoft.Azure.Batch.Protocol.BatchRequestBase<TOptions, TResponse>.CancellationToken
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Protocol/BatchRequest.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CancellationToken
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Protocol/BatchRequest.cs
    startLine: 118
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol
  summary: "\nGets or sets the <xref href=\"Microsoft.Azure.Batch.Protocol.BatchRequestBase%602.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> associated with this <xref href=\"Microsoft.Azure.Batch.Protocol.IBatchRequest\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\n<p>\nCancelling this token will cancel the currently ongoing request. This applies to the initial request as well\nas any subsequent requests created due to <xref href=\"Microsoft.Azure.Batch.Protocol.BatchRequestBase%602.RetryPolicy\" data-throw-if-not-resolved=\"false\"></xref>. Cancelling this token also forbids all\nfuture retries of this <xref href=\"Microsoft.Azure.Batch.Protocol.IBatchRequest\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n"
  example: []
  syntax:
    content: public CancellationToken CancellationToken { get; set; }
    content.vb: Public Property CancellationToken As CancellationToken
    parameters: []
    return:
      type: System.Threading.CancellationToken
  overload: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.CancellationToken*
  implements:
  - Microsoft.Azure.Batch.Protocol.IBatchRequest.CancellationToken
  nameWithType.vb: BatchRequestBase(Of TOptions, TResponse).CancellationToken
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.Protocol.BatchRequestBase(Of TOptions, TResponse).CancellationToken
- uid: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.ClientRequestIdProvider
  commentId: P:Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.ClientRequestIdProvider
  id: ClientRequestIdProvider
  parent: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2
  langs:
  - csharp
  - vb
  name: ClientRequestIdProvider
  nameWithType: BatchRequestBase<TOptions, TResponse>.ClientRequestIdProvider
  fullName: Microsoft.Azure.Batch.Protocol.BatchRequestBase<TOptions, TResponse>.ClientRequestIdProvider
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Protocol/BatchRequest.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ClientRequestIdProvider
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Protocol/BatchRequest.cs
    startLine: 131
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol
  summary: "\nGets or sets the <xref href=\"Microsoft.Azure.Batch.Protocol.BatchRequestBase%602.ClientRequestIdProvider\" data-throw-if-not-resolved=\"false\"></xref> used by this request to generate client request ids.\n"
  example: []
  syntax:
    content: public ClientRequestIdProvider ClientRequestIdProvider { get; set; }
    content.vb: Public Property ClientRequestIdProvider As ClientRequestIdProvider
    parameters: []
    return:
      type: Microsoft.Azure.Batch.ClientRequestIdProvider
  overload: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.ClientRequestIdProvider*
  implements:
  - Microsoft.Azure.Batch.Protocol.IBatchRequest.ClientRequestIdProvider
  nameWithType.vb: BatchRequestBase(Of TOptions, TResponse).ClientRequestIdProvider
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.Protocol.BatchRequestBase(Of TOptions, TResponse).ClientRequestIdProvider
- uid: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.#ctor(Microsoft.Azure.Batch.Protocol.BatchServiceClient,System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.#ctor(Microsoft.Azure.Batch.Protocol.BatchServiceClient,System.Threading.CancellationToken)
  id: '#ctor(Microsoft.Azure.Batch.Protocol.BatchServiceClient,System.Threading.CancellationToken)'
  parent: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2
  langs:
  - csharp
  - vb
  name: BatchRequestBase(BatchServiceClient, CancellationToken)
  nameWithType: BatchRequestBase<TOptions, TResponse>.BatchRequestBase(BatchServiceClient, CancellationToken)
  fullName: Microsoft.Azure.Batch.Protocol.BatchRequestBase<TOptions, TResponse>.BatchRequestBase(Microsoft.Azure.Batch.Protocol.BatchServiceClient, System.Threading.CancellationToken)
  type: Constructor
  source:
    remote:
      path: src/Batch/Client/Src/Protocol/BatchRequest.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Protocol/BatchRequest.cs
    startLine: 146
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.Azure.Batch.Protocol.BatchRequestBase%602\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: protected BatchRequestBase(BatchServiceClient restClient, CancellationToken cancellationToken)
    content.vb: Protected Sub New(restClient As BatchServiceClient, cancellationToken As CancellationToken)
    parameters:
    - id: restClient
      type: Microsoft.Azure.Batch.Protocol.BatchServiceClient
      description: The REST client to use.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellationToken to use.
  overload: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.#ctor*
  nameWithType.vb: BatchRequestBase(Of TOptions, TResponse).BatchRequestBase(BatchServiceClient, CancellationToken)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.Azure.Batch.Protocol.BatchRequestBase(Of TOptions, TResponse).BatchRequestBase(Microsoft.Azure.Batch.Protocol.BatchServiceClient, System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.ExecuteRequestAsync
  commentId: M:Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.ExecuteRequestAsync
  id: ExecuteRequestAsync
  parent: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2
  langs:
  - csharp
  - vb
  name: ExecuteRequestAsync()
  nameWithType: BatchRequestBase<TOptions, TResponse>.ExecuteRequestAsync()
  fullName: Microsoft.Azure.Batch.Protocol.BatchRequestBase<TOptions, TResponse>.ExecuteRequestAsync()
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/Protocol/BatchRequest.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ExecuteRequestAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Protocol/BatchRequest.cs
    startLine: 162
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol
  summary: "\nExecutes the request.\n"
  example: []
  syntax:
    content: public Task<TResponse> ExecuteRequestAsync()
    content.vb: Public Function ExecuteRequestAsync As Task(Of TResponse)
    return:
      type: System.Threading.Tasks.Task{{TResponse}}
      description: An asynchronous operation of return type <span class="typeparamref">TResponse</span>.
  overload: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.ExecuteRequestAsync*
  implements:
  - Microsoft.Azure.Batch.Protocol.IBatchRequest{{TResponse}}.ExecuteRequestAsync
  nameWithType.vb: BatchRequestBase(Of TOptions, TResponse).ExecuteRequestAsync()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.Protocol.BatchRequestBase(Of TOptions, TResponse).ExecuteRequestAsync()
- uid: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.ThrowIfRequestExecutionHasStarted
  commentId: M:Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.ThrowIfRequestExecutionHasStarted
  id: ThrowIfRequestExecutionHasStarted
  parent: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2
  langs:
  - csharp
  - vb
  name: ThrowIfRequestExecutionHasStarted()
  nameWithType: BatchRequestBase<TOptions, TResponse>.ThrowIfRequestExecutionHasStarted()
  fullName: Microsoft.Azure.Batch.Protocol.BatchRequestBase<TOptions, TResponse>.ThrowIfRequestExecutionHasStarted()
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/Protocol/BatchRequest.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ThrowIfRequestExecutionHasStarted
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Protocol/BatchRequest.cs
    startLine: 271
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol
  summary: "\nThrows an exception if request execution has started.\n"
  example: []
  syntax:
    content: protected void ThrowIfRequestExecutionHasStarted()
    content.vb: Protected Sub ThrowIfRequestExecutionHasStarted
  overload: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.ThrowIfRequestExecutionHasStarted*
  nameWithType.vb: BatchRequestBase(Of TOptions, TResponse).ThrowIfRequestExecutionHasStarted()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.Azure.Batch.Protocol.BatchRequestBase(Of TOptions, TResponse).ThrowIfRequestExecutionHasStarted()
references:
- uid: Microsoft.Azure.Batch.Protocol
  commentId: N:Microsoft.Azure.Batch.Protocol
  isExternal: false
  name: Microsoft.Azure.Batch.Protocol
  nameWithType: Microsoft.Azure.Batch.Protocol
  fullName: Microsoft.Azure.Batch.Protocol
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Azure.Batch.Protocol.IBatchRequest{{TResponse}}
  commentId: T:Microsoft.Azure.Batch.Protocol.IBatchRequest{`1}
  parent: Microsoft.Azure.Batch.Protocol
  definition: Microsoft.Azure.Batch.Protocol.IBatchRequest`1
  name: IBatchRequest<TResponse>
  nameWithType: IBatchRequest<TResponse>
  fullName: Microsoft.Azure.Batch.Protocol.IBatchRequest<TResponse>
  nameWithType.vb: IBatchRequest(Of TResponse)
  fullname.vb: Microsoft.Azure.Batch.Protocol.IBatchRequest(Of TResponse)
  name.vb: IBatchRequest(Of TResponse)
  spec.csharp:
  - uid: Microsoft.Azure.Batch.Protocol.IBatchRequest`1
    name: IBatchRequest
    nameWithType: IBatchRequest
    fullName: Microsoft.Azure.Batch.Protocol.IBatchRequest
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Batch.Protocol.IBatchRequest`1
    name: IBatchRequest
    nameWithType: IBatchRequest
    fullName: Microsoft.Azure.Batch.Protocol.IBatchRequest
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.Protocol.IBatchRequest
  commentId: T:Microsoft.Azure.Batch.Protocol.IBatchRequest
  parent: Microsoft.Azure.Batch.Protocol
  isExternal: false
  name: IBatchRequest
  nameWithType: IBatchRequest
  fullName: Microsoft.Azure.Batch.Protocol.IBatchRequest
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Batch.Protocol.IBatchRequest`1
  commentId: T:Microsoft.Azure.Batch.Protocol.IBatchRequest`1
  isExternal: false
  name: IBatchRequest<TResponse>
  nameWithType: IBatchRequest<TResponse>
  fullName: Microsoft.Azure.Batch.Protocol.IBatchRequest<TResponse>
  nameWithType.vb: IBatchRequest(Of TResponse)
  fullname.vb: Microsoft.Azure.Batch.Protocol.IBatchRequest(Of TResponse)
  name.vb: IBatchRequest(Of TResponse)
  spec.csharp:
  - uid: Microsoft.Azure.Batch.Protocol.IBatchRequest`1
    name: IBatchRequest
    nameWithType: IBatchRequest
    fullName: Microsoft.Azure.Batch.Protocol.IBatchRequest
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Batch.Protocol.IBatchRequest`1
    name: IBatchRequest
    nameWithType: IBatchRequest
    fullName: Microsoft.Azure.Batch.Protocol.IBatchRequest
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.CustomHeaders*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.CustomHeaders
  isExternal: false
  name: CustomHeaders
  nameWithType: BatchRequestBase<TOptions, TResponse>.CustomHeaders
  fullName: Microsoft.Azure.Batch.Protocol.BatchRequestBase<TOptions, TResponse>.CustomHeaders
  nameWithType.vb: BatchRequestBase(Of TOptions, TResponse).CustomHeaders
  fullname.vb: Microsoft.Azure.Batch.Protocol.BatchRequestBase(Of TOptions, TResponse).CustomHeaders
- uid: System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, List<String>>
  nameWithType: Dictionary<String, List<String>>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Collections.Generic.List<System.String>>
  nameWithType.vb: Dictionary(Of String, List(Of String))
  fullname.vb: System.Collections.Generic.Dictionary(Of System.String, System.Collections.Generic.List(Of System.String))
  name.vb: Dictionary(Of String, List(Of String))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.ServiceRequestFunc*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.ServiceRequestFunc
  isExternal: false
  name: ServiceRequestFunc
  nameWithType: BatchRequestBase<TOptions, TResponse>.ServiceRequestFunc
  fullName: Microsoft.Azure.Batch.Protocol.BatchRequestBase<TOptions, TResponse>.ServiceRequestFunc
  nameWithType.vb: BatchRequestBase(Of TOptions, TResponse).ServiceRequestFunc
  fullname.vb: Microsoft.Azure.Batch.Protocol.BatchRequestBase(Of TOptions, TResponse).ServiceRequestFunc
- uid: System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{{TResponse}}}
  commentId: T:System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{`1}}
  parent: System
  definition: System.Func`2
  name: Func<CancellationToken, Task<TResponse>>
  nameWithType: Func<CancellationToken, Task<TResponse>>
  fullName: System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<TResponse>>
  nameWithType.vb: Func(Of CancellationToken, Task(Of TResponse))
  fullname.vb: System.Func(Of System.Threading.CancellationToken, System.Threading.Tasks.Task(Of TResponse))
  name.vb: Func(Of CancellationToken, Task(Of TResponse))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.Options*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.Options
  isExternal: false
  name: Options
  nameWithType: BatchRequestBase<TOptions, TResponse>.Options
  fullName: Microsoft.Azure.Batch.Protocol.BatchRequestBase<TOptions, TResponse>.Options
  nameWithType.vb: BatchRequestBase(Of TOptions, TResponse).Options
  fullname.vb: Microsoft.Azure.Batch.Protocol.BatchRequestBase(Of TOptions, TResponse).Options
- uid: '{TOptions}'
  commentId: '!:TOptions'
  definition: TOptions
  name: TOptions
  nameWithType: TOptions
  fullName: TOptions
- uid: TOptions
  commentId: '!:TOptions'
  isExternal: false
  name: TOptions
  nameWithType: TOptions
  fullName: TOptions
- uid: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.Microsoft#Azure#Batch#Protocol#IBatchRequest#Options*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.Microsoft#Azure#Batch#Protocol#IBatchRequest#Options
  isExternal: false
  name: IBatchRequest.Options
  nameWithType: BatchRequestBase<TOptions, TResponse>.IBatchRequest.Options
  fullName: Microsoft.Azure.Batch.Protocol.BatchRequestBase<TOptions, TResponse>.Microsoft.Azure.Batch.Protocol.IBatchRequest.Options
  nameWithType.vb: BatchRequestBase(Of TOptions, TResponse).Microsoft.Azure.Batch.Protocol.IBatchRequest.Options
  fullname.vb: Microsoft.Azure.Batch.Protocol.BatchRequestBase(Of TOptions, TResponse).Microsoft.Azure.Batch.Protocol.IBatchRequest.Options
  name.vb: Microsoft.Azure.Batch.Protocol.IBatchRequest.Options
- uid: Microsoft.Azure.Batch.Protocol.IBatchRequest.Options
  commentId: P:Microsoft.Azure.Batch.Protocol.IBatchRequest.Options
  parent: Microsoft.Azure.Batch.Protocol.IBatchRequest
  isExternal: false
  name: Options
  nameWithType: IBatchRequest.Options
  fullName: Microsoft.Azure.Batch.Protocol.IBatchRequest.Options
- uid: Microsoft.Azure.Batch.Protocol.Models.IOptions
  commentId: T:Microsoft.Azure.Batch.Protocol.Models.IOptions
  parent: Microsoft.Azure.Batch.Protocol.Models
  isExternal: false
  name: IOptions
  nameWithType: IOptions
  fullName: Microsoft.Azure.Batch.Protocol.Models.IOptions
- uid: Microsoft.Azure.Batch.Protocol.Models
  commentId: N:Microsoft.Azure.Batch.Protocol.Models
  isExternal: false
  name: Microsoft.Azure.Batch.Protocol.Models
  nameWithType: Microsoft.Azure.Batch.Protocol.Models
  fullName: Microsoft.Azure.Batch.Protocol.Models
- uid: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.RestClient*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.RestClient
  isExternal: false
  name: RestClient
  nameWithType: BatchRequestBase<TOptions, TResponse>.RestClient
  fullName: Microsoft.Azure.Batch.Protocol.BatchRequestBase<TOptions, TResponse>.RestClient
  nameWithType.vb: BatchRequestBase(Of TOptions, TResponse).RestClient
  fullname.vb: Microsoft.Azure.Batch.Protocol.BatchRequestBase(Of TOptions, TResponse).RestClient
- uid: Microsoft.Azure.Batch.Protocol.IBatchRequest.RestClient
  commentId: P:Microsoft.Azure.Batch.Protocol.IBatchRequest.RestClient
  parent: Microsoft.Azure.Batch.Protocol.IBatchRequest
  isExternal: false
  name: RestClient
  nameWithType: IBatchRequest.RestClient
  fullName: Microsoft.Azure.Batch.Protocol.IBatchRequest.RestClient
- uid: Microsoft.Azure.Batch.Protocol.BatchServiceClient
  commentId: T:Microsoft.Azure.Batch.Protocol.BatchServiceClient
  parent: Microsoft.Azure.Batch.Protocol
  isExternal: false
  name: BatchServiceClient
  nameWithType: BatchServiceClient
  fullName: Microsoft.Azure.Batch.Protocol.BatchServiceClient
- uid: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.RetryPolicy*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.RetryPolicy
  isExternal: false
  name: RetryPolicy
  nameWithType: BatchRequestBase<TOptions, TResponse>.RetryPolicy
  fullName: Microsoft.Azure.Batch.Protocol.BatchRequestBase<TOptions, TResponse>.RetryPolicy
  nameWithType.vb: BatchRequestBase(Of TOptions, TResponse).RetryPolicy
  fullname.vb: Microsoft.Azure.Batch.Protocol.BatchRequestBase(Of TOptions, TResponse).RetryPolicy
- uid: Microsoft.Azure.Batch.Protocol.IBatchRequest.RetryPolicy
  commentId: P:Microsoft.Azure.Batch.Protocol.IBatchRequest.RetryPolicy
  parent: Microsoft.Azure.Batch.Protocol.IBatchRequest
  isExternal: false
  name: RetryPolicy
  nameWithType: IBatchRequest.RetryPolicy
  fullName: Microsoft.Azure.Batch.Protocol.IBatchRequest.RetryPolicy
- uid: Microsoft.Azure.Batch.Common.IRetryPolicy
  commentId: T:Microsoft.Azure.Batch.Common.IRetryPolicy
  parent: Microsoft.Azure.Batch.Common
  isExternal: false
  name: IRetryPolicy
  nameWithType: IRetryPolicy
  fullName: Microsoft.Azure.Batch.Common.IRetryPolicy
- uid: Microsoft.Azure.Batch.Common
  commentId: N:Microsoft.Azure.Batch.Common
  isExternal: false
  name: Microsoft.Azure.Batch.Common
  nameWithType: Microsoft.Azure.Batch.Common
  fullName: Microsoft.Azure.Batch.Common
- uid: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.OperationContext*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.OperationContext
  isExternal: false
  name: OperationContext
  nameWithType: BatchRequestBase<TOptions, TResponse>.OperationContext
  fullName: Microsoft.Azure.Batch.Protocol.BatchRequestBase<TOptions, TResponse>.OperationContext
  nameWithType.vb: BatchRequestBase(Of TOptions, TResponse).OperationContext
  fullname.vb: Microsoft.Azure.Batch.Protocol.BatchRequestBase(Of TOptions, TResponse).OperationContext
- uid: Microsoft.Azure.Batch.Protocol.IBatchRequest.OperationContext
  commentId: P:Microsoft.Azure.Batch.Protocol.IBatchRequest.OperationContext
  parent: Microsoft.Azure.Batch.Protocol.IBatchRequest
  isExternal: false
  name: OperationContext
  nameWithType: IBatchRequest.OperationContext
  fullName: Microsoft.Azure.Batch.Protocol.IBatchRequest.OperationContext
- uid: Microsoft.Azure.Batch.Common.OperationContext
  commentId: T:Microsoft.Azure.Batch.Common.OperationContext
  parent: Microsoft.Azure.Batch.Common
  isExternal: false
  name: OperationContext
  nameWithType: OperationContext
  fullName: Microsoft.Azure.Batch.Common.OperationContext
- uid: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.Timeout*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.Timeout
  isExternal: false
  name: Timeout
  nameWithType: BatchRequestBase<TOptions, TResponse>.Timeout
  fullName: Microsoft.Azure.Batch.Protocol.BatchRequestBase<TOptions, TResponse>.Timeout
  nameWithType.vb: BatchRequestBase(Of TOptions, TResponse).Timeout
  fullname.vb: Microsoft.Azure.Batch.Protocol.BatchRequestBase(Of TOptions, TResponse).Timeout
- uid: Microsoft.Azure.Batch.Protocol.IBatchRequest.Timeout
  commentId: P:Microsoft.Azure.Batch.Protocol.IBatchRequest.Timeout
  parent: Microsoft.Azure.Batch.Protocol.IBatchRequest
  isExternal: false
  name: Timeout
  nameWithType: IBatchRequest.Timeout
  fullName: Microsoft.Azure.Batch.Protocol.IBatchRequest.Timeout
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.CancellationToken
  commentId: P:Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.CancellationToken
  isExternal: false
  name: CancellationToken
  nameWithType: BatchRequestBase<TOptions, TResponse>.CancellationToken
  fullName: Microsoft.Azure.Batch.Protocol.BatchRequestBase<TOptions, TResponse>.CancellationToken
  nameWithType.vb: BatchRequestBase(Of TOptions, TResponse).CancellationToken
  fullname.vb: Microsoft.Azure.Batch.Protocol.BatchRequestBase(Of TOptions, TResponse).CancellationToken
- uid: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.RetryPolicy
  commentId: P:Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.RetryPolicy
  isExternal: false
  name: RetryPolicy
  nameWithType: BatchRequestBase<TOptions, TResponse>.RetryPolicy
  fullName: Microsoft.Azure.Batch.Protocol.BatchRequestBase<TOptions, TResponse>.RetryPolicy
  nameWithType.vb: BatchRequestBase(Of TOptions, TResponse).RetryPolicy
  fullname.vb: Microsoft.Azure.Batch.Protocol.BatchRequestBase(Of TOptions, TResponse).RetryPolicy
- uid: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.CancellationToken*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.CancellationToken
  isExternal: false
  name: CancellationToken
  nameWithType: BatchRequestBase<TOptions, TResponse>.CancellationToken
  fullName: Microsoft.Azure.Batch.Protocol.BatchRequestBase<TOptions, TResponse>.CancellationToken
  nameWithType.vb: BatchRequestBase(Of TOptions, TResponse).CancellationToken
  fullname.vb: Microsoft.Azure.Batch.Protocol.BatchRequestBase(Of TOptions, TResponse).CancellationToken
- uid: Microsoft.Azure.Batch.Protocol.IBatchRequest.CancellationToken
  commentId: P:Microsoft.Azure.Batch.Protocol.IBatchRequest.CancellationToken
  parent: Microsoft.Azure.Batch.Protocol.IBatchRequest
  isExternal: false
  name: CancellationToken
  nameWithType: IBatchRequest.CancellationToken
  fullName: Microsoft.Azure.Batch.Protocol.IBatchRequest.CancellationToken
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.ClientRequestIdProvider
  commentId: P:Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.ClientRequestIdProvider
  isExternal: false
  name: ClientRequestIdProvider
  nameWithType: BatchRequestBase<TOptions, TResponse>.ClientRequestIdProvider
  fullName: Microsoft.Azure.Batch.Protocol.BatchRequestBase<TOptions, TResponse>.ClientRequestIdProvider
  nameWithType.vb: BatchRequestBase(Of TOptions, TResponse).ClientRequestIdProvider
  fullname.vb: Microsoft.Azure.Batch.Protocol.BatchRequestBase(Of TOptions, TResponse).ClientRequestIdProvider
- uid: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.ClientRequestIdProvider*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.ClientRequestIdProvider
  isExternal: false
  name: ClientRequestIdProvider
  nameWithType: BatchRequestBase<TOptions, TResponse>.ClientRequestIdProvider
  fullName: Microsoft.Azure.Batch.Protocol.BatchRequestBase<TOptions, TResponse>.ClientRequestIdProvider
  nameWithType.vb: BatchRequestBase(Of TOptions, TResponse).ClientRequestIdProvider
  fullname.vb: Microsoft.Azure.Batch.Protocol.BatchRequestBase(Of TOptions, TResponse).ClientRequestIdProvider
- uid: Microsoft.Azure.Batch.Protocol.IBatchRequest.ClientRequestIdProvider
  commentId: P:Microsoft.Azure.Batch.Protocol.IBatchRequest.ClientRequestIdProvider
  parent: Microsoft.Azure.Batch.Protocol.IBatchRequest
  isExternal: false
  name: ClientRequestIdProvider
  nameWithType: IBatchRequest.ClientRequestIdProvider
  fullName: Microsoft.Azure.Batch.Protocol.IBatchRequest.ClientRequestIdProvider
- uid: Microsoft.Azure.Batch.ClientRequestIdProvider
  commentId: T:Microsoft.Azure.Batch.ClientRequestIdProvider
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: ClientRequestIdProvider
  nameWithType: ClientRequestIdProvider
  fullName: Microsoft.Azure.Batch.ClientRequestIdProvider
- uid: Microsoft.Azure.Batch
  commentId: N:Microsoft.Azure.Batch
  isExternal: false
  name: Microsoft.Azure.Batch
  nameWithType: Microsoft.Azure.Batch
  fullName: Microsoft.Azure.Batch
- uid: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2
  commentId: T:Microsoft.Azure.Batch.Protocol.BatchRequestBase`2
  isExternal: false
  name: BatchRequestBase<TOptions, TResponse>
  nameWithType: BatchRequestBase<TOptions, TResponse>
  fullName: Microsoft.Azure.Batch.Protocol.BatchRequestBase<TOptions, TResponse>
  nameWithType.vb: BatchRequestBase(Of TOptions, TResponse)
  fullname.vb: Microsoft.Azure.Batch.Protocol.BatchRequestBase(Of TOptions, TResponse)
  name.vb: BatchRequestBase(Of TOptions, TResponse)
  spec.csharp:
  - uid: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2
    name: BatchRequestBase
    nameWithType: BatchRequestBase
    fullName: Microsoft.Azure.Batch.Protocol.BatchRequestBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2
    name: BatchRequestBase
    nameWithType: BatchRequestBase
    fullName: Microsoft.Azure.Batch.Protocol.BatchRequestBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.#ctor*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.#ctor
  isExternal: false
  name: BatchRequestBase
  nameWithType: BatchRequestBase.BatchRequestBase
  fullName: Microsoft.Azure.Batch.Protocol.BatchRequestBase.BatchRequestBase
- uid: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.ExecuteRequestAsync*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.ExecuteRequestAsync
  isExternal: false
  name: ExecuteRequestAsync
  nameWithType: BatchRequestBase.ExecuteRequestAsync
  fullName: Microsoft.Azure.Batch.Protocol.BatchRequestBase.ExecuteRequestAsync
- uid: Microsoft.Azure.Batch.Protocol.IBatchRequest{{TResponse}}.ExecuteRequestAsync
  commentId: M:Microsoft.Azure.Batch.Protocol.IBatchRequest{`1}.ExecuteRequestAsync
  parent: Microsoft.Azure.Batch.Protocol.IBatchRequest{{TResponse}}
  definition: Microsoft.Azure.Batch.Protocol.IBatchRequest`1.ExecuteRequestAsync
  name: ExecuteRequestAsync()
  nameWithType: IBatchRequest<TResponse>.ExecuteRequestAsync()
  fullName: Microsoft.Azure.Batch.Protocol.IBatchRequest<TResponse>.ExecuteRequestAsync()
  nameWithType.vb: IBatchRequest(Of TResponse).ExecuteRequestAsync()
  fullname.vb: Microsoft.Azure.Batch.Protocol.IBatchRequest(Of TResponse).ExecuteRequestAsync()
  spec.csharp:
  - uid: Microsoft.Azure.Batch.Protocol.IBatchRequest`1.ExecuteRequestAsync
    name: ExecuteRequestAsync
    nameWithType: IBatchRequest<TResponse>.ExecuteRequestAsync
    fullName: Microsoft.Azure.Batch.Protocol.IBatchRequest<TResponse>.ExecuteRequestAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Batch.Protocol.IBatchRequest`1.ExecuteRequestAsync
    name: ExecuteRequestAsync
    nameWithType: IBatchRequest(Of TResponse).ExecuteRequestAsync
    fullName: Microsoft.Azure.Batch.Protocol.IBatchRequest(Of TResponse).ExecuteRequestAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TResponse}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TResponse>
  nameWithType: Task<TResponse>
  fullName: System.Threading.Tasks.Task<TResponse>
  nameWithType.vb: Task(Of TResponse)
  fullname.vb: System.Threading.Tasks.Task(Of TResponse)
  name.vb: Task(Of TResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.Protocol.IBatchRequest`1.ExecuteRequestAsync
  commentId: M:Microsoft.Azure.Batch.Protocol.IBatchRequest`1.ExecuteRequestAsync
  isExternal: false
  name: ExecuteRequestAsync()
  nameWithType: IBatchRequest<TResponse>.ExecuteRequestAsync()
  fullName: Microsoft.Azure.Batch.Protocol.IBatchRequest<TResponse>.ExecuteRequestAsync()
  nameWithType.vb: IBatchRequest(Of TResponse).ExecuteRequestAsync()
  fullname.vb: Microsoft.Azure.Batch.Protocol.IBatchRequest(Of TResponse).ExecuteRequestAsync()
  spec.csharp:
  - uid: Microsoft.Azure.Batch.Protocol.IBatchRequest`1.ExecuteRequestAsync
    name: ExecuteRequestAsync
    nameWithType: IBatchRequest<TResponse>.ExecuteRequestAsync
    fullName: Microsoft.Azure.Batch.Protocol.IBatchRequest<TResponse>.ExecuteRequestAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Batch.Protocol.IBatchRequest`1.ExecuteRequestAsync
    name: ExecuteRequestAsync
    nameWithType: IBatchRequest(Of TResponse).ExecuteRequestAsync
    fullName: Microsoft.Azure.Batch.Protocol.IBatchRequest(Of TResponse).ExecuteRequestAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.ThrowIfRequestExecutionHasStarted*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.BatchRequestBase`2.ThrowIfRequestExecutionHasStarted
  isExternal: false
  name: ThrowIfRequestExecutionHasStarted
  nameWithType: BatchRequestBase.ThrowIfRequestExecutionHasStarted
  fullName: Microsoft.Azure.Batch.Protocol.BatchRequestBase.ThrowIfRequestExecutionHasStarted
