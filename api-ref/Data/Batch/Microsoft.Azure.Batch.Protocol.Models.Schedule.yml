### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Batch.Protocol.Models.Schedule
  commentId: T:Microsoft.Azure.Batch.Protocol.Models.Schedule
  id: Schedule
  parent: Microsoft.Azure.Batch.Protocol.Models
  children:
  - Microsoft.Azure.Batch.Protocol.Models.Schedule.#ctor
  - Microsoft.Azure.Batch.Protocol.Models.Schedule.#ctor(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})
  - Microsoft.Azure.Batch.Protocol.Models.Schedule.DoNotRunAfter
  - Microsoft.Azure.Batch.Protocol.Models.Schedule.DoNotRunUntil
  - Microsoft.Azure.Batch.Protocol.Models.Schedule.RecurrenceInterval
  - Microsoft.Azure.Batch.Protocol.Models.Schedule.StartWindow
  langs:
  - csharp
  - vb
  name: Schedule
  nameWithType: Schedule
  fullName: Microsoft.Azure.Batch.Protocol.Models.Schedule
  type: Class
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/Schedule.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Schedule
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/Schedule.cs
    startLine: 25
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nThe schedule according to which jobs will be created\n"
  example: []
  syntax:
    content: public class Schedule
    content.vb: Public Class Schedule
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Batch.Protocol.Models.Schedule.#ctor
  commentId: M:Microsoft.Azure.Batch.Protocol.Models.Schedule.#ctor
  id: '#ctor'
  parent: Microsoft.Azure.Batch.Protocol.Models.Schedule
  langs:
  - csharp
  - vb
  name: Schedule()
  nameWithType: Schedule.Schedule()
  fullName: Microsoft.Azure.Batch.Protocol.Models.Schedule.Schedule()
  type: Constructor
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/Schedule.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/Schedule.cs
    startLine: 30
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nInitializes a new instance of the Schedule class.\n"
  example: []
  syntax:
    content: public Schedule()
    content.vb: Public Sub New
  overload: Microsoft.Azure.Batch.Protocol.Models.Schedule.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.Schedule.#ctor(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})
  commentId: M:Microsoft.Azure.Batch.Protocol.Models.Schedule.#ctor(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})
  id: '#ctor(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})'
  parent: Microsoft.Azure.Batch.Protocol.Models.Schedule
  langs:
  - csharp
  - vb
  name: Schedule(Nullable<DateTime>, Nullable<DateTime>, Nullable<TimeSpan>, Nullable<TimeSpan>)
  nameWithType: Schedule.Schedule(Nullable<DateTime>, Nullable<DateTime>, Nullable<TimeSpan>, Nullable<TimeSpan>)
  fullName: Microsoft.Azure.Batch.Protocol.Models.Schedule.Schedule(System.Nullable<System.DateTime>, System.Nullable<System.DateTime>, System.Nullable<System.TimeSpan>, System.Nullable<System.TimeSpan>)
  type: Constructor
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/Schedule.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/Schedule.cs
    startLine: 48
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nInitializes a new instance of the Schedule class.\n"
  example: []
  syntax:
    content: public Schedule(DateTime? doNotRunUntil = null, DateTime? doNotRunAfter = null, TimeSpan? startWindow = null, TimeSpan? recurrenceInterval = null)
    content.vb: Public Sub New(doNotRunUntil As Date? = Nothing, doNotRunAfter As Date? = Nothing, startWindow As TimeSpan? = Nothing, recurrenceInterval As TimeSpan? = Nothing)
    parameters:
    - id: doNotRunUntil
      type: System.Nullable{System.DateTime}
      description: >-
        The earliest time at which any job may

        be created under this job schedule.
    - id: doNotRunAfter
      type: System.Nullable{System.DateTime}
      description: >-
        A time after which no job will be

        created under this job schedule. The schedule will move to the

        completed state as soon as this deadline is past and there is no

        active job under this job schedule.
    - id: startWindow
      type: System.Nullable{System.TimeSpan}
      description: >-
        The time interval, starting from the

        time at which the schedule indicates a job should be created,

        within which a job must be created.
    - id: recurrenceInterval
      type: System.Nullable{System.TimeSpan}
      description: >-
        The time interval between the

        start times of two successive jobs under the job schedule. A job

        schedule can have at most one active job under it at any given

        time.
  overload: Microsoft.Azure.Batch.Protocol.Models.Schedule.#ctor*
  nameWithType.vb: Schedule.Schedule(Nullable(Of DateTime), Nullable(Of DateTime), Nullable(Of TimeSpan), Nullable(Of TimeSpan))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.Protocol.Models.Schedule.Schedule(System.Nullable(Of System.DateTime), System.Nullable(Of System.DateTime), System.Nullable(Of System.TimeSpan), System.Nullable(Of System.TimeSpan))
  name.vb: Schedule(Nullable(Of DateTime), Nullable(Of DateTime), Nullable(Of TimeSpan), Nullable(Of TimeSpan))
- uid: Microsoft.Azure.Batch.Protocol.Models.Schedule.DoNotRunUntil
  commentId: P:Microsoft.Azure.Batch.Protocol.Models.Schedule.DoNotRunUntil
  id: DoNotRunUntil
  parent: Microsoft.Azure.Batch.Protocol.Models.Schedule
  langs:
  - csharp
  - vb
  name: DoNotRunUntil
  nameWithType: Schedule.DoNotRunUntil
  fullName: Microsoft.Azure.Batch.Protocol.Models.Schedule.DoNotRunUntil
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/Schedule.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DoNotRunUntil
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/Schedule.cs
    startLine: 64
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nGets or sets the earliest time at which any job may be created\nunder this job schedule.\n"
  remarks: "\nIf you do not specify a doNotRunUntil time, the schedule becomes\nready to create jobs immediately.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "doNotRunUntil")]

      public DateTime? DoNotRunUntil { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="doNotRunUntil")>

      Public Property DoNotRunUntil As Date?
    parameters: []
    return:
      type: System.Nullable{System.DateTime}
  overload: Microsoft.Azure.Batch.Protocol.Models.Schedule.DoNotRunUntil*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: doNotRunUntil
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.Schedule.DoNotRunAfter
  commentId: P:Microsoft.Azure.Batch.Protocol.Models.Schedule.DoNotRunAfter
  id: DoNotRunAfter
  parent: Microsoft.Azure.Batch.Protocol.Models.Schedule
  langs:
  - csharp
  - vb
  name: DoNotRunAfter
  nameWithType: Schedule.DoNotRunAfter
  fullName: Microsoft.Azure.Batch.Protocol.Models.Schedule.DoNotRunAfter
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/Schedule.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DoNotRunAfter
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/Schedule.cs
    startLine: 73
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nGets or sets a time after which no job will be created under this\njob schedule. The schedule will move to the completed state as\nsoon as this deadline is past and there is no active job under\nthis job schedule.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "doNotRunAfter")]

      public DateTime? DoNotRunAfter { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="doNotRunAfter")>

      Public Property DoNotRunAfter As Date?
    parameters: []
    return:
      type: System.Nullable{System.DateTime}
  overload: Microsoft.Azure.Batch.Protocol.Models.Schedule.DoNotRunAfter*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: doNotRunAfter
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.Schedule.StartWindow
  commentId: P:Microsoft.Azure.Batch.Protocol.Models.Schedule.StartWindow
  id: StartWindow
  parent: Microsoft.Azure.Batch.Protocol.Models.Schedule
  langs:
  - csharp
  - vb
  name: StartWindow
  nameWithType: Schedule.StartWindow
  fullName: Microsoft.Azure.Batch.Protocol.Models.Schedule.StartWindow
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/Schedule.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: StartWindow
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/Schedule.cs
    startLine: 86
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nGets or sets the time interval, starting from the time at which\nthe schedule indicates a job should be created, within which a\njob must be created.\n"
  remarks: "\nIf a job is not created within the startWindow interval, then the\n'opportunity' is lost; no job will be created until the next\nrecurrence of the schedule.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "startWindow")]

      public TimeSpan? StartWindow { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="startWindow")>

      Public Property StartWindow As TimeSpan?
    parameters: []
    return:
      type: System.Nullable{System.TimeSpan}
  overload: Microsoft.Azure.Batch.Protocol.Models.Schedule.StartWindow*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: startWindow
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.Schedule.RecurrenceInterval
  commentId: P:Microsoft.Azure.Batch.Protocol.Models.Schedule.RecurrenceInterval
  id: RecurrenceInterval
  parent: Microsoft.Azure.Batch.Protocol.Models.Schedule
  langs:
  - csharp
  - vb
  name: RecurrenceInterval
  nameWithType: Schedule.RecurrenceInterval
  fullName: Microsoft.Azure.Batch.Protocol.Models.Schedule.RecurrenceInterval
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/Schedule.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: RecurrenceInterval
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/Schedule.cs
    startLine: 94
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nGets or sets the time interval between the start times of two\nsuccessive jobs under the job schedule. A job schedule can have\nat most one active job under it at any given time.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "recurrenceInterval")]

      public TimeSpan? RecurrenceInterval { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="recurrenceInterval")>

      Public Property RecurrenceInterval As TimeSpan?
    parameters: []
    return:
      type: System.Nullable{System.TimeSpan}
  overload: Microsoft.Azure.Batch.Protocol.Models.Schedule.RecurrenceInterval*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: recurrenceInterval
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Azure.Batch.Protocol.Models
  commentId: N:Microsoft.Azure.Batch.Protocol.Models
  isExternal: false
  name: Microsoft.Azure.Batch.Protocol.Models
  nameWithType: Microsoft.Azure.Batch.Protocol.Models
  fullName: Microsoft.Azure.Batch.Protocol.Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Batch.Protocol.Models.Schedule.#ctor*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.Schedule.#ctor
  isExternal: false
  name: Schedule
  nameWithType: Schedule.Schedule
  fullName: Microsoft.Azure.Batch.Protocol.Models.Schedule.Schedule
- uid: System.Nullable{System.DateTime}
  commentId: T:System.Nullable{System.DateTime}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<System.DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullname.vb: System.Nullable(Of System.DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.TimeSpan}
  commentId: T:System.Nullable{System.TimeSpan}
  parent: System
  definition: System.Nullable`1
  name: Nullable<TimeSpan>
  nameWithType: Nullable<TimeSpan>
  fullName: System.Nullable<System.TimeSpan>
  nameWithType.vb: Nullable(Of TimeSpan)
  fullname.vb: System.Nullable(Of System.TimeSpan)
  name.vb: Nullable(Of TimeSpan)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.Protocol.Models.Schedule.DoNotRunUntil*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.Schedule.DoNotRunUntil
  isExternal: false
  name: DoNotRunUntil
  nameWithType: Schedule.DoNotRunUntil
  fullName: Microsoft.Azure.Batch.Protocol.Models.Schedule.DoNotRunUntil
- uid: Microsoft.Azure.Batch.Protocol.Models.Schedule.DoNotRunAfter*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.Schedule.DoNotRunAfter
  isExternal: false
  name: DoNotRunAfter
  nameWithType: Schedule.DoNotRunAfter
  fullName: Microsoft.Azure.Batch.Protocol.Models.Schedule.DoNotRunAfter
- uid: Microsoft.Azure.Batch.Protocol.Models.Schedule.StartWindow*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.Schedule.StartWindow
  isExternal: false
  name: StartWindow
  nameWithType: Schedule.StartWindow
  fullName: Microsoft.Azure.Batch.Protocol.Models.Schedule.StartWindow
- uid: Microsoft.Azure.Batch.Protocol.Models.Schedule.RecurrenceInterval*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.Schedule.RecurrenceInterval
  isExternal: false
  name: RecurrenceInterval
  nameWithType: Schedule.RecurrenceInterval
  fullName: Microsoft.Azure.Batch.Protocol.Models.Schedule.RecurrenceInterval
