### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Batch.TaskDependencies
  commentId: T:Microsoft.Azure.Batch.TaskDependencies
  id: TaskDependencies
  parent: Microsoft.Azure.Batch
  children:
  - Microsoft.Azure.Batch.TaskDependencies.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.TaskIdRange})
  - Microsoft.Azure.Batch.TaskDependencies.OnId(System.String)
  - Microsoft.Azure.Batch.TaskDependencies.OnIdRange(System.Int32,System.Int32)
  - Microsoft.Azure.Batch.TaskDependencies.OnIds(System.Collections.Generic.IEnumerable{System.String})
  - Microsoft.Azure.Batch.TaskDependencies.OnIds(System.String[])
  - Microsoft.Azure.Batch.TaskDependencies.OnTasks(Microsoft.Azure.Batch.CloudTask[])
  - Microsoft.Azure.Batch.TaskDependencies.OnTasks(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask})
  - Microsoft.Azure.Batch.TaskDependencies.TaskIdRanges
  - Microsoft.Azure.Batch.TaskDependencies.TaskIds
  langs:
  - csharp
  - vb
  name: TaskDependencies
  nameWithType: TaskDependencies
  fullName: Microsoft.Azure.Batch.TaskDependencies
  type: Class
  source:
    remote:
      path: src/Batch/Client/Src/Generated/TaskDependencies.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: TaskDependencies
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/TaskDependencies.cs
    startLine: 34
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nSpecifies the tasks that a <xref href=\"Microsoft.Azure.Batch.CloudTask\" data-throw-if-not-resolved=\"false\"></xref> depends on. The task will not be scheduled until all depended-on \ntasks have completed successfully.\n"
  example: []
  syntax:
    content: 'public class TaskDependencies : ITransportObjectProvider<TaskDependencies>, IPropertyMetadata, IModifiable, IReadOnly'
    content.vb: >-
      Public Class TaskDependencies
          Implements ITransportObjectProvider(Of TaskDependencies), IPropertyMetadata, IModifiable, IReadOnly
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Batch.TaskDependencies.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.TaskIdRange})
  commentId: M:Microsoft.Azure.Batch.TaskDependencies.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.TaskIdRange})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.TaskIdRange})'
  parent: Microsoft.Azure.Batch.TaskDependencies
  langs:
  - csharp
  - vb
  name: TaskDependencies(IEnumerable<String>, IEnumerable<TaskIdRange>)
  nameWithType: TaskDependencies.TaskDependencies(IEnumerable<String>, IEnumerable<TaskIdRange>)
  fullName: Microsoft.Azure.Batch.TaskDependencies.TaskDependencies(System.Collections.Generic.IEnumerable<System.String>, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.TaskIdRange>)
  type: Constructor
  source:
    remote:
      path: src/Batch/Client/Src/TaskDependencies.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/Batch/Client/Src/TaskDependencies.cs
    startLine: 30
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.Azure.Batch.TaskDependencies\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  remarks: >-
    This constructor provides the most general way of initializing a TaskDependencies object.

    In practice, most dependencies are on a single task, a list of task ids, or a single range of

    tasks. You can express these dependencies more clearly using <xref href="Microsoft.Azure.Batch.TaskDependencies.OnId(System.String)" data-throw-if-not-resolved="false"></xref>, <xref href="Microsoft.Azure.Batch.TaskDependencies.OnIds(System.String%5b%5d)" data-throw-if-not-resolved="false"></xref>,

    <xref href="Microsoft.Azure.Batch.TaskDependencies.OnTasks(Microsoft.Azure.Batch.CloudTask%5b%5d)" data-throw-if-not-resolved="false"></xref>, and <xref href="Microsoft.Azure.Batch.TaskDependencies.OnIdRange(System.Int32%2cSystem.Int32)" data-throw-if-not-resolved="false"></xref> methods.
  example: []
  syntax:
    content: public TaskDependencies(IEnumerable<string> taskIds, IEnumerable<TaskIdRange> taskIdRanges)
    content.vb: Public Sub New(taskIds As IEnumerable(Of String), taskIdRanges As IEnumerable(Of TaskIdRange))
    parameters:
    - id: taskIds
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The list of task ids that must complete before this task can be scheduled. null is treated as an empty list.
    - id: taskIdRanges
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.TaskIdRange}
      description: The list of task ranges that must complete before this task can be scheduled. null is treated as an empty list.
  overload: Microsoft.Azure.Batch.TaskDependencies.#ctor*
  nameWithType.vb: TaskDependencies.TaskDependencies(IEnumerable(Of String), IEnumerable(Of TaskIdRange))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.TaskDependencies.TaskDependencies(System.Collections.Generic.IEnumerable(Of System.String), System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.TaskIdRange))
  name.vb: TaskDependencies(IEnumerable(Of String), IEnumerable(Of TaskIdRange))
- uid: Microsoft.Azure.Batch.TaskDependencies.OnId(System.String)
  commentId: M:Microsoft.Azure.Batch.TaskDependencies.OnId(System.String)
  id: OnId(System.String)
  parent: Microsoft.Azure.Batch.TaskDependencies
  langs:
  - csharp
  - vb
  name: OnId(String)
  nameWithType: TaskDependencies.OnId(String)
  fullName: Microsoft.Azure.Batch.TaskDependencies.OnId(System.String)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/TaskDependencies.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: OnId
    path: src/azure-sdk-for-net/src/Batch/Client/Src/TaskDependencies.cs
    startLine: 51
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets a <xref href=\"Microsoft.Azure.Batch.TaskDependencies\" data-throw-if-not-resolved=\"false\"></xref> representing dependency on a single task.\n"
  example: []
  syntax:
    content: public static TaskDependencies OnId(string id)
    content.vb: Public Shared Function OnId(id As String) As TaskDependencies
    parameters:
    - id: id
      type: System.String
      description: The task to depend on.
    return:
      type: Microsoft.Azure.Batch.TaskDependencies
      description: A <xref href="Microsoft.Azure.Batch.TaskDependencies" data-throw-if-not-resolved="false"></xref> representing dependency on a single task.
  overload: Microsoft.Azure.Batch.TaskDependencies.OnId*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Azure.Batch.TaskDependencies.OnIds(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.Azure.Batch.TaskDependencies.OnIds(System.Collections.Generic.IEnumerable{System.String})
  id: OnIds(System.Collections.Generic.IEnumerable{System.String})
  parent: Microsoft.Azure.Batch.TaskDependencies
  langs:
  - csharp
  - vb
  name: OnIds(IEnumerable<String>)
  nameWithType: TaskDependencies.OnIds(IEnumerable<String>)
  fullName: Microsoft.Azure.Batch.TaskDependencies.OnIds(System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/TaskDependencies.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: OnIds
    path: src/azure-sdk-for-net/src/Batch/Client/Src/TaskDependencies.cs
    startLine: 61
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets a <xref href=\"Microsoft.Azure.Batch.TaskDependencies\" data-throw-if-not-resolved=\"false\"></xref> representing dependency on a list of task ids.\n"
  example: []
  syntax:
    content: public static TaskDependencies OnIds(IEnumerable<string> ids)
    content.vb: Public Shared Function OnIds(ids As IEnumerable(Of String)) As TaskDependencies
    parameters:
    - id: ids
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The tasks to depend on.
    return:
      type: Microsoft.Azure.Batch.TaskDependencies
      description: A <xref href="Microsoft.Azure.Batch.TaskDependencies" data-throw-if-not-resolved="false"></xref> representing dependency on the specified tasks.
  overload: Microsoft.Azure.Batch.TaskDependencies.OnIds*
  nameWithType.vb: TaskDependencies.OnIds(IEnumerable(Of String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.Batch.TaskDependencies.OnIds(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: OnIds(IEnumerable(Of String))
- uid: Microsoft.Azure.Batch.TaskDependencies.OnIds(System.String[])
  commentId: M:Microsoft.Azure.Batch.TaskDependencies.OnIds(System.String[])
  id: OnIds(System.String[])
  parent: Microsoft.Azure.Batch.TaskDependencies
  langs:
  - csharp
  - vb
  name: OnIds(String[])
  nameWithType: TaskDependencies.OnIds(String[])
  fullName: Microsoft.Azure.Batch.TaskDependencies.OnIds(System.String[])
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/TaskDependencies.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: OnIds
    path: src/azure-sdk-for-net/src/Batch/Client/Src/TaskDependencies.cs
    startLine: 71
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets a <xref href=\"Microsoft.Azure.Batch.TaskDependencies\" data-throw-if-not-resolved=\"false\"></xref> representing dependency on a list of task ids.\n"
  example: []
  syntax:
    content: public static TaskDependencies OnIds(params string[] ids)
    content.vb: Public Shared Function OnIds(ParamArray ids As String()) As TaskDependencies
    parameters:
    - id: ids
      type: System.String[]
      description: The tasks to depend on.
    return:
      type: Microsoft.Azure.Batch.TaskDependencies
      description: A <xref href="Microsoft.Azure.Batch.TaskDependencies" data-throw-if-not-resolved="false"></xref> representing dependency on the specified tasks.
  overload: Microsoft.Azure.Batch.TaskDependencies.OnIds*
  nameWithType.vb: TaskDependencies.OnIds(String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.Batch.TaskDependencies.OnIds(System.String())
  name.vb: OnIds(String())
- uid: Microsoft.Azure.Batch.TaskDependencies.OnTasks(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask})
  commentId: M:Microsoft.Azure.Batch.TaskDependencies.OnTasks(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask})
  id: OnTasks(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask})
  parent: Microsoft.Azure.Batch.TaskDependencies
  langs:
  - csharp
  - vb
  name: OnTasks(IEnumerable<CloudTask>)
  nameWithType: TaskDependencies.OnTasks(IEnumerable<CloudTask>)
  fullName: Microsoft.Azure.Batch.TaskDependencies.OnTasks(System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.CloudTask>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/TaskDependencies.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: OnTasks
    path: src/azure-sdk-for-net/src/Batch/Client/Src/TaskDependencies.cs
    startLine: 81
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets a <xref href=\"Microsoft.Azure.Batch.TaskDependencies\" data-throw-if-not-resolved=\"false\"></xref> representing dependency on a list of tasks.\n"
  example: []
  syntax:
    content: public static TaskDependencies OnTasks(IEnumerable<CloudTask> tasks)
    content.vb: Public Shared Function OnTasks(tasks As IEnumerable(Of CloudTask)) As TaskDependencies
    parameters:
    - id: tasks
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask}
      description: The tasks to depend on.
    return:
      type: Microsoft.Azure.Batch.TaskDependencies
      description: A <xref href="Microsoft.Azure.Batch.TaskDependencies" data-throw-if-not-resolved="false"></xref> representing dependency on the specified tasks.
  overload: Microsoft.Azure.Batch.TaskDependencies.OnTasks*
  nameWithType.vb: TaskDependencies.OnTasks(IEnumerable(Of CloudTask))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.Batch.TaskDependencies.OnTasks(System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.CloudTask))
  name.vb: OnTasks(IEnumerable(Of CloudTask))
- uid: Microsoft.Azure.Batch.TaskDependencies.OnTasks(Microsoft.Azure.Batch.CloudTask[])
  commentId: M:Microsoft.Azure.Batch.TaskDependencies.OnTasks(Microsoft.Azure.Batch.CloudTask[])
  id: OnTasks(Microsoft.Azure.Batch.CloudTask[])
  parent: Microsoft.Azure.Batch.TaskDependencies
  langs:
  - csharp
  - vb
  name: OnTasks(CloudTask[])
  nameWithType: TaskDependencies.OnTasks(CloudTask[])
  fullName: Microsoft.Azure.Batch.TaskDependencies.OnTasks(Microsoft.Azure.Batch.CloudTask[])
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/TaskDependencies.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: OnTasks
    path: src/azure-sdk-for-net/src/Batch/Client/Src/TaskDependencies.cs
    startLine: 91
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets a <xref href=\"Microsoft.Azure.Batch.TaskDependencies\" data-throw-if-not-resolved=\"false\"></xref> representing dependency on a list of tasks.\n"
  example: []
  syntax:
    content: public static TaskDependencies OnTasks(params CloudTask[] tasks)
    content.vb: Public Shared Function OnTasks(ParamArray tasks As CloudTask()) As TaskDependencies
    parameters:
    - id: tasks
      type: Microsoft.Azure.Batch.CloudTask[]
      description: The tasks to depend on.
    return:
      type: Microsoft.Azure.Batch.TaskDependencies
      description: A <xref href="Microsoft.Azure.Batch.TaskDependencies" data-throw-if-not-resolved="false"></xref> representing dependency on the specified tasks.
  overload: Microsoft.Azure.Batch.TaskDependencies.OnTasks*
  nameWithType.vb: TaskDependencies.OnTasks(CloudTask())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.Batch.TaskDependencies.OnTasks(Microsoft.Azure.Batch.CloudTask())
  name.vb: OnTasks(CloudTask())
- uid: Microsoft.Azure.Batch.TaskDependencies.OnIdRange(System.Int32,System.Int32)
  commentId: M:Microsoft.Azure.Batch.TaskDependencies.OnIdRange(System.Int32,System.Int32)
  id: OnIdRange(System.Int32,System.Int32)
  parent: Microsoft.Azure.Batch.TaskDependencies
  langs:
  - csharp
  - vb
  name: OnIdRange(Int32, Int32)
  nameWithType: TaskDependencies.OnIdRange(Int32, Int32)
  fullName: Microsoft.Azure.Batch.TaskDependencies.OnIdRange(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/TaskDependencies.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: OnIdRange
    path: src/azure-sdk-for-net/src/Batch/Client/Src/TaskDependencies.cs
    startLine: 102
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets a <xref href=\"Microsoft.Azure.Batch.TaskDependencies\" data-throw-if-not-resolved=\"false\"></xref> representing dependency on a range of task ids.\n"
  example: []
  syntax:
    content: public static TaskDependencies OnIdRange(int start, int end)
    content.vb: Public Shared Function OnIdRange(start As Integer, end As Integer) As TaskDependencies
    parameters:
    - id: start
      type: System.Int32
      description: The first task id in the range to depend on.
    - id: end
      type: System.Int32
      description: The last task id in the range to depend on.
    return:
      type: Microsoft.Azure.Batch.TaskDependencies
      description: A <xref href="Microsoft.Azure.Batch.TaskDependencies" data-throw-if-not-resolved="false"></xref> representing dependency on the specified range of tasks.
  overload: Microsoft.Azure.Batch.TaskDependencies.OnIdRange*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Azure.Batch.TaskDependencies.TaskIdRanges
  commentId: P:Microsoft.Azure.Batch.TaskDependencies.TaskIdRanges
  id: TaskIdRanges
  parent: Microsoft.Azure.Batch.TaskDependencies
  langs:
  - csharp
  - vb
  name: TaskIdRanges
  nameWithType: TaskDependencies.TaskIdRanges
  fullName: Microsoft.Azure.Batch.TaskDependencies.TaskIdRanges
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/TaskDependencies.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: TaskIdRanges
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/TaskDependencies.cs
    startLine: 54
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the list of task ranges that must complete before this task can be scheduled.\n"
  example: []
  syntax:
    content: public IReadOnlyList<TaskIdRange> TaskIdRanges { get; }
    content.vb: Public ReadOnly Property TaskIdRanges As IReadOnlyList(Of TaskIdRange)
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyList{Microsoft.Azure.Batch.TaskIdRange}
  overload: Microsoft.Azure.Batch.TaskDependencies.TaskIdRanges*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Batch.TaskDependencies.TaskIds
  commentId: P:Microsoft.Azure.Batch.TaskDependencies.TaskIds
  id: TaskIds
  parent: Microsoft.Azure.Batch.TaskDependencies
  langs:
  - csharp
  - vb
  name: TaskIds
  nameWithType: TaskDependencies.TaskIds
  fullName: Microsoft.Azure.Batch.TaskDependencies.TaskIds
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/TaskDependencies.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: TaskIds
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/TaskDependencies.cs
    startLine: 62
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the list of task ids that must complete before this task can be scheduled.\n"
  example: []
  syntax:
    content: public IReadOnlyList<string> TaskIds { get; }
    content.vb: Public ReadOnly Property TaskIds As IReadOnlyList(Of String)
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyList{System.String}
  overload: Microsoft.Azure.Batch.TaskDependencies.TaskIds*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Microsoft.Azure.Batch.CloudTask
  commentId: T:Microsoft.Azure.Batch.CloudTask
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: CloudTask
  nameWithType: CloudTask
  fullName: Microsoft.Azure.Batch.CloudTask
- uid: Microsoft.Azure.Batch
  commentId: N:Microsoft.Azure.Batch
  isExternal: false
  name: Microsoft.Azure.Batch
  nameWithType: Microsoft.Azure.Batch
  fullName: Microsoft.Azure.Batch
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Batch.TaskDependencies
  commentId: T:Microsoft.Azure.Batch.TaskDependencies
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: TaskDependencies
  nameWithType: TaskDependencies
  fullName: Microsoft.Azure.Batch.TaskDependencies
- uid: Microsoft.Azure.Batch.TaskDependencies.OnId(System.String)
  commentId: M:Microsoft.Azure.Batch.TaskDependencies.OnId(System.String)
- uid: Microsoft.Azure.Batch.TaskDependencies.OnIds(System.String[])
  commentId: M:Microsoft.Azure.Batch.TaskDependencies.OnIds(System.String[])
- uid: Microsoft.Azure.Batch.TaskDependencies.OnTasks(Microsoft.Azure.Batch.CloudTask[])
  commentId: M:Microsoft.Azure.Batch.TaskDependencies.OnTasks(Microsoft.Azure.Batch.CloudTask[])
- uid: Microsoft.Azure.Batch.TaskDependencies.OnIdRange(System.Int32,System.Int32)
  commentId: M:Microsoft.Azure.Batch.TaskDependencies.OnIdRange(System.Int32,System.Int32)
- uid: Microsoft.Azure.Batch.TaskDependencies.#ctor*
  commentId: Overload:Microsoft.Azure.Batch.TaskDependencies.#ctor
  isExternal: false
  name: TaskDependencies
  nameWithType: TaskDependencies.TaskDependencies
  fullName: Microsoft.Azure.Batch.TaskDependencies.TaskDependencies
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.TaskIdRange}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.TaskIdRange}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TaskIdRange>
  nameWithType: IEnumerable<TaskIdRange>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.TaskIdRange>
  nameWithType.vb: IEnumerable(Of TaskIdRange)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.TaskIdRange)
  name.vb: IEnumerable(Of TaskIdRange)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.TaskIdRange
    name: TaskIdRange
    nameWithType: TaskIdRange
    fullName: Microsoft.Azure.Batch.TaskIdRange
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.TaskIdRange
    name: TaskIdRange
    nameWithType: TaskIdRange
    fullName: Microsoft.Azure.Batch.TaskIdRange
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Azure.Batch.TaskDependencies.OnId*
  commentId: Overload:Microsoft.Azure.Batch.TaskDependencies.OnId
  isExternal: false
  name: OnId
  nameWithType: TaskDependencies.OnId
  fullName: Microsoft.Azure.Batch.TaskDependencies.OnId
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Azure.Batch.TaskDependencies.OnIds*
  commentId: Overload:Microsoft.Azure.Batch.TaskDependencies.OnIds
  isExternal: false
  name: OnIds
  nameWithType: TaskDependencies.OnIds
  fullName: Microsoft.Azure.Batch.TaskDependencies.OnIds
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Azure.Batch.TaskDependencies.OnTasks*
  commentId: Overload:Microsoft.Azure.Batch.TaskDependencies.OnTasks
  isExternal: false
  name: OnTasks
  nameWithType: TaskDependencies.OnTasks
  fullName: Microsoft.Azure.Batch.TaskDependencies.OnTasks
- uid: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<CloudTask>
  nameWithType: IEnumerable<CloudTask>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.CloudTask>
  nameWithType.vb: IEnumerable(Of CloudTask)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.CloudTask)
  name.vb: IEnumerable(Of CloudTask)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.CloudTask
    name: CloudTask
    nameWithType: CloudTask
    fullName: Microsoft.Azure.Batch.CloudTask
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.CloudTask
    name: CloudTask
    nameWithType: CloudTask
    fullName: Microsoft.Azure.Batch.CloudTask
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.CloudTask[]
  name: CloudTask[]
  nameWithType: CloudTask[]
  fullName: Microsoft.Azure.Batch.CloudTask[]
  nameWithType.vb: CloudTask()
  fullname.vb: Microsoft.Azure.Batch.CloudTask()
  name.vb: CloudTask()
  spec.csharp:
  - uid: Microsoft.Azure.Batch.CloudTask
    name: CloudTask
    nameWithType: CloudTask
    fullName: Microsoft.Azure.Batch.CloudTask
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Microsoft.Azure.Batch.CloudTask
    name: CloudTask
    nameWithType: CloudTask
    fullName: Microsoft.Azure.Batch.CloudTask
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Azure.Batch.TaskDependencies.OnIdRange*
  commentId: Overload:Microsoft.Azure.Batch.TaskDependencies.OnIdRange
  isExternal: false
  name: OnIdRange
  nameWithType: TaskDependencies.OnIdRange
  fullName: Microsoft.Azure.Batch.TaskDependencies.OnIdRange
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Azure.Batch.TaskDependencies.TaskIdRanges*
  commentId: Overload:Microsoft.Azure.Batch.TaskDependencies.TaskIdRanges
  isExternal: false
  name: TaskIdRanges
  nameWithType: TaskDependencies.TaskIdRanges
  fullName: Microsoft.Azure.Batch.TaskDependencies.TaskIdRanges
- uid: System.Collections.Generic.IReadOnlyList{Microsoft.Azure.Batch.TaskIdRange}
  commentId: T:System.Collections.Generic.IReadOnlyList{Microsoft.Azure.Batch.TaskIdRange}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<TaskIdRange>
  nameWithType: IReadOnlyList<TaskIdRange>
  fullName: System.Collections.Generic.IReadOnlyList<Microsoft.Azure.Batch.TaskIdRange>
  nameWithType.vb: IReadOnlyList(Of TaskIdRange)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of Microsoft.Azure.Batch.TaskIdRange)
  name.vb: IReadOnlyList(Of TaskIdRange)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.TaskIdRange
    name: TaskIdRange
    nameWithType: TaskIdRange
    fullName: Microsoft.Azure.Batch.TaskIdRange
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.TaskIdRange
    name: TaskIdRange
    nameWithType: TaskIdRange
    fullName: Microsoft.Azure.Batch.TaskIdRange
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.TaskDependencies.TaskIds*
  commentId: Overload:Microsoft.Azure.Batch.TaskDependencies.TaskIds
  isExternal: false
  name: TaskIds
  nameWithType: TaskDependencies.TaskIds
  fullName: Microsoft.Azure.Batch.TaskDependencies.TaskIds
- uid: System.Collections.Generic.IReadOnlyList{System.String}
  commentId: T:System.Collections.Generic.IReadOnlyList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<String>
  nameWithType: IReadOnlyList<String>
  fullName: System.Collections.Generic.IReadOnlyList<System.String>
  nameWithType.vb: IReadOnlyList(Of String)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of System.String)
  name.vb: IReadOnlyList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
