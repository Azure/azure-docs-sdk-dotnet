### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Batch.NodeFile
  commentId: T:Microsoft.Azure.Batch.NodeFile
  id: NodeFile
  parent: Microsoft.Azure.Batch
  children:
  - Microsoft.Azure.Batch.NodeFile.CopyToStream(System.IO.Stream,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.NodeFile.CopyToStreamAsync(System.IO.Stream,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.NodeFile.CustomBehaviors
  - Microsoft.Azure.Batch.NodeFile.Delete(System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.NodeFile.DeleteAsync(System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.NodeFile.IsDirectory
  - Microsoft.Azure.Batch.NodeFile.Name
  - Microsoft.Azure.Batch.NodeFile.Properties
  - Microsoft.Azure.Batch.NodeFile.ReadAsString(System.Text.Encoding,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.NodeFile.ReadAsStringAsync(System.Text.Encoding,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.NodeFile.Refresh(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.NodeFile.RefreshAsync(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.NodeFile.Url
  langs:
  - csharp
  - vb
  name: NodeFile
  nameWithType: NodeFile
  fullName: Microsoft.Azure.Batch.NodeFile
  type: Class
  source:
    remote:
      path: src/Batch/Client/Src/NodeFile.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: NodeFile
    path: src/azure-sdk-for-net/src/Batch/Client/Src/NodeFile.cs
    startLine: 28
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nExposes methods and properties to access files from Nodes or Tasks.\n"
  example: []
  syntax:
    content: 'public abstract class NodeFile : IInheritedBehaviors'
    content.vb: >-
      Public MustInherit Class NodeFile
          Implements IInheritedBehaviors
  inheritance:
  - System.Object
  implements:
  - Microsoft.Azure.Batch.IInheritedBehaviors
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.Azure.Batch.NodeFile.CustomBehaviors
  commentId: P:Microsoft.Azure.Batch.NodeFile.CustomBehaviors
  id: CustomBehaviors
  parent: Microsoft.Azure.Batch.NodeFile
  langs:
  - csharp
  - vb
  name: CustomBehaviors
  nameWithType: NodeFile.CustomBehaviors
  fullName: Microsoft.Azure.Batch.NodeFile.CustomBehaviors
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/NodeFile.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CustomBehaviors
    path: src/azure-sdk-for-net/src/Batch/Client/Src/NodeFile.cs
    startLine: 58
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets a list of behaviors that modify or customize requests to the Batch service\nmade via this <xref href=\"Microsoft.Azure.Batch.NodeFile\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\n<p>These behaviors are inherited by child objects.</p>\n<p>Modifications are applied in the order of the collection. The last write wins.</p>\n"
  example: []
  syntax:
    content: public IList<BatchClientBehavior> CustomBehaviors { get; set; }
    content.vb: Public Property CustomBehaviors As IList(Of BatchClientBehavior)
    parameters: []
    return:
      type: System.Collections.Generic.IList{Microsoft.Azure.Batch.BatchClientBehavior}
  overload: Microsoft.Azure.Batch.NodeFile.CustomBehaviors*
  implements:
  - Microsoft.Azure.Batch.IInheritedBehaviors.CustomBehaviors
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.NodeFile.IsDirectory
  commentId: P:Microsoft.Azure.Batch.NodeFile.IsDirectory
  id: IsDirectory
  parent: Microsoft.Azure.Batch.NodeFile
  langs:
  - csharp
  - vb
  name: IsDirectory
  nameWithType: NodeFile.IsDirectory
  fullName: Microsoft.Azure.Batch.NodeFile.IsDirectory
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/NodeFile.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: IsDirectory
    path: src/azure-sdk-for-net/src/Batch/Client/Src/NodeFile.cs
    startLine: 67
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the value that indicates whether the file is a directory.\n"
  example: []
  syntax:
    content: public bool ? IsDirectory { get; }
    content.vb: Public ReadOnly Property IsDirectory As Boolean?
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
  overload: Microsoft.Azure.Batch.NodeFile.IsDirectory*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Batch.NodeFile.Name
  commentId: P:Microsoft.Azure.Batch.NodeFile.Name
  id: Name
  parent: Microsoft.Azure.Batch.NodeFile
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: NodeFile.Name
  fullName: Microsoft.Azure.Batch.NodeFile.Name
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/NodeFile.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Name
    path: src/azure-sdk-for-net/src/Batch/Client/Src/NodeFile.cs
    startLine: 78
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the name of the file.\n"
  example: []
  syntax:
    content: public string Name { get; }
    content.vb: Public ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Batch.NodeFile.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Batch.NodeFile.Properties
  commentId: P:Microsoft.Azure.Batch.NodeFile.Properties
  id: Properties
  parent: Microsoft.Azure.Batch.NodeFile
  langs:
  - csharp
  - vb
  name: Properties
  nameWithType: NodeFile.Properties
  fullName: Microsoft.Azure.Batch.NodeFile.Properties
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/NodeFile.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Properties
    path: src/azure-sdk-for-net/src/Batch/Client/Src/NodeFile.cs
    startLine: 89
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the FileProperties of the file.\n"
  example: []
  syntax:
    content: public FileProperties Properties { get; }
    content.vb: Public ReadOnly Property Properties As FileProperties
    parameters: []
    return:
      type: Microsoft.Azure.Batch.FileProperties
  overload: Microsoft.Azure.Batch.NodeFile.Properties*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Batch.NodeFile.Url
  commentId: P:Microsoft.Azure.Batch.NodeFile.Url
  id: Url
  parent: Microsoft.Azure.Batch.NodeFile
  langs:
  - csharp
  - vb
  name: Url
  nameWithType: NodeFile.Url
  fullName: Microsoft.Azure.Batch.NodeFile.Url
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/NodeFile.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Url
    path: src/azure-sdk-for-net/src/Batch/Client/Src/NodeFile.cs
    startLine: 101
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the URL of the file.\n"
  example: []
  syntax:
    content: public string Url { get; }
    content.vb: Public ReadOnly Property Url As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Batch.NodeFile.Url*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Batch.NodeFile.ReadAsStringAsync(System.Text.Encoding,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.NodeFile.ReadAsStringAsync(System.Text.Encoding,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: ReadAsStringAsync(System.Text.Encoding,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.NodeFile
  langs:
  - csharp
  - vb
  name: ReadAsStringAsync(Encoding, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: NodeFile.ReadAsStringAsync(Encoding, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.NodeFile.ReadAsStringAsync(System.Text.Encoding, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/NodeFile.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ReadAsStringAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/NodeFile.cs
    startLine: 116
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nBegins asynchronous call to return the contents of the file as a string.\n"
  example: []
  syntax:
    content: public Task<string> ReadAsStringAsync(Encoding encoding = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function ReadAsStringAsync(encoding As Encoding = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of String)
    parameters:
    - id: encoding
      type: System.Text.Encoding
      description: The encoding used to interpret the file data. If no value or null is specified, UTF8 is used.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of BatchClientBehavior instances that are applied after the CustomBehaviors on the current object.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> object that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.NodeFile.ReadAsStringAsync*
  nameWithType.vb: NodeFile.ReadAsStringAsync(Encoding, IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.NodeFile.ReadAsStringAsync(System.Text.Encoding, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: ReadAsStringAsync(Encoding, IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.NodeFile.ReadAsString(System.Text.Encoding,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.NodeFile.ReadAsString(System.Text.Encoding,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: ReadAsString(System.Text.Encoding,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.NodeFile
  langs:
  - csharp
  - vb
  name: ReadAsString(Encoding, IEnumerable<BatchClientBehavior>)
  nameWithType: NodeFile.ReadAsString(Encoding, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.NodeFile.ReadAsString(System.Text.Encoding, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/NodeFile.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ReadAsString
    path: src/azure-sdk-for-net/src/Batch/Client/Src/NodeFile.cs
    startLine: 144
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nBlocking call to return the contents of the file as a string.\n"
  example: []
  syntax:
    content: public string ReadAsString(Encoding encoding = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Function ReadAsString(encoding As Encoding = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing) As String
    parameters:
    - id: encoding
      type: System.Text.Encoding
      description: The encoding used to interpret the file data. If no value or null is specified, UTF8 is used.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of BatchClientBehavior instances that are applied after the CustomBehaviors on the current object.
    return:
      type: System.String
      description: A string containing the contents of the file.
  overload: Microsoft.Azure.Batch.NodeFile.ReadAsString*
  nameWithType.vb: NodeFile.ReadAsString(Encoding, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.NodeFile.ReadAsString(System.Text.Encoding, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: ReadAsString(Encoding, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.NodeFile.CopyToStreamAsync(System.IO.Stream,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.NodeFile.CopyToStreamAsync(System.IO.Stream,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: CopyToStreamAsync(System.IO.Stream,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.NodeFile
  langs:
  - csharp
  - vb
  name: CopyToStreamAsync(Stream, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: NodeFile.CopyToStreamAsync(Stream, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.NodeFile.CopyToStreamAsync(System.IO.Stream, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/NodeFile.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CopyToStreamAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/NodeFile.cs
    startLine: 162
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nBegins an asynchronous call to copy the contents of the file into the given Stream.\n"
  example: []
  syntax:
    content: public abstract Task CopyToStreamAsync(Stream stream, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public MustOverride Function CopyToStreamAsync(stream As Stream, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: stream
      type: System.IO.Stream
      description: The stream into which the contents of the file are copied.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of BatchClientBehavior instances that are applied after the CustomBehaviors on the current object.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> object that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.NodeFile.CopyToStreamAsync*
  nameWithType.vb: NodeFile.CopyToStreamAsync(Stream, IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.Azure.Batch.NodeFile.CopyToStreamAsync(System.IO.Stream, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: CopyToStreamAsync(Stream, IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.NodeFile.CopyToStream(System.IO.Stream,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.NodeFile.CopyToStream(System.IO.Stream,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: CopyToStream(System.IO.Stream,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.NodeFile
  langs:
  - csharp
  - vb
  name: CopyToStream(Stream, IEnumerable<BatchClientBehavior>)
  nameWithType: NodeFile.CopyToStream(Stream, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.NodeFile.CopyToStream(System.IO.Stream, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/NodeFile.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CopyToStream
    path: src/azure-sdk-for-net/src/Batch/Client/Src/NodeFile.cs
    startLine: 169
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nBlocking call to copy the contents of the file into the given Stream.\n"
  example: []
  syntax:
    content: public virtual void CopyToStream(Stream stream, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Overridable Sub CopyToStream(stream As Stream, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: The stream into which the contents of the file are copied.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of BatchClientBehavior instances that are applied after the CustomBehaviors on the current object.
  overload: Microsoft.Azure.Batch.NodeFile.CopyToStream*
  nameWithType.vb: NodeFile.CopyToStream(Stream, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.Azure.Batch.NodeFile.CopyToStream(System.IO.Stream, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: CopyToStream(Stream, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.NodeFile.DeleteAsync(System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.NodeFile.DeleteAsync(System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: DeleteAsync(System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.NodeFile
  langs:
  - csharp
  - vb
  name: DeleteAsync(Nullable<Boolean>, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: NodeFile.DeleteAsync(Nullable<Boolean>, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.NodeFile.DeleteAsync(System.Nullable<System.Boolean>, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/NodeFile.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DeleteAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/NodeFile.cs
    startLine: 188
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nBegins an asynchronous call to delete the file.\n"
  example: []
  syntax:
    content: public abstract Task DeleteAsync(bool ? recursive = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public MustOverride Function DeleteAsync(recursive As Boolean? = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: recursive
      type: System.Nullable{System.Boolean}
      description: "\nIf the file-path parameter represents a directory instead of a file, you can set the optional \nrecursive parameter to true to delete the directory and all of the files and subdirectories in it. If recursive is false \nthen the directory must be empty or deletion will fail.\n"
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of BatchClientBehavior instances that are applied after the CustomBehaviors on the current object.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> object that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.NodeFile.DeleteAsync*
  nameWithType.vb: NodeFile.DeleteAsync(Nullable(Of Boolean), IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.Azure.Batch.NodeFile.DeleteAsync(System.Nullable(Of System.Boolean), System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: DeleteAsync(Nullable(Of Boolean), IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.NodeFile.Delete(System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.NodeFile.Delete(System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: Delete(System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.NodeFile
  langs:
  - csharp
  - vb
  name: Delete(Nullable<Boolean>, IEnumerable<BatchClientBehavior>)
  nameWithType: NodeFile.Delete(Nullable<Boolean>, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.NodeFile.Delete(System.Nullable<System.Boolean>, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/NodeFile.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Delete
    path: src/azure-sdk-for-net/src/Batch/Client/Src/NodeFile.cs
    startLine: 199
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nBlocking call to delete the file.\n"
  example: []
  syntax:
    content: public virtual void Delete(bool ? recursive = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Overridable Sub Delete(recursive As Boolean? = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: recursive
      type: System.Nullable{System.Boolean}
      description: "\nIf the file-path parameter represents a directory instead of a file, you can set the optional \nrecursive parameter to true to delete the directory and all of the files and subdirectories in it. If recursive is false \nthen the directory must be empty or deletion will fail.\n"
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of BatchClientBehavior instances that are applied after the CustomBehaviors on the current object.
  overload: Microsoft.Azure.Batch.NodeFile.Delete*
  nameWithType.vb: NodeFile.Delete(Nullable(Of Boolean), IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.Azure.Batch.NodeFile.Delete(System.Nullable(Of System.Boolean), System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: Delete(Nullable(Of Boolean), IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.NodeFile.RefreshAsync(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.NodeFile.RefreshAsync(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: RefreshAsync(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.NodeFile
  langs:
  - csharp
  - vb
  name: RefreshAsync(DetailLevel, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: NodeFile.RefreshAsync(DetailLevel, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.NodeFile.RefreshAsync(Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/NodeFile.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: RefreshAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/NodeFile.cs
    startLine: 218
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nRefreshes the current <xref href=\"Microsoft.Azure.Batch.NodeFile\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public abstract Task RefreshAsync(DetailLevel detailLevel = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public MustOverride Function RefreshAsync(detailLevel As DetailLevel = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: detailLevel
      type: Microsoft.Azure.Batch.DetailLevel
      description: The detail level for the refresh.  If a detail level which omits the <xref href="Microsoft.Azure.Batch.NodeFile.Name" data-throw-if-not-resolved="false"></xref> property is specified, refresh will fail.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.NodeFile.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous refresh operation.
  overload: Microsoft.Azure.Batch.NodeFile.RefreshAsync*
  nameWithType.vb: NodeFile.RefreshAsync(DetailLevel, IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.Azure.Batch.NodeFile.RefreshAsync(Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: RefreshAsync(DetailLevel, IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.NodeFile.Refresh(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.NodeFile.Refresh(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: Refresh(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.NodeFile
  langs:
  - csharp
  - vb
  name: Refresh(DetailLevel, IEnumerable<BatchClientBehavior>)
  nameWithType: NodeFile.Refresh(DetailLevel, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.NodeFile.Refresh(Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/NodeFile.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Refresh
    path: src/azure-sdk-for-net/src/Batch/Client/Src/NodeFile.cs
    startLine: 225
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nRefreshes the current <xref href=\"Microsoft.Azure.Batch.NodeFile\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public abstract void Refresh(DetailLevel detailLevel = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public MustOverride Sub Refresh(detailLevel As DetailLevel = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: detailLevel
      type: Microsoft.Azure.Batch.DetailLevel
      description: The detail level for the refresh.  If a detail level which omits the <xref href="Microsoft.Azure.Batch.NodeFile.Name" data-throw-if-not-resolved="false"></xref> property is specified, refresh will fail.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.NodeFile.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.NodeFile.Refresh*
  nameWithType.vb: NodeFile.Refresh(DetailLevel, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.Azure.Batch.NodeFile.Refresh(Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: Refresh(DetailLevel, IEnumerable(Of BatchClientBehavior))
references:
- uid: Microsoft.Azure.Batch
  commentId: N:Microsoft.Azure.Batch
  isExternal: false
  name: Microsoft.Azure.Batch
  nameWithType: Microsoft.Azure.Batch
  fullName: Microsoft.Azure.Batch
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Azure.Batch.IInheritedBehaviors
  commentId: T:Microsoft.Azure.Batch.IInheritedBehaviors
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: IInheritedBehaviors
  nameWithType: IInheritedBehaviors
  fullName: Microsoft.Azure.Batch.IInheritedBehaviors
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Batch.NodeFile
  commentId: T:Microsoft.Azure.Batch.NodeFile
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: NodeFile
  nameWithType: NodeFile
  fullName: Microsoft.Azure.Batch.NodeFile
- uid: Microsoft.Azure.Batch.NodeFile.CustomBehaviors*
  commentId: Overload:Microsoft.Azure.Batch.NodeFile.CustomBehaviors
  isExternal: false
  name: CustomBehaviors
  nameWithType: NodeFile.CustomBehaviors
  fullName: Microsoft.Azure.Batch.NodeFile.CustomBehaviors
- uid: Microsoft.Azure.Batch.IInheritedBehaviors.CustomBehaviors
  commentId: P:Microsoft.Azure.Batch.IInheritedBehaviors.CustomBehaviors
  parent: Microsoft.Azure.Batch.IInheritedBehaviors
  isExternal: false
  name: CustomBehaviors
  nameWithType: IInheritedBehaviors.CustomBehaviors
  fullName: Microsoft.Azure.Batch.IInheritedBehaviors.CustomBehaviors
- uid: System.Collections.Generic.IList{Microsoft.Azure.Batch.BatchClientBehavior}
  commentId: T:System.Collections.Generic.IList{Microsoft.Azure.Batch.BatchClientBehavior}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<BatchClientBehavior>
  nameWithType: IList<BatchClientBehavior>
  fullName: System.Collections.Generic.IList<Microsoft.Azure.Batch.BatchClientBehavior>
  nameWithType.vb: IList(Of BatchClientBehavior)
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.Azure.Batch.BatchClientBehavior)
  name.vb: IList(Of BatchClientBehavior)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.BatchClientBehavior
    name: BatchClientBehavior
    nameWithType: BatchClientBehavior
    fullName: Microsoft.Azure.Batch.BatchClientBehavior
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.BatchClientBehavior
    name: BatchClientBehavior
    nameWithType: BatchClientBehavior
    fullName: Microsoft.Azure.Batch.BatchClientBehavior
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Azure.Batch.NodeFile.IsDirectory*
  commentId: Overload:Microsoft.Azure.Batch.NodeFile.IsDirectory
  isExternal: false
  name: IsDirectory
  nameWithType: NodeFile.IsDirectory
  fullName: Microsoft.Azure.Batch.NodeFile.IsDirectory
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullname.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.NodeFile.Name*
  commentId: Overload:Microsoft.Azure.Batch.NodeFile.Name
  isExternal: false
  name: Name
  nameWithType: NodeFile.Name
  fullName: Microsoft.Azure.Batch.NodeFile.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Azure.Batch.NodeFile.Properties*
  commentId: Overload:Microsoft.Azure.Batch.NodeFile.Properties
  isExternal: false
  name: Properties
  nameWithType: NodeFile.Properties
  fullName: Microsoft.Azure.Batch.NodeFile.Properties
- uid: Microsoft.Azure.Batch.FileProperties
  commentId: T:Microsoft.Azure.Batch.FileProperties
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: FileProperties
  nameWithType: FileProperties
  fullName: Microsoft.Azure.Batch.FileProperties
- uid: Microsoft.Azure.Batch.NodeFile.Url*
  commentId: Overload:Microsoft.Azure.Batch.NodeFile.Url
  isExternal: false
  name: Url
  nameWithType: NodeFile.Url
  fullName: Microsoft.Azure.Batch.NodeFile.Url
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.Azure.Batch.NodeFile.ReadAsStringAsync*
  commentId: Overload:Microsoft.Azure.Batch.NodeFile.ReadAsStringAsync
  isExternal: false
  name: ReadAsStringAsync
  nameWithType: NodeFile.ReadAsStringAsync
  fullName: Microsoft.Azure.Batch.NodeFile.ReadAsStringAsync
- uid: System.Text.Encoding
  commentId: T:System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<BatchClientBehavior>
  nameWithType: IEnumerable<BatchClientBehavior>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>
  nameWithType.vb: IEnumerable(Of BatchClientBehavior)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior)
  name.vb: IEnumerable(Of BatchClientBehavior)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.BatchClientBehavior
    name: BatchClientBehavior
    nameWithType: BatchClientBehavior
    fullName: Microsoft.Azure.Batch.BatchClientBehavior
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.BatchClientBehavior
    name: BatchClientBehavior
    nameWithType: BatchClientBehavior
    fullName: Microsoft.Azure.Batch.BatchClientBehavior
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullname.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Text
  commentId: N:System.Text
  isExternal: false
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.NodeFile.ReadAsString*
  commentId: Overload:Microsoft.Azure.Batch.NodeFile.ReadAsString
  isExternal: false
  name: ReadAsString
  nameWithType: NodeFile.ReadAsString
  fullName: Microsoft.Azure.Batch.NodeFile.ReadAsString
- uid: Microsoft.Azure.Batch.NodeFile.CopyToStreamAsync*
  commentId: Overload:Microsoft.Azure.Batch.NodeFile.CopyToStreamAsync
  isExternal: false
  name: CopyToStreamAsync
  nameWithType: NodeFile.CopyToStreamAsync
  fullName: Microsoft.Azure.Batch.NodeFile.CopyToStreamAsync
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Microsoft.Azure.Batch.NodeFile.CopyToStream*
  commentId: Overload:Microsoft.Azure.Batch.NodeFile.CopyToStream
  isExternal: false
  name: CopyToStream
  nameWithType: NodeFile.CopyToStream
  fullName: Microsoft.Azure.Batch.NodeFile.CopyToStream
- uid: Microsoft.Azure.Batch.NodeFile.DeleteAsync*
  commentId: Overload:Microsoft.Azure.Batch.NodeFile.DeleteAsync
  isExternal: false
  name: DeleteAsync
  nameWithType: NodeFile.DeleteAsync
  fullName: Microsoft.Azure.Batch.NodeFile.DeleteAsync
- uid: Microsoft.Azure.Batch.NodeFile.Delete*
  commentId: Overload:Microsoft.Azure.Batch.NodeFile.Delete
  isExternal: false
  name: Delete
  nameWithType: NodeFile.Delete
  fullName: Microsoft.Azure.Batch.NodeFile.Delete
- uid: Microsoft.Azure.Batch.NodeFile.Name
  commentId: P:Microsoft.Azure.Batch.NodeFile.Name
- uid: Microsoft.Azure.Batch.BatchClientBehavior
  commentId: T:Microsoft.Azure.Batch.BatchClientBehavior
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: BatchClientBehavior
  nameWithType: BatchClientBehavior
  fullName: Microsoft.Azure.Batch.BatchClientBehavior
- uid: Microsoft.Azure.Batch.NodeFile.CustomBehaviors
  commentId: P:Microsoft.Azure.Batch.NodeFile.CustomBehaviors
- uid: Microsoft.Azure.Batch.NodeFile.RefreshAsync*
  commentId: Overload:Microsoft.Azure.Batch.NodeFile.RefreshAsync
  isExternal: false
  name: RefreshAsync
  nameWithType: NodeFile.RefreshAsync
  fullName: Microsoft.Azure.Batch.NodeFile.RefreshAsync
- uid: Microsoft.Azure.Batch.DetailLevel
  commentId: T:Microsoft.Azure.Batch.DetailLevel
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: DetailLevel
  nameWithType: DetailLevel
  fullName: Microsoft.Azure.Batch.DetailLevel
- uid: Microsoft.Azure.Batch.NodeFile.Refresh*
  commentId: Overload:Microsoft.Azure.Batch.NodeFile.Refresh
  isExternal: false
  name: Refresh
  nameWithType: NodeFile.Refresh
  fullName: Microsoft.Azure.Batch.NodeFile.Refresh
