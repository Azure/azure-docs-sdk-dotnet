### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Batch.IPagedEnumerator`1
  commentId: T:Microsoft.Azure.Batch.IPagedEnumerator`1
  id: IPagedEnumerator`1
  parent: Microsoft.Azure.Batch
  children:
  - Microsoft.Azure.Batch.IPagedEnumerator`1.Current
  - Microsoft.Azure.Batch.IPagedEnumerator`1.MoveNextAsync(System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.IPagedEnumerator`1.ResetAsync(System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IPagedEnumerator<T>
  nameWithType: IPagedEnumerator<T>
  fullName: Microsoft.Azure.Batch.IPagedEnumerator<T>
  type: Interface
  source:
    remote:
      path: src/Batch/Client/Src/IPagedEnumerator.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: IPagedEnumerator
    path: src/azure-sdk-for-net/src/Batch/Client/Src/IPagedEnumerator.cs
    startLine: 34
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nAn enumerator which exposes an asynchronous mechanism for iteration.\n\nEnumerator instances are not threadsafe.\n\nEach enumerator fetches the collection from the server. \nAs a consequence, each enumerator can see different data (collection size, contents, etc.).\n\nCare should be taken to avoid multiple retrievals of the data from the server via casual use of foreach/ForeachAsync and other collection operations.\n\n"
  example: []
  syntax:
    content: 'public interface IPagedEnumerator<T> : IDisposable'
    content.vb: >-
      Public Interface IPagedEnumerator(Of T)
          Inherits IDisposable
    typeParameters:
    - id: T
      description: The type of the enumerator.
  inheritedMembers:
  - System.IDisposable.Dispose
  nameWithType.vb: IPagedEnumerator(Of T)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Microsoft.Azure.Batch.IPagedEnumerator(Of T)
  name.vb: IPagedEnumerator(Of T)
- uid: Microsoft.Azure.Batch.IPagedEnumerator`1.Current
  commentId: P:Microsoft.Azure.Batch.IPagedEnumerator`1.Current
  id: Current
  parent: Microsoft.Azure.Batch.IPagedEnumerator`1
  langs:
  - csharp
  - vb
  name: Current
  nameWithType: IPagedEnumerator<T>.Current
  fullName: Microsoft.Azure.Batch.IPagedEnumerator<T>.Current
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/IPagedEnumerator.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Current
    path: src/azure-sdk-for-net/src/Batch/Client/Src/IPagedEnumerator.cs
    startLine: 39
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the element in the collection at the current position of the enumerator.\n"
  example: []
  syntax:
    content: T Current { get; }
    content.vb: ReadOnly Property Current As T
    parameters: []
    return:
      type: '{T}'
  overload: Microsoft.Azure.Batch.IPagedEnumerator`1.Current*
  nameWithType.vb: IPagedEnumerator(Of T).Current
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Microsoft.Azure.Batch.IPagedEnumerator(Of T).Current
- uid: Microsoft.Azure.Batch.IPagedEnumerator`1.MoveNextAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.IPagedEnumerator`1.MoveNextAsync(System.Threading.CancellationToken)
  id: MoveNextAsync(System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.IPagedEnumerator`1
  langs:
  - csharp
  - vb
  name: MoveNextAsync(CancellationToken)
  nameWithType: IPagedEnumerator<T>.MoveNextAsync(CancellationToken)
  fullName: Microsoft.Azure.Batch.IPagedEnumerator<T>.MoveNextAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/IPagedEnumerator.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: MoveNextAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/IPagedEnumerator.cs
    startLine: 46
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nBegins an asynchronous call to advance the enumerator to the next element of the collection.\n"
  example: []
  syntax:
    content: Task<bool> MoveNextAsync(CancellationToken cancellationToken = null)
    content.vb: Function MoveNextAsync(cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> object that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.IPagedEnumerator`1.MoveNextAsync*
  nameWithType.vb: IPagedEnumerator(Of T).MoveNextAsync(CancellationToken)
  fullName.vb: Microsoft.Azure.Batch.IPagedEnumerator(Of T).MoveNextAsync(System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.IPagedEnumerator`1.ResetAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.IPagedEnumerator`1.ResetAsync(System.Threading.CancellationToken)
  id: ResetAsync(System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.IPagedEnumerator`1
  langs:
  - csharp
  - vb
  name: ResetAsync(CancellationToken)
  nameWithType: IPagedEnumerator<T>.ResetAsync(CancellationToken)
  fullName: Microsoft.Azure.Batch.IPagedEnumerator<T>.ResetAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/IPagedEnumerator.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ResetAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/IPagedEnumerator.cs
    startLine: 53
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nBegins an asynchronous call to set the enumerator to its initial position, which is before the first element in the collection.\n"
  example: []
  syntax:
    content: Task ResetAsync(CancellationToken cancellationToken = null)
    content.vb: Function ResetAsync(cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> object that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.IPagedEnumerator`1.ResetAsync*
  nameWithType.vb: IPagedEnumerator(Of T).ResetAsync(CancellationToken)
  fullName.vb: Microsoft.Azure.Batch.IPagedEnumerator(Of T).ResetAsync(System.Threading.CancellationToken)
references:
- uid: Microsoft.Azure.Batch
  commentId: N:Microsoft.Azure.Batch
  isExternal: false
  name: Microsoft.Azure.Batch
  nameWithType: Microsoft.Azure.Batch
  fullName: Microsoft.Azure.Batch
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Batch.IPagedEnumerator`1.Current*
  commentId: Overload:Microsoft.Azure.Batch.IPagedEnumerator`1.Current
  isExternal: false
  name: Current
  nameWithType: IPagedEnumerator<T>.Current
  fullName: Microsoft.Azure.Batch.IPagedEnumerator<T>.Current
  nameWithType.vb: IPagedEnumerator(Of T).Current
  fullname.vb: Microsoft.Azure.Batch.IPagedEnumerator(Of T).Current
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  commentId: '!:T'
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.Azure.Batch.IPagedEnumerator`1.MoveNextAsync*
  commentId: Overload:Microsoft.Azure.Batch.IPagedEnumerator`1.MoveNextAsync
  isExternal: false
  name: MoveNextAsync
  nameWithType: IPagedEnumerator.MoveNextAsync
  fullName: Microsoft.Azure.Batch.IPagedEnumerator.MoveNextAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullname.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.IPagedEnumerator`1.ResetAsync*
  commentId: Overload:Microsoft.Azure.Batch.IPagedEnumerator`1.ResetAsync
  isExternal: false
  name: ResetAsync
  nameWithType: IPagedEnumerator.ResetAsync
  fullName: Microsoft.Azure.Batch.IPagedEnumerator.ResetAsync
