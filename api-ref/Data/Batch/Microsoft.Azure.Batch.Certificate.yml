### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Batch.Certificate
  commentId: T:Microsoft.Azure.Batch.Certificate
  id: Certificate
  parent: Microsoft.Azure.Batch
  children:
  - Microsoft.Azure.Batch.Certificate.CancelDelete(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.Certificate.CancelDeleteAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.Certificate.CertificateFormat
  - Microsoft.Azure.Batch.Certificate.Commit(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.Certificate.CommitAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.Certificate.CustomBehaviors
  - Microsoft.Azure.Batch.Certificate.Data
  - Microsoft.Azure.Batch.Certificate.Delete(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.Certificate.DeleteAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.Certificate.DeleteCertificateError
  - Microsoft.Azure.Batch.Certificate.Password
  - Microsoft.Azure.Batch.Certificate.PreviousState
  - Microsoft.Azure.Batch.Certificate.PreviousStateTransitionTime
  - Microsoft.Azure.Batch.Certificate.PublicData
  - Microsoft.Azure.Batch.Certificate.Refresh(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.Certificate.RefreshAsync(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.Certificate.State
  - Microsoft.Azure.Batch.Certificate.StateTransitionTime
  - Microsoft.Azure.Batch.Certificate.Thumbprint
  - Microsoft.Azure.Batch.Certificate.ThumbprintAlgorithm
  - Microsoft.Azure.Batch.Certificate.Url
  langs:
  - csharp
  - vb
  name: Certificate
  nameWithType: Certificate
  fullName: Microsoft.Azure.Batch.Certificate
  type: Class
  source:
    remote:
      path: src/Batch/Client/Src/Generated/Certificate.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Certificate
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/Certificate.cs
    startLine: 33
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nA certificate that can be installed on compute nodes and can be used to authenticate operations on a node.\n"
  example: []
  syntax:
    content: 'public class Certificate : IRefreshable, ITransportObjectProvider<CertificateAddParameter>, IInheritedBehaviors, IPropertyMetadata, IModifiable, IReadOnly'
    content.vb: >-
      Public Class Certificate
          Implements IRefreshable, ITransportObjectProvider(Of CertificateAddParameter), IInheritedBehaviors, IPropertyMetadata, IModifiable, IReadOnly
  inheritance:
  - System.Object
  implements:
  - Microsoft.Azure.Batch.IRefreshable
  - Microsoft.Azure.Batch.IInheritedBehaviors
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Batch.Certificate.CommitAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.Certificate.CommitAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: CommitAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.Certificate
  langs:
  - csharp
  - vb
  name: CommitAsync(IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: Certificate.CommitAsync(IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.Certificate.CommitAsync(System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/Certificate.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CommitAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Certificate.cs
    startLine: 49
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nAdds the certificate to the Batch account.\n"
  remarks: The commit operation runs asynchronously.
  example: []
  syntax:
    content: public Task CommitAsync(IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function CommitAsync(additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.Certificate.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.Certificate.CommitAsync*
  nameWithType.vb: Certificate.CommitAsync(IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.Certificate.CommitAsync(System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: CommitAsync(IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.Certificate.Commit(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.Certificate.Commit(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: Commit(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.Certificate
  langs:
  - csharp
  - vb
  name: Commit(IEnumerable<BatchClientBehavior>)
  nameWithType: Certificate.Commit(IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.Certificate.Commit(System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/Certificate.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Commit
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Certificate.cs
    startLine: 66
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nAdds the certificate to the Batch account.\n"
  remarks: This is a blocking operation. For a non-blocking equivalent, see <xref href="Microsoft.Azure.Batch.Certificate.CommitAsync(System.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public void Commit(IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub Commit(additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.Certificate.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.Certificate.Commit*
  nameWithType.vb: Certificate.Commit(IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.Certificate.Commit(System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: Commit(IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.Certificate.DeleteAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.Certificate.DeleteAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: DeleteAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.Certificate
  langs:
  - csharp
  - vb
  name: DeleteAsync(IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: Certificate.DeleteAsync(IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.Certificate.DeleteAsync(System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/Certificate.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DeleteAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Certificate.cs
    startLine: 92
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nDeletes the certificate from the Batch account.\n"
  remarks: "\n<p>The delete operation requests that the certificate be deleted.  The request puts the certificate in the <xref href=\"Microsoft.Azure.Batch.Common.CertificateState.Deleting\" data-throw-if-not-resolved=\"false\"></xref> state.\nThe Batch service will perform the actual certificate deletion without any further client action.</p>\n<p>You cannot delete a certificate if a resource (pool or compute node) is using it. Before you can delete a certificate, you must therefore make sure that:</p>\n<ul><li>The certificate is not associated with any pools.</li><li>The certificate is not installed on any compute nodes.  (Even if you remove a certificate from a pool, it is not removed from existing compute nodes in that pool until they restart.)</li></ul>\n<p>If you try to delete a certificate that is in use, the deletion fails. The certificate state changes to <xref href=\"Microsoft.Azure.Batch.Common.CertificateState.DeleteFailed\" data-throw-if-not-resolved=\"false\"></xref>.\nYou can use <xref href=\"Microsoft.Azure.Batch.Certificate.CancelDeleteAsync(System.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> to set the status back to Active if you decide that you want to continue using the certificate.</p>\n<p>The delete operation runs asynchronously.</p>\n"
  example: []
  syntax:
    content: public Task DeleteAsync(IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function DeleteAsync(additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.Certificate.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.Certificate.DeleteAsync*
  nameWithType.vb: Certificate.DeleteAsync(IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.Certificate.DeleteAsync(System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: DeleteAsync(IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.Certificate.Delete(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.Certificate.Delete(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: Delete(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.Certificate
  langs:
  - csharp
  - vb
  name: Delete(IEnumerable<BatchClientBehavior>)
  nameWithType: Certificate.Delete(IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.Certificate.Delete(System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/Certificate.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Delete
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Certificate.cs
    startLine: 119
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nDeletes the certificate from the Batch account.\n"
  remarks: "\n<p>The delete operation requests that the certificate be deleted.  The request puts the certificate in the <xref href=\"Microsoft.Azure.Batch.Common.CertificateState.Deleting\" data-throw-if-not-resolved=\"false\"></xref> state.\nThe Batch service will perform the actual certificate deletion without any further client action.</p>\n<p>You cannot delete a certificate if a resource (pool or compute node) is using it. Before you can delete a certificate, you must therefore make sure that:</p>\n<ul><li>The certificate is not associated with any pools.</li><li>The certificate is not installed on any compute nodes.  (Even if you remove a certificate from a pool, it is not removed from existing compute nodes in that pool until they restart.)</li></ul>\n<p>If you try to delete a certificate that is in use, the deletion fails. The certificate state changes to <xref href=\"Microsoft.Azure.Batch.Common.CertificateState.DeleteFailed\" data-throw-if-not-resolved=\"false\"></xref>.\nYou can use <xref href=\"Microsoft.Azure.Batch.Certificate.CancelDeleteAsync(System.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> to set the status back to Active if you decide that you want to continue using the certificate.</p>\n<p>This is a blocking operation. For a non-blocking equivalent, see <xref href=\"Microsoft.Azure.Batch.Certificate.DeleteAsync(System.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public void Delete(IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub Delete(additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.Certificate.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.Certificate.Delete*
  nameWithType.vb: Certificate.Delete(IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.Certificate.Delete(System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: Delete(IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.Certificate.CancelDeleteAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.Certificate.CancelDeleteAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: CancelDeleteAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.Certificate
  langs:
  - csharp
  - vb
  name: CancelDeleteAsync(IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: Certificate.CancelDeleteAsync(IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.Certificate.CancelDeleteAsync(System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/Certificate.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CancelDeleteAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Certificate.cs
    startLine: 140
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nCancels a failed deletion of the certificate.  This can be done only when\nthe certificate is in the <xref href=\"Microsoft.Azure.Batch.Common.CertificateState.DeleteFailed\" data-throw-if-not-resolved=\"false\"></xref> state, and restores the certificate to the <xref href=\"Microsoft.Azure.Batch.Common.CertificateState.Active\" data-throw-if-not-resolved=\"false\"></xref> state.\n"
  remarks: "\n<p>If you still wish to delete the certificate (instead of returning it to Active), you do not need to cancel\nthe failed deletion. You must make sure that the certificate is not being used by any resources, and then you\ncan try again to delete the certificate (see <xref href=\"Microsoft.Azure.Batch.Certificate.DeleteAsync(System.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The cancel delete operation runs asynchronously.</p>\n"
  example: []
  syntax:
    content: public Task CancelDeleteAsync(IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function CancelDeleteAsync(additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.Certificate.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> object that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.Certificate.CancelDeleteAsync*
  nameWithType.vb: Certificate.CancelDeleteAsync(IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.Certificate.CancelDeleteAsync(System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: CancelDeleteAsync(IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.Certificate.CancelDelete(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.Certificate.CancelDelete(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: CancelDelete(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.Certificate
  langs:
  - csharp
  - vb
  name: CancelDelete(IEnumerable<BatchClientBehavior>)
  nameWithType: Certificate.CancelDelete(IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.Certificate.CancelDelete(System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/Certificate.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CancelDelete
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Certificate.cs
    startLine: 163
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nCancels a failed deletion of the certificate.  This can be done only when\nthe certificate is in the <xref href=\"Microsoft.Azure.Batch.Common.CertificateState.DeleteFailed\" data-throw-if-not-resolved=\"false\"></xref> state, and restores the certificate to the <xref href=\"Microsoft.Azure.Batch.Common.CertificateState.Active\" data-throw-if-not-resolved=\"false\"></xref> state.\n"
  remarks: "\n<p>If you still wish to delete the certificate (instead of returning it to Active), you do not need to cancel\nthe failed deletion. You must make sure that the certificate is not being used by any resources, and then you\ncan try again to delete the certificate (see <xref href=\"Microsoft.Azure.Batch.Certificate.Delete(System.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This is a blocking operation. For a non-blocking equivalent, see <xref href=\"Microsoft.Azure.Batch.Certificate.CancelDeleteAsync(System.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public void CancelDelete(IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub CancelDelete(additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.Certificate.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.Certificate.CancelDelete*
  nameWithType.vb: Certificate.CancelDelete(IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.Certificate.CancelDelete(System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: CancelDelete(IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.Certificate.RefreshAsync(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.Certificate.RefreshAsync(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: RefreshAsync(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.Certificate
  langs:
  - csharp
  - vb
  name: RefreshAsync(DetailLevel, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: Certificate.RefreshAsync(DetailLevel, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.Certificate.RefreshAsync(Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/Certificate.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: RefreshAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Certificate.cs
    startLine: 183
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nRefreshes the current <xref href=\"Microsoft.Azure.Batch.Certificate\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Task RefreshAsync(DetailLevel detailLevel = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function RefreshAsync(detailLevel As DetailLevel = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: detailLevel
      type: Microsoft.Azure.Batch.DetailLevel
      description: The detail level for the refresh.  If a detail level which omits the <xref href="Microsoft.Azure.Batch.Certificate.Thumbprint" data-throw-if-not-resolved="false"></xref> or <xref href="Microsoft.Azure.Batch.Certificate.ThumbprintAlgorithm" data-throw-if-not-resolved="false"></xref> property is specified, refresh will fail.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.Certificate.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous refresh operation.
  overload: Microsoft.Azure.Batch.Certificate.RefreshAsync*
  implements:
  - Microsoft.Azure.Batch.IRefreshable.RefreshAsync(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  nameWithType.vb: Certificate.RefreshAsync(DetailLevel, IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.Certificate.RefreshAsync(Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: RefreshAsync(DetailLevel, IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.Certificate.Refresh(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.Certificate.Refresh(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: Refresh(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.Certificate
  langs:
  - csharp
  - vb
  name: Refresh(DetailLevel, IEnumerable<BatchClientBehavior>)
  nameWithType: Certificate.Refresh(DetailLevel, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.Certificate.Refresh(Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/Certificate.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Refresh
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Certificate.cs
    startLine: 206
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nRefreshes the current <xref href=\"Microsoft.Azure.Batch.Certificate\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void Refresh(DetailLevel detailLevel = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub Refresh(detailLevel As DetailLevel = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: detailLevel
      type: Microsoft.Azure.Batch.DetailLevel
      description: The detail level for the refresh.  If a detail level which omits the <xref href="Microsoft.Azure.Batch.Certificate.Thumbprint" data-throw-if-not-resolved="false"></xref> or <xref href="Microsoft.Azure.Batch.Certificate.ThumbprintAlgorithm" data-throw-if-not-resolved="false"></xref> property is specified, refresh will fail.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.Certificate.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.Certificate.Refresh*
  implements:
  - Microsoft.Azure.Batch.IRefreshable.Refresh(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  nameWithType.vb: Certificate.Refresh(DetailLevel, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.Certificate.Refresh(Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: Refresh(DetailLevel, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.Certificate.CustomBehaviors
  commentId: P:Microsoft.Azure.Batch.Certificate.CustomBehaviors
  id: CustomBehaviors
  parent: Microsoft.Azure.Batch.Certificate
  langs:
  - csharp
  - vb
  name: CustomBehaviors
  nameWithType: Certificate.CustomBehaviors
  fullName: Microsoft.Azure.Batch.Certificate.CustomBehaviors
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/Certificate.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CustomBehaviors
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/Certificate.cs
    startLine: 174
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets a list of behaviors that modify or customize requests to the Batch service\nmade via this <xref href=\"Microsoft.Azure.Batch.Certificate\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\n<p>These behaviors are inherited by child objects.</p>\n<p>Modifications are applied in the order of the collection. The last write wins.</p>\n"
  example: []
  syntax:
    content: public IList<BatchClientBehavior> CustomBehaviors { get; set; }
    content.vb: Public Property CustomBehaviors As IList(Of BatchClientBehavior)
    parameters: []
    return:
      type: System.Collections.Generic.IList{Microsoft.Azure.Batch.BatchClientBehavior}
  overload: Microsoft.Azure.Batch.Certificate.CustomBehaviors*
  implements:
  - Microsoft.Azure.Batch.IInheritedBehaviors.CustomBehaviors
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Certificate.CertificateFormat
  commentId: P:Microsoft.Azure.Batch.Certificate.CertificateFormat
  id: CertificateFormat
  parent: Microsoft.Azure.Batch.Certificate
  langs:
  - csharp
  - vb
  name: CertificateFormat
  nameWithType: Certificate.CertificateFormat
  fullName: Microsoft.Azure.Batch.Certificate.CertificateFormat
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/Certificate.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CertificateFormat
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/Certificate.cs
    startLine: 183
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the format of the certificate data.\n"
  example: []
  syntax:
    content: public CertificateFormat? CertificateFormat { get; }
    content.vb: Public ReadOnly Property CertificateFormat As CertificateFormat?
    parameters: []
    return:
      type: System.Nullable{Microsoft.Azure.Batch.Common.CertificateFormat}
  overload: Microsoft.Azure.Batch.Certificate.CertificateFormat*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Batch.Certificate.Data
  commentId: P:Microsoft.Azure.Batch.Certificate.Data
  id: Data
  parent: Microsoft.Azure.Batch.Certificate
  langs:
  - csharp
  - vb
  name: Data
  nameWithType: Certificate.Data
  fullName: Microsoft.Azure.Batch.Certificate.Data
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/Certificate.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Data
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/Certificate.cs
    startLine: 197
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the base64-encoded raw certificate data (contents of the .pfx or .cer file or data from which the <xref href=\"Microsoft.Azure.Batch.Certificate\" data-throw-if-not-resolved=\"false\"></xref> \nwas created).\n"
  remarks: "\n<p>This property is set when creating a new <xref href=\"Microsoft.Azure.Batch.Certificate\" data-throw-if-not-resolved=\"false\"></xref>. It is not defined for certificates \nretrieved from the Batch service.</p> <p>The maximum size is 10 KB.</p>\n"
  example: []
  syntax:
    content: public string Data { get; }
    content.vb: Public ReadOnly Property Data As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Batch.Certificate.Data*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Batch.Certificate.DeleteCertificateError
  commentId: P:Microsoft.Azure.Batch.Certificate.DeleteCertificateError
  id: DeleteCertificateError
  parent: Microsoft.Azure.Batch.Certificate
  langs:
  - csharp
  - vb
  name: DeleteCertificateError
  nameWithType: Certificate.DeleteCertificateError
  fullName: Microsoft.Azure.Batch.Certificate.DeleteCertificateError
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/Certificate.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DeleteCertificateError
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/Certificate.cs
    startLine: 209
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the error that occurred on the last attempt to delete this certificate.\n"
  remarks: "\nThis property is null unless the certificate is in the <xref href=\"Microsoft.Azure.Batch.Common.CertificateState.DeleteFailed\" data-throw-if-not-resolved=\"false\"></xref> state.\n"
  example: []
  syntax:
    content: public DeleteCertificateError DeleteCertificateError { get; }
    content.vb: Public ReadOnly Property DeleteCertificateError As DeleteCertificateError
    parameters: []
    return:
      type: Microsoft.Azure.Batch.DeleteCertificateError
  overload: Microsoft.Azure.Batch.Certificate.DeleteCertificateError*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Batch.Certificate.Password
  commentId: P:Microsoft.Azure.Batch.Certificate.Password
  id: Password
  parent: Microsoft.Azure.Batch.Certificate
  langs:
  - csharp
  - vb
  name: Password
  nameWithType: Certificate.Password
  fullName: Microsoft.Azure.Batch.Certificate.Password
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/Certificate.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Password
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/Certificate.cs
    startLine: 222
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the password to access the certificate private key.\n"
  remarks: "\nThis property is set when creating a new <xref href=\"Microsoft.Azure.Batch.Certificate\" data-throw-if-not-resolved=\"false\"></xref> from .pfx format data (see <xref href=\"Microsoft.Azure.Batch.CertificateOperations.CreateCertificate(System.Byte%5b%5d%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"Microsoft.Azure.Batch.CertificateOperations.CreateCertificate(System.String%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref>). It is not defined for \ncertificates retrieved from the Batch service.\n"
  example: []
  syntax:
    content: public string Password { get; }
    content.vb: Public ReadOnly Property Password As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Batch.Certificate.Password*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Batch.Certificate.PreviousState
  commentId: P:Microsoft.Azure.Batch.Certificate.PreviousState
  id: PreviousState
  parent: Microsoft.Azure.Batch.Certificate
  langs:
  - csharp
  - vb
  name: PreviousState
  nameWithType: Certificate.PreviousState
  fullName: Microsoft.Azure.Batch.Certificate.PreviousState
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/Certificate.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: PreviousState
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/Certificate.cs
    startLine: 235
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the previous state of the certificate.\n"
  remarks: "\nIf the certificate is in its initial <xref href=\"Microsoft.Azure.Batch.Common.CertificateState.Active\" data-throw-if-not-resolved=\"false\"></xref> state, the PreviousState property \nis not defined.\n"
  example: []
  syntax:
    content: public CertificateState? PreviousState { get; }
    content.vb: Public ReadOnly Property PreviousState As CertificateState?
    parameters: []
    return:
      type: System.Nullable{Microsoft.Azure.Batch.Common.CertificateState}
  overload: Microsoft.Azure.Batch.Certificate.PreviousState*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Batch.Certificate.PreviousStateTransitionTime
  commentId: P:Microsoft.Azure.Batch.Certificate.PreviousStateTransitionTime
  id: PreviousStateTransitionTime
  parent: Microsoft.Azure.Batch.Certificate
  langs:
  - csharp
  - vb
  name: PreviousStateTransitionTime
  nameWithType: Certificate.PreviousStateTransitionTime
  fullName: Microsoft.Azure.Batch.Certificate.PreviousStateTransitionTime
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/Certificate.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: PreviousStateTransitionTime
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/Certificate.cs
    startLine: 247
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the time at which the certificate entered its previous state.\n"
  remarks: "\nIf the certificate is in its initial <xref href=\"Microsoft.Azure.Batch.Common.CertificateState.Active\" data-throw-if-not-resolved=\"false\"></xref> state, the PreviousStateTransitionTime \nproperty is not defined.\n"
  example: []
  syntax:
    content: public DateTime? PreviousStateTransitionTime { get; }
    content.vb: Public ReadOnly Property PreviousStateTransitionTime As Date?
    parameters: []
    return:
      type: System.Nullable{System.DateTime}
  overload: Microsoft.Azure.Batch.Certificate.PreviousStateTransitionTime*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Batch.Certificate.PublicData
  commentId: P:Microsoft.Azure.Batch.Certificate.PublicData
  id: PublicData
  parent: Microsoft.Azure.Batch.Certificate
  langs:
  - csharp
  - vb
  name: PublicData
  nameWithType: Certificate.PublicData
  fullName: Microsoft.Azure.Batch.Certificate.PublicData
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/Certificate.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: PublicData
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/Certificate.cs
    startLine: 255
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the public part of the certificate as a string containing base-64 encoded .cer format data.\n"
  example: []
  syntax:
    content: public string PublicData { get; }
    content.vb: Public ReadOnly Property PublicData As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Batch.Certificate.PublicData*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Batch.Certificate.State
  commentId: P:Microsoft.Azure.Batch.Certificate.State
  id: State
  parent: Microsoft.Azure.Batch.Certificate
  langs:
  - csharp
  - vb
  name: State
  nameWithType: Certificate.State
  fullName: Microsoft.Azure.Batch.Certificate.State
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/Certificate.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: State
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/Certificate.cs
    startLine: 263
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the current state of the certificate.\n"
  example: []
  syntax:
    content: public CertificateState? State { get; }
    content.vb: Public ReadOnly Property State As CertificateState?
    parameters: []
    return:
      type: System.Nullable{Microsoft.Azure.Batch.Common.CertificateState}
  overload: Microsoft.Azure.Batch.Certificate.State*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Batch.Certificate.StateTransitionTime
  commentId: P:Microsoft.Azure.Batch.Certificate.StateTransitionTime
  id: StateTransitionTime
  parent: Microsoft.Azure.Batch.Certificate
  langs:
  - csharp
  - vb
  name: StateTransitionTime
  nameWithType: Certificate.StateTransitionTime
  fullName: Microsoft.Azure.Batch.Certificate.StateTransitionTime
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/Certificate.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: StateTransitionTime
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/Certificate.cs
    startLine: 271
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the time at which the certificate entered its current state.\n"
  example: []
  syntax:
    content: public DateTime? StateTransitionTime { get; }
    content.vb: Public ReadOnly Property StateTransitionTime As Date?
    parameters: []
    return:
      type: System.Nullable{System.DateTime}
  overload: Microsoft.Azure.Batch.Certificate.StateTransitionTime*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Batch.Certificate.Thumbprint
  commentId: P:Microsoft.Azure.Batch.Certificate.Thumbprint
  id: Thumbprint
  parent: Microsoft.Azure.Batch.Certificate
  langs:
  - csharp
  - vb
  name: Thumbprint
  nameWithType: Certificate.Thumbprint
  fullName: Microsoft.Azure.Batch.Certificate.Thumbprint
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/Certificate.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Thumbprint
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/Certificate.cs
    startLine: 279
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the thumbprint of the certificate. This is a sequence of up to 40 hex digits.\n"
  example: []
  syntax:
    content: public string Thumbprint { get; }
    content.vb: Public ReadOnly Property Thumbprint As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Batch.Certificate.Thumbprint*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Batch.Certificate.ThumbprintAlgorithm
  commentId: P:Microsoft.Azure.Batch.Certificate.ThumbprintAlgorithm
  id: ThumbprintAlgorithm
  parent: Microsoft.Azure.Batch.Certificate
  langs:
  - csharp
  - vb
  name: ThumbprintAlgorithm
  nameWithType: Certificate.ThumbprintAlgorithm
  fullName: Microsoft.Azure.Batch.Certificate.ThumbprintAlgorithm
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/Certificate.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ThumbprintAlgorithm
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/Certificate.cs
    startLine: 288
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the algorithm used to derive the thumbprint.\n"
  example: []
  syntax:
    content: public string ThumbprintAlgorithm { get; }
    content.vb: Public ReadOnly Property ThumbprintAlgorithm As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Batch.Certificate.ThumbprintAlgorithm*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Batch.Certificate.Url
  commentId: P:Microsoft.Azure.Batch.Certificate.Url
  id: Url
  parent: Microsoft.Azure.Batch.Certificate
  langs:
  - csharp
  - vb
  name: Url
  nameWithType: Certificate.Url
  fullName: Microsoft.Azure.Batch.Certificate.Url
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/Certificate.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Url
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/Certificate.cs
    startLine: 297
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the URL of the certificate.\n"
  example: []
  syntax:
    content: public string Url { get; }
    content.vb: Public ReadOnly Property Url As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Batch.Certificate.Url*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Microsoft.Azure.Batch
  commentId: N:Microsoft.Azure.Batch
  isExternal: false
  name: Microsoft.Azure.Batch
  nameWithType: Microsoft.Azure.Batch
  fullName: Microsoft.Azure.Batch
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Azure.Batch.IRefreshable
  commentId: T:Microsoft.Azure.Batch.IRefreshable
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: IRefreshable
  nameWithType: IRefreshable
  fullName: Microsoft.Azure.Batch.IRefreshable
- uid: Microsoft.Azure.Batch.IInheritedBehaviors
  commentId: T:Microsoft.Azure.Batch.IInheritedBehaviors
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: IInheritedBehaviors
  nameWithType: IInheritedBehaviors
  fullName: Microsoft.Azure.Batch.IInheritedBehaviors
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Batch.BatchClientBehavior
  commentId: T:Microsoft.Azure.Batch.BatchClientBehavior
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: BatchClientBehavior
  nameWithType: BatchClientBehavior
  fullName: Microsoft.Azure.Batch.BatchClientBehavior
- uid: Microsoft.Azure.Batch.Certificate.CustomBehaviors
  commentId: P:Microsoft.Azure.Batch.Certificate.CustomBehaviors
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.Azure.Batch.Certificate.CommitAsync*
  commentId: Overload:Microsoft.Azure.Batch.Certificate.CommitAsync
  isExternal: false
  name: CommitAsync
  nameWithType: Certificate.CommitAsync
  fullName: Microsoft.Azure.Batch.Certificate.CommitAsync
- uid: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<BatchClientBehavior>
  nameWithType: IEnumerable<BatchClientBehavior>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>
  nameWithType.vb: IEnumerable(Of BatchClientBehavior)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior)
  name.vb: IEnumerable(Of BatchClientBehavior)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.BatchClientBehavior
    name: BatchClientBehavior
    nameWithType: BatchClientBehavior
    fullName: Microsoft.Azure.Batch.BatchClientBehavior
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.BatchClientBehavior
    name: BatchClientBehavior
    nameWithType: BatchClientBehavior
    fullName: Microsoft.Azure.Batch.BatchClientBehavior
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Azure.Batch.Certificate.CommitAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.Certificate.CommitAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.Certificate.Commit*
  commentId: Overload:Microsoft.Azure.Batch.Certificate.Commit
  isExternal: false
  name: Commit
  nameWithType: Certificate.Commit
  fullName: Microsoft.Azure.Batch.Certificate.Commit
- uid: Microsoft.Azure.Batch.Common.CertificateState.Deleting
  commentId: F:Microsoft.Azure.Batch.Common.CertificateState.Deleting
- uid: Microsoft.Azure.Batch.Common.CertificateState.DeleteFailed
  commentId: F:Microsoft.Azure.Batch.Common.CertificateState.DeleteFailed
- uid: Microsoft.Azure.Batch.Certificate.CancelDeleteAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.Certificate.CancelDeleteAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.Certificate.DeleteAsync*
  commentId: Overload:Microsoft.Azure.Batch.Certificate.DeleteAsync
  isExternal: false
  name: DeleteAsync
  nameWithType: Certificate.DeleteAsync
  fullName: Microsoft.Azure.Batch.Certificate.DeleteAsync
- uid: Microsoft.Azure.Batch.Certificate.DeleteAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.Certificate.DeleteAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.Certificate.Delete*
  commentId: Overload:Microsoft.Azure.Batch.Certificate.Delete
  isExternal: false
  name: Delete
  nameWithType: Certificate.Delete
  fullName: Microsoft.Azure.Batch.Certificate.Delete
- uid: Microsoft.Azure.Batch.Common.CertificateState.Active
  commentId: F:Microsoft.Azure.Batch.Common.CertificateState.Active
- uid: Microsoft.Azure.Batch.Certificate.CancelDeleteAsync*
  commentId: Overload:Microsoft.Azure.Batch.Certificate.CancelDeleteAsync
  isExternal: false
  name: CancelDeleteAsync
  nameWithType: Certificate.CancelDeleteAsync
  fullName: Microsoft.Azure.Batch.Certificate.CancelDeleteAsync
- uid: Microsoft.Azure.Batch.Certificate.Delete(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.Certificate.Delete(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
- uid: Microsoft.Azure.Batch.Certificate.CancelDelete*
  commentId: Overload:Microsoft.Azure.Batch.Certificate.CancelDelete
  isExternal: false
  name: CancelDelete
  nameWithType: Certificate.CancelDelete
  fullName: Microsoft.Azure.Batch.Certificate.CancelDelete
- uid: Microsoft.Azure.Batch.Certificate
  commentId: T:Microsoft.Azure.Batch.Certificate
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: Certificate
  nameWithType: Certificate
  fullName: Microsoft.Azure.Batch.Certificate
- uid: Microsoft.Azure.Batch.Certificate.Thumbprint
  commentId: P:Microsoft.Azure.Batch.Certificate.Thumbprint
- uid: Microsoft.Azure.Batch.Certificate.ThumbprintAlgorithm
  commentId: P:Microsoft.Azure.Batch.Certificate.ThumbprintAlgorithm
- uid: Microsoft.Azure.Batch.Certificate.RefreshAsync*
  commentId: Overload:Microsoft.Azure.Batch.Certificate.RefreshAsync
  isExternal: false
  name: RefreshAsync
  nameWithType: Certificate.RefreshAsync
  fullName: Microsoft.Azure.Batch.Certificate.RefreshAsync
- uid: Microsoft.Azure.Batch.IRefreshable.RefreshAsync(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.IRefreshable.RefreshAsync(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.IRefreshable
  isExternal: true
  name: RefreshAsync(DetailLevel, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: IRefreshable.RefreshAsync(DetailLevel, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.IRefreshable.RefreshAsync(Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  nameWithType.vb: IRefreshable.RefreshAsync(DetailLevel, IEnumerable(Of BatchClientBehavior), CancellationToken)
  fullname.vb: Microsoft.Azure.Batch.IRefreshable.RefreshAsync(Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: RefreshAsync(DetailLevel, IEnumerable(Of BatchClientBehavior), CancellationToken)
  spec.csharp:
  - uid: Microsoft.Azure.Batch.IRefreshable.RefreshAsync(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
    name: RefreshAsync
    nameWithType: IRefreshable.RefreshAsync
    fullName: Microsoft.Azure.Batch.IRefreshable.RefreshAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Azure.Batch.DetailLevel
    name: DetailLevel
    nameWithType: DetailLevel
    fullName: Microsoft.Azure.Batch.DetailLevel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.BatchClientBehavior
    name: BatchClientBehavior
    nameWithType: BatchClientBehavior
    fullName: Microsoft.Azure.Batch.BatchClientBehavior
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Batch.IRefreshable.RefreshAsync(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
    name: RefreshAsync
    nameWithType: IRefreshable.RefreshAsync
    fullName: Microsoft.Azure.Batch.IRefreshable.RefreshAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Azure.Batch.DetailLevel
    name: DetailLevel
    nameWithType: DetailLevel
    fullName: Microsoft.Azure.Batch.DetailLevel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.BatchClientBehavior
    name: BatchClientBehavior
    nameWithType: BatchClientBehavior
    fullName: Microsoft.Azure.Batch.BatchClientBehavior
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.DetailLevel
  commentId: T:Microsoft.Azure.Batch.DetailLevel
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: DetailLevel
  nameWithType: DetailLevel
  fullName: Microsoft.Azure.Batch.DetailLevel
- uid: Microsoft.Azure.Batch.Certificate.Refresh*
  commentId: Overload:Microsoft.Azure.Batch.Certificate.Refresh
  isExternal: false
  name: Refresh
  nameWithType: Certificate.Refresh
  fullName: Microsoft.Azure.Batch.Certificate.Refresh
- uid: Microsoft.Azure.Batch.IRefreshable.Refresh(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.IRefreshable.Refresh(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.IRefreshable
  isExternal: true
  name: Refresh(DetailLevel, IEnumerable<BatchClientBehavior>)
  nameWithType: IRefreshable.Refresh(DetailLevel, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.IRefreshable.Refresh(Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  nameWithType.vb: IRefreshable.Refresh(DetailLevel, IEnumerable(Of BatchClientBehavior))
  fullname.vb: Microsoft.Azure.Batch.IRefreshable.Refresh(Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: Refresh(DetailLevel, IEnumerable(Of BatchClientBehavior))
  spec.csharp:
  - uid: Microsoft.Azure.Batch.IRefreshable.Refresh(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
    name: Refresh
    nameWithType: IRefreshable.Refresh
    fullName: Microsoft.Azure.Batch.IRefreshable.Refresh
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Azure.Batch.DetailLevel
    name: DetailLevel
    nameWithType: DetailLevel
    fullName: Microsoft.Azure.Batch.DetailLevel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.BatchClientBehavior
    name: BatchClientBehavior
    nameWithType: BatchClientBehavior
    fullName: Microsoft.Azure.Batch.BatchClientBehavior
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Batch.IRefreshable.Refresh(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
    name: Refresh
    nameWithType: IRefreshable.Refresh
    fullName: Microsoft.Azure.Batch.IRefreshable.Refresh
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Azure.Batch.DetailLevel
    name: DetailLevel
    nameWithType: DetailLevel
    fullName: Microsoft.Azure.Batch.DetailLevel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.BatchClientBehavior
    name: BatchClientBehavior
    nameWithType: BatchClientBehavior
    fullName: Microsoft.Azure.Batch.BatchClientBehavior
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.Certificate.CustomBehaviors*
  commentId: Overload:Microsoft.Azure.Batch.Certificate.CustomBehaviors
  isExternal: false
  name: CustomBehaviors
  nameWithType: Certificate.CustomBehaviors
  fullName: Microsoft.Azure.Batch.Certificate.CustomBehaviors
- uid: Microsoft.Azure.Batch.IInheritedBehaviors.CustomBehaviors
  commentId: P:Microsoft.Azure.Batch.IInheritedBehaviors.CustomBehaviors
  parent: Microsoft.Azure.Batch.IInheritedBehaviors
  isExternal: false
  name: CustomBehaviors
  nameWithType: IInheritedBehaviors.CustomBehaviors
  fullName: Microsoft.Azure.Batch.IInheritedBehaviors.CustomBehaviors
- uid: System.Collections.Generic.IList{Microsoft.Azure.Batch.BatchClientBehavior}
  commentId: T:System.Collections.Generic.IList{Microsoft.Azure.Batch.BatchClientBehavior}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<BatchClientBehavior>
  nameWithType: IList<BatchClientBehavior>
  fullName: System.Collections.Generic.IList<Microsoft.Azure.Batch.BatchClientBehavior>
  nameWithType.vb: IList(Of BatchClientBehavior)
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.Azure.Batch.BatchClientBehavior)
  name.vb: IList(Of BatchClientBehavior)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.BatchClientBehavior
    name: BatchClientBehavior
    nameWithType: BatchClientBehavior
    fullName: Microsoft.Azure.Batch.BatchClientBehavior
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.BatchClientBehavior
    name: BatchClientBehavior
    nameWithType: BatchClientBehavior
    fullName: Microsoft.Azure.Batch.BatchClientBehavior
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.Certificate.CertificateFormat*
  commentId: Overload:Microsoft.Azure.Batch.Certificate.CertificateFormat
  isExternal: false
  name: CertificateFormat
  nameWithType: Certificate.CertificateFormat
  fullName: Microsoft.Azure.Batch.Certificate.CertificateFormat
- uid: System.Nullable{Microsoft.Azure.Batch.Common.CertificateFormat}
  commentId: T:System.Nullable{Microsoft.Azure.Batch.Common.CertificateFormat}
  parent: System
  definition: System.Nullable`1
  name: Nullable<CertificateFormat>
  nameWithType: Nullable<CertificateFormat>
  fullName: System.Nullable<Microsoft.Azure.Batch.Common.CertificateFormat>
  nameWithType.vb: Nullable(Of CertificateFormat)
  fullname.vb: System.Nullable(Of Microsoft.Azure.Batch.Common.CertificateFormat)
  name.vb: Nullable(Of CertificateFormat)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.Common.CertificateFormat
    name: CertificateFormat
    nameWithType: CertificateFormat
    fullName: Microsoft.Azure.Batch.Common.CertificateFormat
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.Common.CertificateFormat
    name: CertificateFormat
    nameWithType: CertificateFormat
    fullName: Microsoft.Azure.Batch.Common.CertificateFormat
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.Certificate.Data*
  commentId: Overload:Microsoft.Azure.Batch.Certificate.Data
  isExternal: false
  name: Data
  nameWithType: Certificate.Data
  fullName: Microsoft.Azure.Batch.Certificate.Data
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Azure.Batch.Certificate.DeleteCertificateError*
  commentId: Overload:Microsoft.Azure.Batch.Certificate.DeleteCertificateError
  isExternal: false
  name: DeleteCertificateError
  nameWithType: Certificate.DeleteCertificateError
  fullName: Microsoft.Azure.Batch.Certificate.DeleteCertificateError
- uid: Microsoft.Azure.Batch.DeleteCertificateError
  commentId: T:Microsoft.Azure.Batch.DeleteCertificateError
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: DeleteCertificateError
  nameWithType: DeleteCertificateError
  fullName: Microsoft.Azure.Batch.DeleteCertificateError
- uid: Microsoft.Azure.Batch.CertificateOperations.CreateCertificate(System.Byte[],System.String)
  commentId: M:Microsoft.Azure.Batch.CertificateOperations.CreateCertificate(System.Byte[],System.String)
- uid: Microsoft.Azure.Batch.CertificateOperations.CreateCertificate(System.String,System.String)
  commentId: M:Microsoft.Azure.Batch.CertificateOperations.CreateCertificate(System.String,System.String)
- uid: Microsoft.Azure.Batch.Certificate.Password*
  commentId: Overload:Microsoft.Azure.Batch.Certificate.Password
  isExternal: false
  name: Password
  nameWithType: Certificate.Password
  fullName: Microsoft.Azure.Batch.Certificate.Password
- uid: Microsoft.Azure.Batch.Certificate.PreviousState*
  commentId: Overload:Microsoft.Azure.Batch.Certificate.PreviousState
  isExternal: false
  name: PreviousState
  nameWithType: Certificate.PreviousState
  fullName: Microsoft.Azure.Batch.Certificate.PreviousState
- uid: System.Nullable{Microsoft.Azure.Batch.Common.CertificateState}
  commentId: T:System.Nullable{Microsoft.Azure.Batch.Common.CertificateState}
  parent: System
  definition: System.Nullable`1
  name: Nullable<CertificateState>
  nameWithType: Nullable<CertificateState>
  fullName: System.Nullable<Microsoft.Azure.Batch.Common.CertificateState>
  nameWithType.vb: Nullable(Of CertificateState)
  fullname.vb: System.Nullable(Of Microsoft.Azure.Batch.Common.CertificateState)
  name.vb: Nullable(Of CertificateState)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.Common.CertificateState
    name: CertificateState
    nameWithType: CertificateState
    fullName: Microsoft.Azure.Batch.Common.CertificateState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.Common.CertificateState
    name: CertificateState
    nameWithType: CertificateState
    fullName: Microsoft.Azure.Batch.Common.CertificateState
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.Certificate.PreviousStateTransitionTime*
  commentId: Overload:Microsoft.Azure.Batch.Certificate.PreviousStateTransitionTime
  isExternal: false
  name: PreviousStateTransitionTime
  nameWithType: Certificate.PreviousStateTransitionTime
  fullName: Microsoft.Azure.Batch.Certificate.PreviousStateTransitionTime
- uid: System.Nullable{System.DateTime}
  commentId: T:System.Nullable{System.DateTime}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<System.DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullname.vb: System.Nullable(Of System.DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.Certificate.PublicData*
  commentId: Overload:Microsoft.Azure.Batch.Certificate.PublicData
  isExternal: false
  name: PublicData
  nameWithType: Certificate.PublicData
  fullName: Microsoft.Azure.Batch.Certificate.PublicData
- uid: Microsoft.Azure.Batch.Certificate.State*
  commentId: Overload:Microsoft.Azure.Batch.Certificate.State
  isExternal: false
  name: State
  nameWithType: Certificate.State
  fullName: Microsoft.Azure.Batch.Certificate.State
- uid: Microsoft.Azure.Batch.Certificate.StateTransitionTime*
  commentId: Overload:Microsoft.Azure.Batch.Certificate.StateTransitionTime
  isExternal: false
  name: StateTransitionTime
  nameWithType: Certificate.StateTransitionTime
  fullName: Microsoft.Azure.Batch.Certificate.StateTransitionTime
- uid: Microsoft.Azure.Batch.Certificate.Thumbprint*
  commentId: Overload:Microsoft.Azure.Batch.Certificate.Thumbprint
  isExternal: false
  name: Thumbprint
  nameWithType: Certificate.Thumbprint
  fullName: Microsoft.Azure.Batch.Certificate.Thumbprint
- uid: Microsoft.Azure.Batch.Certificate.ThumbprintAlgorithm*
  commentId: Overload:Microsoft.Azure.Batch.Certificate.ThumbprintAlgorithm
  isExternal: false
  name: ThumbprintAlgorithm
  nameWithType: Certificate.ThumbprintAlgorithm
  fullName: Microsoft.Azure.Batch.Certificate.ThumbprintAlgorithm
- uid: Microsoft.Azure.Batch.Certificate.Url*
  commentId: Overload:Microsoft.Azure.Batch.Certificate.Url
  isExternal: false
  name: Url
  nameWithType: Certificate.Url
  fullName: Microsoft.Azure.Batch.Certificate.Url
