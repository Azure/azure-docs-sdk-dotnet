### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Batch.JobOperations
  commentId: T:Microsoft.Azure.Batch.JobOperations
  id: JobOperations
  parent: Microsoft.Azure.Batch
  children:
  - Microsoft.Azure.Batch.JobOperations.AddTask(System.String,Microsoft.Azure.Batch.CloudTask,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.JobOperations.AddTask(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask},Microsoft.Azure.Batch.BatchClientParallelOptions,System.Collections.Concurrent.ConcurrentBag{System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact}},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.JobOperations.AddTaskAsync(System.String,Microsoft.Azure.Batch.CloudTask,System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.JobOperations.AddTaskAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask},Microsoft.Azure.Batch.BatchClientParallelOptions,System.Collections.Concurrent.ConcurrentBag{System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact}},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.JobOperations.CreateJob
  - Microsoft.Azure.Batch.JobOperations.CreateJob(System.String,Microsoft.Azure.Batch.PoolInformation)
  - Microsoft.Azure.Batch.JobOperations.CustomBehaviors
  - Microsoft.Azure.Batch.JobOperations.DeleteJob(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.JobOperations.DeleteJobAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.JobOperations.DeleteNodeFile(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.JobOperations.DeleteNodeFileAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.JobOperations.DeleteTask(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.JobOperations.DeleteTaskAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.JobOperations.DisableJob(System.String,Microsoft.Azure.Batch.Common.DisableJobOption,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.JobOperations.DisableJobAsync(System.String,Microsoft.Azure.Batch.Common.DisableJobOption,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.JobOperations.EnableJob(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.JobOperations.EnableJobAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.JobOperations.GetAllJobsLifetimeStatistics(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.JobOperations.GetAllJobsLifetimeStatisticsAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.JobOperations.GetJob(System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.JobOperations.GetJobAsync(System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.JobOperations.GetNodeFile(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.JobOperations.GetNodeFileAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.JobOperations.GetTask(System.String,System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.JobOperations.GetTaskAsync(System.String,System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.JobOperations.ListJobPreparationAndReleaseTaskStatus(System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.JobOperations.ListJobs(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.JobOperations.ListNodeFiles(System.String,System.String,System.Nullable{System.Boolean},Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.JobOperations.ListSubtasks(System.String,System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.JobOperations.ListTasks(System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.JobOperations.ReactivateTask(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.JobOperations.ReactivateTaskAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.JobOperations.TerminateJob(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.JobOperations.TerminateJobAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.JobOperations.TerminateTask(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.JobOperations.TerminateTaskAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: JobOperations
  nameWithType: JobOperations
  fullName: Microsoft.Azure.Batch.JobOperations
  type: Class
  source:
    remote:
      path: src/Batch/Client/Src/JobOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: JobOperations
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobOperations.cs
    startLine: 33
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nPerforms operations on Azure Batch jobs.\n"
  example: []
  syntax:
    content: 'public class JobOperations : IInheritedBehaviors'
    content.vb: >-
      Public Class JobOperations
          Implements IInheritedBehaviors
  seealso:
  - linkId: Microsoft.Azure.Batch.CloudJob
    commentId: T:Microsoft.Azure.Batch.CloudJob
  inheritance:
  - System.Object
  implements:
  - Microsoft.Azure.Batch.IInheritedBehaviors
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Batch.JobOperations.CustomBehaviors
  commentId: P:Microsoft.Azure.Batch.JobOperations.CustomBehaviors
  id: CustomBehaviors
  parent: Microsoft.Azure.Batch.JobOperations
  langs:
  - csharp
  - vb
  name: CustomBehaviors
  nameWithType: JobOperations.CustomBehaviors
  fullName: Microsoft.Azure.Batch.JobOperations.CustomBehaviors
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/JobOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CustomBehaviors
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobOperations.cs
    startLine: 63
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets a list of behaviors that modify or customize requests to the Batch service\nmade via this <xref href=\"Microsoft.Azure.Batch.JobOperations\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\n<p>These behaviors are inherited by child objects.</p>\n<p>Modifications are applied in the order of the collection. The last write wins.</p>\n"
  example: []
  syntax:
    content: public IList<BatchClientBehavior> CustomBehaviors { get; set; }
    content.vb: Public Property CustomBehaviors As IList(Of BatchClientBehavior)
    parameters: []
    return:
      type: System.Collections.Generic.IList{Microsoft.Azure.Batch.BatchClientBehavior}
  overload: Microsoft.Azure.Batch.JobOperations.CustomBehaviors*
  implements:
  - Microsoft.Azure.Batch.IInheritedBehaviors.CustomBehaviors
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.JobOperations.CreateJob
  commentId: M:Microsoft.Azure.Batch.JobOperations.CreateJob
  id: CreateJob
  parent: Microsoft.Azure.Batch.JobOperations
  langs:
  - csharp
  - vb
  name: CreateJob()
  nameWithType: JobOperations.CreateJob()
  fullName: Microsoft.Azure.Batch.JobOperations.CreateJob()
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/JobOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CreateJob
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobOperations.cs
    startLine: 73
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nCreates an instance of CloudJob that is unbound and does not have a consistency relationship to any job in the Batch Service.\n"
  example: []
  syntax:
    content: public CloudJob CreateJob()
    content.vb: Public Function CreateJob As CloudJob
    return:
      type: Microsoft.Azure.Batch.CloudJob
      description: A <xref href="Microsoft.Azure.Batch.CloudJob" data-throw-if-not-resolved="false"></xref> representing a new job that has not been submitted to the Batch service.
  overload: Microsoft.Azure.Batch.JobOperations.CreateJob*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.JobOperations.CreateJob(System.String,Microsoft.Azure.Batch.PoolInformation)
  commentId: M:Microsoft.Azure.Batch.JobOperations.CreateJob(System.String,Microsoft.Azure.Batch.PoolInformation)
  id: CreateJob(System.String,Microsoft.Azure.Batch.PoolInformation)
  parent: Microsoft.Azure.Batch.JobOperations
  langs:
  - csharp
  - vb
  name: CreateJob(String, PoolInformation)
  nameWithType: JobOperations.CreateJob(String, PoolInformation)
  fullName: Microsoft.Azure.Batch.JobOperations.CreateJob(System.String, Microsoft.Azure.Batch.PoolInformation)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/JobOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CreateJob
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobOperations.cs
    startLine: 89
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nCreates an instance of CloudJob that is unbound and does not have a consistency relationship to any job in the Batch Service.\n"
  example: []
  syntax:
    content: public CloudJob CreateJob(string jobId, PoolInformation poolInformation)
    content.vb: Public Function CreateJob(jobId As String, poolInformation As PoolInformation) As CloudJob
    parameters:
    - id: jobId
      type: System.String
      description: The Id of the job.
    - id: poolInformation
      type: Microsoft.Azure.Batch.PoolInformation
      description: The information about the pool the job will run on.
    return:
      type: Microsoft.Azure.Batch.CloudJob
      description: A <xref href="Microsoft.Azure.Batch.CloudJob" data-throw-if-not-resolved="false"></xref> representing a new job that has not been submitted to the Batch service.
  overload: Microsoft.Azure.Batch.JobOperations.CreateJob*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.JobOperations.ListJobs(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.JobOperations.ListJobs(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: ListJobs(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.JobOperations
  langs:
  - csharp
  - vb
  name: ListJobs(DetailLevel, IEnumerable<BatchClientBehavior>)
  nameWithType: JobOperations.ListJobs(DetailLevel, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.JobOperations.ListJobs(Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/JobOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ListJobs
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobOperations.cs
    startLine: 125
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nEnumerates the <xref href=\"Microsoft.Azure.Batch.CloudJob\" data-throw-if-not-resolved=\"false\"></xref> in the Batch account.\n"
  remarks: >-
    This method returns immediately; the jobs are retrieved from the Batch service only when the collection is enumerated.

    Retrieval is non-atomic; jobs are retrieved in pages during enumeration of the collection.
  example: []
  syntax:
    content: public IPagedEnumerable<CloudJob> ListJobs(DetailLevel detailLevel = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Function ListJobs(detailLevel As DetailLevel = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing) As IPagedEnumerable(Of CloudJob)
    parameters:
    - id: detailLevel
      type: Microsoft.Azure.Batch.DetailLevel
      description: A <xref href="Microsoft.Azure.Batch.DetailLevel" data-throw-if-not-resolved="false"></xref> used for filtering the list and for controlling which properties are retrieved from the service.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.JobOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref> and <span class="paramref">detailLevel</span>.
    return:
      type: Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.CloudJob}
      description: An <xref href="Microsoft.Azure.Batch.IPagedEnumerable%601" data-throw-if-not-resolved="false"></xref> that can be used to enumerate jobs asynchronously or synchronously.
  overload: Microsoft.Azure.Batch.JobOperations.ListJobs*
  nameWithType.vb: JobOperations.ListJobs(DetailLevel, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.JobOperations.ListJobs(Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: ListJobs(DetailLevel, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.JobOperations.GetJobAsync(System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.JobOperations.GetJobAsync(System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: GetJobAsync(System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.JobOperations
  langs:
  - csharp
  - vb
  name: GetJobAsync(String, DetailLevel, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: JobOperations.GetJobAsync(String, DetailLevel, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.JobOperations.GetJobAsync(System.String, Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/JobOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: GetJobAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobOperations.cs
    startLine: 159
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the specified <xref href=\"Microsoft.Azure.Batch.CloudJob\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: The get job operation runs asynchronously.
  example: []
  syntax:
    content: public Task<CloudJob> GetJobAsync(string jobId, DetailLevel detailLevel = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function GetJobAsync(jobId As String, detailLevel As DetailLevel = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of CloudJob)
    parameters:
    - id: jobId
      type: System.String
      description: The id of the job to get.
    - id: detailLevel
      type: Microsoft.Azure.Batch.DetailLevel
      description: A <xref href="Microsoft.Azure.Batch.DetailLevel" data-throw-if-not-resolved="false"></xref> used for controlling which properties are retrieved from the service.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.JobOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref> and <span class="paramref">detailLevel</span>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.Batch.CloudJob}
      description: A <xref href="Microsoft.Azure.Batch.CloudJob" data-throw-if-not-resolved="false"></xref> containing information about the specified Azure Batch job.
  overload: Microsoft.Azure.Batch.JobOperations.GetJobAsync*
  nameWithType.vb: JobOperations.GetJobAsync(String, DetailLevel, IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.JobOperations.GetJobAsync(System.String, Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: GetJobAsync(String, DetailLevel, IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.JobOperations.GetJob(System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.JobOperations.GetJob(System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: GetJob(System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.JobOperations
  langs:
  - csharp
  - vb
  name: GetJob(String, DetailLevel, IEnumerable<BatchClientBehavior>)
  nameWithType: JobOperations.GetJob(String, DetailLevel, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.JobOperations.GetJob(System.String, Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/JobOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: GetJob
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobOperations.cs
    startLine: 183
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the specified <xref href=\"Microsoft.Azure.Batch.CloudJob\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: This is a blocking operation. For a non-blocking equivalent, see <xref href="Microsoft.Azure.Batch.JobOperations.GetJobAsync(System.String%2cMicrosoft.Azure.Batch.DetailLevel%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public CloudJob GetJob(string jobId, DetailLevel detailLevel = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Function GetJob(jobId As String, detailLevel As DetailLevel = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing) As CloudJob
    parameters:
    - id: jobId
      type: System.String
      description: The id of the job to get.
    - id: detailLevel
      type: Microsoft.Azure.Batch.DetailLevel
      description: A <xref href="Microsoft.Azure.Batch.DetailLevel" data-throw-if-not-resolved="false"></xref> used for controlling which properties are retrieved from the service.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.JobOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref> and <span class="paramref">detailLevel</span>.
    return:
      type: Microsoft.Azure.Batch.CloudJob
      description: A <xref href="Microsoft.Azure.Batch.CloudJob" data-throw-if-not-resolved="false"></xref> containing information about the specified Azure Batch job.
  overload: Microsoft.Azure.Batch.JobOperations.GetJob*
  nameWithType.vb: JobOperations.GetJob(String, DetailLevel, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.JobOperations.GetJob(System.String, Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: GetJob(String, DetailLevel, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.JobOperations.EnableJobAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.JobOperations.EnableJobAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: EnableJobAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.JobOperations
  langs:
  - csharp
  - vb
  name: EnableJobAsync(String, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: JobOperations.EnableJobAsync(String, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.JobOperations.EnableJobAsync(System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/JobOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: EnableJobAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobOperations.cs
    startLine: 201
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nEnables the specified job, allowing new tasks to run.\n"
  remarks: The enable operation runs asynchronously.
  example: []
  syntax:
    content: public Task EnableJobAsync(string jobId, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function EnableJobAsync(jobId As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: jobId
      type: System.String
      description: The id of the job.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.JobOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.JobOperations.EnableJobAsync*
  nameWithType.vb: JobOperations.EnableJobAsync(String, IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.JobOperations.EnableJobAsync(System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: EnableJobAsync(String, IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.JobOperations.EnableJob(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.JobOperations.EnableJob(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: EnableJob(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.JobOperations
  langs:
  - csharp
  - vb
  name: EnableJob(String, IEnumerable<BatchClientBehavior>)
  nameWithType: JobOperations.EnableJob(String, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.JobOperations.EnableJob(System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/JobOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: EnableJob
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobOperations.cs
    startLine: 217
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nEnables the specified job, allowing new tasks to run.\n"
  remarks: This is a blocking operation. For a non-blocking equivalent, see <xref href="Microsoft.Azure.Batch.JobOperations.EnableJobAsync(System.String%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public void EnableJob(string jobId, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub EnableJob(jobId As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: jobId
      type: System.String
      description: The id of the job.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.JobOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.JobOperations.EnableJob*
  nameWithType.vb: JobOperations.EnableJob(String, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.JobOperations.EnableJob(System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: EnableJob(String, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.JobOperations.DisableJobAsync(System.String,Microsoft.Azure.Batch.Common.DisableJobOption,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.JobOperations.DisableJobAsync(System.String,Microsoft.Azure.Batch.Common.DisableJobOption,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: DisableJobAsync(System.String,Microsoft.Azure.Batch.Common.DisableJobOption,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.JobOperations
  langs:
  - csharp
  - vb
  name: DisableJobAsync(String, DisableJobOption, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: JobOperations.DisableJobAsync(String, DisableJobOption, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.JobOperations.DisableJobAsync(System.String, Microsoft.Azure.Batch.Common.DisableJobOption, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/JobOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DisableJobAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobOperations.cs
    startLine: 234
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nDisables the specified job.  Disabled jobs do not run new tasks, but may be re-enabled later.\n"
  remarks: The disable operation runs asynchronously.
  example: []
  syntax:
    content: public Task DisableJobAsync(string jobId, DisableJobOption disableJobOption, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function DisableJobAsync(jobId As String, disableJobOption As DisableJobOption, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: jobId
      type: System.String
      description: The id of the job.
    - id: disableJobOption
      type: Microsoft.Azure.Batch.Common.DisableJobOption
      description: Specifies what to do with active tasks associated with the job.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.JobOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.JobOperations.DisableJobAsync*
  nameWithType.vb: JobOperations.DisableJobAsync(String, DisableJobOption, IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.JobOperations.DisableJobAsync(System.String, Microsoft.Azure.Batch.Common.DisableJobOption, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: DisableJobAsync(String, DisableJobOption, IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.JobOperations.DisableJob(System.String,Microsoft.Azure.Batch.Common.DisableJobOption,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.JobOperations.DisableJob(System.String,Microsoft.Azure.Batch.Common.DisableJobOption,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: DisableJob(System.String,Microsoft.Azure.Batch.Common.DisableJobOption,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.JobOperations
  langs:
  - csharp
  - vb
  name: DisableJob(String, DisableJobOption, IEnumerable<BatchClientBehavior>)
  nameWithType: JobOperations.DisableJob(String, DisableJobOption, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.JobOperations.DisableJob(System.String, Microsoft.Azure.Batch.Common.DisableJobOption, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/JobOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DisableJob
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobOperations.cs
    startLine: 255
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nDisables the specified job.  Disabled jobs do not run new tasks, but may be re-enabled later.\n"
  remarks: This is a blocking operation. For a non-blocking equivalent, see <xref href="Microsoft.Azure.Batch.JobOperations.DisableJobAsync(System.String%2cMicrosoft.Azure.Batch.Common.DisableJobOption%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public void DisableJob(string jobId, DisableJobOption disableJobOption, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub DisableJob(jobId As String, disableJobOption As DisableJobOption, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: jobId
      type: System.String
      description: The id of the job.
    - id: disableJobOption
      type: Microsoft.Azure.Batch.Common.DisableJobOption
      description: Specifies what to do with active tasks associated with the job.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.JobOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.JobOperations.DisableJob*
  nameWithType.vb: JobOperations.DisableJob(String, DisableJobOption, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.JobOperations.DisableJob(System.String, Microsoft.Azure.Batch.Common.DisableJobOption, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: DisableJob(String, DisableJobOption, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.JobOperations.TerminateJobAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.JobOperations.TerminateJobAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: TerminateJobAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.JobOperations
  langs:
  - csharp
  - vb
  name: TerminateJobAsync(String, String, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: JobOperations.TerminateJobAsync(String, String, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.JobOperations.TerminateJobAsync(System.String, System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/JobOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: TerminateJobAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobOperations.cs
    startLine: 272
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nTerminates the specified job, marking it as completed.\n"
  remarks: The terminate operation runs asynchronously.
  example: []
  syntax:
    content: public Task TerminateJobAsync(string jobId, string terminateReason = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function TerminateJobAsync(jobId As String, terminateReason As String = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: jobId
      type: System.String
      description: The id of the job.
    - id: terminateReason
      type: System.String
      description: The text you want to appear as the job's <xref href="Microsoft.Azure.Batch.JobExecutionInformation.TerminateReason" data-throw-if-not-resolved="false"></xref>.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.JobOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> object that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.JobOperations.TerminateJobAsync*
  nameWithType.vb: JobOperations.TerminateJobAsync(String, String, IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.JobOperations.TerminateJobAsync(System.String, System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: TerminateJobAsync(String, String, IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.JobOperations.TerminateJob(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.JobOperations.TerminateJob(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: TerminateJob(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.JobOperations
  langs:
  - csharp
  - vb
  name: TerminateJob(String, String, IEnumerable<BatchClientBehavior>)
  nameWithType: JobOperations.TerminateJob(String, String, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.JobOperations.TerminateJob(System.String, System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/JobOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: TerminateJob
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobOperations.cs
    startLine: 293
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nTerminates the specified job, marking it as completed.\n"
  remarks: This is a blocking operation. For a non-blocking equivalent, see <xref href="Microsoft.Azure.Batch.JobOperations.TerminateJobAsync(System.String%2cSystem.String%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public void TerminateJob(string jobId, string terminateReason = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub TerminateJob(jobId As String, terminateReason As String = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: jobId
      type: System.String
      description: The id of the job.
    - id: terminateReason
      type: System.String
      description: The text you want to appear as the job's <xref href="Microsoft.Azure.Batch.JobExecutionInformation.TerminateReason" data-throw-if-not-resolved="false"></xref>.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.JobOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.JobOperations.TerminateJob*
  nameWithType.vb: JobOperations.TerminateJob(String, String, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.JobOperations.TerminateJob(System.String, System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: TerminateJob(String, String, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.JobOperations.DeleteJobAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.JobOperations.DeleteJobAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: DeleteJobAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.JobOperations
  langs:
  - csharp
  - vb
  name: DeleteJobAsync(String, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: JobOperations.DeleteJobAsync(String, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.JobOperations.DeleteJobAsync(System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/JobOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DeleteJobAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobOperations.cs
    startLine: 313
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nDeletes the specified job.\n"
  remarks: "\n<p>The delete operation requests that the job be deleted.  The request puts the job in the <xref href=\"Microsoft.Azure.Batch.Common.JobState.Deleting\" data-throw-if-not-resolved=\"false\"></xref> state.\nThe Batch service will stop any running tasks and perform the actual job deletion without any further client action.</p>\n<p>The delete operation runs asynchronously.</p>\n"
  example: []
  syntax:
    content: public Task DeleteJobAsync(string jobId, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function DeleteJobAsync(jobId As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: jobId
      type: System.String
      description: The id of the job.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.JobOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.JobOperations.DeleteJobAsync*
  nameWithType.vb: JobOperations.DeleteJobAsync(String, IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.JobOperations.DeleteJobAsync(System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: DeleteJobAsync(String, IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.JobOperations.DeleteJob(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.JobOperations.DeleteJob(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: DeleteJob(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.JobOperations
  langs:
  - csharp
  - vb
  name: DeleteJob(String, IEnumerable<BatchClientBehavior>)
  nameWithType: JobOperations.DeleteJob(String, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.JobOperations.DeleteJob(System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/JobOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DeleteJob
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobOperations.cs
    startLine: 333
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nDeletes the specified job.\n"
  remarks: "\n<p>The delete operation requests that the job be deleted.  The request puts the job in the <xref href=\"Microsoft.Azure.Batch.Common.JobState.Deleting\" data-throw-if-not-resolved=\"false\"></xref> state.\nThe Batch service will stop any running tasks and perform the actual job deletion without any further client action.</p>\n<p>This is a blocking operation. For a non-blocking equivalent, see <xref href=\"Microsoft.Azure.Batch.JobOperations.DeleteJobAsync(System.String%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public void DeleteJob(string jobId, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub DeleteJob(jobId As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: jobId
      type: System.String
      description: The id of the job.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.JobOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.JobOperations.DeleteJob*
  nameWithType.vb: JobOperations.DeleteJob(String, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.JobOperations.DeleteJob(System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: DeleteJob(String, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.JobOperations.ListTasks(System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.JobOperations.ListTasks(System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: ListTasks(System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.JobOperations
  langs:
  - csharp
  - vb
  name: ListTasks(String, DetailLevel, IEnumerable<BatchClientBehavior>)
  nameWithType: JobOperations.ListTasks(String, DetailLevel, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.JobOperations.ListTasks(System.String, Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/JobOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ListTasks
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobOperations.cs
    startLine: 368
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nEnumerates the <xref href=\"Microsoft.Azure.Batch.CloudTask\" data-throw-if-not-resolved=\"false\"></xref> of the specified job.\n"
  remarks: >-
    This method returns immediately; the tasks are retrieved from the Batch service only when the collection is enumerated.

    Retrieval is non-atomic; tasks are retrieved in pages during enumeration of the collection.
  example: []
  syntax:
    content: public IPagedEnumerable<CloudTask> ListTasks(string jobId, DetailLevel detailLevel = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Function ListTasks(jobId As String, detailLevel As DetailLevel = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing) As IPagedEnumerable(Of CloudTask)
    parameters:
    - id: jobId
      type: System.String
      description: The id of the job.
    - id: detailLevel
      type: Microsoft.Azure.Batch.DetailLevel
      description: A <xref href="Microsoft.Azure.Batch.DetailLevel" data-throw-if-not-resolved="false"></xref> used for filtering the list and for controlling which properties are retrieved from the service.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.JobOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref> and <span class="paramref">detailLevel</span>.
    return:
      type: Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.CloudTask}
      description: An <xref href="Microsoft.Azure.Batch.IPagedEnumerable%601" data-throw-if-not-resolved="false"></xref> that can be used to enumerate tasks asynchronously or synchronously.
  overload: Microsoft.Azure.Batch.JobOperations.ListTasks*
  nameWithType.vb: JobOperations.ListTasks(String, DetailLevel, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.JobOperations.ListTasks(System.String, Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: ListTasks(String, DetailLevel, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.JobOperations.GetTaskAsync(System.String,System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.JobOperations.GetTaskAsync(System.String,System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: GetTaskAsync(System.String,System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.JobOperations
  langs:
  - csharp
  - vb
  name: GetTaskAsync(String, String, DetailLevel, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: JobOperations.GetTaskAsync(String, String, DetailLevel, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.JobOperations.GetTaskAsync(System.String, System.String, Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/JobOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: GetTaskAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobOperations.cs
    startLine: 413
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the specified <xref href=\"Microsoft.Azure.Batch.CloudTask\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: The get task operation runs asynchronously.
  example: []
  syntax:
    content: public Task<CloudTask> GetTaskAsync(string jobId, string taskId, DetailLevel detailLevel = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function GetTaskAsync(jobId As String, taskId As String, detailLevel As DetailLevel = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of CloudTask)
    parameters:
    - id: jobId
      type: System.String
      description: The id of the job from which to get the task.
    - id: taskId
      type: System.String
      description: The id of the task to get.
    - id: detailLevel
      type: Microsoft.Azure.Batch.DetailLevel
      description: A <xref href="Microsoft.Azure.Batch.DetailLevel" data-throw-if-not-resolved="false"></xref> used for controlling which properties are retrieved from the service.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.JobOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref> and <span class="paramref">detailLevel</span>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.Batch.CloudTask}
      description: A <xref href="Microsoft.Azure.Batch.CloudTask" data-throw-if-not-resolved="false"></xref> containing information about the specified Azure Batch task.
  overload: Microsoft.Azure.Batch.JobOperations.GetTaskAsync*
  nameWithType.vb: JobOperations.GetTaskAsync(String, String, DetailLevel, IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.JobOperations.GetTaskAsync(System.String, System.String, Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: GetTaskAsync(String, String, DetailLevel, IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.JobOperations.GetTask(System.String,System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.JobOperations.GetTask(System.String,System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: GetTask(System.String,System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.JobOperations
  langs:
  - csharp
  - vb
  name: GetTask(String, String, DetailLevel, IEnumerable<BatchClientBehavior>)
  nameWithType: JobOperations.GetTask(String, String, DetailLevel, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.JobOperations.GetTask(System.String, System.String, Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/JobOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: GetTask
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobOperations.cs
    startLine: 437
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the specified <xref href=\"Microsoft.Azure.Batch.CloudTask\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: This is a blocking operation. For a non-blocking equivalent, see <xref href="Microsoft.Azure.Batch.JobOperations.GetTaskAsync(System.String%2cSystem.String%2cMicrosoft.Azure.Batch.DetailLevel%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public CloudTask GetTask(string jobId, string taskId, DetailLevel detailLevel = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Function GetTask(jobId As String, taskId As String, detailLevel As DetailLevel = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing) As CloudTask
    parameters:
    - id: jobId
      type: System.String
      description: The id of the job from which to get the task.
    - id: taskId
      type: System.String
      description: The id of the task to get.
    - id: detailLevel
      type: Microsoft.Azure.Batch.DetailLevel
      description: A <xref href="Microsoft.Azure.Batch.DetailLevel" data-throw-if-not-resolved="false"></xref> used for controlling which properties are retrieved from the service.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.JobOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref> and <span class="paramref">detailLevel</span>.
    return:
      type: Microsoft.Azure.Batch.CloudTask
      description: A <xref href="Microsoft.Azure.Batch.CloudTask" data-throw-if-not-resolved="false"></xref> containing information about the specified Azure Batch task.
  overload: Microsoft.Azure.Batch.JobOperations.GetTask*
  nameWithType.vb: JobOperations.GetTask(String, String, DetailLevel, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.JobOperations.GetTask(System.String, System.String, Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: GetTask(String, String, DetailLevel, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.JobOperations.ListSubtasks(System.String,System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.JobOperations.ListSubtasks(System.String,System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: ListSubtasks(System.String,System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.JobOperations
  langs:
  - csharp
  - vb
  name: ListSubtasks(String, String, DetailLevel, IEnumerable<BatchClientBehavior>)
  nameWithType: JobOperations.ListSubtasks(String, String, DetailLevel, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.JobOperations.ListSubtasks(System.String, System.String, Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/JobOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ListSubtasks
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobOperations.cs
    startLine: 457
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nEnumerates the <xref href=\"Microsoft.Azure.Batch.SubtaskInformation\" data-throw-if-not-resolved=\"false\"></xref> of the specified task.\n"
  remarks: >-
    This method returns immediately; the tasks are retrieved from the Batch service only when the collection is enumerated.

    Retrieval is non-atomic; tasks are retrieved in pages during enumeration of the collection.
  example: []
  syntax:
    content: public IPagedEnumerable<SubtaskInformation> ListSubtasks(string jobId, string taskId, DetailLevel detailLevel = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Function ListSubtasks(jobId As String, taskId As String, detailLevel As DetailLevel = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing) As IPagedEnumerable(Of SubtaskInformation)
    parameters:
    - id: jobId
      type: System.String
      description: The id of the job.
    - id: taskId
      type: System.String
      description: The id of the task to get.
    - id: detailLevel
      type: Microsoft.Azure.Batch.DetailLevel
      description: A <xref href="Microsoft.Azure.Batch.DetailLevel" data-throw-if-not-resolved="false"></xref> used for filtering the list and for controlling which properties are retrieved from the service.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.JobOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref> and <span class="paramref">detailLevel</span>.
    return:
      type: Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.SubtaskInformation}
      description: An <xref href="Microsoft.Azure.Batch.IPagedEnumerable%601" data-throw-if-not-resolved="false"></xref> that can be used to enumerate subtasks asynchronously or synchronously.
  overload: Microsoft.Azure.Batch.JobOperations.ListSubtasks*
  nameWithType.vb: JobOperations.ListSubtasks(String, String, DetailLevel, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.JobOperations.ListSubtasks(System.String, System.String, Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: ListSubtasks(String, String, DetailLevel, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.JobOperations.AddTaskAsync(System.String,Microsoft.Azure.Batch.CloudTask,System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.JobOperations.AddTaskAsync(System.String,Microsoft.Azure.Batch.CloudTask,System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: AddTaskAsync(System.String,Microsoft.Azure.Batch.CloudTask,System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.JobOperations
  langs:
  - csharp
  - vb
  name: AddTaskAsync(String, CloudTask, ConcurrentDictionary<Type, IFileStagingArtifact>, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: JobOperations.AddTaskAsync(String, CloudTask, ConcurrentDictionary<Type, IFileStagingArtifact>, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.JobOperations.AddTaskAsync(System.String, Microsoft.Azure.Batch.CloudTask, System.Collections.Concurrent.ConcurrentDictionary<System.Type, Microsoft.Azure.Batch.IFileStagingArtifact>, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/JobOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: AddTaskAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobOperations.cs
    startLine: 527
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nAdds a single task to a job.  To add multiple tasks,\nuse <xref href=\"Microsoft.Azure.Batch.JobOperations.AddTaskAsync(System.String%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.CloudTask%7d%2cMicrosoft.Azure.Batch.BatchClientParallelOptions%2cSystem.Collections.Concurrent.ConcurrentBag%7bSystem.Collections.Concurrent.ConcurrentDictionary%7bSystem.Type%2cMicrosoft.Azure.Batch.IFileStagingArtifact%7d%7d%2cSystem.Nullable%7bSystem.TimeSpan%7d%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\n<p>Each call to this method incurs a request to the Batch service. Therefore, using this method to add\nmultiple tasks is less efficient than using a bulk add method, and can incur HTTP connection restrictions.\nIf you are performing many of these operations in parallel and are seeing client side timeouts, please see \nhttp://msdn.microsoft.com/en-us/library/system.net.servicepointmanager.defaultconnectionlimit%28v=vs.110%29.aspx\nor use the multiple-task overload of AddTaskAsync.</p>\n<p>The add task operation runs asynchronously.</p>\n"
  example: []
  syntax:
    content: public Task AddTaskAsync(string jobId, CloudTask taskToAdd, ConcurrentDictionary<Type, IFileStagingArtifact> allFileStagingArtifacts = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function AddTaskAsync(jobId As String, taskToAdd As CloudTask, allFileStagingArtifacts As ConcurrentDictionary(Of Type, IFileStagingArtifact) = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: jobId
      type: System.String
      description: The id of the job to which to add the task.
    - id: taskToAdd
      type: Microsoft.Azure.Batch.CloudTask
      description: The <xref href="Microsoft.Azure.Batch.CloudTask" data-throw-if-not-resolved="false"></xref> to add.
    - id: allFileStagingArtifacts
      type: System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact}
      description: >-
        An optional collection to customize and receive information about the file staging process (see <xref href="Microsoft.Azure.Batch.CloudTask.FilesToStage" data-throw-if-not-resolved="false"></xref>).

        For more information see <xref href="Microsoft.Azure.Batch.IFileStagingArtifact" data-throw-if-not-resolved="false"></xref>.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.JobOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> object that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.JobOperations.AddTaskAsync*
  nameWithType.vb: JobOperations.AddTaskAsync(String, CloudTask, ConcurrentDictionary(Of Type, IFileStagingArtifact), IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.JobOperations.AddTaskAsync(System.String, Microsoft.Azure.Batch.CloudTask, System.Collections.Concurrent.ConcurrentDictionary(Of System.Type, Microsoft.Azure.Batch.IFileStagingArtifact), System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: AddTaskAsync(String, CloudTask, ConcurrentDictionary(Of Type, IFileStagingArtifact), IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.JobOperations.AddTask(System.String,Microsoft.Azure.Batch.CloudTask,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.JobOperations.AddTask(System.String,Microsoft.Azure.Batch.CloudTask,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: AddTask(System.String,Microsoft.Azure.Batch.CloudTask,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.JobOperations
  langs:
  - csharp
  - vb
  name: AddTask(String, CloudTask, IEnumerable<BatchClientBehavior>)
  nameWithType: JobOperations.AddTask(String, CloudTask, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.JobOperations.AddTask(System.String, Microsoft.Azure.Batch.CloudTask, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/JobOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: AddTask
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobOperations.cs
    startLine: 559
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nAdds a single task to a job.  To add multiple tasks,\nuse <xref href=\"Microsoft.Azure.Batch.JobOperations.AddTask(System.String%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.CloudTask%7d%2cMicrosoft.Azure.Batch.BatchClientParallelOptions%2cSystem.Collections.Concurrent.ConcurrentBag%7bSystem.Collections.Concurrent.ConcurrentDictionary%7bSystem.Type%2cMicrosoft.Azure.Batch.IFileStagingArtifact%7d%7d%2cSystem.Nullable%7bSystem.TimeSpan%7d%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\n<p>Each call to this method incurs a request to the Batch service. Therefore, using this method to add\nmultiple tasks is less efficient than using a bulk add method, and can incur HTTP connection restrictions.\nIf you are performing many of these operations in parallel and are seeing client side timeouts, please see \nhttp://msdn.microsoft.com/en-us/library/system.net.servicepointmanager.defaultconnectionlimit%28v=vs.110%29.aspx\nor use the multiple-task overload of AddTask.</p>\n<p>This is a blocking operation. For a non-blocking equivalent, see <xref href=\"Microsoft.Azure.Batch.JobOperations.AddTaskAsync(System.String%2cMicrosoft.Azure.Batch.CloudTask%2cSystem.Collections.Concurrent.ConcurrentDictionary%7bSystem.Type%2cMicrosoft.Azure.Batch.IFileStagingArtifact%7d%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public ConcurrentDictionary<Type, IFileStagingArtifact> AddTask(string jobId, CloudTask taskToAdd, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Function AddTask(jobId As String, taskToAdd As CloudTask, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing) As ConcurrentDictionary(Of Type, IFileStagingArtifact)
    parameters:
    - id: jobId
      type: System.String
      description: The id of the job to which to add the task.
    - id: taskToAdd
      type: Microsoft.Azure.Batch.CloudTask
      description: The <xref href="Microsoft.Azure.Batch.CloudTask" data-throw-if-not-resolved="false"></xref> to add.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.JobOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact}
      description: >-
        A collection of information about the file staging process (see <xref href="Microsoft.Azure.Batch.CloudTask.FilesToStage" data-throw-if-not-resolved="false"></xref>).

        For more information see <xref href="Microsoft.Azure.Batch.IFileStagingArtifact" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.JobOperations.AddTask*
  nameWithType.vb: JobOperations.AddTask(String, CloudTask, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.JobOperations.AddTask(System.String, Microsoft.Azure.Batch.CloudTask, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: AddTask(String, CloudTask, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.JobOperations.ListNodeFiles(System.String,System.String,System.Nullable{System.Boolean},Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.JobOperations.ListNodeFiles(System.String,System.String,System.Nullable{System.Boolean},Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: ListNodeFiles(System.String,System.String,System.Nullable{System.Boolean},Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.JobOperations
  langs:
  - csharp
  - vb
  name: ListNodeFiles(String, String, Nullable<Boolean>, DetailLevel, IEnumerable<BatchClientBehavior>)
  nameWithType: JobOperations.ListNodeFiles(String, String, Nullable<Boolean>, DetailLevel, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.JobOperations.ListNodeFiles(System.String, System.String, System.Nullable<System.Boolean>, Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/JobOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ListNodeFiles
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobOperations.cs
    startLine: 625
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nEnumerates the <xref href=\"Microsoft.Azure.Batch.NodeFile\" data-throw-if-not-resolved=\"false\"></xref> in the specified task's directory on its compute node.\n"
  remarks: >-
    This method returns immediately; the file data is retrieved from the Batch service only when the collection is enumerated.

    Retrieval is non-atomic; file data is retrieved in pages during enumeration of the collection.
  example: []
  syntax:
    content: public IPagedEnumerable<NodeFile> ListNodeFiles(string jobId, string taskId, bool ? recursive = null, DetailLevel detailLevel = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Function ListNodeFiles(jobId As String, taskId As String, recursive As Boolean? = Nothing, detailLevel As DetailLevel = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing) As IPagedEnumerable(Of NodeFile)
    parameters:
    - id: jobId
      type: System.String
      description: The id of the job.
    - id: taskId
      type: System.String
      description: The id of the task.
    - id: recursive
      type: System.Nullable{System.Boolean}
      description: If true, performs a recursive list of all files of the task. If false, returns only the files in the root task directory.
    - id: detailLevel
      type: Microsoft.Azure.Batch.DetailLevel
      description: A <xref href="Microsoft.Azure.Batch.DetailLevel" data-throw-if-not-resolved="false"></xref> used for filtering the list and for controlling which properties are retrieved from the service.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.JobOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref> and <span class="paramref">detailLevel</span>.
    return:
      type: Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.NodeFile}
      description: An <xref href="Microsoft.Azure.Batch.IPagedEnumerable%601" data-throw-if-not-resolved="false"></xref> that can be used to enumerate files asynchronously or synchronously.
  overload: Microsoft.Azure.Batch.JobOperations.ListNodeFiles*
  nameWithType.vb: JobOperations.ListNodeFiles(String, String, Nullable(Of Boolean), DetailLevel, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.JobOperations.ListNodeFiles(System.String, System.String, System.Nullable(Of System.Boolean), Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: ListNodeFiles(String, String, Nullable(Of Boolean), DetailLevel, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.JobOperations.TerminateTaskAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.JobOperations.TerminateTaskAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: TerminateTaskAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.JobOperations
  langs:
  - csharp
  - vb
  name: TerminateTaskAsync(String, String, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: JobOperations.TerminateTaskAsync(String, String, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.JobOperations.TerminateTaskAsync(System.String, System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/JobOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: TerminateTaskAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobOperations.cs
    startLine: 650
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nTerminates the specified task.\n"
  remarks: The terminate operation runs asynchronously.
  example: []
  syntax:
    content: public Task TerminateTaskAsync(string jobId, string taskId, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function TerminateTaskAsync(jobId As String, taskId As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: jobId
      type: System.String
      description: The id of the job containing the task.
    - id: taskId
      type: System.String
      description: The id of the task.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.JobOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.JobOperations.TerminateTaskAsync*
  nameWithType.vb: JobOperations.TerminateTaskAsync(String, String, IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.JobOperations.TerminateTaskAsync(System.String, System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: TerminateTaskAsync(String, String, IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.JobOperations.TerminateTask(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.JobOperations.TerminateTask(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: TerminateTask(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.JobOperations
  langs:
  - csharp
  - vb
  name: TerminateTask(String, String, IEnumerable<BatchClientBehavior>)
  nameWithType: JobOperations.TerminateTask(String, String, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.JobOperations.TerminateTask(System.String, System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/JobOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: TerminateTask
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobOperations.cs
    startLine: 672
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nTerminates the specified task.\n"
  remarks: This is a blocking operation.  For a non-blocking equivalent, see <xref href="Microsoft.Azure.Batch.JobOperations.TerminateTaskAsync(System.String%2cSystem.String%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public void TerminateTask(string jobId, string taskId, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub TerminateTask(jobId As String, taskId As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: jobId
      type: System.String
      description: The id of the job containing the task.
    - id: taskId
      type: System.String
      description: The id of the task.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.JobOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.JobOperations.TerminateTask*
  nameWithType.vb: JobOperations.TerminateTask(String, String, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.JobOperations.TerminateTask(System.String, System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: TerminateTask(String, String, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.JobOperations.DeleteTaskAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.JobOperations.DeleteTaskAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: DeleteTaskAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.JobOperations
  langs:
  - csharp
  - vb
  name: DeleteTaskAsync(String, String, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: JobOperations.DeleteTaskAsync(String, String, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.JobOperations.DeleteTaskAsync(System.String, System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/JobOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DeleteTaskAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobOperations.cs
    startLine: 692
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nDeletes the specified task.\n"
  remarks: The delete operation runs asynchronously.
  example: []
  syntax:
    content: public Task DeleteTaskAsync(string jobId, string taskId, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function DeleteTaskAsync(jobId As String, taskId As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: jobId
      type: System.String
      description: The id of the job containing the task.
    - id: taskId
      type: System.String
      description: The id of the task.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.JobOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.JobOperations.DeleteTaskAsync*
  nameWithType.vb: JobOperations.DeleteTaskAsync(String, String, IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.JobOperations.DeleteTaskAsync(System.String, System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: DeleteTaskAsync(String, String, IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.JobOperations.DeleteTask(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.JobOperations.DeleteTask(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: DeleteTask(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.JobOperations
  langs:
  - csharp
  - vb
  name: DeleteTask(String, String, IEnumerable<BatchClientBehavior>)
  nameWithType: JobOperations.DeleteTask(String, String, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.JobOperations.DeleteTask(System.String, System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/JobOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DeleteTask
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobOperations.cs
    startLine: 713
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nDeletes the specified task.\n"
  remarks: This is a blocking operation.  For a non-blocking equivalent, see <xref href="Microsoft.Azure.Batch.JobOperations.DeleteTaskAsync(System.String%2cSystem.String%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public void DeleteTask(string jobId, string taskId, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub DeleteTask(jobId As String, taskId As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: jobId
      type: System.String
      description: The id of the job containing the task.
    - id: taskId
      type: System.String
      description: The id of the task.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.JobOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.JobOperations.DeleteTask*
  nameWithType.vb: JobOperations.DeleteTask(String, String, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.JobOperations.DeleteTask(System.String, System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: DeleteTask(String, String, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.JobOperations.ReactivateTaskAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.JobOperations.ReactivateTaskAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: ReactivateTaskAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.JobOperations
  langs:
  - csharp
  - vb
  name: ReactivateTaskAsync(String, String, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: JobOperations.ReactivateTaskAsync(String, String, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.JobOperations.ReactivateTaskAsync(System.String, System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/JobOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ReactivateTaskAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobOperations.cs
    startLine: 744
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nReactivates a task, allowing it to run again even if its retry count has been exhausted.\n"
  remarks: "\n<p>\nReactivation makes a task eligible to be retried again up to its maximum retry count.\n</p> \n<p>\nAdditionally, this will fail if the job is in the <xref href=\"Microsoft.Azure.Batch.Common.JobState.Completed\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Azure.Batch.Common.JobState.Terminating\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Azure.Batch.Common.JobState.Deleting\" data-throw-if-not-resolved=\"false\"></xref> state.\nThis is a blocking operation. For a non-blocking equivalent, see <xref href=\"Microsoft.Azure.Batch.JobOperations.ReactivateTaskAsync(System.String%2cSystem.String%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n<p>\nThe reactivate operation runs asynchronously.\n</p>\n"
  example: []
  syntax:
    content: public Task ReactivateTaskAsync(string jobId, string taskId, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function ReactivateTaskAsync(jobId As String, taskId As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: jobId
      type: System.String
      description: The id of the job containing the task.
    - id: taskId
      type: System.String
      description: The id of the task.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.JobOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.JobOperations.ReactivateTaskAsync*
  nameWithType.vb: JobOperations.ReactivateTaskAsync(String, String, IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.JobOperations.ReactivateTaskAsync(System.String, System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: ReactivateTaskAsync(String, String, IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.JobOperations.ReactivateTask(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.JobOperations.ReactivateTask(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: ReactivateTask(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.JobOperations
  langs:
  - csharp
  - vb
  name: ReactivateTask(String, String, IEnumerable<BatchClientBehavior>)
  nameWithType: JobOperations.ReactivateTask(String, String, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.JobOperations.ReactivateTask(System.String, System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/JobOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ReactivateTask
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobOperations.cs
    startLine: 776
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nReactivates a task, allowing it to run again even if its retry count has been exhausted.\n"
  remarks: "\n<p>\nReactivation makes a task eligible to be retried again up to its maximum retry count.\n</p> \n<p>\nThis operation will fail for tasks that are not completed or that previously completed successfully (with an exit code of 0).\n</p>\n<p>\nAdditionally, this will fail if the job is in the <xref href=\"Microsoft.Azure.Batch.Common.JobState.Completed\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Azure.Batch.Common.JobState.Terminating\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Azure.Batch.Common.JobState.Deleting\" data-throw-if-not-resolved=\"false\"></xref> state.\nThis is a blocking operation. For a non-blocking equivalent, see <xref href=\"Microsoft.Azure.Batch.JobOperations.ReactivateTaskAsync(System.String%2cSystem.String%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n"
  example: []
  syntax:
    content: public void ReactivateTask(string jobId, string taskId, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub ReactivateTask(jobId As String, taskId As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: jobId
      type: System.String
      description: The id of the job containing the task.
    - id: taskId
      type: System.String
      description: The id of the task.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.JobOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.JobOperations.ReactivateTask*
  nameWithType.vb: JobOperations.ReactivateTask(String, String, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.JobOperations.ReactivateTask(System.String, System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: ReactivateTask(String, String, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.JobOperations.GetNodeFileAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.JobOperations.GetNodeFileAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: GetNodeFileAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.JobOperations
  langs:
  - csharp
  - vb
  name: GetNodeFileAsync(String, String, String, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: JobOperations.GetNodeFileAsync(String, String, String, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.JobOperations.GetNodeFileAsync(System.String, System.String, System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/JobOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: GetNodeFileAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobOperations.cs
    startLine: 819
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the specified <xref href=\"Microsoft.Azure.Batch.NodeFile\" data-throw-if-not-resolved=\"false\"></xref> from the specified task's directory on its compute node.\n"
  remarks: The get file operation runs asynchronously.
  example: []
  syntax:
    content: public Task<NodeFile> GetNodeFileAsync(string jobId, string taskId, string fileName, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function GetNodeFileAsync(jobId As String, taskId As String, fileName As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of NodeFile)
    parameters:
    - id: jobId
      type: System.String
      description: The id of the job containing the task.
    - id: taskId
      type: System.String
      description: The id of the task.
    - id: fileName
      type: System.String
      description: The name of the file to retrieve.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.JobOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.Batch.NodeFile}
      description: A <xref href="Microsoft.Azure.Batch.NodeFile" data-throw-if-not-resolved="false"></xref> representing the specified file.
  overload: Microsoft.Azure.Batch.JobOperations.GetNodeFileAsync*
  nameWithType.vb: JobOperations.GetNodeFileAsync(String, String, String, IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.JobOperations.GetNodeFileAsync(System.String, System.String, System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: GetNodeFileAsync(String, String, String, IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.JobOperations.GetNodeFile(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.JobOperations.GetNodeFile(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: GetNodeFile(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.JobOperations
  langs:
  - csharp
  - vb
  name: GetNodeFile(String, String, String, IEnumerable<BatchClientBehavior>)
  nameWithType: JobOperations.GetNodeFile(String, String, String, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.JobOperations.GetNodeFile(System.String, System.String, System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/JobOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: GetNodeFile
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobOperations.cs
    startLine: 843
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the specified <xref href=\"Microsoft.Azure.Batch.NodeFile\" data-throw-if-not-resolved=\"false\"></xref> from the specified task's directory on its compute node.\n"
  remarks: This is a blocking operation.  For a non-blocking equivalent, see <xref href="Microsoft.Azure.Batch.JobOperations.GetNodeFileAsync(System.String%2cSystem.String%2cSystem.String%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public NodeFile GetNodeFile(string jobId, string taskId, string fileName, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Function GetNodeFile(jobId As String, taskId As String, fileName As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing) As NodeFile
    parameters:
    - id: jobId
      type: System.String
      description: The id of the job containing the task.
    - id: taskId
      type: System.String
      description: The id of the task.
    - id: fileName
      type: System.String
      description: The name of the file to retrieve.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.JobOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.Azure.Batch.NodeFile
      description: A <xref href="Microsoft.Azure.Batch.NodeFile" data-throw-if-not-resolved="false"></xref> representing the specified file.
  overload: Microsoft.Azure.Batch.JobOperations.GetNodeFile*
  nameWithType.vb: JobOperations.GetNodeFile(String, String, String, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.JobOperations.GetNodeFile(System.String, System.String, System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: GetNodeFile(String, String, String, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.JobOperations.DeleteNodeFileAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.JobOperations.DeleteNodeFileAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: DeleteNodeFileAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.JobOperations
  langs:
  - csharp
  - vb
  name: DeleteNodeFileAsync(String, String, String, Nullable<Boolean>, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: JobOperations.DeleteNodeFileAsync(String, String, String, Nullable<Boolean>, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.JobOperations.DeleteNodeFileAsync(System.String, System.String, System.String, System.Nullable<System.Boolean>, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/JobOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DeleteNodeFileAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobOperations.cs
    startLine: 872
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nDeletes the specified file from the task's directory on its compute node.\n"
  remarks: The delete operation runs asynchronously.
  example: []
  syntax:
    content: public Task DeleteNodeFileAsync(string jobId, string taskId, string fileName, bool ? recursive = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function DeleteNodeFileAsync(jobId As String, taskId As String, fileName As String, recursive As Boolean? = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: jobId
      type: System.String
      description: The id of the job containing the task.
    - id: taskId
      type: System.String
      description: The id of the task.
    - id: fileName
      type: System.String
      description: The name of the file to delete.
    - id: recursive
      type: System.Nullable{System.Boolean}
      description: "\nIf the file-path parameter represents a directory instead of a file, you can set the optional \nrecursive parameter to true to delete the directory and all of the files and subdirectories in it. If recursive is false \nthen the directory must be empty or deletion will fail.\n"
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.JobOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.JobOperations.DeleteNodeFileAsync*
  nameWithType.vb: JobOperations.DeleteNodeFileAsync(String, String, String, Nullable(Of Boolean), IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.JobOperations.DeleteNodeFileAsync(System.String, System.String, System.String, System.Nullable(Of System.Boolean), System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: DeleteNodeFileAsync(String, String, String, Nullable(Of Boolean), IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.JobOperations.DeleteNodeFile(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.JobOperations.DeleteNodeFile(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: DeleteNodeFile(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.JobOperations
  langs:
  - csharp
  - vb
  name: DeleteNodeFile(String, String, String, Nullable<Boolean>, IEnumerable<BatchClientBehavior>)
  nameWithType: JobOperations.DeleteNodeFile(String, String, String, Nullable<Boolean>, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.JobOperations.DeleteNodeFile(System.String, System.String, System.String, System.Nullable<System.Boolean>, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/JobOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DeleteNodeFile
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobOperations.cs
    startLine: 908
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nDeletes the specified file from the task's directory on its compute node.\n"
  remarks: This is a blocking operation.  For a non-blocking equivalent, see <xref href="Microsoft.Azure.Batch.JobOperations.DeleteNodeFileAsync(System.String%2cSystem.String%2cSystem.String%2cSystem.Nullable%7bSystem.Boolean%7d%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public void DeleteNodeFile(string jobId, string taskId, string fileName, bool ? recursive = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub DeleteNodeFile(jobId As String, taskId As String, fileName As String, recursive As Boolean? = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: jobId
      type: System.String
      description: The id of the job containing the task.
    - id: taskId
      type: System.String
      description: The id of the task.
    - id: fileName
      type: System.String
      description: The name of the file to delete.
    - id: recursive
      type: System.Nullable{System.Boolean}
      description: "\nIf the file-path parameter represents a directory instead of a file, you can set the optional \nrecursive parameter to true to delete the directory and all of the files and subdirectories in it. If recursive is false \nthen the directory must be empty or deletion will fail.\n"
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.JobOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.JobOperations.DeleteNodeFile*
  nameWithType.vb: JobOperations.DeleteNodeFile(String, String, String, Nullable(Of Boolean), IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.JobOperations.DeleteNodeFile(System.String, System.String, System.String, System.Nullable(Of System.Boolean), System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: DeleteNodeFile(String, String, String, Nullable(Of Boolean), IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.JobOperations.AddTaskAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask},Microsoft.Azure.Batch.BatchClientParallelOptions,System.Collections.Concurrent.ConcurrentBag{System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact}},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.JobOperations.AddTaskAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask},Microsoft.Azure.Batch.BatchClientParallelOptions,System.Collections.Concurrent.ConcurrentBag{System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact}},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: AddTaskAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask},Microsoft.Azure.Batch.BatchClientParallelOptions,System.Collections.Concurrent.ConcurrentBag{System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact}},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.JobOperations
  langs:
  - csharp
  - vb
  name: AddTaskAsync(String, IEnumerable<CloudTask>, BatchClientParallelOptions, ConcurrentBag<ConcurrentDictionary<Type, IFileStagingArtifact>>, Nullable<TimeSpan>, IEnumerable<BatchClientBehavior>)
  nameWithType: JobOperations.AddTaskAsync(String, IEnumerable<CloudTask>, BatchClientParallelOptions, ConcurrentBag<ConcurrentDictionary<Type, IFileStagingArtifact>>, Nullable<TimeSpan>, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.JobOperations.AddTaskAsync(System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.CloudTask>, Microsoft.Azure.Batch.BatchClientParallelOptions, System.Collections.Concurrent.ConcurrentBag<System.Collections.Concurrent.ConcurrentDictionary<System.Type, Microsoft.Azure.Batch.IFileStagingArtifact>>, System.Nullable<System.TimeSpan>, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/JobOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: AddTaskAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobOperations.cs
    startLine: 973
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nAdds tasks to a job.\n"
  remarks: "\n<p>The add task operation runs asynchronously.</p>\n<p>This method is not atomic; that is, it is possible for the method to start adding tasks and\nthen fail. The collection of tasks to add is broken down into chunks of size at most <xref href=\"Microsoft.Azure.Batch.Constants.MaxTasksInSingleAddTaskCollectionRequest\" data-throw-if-not-resolved=\"false\"></xref>,\nand an AddTaskCollection request is issued for each chunk.  Requests may be issued in parallel according to\nthe <span class=\"paramref\">parallelOptions</span>.</p>\n<p>Issuing a large number of simultaneous requests to the Batch service can incur HTTP connection restrictions.\nIf you are performing many of these operations in parallel (or have specified a large MaxDegreeOfParallelism in\nthe parallelOptions) and are seeing client side timeouts, please see \nhttp://msdn.microsoft.com/en-us/library/system.net.servicepointmanager.defaultconnectionlimit%28v=vs.110%29.aspx .</p>\n<p>The progress of the operation in the face of errors is determined by <xref href=\"Microsoft.Azure.Batch.AddTaskCollectionResultHandler\" data-throw-if-not-resolved=\"false\"></xref> behavior.\nYou do not normally need to specify this behavior, as the Batch client uses a default which works in normal circumstances.\nIf you do want to customize this behavior, specify an AddTaskCollectionResultHandler in the <xref href=\"Microsoft.Azure.Batch.JobOperations.CustomBehaviors\" data-throw-if-not-resolved=\"false\"></xref>\nor <span class=\"paramref\">additionalBehaviors</span> collections.</p>\n"
  example: []
  syntax:
    content: public Task AddTaskAsync(string jobId, IEnumerable<CloudTask> tasksToAdd, BatchClientParallelOptions parallelOptions = null, ConcurrentBag<ConcurrentDictionary<Type, IFileStagingArtifact>> fileStagingArtifacts = null, TimeSpan? timeout = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Function AddTaskAsync(jobId As String, tasksToAdd As IEnumerable(Of CloudTask), parallelOptions As BatchClientParallelOptions = Nothing, fileStagingArtifacts As ConcurrentBag(Of ConcurrentDictionary(Of Type, IFileStagingArtifact)) = Nothing, timeout As TimeSpan? = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing) As Task
    parameters:
    - id: jobId
      type: System.String
      description: The id of the job to which to add the tasks.
    - id: tasksToAdd
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask}
      description: The <xref href="Microsoft.Azure.Batch.CloudTask" data-throw-if-not-resolved="false"></xref>s to add.
    - id: parallelOptions
      type: Microsoft.Azure.Batch.BatchClientParallelOptions
      description: "\nControls the number of simultaneous parallel AddTaskCollection requests issued to the Batch service.  Each AddTaskCollection request contains at most\n<xref href=\"Microsoft.Azure.Batch.Constants.MaxTasksInSingleAddTaskCollectionRequest\" data-throw-if-not-resolved=\"false\"></xref> tasks in it.\nAlso controls the cancellation token for the operation.\nIf omitted, the default is used (see <xref href=\"Microsoft.Azure.Batch.BatchClientParallelOptions\" data-throw-if-not-resolved=\"false\"></xref>.)\n"
    - id: fileStagingArtifacts
      type: System.Collections.Concurrent.ConcurrentBag{System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact}}
      description: >-
        An optional collection to receive information about the file staging process (see <xref href="Microsoft.Azure.Batch.CloudTask.FilesToStage" data-throw-if-not-resolved="false"></xref>).

        An entry is added to the <xref href="System.Collections.Concurrent.ConcurrentBag%601" data-throw-if-not-resolved="false"></xref> for each set of tasks grouped for submission to the Batch service.

        Unlike single-task adds, you cannot use this parameter to customize the file staging process.

        For more information about the format of each entry, see <xref href="Microsoft.Azure.Batch.IFileStagingArtifact" data-throw-if-not-resolved="false"></xref>.
    - id: timeout
      type: System.Nullable{System.TimeSpan}
      description: The amount of time after which the operation times out.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.JobOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> object that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.JobOperations.AddTaskAsync*
  exceptions:
  - type: Microsoft.Azure.Batch.ParallelOperationsException
    commentId: T:Microsoft.Azure.Batch.ParallelOperationsException
    description: Thrown if one or more requests to the Batch service fail.
  nameWithType.vb: JobOperations.AddTaskAsync(String, IEnumerable(Of CloudTask), BatchClientParallelOptions, ConcurrentBag(Of ConcurrentDictionary(Of Type, IFileStagingArtifact)), Nullable(Of TimeSpan), IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.JobOperations.AddTaskAsync(System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.CloudTask), Microsoft.Azure.Batch.BatchClientParallelOptions, System.Collections.Concurrent.ConcurrentBag(Of System.Collections.Concurrent.ConcurrentDictionary(Of System.Type, Microsoft.Azure.Batch.IFileStagingArtifact)), System.Nullable(Of System.TimeSpan), System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: AddTaskAsync(String, IEnumerable(Of CloudTask), BatchClientParallelOptions, ConcurrentBag(Of ConcurrentDictionary(Of Type, IFileStagingArtifact)), Nullable(Of TimeSpan), IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.JobOperations.AddTask(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask},Microsoft.Azure.Batch.BatchClientParallelOptions,System.Collections.Concurrent.ConcurrentBag{System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact}},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.JobOperations.AddTask(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask},Microsoft.Azure.Batch.BatchClientParallelOptions,System.Collections.Concurrent.ConcurrentBag{System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact}},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: AddTask(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask},Microsoft.Azure.Batch.BatchClientParallelOptions,System.Collections.Concurrent.ConcurrentBag{System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact}},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.JobOperations
  langs:
  - csharp
  - vb
  name: AddTask(String, IEnumerable<CloudTask>, BatchClientParallelOptions, ConcurrentBag<ConcurrentDictionary<Type, IFileStagingArtifact>>, Nullable<TimeSpan>, IEnumerable<BatchClientBehavior>)
  nameWithType: JobOperations.AddTask(String, IEnumerable<CloudTask>, BatchClientParallelOptions, ConcurrentBag<ConcurrentDictionary<Type, IFileStagingArtifact>>, Nullable<TimeSpan>, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.JobOperations.AddTask(System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.CloudTask>, Microsoft.Azure.Batch.BatchClientParallelOptions, System.Collections.Concurrent.ConcurrentBag<System.Collections.Concurrent.ConcurrentDictionary<System.Type, Microsoft.Azure.Batch.IFileStagingArtifact>>, System.Nullable<System.TimeSpan>, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/JobOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: AddTask
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobOperations.cs
    startLine: 1026
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nAdds tasks to a job.\n"
  remarks: "\n<p>This is a blocking operation; for a non-blocking equivalent, see <xref href=\"Microsoft.Azure.Batch.JobOperations.AddTaskAsync(System.String%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.CloudTask%7d%2cMicrosoft.Azure.Batch.BatchClientParallelOptions%2cSystem.Collections.Concurrent.ConcurrentBag%7bSystem.Collections.Concurrent.ConcurrentDictionary%7bSystem.Type%2cMicrosoft.Azure.Batch.IFileStagingArtifact%7d%7d%2cSystem.Nullable%7bSystem.TimeSpan%7d%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is not atomic; that is, it is possible for the method to start adding tasks and\nthen fail. The collection of tasks to add is broken down into chunks of size at most <xref href=\"Microsoft.Azure.Batch.Constants.MaxTasksInSingleAddTaskCollectionRequest\" data-throw-if-not-resolved=\"false\"></xref>,\nand an AddTaskCollection request is issued for each chunk.  Requests may be issued in parallel according to\nthe <span class=\"paramref\">parallelOptions</span>.</p>\n<p>Issuing a large number of simultaneous requests to the Batch service can incur HTTP connection restrictions.\nIf you are performing many of these operations in parallel (or have specified a large MaxDegreeOfParallelism in\nthe parallelOptions) and are seeing client side timeouts, please see \nhttp://msdn.microsoft.com/en-us/library/system.net.servicepointmanager.defaultconnectionlimit%28v=vs.110%29.aspx .</p>\n<p>The progress of the operation in the face of errors is determined by <xref href=\"Microsoft.Azure.Batch.AddTaskCollectionResultHandler\" data-throw-if-not-resolved=\"false\"></xref> behavior.\nYou do not normally need to specify this behavior, as the Batch client uses a default which works in normal circumstances.\nIf you do want to customize this behavior, specify an AddTaskCollectionResultHandler in the <xref href=\"Microsoft.Azure.Batch.JobOperations.CustomBehaviors\" data-throw-if-not-resolved=\"false\"></xref>\nor <span class=\"paramref\">additionalBehaviors</span> collections.</p>\n"
  example: []
  syntax:
    content: public void AddTask(string jobId, IEnumerable<CloudTask> tasksToAdd, BatchClientParallelOptions parallelOptions = null, ConcurrentBag<ConcurrentDictionary<Type, IFileStagingArtifact>> fileStagingArtifacts = null, TimeSpan? timeout = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub AddTask(jobId As String, tasksToAdd As IEnumerable(Of CloudTask), parallelOptions As BatchClientParallelOptions = Nothing, fileStagingArtifacts As ConcurrentBag(Of ConcurrentDictionary(Of Type, IFileStagingArtifact)) = Nothing, timeout As TimeSpan? = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: jobId
      type: System.String
      description: The id of the job to which to add the tasks.
    - id: tasksToAdd
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask}
      description: The <xref href="Microsoft.Azure.Batch.CloudTask" data-throw-if-not-resolved="false"></xref>s to add.
    - id: parallelOptions
      type: Microsoft.Azure.Batch.BatchClientParallelOptions
      description: "\nControls the number of simultaneous parallel AddTaskCollection requests issued to the Batch service.  Each AddTaskCollection request contains at most\n<xref href=\"Microsoft.Azure.Batch.Constants.MaxTasksInSingleAddTaskCollectionRequest\" data-throw-if-not-resolved=\"false\"></xref> tasks in it.\nAlso controls the cancellation token for the operation.\nIf omitted, the default is used (see <xref href=\"Microsoft.Azure.Batch.BatchClientParallelOptions\" data-throw-if-not-resolved=\"false\"></xref>.)\n"
    - id: fileStagingArtifacts
      type: System.Collections.Concurrent.ConcurrentBag{System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact}}
      description: >-
        An optional collection to receive information about the file staging process (see <xref href="Microsoft.Azure.Batch.CloudTask.FilesToStage" data-throw-if-not-resolved="false"></xref>).

        An entry is added to the <xref href="System.Collections.Concurrent.ConcurrentBag%601" data-throw-if-not-resolved="false"></xref> for each set of tasks grouped for submission to the Batch service.

        Unlike single-task adds, you cannot use this parameter to customize the file staging process.

        For more information about the format of each entry, see <xref href="Microsoft.Azure.Batch.IFileStagingArtifact" data-throw-if-not-resolved="false"></xref>.
    - id: timeout
      type: System.Nullable{System.TimeSpan}
      description: The amount of time after which the operation times out.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.JobOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.JobOperations.AddTask*
  exceptions:
  - type: Microsoft.Azure.Batch.ParallelOperationsException
    commentId: T:Microsoft.Azure.Batch.ParallelOperationsException
    description: Thrown if one or more requests to the Batch service fail.
  nameWithType.vb: JobOperations.AddTask(String, IEnumerable(Of CloudTask), BatchClientParallelOptions, ConcurrentBag(Of ConcurrentDictionary(Of Type, IFileStagingArtifact)), Nullable(Of TimeSpan), IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.JobOperations.AddTask(System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.CloudTask), Microsoft.Azure.Batch.BatchClientParallelOptions, System.Collections.Concurrent.ConcurrentBag(Of System.Collections.Concurrent.ConcurrentDictionary(Of System.Type, Microsoft.Azure.Batch.IFileStagingArtifact)), System.Nullable(Of System.TimeSpan), System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: AddTask(String, IEnumerable(Of CloudTask), BatchClientParallelOptions, ConcurrentBag(Of ConcurrentDictionary(Of Type, IFileStagingArtifact)), Nullable(Of TimeSpan), IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.JobOperations.GetAllJobsLifetimeStatisticsAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.JobOperations.GetAllJobsLifetimeStatisticsAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: GetAllJobsLifetimeStatisticsAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.JobOperations
  langs:
  - csharp
  - vb
  name: GetAllJobsLifetimeStatisticsAsync(IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: JobOperations.GetAllJobsLifetimeStatisticsAsync(IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.JobOperations.GetAllJobsLifetimeStatisticsAsync(System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/JobOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: GetAllJobsLifetimeStatisticsAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobOperations.cs
    startLine: 1054
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets lifetime summary statistics for all of the jobs in the current account.  \nStatistics are aggregated across all jobs that have ever existed in the account, from account creation to the last update time of the statistics. \n"
  remarks: The get statistics operation runs asynchronously.
  example: []
  syntax:
    content: public Task<JobStatistics> GetAllJobsLifetimeStatisticsAsync(IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function GetAllJobsLifetimeStatisticsAsync(additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of JobStatistics)
    parameters:
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.JobOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.Batch.JobStatistics}
      description: The aggregated job statistics.
  overload: Microsoft.Azure.Batch.JobOperations.GetAllJobsLifetimeStatisticsAsync*
  nameWithType.vb: JobOperations.GetAllJobsLifetimeStatisticsAsync(IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.JobOperations.GetAllJobsLifetimeStatisticsAsync(System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: GetAllJobsLifetimeStatisticsAsync(IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.JobOperations.GetAllJobsLifetimeStatistics(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.JobOperations.GetAllJobsLifetimeStatistics(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: GetAllJobsLifetimeStatistics(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.JobOperations
  langs:
  - csharp
  - vb
  name: GetAllJobsLifetimeStatistics(IEnumerable<BatchClientBehavior>)
  nameWithType: JobOperations.GetAllJobsLifetimeStatistics(IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.JobOperations.GetAllJobsLifetimeStatistics(System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/JobOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: GetAllJobsLifetimeStatistics
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobOperations.cs
    startLine: 1080
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets lifetime summary statistics for all of the jobs in the current account.  \nStatistics are aggregated across all jobs that have ever existed in the account, from account creation to the last update time of the statistics. \n"
  remarks: This is a blocking operation; for a non-blocking equivalent, see <xref href="Microsoft.Azure.Batch.JobOperations.GetAllJobsLifetimeStatisticsAsync(System.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public JobStatistics GetAllJobsLifetimeStatistics(IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Function GetAllJobsLifetimeStatistics(additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing) As JobStatistics
    parameters:
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.JobOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.Azure.Batch.JobStatistics
      description: The aggregated job statistics.
  overload: Microsoft.Azure.Batch.JobOperations.GetAllJobsLifetimeStatistics*
  nameWithType.vb: JobOperations.GetAllJobsLifetimeStatistics(IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.JobOperations.GetAllJobsLifetimeStatistics(System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: GetAllJobsLifetimeStatistics(IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.JobOperations.ListJobPreparationAndReleaseTaskStatus(System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.JobOperations.ListJobPreparationAndReleaseTaskStatus(System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: ListJobPreparationAndReleaseTaskStatus(System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.JobOperations
  langs:
  - csharp
  - vb
  name: ListJobPreparationAndReleaseTaskStatus(String, DetailLevel, IEnumerable<BatchClientBehavior>)
  nameWithType: JobOperations.ListJobPreparationAndReleaseTaskStatus(String, DetailLevel, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.JobOperations.ListJobPreparationAndReleaseTaskStatus(System.String, Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/JobOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ListJobPreparationAndReleaseTaskStatus
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobOperations.cs
    startLine: 1099
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nEnumerates the status of <xref href=\"Microsoft.Azure.Batch.CloudJob.JobPreparationTask\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"Microsoft.Azure.Batch.CloudJob.JobReleaseTask\" data-throw-if-not-resolved=\"false\"></xref> tasks for the specified job.\n"
  remarks: >-
    This method returns immediately; the statuses are retrieved from the Batch service only when the collection is enumerated.

    Retrieval is non-atomic; statuses are retrieved in pages during enumeration of the collection.
  example: []
  syntax:
    content: public IPagedEnumerable<JobPreparationAndReleaseTaskExecutionInformation> ListJobPreparationAndReleaseTaskStatus(string jobId, DetailLevel detailLevel = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Function ListJobPreparationAndReleaseTaskStatus(jobId As String, detailLevel As DetailLevel = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing) As IPagedEnumerable(Of JobPreparationAndReleaseTaskExecutionInformation)
    parameters:
    - id: jobId
      type: System.String
      description: The id of the job.
    - id: detailLevel
      type: Microsoft.Azure.Batch.DetailLevel
      description: A <xref href="Microsoft.Azure.Batch.DetailLevel" data-throw-if-not-resolved="false"></xref> used for filtering the list and for controlling which properties are retrieved from the service.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.JobOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref> and <span class="paramref">detailLevel</span>.
    return:
      type: Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.JobPreparationAndReleaseTaskExecutionInformation}
      description: An <xref href="Microsoft.Azure.Batch.IPagedEnumerable%601" data-throw-if-not-resolved="false"></xref> that can be used to enumerate statuses asynchronously or synchronously.
  overload: Microsoft.Azure.Batch.JobOperations.ListJobPreparationAndReleaseTaskStatus*
  nameWithType.vb: JobOperations.ListJobPreparationAndReleaseTaskStatus(String, DetailLevel, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.JobOperations.ListJobPreparationAndReleaseTaskStatus(System.String, Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: ListJobPreparationAndReleaseTaskStatus(String, DetailLevel, IEnumerable(Of BatchClientBehavior))
references:
- uid: Microsoft.Azure.Batch.CloudJob
  commentId: T:Microsoft.Azure.Batch.CloudJob
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: CloudJob
  nameWithType: CloudJob
  fullName: Microsoft.Azure.Batch.CloudJob
- uid: Microsoft.Azure.Batch
  commentId: N:Microsoft.Azure.Batch
  isExternal: false
  name: Microsoft.Azure.Batch
  nameWithType: Microsoft.Azure.Batch
  fullName: Microsoft.Azure.Batch
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Azure.Batch.IInheritedBehaviors
  commentId: T:Microsoft.Azure.Batch.IInheritedBehaviors
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: IInheritedBehaviors
  nameWithType: IInheritedBehaviors
  fullName: Microsoft.Azure.Batch.IInheritedBehaviors
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Batch.JobOperations
  commentId: T:Microsoft.Azure.Batch.JobOperations
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: JobOperations
  nameWithType: JobOperations
  fullName: Microsoft.Azure.Batch.JobOperations
- uid: Microsoft.Azure.Batch.JobOperations.CustomBehaviors*
  commentId: Overload:Microsoft.Azure.Batch.JobOperations.CustomBehaviors
  isExternal: false
  name: CustomBehaviors
  nameWithType: JobOperations.CustomBehaviors
  fullName: Microsoft.Azure.Batch.JobOperations.CustomBehaviors
- uid: Microsoft.Azure.Batch.IInheritedBehaviors.CustomBehaviors
  commentId: P:Microsoft.Azure.Batch.IInheritedBehaviors.CustomBehaviors
  parent: Microsoft.Azure.Batch.IInheritedBehaviors
  isExternal: false
  name: CustomBehaviors
  nameWithType: IInheritedBehaviors.CustomBehaviors
  fullName: Microsoft.Azure.Batch.IInheritedBehaviors.CustomBehaviors
- uid: System.Collections.Generic.IList{Microsoft.Azure.Batch.BatchClientBehavior}
  commentId: T:System.Collections.Generic.IList{Microsoft.Azure.Batch.BatchClientBehavior}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<BatchClientBehavior>
  nameWithType: IList<BatchClientBehavior>
  fullName: System.Collections.Generic.IList<Microsoft.Azure.Batch.BatchClientBehavior>
  nameWithType.vb: IList(Of BatchClientBehavior)
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.Azure.Batch.BatchClientBehavior)
  name.vb: IList(Of BatchClientBehavior)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.BatchClientBehavior
    name: BatchClientBehavior
    nameWithType: BatchClientBehavior
    fullName: Microsoft.Azure.Batch.BatchClientBehavior
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.BatchClientBehavior
    name: BatchClientBehavior
    nameWithType: BatchClientBehavior
    fullName: Microsoft.Azure.Batch.BatchClientBehavior
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Azure.Batch.JobOperations.CreateJob*
  commentId: Overload:Microsoft.Azure.Batch.JobOperations.CreateJob
  isExternal: false
  name: CreateJob
  nameWithType: JobOperations.CreateJob
  fullName: Microsoft.Azure.Batch.JobOperations.CreateJob
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Azure.Batch.PoolInformation
  commentId: T:Microsoft.Azure.Batch.PoolInformation
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: PoolInformation
  nameWithType: PoolInformation
  fullName: Microsoft.Azure.Batch.PoolInformation
- uid: Microsoft.Azure.Batch.DetailLevel
  commentId: T:Microsoft.Azure.Batch.DetailLevel
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: DetailLevel
  nameWithType: DetailLevel
  fullName: Microsoft.Azure.Batch.DetailLevel
- uid: Microsoft.Azure.Batch.BatchClientBehavior
  commentId: T:Microsoft.Azure.Batch.BatchClientBehavior
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: BatchClientBehavior
  nameWithType: BatchClientBehavior
  fullName: Microsoft.Azure.Batch.BatchClientBehavior
- uid: Microsoft.Azure.Batch.JobOperations.CustomBehaviors
  commentId: P:Microsoft.Azure.Batch.JobOperations.CustomBehaviors
- uid: Microsoft.Azure.Batch.IPagedEnumerable`1
  commentId: T:Microsoft.Azure.Batch.IPagedEnumerable`1
  isExternal: false
  name: IPagedEnumerable<T>
  nameWithType: IPagedEnumerable<T>
  fullName: Microsoft.Azure.Batch.IPagedEnumerable<T>
  nameWithType.vb: IPagedEnumerable(Of T)
  fullname.vb: Microsoft.Azure.Batch.IPagedEnumerable(Of T)
  name.vb: IPagedEnumerable(Of T)
  spec.csharp:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.JobOperations.ListJobs*
  commentId: Overload:Microsoft.Azure.Batch.JobOperations.ListJobs
  isExternal: false
  name: ListJobs
  nameWithType: JobOperations.ListJobs
  fullName: Microsoft.Azure.Batch.JobOperations.ListJobs
- uid: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<BatchClientBehavior>
  nameWithType: IEnumerable<BatchClientBehavior>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>
  nameWithType.vb: IEnumerable(Of BatchClientBehavior)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior)
  name.vb: IEnumerable(Of BatchClientBehavior)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.BatchClientBehavior
    name: BatchClientBehavior
    nameWithType: BatchClientBehavior
    fullName: Microsoft.Azure.Batch.BatchClientBehavior
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.BatchClientBehavior
    name: BatchClientBehavior
    nameWithType: BatchClientBehavior
    fullName: Microsoft.Azure.Batch.BatchClientBehavior
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.CloudJob}
  commentId: T:Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.CloudJob}
  parent: Microsoft.Azure.Batch
  definition: Microsoft.Azure.Batch.IPagedEnumerable`1
  name: IPagedEnumerable<CloudJob>
  nameWithType: IPagedEnumerable<CloudJob>
  fullName: Microsoft.Azure.Batch.IPagedEnumerable<Microsoft.Azure.Batch.CloudJob>
  nameWithType.vb: IPagedEnumerable(Of CloudJob)
  fullname.vb: Microsoft.Azure.Batch.IPagedEnumerable(Of Microsoft.Azure.Batch.CloudJob)
  name.vb: IPagedEnumerable(Of CloudJob)
  spec.csharp:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.CloudJob
    name: CloudJob
    nameWithType: CloudJob
    fullName: Microsoft.Azure.Batch.CloudJob
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.CloudJob
    name: CloudJob
    nameWithType: CloudJob
    fullName: Microsoft.Azure.Batch.CloudJob
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: Microsoft.Azure.Batch.JobOperations.GetJobAsync*
  commentId: Overload:Microsoft.Azure.Batch.JobOperations.GetJobAsync
  isExternal: false
  name: GetJobAsync
  nameWithType: JobOperations.GetJobAsync
  fullName: Microsoft.Azure.Batch.JobOperations.GetJobAsync
- uid: System.Threading.Tasks.Task{Microsoft.Azure.Batch.CloudJob}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.Batch.CloudJob}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<CloudJob>
  nameWithType: Task<CloudJob>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.Batch.CloudJob>
  nameWithType.vb: Task(Of CloudJob)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.Batch.CloudJob)
  name.vb: Task(Of CloudJob)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.CloudJob
    name: CloudJob
    nameWithType: CloudJob
    fullName: Microsoft.Azure.Batch.CloudJob
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.CloudJob
    name: CloudJob
    nameWithType: CloudJob
    fullName: Microsoft.Azure.Batch.CloudJob
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.Azure.Batch.JobOperations.GetJobAsync(System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.JobOperations.GetJobAsync(System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.JobOperations.GetJob*
  commentId: Overload:Microsoft.Azure.Batch.JobOperations.GetJob
  isExternal: false
  name: GetJob
  nameWithType: JobOperations.GetJob
  fullName: Microsoft.Azure.Batch.JobOperations.GetJob
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.Azure.Batch.JobOperations.EnableJobAsync*
  commentId: Overload:Microsoft.Azure.Batch.JobOperations.EnableJobAsync
  isExternal: false
  name: EnableJobAsync
  nameWithType: JobOperations.EnableJobAsync
  fullName: Microsoft.Azure.Batch.JobOperations.EnableJobAsync
- uid: Microsoft.Azure.Batch.JobOperations.EnableJobAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.JobOperations.EnableJobAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.JobOperations.EnableJob*
  commentId: Overload:Microsoft.Azure.Batch.JobOperations.EnableJob
  isExternal: false
  name: EnableJob
  nameWithType: JobOperations.EnableJob
  fullName: Microsoft.Azure.Batch.JobOperations.EnableJob
- uid: Microsoft.Azure.Batch.JobOperations.DisableJobAsync*
  commentId: Overload:Microsoft.Azure.Batch.JobOperations.DisableJobAsync
  isExternal: false
  name: DisableJobAsync
  nameWithType: JobOperations.DisableJobAsync
  fullName: Microsoft.Azure.Batch.JobOperations.DisableJobAsync
- uid: Microsoft.Azure.Batch.Common.DisableJobOption
  commentId: T:Microsoft.Azure.Batch.Common.DisableJobOption
  parent: Microsoft.Azure.Batch.Common
  isExternal: false
  name: DisableJobOption
  nameWithType: DisableJobOption
  fullName: Microsoft.Azure.Batch.Common.DisableJobOption
- uid: Microsoft.Azure.Batch.Common
  commentId: N:Microsoft.Azure.Batch.Common
  isExternal: false
  name: Microsoft.Azure.Batch.Common
  nameWithType: Microsoft.Azure.Batch.Common
  fullName: Microsoft.Azure.Batch.Common
- uid: Microsoft.Azure.Batch.JobOperations.DisableJobAsync(System.String,Microsoft.Azure.Batch.Common.DisableJobOption,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.JobOperations.DisableJobAsync(System.String,Microsoft.Azure.Batch.Common.DisableJobOption,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.JobOperations.DisableJob*
  commentId: Overload:Microsoft.Azure.Batch.JobOperations.DisableJob
  isExternal: false
  name: DisableJob
  nameWithType: JobOperations.DisableJob
  fullName: Microsoft.Azure.Batch.JobOperations.DisableJob
- uid: Microsoft.Azure.Batch.JobExecutionInformation.TerminateReason
  commentId: P:Microsoft.Azure.Batch.JobExecutionInformation.TerminateReason
- uid: Microsoft.Azure.Batch.JobOperations.TerminateJobAsync*
  commentId: Overload:Microsoft.Azure.Batch.JobOperations.TerminateJobAsync
  isExternal: false
  name: TerminateJobAsync
  nameWithType: JobOperations.TerminateJobAsync
  fullName: Microsoft.Azure.Batch.JobOperations.TerminateJobAsync
- uid: Microsoft.Azure.Batch.JobOperations.TerminateJobAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.JobOperations.TerminateJobAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.JobOperations.TerminateJob*
  commentId: Overload:Microsoft.Azure.Batch.JobOperations.TerminateJob
  isExternal: false
  name: TerminateJob
  nameWithType: JobOperations.TerminateJob
  fullName: Microsoft.Azure.Batch.JobOperations.TerminateJob
- uid: Microsoft.Azure.Batch.Common.JobState.Deleting
  commentId: F:Microsoft.Azure.Batch.Common.JobState.Deleting
- uid: Microsoft.Azure.Batch.JobOperations.DeleteJobAsync*
  commentId: Overload:Microsoft.Azure.Batch.JobOperations.DeleteJobAsync
  isExternal: false
  name: DeleteJobAsync
  nameWithType: JobOperations.DeleteJobAsync
  fullName: Microsoft.Azure.Batch.JobOperations.DeleteJobAsync
- uid: Microsoft.Azure.Batch.JobOperations.DeleteJobAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.JobOperations.DeleteJobAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.JobOperations.DeleteJob*
  commentId: Overload:Microsoft.Azure.Batch.JobOperations.DeleteJob
  isExternal: false
  name: DeleteJob
  nameWithType: JobOperations.DeleteJob
  fullName: Microsoft.Azure.Batch.JobOperations.DeleteJob
- uid: Microsoft.Azure.Batch.CloudTask
  commentId: T:Microsoft.Azure.Batch.CloudTask
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: CloudTask
  nameWithType: CloudTask
  fullName: Microsoft.Azure.Batch.CloudTask
- uid: Microsoft.Azure.Batch.JobOperations.ListTasks*
  commentId: Overload:Microsoft.Azure.Batch.JobOperations.ListTasks
  isExternal: false
  name: ListTasks
  nameWithType: JobOperations.ListTasks
  fullName: Microsoft.Azure.Batch.JobOperations.ListTasks
- uid: Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.CloudTask}
  commentId: T:Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.CloudTask}
  parent: Microsoft.Azure.Batch
  definition: Microsoft.Azure.Batch.IPagedEnumerable`1
  name: IPagedEnumerable<CloudTask>
  nameWithType: IPagedEnumerable<CloudTask>
  fullName: Microsoft.Azure.Batch.IPagedEnumerable<Microsoft.Azure.Batch.CloudTask>
  nameWithType.vb: IPagedEnumerable(Of CloudTask)
  fullname.vb: Microsoft.Azure.Batch.IPagedEnumerable(Of Microsoft.Azure.Batch.CloudTask)
  name.vb: IPagedEnumerable(Of CloudTask)
  spec.csharp:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.CloudTask
    name: CloudTask
    nameWithType: CloudTask
    fullName: Microsoft.Azure.Batch.CloudTask
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.CloudTask
    name: CloudTask
    nameWithType: CloudTask
    fullName: Microsoft.Azure.Batch.CloudTask
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.JobOperations.GetTaskAsync*
  commentId: Overload:Microsoft.Azure.Batch.JobOperations.GetTaskAsync
  isExternal: false
  name: GetTaskAsync
  nameWithType: JobOperations.GetTaskAsync
  fullName: Microsoft.Azure.Batch.JobOperations.GetTaskAsync
- uid: System.Threading.Tasks.Task{Microsoft.Azure.Batch.CloudTask}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.Batch.CloudTask}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<CloudTask>
  nameWithType: Task<CloudTask>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.Batch.CloudTask>
  nameWithType.vb: Task(Of CloudTask)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.Batch.CloudTask)
  name.vb: Task(Of CloudTask)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.CloudTask
    name: CloudTask
    nameWithType: CloudTask
    fullName: Microsoft.Azure.Batch.CloudTask
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.CloudTask
    name: CloudTask
    nameWithType: CloudTask
    fullName: Microsoft.Azure.Batch.CloudTask
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.JobOperations.GetTaskAsync(System.String,System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.JobOperations.GetTaskAsync(System.String,System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.JobOperations.GetTask*
  commentId: Overload:Microsoft.Azure.Batch.JobOperations.GetTask
  isExternal: false
  name: GetTask
  nameWithType: JobOperations.GetTask
  fullName: Microsoft.Azure.Batch.JobOperations.GetTask
- uid: Microsoft.Azure.Batch.SubtaskInformation
  commentId: T:Microsoft.Azure.Batch.SubtaskInformation
  isExternal: false
  name: SubtaskInformation
  nameWithType: SubtaskInformation
  fullName: Microsoft.Azure.Batch.SubtaskInformation
- uid: Microsoft.Azure.Batch.JobOperations.ListSubtasks*
  commentId: Overload:Microsoft.Azure.Batch.JobOperations.ListSubtasks
  isExternal: false
  name: ListSubtasks
  nameWithType: JobOperations.ListSubtasks
  fullName: Microsoft.Azure.Batch.JobOperations.ListSubtasks
- uid: Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.SubtaskInformation}
  commentId: T:Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.SubtaskInformation}
  parent: Microsoft.Azure.Batch
  definition: Microsoft.Azure.Batch.IPagedEnumerable`1
  name: IPagedEnumerable<SubtaskInformation>
  nameWithType: IPagedEnumerable<SubtaskInformation>
  fullName: Microsoft.Azure.Batch.IPagedEnumerable<Microsoft.Azure.Batch.SubtaskInformation>
  nameWithType.vb: IPagedEnumerable(Of SubtaskInformation)
  fullname.vb: Microsoft.Azure.Batch.IPagedEnumerable(Of Microsoft.Azure.Batch.SubtaskInformation)
  name.vb: IPagedEnumerable(Of SubtaskInformation)
  spec.csharp:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.SubtaskInformation
    name: SubtaskInformation
    nameWithType: SubtaskInformation
    fullName: Microsoft.Azure.Batch.SubtaskInformation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.SubtaskInformation
    name: SubtaskInformation
    nameWithType: SubtaskInformation
    fullName: Microsoft.Azure.Batch.SubtaskInformation
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.JobOperations.AddTaskAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask},Microsoft.Azure.Batch.BatchClientParallelOptions,System.Collections.Concurrent.ConcurrentBag{System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact}},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.JobOperations.AddTaskAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask},Microsoft.Azure.Batch.BatchClientParallelOptions,System.Collections.Concurrent.ConcurrentBag{System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact}},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
- uid: Microsoft.Azure.Batch.CloudTask.FilesToStage
  commentId: P:Microsoft.Azure.Batch.CloudTask.FilesToStage
- uid: Microsoft.Azure.Batch.IFileStagingArtifact
  commentId: T:Microsoft.Azure.Batch.IFileStagingArtifact
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: IFileStagingArtifact
  nameWithType: IFileStagingArtifact
  fullName: Microsoft.Azure.Batch.IFileStagingArtifact
- uid: Microsoft.Azure.Batch.JobOperations.AddTaskAsync*
  commentId: Overload:Microsoft.Azure.Batch.JobOperations.AddTaskAsync
  isExternal: false
  name: AddTaskAsync
  nameWithType: JobOperations.AddTaskAsync
  fullName: Microsoft.Azure.Batch.JobOperations.AddTaskAsync
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact}
  commentId: T:System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact}
  parent: System.Collections.Concurrent
  definition: System.Collections.Concurrent.ConcurrentDictionary`2
  name: ConcurrentDictionary<Type, IFileStagingArtifact>
  nameWithType: ConcurrentDictionary<Type, IFileStagingArtifact>
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.Type, Microsoft.Azure.Batch.IFileStagingArtifact>
  nameWithType.vb: ConcurrentDictionary(Of Type, IFileStagingArtifact)
  fullname.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.Type, Microsoft.Azure.Batch.IFileStagingArtifact)
  name.vb: ConcurrentDictionary(Of Type, IFileStagingArtifact)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    nameWithType: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Azure.Batch.IFileStagingArtifact
    name: IFileStagingArtifact
    nameWithType: IFileStagingArtifact
    fullName: Microsoft.Azure.Batch.IFileStagingArtifact
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    nameWithType: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Azure.Batch.IFileStagingArtifact
    name: IFileStagingArtifact
    nameWithType: IFileStagingArtifact
    fullName: Microsoft.Azure.Batch.IFileStagingArtifact
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary`2
  commentId: T:System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: true
  name: ConcurrentDictionary<TKey, TValue>
  nameWithType: ConcurrentDictionary<TKey, TValue>
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue)
  name.vb: ConcurrentDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    nameWithType: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    nameWithType: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent
  commentId: N:System.Collections.Concurrent
  isExternal: false
  name: System.Collections.Concurrent
  nameWithType: System.Collections.Concurrent
  fullName: System.Collections.Concurrent
- uid: Microsoft.Azure.Batch.JobOperations.AddTask(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask},Microsoft.Azure.Batch.BatchClientParallelOptions,System.Collections.Concurrent.ConcurrentBag{System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact}},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.JobOperations.AddTask(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask},Microsoft.Azure.Batch.BatchClientParallelOptions,System.Collections.Concurrent.ConcurrentBag{System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact}},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
- uid: Microsoft.Azure.Batch.JobOperations.AddTaskAsync(System.String,Microsoft.Azure.Batch.CloudTask,System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.JobOperations.AddTaskAsync(System.String,Microsoft.Azure.Batch.CloudTask,System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.JobOperations.AddTask*
  commentId: Overload:Microsoft.Azure.Batch.JobOperations.AddTask
  isExternal: false
  name: AddTask
  nameWithType: JobOperations.AddTask
  fullName: Microsoft.Azure.Batch.JobOperations.AddTask
- uid: Microsoft.Azure.Batch.NodeFile
  commentId: T:Microsoft.Azure.Batch.NodeFile
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: NodeFile
  nameWithType: NodeFile
  fullName: Microsoft.Azure.Batch.NodeFile
- uid: Microsoft.Azure.Batch.JobOperations.ListNodeFiles*
  commentId: Overload:Microsoft.Azure.Batch.JobOperations.ListNodeFiles
  isExternal: false
  name: ListNodeFiles
  nameWithType: JobOperations.ListNodeFiles
  fullName: Microsoft.Azure.Batch.JobOperations.ListNodeFiles
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullname.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.NodeFile}
  commentId: T:Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.NodeFile}
  parent: Microsoft.Azure.Batch
  definition: Microsoft.Azure.Batch.IPagedEnumerable`1
  name: IPagedEnumerable<NodeFile>
  nameWithType: IPagedEnumerable<NodeFile>
  fullName: Microsoft.Azure.Batch.IPagedEnumerable<Microsoft.Azure.Batch.NodeFile>
  nameWithType.vb: IPagedEnumerable(Of NodeFile)
  fullname.vb: Microsoft.Azure.Batch.IPagedEnumerable(Of Microsoft.Azure.Batch.NodeFile)
  name.vb: IPagedEnumerable(Of NodeFile)
  spec.csharp:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.NodeFile
    name: NodeFile
    nameWithType: NodeFile
    fullName: Microsoft.Azure.Batch.NodeFile
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.NodeFile
    name: NodeFile
    nameWithType: NodeFile
    fullName: Microsoft.Azure.Batch.NodeFile
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.JobOperations.TerminateTaskAsync*
  commentId: Overload:Microsoft.Azure.Batch.JobOperations.TerminateTaskAsync
  isExternal: false
  name: TerminateTaskAsync
  nameWithType: JobOperations.TerminateTaskAsync
  fullName: Microsoft.Azure.Batch.JobOperations.TerminateTaskAsync
- uid: Microsoft.Azure.Batch.JobOperations.TerminateTaskAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.JobOperations.TerminateTaskAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.JobOperations.TerminateTask*
  commentId: Overload:Microsoft.Azure.Batch.JobOperations.TerminateTask
  isExternal: false
  name: TerminateTask
  nameWithType: JobOperations.TerminateTask
  fullName: Microsoft.Azure.Batch.JobOperations.TerminateTask
- uid: Microsoft.Azure.Batch.JobOperations.DeleteTaskAsync*
  commentId: Overload:Microsoft.Azure.Batch.JobOperations.DeleteTaskAsync
  isExternal: false
  name: DeleteTaskAsync
  nameWithType: JobOperations.DeleteTaskAsync
  fullName: Microsoft.Azure.Batch.JobOperations.DeleteTaskAsync
- uid: Microsoft.Azure.Batch.JobOperations.DeleteTaskAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.JobOperations.DeleteTaskAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.JobOperations.DeleteTask*
  commentId: Overload:Microsoft.Azure.Batch.JobOperations.DeleteTask
  isExternal: false
  name: DeleteTask
  nameWithType: JobOperations.DeleteTask
  fullName: Microsoft.Azure.Batch.JobOperations.DeleteTask
- uid: Microsoft.Azure.Batch.Common.JobState.Completed
  commentId: F:Microsoft.Azure.Batch.Common.JobState.Completed
- uid: Microsoft.Azure.Batch.Common.JobState.Terminating
  commentId: F:Microsoft.Azure.Batch.Common.JobState.Terminating
- uid: Microsoft.Azure.Batch.JobOperations.ReactivateTaskAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.JobOperations.ReactivateTaskAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.JobOperations.ReactivateTaskAsync*
  commentId: Overload:Microsoft.Azure.Batch.JobOperations.ReactivateTaskAsync
  isExternal: false
  name: ReactivateTaskAsync
  nameWithType: JobOperations.ReactivateTaskAsync
  fullName: Microsoft.Azure.Batch.JobOperations.ReactivateTaskAsync
- uid: Microsoft.Azure.Batch.JobOperations.ReactivateTask*
  commentId: Overload:Microsoft.Azure.Batch.JobOperations.ReactivateTask
  isExternal: false
  name: ReactivateTask
  nameWithType: JobOperations.ReactivateTask
  fullName: Microsoft.Azure.Batch.JobOperations.ReactivateTask
- uid: Microsoft.Azure.Batch.JobOperations.GetNodeFileAsync*
  commentId: Overload:Microsoft.Azure.Batch.JobOperations.GetNodeFileAsync
  isExternal: false
  name: GetNodeFileAsync
  nameWithType: JobOperations.GetNodeFileAsync
  fullName: Microsoft.Azure.Batch.JobOperations.GetNodeFileAsync
- uid: System.Threading.Tasks.Task{Microsoft.Azure.Batch.NodeFile}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.Batch.NodeFile}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<NodeFile>
  nameWithType: Task<NodeFile>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.Batch.NodeFile>
  nameWithType.vb: Task(Of NodeFile)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.Batch.NodeFile)
  name.vb: Task(Of NodeFile)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.NodeFile
    name: NodeFile
    nameWithType: NodeFile
    fullName: Microsoft.Azure.Batch.NodeFile
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.NodeFile
    name: NodeFile
    nameWithType: NodeFile
    fullName: Microsoft.Azure.Batch.NodeFile
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.JobOperations.GetNodeFileAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.JobOperations.GetNodeFileAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.JobOperations.GetNodeFile*
  commentId: Overload:Microsoft.Azure.Batch.JobOperations.GetNodeFile
  isExternal: false
  name: GetNodeFile
  nameWithType: JobOperations.GetNodeFile
  fullName: Microsoft.Azure.Batch.JobOperations.GetNodeFile
- uid: Microsoft.Azure.Batch.JobOperations.DeleteNodeFileAsync*
  commentId: Overload:Microsoft.Azure.Batch.JobOperations.DeleteNodeFileAsync
  isExternal: false
  name: DeleteNodeFileAsync
  nameWithType: JobOperations.DeleteNodeFileAsync
  fullName: Microsoft.Azure.Batch.JobOperations.DeleteNodeFileAsync
- uid: Microsoft.Azure.Batch.JobOperations.DeleteNodeFileAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.JobOperations.DeleteNodeFileAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.JobOperations.DeleteNodeFile*
  commentId: Overload:Microsoft.Azure.Batch.JobOperations.DeleteNodeFile
  isExternal: false
  name: DeleteNodeFile
  nameWithType: JobOperations.DeleteNodeFile
  fullName: Microsoft.Azure.Batch.JobOperations.DeleteNodeFile
- uid: Microsoft.Azure.Batch.Constants.MaxTasksInSingleAddTaskCollectionRequest
  commentId: F:Microsoft.Azure.Batch.Constants.MaxTasksInSingleAddTaskCollectionRequest
- uid: Microsoft.Azure.Batch.BatchClientParallelOptions
  commentId: T:Microsoft.Azure.Batch.BatchClientParallelOptions
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: BatchClientParallelOptions
  nameWithType: BatchClientParallelOptions
  fullName: Microsoft.Azure.Batch.BatchClientParallelOptions
- uid: System.Collections.Concurrent.ConcurrentBag`1
  commentId: T:System.Collections.Concurrent.ConcurrentBag`1
  isExternal: true
  name: ConcurrentBag<T>
  nameWithType: ConcurrentBag<T>
  fullName: System.Collections.Concurrent.ConcurrentBag<T>
  nameWithType.vb: ConcurrentBag(Of T)
  fullname.vb: System.Collections.Concurrent.ConcurrentBag(Of T)
  name.vb: ConcurrentBag(Of T)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentBag`1
    name: ConcurrentBag
    nameWithType: ConcurrentBag
    fullName: System.Collections.Concurrent.ConcurrentBag
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentBag`1
    name: ConcurrentBag
    nameWithType: ConcurrentBag
    fullName: System.Collections.Concurrent.ConcurrentBag
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.AddTaskCollectionResultHandler
  commentId: T:Microsoft.Azure.Batch.AddTaskCollectionResultHandler
  isExternal: false
  name: AddTaskCollectionResultHandler
  nameWithType: AddTaskCollectionResultHandler
  fullName: Microsoft.Azure.Batch.AddTaskCollectionResultHandler
- uid: Microsoft.Azure.Batch.ParallelOperationsException
  commentId: T:Microsoft.Azure.Batch.ParallelOperationsException
  isExternal: false
  name: ParallelOperationsException
  nameWithType: ParallelOperationsException
  fullName: Microsoft.Azure.Batch.ParallelOperationsException
- uid: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<CloudTask>
  nameWithType: IEnumerable<CloudTask>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.CloudTask>
  nameWithType.vb: IEnumerable(Of CloudTask)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.CloudTask)
  name.vb: IEnumerable(Of CloudTask)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.CloudTask
    name: CloudTask
    nameWithType: CloudTask
    fullName: Microsoft.Azure.Batch.CloudTask
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.CloudTask
    name: CloudTask
    nameWithType: CloudTask
    fullName: Microsoft.Azure.Batch.CloudTask
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentBag{System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact}}
  commentId: T:System.Collections.Concurrent.ConcurrentBag{System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact}}
  parent: System.Collections.Concurrent
  definition: System.Collections.Concurrent.ConcurrentBag`1
  name: ConcurrentBag<ConcurrentDictionary<Type, IFileStagingArtifact>>
  nameWithType: ConcurrentBag<ConcurrentDictionary<Type, IFileStagingArtifact>>
  fullName: System.Collections.Concurrent.ConcurrentBag<System.Collections.Concurrent.ConcurrentDictionary<System.Type, Microsoft.Azure.Batch.IFileStagingArtifact>>
  nameWithType.vb: ConcurrentBag(Of ConcurrentDictionary(Of Type, IFileStagingArtifact))
  fullname.vb: System.Collections.Concurrent.ConcurrentBag(Of System.Collections.Concurrent.ConcurrentDictionary(Of System.Type, Microsoft.Azure.Batch.IFileStagingArtifact))
  name.vb: ConcurrentBag(Of ConcurrentDictionary(Of Type, IFileStagingArtifact))
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentBag`1
    name: ConcurrentBag
    nameWithType: ConcurrentBag
    fullName: System.Collections.Concurrent.ConcurrentBag
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    nameWithType: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Azure.Batch.IFileStagingArtifact
    name: IFileStagingArtifact
    nameWithType: IFileStagingArtifact
    fullName: Microsoft.Azure.Batch.IFileStagingArtifact
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentBag`1
    name: ConcurrentBag
    nameWithType: ConcurrentBag
    fullName: System.Collections.Concurrent.ConcurrentBag
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    nameWithType: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Azure.Batch.IFileStagingArtifact
    name: IFileStagingArtifact
    nameWithType: IFileStagingArtifact
    fullName: Microsoft.Azure.Batch.IFileStagingArtifact
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.TimeSpan}
  commentId: T:System.Nullable{System.TimeSpan}
  parent: System
  definition: System.Nullable`1
  name: Nullable<TimeSpan>
  nameWithType: Nullable<TimeSpan>
  fullName: System.Nullable<System.TimeSpan>
  nameWithType.vb: Nullable(Of TimeSpan)
  fullname.vb: System.Nullable(Of System.TimeSpan)
  name.vb: Nullable(Of TimeSpan)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.JobOperations.GetAllJobsLifetimeStatisticsAsync*
  commentId: Overload:Microsoft.Azure.Batch.JobOperations.GetAllJobsLifetimeStatisticsAsync
  isExternal: false
  name: GetAllJobsLifetimeStatisticsAsync
  nameWithType: JobOperations.GetAllJobsLifetimeStatisticsAsync
  fullName: Microsoft.Azure.Batch.JobOperations.GetAllJobsLifetimeStatisticsAsync
- uid: System.Threading.Tasks.Task{Microsoft.Azure.Batch.JobStatistics}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.Batch.JobStatistics}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<JobStatistics>
  nameWithType: Task<JobStatistics>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.Batch.JobStatistics>
  nameWithType.vb: Task(Of JobStatistics)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.Batch.JobStatistics)
  name.vb: Task(Of JobStatistics)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.JobStatistics
    name: JobStatistics
    nameWithType: JobStatistics
    fullName: Microsoft.Azure.Batch.JobStatistics
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.JobStatistics
    name: JobStatistics
    nameWithType: JobStatistics
    fullName: Microsoft.Azure.Batch.JobStatistics
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.JobOperations.GetAllJobsLifetimeStatisticsAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.JobOperations.GetAllJobsLifetimeStatisticsAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.JobOperations.GetAllJobsLifetimeStatistics*
  commentId: Overload:Microsoft.Azure.Batch.JobOperations.GetAllJobsLifetimeStatistics
  isExternal: false
  name: GetAllJobsLifetimeStatistics
  nameWithType: JobOperations.GetAllJobsLifetimeStatistics
  fullName: Microsoft.Azure.Batch.JobOperations.GetAllJobsLifetimeStatistics
- uid: Microsoft.Azure.Batch.JobStatistics
  commentId: T:Microsoft.Azure.Batch.JobStatistics
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: JobStatistics
  nameWithType: JobStatistics
  fullName: Microsoft.Azure.Batch.JobStatistics
- uid: Microsoft.Azure.Batch.CloudJob.JobPreparationTask
  commentId: P:Microsoft.Azure.Batch.CloudJob.JobPreparationTask
- uid: Microsoft.Azure.Batch.CloudJob.JobReleaseTask
  commentId: P:Microsoft.Azure.Batch.CloudJob.JobReleaseTask
- uid: Microsoft.Azure.Batch.JobOperations.ListJobPreparationAndReleaseTaskStatus*
  commentId: Overload:Microsoft.Azure.Batch.JobOperations.ListJobPreparationAndReleaseTaskStatus
  isExternal: false
  name: ListJobPreparationAndReleaseTaskStatus
  nameWithType: JobOperations.ListJobPreparationAndReleaseTaskStatus
  fullName: Microsoft.Azure.Batch.JobOperations.ListJobPreparationAndReleaseTaskStatus
- uid: Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.JobPreparationAndReleaseTaskExecutionInformation}
  commentId: T:Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.JobPreparationAndReleaseTaskExecutionInformation}
  parent: Microsoft.Azure.Batch
  definition: Microsoft.Azure.Batch.IPagedEnumerable`1
  name: IPagedEnumerable<JobPreparationAndReleaseTaskExecutionInformation>
  nameWithType: IPagedEnumerable<JobPreparationAndReleaseTaskExecutionInformation>
  fullName: Microsoft.Azure.Batch.IPagedEnumerable<Microsoft.Azure.Batch.JobPreparationAndReleaseTaskExecutionInformation>
  nameWithType.vb: IPagedEnumerable(Of JobPreparationAndReleaseTaskExecutionInformation)
  fullname.vb: Microsoft.Azure.Batch.IPagedEnumerable(Of Microsoft.Azure.Batch.JobPreparationAndReleaseTaskExecutionInformation)
  name.vb: IPagedEnumerable(Of JobPreparationAndReleaseTaskExecutionInformation)
  spec.csharp:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.JobPreparationAndReleaseTaskExecutionInformation
    name: JobPreparationAndReleaseTaskExecutionInformation
    nameWithType: JobPreparationAndReleaseTaskExecutionInformation
    fullName: Microsoft.Azure.Batch.JobPreparationAndReleaseTaskExecutionInformation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.JobPreparationAndReleaseTaskExecutionInformation
    name: JobPreparationAndReleaseTaskExecutionInformation
    nameWithType: JobPreparationAndReleaseTaskExecutionInformation
    fullName: Microsoft.Azure.Batch.JobPreparationAndReleaseTaskExecutionInformation
  - name: )
    nameWithType: )
    fullName: )
