### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Batch.JobPreparationTask
  commentId: T:Microsoft.Azure.Batch.JobPreparationTask
  id: JobPreparationTask
  parent: Microsoft.Azure.Batch
  children:
  - Microsoft.Azure.Batch.JobPreparationTask.#ctor
  - Microsoft.Azure.Batch.JobPreparationTask.#ctor(System.String)
  - Microsoft.Azure.Batch.JobPreparationTask.CommandLine
  - Microsoft.Azure.Batch.JobPreparationTask.Constraints
  - Microsoft.Azure.Batch.JobPreparationTask.EnvironmentSettings
  - Microsoft.Azure.Batch.JobPreparationTask.Id
  - Microsoft.Azure.Batch.JobPreparationTask.RerunOnComputeNodeRebootAfterSuccess
  - Microsoft.Azure.Batch.JobPreparationTask.ResourceFiles
  - Microsoft.Azure.Batch.JobPreparationTask.RunElevated
  - Microsoft.Azure.Batch.JobPreparationTask.WaitForSuccess
  langs:
  - csharp
  - vb
  name: JobPreparationTask
  nameWithType: JobPreparationTask
  fullName: Microsoft.Azure.Batch.JobPreparationTask
  type: Class
  source:
    remote:
      path: src/Batch/Client/Src/Generated/JobPreparationTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: JobPreparationTask
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/JobPreparationTask.cs
    startLine: 33
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nA Job Preparation task to run before any tasks of the job on any given compute node.\n"
  example: []
  syntax:
    content: 'public class JobPreparationTask : ITransportObjectProvider<JobPreparationTask>, IPropertyMetadata, IModifiable, IReadOnly'
    content.vb: >-
      Public Class JobPreparationTask
          Implements ITransportObjectProvider(Of JobPreparationTask), IPropertyMetadata, IModifiable, IReadOnly
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Batch.JobPreparationTask.#ctor
  commentId: M:Microsoft.Azure.Batch.JobPreparationTask.#ctor
  id: '#ctor'
  parent: Microsoft.Azure.Batch.JobPreparationTask
  langs:
  - csharp
  - vb
  name: JobPreparationTask()
  nameWithType: JobPreparationTask.JobPreparationTask()
  fullName: Microsoft.Azure.Batch.JobPreparationTask.JobPreparationTask()
  type: Constructor
  source:
    remote:
      path: src/Batch/Client/Src/JobPreparationTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobPreparationTask.cs
    startLine: 20
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  syntax:
    content: public JobPreparationTask()
    content.vb: Public Sub New
  overload: Microsoft.Azure.Batch.JobPreparationTask.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.JobPreparationTask.#ctor(System.String)
  commentId: M:Microsoft.Azure.Batch.JobPreparationTask.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.Azure.Batch.JobPreparationTask
  langs:
  - csharp
  - vb
  name: JobPreparationTask(String)
  nameWithType: JobPreparationTask.JobPreparationTask(String)
  fullName: Microsoft.Azure.Batch.JobPreparationTask.JobPreparationTask(System.String)
  type: Constructor
  source:
    remote:
      path: src/Batch/Client/Src/Generated/JobPreparationTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/JobPreparationTask.cs
    startLine: 103
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.Azure.Batch.JobPreparationTask\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public JobPreparationTask(string commandLine)
    content.vb: Public Sub New(commandLine As String)
    parameters:
    - id: commandLine
      type: System.String
      description: The command line of the task.
  overload: Microsoft.Azure.Batch.JobPreparationTask.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.JobPreparationTask.CommandLine
  commentId: P:Microsoft.Azure.Batch.JobPreparationTask.CommandLine
  id: CommandLine
  parent: Microsoft.Azure.Batch.JobPreparationTask
  langs:
  - csharp
  - vb
  name: CommandLine
  nameWithType: JobPreparationTask.CommandLine
  fullName: Microsoft.Azure.Batch.JobPreparationTask.CommandLine
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/JobPreparationTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CommandLine
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/JobPreparationTask.cs
    startLine: 127
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets the command line of the task.\n"
  remarks: "\nThe command line does not run under a shell, and therefore cannot take advantage of shell features such as environment \nvariable expansion. If you want to take advantage of such features, you should invoke the shell in the command \nline, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux.\n"
  example: []
  syntax:
    content: public string CommandLine { get; set; }
    content.vb: Public Property CommandLine As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Batch.JobPreparationTask.CommandLine*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.JobPreparationTask.Constraints
  commentId: P:Microsoft.Azure.Batch.JobPreparationTask.Constraints
  id: Constraints
  parent: Microsoft.Azure.Batch.JobPreparationTask
  langs:
  - csharp
  - vb
  name: Constraints
  nameWithType: JobPreparationTask.Constraints
  fullName: Microsoft.Azure.Batch.JobPreparationTask.Constraints
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/JobPreparationTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Constraints
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/JobPreparationTask.cs
    startLine: 136
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets the execution constraints provided by the user for this Job Preparation task.\n"
  example: []
  syntax:
    content: public TaskConstraints Constraints { get; set; }
    content.vb: Public Property Constraints As TaskConstraints
    parameters: []
    return:
      type: Microsoft.Azure.Batch.TaskConstraints
  overload: Microsoft.Azure.Batch.JobPreparationTask.Constraints*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.JobPreparationTask.EnvironmentSettings
  commentId: P:Microsoft.Azure.Batch.JobPreparationTask.EnvironmentSettings
  id: EnvironmentSettings
  parent: Microsoft.Azure.Batch.JobPreparationTask
  langs:
  - csharp
  - vb
  name: EnvironmentSettings
  nameWithType: JobPreparationTask.EnvironmentSettings
  fullName: Microsoft.Azure.Batch.JobPreparationTask.EnvironmentSettings
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/JobPreparationTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: EnvironmentSettings
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/JobPreparationTask.cs
    startLine: 145
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets the collection of EnvironmentSetting instances.\n"
  example: []
  syntax:
    content: public IList<EnvironmentSetting> EnvironmentSettings { get; set; }
    content.vb: Public Property EnvironmentSettings As IList(Of EnvironmentSetting)
    parameters: []
    return:
      type: System.Collections.Generic.IList{Microsoft.Azure.Batch.EnvironmentSetting}
  overload: Microsoft.Azure.Batch.JobPreparationTask.EnvironmentSettings*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.JobPreparationTask.Id
  commentId: P:Microsoft.Azure.Batch.JobPreparationTask.Id
  id: Id
  parent: Microsoft.Azure.Batch.JobPreparationTask
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: JobPreparationTask.Id
  fullName: Microsoft.Azure.Batch.JobPreparationTask.Id
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/JobPreparationTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Id
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/JobPreparationTask.cs
    startLine: 157
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets the id of the task.\n"
  example: []
  syntax:
    content: public string Id { get; set; }
    content.vb: Public Property Id As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Batch.JobPreparationTask.Id*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.JobPreparationTask.RerunOnComputeNodeRebootAfterSuccess
  commentId: P:Microsoft.Azure.Batch.JobPreparationTask.RerunOnComputeNodeRebootAfterSuccess
  id: RerunOnComputeNodeRebootAfterSuccess
  parent: Microsoft.Azure.Batch.JobPreparationTask
  langs:
  - csharp
  - vb
  name: RerunOnComputeNodeRebootAfterSuccess
  nameWithType: JobPreparationTask.RerunOnComputeNodeRebootAfterSuccess
  fullName: Microsoft.Azure.Batch.JobPreparationTask.RerunOnComputeNodeRebootAfterSuccess
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/JobPreparationTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: RerunOnComputeNodeRebootAfterSuccess
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/JobPreparationTask.cs
    startLine: 172
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets whether the Batch service should rerun the Job Preparation task after a compute node reboots.\n"
  remarks: "\nThe Job Preparation task is always rerun if a compute node is reimaged, or if the Job Preparation task did not \ncomplete (e.g. because the reboot occurred while the task was running). Therefore, you should always write a \nJob Preparation task to be idempotent and to behave correctly if run multiple times. If this property is not \nspecified, a default value of true is assigned by the Batch service.\n"
  example: []
  syntax:
    content: public bool ? RerunOnComputeNodeRebootAfterSuccess { get; set; }
    content.vb: Public Property RerunOnComputeNodeRebootAfterSuccess As Boolean?
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
  overload: Microsoft.Azure.Batch.JobPreparationTask.RerunOnComputeNodeRebootAfterSuccess*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.JobPreparationTask.ResourceFiles
  commentId: P:Microsoft.Azure.Batch.JobPreparationTask.ResourceFiles
  id: ResourceFiles
  parent: Microsoft.Azure.Batch.JobPreparationTask
  langs:
  - csharp
  - vb
  name: ResourceFiles
  nameWithType: JobPreparationTask.ResourceFiles
  fullName: Microsoft.Azure.Batch.JobPreparationTask.ResourceFiles
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/JobPreparationTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ResourceFiles
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/JobPreparationTask.cs
    startLine: 182
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets a list of files that the Batch service will download to the compute node before running the command \nline.\n"
  example: []
  syntax:
    content: public IList<ResourceFile> ResourceFiles { get; set; }
    content.vb: Public Property ResourceFiles As IList(Of ResourceFile)
    parameters: []
    return:
      type: System.Collections.Generic.IList{Microsoft.Azure.Batch.ResourceFile}
  overload: Microsoft.Azure.Batch.JobPreparationTask.ResourceFiles*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.JobPreparationTask.RunElevated
  commentId: P:Microsoft.Azure.Batch.JobPreparationTask.RunElevated
  id: RunElevated
  parent: Microsoft.Azure.Batch.JobPreparationTask
  langs:
  - csharp
  - vb
  name: RunElevated
  nameWithType: JobPreparationTask.RunElevated
  fullName: Microsoft.Azure.Batch.JobPreparationTask.RunElevated
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/JobPreparationTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: RunElevated
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/JobPreparationTask.cs
    startLine: 194
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets whether to run the task in elevated mode.\n"
  example: []
  syntax:
    content: public bool ? RunElevated { get; set; }
    content.vb: Public Property RunElevated As Boolean?
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
  overload: Microsoft.Azure.Batch.JobPreparationTask.RunElevated*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.JobPreparationTask.WaitForSuccess
  commentId: P:Microsoft.Azure.Batch.JobPreparationTask.WaitForSuccess
  id: WaitForSuccess
  parent: Microsoft.Azure.Batch.JobPreparationTask
  langs:
  - csharp
  - vb
  name: WaitForSuccess
  nameWithType: JobPreparationTask.WaitForSuccess
  fullName: Microsoft.Azure.Batch.JobPreparationTask.WaitForSuccess
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/JobPreparationTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: WaitForSuccess
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/JobPreparationTask.cs
    startLine: 208
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets whether the Batch service should wait for the successful completion of the Job Preparation task \nbefore scheduling any tasks on the compute node.\n"
  remarks: "\nA Job Preparation task execution is considered successful if its ExitCode is 0. If this property is not specified, \na default value of true is assigned by the Batch service.\n"
  example: []
  syntax:
    content: public bool ? WaitForSuccess { get; set; }
    content.vb: Public Property WaitForSuccess As Boolean?
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
  overload: Microsoft.Azure.Batch.JobPreparationTask.WaitForSuccess*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Azure.Batch
  commentId: N:Microsoft.Azure.Batch
  isExternal: false
  name: Microsoft.Azure.Batch
  nameWithType: Microsoft.Azure.Batch
  fullName: Microsoft.Azure.Batch
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Batch.JobPreparationTask.#ctor*
  commentId: Overload:Microsoft.Azure.Batch.JobPreparationTask.#ctor
  isExternal: false
  name: JobPreparationTask
  nameWithType: JobPreparationTask.JobPreparationTask
  fullName: Microsoft.Azure.Batch.JobPreparationTask.JobPreparationTask
- uid: Microsoft.Azure.Batch.JobPreparationTask
  commentId: T:Microsoft.Azure.Batch.JobPreparationTask
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: JobPreparationTask
  nameWithType: JobPreparationTask
  fullName: Microsoft.Azure.Batch.JobPreparationTask
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Azure.Batch.JobPreparationTask.CommandLine*
  commentId: Overload:Microsoft.Azure.Batch.JobPreparationTask.CommandLine
  isExternal: false
  name: CommandLine
  nameWithType: JobPreparationTask.CommandLine
  fullName: Microsoft.Azure.Batch.JobPreparationTask.CommandLine
- uid: Microsoft.Azure.Batch.JobPreparationTask.Constraints*
  commentId: Overload:Microsoft.Azure.Batch.JobPreparationTask.Constraints
  isExternal: false
  name: Constraints
  nameWithType: JobPreparationTask.Constraints
  fullName: Microsoft.Azure.Batch.JobPreparationTask.Constraints
- uid: Microsoft.Azure.Batch.TaskConstraints
  commentId: T:Microsoft.Azure.Batch.TaskConstraints
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: TaskConstraints
  nameWithType: TaskConstraints
  fullName: Microsoft.Azure.Batch.TaskConstraints
- uid: Microsoft.Azure.Batch.JobPreparationTask.EnvironmentSettings*
  commentId: Overload:Microsoft.Azure.Batch.JobPreparationTask.EnvironmentSettings
  isExternal: false
  name: EnvironmentSettings
  nameWithType: JobPreparationTask.EnvironmentSettings
  fullName: Microsoft.Azure.Batch.JobPreparationTask.EnvironmentSettings
- uid: System.Collections.Generic.IList{Microsoft.Azure.Batch.EnvironmentSetting}
  commentId: T:System.Collections.Generic.IList{Microsoft.Azure.Batch.EnvironmentSetting}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<EnvironmentSetting>
  nameWithType: IList<EnvironmentSetting>
  fullName: System.Collections.Generic.IList<Microsoft.Azure.Batch.EnvironmentSetting>
  nameWithType.vb: IList(Of EnvironmentSetting)
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.Azure.Batch.EnvironmentSetting)
  name.vb: IList(Of EnvironmentSetting)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.EnvironmentSetting
    name: EnvironmentSetting
    nameWithType: EnvironmentSetting
    fullName: Microsoft.Azure.Batch.EnvironmentSetting
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.EnvironmentSetting
    name: EnvironmentSetting
    nameWithType: EnvironmentSetting
    fullName: Microsoft.Azure.Batch.EnvironmentSetting
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Azure.Batch.JobPreparationTask.Id*
  commentId: Overload:Microsoft.Azure.Batch.JobPreparationTask.Id
  isExternal: false
  name: Id
  nameWithType: JobPreparationTask.Id
  fullName: Microsoft.Azure.Batch.JobPreparationTask.Id
- uid: Microsoft.Azure.Batch.JobPreparationTask.RerunOnComputeNodeRebootAfterSuccess*
  commentId: Overload:Microsoft.Azure.Batch.JobPreparationTask.RerunOnComputeNodeRebootAfterSuccess
  isExternal: false
  name: RerunOnComputeNodeRebootAfterSuccess
  nameWithType: JobPreparationTask.RerunOnComputeNodeRebootAfterSuccess
  fullName: Microsoft.Azure.Batch.JobPreparationTask.RerunOnComputeNodeRebootAfterSuccess
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullname.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.JobPreparationTask.ResourceFiles*
  commentId: Overload:Microsoft.Azure.Batch.JobPreparationTask.ResourceFiles
  isExternal: false
  name: ResourceFiles
  nameWithType: JobPreparationTask.ResourceFiles
  fullName: Microsoft.Azure.Batch.JobPreparationTask.ResourceFiles
- uid: System.Collections.Generic.IList{Microsoft.Azure.Batch.ResourceFile}
  commentId: T:System.Collections.Generic.IList{Microsoft.Azure.Batch.ResourceFile}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<ResourceFile>
  nameWithType: IList<ResourceFile>
  fullName: System.Collections.Generic.IList<Microsoft.Azure.Batch.ResourceFile>
  nameWithType.vb: IList(Of ResourceFile)
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.Azure.Batch.ResourceFile)
  name.vb: IList(Of ResourceFile)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.ResourceFile
    name: ResourceFile
    nameWithType: ResourceFile
    fullName: Microsoft.Azure.Batch.ResourceFile
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.ResourceFile
    name: ResourceFile
    nameWithType: ResourceFile
    fullName: Microsoft.Azure.Batch.ResourceFile
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.JobPreparationTask.RunElevated*
  commentId: Overload:Microsoft.Azure.Batch.JobPreparationTask.RunElevated
  isExternal: false
  name: RunElevated
  nameWithType: JobPreparationTask.RunElevated
  fullName: Microsoft.Azure.Batch.JobPreparationTask.RunElevated
- uid: Microsoft.Azure.Batch.JobPreparationTask.WaitForSuccess*
  commentId: Overload:Microsoft.Azure.Batch.JobPreparationTask.WaitForSuccess
  isExternal: false
  name: WaitForSuccess
  nameWithType: JobPreparationTask.WaitForSuccess
  fullName: Microsoft.Azure.Batch.JobPreparationTask.WaitForSuccess
