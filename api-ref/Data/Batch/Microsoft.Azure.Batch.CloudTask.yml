### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Batch.CloudTask
  commentId: T:Microsoft.Azure.Batch.CloudTask
  id: CloudTask
  parent: Microsoft.Azure.Batch
  children:
  - Microsoft.Azure.Batch.CloudTask.#ctor(System.String,System.String)
  - Microsoft.Azure.Batch.CloudTask.AffinityInformation
  - Microsoft.Azure.Batch.CloudTask.ApplicationPackageReferences
  - Microsoft.Azure.Batch.CloudTask.CommandLine
  - Microsoft.Azure.Batch.CloudTask.Commit(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.CloudTask.CommitAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.CloudTask.ComputeNodeInformation
  - Microsoft.Azure.Batch.CloudTask.Constraints
  - Microsoft.Azure.Batch.CloudTask.CreationTime
  - Microsoft.Azure.Batch.CloudTask.CustomBehaviors
  - Microsoft.Azure.Batch.CloudTask.Delete(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.CloudTask.DeleteAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.CloudTask.DependsOn
  - Microsoft.Azure.Batch.CloudTask.DisplayName
  - Microsoft.Azure.Batch.CloudTask.EnvironmentSettings
  - Microsoft.Azure.Batch.CloudTask.ETag
  - Microsoft.Azure.Batch.CloudTask.ExecutionInformation
  - Microsoft.Azure.Batch.CloudTask.ExitConditions
  - Microsoft.Azure.Batch.CloudTask.FilesToStage
  - Microsoft.Azure.Batch.CloudTask.GetNodeFile(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.CloudTask.GetNodeFileAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.CloudTask.Id
  - Microsoft.Azure.Batch.CloudTask.LastModified
  - Microsoft.Azure.Batch.CloudTask.ListNodeFiles(System.Nullable{System.Boolean},Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.CloudTask.ListSubtasks(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.CloudTask.MultiInstanceSettings
  - Microsoft.Azure.Batch.CloudTask.PreviousState
  - Microsoft.Azure.Batch.CloudTask.PreviousStateTransitionTime
  - Microsoft.Azure.Batch.CloudTask.Reactivate(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.CloudTask.ReactivateAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.CloudTask.Refresh(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.CloudTask.RefreshAsync(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.CloudTask.ResourceFiles
  - Microsoft.Azure.Batch.CloudTask.RunElevated
  - Microsoft.Azure.Batch.CloudTask.StageFiles
  - Microsoft.Azure.Batch.CloudTask.StageFilesAsync(System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact})
  - Microsoft.Azure.Batch.CloudTask.State
  - Microsoft.Azure.Batch.CloudTask.StateTransitionTime
  - Microsoft.Azure.Batch.CloudTask.Statistics
  - Microsoft.Azure.Batch.CloudTask.Terminate(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.CloudTask.TerminateAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.CloudTask.Url
  langs:
  - csharp
  - vb
  name: CloudTask
  nameWithType: CloudTask
  fullName: Microsoft.Azure.Batch.CloudTask
  type: Class
  source:
    remote:
      path: src/Batch/Client/Src/Generated/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CloudTask
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/CloudTask.cs
    startLine: 34
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nAn Azure Batch task.  A task is a piece of work that is associated with a job and runs on a compute node.\n"
  example: []
  syntax:
    content: 'public class CloudTask : IRefreshable, ITransportObjectProvider<TaskAddParameter>, IInheritedBehaviors, IPropertyMetadata, IModifiable, IReadOnly'
    content.vb: >-
      Public Class CloudTask
          Implements IRefreshable, ITransportObjectProvider(Of TaskAddParameter), IInheritedBehaviors, IPropertyMetadata, IModifiable, IReadOnly
  inheritance:
  - System.Object
  implements:
  - Microsoft.Azure.Batch.IRefreshable
  - Microsoft.Azure.Batch.IInheritedBehaviors
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Batch.CloudTask.#ctor(System.String,System.String)
  commentId: M:Microsoft.Azure.Batch.CloudTask.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: CloudTask(String, String)
  nameWithType: CloudTask.CloudTask(String, String)
  fullName: Microsoft.Azure.Batch.CloudTask.CloudTask(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/Batch/Client/Src/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/Batch/Client/Src/CloudTask.cs
    startLine: 40
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.Azure.Batch.CloudTask\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  remarks: >-
    The newly created CloudTask is initially not associated with any task in the Batch service.

    To associate it with a job and submit it to the Batch service, use <xref href="Microsoft.Azure.Batch.JobOperations.AddTaskAsync(System.String%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.CloudTask%7d%2cMicrosoft.Azure.Batch.BatchClientParallelOptions%2cSystem.Collections.Concurrent.ConcurrentBag%7bSystem.Collections.Concurrent.ConcurrentDictionary%7bSystem.Type%2cMicrosoft.Azure.Batch.IFileStagingArtifact%7d%7d%2cSystem.Nullable%7bSystem.TimeSpan%7d%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public CloudTask(string id, string commandline)
    content.vb: Public Sub New(id As String, commandline As String)
    parameters:
    - id: id
      type: System.String
      description: The id of the task.
    - id: commandline
      type: System.String
      description: The command line of the task.
  overload: Microsoft.Azure.Batch.CloudTask.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.CloudTask.StageFilesAsync(System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact})
  commentId: M:Microsoft.Azure.Batch.CloudTask.StageFilesAsync(System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact})
  id: StageFilesAsync(System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact})
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: StageFilesAsync(ConcurrentDictionary<Type, IFileStagingArtifact>)
  nameWithType: CloudTask.StageFilesAsync(ConcurrentDictionary<Type, IFileStagingArtifact>)
  fullName: Microsoft.Azure.Batch.CloudTask.StageFilesAsync(System.Collections.Concurrent.ConcurrentDictionary<System.Type, Microsoft.Azure.Batch.IFileStagingArtifact>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: StageFilesAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/CloudTask.cs
    startLine: 66
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nStages the files listed in the <xref href=\"Microsoft.Azure.Batch.CloudTask.FilesToStage\" data-throw-if-not-resolved=\"false\"></xref> list.\n"
  remarks: The staging operation runs asynchronously.
  example: []
  syntax:
    content: public Task StageFilesAsync(ConcurrentDictionary<Type, IFileStagingArtifact> allFileStagingArtifacts = null)
    content.vb: Public Function StageFilesAsync(allFileStagingArtifacts As ConcurrentDictionary(Of Type, IFileStagingArtifact) = Nothing) As Task
    parameters:
    - id: allFileStagingArtifacts
      type: System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact}
      description: >-
        An optional collection to customize and receive information about the file staging process.

        For more information see <xref href="Microsoft.Azure.Batch.IFileStagingArtifact" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.CloudTask.StageFilesAsync*
  nameWithType.vb: CloudTask.StageFilesAsync(ConcurrentDictionary(Of Type, IFileStagingArtifact))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.CloudTask.StageFilesAsync(System.Collections.Concurrent.ConcurrentDictionary(Of System.Type, Microsoft.Azure.Batch.IFileStagingArtifact))
  name.vb: StageFilesAsync(ConcurrentDictionary(Of Type, IFileStagingArtifact))
- uid: Microsoft.Azure.Batch.CloudTask.StageFiles
  commentId: M:Microsoft.Azure.Batch.CloudTask.StageFiles
  id: StageFiles
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: StageFiles()
  nameWithType: CloudTask.StageFiles()
  fullName: Microsoft.Azure.Batch.CloudTask.StageFiles()
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: StageFiles
    path: src/azure-sdk-for-net/src/Batch/Client/Src/CloudTask.cs
    startLine: 102
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nStages the files listed in the <xref href=\"Microsoft.Azure.Batch.CloudTask.FilesToStage\" data-throw-if-not-resolved=\"false\"></xref> list.\n"
  remarks: This is a blocking operation. For a non-blocking equivalent, see <xref href="Microsoft.Azure.Batch.CloudTask.StageFilesAsync(System.Collections.Concurrent.ConcurrentDictionary%7bSystem.Type%2cMicrosoft.Azure.Batch.IFileStagingArtifact%7d)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public ConcurrentDictionary<Type, IFileStagingArtifact> StageFiles()
    content.vb: Public Function StageFiles As ConcurrentDictionary(Of Type, IFileStagingArtifact)
    return:
      type: System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact}
      description: >-
        A collection of information about the file staging process.

        For more information see <xref href="Microsoft.Azure.Batch.IFileStagingArtifact" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.CloudTask.StageFiles*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.CloudTask.ListNodeFiles(System.Nullable{System.Boolean},Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.CloudTask.ListNodeFiles(System.Nullable{System.Boolean},Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: ListNodeFiles(System.Nullable{System.Boolean},Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: ListNodeFiles(Nullable<Boolean>, DetailLevel, IEnumerable<BatchClientBehavior>)
  nameWithType: CloudTask.ListNodeFiles(Nullable<Boolean>, DetailLevel, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.CloudTask.ListNodeFiles(System.Nullable<System.Boolean>, Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ListNodeFiles
    path: src/azure-sdk-for-net/src/Batch/Client/Src/CloudTask.cs
    startLine: 123
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nEnumerates the files in the <xref href=\"Microsoft.Azure.Batch.CloudTask\" data-throw-if-not-resolved=\"false\"></xref>'s directory on its compute node.\n"
  remarks: >-
    This method returns immediately; the file data is retrieved from the Batch service only when the collection is enumerated.

    Retrieval is non-atomic; file data is retrieved in pages during enumeration of the collection.
  example: []
  syntax:
    content: public IPagedEnumerable<NodeFile> ListNodeFiles(bool ? recursive = null, DetailLevel detailLevel = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Function ListNodeFiles(recursive As Boolean? = Nothing, detailLevel As DetailLevel = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing) As IPagedEnumerable(Of NodeFile)
    parameters:
    - id: recursive
      type: System.Nullable{System.Boolean}
      description: If true, performs a recursive list of all files of the task. If false, returns only the files in the root task directory.
    - id: detailLevel
      type: Microsoft.Azure.Batch.DetailLevel
      description: A <xref href="Microsoft.Azure.Batch.DetailLevel" data-throw-if-not-resolved="false"></xref> used for filtering the list and for controlling which properties are retrieved from the service.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.CloudTask.CustomBehaviors" data-throw-if-not-resolved="false"></xref> and <span class="paramref">detailLevel</span>.
    return:
      type: Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.NodeFile}
      description: An <xref href="Microsoft.Azure.Batch.IPagedEnumerable%601" data-throw-if-not-resolved="false"></xref> that can be used to enumerate files asynchronously or synchronously.
  overload: Microsoft.Azure.Batch.CloudTask.ListNodeFiles*
  nameWithType.vb: CloudTask.ListNodeFiles(Nullable(Of Boolean), DetailLevel, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.CloudTask.ListNodeFiles(System.Nullable(Of System.Boolean), Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: ListNodeFiles(Nullable(Of Boolean), DetailLevel, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.CloudTask.ListSubtasks(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.CloudTask.ListSubtasks(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: ListSubtasks(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: ListSubtasks(DetailLevel, IEnumerable<BatchClientBehavior>)
  nameWithType: CloudTask.ListSubtasks(DetailLevel, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.CloudTask.ListSubtasks(Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ListSubtasks
    path: src/azure-sdk-for-net/src/Batch/Client/Src/CloudTask.cs
    startLine: 143
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nEnumerates the subtasks of the multi-instance <xref href=\"Microsoft.Azure.Batch.CloudTask\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: >-
    This method returns immediately; the file data is retrieved from the Batch service only when the collection is enumerated.

    Retrieval is non-atomic; file data is retrieved in pages during enumeration of the collection.
  example: []
  syntax:
    content: public IPagedEnumerable<SubtaskInformation> ListSubtasks(DetailLevel detailLevel = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Function ListSubtasks(detailLevel As DetailLevel = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing) As IPagedEnumerable(Of SubtaskInformation)
    parameters:
    - id: detailLevel
      type: Microsoft.Azure.Batch.DetailLevel
      description: A <xref href="Microsoft.Azure.Batch.DetailLevel" data-throw-if-not-resolved="false"></xref> used for filtering the list and for controlling which properties are retrieved from the service.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.CloudTask.CustomBehaviors" data-throw-if-not-resolved="false"></xref> and <span class="paramref">detailLevel</span>.
    return:
      type: Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.SubtaskInformation}
      description: An <xref href="Microsoft.Azure.Batch.IPagedEnumerable%601" data-throw-if-not-resolved="false"></xref> that can be used to enumerate files asynchronously or synchronously.
  overload: Microsoft.Azure.Batch.CloudTask.ListSubtasks*
  nameWithType.vb: CloudTask.ListSubtasks(DetailLevel, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.CloudTask.ListSubtasks(Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: ListSubtasks(DetailLevel, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.CloudTask.CommitAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.CloudTask.CommitAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: CommitAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: CommitAsync(IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: CloudTask.CommitAsync(IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.CloudTask.CommitAsync(System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CommitAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/CloudTask.cs
    startLine: 162
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nCommits all pending changes to this <xref href=\"Microsoft.Azure.Batch.CloudTask\" data-throw-if-not-resolved=\"false\"></xref> to the Azure Batch service.\n"
  remarks: The commit operation runs asynchronously.
  example: []
  syntax:
    content: public Task CommitAsync(IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function CommitAsync(additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.CloudTask.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> object that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.CloudTask.CommitAsync*
  nameWithType.vb: CloudTask.CommitAsync(IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.CloudTask.CommitAsync(System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: CommitAsync(IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.CloudTask.Commit(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.CloudTask.Commit(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: Commit(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: Commit(IEnumerable<BatchClientBehavior>)
  nameWithType: CloudTask.Commit(IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.CloudTask.Commit(System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Commit
    path: src/azure-sdk-for-net/src/Batch/Client/Src/CloudTask.cs
    startLine: 198
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nCommits all pending changes to this <xref href=\"Microsoft.Azure.Batch.CloudTask\" data-throw-if-not-resolved=\"false\"></xref> to the Azure Batch service.\n"
  remarks: "\n<p>This is a blocking operation. For a non-blocking equivalent, see <xref href=\"Microsoft.Azure.Batch.CloudTask.CommitAsync(System.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public void Commit(IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub Commit(additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.CloudTask.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.CloudTask.Commit*
  nameWithType.vb: CloudTask.Commit(IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.CloudTask.Commit(System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: Commit(IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.CloudTask.TerminateAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.CloudTask.TerminateAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: TerminateAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: TerminateAsync(IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: CloudTask.TerminateAsync(IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.CloudTask.TerminateAsync(System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: TerminateAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/CloudTask.cs
    startLine: 213
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nTerminates this <xref href=\"Microsoft.Azure.Batch.CloudTask\" data-throw-if-not-resolved=\"false\"></xref>, marking it as completed.\n"
  remarks: The terminate operation runs asynchronously.
  example: []
  syntax:
    content: public Task TerminateAsync(IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function TerminateAsync(additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.CloudTask.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> object that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.CloudTask.TerminateAsync*
  nameWithType.vb: CloudTask.TerminateAsync(IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.CloudTask.TerminateAsync(System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: TerminateAsync(IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.CloudTask.Terminate(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.CloudTask.Terminate(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: Terminate(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: Terminate(IEnumerable<BatchClientBehavior>)
  nameWithType: CloudTask.Terminate(IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.CloudTask.Terminate(System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Terminate
    path: src/azure-sdk-for-net/src/Batch/Client/Src/CloudTask.cs
    startLine: 234
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nTerminates this <xref href=\"Microsoft.Azure.Batch.CloudTask\" data-throw-if-not-resolved=\"false\"></xref>, marking it as completed.\n"
  remarks: This is a blocking operation. For a non-blocking equivalent, see <xref href="Microsoft.Azure.Batch.CloudTask.TerminateAsync(System.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public void Terminate(IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub Terminate(additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.CloudTask.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.CloudTask.Terminate*
  nameWithType.vb: CloudTask.Terminate(IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.CloudTask.Terminate(System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: Terminate(IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.CloudTask.DeleteAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.CloudTask.DeleteAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: DeleteAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: DeleteAsync(IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: CloudTask.DeleteAsync(IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.CloudTask.DeleteAsync(System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DeleteAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/CloudTask.cs
    startLine: 250
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nDeletes this <xref href=\"Microsoft.Azure.Batch.CloudTask\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: The delete operation runs asynchronously.
  example: []
  syntax:
    content: public Task DeleteAsync(IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function DeleteAsync(additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.CloudTask.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.CloudTask.DeleteAsync*
  nameWithType.vb: CloudTask.DeleteAsync(IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.CloudTask.DeleteAsync(System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: DeleteAsync(IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.CloudTask.Delete(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.CloudTask.Delete(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: Delete(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: Delete(IEnumerable<BatchClientBehavior>)
  nameWithType: CloudTask.Delete(IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.CloudTask.Delete(System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Delete
    path: src/azure-sdk-for-net/src/Batch/Client/Src/CloudTask.cs
    startLine: 271
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nDeletes this <xref href=\"Microsoft.Azure.Batch.CloudTask\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: This is a blocking operation. For a non-blocking equivalent, see <xref href="Microsoft.Azure.Batch.CloudTask.DeleteAsync(System.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public void Delete(IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub Delete(additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.CloudTask.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.CloudTask.Delete*
  nameWithType.vb: CloudTask.Delete(IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.CloudTask.Delete(System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: Delete(IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.CloudTask.ReactivateAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.CloudTask.ReactivateAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: ReactivateAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: ReactivateAsync(IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: CloudTask.ReactivateAsync(IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.CloudTask.ReactivateAsync(System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ReactivateAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/CloudTask.cs
    startLine: 297
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nReactivates this <xref href=\"Microsoft.Azure.Batch.CloudTask\" data-throw-if-not-resolved=\"false\"></xref>, allowing it to run again even if its retry count has been exhausted.\n"
  remarks: "\n<p>\nReactivation makes a task eligible to be retried again up to its maximum retry count.\n</p> \n<p>\nThis operation will fail for tasks that are not completed or that previously completed successfully (with an exit code of 0).\nAdditionally, this will fail if the job is in the <xref href=\"Microsoft.Azure.Batch.Common.JobState.Completed\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Azure.Batch.Common.JobState.Terminating\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Azure.Batch.Common.JobState.Deleting\" data-throw-if-not-resolved=\"false\"></xref> state.\n</p>\n<p>\nThe reactivate operation runs asynchronously.\n</p>\n"
  example: []
  syntax:
    content: public Task ReactivateAsync(IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function ReactivateAsync(additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.CloudTask.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.CloudTask.ReactivateAsync*
  nameWithType.vb: CloudTask.ReactivateAsync(IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.CloudTask.ReactivateAsync(System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: ReactivateAsync(IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.CloudTask.Reactivate(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.CloudTask.Reactivate(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: Reactivate(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: Reactivate(IEnumerable<BatchClientBehavior>)
  nameWithType: CloudTask.Reactivate(IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.CloudTask.Reactivate(System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Reactivate
    path: src/azure-sdk-for-net/src/Batch/Client/Src/CloudTask.cs
    startLine: 329
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nReactivates this <xref href=\"Microsoft.Azure.Batch.CloudTask\" data-throw-if-not-resolved=\"false\"></xref>, allowing it to run again even if its retry count has been exhausted.\n"
  remarks: "\n<p>\nReactivation makes a task eligible to be retried again up to its maximum retry count.\n</p> \n<p>\nThis operation will fail for tasks that are not completed or that previously completed successfully (with an exit code of 0).\nAdditionally, this will fail if the job is in the <xref href=\"Microsoft.Azure.Batch.Common.JobState.Completed\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Azure.Batch.Common.JobState.Terminating\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Azure.Batch.Common.JobState.Deleting\" data-throw-if-not-resolved=\"false\"></xref> state.\n</p>\n<p>\nThis is a blocking operation. For a non-blocking equivalent, see <xref href=\"Microsoft.Azure.Batch.CloudTask.ReactivateAsync(System.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n"
  example: []
  syntax:
    content: public void Reactivate(IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub Reactivate(additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.CloudTask.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.CloudTask.Reactivate*
  nameWithType.vb: CloudTask.Reactivate(IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.CloudTask.Reactivate(System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: Reactivate(IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.CloudTask.GetNodeFileAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.CloudTask.GetNodeFileAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: GetNodeFileAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: GetNodeFileAsync(String, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: CloudTask.GetNodeFileAsync(String, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.CloudTask.GetNodeFileAsync(System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: GetNodeFileAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/CloudTask.cs
    startLine: 345
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the specified <xref href=\"Microsoft.Azure.Batch.NodeFile\" data-throw-if-not-resolved=\"false\"></xref> from the <xref href=\"Microsoft.Azure.Batch.CloudTask\" data-throw-if-not-resolved=\"false\"></xref>'s directory on its compute node.\n"
  remarks: The get file operation runs asynchronously.
  example: []
  syntax:
    content: public Task<NodeFile> GetNodeFileAsync(string fileName, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function GetNodeFileAsync(fileName As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of NodeFile)
    parameters:
    - id: fileName
      type: System.String
      description: The name of the file to retrieve.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.CloudTask.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.Batch.NodeFile}
      description: A <xref href="Microsoft.Azure.Batch.NodeFile" data-throw-if-not-resolved="false"></xref> representing the specified file.
  overload: Microsoft.Azure.Batch.CloudTask.GetNodeFileAsync*
  nameWithType.vb: CloudTask.GetNodeFileAsync(String, IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.CloudTask.GetNodeFileAsync(System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: GetNodeFileAsync(String, IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.CloudTask.GetNodeFile(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.CloudTask.GetNodeFile(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: GetNodeFile(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: GetNodeFile(String, IEnumerable<BatchClientBehavior>)
  nameWithType: CloudTask.GetNodeFile(String, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.CloudTask.GetNodeFile(System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: GetNodeFile
    path: src/azure-sdk-for-net/src/Batch/Client/Src/CloudTask.cs
    startLine: 369
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the specified <xref href=\"Microsoft.Azure.Batch.NodeFile\" data-throw-if-not-resolved=\"false\"></xref> from the <xref href=\"Microsoft.Azure.Batch.CloudTask\" data-throw-if-not-resolved=\"false\"></xref>'s directory on its compute node.\n"
  remarks: This is a blocking operation. For a non-blocking equivalent, see <xref href="Microsoft.Azure.Batch.CloudTask.GetNodeFileAsync(System.String%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public NodeFile GetNodeFile(string fileName, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Function GetNodeFile(fileName As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing) As NodeFile
    parameters:
    - id: fileName
      type: System.String
      description: The name of the file to retrieve.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.CloudTask.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.Azure.Batch.NodeFile
      description: A <xref href="Microsoft.Azure.Batch.NodeFile" data-throw-if-not-resolved="false"></xref> representing the specified file.
  overload: Microsoft.Azure.Batch.CloudTask.GetNodeFile*
  nameWithType.vb: CloudTask.GetNodeFile(String, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.CloudTask.GetNodeFile(System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: GetNodeFile(String, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.CloudTask.RefreshAsync(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.CloudTask.RefreshAsync(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: RefreshAsync(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: RefreshAsync(DetailLevel, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: CloudTask.RefreshAsync(DetailLevel, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.CloudTask.RefreshAsync(Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: RefreshAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/CloudTask.cs
    startLine: 388
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nRefreshes the current <xref href=\"Microsoft.Azure.Batch.CloudTask\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Task RefreshAsync(DetailLevel detailLevel = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function RefreshAsync(detailLevel As DetailLevel = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: detailLevel
      type: Microsoft.Azure.Batch.DetailLevel
      description: The detail level for the refresh.  If a detail level which omits the <xref href="Microsoft.Azure.Batch.CloudTask.Id" data-throw-if-not-resolved="false"></xref> property is specified, refresh will fail.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.CloudTask.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.CloudTask.RefreshAsync*
  implements:
  - Microsoft.Azure.Batch.IRefreshable.RefreshAsync(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  nameWithType.vb: CloudTask.RefreshAsync(DetailLevel, IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.CloudTask.RefreshAsync(Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: RefreshAsync(DetailLevel, IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.CloudTask.Refresh(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.CloudTask.Refresh(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: Refresh(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: Refresh(DetailLevel, IEnumerable<BatchClientBehavior>)
  nameWithType: CloudTask.Refresh(DetailLevel, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.CloudTask.Refresh(Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Refresh
    path: src/azure-sdk-for-net/src/Batch/Client/Src/CloudTask.cs
    startLine: 419
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nRefreshes the current <xref href=\"Microsoft.Azure.Batch.CloudTask\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void Refresh(DetailLevel detailLevel = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub Refresh(detailLevel As DetailLevel = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: detailLevel
      type: Microsoft.Azure.Batch.DetailLevel
      description: The detail level for the refresh.  If a detail level which omits the <xref href="Microsoft.Azure.Batch.CloudTask.Id" data-throw-if-not-resolved="false"></xref> property is specified, refresh will fail.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.CloudTask.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.CloudTask.Refresh*
  implements:
  - Microsoft.Azure.Batch.IRefreshable.Refresh(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  nameWithType.vb: CloudTask.Refresh(DetailLevel, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.CloudTask.Refresh(Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: Refresh(DetailLevel, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.CloudTask.CustomBehaviors
  commentId: P:Microsoft.Azure.Batch.CloudTask.CustomBehaviors
  id: CustomBehaviors
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: CustomBehaviors
  nameWithType: CloudTask.CustomBehaviors
  fullName: Microsoft.Azure.Batch.CloudTask.CustomBehaviors
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CustomBehaviors
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/CloudTask.cs
    startLine: 230
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets a list of behaviors that modify or customize requests to the Batch service\nmade via this <xref href=\"Microsoft.Azure.Batch.CloudTask\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\n<p>These behaviors are inherited by child objects.</p>\n<p>Modifications are applied in the order of the collection. The last write wins.</p>\n"
  example: []
  syntax:
    content: public IList<BatchClientBehavior> CustomBehaviors { get; set; }
    content.vb: Public Property CustomBehaviors As IList(Of BatchClientBehavior)
    parameters: []
    return:
      type: System.Collections.Generic.IList{Microsoft.Azure.Batch.BatchClientBehavior}
  overload: Microsoft.Azure.Batch.CloudTask.CustomBehaviors*
  implements:
  - Microsoft.Azure.Batch.IInheritedBehaviors.CustomBehaviors
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.CloudTask.AffinityInformation
  commentId: P:Microsoft.Azure.Batch.CloudTask.AffinityInformation
  id: AffinityInformation
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: AffinityInformation
  nameWithType: CloudTask.AffinityInformation
  fullName: Microsoft.Azure.Batch.CloudTask.AffinityInformation
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: AffinityInformation
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/CloudTask.cs
    startLine: 239
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets a locality hint that can be used by the Batch service to select a node on which to start the task.\n"
  example: []
  syntax:
    content: public AffinityInformation AffinityInformation { get; set; }
    content.vb: Public Property AffinityInformation As AffinityInformation
    parameters: []
    return:
      type: Microsoft.Azure.Batch.AffinityInformation
  overload: Microsoft.Azure.Batch.CloudTask.AffinityInformation*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.CloudTask.ApplicationPackageReferences
  commentId: P:Microsoft.Azure.Batch.CloudTask.ApplicationPackageReferences
  id: ApplicationPackageReferences
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: ApplicationPackageReferences
  nameWithType: CloudTask.ApplicationPackageReferences
  fullName: Microsoft.Azure.Batch.CloudTask.ApplicationPackageReferences
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ApplicationPackageReferences
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/CloudTask.cs
    startLine: 249
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets a list of application packages that the Batch service will deploy to the compute node before running \nthe command line.\n"
  example: []
  syntax:
    content: public IList<ApplicationPackageReference> ApplicationPackageReferences { get; set; }
    content.vb: Public Property ApplicationPackageReferences As IList(Of ApplicationPackageReference)
    parameters: []
    return:
      type: System.Collections.Generic.IList{Microsoft.Azure.Batch.ApplicationPackageReference}
  overload: Microsoft.Azure.Batch.CloudTask.ApplicationPackageReferences*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.CloudTask.CommandLine
  commentId: P:Microsoft.Azure.Batch.CloudTask.CommandLine
  id: CommandLine
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: CommandLine
  nameWithType: CloudTask.CommandLine
  fullName: Microsoft.Azure.Batch.CloudTask.CommandLine
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CommandLine
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/CloudTask.cs
    startLine: 266
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets the command line of the task.\n"
  remarks: "\nThe command line does not run under a shell, and therefore cannot take advantage of shell features such as environment \nvariable expansion. If you want to take advantage of such features, you should invoke the shell in the command \nline, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux.\n"
  example: []
  syntax:
    content: public string CommandLine { get; set; }
    content.vb: Public Property CommandLine As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Batch.CloudTask.CommandLine*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.CloudTask.ComputeNodeInformation
  commentId: P:Microsoft.Azure.Batch.CloudTask.ComputeNodeInformation
  id: ComputeNodeInformation
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: ComputeNodeInformation
  nameWithType: CloudTask.ComputeNodeInformation
  fullName: Microsoft.Azure.Batch.CloudTask.ComputeNodeInformation
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ComputeNodeInformation
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/CloudTask.cs
    startLine: 275
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets information about the compute node on which the task ran.\n"
  example: []
  syntax:
    content: public ComputeNodeInformation ComputeNodeInformation { get; }
    content.vb: Public ReadOnly Property ComputeNodeInformation As ComputeNodeInformation
    parameters: []
    return:
      type: Microsoft.Azure.Batch.ComputeNodeInformation
  overload: Microsoft.Azure.Batch.CloudTask.ComputeNodeInformation*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Batch.CloudTask.Constraints
  commentId: P:Microsoft.Azure.Batch.CloudTask.Constraints
  id: Constraints
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: Constraints
  nameWithType: CloudTask.Constraints
  fullName: Microsoft.Azure.Batch.CloudTask.Constraints
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Constraints
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/CloudTask.cs
    startLine: 283
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets the execution constraints that apply to this task.\n"
  example: []
  syntax:
    content: public TaskConstraints Constraints { get; set; }
    content.vb: Public Property Constraints As TaskConstraints
    parameters: []
    return:
      type: Microsoft.Azure.Batch.TaskConstraints
  overload: Microsoft.Azure.Batch.CloudTask.Constraints*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.CloudTask.CreationTime
  commentId: P:Microsoft.Azure.Batch.CloudTask.CreationTime
  id: CreationTime
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: CreationTime
  nameWithType: CloudTask.CreationTime
  fullName: Microsoft.Azure.Batch.CloudTask.CreationTime
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CreationTime
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/CloudTask.cs
    startLine: 292
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the creation time of the task.\n"
  example: []
  syntax:
    content: public DateTime? CreationTime { get; }
    content.vb: Public ReadOnly Property CreationTime As Date?
    parameters: []
    return:
      type: System.Nullable{System.DateTime}
  overload: Microsoft.Azure.Batch.CloudTask.CreationTime*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Batch.CloudTask.DependsOn
  commentId: P:Microsoft.Azure.Batch.CloudTask.DependsOn
  id: DependsOn
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: DependsOn
  nameWithType: CloudTask.DependsOn
  fullName: Microsoft.Azure.Batch.CloudTask.DependsOn
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DependsOn
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/CloudTask.cs
    startLine: 305
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets any other tasks that this <xref href=\"Microsoft.Azure.Batch.CloudTask\" data-throw-if-not-resolved=\"false\"></xref> depends on. The task will not be scheduled until \nall depended-on tasks have completed successfully.\n"
  remarks: "\nThe job must set <xref href=\"Microsoft.Azure.Batch.CloudJob.UsesTaskDependencies\" data-throw-if-not-resolved=\"false\"></xref> to true in order to use task dependencies. If UsesTaskDependencies \nis false (the default), adding a task with dependencies will fail with an error.\n"
  example: []
  syntax:
    content: public TaskDependencies DependsOn { get; set; }
    content.vb: Public Property DependsOn As TaskDependencies
    parameters: []
    return:
      type: Microsoft.Azure.Batch.TaskDependencies
  overload: Microsoft.Azure.Batch.CloudTask.DependsOn*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.CloudTask.DisplayName
  commentId: P:Microsoft.Azure.Batch.CloudTask.DisplayName
  id: DisplayName
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: DisplayName
  nameWithType: CloudTask.DisplayName
  fullName: Microsoft.Azure.Batch.CloudTask.DisplayName
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DisplayName
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/CloudTask.cs
    startLine: 314
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets the display name of the task.\n"
  example: []
  syntax:
    content: public string DisplayName { get; set; }
    content.vb: Public Property DisplayName As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Batch.CloudTask.DisplayName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.CloudTask.EnvironmentSettings
  commentId: P:Microsoft.Azure.Batch.CloudTask.EnvironmentSettings
  id: EnvironmentSettings
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: EnvironmentSettings
  nameWithType: CloudTask.EnvironmentSettings
  fullName: Microsoft.Azure.Batch.CloudTask.EnvironmentSettings
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: EnvironmentSettings
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/CloudTask.cs
    startLine: 323
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets a list of environment variable settings for the task.\n"
  example: []
  syntax:
    content: public IList<EnvironmentSetting> EnvironmentSettings { get; set; }
    content.vb: Public Property EnvironmentSettings As IList(Of EnvironmentSetting)
    parameters: []
    return:
      type: System.Collections.Generic.IList{Microsoft.Azure.Batch.EnvironmentSetting}
  overload: Microsoft.Azure.Batch.CloudTask.EnvironmentSettings*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.CloudTask.ETag
  commentId: P:Microsoft.Azure.Batch.CloudTask.ETag
  id: ETag
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: ETag
  nameWithType: CloudTask.ETag
  fullName: Microsoft.Azure.Batch.CloudTask.ETag
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ETag
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/CloudTask.cs
    startLine: 335
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the ETag for the task.\n"
  example: []
  syntax:
    content: public string ETag { get; }
    content.vb: Public ReadOnly Property ETag As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Batch.CloudTask.ETag*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Batch.CloudTask.ExecutionInformation
  commentId: P:Microsoft.Azure.Batch.CloudTask.ExecutionInformation
  id: ExecutionInformation
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: ExecutionInformation
  nameWithType: CloudTask.ExecutionInformation
  fullName: Microsoft.Azure.Batch.CloudTask.ExecutionInformation
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ExecutionInformation
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/CloudTask.cs
    startLine: 343
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the execution information for the task.\n"
  example: []
  syntax:
    content: public TaskExecutionInformation ExecutionInformation { get; }
    content.vb: Public ReadOnly Property ExecutionInformation As TaskExecutionInformation
    parameters: []
    return:
      type: Microsoft.Azure.Batch.TaskExecutionInformation
  overload: Microsoft.Azure.Batch.CloudTask.ExecutionInformation*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Batch.CloudTask.ExitConditions
  commentId: P:Microsoft.Azure.Batch.CloudTask.ExitConditions
  id: ExitConditions
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: ExitConditions
  nameWithType: CloudTask.ExitConditions
  fullName: Microsoft.Azure.Batch.CloudTask.ExitConditions
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ExitConditions
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/CloudTask.cs
    startLine: 351
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets how the Batch service should respond when the task completes.\n"
  example: []
  syntax:
    content: public ExitConditions ExitConditions { get; set; }
    content.vb: Public Property ExitConditions As ExitConditions
    parameters: []
    return:
      type: Microsoft.Azure.Batch.ExitConditions
  overload: Microsoft.Azure.Batch.CloudTask.ExitConditions*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.CloudTask.FilesToStage
  commentId: P:Microsoft.Azure.Batch.CloudTask.FilesToStage
  id: FilesToStage
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: FilesToStage
  nameWithType: CloudTask.FilesToStage
  fullName: Microsoft.Azure.Batch.CloudTask.FilesToStage
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: FilesToStage
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/CloudTask.cs
    startLine: 360
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets a list of files to be staged for the task.\n"
  example: []
  syntax:
    content: public IList<IFileStagingProvider> FilesToStage { get; set; }
    content.vb: Public Property FilesToStage As IList(Of IFileStagingProvider)
    parameters: []
    return:
      type: System.Collections.Generic.IList{Microsoft.Azure.Batch.FileStaging.IFileStagingProvider}
  overload: Microsoft.Azure.Batch.CloudTask.FilesToStage*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.CloudTask.Id
  commentId: P:Microsoft.Azure.Batch.CloudTask.Id
  id: Id
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: CloudTask.Id
  fullName: Microsoft.Azure.Batch.CloudTask.Id
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Id
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/CloudTask.cs
    startLine: 372
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets the id of the task.\n"
  example: []
  syntax:
    content: public string Id { get; set; }
    content.vb: Public Property Id As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Batch.CloudTask.Id*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.CloudTask.LastModified
  commentId: P:Microsoft.Azure.Batch.CloudTask.LastModified
  id: LastModified
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: LastModified
  nameWithType: CloudTask.LastModified
  fullName: Microsoft.Azure.Batch.CloudTask.LastModified
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: LastModified
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/CloudTask.cs
    startLine: 381
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the last modified time of the task.\n"
  example: []
  syntax:
    content: public DateTime? LastModified { get; }
    content.vb: Public ReadOnly Property LastModified As Date?
    parameters: []
    return:
      type: System.Nullable{System.DateTime}
  overload: Microsoft.Azure.Batch.CloudTask.LastModified*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Batch.CloudTask.MultiInstanceSettings
  commentId: P:Microsoft.Azure.Batch.CloudTask.MultiInstanceSettings
  id: MultiInstanceSettings
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: MultiInstanceSettings
  nameWithType: CloudTask.MultiInstanceSettings
  fullName: Microsoft.Azure.Batch.CloudTask.MultiInstanceSettings
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: MultiInstanceSettings
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/CloudTask.cs
    startLine: 389
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets information about how to run the multi-instance task.\n"
  example: []
  syntax:
    content: public MultiInstanceSettings MultiInstanceSettings { get; set; }
    content.vb: Public Property MultiInstanceSettings As MultiInstanceSettings
    parameters: []
    return:
      type: Microsoft.Azure.Batch.MultiInstanceSettings
  overload: Microsoft.Azure.Batch.CloudTask.MultiInstanceSettings*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.CloudTask.PreviousState
  commentId: P:Microsoft.Azure.Batch.CloudTask.PreviousState
  id: PreviousState
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: PreviousState
  nameWithType: CloudTask.PreviousState
  fullName: Microsoft.Azure.Batch.CloudTask.PreviousState
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: PreviousState
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/CloudTask.cs
    startLine: 402
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the previous state of the task.\n"
  remarks: "\nIf the task is in its initial <xref href=\"Microsoft.Azure.Batch.Common.TaskState.Active\" data-throw-if-not-resolved=\"false\"></xref> state, the PreviousState property is not \ndefined.\n"
  example: []
  syntax:
    content: public TaskState? PreviousState { get; }
    content.vb: Public ReadOnly Property PreviousState As TaskState?
    parameters: []
    return:
      type: System.Nullable{Microsoft.Azure.Batch.Common.TaskState}
  overload: Microsoft.Azure.Batch.CloudTask.PreviousState*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Batch.CloudTask.PreviousStateTransitionTime
  commentId: P:Microsoft.Azure.Batch.CloudTask.PreviousStateTransitionTime
  id: PreviousStateTransitionTime
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: PreviousStateTransitionTime
  nameWithType: CloudTask.PreviousStateTransitionTime
  fullName: Microsoft.Azure.Batch.CloudTask.PreviousStateTransitionTime
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: PreviousStateTransitionTime
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/CloudTask.cs
    startLine: 414
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the time at which the task entered its previous state.\n"
  remarks: "\nIf the task is in its initial <xref href=\"Microsoft.Azure.Batch.Common.TaskState.Active\" data-throw-if-not-resolved=\"false\"></xref> state, the PreviousStateTransitionTime property \nis not defined.\n"
  example: []
  syntax:
    content: public DateTime? PreviousStateTransitionTime { get; }
    content.vb: Public ReadOnly Property PreviousStateTransitionTime As Date?
    parameters: []
    return:
      type: System.Nullable{System.DateTime}
  overload: Microsoft.Azure.Batch.CloudTask.PreviousStateTransitionTime*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Batch.CloudTask.ResourceFiles
  commentId: P:Microsoft.Azure.Batch.CloudTask.ResourceFiles
  id: ResourceFiles
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: ResourceFiles
  nameWithType: CloudTask.ResourceFiles
  fullName: Microsoft.Azure.Batch.CloudTask.ResourceFiles
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ResourceFiles
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/CloudTask.cs
    startLine: 423
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets a list of files that the Batch service will download to the compute node before running the command \nline.\n"
  example: []
  syntax:
    content: public IList<ResourceFile> ResourceFiles { get; set; }
    content.vb: Public Property ResourceFiles As IList(Of ResourceFile)
    parameters: []
    return:
      type: System.Collections.Generic.IList{Microsoft.Azure.Batch.ResourceFile}
  overload: Microsoft.Azure.Batch.CloudTask.ResourceFiles*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.CloudTask.RunElevated
  commentId: P:Microsoft.Azure.Batch.CloudTask.RunElevated
  id: RunElevated
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: RunElevated
  nameWithType: CloudTask.RunElevated
  fullName: Microsoft.Azure.Batch.CloudTask.RunElevated
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: RunElevated
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/CloudTask.cs
    startLine: 435
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets whether to run the task in elevated mode.\n"
  example: []
  syntax:
    content: public bool ? RunElevated { get; set; }
    content.vb: Public Property RunElevated As Boolean?
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
  overload: Microsoft.Azure.Batch.CloudTask.RunElevated*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.CloudTask.State
  commentId: P:Microsoft.Azure.Batch.CloudTask.State
  id: State
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: State
  nameWithType: CloudTask.State
  fullName: Microsoft.Azure.Batch.CloudTask.State
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: State
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/CloudTask.cs
    startLine: 444
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the current state of the task.\n"
  example: []
  syntax:
    content: public TaskState? State { get; }
    content.vb: Public ReadOnly Property State As TaskState?
    parameters: []
    return:
      type: System.Nullable{Microsoft.Azure.Batch.Common.TaskState}
  overload: Microsoft.Azure.Batch.CloudTask.State*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Batch.CloudTask.StateTransitionTime
  commentId: P:Microsoft.Azure.Batch.CloudTask.StateTransitionTime
  id: StateTransitionTime
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: StateTransitionTime
  nameWithType: CloudTask.StateTransitionTime
  fullName: Microsoft.Azure.Batch.CloudTask.StateTransitionTime
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: StateTransitionTime
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/CloudTask.cs
    startLine: 452
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the time at which the task entered its current state.\n"
  example: []
  syntax:
    content: public DateTime? StateTransitionTime { get; }
    content.vb: Public ReadOnly Property StateTransitionTime As Date?
    parameters: []
    return:
      type: System.Nullable{System.DateTime}
  overload: Microsoft.Azure.Batch.CloudTask.StateTransitionTime*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Batch.CloudTask.Statistics
  commentId: P:Microsoft.Azure.Batch.CloudTask.Statistics
  id: Statistics
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: Statistics
  nameWithType: CloudTask.Statistics
  fullName: Microsoft.Azure.Batch.CloudTask.Statistics
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Statistics
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/CloudTask.cs
    startLine: 464
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets resource usage statistics for the task.\n"
  remarks: "\nThis property is populated only if the <xref href=\"Microsoft.Azure.Batch.CloudTask\" data-throw-if-not-resolved=\"false\"></xref> was retrieved with an <xref href=\"Microsoft.Azure.Batch.ODATADetailLevel.ExpandClause\" data-throw-if-not-resolved=\"false\"></xref> \nincluding the 'stats' attribute; otherwise it is null.\n"
  example: []
  syntax:
    content: public TaskStatistics Statistics { get; }
    content.vb: Public ReadOnly Property Statistics As TaskStatistics
    parameters: []
    return:
      type: Microsoft.Azure.Batch.TaskStatistics
  overload: Microsoft.Azure.Batch.CloudTask.Statistics*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Batch.CloudTask.Url
  commentId: P:Microsoft.Azure.Batch.CloudTask.Url
  id: Url
  parent: Microsoft.Azure.Batch.CloudTask
  langs:
  - csharp
  - vb
  name: Url
  nameWithType: CloudTask.Url
  fullName: Microsoft.Azure.Batch.CloudTask.Url
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/CloudTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Url
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/CloudTask.cs
    startLine: 472
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the URL of the task.\n"
  example: []
  syntax:
    content: public string Url { get; }
    content.vb: Public ReadOnly Property Url As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Batch.CloudTask.Url*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Microsoft.Azure.Batch
  commentId: N:Microsoft.Azure.Batch
  isExternal: false
  name: Microsoft.Azure.Batch
  nameWithType: Microsoft.Azure.Batch
  fullName: Microsoft.Azure.Batch
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Azure.Batch.IRefreshable
  commentId: T:Microsoft.Azure.Batch.IRefreshable
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: IRefreshable
  nameWithType: IRefreshable
  fullName: Microsoft.Azure.Batch.IRefreshable
- uid: Microsoft.Azure.Batch.IInheritedBehaviors
  commentId: T:Microsoft.Azure.Batch.IInheritedBehaviors
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: IInheritedBehaviors
  nameWithType: IInheritedBehaviors
  fullName: Microsoft.Azure.Batch.IInheritedBehaviors
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Batch.CloudTask
  commentId: T:Microsoft.Azure.Batch.CloudTask
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: CloudTask
  nameWithType: CloudTask
  fullName: Microsoft.Azure.Batch.CloudTask
- uid: Microsoft.Azure.Batch.JobOperations.AddTaskAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask},Microsoft.Azure.Batch.BatchClientParallelOptions,System.Collections.Concurrent.ConcurrentBag{System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact}},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.JobOperations.AddTaskAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask},Microsoft.Azure.Batch.BatchClientParallelOptions,System.Collections.Concurrent.ConcurrentBag{System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact}},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
- uid: Microsoft.Azure.Batch.CloudTask.#ctor*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.#ctor
  isExternal: false
  name: CloudTask
  nameWithType: CloudTask.CloudTask
  fullName: Microsoft.Azure.Batch.CloudTask.CloudTask
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Azure.Batch.CloudTask.FilesToStage
  commentId: P:Microsoft.Azure.Batch.CloudTask.FilesToStage
- uid: Microsoft.Azure.Batch.IFileStagingArtifact
  commentId: T:Microsoft.Azure.Batch.IFileStagingArtifact
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: IFileStagingArtifact
  nameWithType: IFileStagingArtifact
  fullName: Microsoft.Azure.Batch.IFileStagingArtifact
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.Azure.Batch.CloudTask.StageFilesAsync*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.StageFilesAsync
  isExternal: false
  name: StageFilesAsync
  nameWithType: CloudTask.StageFilesAsync
  fullName: Microsoft.Azure.Batch.CloudTask.StageFilesAsync
- uid: System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact}
  commentId: T:System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact}
  parent: System.Collections.Concurrent
  definition: System.Collections.Concurrent.ConcurrentDictionary`2
  name: ConcurrentDictionary<Type, IFileStagingArtifact>
  nameWithType: ConcurrentDictionary<Type, IFileStagingArtifact>
  fullName: System.Collections.Concurrent.ConcurrentDictionary<System.Type, Microsoft.Azure.Batch.IFileStagingArtifact>
  nameWithType.vb: ConcurrentDictionary(Of Type, IFileStagingArtifact)
  fullname.vb: System.Collections.Concurrent.ConcurrentDictionary(Of System.Type, Microsoft.Azure.Batch.IFileStagingArtifact)
  name.vb: ConcurrentDictionary(Of Type, IFileStagingArtifact)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    nameWithType: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Azure.Batch.IFileStagingArtifact
    name: IFileStagingArtifact
    nameWithType: IFileStagingArtifact
    fullName: Microsoft.Azure.Batch.IFileStagingArtifact
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    nameWithType: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Azure.Batch.IFileStagingArtifact
    name: IFileStagingArtifact
    nameWithType: IFileStagingArtifact
    fullName: Microsoft.Azure.Batch.IFileStagingArtifact
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Collections.Concurrent.ConcurrentDictionary`2
  commentId: T:System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: true
  name: ConcurrentDictionary<TKey, TValue>
  nameWithType: ConcurrentDictionary<TKey, TValue>
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue)
  name.vb: ConcurrentDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    nameWithType: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    nameWithType: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent
  commentId: N:System.Collections.Concurrent
  isExternal: false
  name: System.Collections.Concurrent
  nameWithType: System.Collections.Concurrent
  fullName: System.Collections.Concurrent
- uid: Microsoft.Azure.Batch.CloudTask.StageFilesAsync(System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact})
  commentId: M:Microsoft.Azure.Batch.CloudTask.StageFilesAsync(System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact})
- uid: Microsoft.Azure.Batch.CloudTask.StageFiles*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.StageFiles
  isExternal: false
  name: StageFiles
  nameWithType: CloudTask.StageFiles
  fullName: Microsoft.Azure.Batch.CloudTask.StageFiles
- uid: Microsoft.Azure.Batch.DetailLevel
  commentId: T:Microsoft.Azure.Batch.DetailLevel
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: DetailLevel
  nameWithType: DetailLevel
  fullName: Microsoft.Azure.Batch.DetailLevel
- uid: Microsoft.Azure.Batch.BatchClientBehavior
  commentId: T:Microsoft.Azure.Batch.BatchClientBehavior
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: BatchClientBehavior
  nameWithType: BatchClientBehavior
  fullName: Microsoft.Azure.Batch.BatchClientBehavior
- uid: Microsoft.Azure.Batch.CloudTask.CustomBehaviors
  commentId: P:Microsoft.Azure.Batch.CloudTask.CustomBehaviors
- uid: Microsoft.Azure.Batch.IPagedEnumerable`1
  commentId: T:Microsoft.Azure.Batch.IPagedEnumerable`1
  isExternal: false
  name: IPagedEnumerable<T>
  nameWithType: IPagedEnumerable<T>
  fullName: Microsoft.Azure.Batch.IPagedEnumerable<T>
  nameWithType.vb: IPagedEnumerable(Of T)
  fullname.vb: Microsoft.Azure.Batch.IPagedEnumerable(Of T)
  name.vb: IPagedEnumerable(Of T)
  spec.csharp:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.CloudTask.ListNodeFiles*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.ListNodeFiles
  isExternal: false
  name: ListNodeFiles
  nameWithType: CloudTask.ListNodeFiles
  fullName: Microsoft.Azure.Batch.CloudTask.ListNodeFiles
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullname.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<BatchClientBehavior>
  nameWithType: IEnumerable<BatchClientBehavior>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>
  nameWithType.vb: IEnumerable(Of BatchClientBehavior)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior)
  name.vb: IEnumerable(Of BatchClientBehavior)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.BatchClientBehavior
    name: BatchClientBehavior
    nameWithType: BatchClientBehavior
    fullName: Microsoft.Azure.Batch.BatchClientBehavior
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.BatchClientBehavior
    name: BatchClientBehavior
    nameWithType: BatchClientBehavior
    fullName: Microsoft.Azure.Batch.BatchClientBehavior
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.NodeFile}
  commentId: T:Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.NodeFile}
  parent: Microsoft.Azure.Batch
  definition: Microsoft.Azure.Batch.IPagedEnumerable`1
  name: IPagedEnumerable<NodeFile>
  nameWithType: IPagedEnumerable<NodeFile>
  fullName: Microsoft.Azure.Batch.IPagedEnumerable<Microsoft.Azure.Batch.NodeFile>
  nameWithType.vb: IPagedEnumerable(Of NodeFile)
  fullname.vb: Microsoft.Azure.Batch.IPagedEnumerable(Of Microsoft.Azure.Batch.NodeFile)
  name.vb: IPagedEnumerable(Of NodeFile)
  spec.csharp:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.NodeFile
    name: NodeFile
    nameWithType: NodeFile
    fullName: Microsoft.Azure.Batch.NodeFile
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.NodeFile
    name: NodeFile
    nameWithType: NodeFile
    fullName: Microsoft.Azure.Batch.NodeFile
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Azure.Batch.CloudTask.ListSubtasks*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.ListSubtasks
  isExternal: false
  name: ListSubtasks
  nameWithType: CloudTask.ListSubtasks
  fullName: Microsoft.Azure.Batch.CloudTask.ListSubtasks
- uid: Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.SubtaskInformation}
  commentId: T:Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.SubtaskInformation}
  parent: Microsoft.Azure.Batch
  definition: Microsoft.Azure.Batch.IPagedEnumerable`1
  name: IPagedEnumerable<SubtaskInformation>
  nameWithType: IPagedEnumerable<SubtaskInformation>
  fullName: Microsoft.Azure.Batch.IPagedEnumerable<Microsoft.Azure.Batch.SubtaskInformation>
  nameWithType.vb: IPagedEnumerable(Of SubtaskInformation)
  fullname.vb: Microsoft.Azure.Batch.IPagedEnumerable(Of Microsoft.Azure.Batch.SubtaskInformation)
  name.vb: IPagedEnumerable(Of SubtaskInformation)
  spec.csharp:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.SubtaskInformation
    name: SubtaskInformation
    nameWithType: SubtaskInformation
    fullName: Microsoft.Azure.Batch.SubtaskInformation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.SubtaskInformation
    name: SubtaskInformation
    nameWithType: SubtaskInformation
    fullName: Microsoft.Azure.Batch.SubtaskInformation
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: Microsoft.Azure.Batch.CloudTask.CommitAsync*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.CommitAsync
  isExternal: false
  name: CommitAsync
  nameWithType: CloudTask.CommitAsync
  fullName: Microsoft.Azure.Batch.CloudTask.CommitAsync
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: Microsoft.Azure.Batch.CloudTask.CommitAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.CloudTask.CommitAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.CloudTask.Commit*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.Commit
  isExternal: false
  name: Commit
  nameWithType: CloudTask.Commit
  fullName: Microsoft.Azure.Batch.CloudTask.Commit
- uid: Microsoft.Azure.Batch.CloudTask.TerminateAsync*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.TerminateAsync
  isExternal: false
  name: TerminateAsync
  nameWithType: CloudTask.TerminateAsync
  fullName: Microsoft.Azure.Batch.CloudTask.TerminateAsync
- uid: Microsoft.Azure.Batch.CloudTask.TerminateAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.CloudTask.TerminateAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.CloudTask.Terminate*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.Terminate
  isExternal: false
  name: Terminate
  nameWithType: CloudTask.Terminate
  fullName: Microsoft.Azure.Batch.CloudTask.Terminate
- uid: Microsoft.Azure.Batch.CloudTask.DeleteAsync*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.DeleteAsync
  isExternal: false
  name: DeleteAsync
  nameWithType: CloudTask.DeleteAsync
  fullName: Microsoft.Azure.Batch.CloudTask.DeleteAsync
- uid: Microsoft.Azure.Batch.CloudTask.DeleteAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.CloudTask.DeleteAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.CloudTask.Delete*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.Delete
  isExternal: false
  name: Delete
  nameWithType: CloudTask.Delete
  fullName: Microsoft.Azure.Batch.CloudTask.Delete
- uid: Microsoft.Azure.Batch.Common.JobState.Completed
  commentId: F:Microsoft.Azure.Batch.Common.JobState.Completed
- uid: Microsoft.Azure.Batch.Common.JobState.Terminating
  commentId: F:Microsoft.Azure.Batch.Common.JobState.Terminating
- uid: Microsoft.Azure.Batch.Common.JobState.Deleting
  commentId: F:Microsoft.Azure.Batch.Common.JobState.Deleting
- uid: Microsoft.Azure.Batch.CloudTask.ReactivateAsync*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.ReactivateAsync
  isExternal: false
  name: ReactivateAsync
  nameWithType: CloudTask.ReactivateAsync
  fullName: Microsoft.Azure.Batch.CloudTask.ReactivateAsync
- uid: Microsoft.Azure.Batch.CloudTask.ReactivateAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.CloudTask.ReactivateAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.CloudTask.Reactivate*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.Reactivate
  isExternal: false
  name: Reactivate
  nameWithType: CloudTask.Reactivate
  fullName: Microsoft.Azure.Batch.CloudTask.Reactivate
- uid: Microsoft.Azure.Batch.NodeFile
  commentId: T:Microsoft.Azure.Batch.NodeFile
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: NodeFile
  nameWithType: NodeFile
  fullName: Microsoft.Azure.Batch.NodeFile
- uid: Microsoft.Azure.Batch.CloudTask.GetNodeFileAsync*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.GetNodeFileAsync
  isExternal: false
  name: GetNodeFileAsync
  nameWithType: CloudTask.GetNodeFileAsync
  fullName: Microsoft.Azure.Batch.CloudTask.GetNodeFileAsync
- uid: System.Threading.Tasks.Task{Microsoft.Azure.Batch.NodeFile}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.Batch.NodeFile}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<NodeFile>
  nameWithType: Task<NodeFile>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.Batch.NodeFile>
  nameWithType.vb: Task(Of NodeFile)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.Batch.NodeFile)
  name.vb: Task(Of NodeFile)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.NodeFile
    name: NodeFile
    nameWithType: NodeFile
    fullName: Microsoft.Azure.Batch.NodeFile
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.NodeFile
    name: NodeFile
    nameWithType: NodeFile
    fullName: Microsoft.Azure.Batch.NodeFile
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.CloudTask.GetNodeFileAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.CloudTask.GetNodeFileAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.CloudTask.GetNodeFile*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.GetNodeFile
  isExternal: false
  name: GetNodeFile
  nameWithType: CloudTask.GetNodeFile
  fullName: Microsoft.Azure.Batch.CloudTask.GetNodeFile
- uid: Microsoft.Azure.Batch.CloudTask.Id
  commentId: P:Microsoft.Azure.Batch.CloudTask.Id
- uid: Microsoft.Azure.Batch.CloudTask.RefreshAsync*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.RefreshAsync
  isExternal: false
  name: RefreshAsync
  nameWithType: CloudTask.RefreshAsync
  fullName: Microsoft.Azure.Batch.CloudTask.RefreshAsync
- uid: Microsoft.Azure.Batch.IRefreshable.RefreshAsync(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.IRefreshable.RefreshAsync(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.IRefreshable
  isExternal: true
  name: RefreshAsync(DetailLevel, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: IRefreshable.RefreshAsync(DetailLevel, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.IRefreshable.RefreshAsync(Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  nameWithType.vb: IRefreshable.RefreshAsync(DetailLevel, IEnumerable(Of BatchClientBehavior), CancellationToken)
  fullname.vb: Microsoft.Azure.Batch.IRefreshable.RefreshAsync(Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: RefreshAsync(DetailLevel, IEnumerable(Of BatchClientBehavior), CancellationToken)
  spec.csharp:
  - uid: Microsoft.Azure.Batch.IRefreshable.RefreshAsync(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
    name: RefreshAsync
    nameWithType: IRefreshable.RefreshAsync
    fullName: Microsoft.Azure.Batch.IRefreshable.RefreshAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Azure.Batch.DetailLevel
    name: DetailLevel
    nameWithType: DetailLevel
    fullName: Microsoft.Azure.Batch.DetailLevel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.BatchClientBehavior
    name: BatchClientBehavior
    nameWithType: BatchClientBehavior
    fullName: Microsoft.Azure.Batch.BatchClientBehavior
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Batch.IRefreshable.RefreshAsync(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
    name: RefreshAsync
    nameWithType: IRefreshable.RefreshAsync
    fullName: Microsoft.Azure.Batch.IRefreshable.RefreshAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Azure.Batch.DetailLevel
    name: DetailLevel
    nameWithType: DetailLevel
    fullName: Microsoft.Azure.Batch.DetailLevel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.BatchClientBehavior
    name: BatchClientBehavior
    nameWithType: BatchClientBehavior
    fullName: Microsoft.Azure.Batch.BatchClientBehavior
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.CloudTask.Refresh*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.Refresh
  isExternal: false
  name: Refresh
  nameWithType: CloudTask.Refresh
  fullName: Microsoft.Azure.Batch.CloudTask.Refresh
- uid: Microsoft.Azure.Batch.IRefreshable.Refresh(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.IRefreshable.Refresh(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.IRefreshable
  isExternal: true
  name: Refresh(DetailLevel, IEnumerable<BatchClientBehavior>)
  nameWithType: IRefreshable.Refresh(DetailLevel, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.IRefreshable.Refresh(Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  nameWithType.vb: IRefreshable.Refresh(DetailLevel, IEnumerable(Of BatchClientBehavior))
  fullname.vb: Microsoft.Azure.Batch.IRefreshable.Refresh(Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: Refresh(DetailLevel, IEnumerable(Of BatchClientBehavior))
  spec.csharp:
  - uid: Microsoft.Azure.Batch.IRefreshable.Refresh(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
    name: Refresh
    nameWithType: IRefreshable.Refresh
    fullName: Microsoft.Azure.Batch.IRefreshable.Refresh
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Azure.Batch.DetailLevel
    name: DetailLevel
    nameWithType: DetailLevel
    fullName: Microsoft.Azure.Batch.DetailLevel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.BatchClientBehavior
    name: BatchClientBehavior
    nameWithType: BatchClientBehavior
    fullName: Microsoft.Azure.Batch.BatchClientBehavior
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Batch.IRefreshable.Refresh(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
    name: Refresh
    nameWithType: IRefreshable.Refresh
    fullName: Microsoft.Azure.Batch.IRefreshable.Refresh
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Azure.Batch.DetailLevel
    name: DetailLevel
    nameWithType: DetailLevel
    fullName: Microsoft.Azure.Batch.DetailLevel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.BatchClientBehavior
    name: BatchClientBehavior
    nameWithType: BatchClientBehavior
    fullName: Microsoft.Azure.Batch.BatchClientBehavior
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.CloudTask.CustomBehaviors*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.CustomBehaviors
  isExternal: false
  name: CustomBehaviors
  nameWithType: CloudTask.CustomBehaviors
  fullName: Microsoft.Azure.Batch.CloudTask.CustomBehaviors
- uid: Microsoft.Azure.Batch.IInheritedBehaviors.CustomBehaviors
  commentId: P:Microsoft.Azure.Batch.IInheritedBehaviors.CustomBehaviors
  parent: Microsoft.Azure.Batch.IInheritedBehaviors
  isExternal: false
  name: CustomBehaviors
  nameWithType: IInheritedBehaviors.CustomBehaviors
  fullName: Microsoft.Azure.Batch.IInheritedBehaviors.CustomBehaviors
- uid: System.Collections.Generic.IList{Microsoft.Azure.Batch.BatchClientBehavior}
  commentId: T:System.Collections.Generic.IList{Microsoft.Azure.Batch.BatchClientBehavior}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<BatchClientBehavior>
  nameWithType: IList<BatchClientBehavior>
  fullName: System.Collections.Generic.IList<Microsoft.Azure.Batch.BatchClientBehavior>
  nameWithType.vb: IList(Of BatchClientBehavior)
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.Azure.Batch.BatchClientBehavior)
  name.vb: IList(Of BatchClientBehavior)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.BatchClientBehavior
    name: BatchClientBehavior
    nameWithType: BatchClientBehavior
    fullName: Microsoft.Azure.Batch.BatchClientBehavior
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.BatchClientBehavior
    name: BatchClientBehavior
    nameWithType: BatchClientBehavior
    fullName: Microsoft.Azure.Batch.BatchClientBehavior
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.CloudTask.AffinityInformation*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.AffinityInformation
  isExternal: false
  name: AffinityInformation
  nameWithType: CloudTask.AffinityInformation
  fullName: Microsoft.Azure.Batch.CloudTask.AffinityInformation
- uid: Microsoft.Azure.Batch.AffinityInformation
  commentId: T:Microsoft.Azure.Batch.AffinityInformation
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: AffinityInformation
  nameWithType: AffinityInformation
  fullName: Microsoft.Azure.Batch.AffinityInformation
- uid: Microsoft.Azure.Batch.CloudTask.ApplicationPackageReferences*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.ApplicationPackageReferences
  isExternal: false
  name: ApplicationPackageReferences
  nameWithType: CloudTask.ApplicationPackageReferences
  fullName: Microsoft.Azure.Batch.CloudTask.ApplicationPackageReferences
- uid: System.Collections.Generic.IList{Microsoft.Azure.Batch.ApplicationPackageReference}
  commentId: T:System.Collections.Generic.IList{Microsoft.Azure.Batch.ApplicationPackageReference}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<ApplicationPackageReference>
  nameWithType: IList<ApplicationPackageReference>
  fullName: System.Collections.Generic.IList<Microsoft.Azure.Batch.ApplicationPackageReference>
  nameWithType.vb: IList(Of ApplicationPackageReference)
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.Azure.Batch.ApplicationPackageReference)
  name.vb: IList(Of ApplicationPackageReference)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.ApplicationPackageReference
    name: ApplicationPackageReference
    nameWithType: ApplicationPackageReference
    fullName: Microsoft.Azure.Batch.ApplicationPackageReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.ApplicationPackageReference
    name: ApplicationPackageReference
    nameWithType: ApplicationPackageReference
    fullName: Microsoft.Azure.Batch.ApplicationPackageReference
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.CloudTask.CommandLine*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.CommandLine
  isExternal: false
  name: CommandLine
  nameWithType: CloudTask.CommandLine
  fullName: Microsoft.Azure.Batch.CloudTask.CommandLine
- uid: Microsoft.Azure.Batch.CloudTask.ComputeNodeInformation*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.ComputeNodeInformation
  isExternal: false
  name: ComputeNodeInformation
  nameWithType: CloudTask.ComputeNodeInformation
  fullName: Microsoft.Azure.Batch.CloudTask.ComputeNodeInformation
- uid: Microsoft.Azure.Batch.ComputeNodeInformation
  commentId: T:Microsoft.Azure.Batch.ComputeNodeInformation
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: ComputeNodeInformation
  nameWithType: ComputeNodeInformation
  fullName: Microsoft.Azure.Batch.ComputeNodeInformation
- uid: Microsoft.Azure.Batch.CloudTask.Constraints*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.Constraints
  isExternal: false
  name: Constraints
  nameWithType: CloudTask.Constraints
  fullName: Microsoft.Azure.Batch.CloudTask.Constraints
- uid: Microsoft.Azure.Batch.TaskConstraints
  commentId: T:Microsoft.Azure.Batch.TaskConstraints
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: TaskConstraints
  nameWithType: TaskConstraints
  fullName: Microsoft.Azure.Batch.TaskConstraints
- uid: Microsoft.Azure.Batch.CloudTask.CreationTime*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.CreationTime
  isExternal: false
  name: CreationTime
  nameWithType: CloudTask.CreationTime
  fullName: Microsoft.Azure.Batch.CloudTask.CreationTime
- uid: System.Nullable{System.DateTime}
  commentId: T:System.Nullable{System.DateTime}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<System.DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullname.vb: System.Nullable(Of System.DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.CloudJob.UsesTaskDependencies
  commentId: P:Microsoft.Azure.Batch.CloudJob.UsesTaskDependencies
- uid: Microsoft.Azure.Batch.CloudTask.DependsOn*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.DependsOn
  isExternal: false
  name: DependsOn
  nameWithType: CloudTask.DependsOn
  fullName: Microsoft.Azure.Batch.CloudTask.DependsOn
- uid: Microsoft.Azure.Batch.TaskDependencies
  commentId: T:Microsoft.Azure.Batch.TaskDependencies
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: TaskDependencies
  nameWithType: TaskDependencies
  fullName: Microsoft.Azure.Batch.TaskDependencies
- uid: Microsoft.Azure.Batch.CloudTask.DisplayName*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.DisplayName
  isExternal: false
  name: DisplayName
  nameWithType: CloudTask.DisplayName
  fullName: Microsoft.Azure.Batch.CloudTask.DisplayName
- uid: Microsoft.Azure.Batch.CloudTask.EnvironmentSettings*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.EnvironmentSettings
  isExternal: false
  name: EnvironmentSettings
  nameWithType: CloudTask.EnvironmentSettings
  fullName: Microsoft.Azure.Batch.CloudTask.EnvironmentSettings
- uid: System.Collections.Generic.IList{Microsoft.Azure.Batch.EnvironmentSetting}
  commentId: T:System.Collections.Generic.IList{Microsoft.Azure.Batch.EnvironmentSetting}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<EnvironmentSetting>
  nameWithType: IList<EnvironmentSetting>
  fullName: System.Collections.Generic.IList<Microsoft.Azure.Batch.EnvironmentSetting>
  nameWithType.vb: IList(Of EnvironmentSetting)
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.Azure.Batch.EnvironmentSetting)
  name.vb: IList(Of EnvironmentSetting)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.EnvironmentSetting
    name: EnvironmentSetting
    nameWithType: EnvironmentSetting
    fullName: Microsoft.Azure.Batch.EnvironmentSetting
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.EnvironmentSetting
    name: EnvironmentSetting
    nameWithType: EnvironmentSetting
    fullName: Microsoft.Azure.Batch.EnvironmentSetting
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.CloudTask.ETag*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.ETag
  isExternal: false
  name: ETag
  nameWithType: CloudTask.ETag
  fullName: Microsoft.Azure.Batch.CloudTask.ETag
- uid: Microsoft.Azure.Batch.CloudTask.ExecutionInformation*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.ExecutionInformation
  isExternal: false
  name: ExecutionInformation
  nameWithType: CloudTask.ExecutionInformation
  fullName: Microsoft.Azure.Batch.CloudTask.ExecutionInformation
- uid: Microsoft.Azure.Batch.TaskExecutionInformation
  commentId: T:Microsoft.Azure.Batch.TaskExecutionInformation
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: TaskExecutionInformation
  nameWithType: TaskExecutionInformation
  fullName: Microsoft.Azure.Batch.TaskExecutionInformation
- uid: Microsoft.Azure.Batch.CloudTask.ExitConditions*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.ExitConditions
  isExternal: false
  name: ExitConditions
  nameWithType: CloudTask.ExitConditions
  fullName: Microsoft.Azure.Batch.CloudTask.ExitConditions
- uid: Microsoft.Azure.Batch.ExitConditions
  commentId: T:Microsoft.Azure.Batch.ExitConditions
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: ExitConditions
  nameWithType: ExitConditions
  fullName: Microsoft.Azure.Batch.ExitConditions
- uid: Microsoft.Azure.Batch.CloudTask.FilesToStage*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.FilesToStage
  isExternal: false
  name: FilesToStage
  nameWithType: CloudTask.FilesToStage
  fullName: Microsoft.Azure.Batch.CloudTask.FilesToStage
- uid: System.Collections.Generic.IList{Microsoft.Azure.Batch.FileStaging.IFileStagingProvider}
  commentId: T:System.Collections.Generic.IList{Microsoft.Azure.Batch.FileStaging.IFileStagingProvider}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<IFileStagingProvider>
  nameWithType: IList<IFileStagingProvider>
  fullName: System.Collections.Generic.IList<Microsoft.Azure.Batch.FileStaging.IFileStagingProvider>
  nameWithType.vb: IList(Of IFileStagingProvider)
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.Azure.Batch.FileStaging.IFileStagingProvider)
  name.vb: IList(Of IFileStagingProvider)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.FileStaging.IFileStagingProvider
    name: IFileStagingProvider
    nameWithType: IFileStagingProvider
    fullName: Microsoft.Azure.Batch.FileStaging.IFileStagingProvider
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.FileStaging.IFileStagingProvider
    name: IFileStagingProvider
    nameWithType: IFileStagingProvider
    fullName: Microsoft.Azure.Batch.FileStaging.IFileStagingProvider
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.CloudTask.Id*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.Id
  isExternal: false
  name: Id
  nameWithType: CloudTask.Id
  fullName: Microsoft.Azure.Batch.CloudTask.Id
- uid: Microsoft.Azure.Batch.CloudTask.LastModified*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.LastModified
  isExternal: false
  name: LastModified
  nameWithType: CloudTask.LastModified
  fullName: Microsoft.Azure.Batch.CloudTask.LastModified
- uid: Microsoft.Azure.Batch.CloudTask.MultiInstanceSettings*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.MultiInstanceSettings
  isExternal: false
  name: MultiInstanceSettings
  nameWithType: CloudTask.MultiInstanceSettings
  fullName: Microsoft.Azure.Batch.CloudTask.MultiInstanceSettings
- uid: Microsoft.Azure.Batch.MultiInstanceSettings
  commentId: T:Microsoft.Azure.Batch.MultiInstanceSettings
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: MultiInstanceSettings
  nameWithType: MultiInstanceSettings
  fullName: Microsoft.Azure.Batch.MultiInstanceSettings
- uid: Microsoft.Azure.Batch.Common.TaskState.Active
  commentId: F:Microsoft.Azure.Batch.Common.TaskState.Active
- uid: Microsoft.Azure.Batch.CloudTask.PreviousState*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.PreviousState
  isExternal: false
  name: PreviousState
  nameWithType: CloudTask.PreviousState
  fullName: Microsoft.Azure.Batch.CloudTask.PreviousState
- uid: System.Nullable{Microsoft.Azure.Batch.Common.TaskState}
  commentId: T:System.Nullable{Microsoft.Azure.Batch.Common.TaskState}
  parent: System
  definition: System.Nullable`1
  name: Nullable<TaskState>
  nameWithType: Nullable<TaskState>
  fullName: System.Nullable<Microsoft.Azure.Batch.Common.TaskState>
  nameWithType.vb: Nullable(Of TaskState)
  fullname.vb: System.Nullable(Of Microsoft.Azure.Batch.Common.TaskState)
  name.vb: Nullable(Of TaskState)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.Common.TaskState
    name: TaskState
    nameWithType: TaskState
    fullName: Microsoft.Azure.Batch.Common.TaskState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.Common.TaskState
    name: TaskState
    nameWithType: TaskState
    fullName: Microsoft.Azure.Batch.Common.TaskState
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.CloudTask.PreviousStateTransitionTime*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.PreviousStateTransitionTime
  isExternal: false
  name: PreviousStateTransitionTime
  nameWithType: CloudTask.PreviousStateTransitionTime
  fullName: Microsoft.Azure.Batch.CloudTask.PreviousStateTransitionTime
- uid: Microsoft.Azure.Batch.CloudTask.ResourceFiles*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.ResourceFiles
  isExternal: false
  name: ResourceFiles
  nameWithType: CloudTask.ResourceFiles
  fullName: Microsoft.Azure.Batch.CloudTask.ResourceFiles
- uid: System.Collections.Generic.IList{Microsoft.Azure.Batch.ResourceFile}
  commentId: T:System.Collections.Generic.IList{Microsoft.Azure.Batch.ResourceFile}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<ResourceFile>
  nameWithType: IList<ResourceFile>
  fullName: System.Collections.Generic.IList<Microsoft.Azure.Batch.ResourceFile>
  nameWithType.vb: IList(Of ResourceFile)
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.Azure.Batch.ResourceFile)
  name.vb: IList(Of ResourceFile)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.ResourceFile
    name: ResourceFile
    nameWithType: ResourceFile
    fullName: Microsoft.Azure.Batch.ResourceFile
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.ResourceFile
    name: ResourceFile
    nameWithType: ResourceFile
    fullName: Microsoft.Azure.Batch.ResourceFile
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.CloudTask.RunElevated*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.RunElevated
  isExternal: false
  name: RunElevated
  nameWithType: CloudTask.RunElevated
  fullName: Microsoft.Azure.Batch.CloudTask.RunElevated
- uid: Microsoft.Azure.Batch.CloudTask.State*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.State
  isExternal: false
  name: State
  nameWithType: CloudTask.State
  fullName: Microsoft.Azure.Batch.CloudTask.State
- uid: Microsoft.Azure.Batch.CloudTask.StateTransitionTime*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.StateTransitionTime
  isExternal: false
  name: StateTransitionTime
  nameWithType: CloudTask.StateTransitionTime
  fullName: Microsoft.Azure.Batch.CloudTask.StateTransitionTime
- uid: Microsoft.Azure.Batch.ODATADetailLevel.ExpandClause
  commentId: P:Microsoft.Azure.Batch.ODATADetailLevel.ExpandClause
- uid: Microsoft.Azure.Batch.CloudTask.Statistics*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.Statistics
  isExternal: false
  name: Statistics
  nameWithType: CloudTask.Statistics
  fullName: Microsoft.Azure.Batch.CloudTask.Statistics
- uid: Microsoft.Azure.Batch.TaskStatistics
  commentId: T:Microsoft.Azure.Batch.TaskStatistics
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: TaskStatistics
  nameWithType: TaskStatistics
  fullName: Microsoft.Azure.Batch.TaskStatistics
- uid: Microsoft.Azure.Batch.CloudTask.Url*
  commentId: Overload:Microsoft.Azure.Batch.CloudTask.Url
  isExternal: false
  name: Url
  nameWithType: CloudTask.Url
  fullName: Microsoft.Azure.Batch.CloudTask.Url
