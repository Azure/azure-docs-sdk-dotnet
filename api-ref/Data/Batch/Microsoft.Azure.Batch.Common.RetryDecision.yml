### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Batch.Common.RetryDecision
  commentId: T:Microsoft.Azure.Batch.Common.RetryDecision
  id: RetryDecision
  parent: Microsoft.Azure.Batch.Common
  children:
  - Microsoft.Azure.Batch.Common.RetryDecision.NoRetry
  - Microsoft.Azure.Batch.Common.RetryDecision.RetryDelay
  - Microsoft.Azure.Batch.Common.RetryDecision.RetryWithDelay(System.TimeSpan)
  - Microsoft.Azure.Batch.Common.RetryDecision.ShouldRetry
  langs:
  - csharp
  - vb
  name: RetryDecision
  nameWithType: RetryDecision
  fullName: Microsoft.Azure.Batch.Common.RetryDecision
  type: Class
  source:
    remote:
      path: src/Batch/Client/Src/Common/RetryDecision.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: RetryDecision
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Common/RetryDecision.cs
    startLine: 21
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Common
  summary: "\nRepresents a decision made by an <xref href=\"Microsoft.Azure.Batch.Common.IRetryPolicy\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public sealed class RetryDecision
    content.vb: Public NotInheritable Class RetryDecision
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.Azure.Batch.Common.RetryDecision.NoRetry
  commentId: F:Microsoft.Azure.Batch.Common.RetryDecision.NoRetry
  id: NoRetry
  parent: Microsoft.Azure.Batch.Common.RetryDecision
  langs:
  - csharp
  - vb
  name: NoRetry
  nameWithType: RetryDecision.NoRetry
  fullName: Microsoft.Azure.Batch.Common.RetryDecision.NoRetry
  type: Field
  source:
    remote:
      path: src/Batch/Client/Src/Common/RetryDecision.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: NoRetry
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Common/RetryDecision.cs
    startLine: 26
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Common
  summary: "\nA retry decision with <xref href=\"Microsoft.Azure.Batch.Common.RetryDecision.ShouldRetry\" data-throw-if-not-resolved=\"false\"></xref> set to false\n"
  example: []
  syntax:
    content: public static readonly RetryDecision NoRetry
    content.vb: Public Shared ReadOnly NoRetry As RetryDecision
    return:
      type: Microsoft.Azure.Batch.Common.RetryDecision
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Azure.Batch.Common.RetryDecision.RetryWithDelay(System.TimeSpan)
  commentId: M:Microsoft.Azure.Batch.Common.RetryDecision.RetryWithDelay(System.TimeSpan)
  id: RetryWithDelay(System.TimeSpan)
  parent: Microsoft.Azure.Batch.Common.RetryDecision
  langs:
  - csharp
  - vb
  name: RetryWithDelay(TimeSpan)
  nameWithType: RetryDecision.RetryWithDelay(TimeSpan)
  fullName: Microsoft.Azure.Batch.Common.RetryDecision.RetryWithDelay(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/Common/RetryDecision.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: RetryWithDelay
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Common/RetryDecision.cs
    startLine: 33
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Common
  summary: "\nCreate a new <xref href=\"Microsoft.Azure.Batch.Common.RetryDecision\" data-throw-if-not-resolved=\"false\"></xref> with the specified delay before the next retry.\n"
  example: []
  syntax:
    content: public static RetryDecision RetryWithDelay(TimeSpan retryDelay)
    content.vb: Public Shared Function RetryWithDelay(retryDelay As TimeSpan) As RetryDecision
    parameters:
    - id: retryDelay
      type: System.TimeSpan
      description: The duration to wait before performing the retry.
    return:
      type: Microsoft.Azure.Batch.Common.RetryDecision
      description: A <xref href="Microsoft.Azure.Batch.Common.RetryDecision" data-throw-if-not-resolved="false"></xref> object with the specified retry delay and <xref href="Microsoft.Azure.Batch.Common.RetryDecision.ShouldRetry" data-throw-if-not-resolved="false"></xref> set to true.
  overload: Microsoft.Azure.Batch.Common.RetryDecision.RetryWithDelay*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Azure.Batch.Common.RetryDecision.RetryDelay
  commentId: P:Microsoft.Azure.Batch.Common.RetryDecision.RetryDelay
  id: RetryDelay
  parent: Microsoft.Azure.Batch.Common.RetryDecision
  langs:
  - csharp
  - vb
  name: RetryDelay
  nameWithType: RetryDecision.RetryDelay
  fullName: Microsoft.Azure.Batch.Common.RetryDecision.RetryDelay
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Common/RetryDecision.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: RetryDelay
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Common/RetryDecision.cs
    startLine: 41
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Common
  summary: "\nGets the delay before the next retry.\n"
  example: []
  syntax:
    content: public TimeSpan? RetryDelay { get; }
    content.vb: Public ReadOnly Property RetryDelay As TimeSpan?
    parameters: []
    return:
      type: System.Nullable{System.TimeSpan}
  overload: Microsoft.Azure.Batch.Common.RetryDecision.RetryDelay*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Batch.Common.RetryDecision.ShouldRetry
  commentId: P:Microsoft.Azure.Batch.Common.RetryDecision.ShouldRetry
  id: ShouldRetry
  parent: Microsoft.Azure.Batch.Common.RetryDecision
  langs:
  - csharp
  - vb
  name: ShouldRetry
  nameWithType: RetryDecision.ShouldRetry
  fullName: Microsoft.Azure.Batch.Common.RetryDecision.ShouldRetry
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Common/RetryDecision.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ShouldRetry
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Common/RetryDecision.cs
    startLine: 46
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Common
  summary: "\nGets whether a retry should be performed or not.\n"
  example: []
  syntax:
    content: public bool ShouldRetry { get; }
    content.vb: Public ReadOnly Property ShouldRetry As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.Azure.Batch.Common.RetryDecision.ShouldRetry*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Microsoft.Azure.Batch.Common.IRetryPolicy
  commentId: T:Microsoft.Azure.Batch.Common.IRetryPolicy
  parent: Microsoft.Azure.Batch.Common
  isExternal: false
  name: IRetryPolicy
  nameWithType: IRetryPolicy
  fullName: Microsoft.Azure.Batch.Common.IRetryPolicy
- uid: Microsoft.Azure.Batch.Common
  commentId: N:Microsoft.Azure.Batch.Common
  isExternal: false
  name: Microsoft.Azure.Batch.Common
  nameWithType: Microsoft.Azure.Batch.Common
  fullName: Microsoft.Azure.Batch.Common
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Batch.Common.RetryDecision.ShouldRetry
  commentId: P:Microsoft.Azure.Batch.Common.RetryDecision.ShouldRetry
- uid: Microsoft.Azure.Batch.Common.RetryDecision
  commentId: T:Microsoft.Azure.Batch.Common.RetryDecision
  parent: Microsoft.Azure.Batch.Common
  isExternal: false
  name: RetryDecision
  nameWithType: RetryDecision
  fullName: Microsoft.Azure.Batch.Common.RetryDecision
- uid: Microsoft.Azure.Batch.Common.RetryDecision.RetryWithDelay*
  commentId: Overload:Microsoft.Azure.Batch.Common.RetryDecision.RetryWithDelay
  isExternal: false
  name: RetryWithDelay
  nameWithType: RetryDecision.RetryWithDelay
  fullName: Microsoft.Azure.Batch.Common.RetryDecision.RetryWithDelay
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Microsoft.Azure.Batch.Common.RetryDecision.RetryDelay*
  commentId: Overload:Microsoft.Azure.Batch.Common.RetryDecision.RetryDelay
  isExternal: false
  name: RetryDelay
  nameWithType: RetryDecision.RetryDelay
  fullName: Microsoft.Azure.Batch.Common.RetryDecision.RetryDelay
- uid: System.Nullable{System.TimeSpan}
  commentId: T:System.Nullable{System.TimeSpan}
  parent: System
  definition: System.Nullable`1
  name: Nullable<TimeSpan>
  nameWithType: Nullable<TimeSpan>
  fullName: System.Nullable<System.TimeSpan>
  nameWithType.vb: Nullable(Of TimeSpan)
  fullname.vb: System.Nullable(Of System.TimeSpan)
  name.vb: Nullable(Of TimeSpan)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.Common.RetryDecision.ShouldRetry*
  commentId: Overload:Microsoft.Azure.Batch.Common.RetryDecision.ShouldRetry
  isExternal: false
  name: ShouldRetry
  nameWithType: RetryDecision.ShouldRetry
  fullName: Microsoft.Azure.Batch.Common.RetryDecision.ShouldRetry
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
