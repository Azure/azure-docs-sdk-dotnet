### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Batch.TaskIdRange
  commentId: T:Microsoft.Azure.Batch.TaskIdRange
  id: TaskIdRange
  parent: Microsoft.Azure.Batch
  children:
  - Microsoft.Azure.Batch.TaskIdRange.#ctor(System.Int32,System.Int32)
  - Microsoft.Azure.Batch.TaskIdRange.End
  - Microsoft.Azure.Batch.TaskIdRange.Start
  langs:
  - csharp
  - vb
  name: TaskIdRange
  nameWithType: TaskIdRange
  fullName: Microsoft.Azure.Batch.TaskIdRange
  type: Class
  source:
    remote:
      path: src/Batch/Client/Src/Generated/TaskIdRange.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: TaskIdRange
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/TaskIdRange.cs
    startLine: 34
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nA range of task ids that a <xref href=\"Microsoft.Azure.Batch.CloudTask\" data-throw-if-not-resolved=\"false\"></xref> depends on. All tasks with ids in the range must complete successfully \nbefore the dependent task can be scheduled.\n"
  example: []
  syntax:
    content: 'public class TaskIdRange : ITransportObjectProvider<TaskIdRange>, IPropertyMetadata, IModifiable, IReadOnly'
    content.vb: >-
      Public Class TaskIdRange
          Implements ITransportObjectProvider(Of TaskIdRange), IPropertyMetadata, IModifiable, IReadOnly
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Batch.TaskIdRange.#ctor(System.Int32,System.Int32)
  commentId: M:Microsoft.Azure.Batch.TaskIdRange.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: Microsoft.Azure.Batch.TaskIdRange
  langs:
  - csharp
  - vb
  name: TaskIdRange(Int32, Int32)
  nameWithType: TaskIdRange.TaskIdRange(Int32, Int32)
  fullName: Microsoft.Azure.Batch.TaskIdRange.TaskIdRange(System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/Batch/Client/Src/TaskIdRange.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/Batch/Client/Src/TaskIdRange.cs
    startLine: 31
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.Azure.Batch.TaskIdRange\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  remarks: "\nRanges are inclusive. For example, if a task depends on a range with Start 8 and End 10, then tasks \"8\", \"9\" and \"10\"\nmust complete before the task can be scheduled.\n"
  example: []
  syntax:
    content: public TaskIdRange(int start, int end)
    content.vb: Public Sub New(start As Integer, end As Integer)
    parameters:
    - id: start
      type: System.Int32
      description: The first task id in the range.
    - id: end
      type: System.Int32
      description: The last task id in the range.
  overload: Microsoft.Azure.Batch.TaskIdRange.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <span class="paramref">start</span> or <span class="paramref">end</span> is negative.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <span class="paramref">end</span> is less than <span class="paramref">start</span>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.TaskIdRange.End
  commentId: P:Microsoft.Azure.Batch.TaskIdRange.End
  id: End
  parent: Microsoft.Azure.Batch.TaskIdRange
  langs:
  - csharp
  - vb
  name: End
  nameWithType: TaskIdRange.End
  fullName: Microsoft.Azure.Batch.TaskIdRange.End
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/TaskIdRange.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: End
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/TaskIdRange.cs
    startLine: 58
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the last task id in the range.\n"
  remarks: "\nRanges are inclusive. For example, if a task depends on a range with End 12, then task \"12\" must complete before \nthe task can be scheduled.\n"
  example: []
  syntax:
    content: public int End { get; }
    content.vb: Public ReadOnly Property End As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.Azure.Batch.TaskIdRange.End*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Batch.TaskIdRange.Start
  commentId: P:Microsoft.Azure.Batch.TaskIdRange.Start
  id: Start
  parent: Microsoft.Azure.Batch.TaskIdRange
  langs:
  - csharp
  - vb
  name: Start
  nameWithType: TaskIdRange.Start
  fullName: Microsoft.Azure.Batch.TaskIdRange.Start
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/TaskIdRange.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Start
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/TaskIdRange.cs
    startLine: 70
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the first task id in the range.\n"
  remarks: "\nRanges are inclusive. For example, if a task depends on a range with Start 8, then task \"8\" must complete before \nthe task can be scheduled.\n"
  example: []
  syntax:
    content: public int Start { get; }
    content.vb: Public ReadOnly Property Start As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.Azure.Batch.TaskIdRange.Start*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Microsoft.Azure.Batch.CloudTask
  commentId: T:Microsoft.Azure.Batch.CloudTask
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: CloudTask
  nameWithType: CloudTask
  fullName: Microsoft.Azure.Batch.CloudTask
- uid: Microsoft.Azure.Batch
  commentId: N:Microsoft.Azure.Batch
  isExternal: false
  name: Microsoft.Azure.Batch
  nameWithType: Microsoft.Azure.Batch
  fullName: Microsoft.Azure.Batch
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Batch.TaskIdRange
  commentId: T:Microsoft.Azure.Batch.TaskIdRange
  isExternal: false
  name: TaskIdRange
  nameWithType: TaskIdRange
  fullName: Microsoft.Azure.Batch.TaskIdRange
- uid: Microsoft.Azure.Batch.TaskIdRange.#ctor*
  commentId: Overload:Microsoft.Azure.Batch.TaskIdRange.#ctor
  isExternal: false
  name: TaskIdRange
  nameWithType: TaskIdRange.TaskIdRange
  fullName: Microsoft.Azure.Batch.TaskIdRange.TaskIdRange
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Azure.Batch.TaskIdRange.End*
  commentId: Overload:Microsoft.Azure.Batch.TaskIdRange.End
  isExternal: false
  name: End
  nameWithType: TaskIdRange.End
  fullName: Microsoft.Azure.Batch.TaskIdRange.End
- uid: Microsoft.Azure.Batch.TaskIdRange.Start*
  commentId: Overload:Microsoft.Azure.Batch.TaskIdRange.Start
  isExternal: false
  name: Start
  nameWithType: TaskIdRange.Start
  fullName: Microsoft.Azure.Batch.TaskIdRange.Start
