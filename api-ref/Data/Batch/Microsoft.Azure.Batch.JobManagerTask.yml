### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Batch.JobManagerTask
  commentId: T:Microsoft.Azure.Batch.JobManagerTask
  id: JobManagerTask
  parent: Microsoft.Azure.Batch
  children:
  - Microsoft.Azure.Batch.JobManagerTask.#ctor
  - Microsoft.Azure.Batch.JobManagerTask.#ctor(System.String,System.String)
  - Microsoft.Azure.Batch.JobManagerTask.ApplicationPackageReferences
  - Microsoft.Azure.Batch.JobManagerTask.CommandLine
  - Microsoft.Azure.Batch.JobManagerTask.Constraints
  - Microsoft.Azure.Batch.JobManagerTask.DisplayName
  - Microsoft.Azure.Batch.JobManagerTask.EnvironmentSettings
  - Microsoft.Azure.Batch.JobManagerTask.Id
  - Microsoft.Azure.Batch.JobManagerTask.KillJobOnCompletion
  - Microsoft.Azure.Batch.JobManagerTask.ResourceFiles
  - Microsoft.Azure.Batch.JobManagerTask.RunElevated
  - Microsoft.Azure.Batch.JobManagerTask.RunExclusive
  langs:
  - csharp
  - vb
  name: JobManagerTask
  nameWithType: JobManagerTask
  fullName: Microsoft.Azure.Batch.JobManagerTask
  type: Class
  source:
    remote:
      path: src/Batch/Client/Src/Generated/JobManagerTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: JobManagerTask
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/JobManagerTask.cs
    startLine: 33
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nRepresents an Azure Batch JobManager task. \n"
  example: []
  syntax:
    content: 'public class JobManagerTask : ITransportObjectProvider<JobManagerTask>, IPropertyMetadata, IModifiable, IReadOnly'
    content.vb: >-
      Public Class JobManagerTask
          Implements ITransportObjectProvider(Of JobManagerTask), IPropertyMetadata, IModifiable, IReadOnly
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Batch.JobManagerTask.#ctor
  commentId: M:Microsoft.Azure.Batch.JobManagerTask.#ctor
  id: '#ctor'
  parent: Microsoft.Azure.Batch.JobManagerTask
  langs:
  - csharp
  - vb
  name: JobManagerTask()
  nameWithType: JobManagerTask.JobManagerTask()
  fullName: Microsoft.Azure.Batch.JobManagerTask.JobManagerTask()
  type: Constructor
  source:
    remote:
      path: src/Batch/Client/Src/JobManagerTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/Batch/Client/Src/JobManagerTask.cs
    startLine: 20
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  syntax:
    content: public JobManagerTask()
    content.vb: Public Sub New
  overload: Microsoft.Azure.Batch.JobManagerTask.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.JobManagerTask.#ctor(System.String,System.String)
  commentId: M:Microsoft.Azure.Batch.JobManagerTask.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: Microsoft.Azure.Batch.JobManagerTask
  langs:
  - csharp
  - vb
  name: JobManagerTask(String, String)
  nameWithType: JobManagerTask.JobManagerTask(String, String)
  fullName: Microsoft.Azure.Batch.JobManagerTask.JobManagerTask(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/Batch/Client/Src/Generated/JobManagerTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/JobManagerTask.cs
    startLine: 116
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.Azure.Batch.JobManagerTask\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public JobManagerTask(string id, string commandLine)
    content.vb: Public Sub New(id As String, commandLine As String)
    parameters:
    - id: id
      type: System.String
      description: The id of the task.
    - id: commandLine
      type: System.String
      description: The command line of the task.
  overload: Microsoft.Azure.Batch.JobManagerTask.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.JobManagerTask.ApplicationPackageReferences
  commentId: P:Microsoft.Azure.Batch.JobManagerTask.ApplicationPackageReferences
  id: ApplicationPackageReferences
  parent: Microsoft.Azure.Batch.JobManagerTask
  langs:
  - csharp
  - vb
  name: ApplicationPackageReferences
  nameWithType: JobManagerTask.ApplicationPackageReferences
  fullName: Microsoft.Azure.Batch.JobManagerTask.ApplicationPackageReferences
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/JobManagerTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ApplicationPackageReferences
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/JobManagerTask.cs
    startLine: 138
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets a list of application packages that the Batch service will deploy to the compute node before running \nthe command line.\n"
  example: []
  syntax:
    content: public IList<ApplicationPackageReference> ApplicationPackageReferences { get; set; }
    content.vb: Public Property ApplicationPackageReferences As IList(Of ApplicationPackageReference)
    parameters: []
    return:
      type: System.Collections.Generic.IList{Microsoft.Azure.Batch.ApplicationPackageReference}
  overload: Microsoft.Azure.Batch.JobManagerTask.ApplicationPackageReferences*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.JobManagerTask.CommandLine
  commentId: P:Microsoft.Azure.Batch.JobManagerTask.CommandLine
  id: CommandLine
  parent: Microsoft.Azure.Batch.JobManagerTask
  langs:
  - csharp
  - vb
  name: CommandLine
  nameWithType: JobManagerTask.CommandLine
  fullName: Microsoft.Azure.Batch.JobManagerTask.CommandLine
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/JobManagerTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CommandLine
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/JobManagerTask.cs
    startLine: 155
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets the command line of the task.\n"
  remarks: "\nThe command line does not run under a shell, and therefore cannot take advantage of shell features such as environment \nvariable expansion. If you want to take advantage of such features, you should invoke the shell in the command \nline, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux.\n"
  example: []
  syntax:
    content: public string CommandLine { get; set; }
    content.vb: Public Property CommandLine As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Batch.JobManagerTask.CommandLine*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.JobManagerTask.Constraints
  commentId: P:Microsoft.Azure.Batch.JobManagerTask.Constraints
  id: Constraints
  parent: Microsoft.Azure.Batch.JobManagerTask
  langs:
  - csharp
  - vb
  name: Constraints
  nameWithType: JobManagerTask.Constraints
  fullName: Microsoft.Azure.Batch.JobManagerTask.Constraints
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/JobManagerTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Constraints
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/JobManagerTask.cs
    startLine: 164
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets the execution constraints for this JobManager task.\n"
  example: []
  syntax:
    content: public TaskConstraints Constraints { get; set; }
    content.vb: Public Property Constraints As TaskConstraints
    parameters: []
    return:
      type: Microsoft.Azure.Batch.TaskConstraints
  overload: Microsoft.Azure.Batch.JobManagerTask.Constraints*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.JobManagerTask.DisplayName
  commentId: P:Microsoft.Azure.Batch.JobManagerTask.DisplayName
  id: DisplayName
  parent: Microsoft.Azure.Batch.JobManagerTask
  langs:
  - csharp
  - vb
  name: DisplayName
  nameWithType: JobManagerTask.DisplayName
  fullName: Microsoft.Azure.Batch.JobManagerTask.DisplayName
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/JobManagerTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DisplayName
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/JobManagerTask.cs
    startLine: 173
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets the display name of the JobManager task.\n"
  example: []
  syntax:
    content: public string DisplayName { get; set; }
    content.vb: Public Property DisplayName As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Batch.JobManagerTask.DisplayName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.JobManagerTask.EnvironmentSettings
  commentId: P:Microsoft.Azure.Batch.JobManagerTask.EnvironmentSettings
  id: EnvironmentSettings
  parent: Microsoft.Azure.Batch.JobManagerTask
  langs:
  - csharp
  - vb
  name: EnvironmentSettings
  nameWithType: JobManagerTask.EnvironmentSettings
  fullName: Microsoft.Azure.Batch.JobManagerTask.EnvironmentSettings
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/JobManagerTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: EnvironmentSettings
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/JobManagerTask.cs
    startLine: 182
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets a set of environment settings for the JobManager task.\n"
  example: []
  syntax:
    content: public IList<EnvironmentSetting> EnvironmentSettings { get; set; }
    content.vb: Public Property EnvironmentSettings As IList(Of EnvironmentSetting)
    parameters: []
    return:
      type: System.Collections.Generic.IList{Microsoft.Azure.Batch.EnvironmentSetting}
  overload: Microsoft.Azure.Batch.JobManagerTask.EnvironmentSettings*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.JobManagerTask.Id
  commentId: P:Microsoft.Azure.Batch.JobManagerTask.Id
  id: Id
  parent: Microsoft.Azure.Batch.JobManagerTask
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: JobManagerTask.Id
  fullName: Microsoft.Azure.Batch.JobManagerTask.Id
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/JobManagerTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Id
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/JobManagerTask.cs
    startLine: 194
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets the id of the task.\n"
  example: []
  syntax:
    content: public string Id { get; set; }
    content.vb: Public Property Id As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Batch.JobManagerTask.Id*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.JobManagerTask.KillJobOnCompletion
  commentId: P:Microsoft.Azure.Batch.JobManagerTask.KillJobOnCompletion
  id: KillJobOnCompletion
  parent: Microsoft.Azure.Batch.JobManagerTask
  langs:
  - csharp
  - vb
  name: KillJobOnCompletion
  nameWithType: JobManagerTask.KillJobOnCompletion
  fullName: Microsoft.Azure.Batch.JobManagerTask.KillJobOnCompletion
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/JobManagerTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: KillJobOnCompletion
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/JobManagerTask.cs
    startLine: 204
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets a value that indicates whether to terminate all tasks in the job and complete the job when the job \nmanager task completes.\n"
  example: []
  syntax:
    content: public bool ? KillJobOnCompletion { get; set; }
    content.vb: Public Property KillJobOnCompletion As Boolean?
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
  overload: Microsoft.Azure.Batch.JobManagerTask.KillJobOnCompletion*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.JobManagerTask.ResourceFiles
  commentId: P:Microsoft.Azure.Batch.JobManagerTask.ResourceFiles
  id: ResourceFiles
  parent: Microsoft.Azure.Batch.JobManagerTask
  langs:
  - csharp
  - vb
  name: ResourceFiles
  nameWithType: JobManagerTask.ResourceFiles
  fullName: Microsoft.Azure.Batch.JobManagerTask.ResourceFiles
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/JobManagerTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ResourceFiles
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/JobManagerTask.cs
    startLine: 214
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets a list of files that the Batch service will download to the compute node before running the command \nline.\n"
  example: []
  syntax:
    content: public IList<ResourceFile> ResourceFiles { get; set; }
    content.vb: Public Property ResourceFiles As IList(Of ResourceFile)
    parameters: []
    return:
      type: System.Collections.Generic.IList{Microsoft.Azure.Batch.ResourceFile}
  overload: Microsoft.Azure.Batch.JobManagerTask.ResourceFiles*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.JobManagerTask.RunElevated
  commentId: P:Microsoft.Azure.Batch.JobManagerTask.RunElevated
  id: RunElevated
  parent: Microsoft.Azure.Batch.JobManagerTask
  langs:
  - csharp
  - vb
  name: RunElevated
  nameWithType: JobManagerTask.RunElevated
  fullName: Microsoft.Azure.Batch.JobManagerTask.RunElevated
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/JobManagerTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: RunElevated
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/JobManagerTask.cs
    startLine: 226
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets whether to run the task in elevated mode.\n"
  example: []
  syntax:
    content: public bool ? RunElevated { get; set; }
    content.vb: Public Property RunElevated As Boolean?
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
  overload: Microsoft.Azure.Batch.JobManagerTask.RunElevated*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.JobManagerTask.RunExclusive
  commentId: P:Microsoft.Azure.Batch.JobManagerTask.RunExclusive
  id: RunExclusive
  parent: Microsoft.Azure.Batch.JobManagerTask
  langs:
  - csharp
  - vb
  name: RunExclusive
  nameWithType: JobManagerTask.RunExclusive
  fullName: Microsoft.Azure.Batch.JobManagerTask.RunExclusive
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/JobManagerTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: RunExclusive
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/JobManagerTask.cs
    startLine: 235
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets whether the Job Manager task requires exclusive use of the compute node where it runs.\n"
  example: []
  syntax:
    content: public bool ? RunExclusive { get; set; }
    content.vb: Public Property RunExclusive As Boolean?
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
  overload: Microsoft.Azure.Batch.JobManagerTask.RunExclusive*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Azure.Batch
  commentId: N:Microsoft.Azure.Batch
  isExternal: false
  name: Microsoft.Azure.Batch
  nameWithType: Microsoft.Azure.Batch
  fullName: Microsoft.Azure.Batch
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Batch.JobManagerTask.#ctor*
  commentId: Overload:Microsoft.Azure.Batch.JobManagerTask.#ctor
  isExternal: false
  name: JobManagerTask
  nameWithType: JobManagerTask.JobManagerTask
  fullName: Microsoft.Azure.Batch.JobManagerTask.JobManagerTask
- uid: Microsoft.Azure.Batch.JobManagerTask
  commentId: T:Microsoft.Azure.Batch.JobManagerTask
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: JobManagerTask
  nameWithType: JobManagerTask
  fullName: Microsoft.Azure.Batch.JobManagerTask
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Azure.Batch.JobManagerTask.ApplicationPackageReferences*
  commentId: Overload:Microsoft.Azure.Batch.JobManagerTask.ApplicationPackageReferences
  isExternal: false
  name: ApplicationPackageReferences
  nameWithType: JobManagerTask.ApplicationPackageReferences
  fullName: Microsoft.Azure.Batch.JobManagerTask.ApplicationPackageReferences
- uid: System.Collections.Generic.IList{Microsoft.Azure.Batch.ApplicationPackageReference}
  commentId: T:System.Collections.Generic.IList{Microsoft.Azure.Batch.ApplicationPackageReference}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<ApplicationPackageReference>
  nameWithType: IList<ApplicationPackageReference>
  fullName: System.Collections.Generic.IList<Microsoft.Azure.Batch.ApplicationPackageReference>
  nameWithType.vb: IList(Of ApplicationPackageReference)
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.Azure.Batch.ApplicationPackageReference)
  name.vb: IList(Of ApplicationPackageReference)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.ApplicationPackageReference
    name: ApplicationPackageReference
    nameWithType: ApplicationPackageReference
    fullName: Microsoft.Azure.Batch.ApplicationPackageReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.ApplicationPackageReference
    name: ApplicationPackageReference
    nameWithType: ApplicationPackageReference
    fullName: Microsoft.Azure.Batch.ApplicationPackageReference
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Azure.Batch.JobManagerTask.CommandLine*
  commentId: Overload:Microsoft.Azure.Batch.JobManagerTask.CommandLine
  isExternal: false
  name: CommandLine
  nameWithType: JobManagerTask.CommandLine
  fullName: Microsoft.Azure.Batch.JobManagerTask.CommandLine
- uid: Microsoft.Azure.Batch.JobManagerTask.Constraints*
  commentId: Overload:Microsoft.Azure.Batch.JobManagerTask.Constraints
  isExternal: false
  name: Constraints
  nameWithType: JobManagerTask.Constraints
  fullName: Microsoft.Azure.Batch.JobManagerTask.Constraints
- uid: Microsoft.Azure.Batch.TaskConstraints
  commentId: T:Microsoft.Azure.Batch.TaskConstraints
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: TaskConstraints
  nameWithType: TaskConstraints
  fullName: Microsoft.Azure.Batch.TaskConstraints
- uid: Microsoft.Azure.Batch.JobManagerTask.DisplayName*
  commentId: Overload:Microsoft.Azure.Batch.JobManagerTask.DisplayName
  isExternal: false
  name: DisplayName
  nameWithType: JobManagerTask.DisplayName
  fullName: Microsoft.Azure.Batch.JobManagerTask.DisplayName
- uid: Microsoft.Azure.Batch.JobManagerTask.EnvironmentSettings*
  commentId: Overload:Microsoft.Azure.Batch.JobManagerTask.EnvironmentSettings
  isExternal: false
  name: EnvironmentSettings
  nameWithType: JobManagerTask.EnvironmentSettings
  fullName: Microsoft.Azure.Batch.JobManagerTask.EnvironmentSettings
- uid: System.Collections.Generic.IList{Microsoft.Azure.Batch.EnvironmentSetting}
  commentId: T:System.Collections.Generic.IList{Microsoft.Azure.Batch.EnvironmentSetting}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<EnvironmentSetting>
  nameWithType: IList<EnvironmentSetting>
  fullName: System.Collections.Generic.IList<Microsoft.Azure.Batch.EnvironmentSetting>
  nameWithType.vb: IList(Of EnvironmentSetting)
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.Azure.Batch.EnvironmentSetting)
  name.vb: IList(Of EnvironmentSetting)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.EnvironmentSetting
    name: EnvironmentSetting
    nameWithType: EnvironmentSetting
    fullName: Microsoft.Azure.Batch.EnvironmentSetting
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.EnvironmentSetting
    name: EnvironmentSetting
    nameWithType: EnvironmentSetting
    fullName: Microsoft.Azure.Batch.EnvironmentSetting
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.JobManagerTask.Id*
  commentId: Overload:Microsoft.Azure.Batch.JobManagerTask.Id
  isExternal: false
  name: Id
  nameWithType: JobManagerTask.Id
  fullName: Microsoft.Azure.Batch.JobManagerTask.Id
- uid: Microsoft.Azure.Batch.JobManagerTask.KillJobOnCompletion*
  commentId: Overload:Microsoft.Azure.Batch.JobManagerTask.KillJobOnCompletion
  isExternal: false
  name: KillJobOnCompletion
  nameWithType: JobManagerTask.KillJobOnCompletion
  fullName: Microsoft.Azure.Batch.JobManagerTask.KillJobOnCompletion
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullname.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.JobManagerTask.ResourceFiles*
  commentId: Overload:Microsoft.Azure.Batch.JobManagerTask.ResourceFiles
  isExternal: false
  name: ResourceFiles
  nameWithType: JobManagerTask.ResourceFiles
  fullName: Microsoft.Azure.Batch.JobManagerTask.ResourceFiles
- uid: System.Collections.Generic.IList{Microsoft.Azure.Batch.ResourceFile}
  commentId: T:System.Collections.Generic.IList{Microsoft.Azure.Batch.ResourceFile}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<ResourceFile>
  nameWithType: IList<ResourceFile>
  fullName: System.Collections.Generic.IList<Microsoft.Azure.Batch.ResourceFile>
  nameWithType.vb: IList(Of ResourceFile)
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.Azure.Batch.ResourceFile)
  name.vb: IList(Of ResourceFile)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.ResourceFile
    name: ResourceFile
    nameWithType: ResourceFile
    fullName: Microsoft.Azure.Batch.ResourceFile
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.ResourceFile
    name: ResourceFile
    nameWithType: ResourceFile
    fullName: Microsoft.Azure.Batch.ResourceFile
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.JobManagerTask.RunElevated*
  commentId: Overload:Microsoft.Azure.Batch.JobManagerTask.RunElevated
  isExternal: false
  name: RunElevated
  nameWithType: JobManagerTask.RunElevated
  fullName: Microsoft.Azure.Batch.JobManagerTask.RunElevated
- uid: Microsoft.Azure.Batch.JobManagerTask.RunExclusive*
  commentId: Overload:Microsoft.Azure.Batch.JobManagerTask.RunExclusive
  isExternal: false
  name: RunExclusive
  nameWithType: JobManagerTask.RunExclusive
  fullName: Microsoft.Azure.Batch.JobManagerTask.RunExclusive
