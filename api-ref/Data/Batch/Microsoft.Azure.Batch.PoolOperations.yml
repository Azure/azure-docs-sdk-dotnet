### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Batch.PoolOperations
  commentId: T:Microsoft.Azure.Batch.PoolOperations
  id: PoolOperations
  parent: Microsoft.Azure.Batch
  children:
  - Microsoft.Azure.Batch.PoolOperations.ChangeOSVersion(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.PoolOperations.ChangeOSVersionAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.PoolOperations.CreateComputeNodeUser(System.String,System.String)
  - Microsoft.Azure.Batch.PoolOperations.CreatePool
  - Microsoft.Azure.Batch.PoolOperations.CreatePool(System.String,System.String,Microsoft.Azure.Batch.CloudServiceConfiguration,System.Nullable{System.Int32})
  - Microsoft.Azure.Batch.PoolOperations.CreatePool(System.String,System.String,Microsoft.Azure.Batch.VirtualMachineConfiguration,System.Nullable{System.Int32})
  - Microsoft.Azure.Batch.PoolOperations.CustomBehaviors
  - Microsoft.Azure.Batch.PoolOperations.DeleteComputeNodeUser(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.PoolOperations.DeleteComputeNodeUserAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.PoolOperations.DeleteNodeFile(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.PoolOperations.DeleteNodeFileAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.PoolOperations.DeletePool(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.PoolOperations.DeletePoolAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.PoolOperations.DisableAutoScale(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.PoolOperations.DisableAutoScaleAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.PoolOperations.DisableComputeNodeScheduling(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.DisableComputeNodeSchedulingOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.PoolOperations.DisableComputeNodeSchedulingAsync(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.DisableComputeNodeSchedulingOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.PoolOperations.EnableAutoScale(System.String,System.String,System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.PoolOperations.EnableAutoScaleAsync(System.String,System.String,System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.PoolOperations.EnableComputeNodeScheduling(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.PoolOperations.EnableComputeNodeSchedulingAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.PoolOperations.EvaluateAutoScale(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.PoolOperations.EvaluateAutoScaleAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.PoolOperations.GetAllPoolsLifetimeStatistics(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.PoolOperations.GetAllPoolsLifetimeStatisticsAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.PoolOperations.GetComputeNode(System.String,System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.PoolOperations.GetComputeNodeAsync(System.String,System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.PoolOperations.GetNodeFile(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.PoolOperations.GetNodeFileAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.PoolOperations.GetPool(System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.PoolOperations.GetPoolAsync(System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.PoolOperations.GetRDPFile(System.String,System.String,System.IO.Stream,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.PoolOperations.GetRDPFile(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.PoolOperations.GetRDPFileAsync(System.String,System.String,System.IO.Stream,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.PoolOperations.GetRDPFileAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.PoolOperations.GetRemoteLoginSettings(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.PoolOperations.GetRemoteLoginSettingsAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.PoolOperations.ListComputeNodes(System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.PoolOperations.ListNodeAgentSkus(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.PoolOperations.ListNodeFiles(System.String,System.String,System.Nullable{System.Boolean},Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.PoolOperations.ListPools(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.PoolOperations.ListPoolUsageMetrics(System.Nullable{System.DateTime},System.Nullable{System.DateTime},Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.PoolOperations.Reboot(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeRebootOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.PoolOperations.RebootAsync(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeRebootOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.PoolOperations.Reimage(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeReimageOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.PoolOperations.ReimageAsync(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeReimageOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.PoolOperations.RemoveFromPool(System.String,Microsoft.Azure.Batch.ComputeNode,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.PoolOperations.RemoveFromPool(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.ComputeNode},System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.PoolOperations.RemoveFromPool(System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.PoolOperations.RemoveFromPool(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync(System.String,Microsoft.Azure.Batch.ComputeNode,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.ComputeNode},System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.PoolOperations.ResizePool(System.String,System.Int32,System.Nullable{System.TimeSpan},System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.PoolOperations.ResizePoolAsync(System.String,System.Int32,System.Nullable{System.TimeSpan},System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.PoolOperations.StopResizePool(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.PoolOperations.StopResizePoolAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: PoolOperations
  nameWithType: PoolOperations
  fullName: Microsoft.Azure.Batch.PoolOperations
  type: Class
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: PoolOperations
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 29
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nPerforms pool-related operations on an Azure Batch account.\n"
  example: []
  syntax:
    content: 'public class PoolOperations : IInheritedBehaviors'
    content.vb: >-
      Public Class PoolOperations
          Implements IInheritedBehaviors
  inheritance:
  - System.Object
  implements:
  - Microsoft.Azure.Batch.IInheritedBehaviors
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Batch.PoolOperations.CustomBehaviors
  commentId: P:Microsoft.Azure.Batch.PoolOperations.CustomBehaviors
  id: CustomBehaviors
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: CustomBehaviors
  nameWithType: PoolOperations.CustomBehaviors
  fullName: Microsoft.Azure.Batch.PoolOperations.CustomBehaviors
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CustomBehaviors
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 68
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets a list of behaviors that modify or customize requests to the Batch service\nmade via this <xref href=\"Microsoft.Azure.Batch.PoolOperations\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\n<p>These behaviors are inherited by child objects.</p>\n<p>Modifications are applied in the order of the collection. The last write wins.</p>\n"
  example: []
  syntax:
    content: public IList<BatchClientBehavior> CustomBehaviors { get; set; }
    content.vb: Public Property CustomBehaviors As IList(Of BatchClientBehavior)
    parameters: []
    return:
      type: System.Collections.Generic.IList{Microsoft.Azure.Batch.BatchClientBehavior}
  overload: Microsoft.Azure.Batch.PoolOperations.CustomBehaviors*
  implements:
  - Microsoft.Azure.Batch.IInheritedBehaviors.CustomBehaviors
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.PoolOperations.ListPools(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.ListPools(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: ListPools(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: ListPools(DetailLevel, IEnumerable<BatchClientBehavior>)
  nameWithType: PoolOperations.ListPools(DetailLevel, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.PoolOperations.ListPools(Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ListPools
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 82
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nEnumerates the <xref href=\"Microsoft.Azure.Batch.CloudPool\" data-throw-if-not-resolved=\"false\"></xref> in the Batch account.\n"
  remarks: >-
    This method returns immediately; the pools are retrieved from the Batch service only when the collection is enumerated.

    Retrieval is non-atomic; pools are retrieved in pages during enumeration of the collection.
  example: []
  syntax:
    content: public IPagedEnumerable<CloudPool> ListPools(DetailLevel detailLevel = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Function ListPools(detailLevel As DetailLevel = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing) As IPagedEnumerable(Of CloudPool)
    parameters:
    - id: detailLevel
      type: Microsoft.Azure.Batch.DetailLevel
      description: A <xref href="Microsoft.Azure.Batch.DetailLevel" data-throw-if-not-resolved="false"></xref> used for filtering the list and for controlling which properties are retrieved from the service.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref> and <span class="paramref">detailLevel</span>.
    return:
      type: Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.CloudPool}
      description: An <xref href="Microsoft.Azure.Batch.IPagedEnumerable%601" data-throw-if-not-resolved="false"></xref> that can be used to enumerate pools asynchronously or synchronously.
  overload: Microsoft.Azure.Batch.PoolOperations.ListPools*
  nameWithType.vb: PoolOperations.ListPools(DetailLevel, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.ListPools(Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: ListPools(DetailLevel, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.PoolOperations.GetPoolAsync(System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.GetPoolAsync(System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: GetPoolAsync(System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: GetPoolAsync(String, DetailLevel, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: PoolOperations.GetPoolAsync(String, DetailLevel, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.PoolOperations.GetPoolAsync(System.String, Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: GetPoolAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 111
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the specified <xref href=\"Microsoft.Azure.Batch.CloudPool\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: The get pool operation runs asynchronously.
  example: []
  syntax:
    content: public Task<CloudPool> GetPoolAsync(string poolId, DetailLevel detailLevel = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function GetPoolAsync(poolId As String, detailLevel As DetailLevel = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of CloudPool)
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool to get.
    - id: detailLevel
      type: Microsoft.Azure.Batch.DetailLevel
      description: A <xref href="Microsoft.Azure.Batch.DetailLevel" data-throw-if-not-resolved="false"></xref> used for controlling which properties are retrieved from the service.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref> and <span class="paramref">detailLevel</span>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.Batch.CloudPool}
      description: A <xref href="Microsoft.Azure.Batch.CloudPool" data-throw-if-not-resolved="false"></xref> containing information about the specified Azure Batch pool.
  overload: Microsoft.Azure.Batch.PoolOperations.GetPoolAsync*
  nameWithType.vb: PoolOperations.GetPoolAsync(String, DetailLevel, IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.GetPoolAsync(System.String, Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: GetPoolAsync(String, DetailLevel, IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.GetPool(System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.GetPool(System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: GetPool(System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: GetPool(String, DetailLevel, IEnumerable<BatchClientBehavior>)
  nameWithType: PoolOperations.GetPool(String, DetailLevel, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.PoolOperations.GetPool(System.String, Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: GetPool
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 140
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the specified <xref href=\"Microsoft.Azure.Batch.CloudPool\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: This is a blocking operation. For a non-blocking equivalent, see <xref href="Microsoft.Azure.Batch.PoolOperations.GetPoolAsync(System.String%2cMicrosoft.Azure.Batch.DetailLevel%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public CloudPool GetPool(string poolId, DetailLevel detailLevel = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Function GetPool(poolId As String, detailLevel As DetailLevel = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing) As CloudPool
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool to get.
    - id: detailLevel
      type: Microsoft.Azure.Batch.DetailLevel
      description: A <xref href="Microsoft.Azure.Batch.DetailLevel" data-throw-if-not-resolved="false"></xref> used for controlling which properties are retrieved from the service.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref> and <span class="paramref">detailLevel</span>.
    return:
      type: Microsoft.Azure.Batch.CloudPool
      description: A <xref href="Microsoft.Azure.Batch.CloudPool" data-throw-if-not-resolved="false"></xref> containing information about the specified Azure Batch pool.
  overload: Microsoft.Azure.Batch.PoolOperations.GetPool*
  nameWithType.vb: PoolOperations.GetPool(String, DetailLevel, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.GetPool(System.String, Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: GetPool(String, DetailLevel, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.PoolOperations.DeletePoolAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.DeletePoolAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: DeletePoolAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: DeletePoolAsync(String, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: PoolOperations.DeletePoolAsync(String, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.PoolOperations.DeletePoolAsync(System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DeletePoolAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 170
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nDeletes the specified pool.\n"
  remarks: "\n<p>The delete operation requests that the pool be deleted.  The request puts the pool in the <xref href=\"Microsoft.Azure.Batch.Common.PoolState.Deleting\" data-throw-if-not-resolved=\"false\"></xref> state.\nThe Batch service will requeue any running tasks and perform the actual pool deletion without any further client action.</p>\n<p>The delete operation runs asynchronously.</p>\n"
  example: []
  syntax:
    content: public Task DeletePoolAsync(string poolId, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function DeletePoolAsync(poolId As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool to delete.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> object that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.PoolOperations.DeletePoolAsync*
  nameWithType.vb: PoolOperations.DeletePoolAsync(String, IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.DeletePoolAsync(System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: DeletePoolAsync(String, IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.DeletePool(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.DeletePool(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: DeletePool(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: DeletePool(String, IEnumerable<BatchClientBehavior>)
  nameWithType: PoolOperations.DeletePool(String, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.PoolOperations.DeletePool(System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DeletePool
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 193
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nDeletes the specified pool.\n"
  remarks: "\n<p>The delete operation requests that the pool be deleted.  The request puts the pool in the <xref href=\"Microsoft.Azure.Batch.Common.PoolState.Deleting\" data-throw-if-not-resolved=\"false\"></xref> state.\nThe Batch service will requeue any running tasks and perform the actual pool deletion without any further client action.</p>\n<remarks>This is a blocking operation. For a non-blocking equivalent, see <xref href=\"Microsoft.Azure.Batch.PoolOperations.DeletePoolAsync(System.String%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>.</remarks>\n"
  example: []
  syntax:
    content: public void DeletePool(string poolId, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub DeletePool(poolId As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool to delete.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.PoolOperations.DeletePool*
  nameWithType.vb: PoolOperations.DeletePool(String, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.DeletePool(System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: DeletePool(String, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.PoolOperations.CreatePool
  commentId: M:Microsoft.Azure.Batch.PoolOperations.CreatePool
  id: CreatePool
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: CreatePool()
  nameWithType: PoolOperations.CreatePool()
  fullName: Microsoft.Azure.Batch.PoolOperations.CreatePool()
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CreatePool
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 206
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nCreates an instance of CloudPool that is unbound and does not have a consistency relationship to any pool in the Batch service.\n"
  example: []
  syntax:
    content: public CloudPool CreatePool()
    content.vb: Public Function CreatePool As CloudPool
    return:
      type: Microsoft.Azure.Batch.CloudPool
      description: >-
        A <xref href="Microsoft.Azure.Batch.CloudPool" data-throw-if-not-resolved="false"></xref> representing a new pool that has not been added to the Batch service.

        To add the pool to the Batch account, call <xref href="Microsoft.Azure.Batch.CloudPool.CommitAsync(System.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.PoolOperations.CreatePool*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.PoolOperations.CreatePool(System.String,System.String,Microsoft.Azure.Batch.CloudServiceConfiguration,System.Nullable{System.Int32})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.CreatePool(System.String,System.String,Microsoft.Azure.Batch.CloudServiceConfiguration,System.Nullable{System.Int32})
  id: CreatePool(System.String,System.String,Microsoft.Azure.Batch.CloudServiceConfiguration,System.Nullable{System.Int32})
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: CreatePool(String, String, CloudServiceConfiguration, Nullable<Int32>)
  nameWithType: PoolOperations.CreatePool(String, String, CloudServiceConfiguration, Nullable<Int32>)
  fullName: Microsoft.Azure.Batch.PoolOperations.CreatePool(System.String, System.String, Microsoft.Azure.Batch.CloudServiceConfiguration, System.Nullable<System.Int32>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CreatePool
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 227
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nCreates an instance of CloudPool that is unbound and does not have a consistency relationship to any pool in the Batch service.\n"
  remarks: "\n<p>For information about Azure Guest OS families, see https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/ </p>\n<p>For information about available sizes of virtual machines, see https://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/.\nBatch supports all Azure cloud service VM sizes except ExtraSmall.</p>\n"
  example: []
  syntax:
    content: public CloudPool CreatePool(string poolId, string virtualMachineSize, CloudServiceConfiguration cloudServiceConfiguration, int ? targetDedicated = null)
    content.vb: Public Function CreatePool(poolId As String, virtualMachineSize As String, cloudServiceConfiguration As CloudServiceConfiguration, targetDedicated As Integer? = Nothing) As CloudPool
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool.
    - id: virtualMachineSize
      type: System.String
      description: The size of virtual machines in the pool.  See https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-size-specs/ for sizes.
    - id: cloudServiceConfiguration
      type: Microsoft.Azure.Batch.CloudServiceConfiguration
      description: The <xref href="Microsoft.Azure.Batch.CloudServiceConfiguration" data-throw-if-not-resolved="false"></xref> for the pool.
    - id: targetDedicated
      type: System.Nullable{System.Int32}
      description: The desired number of compute nodes in the pool. If omitted, you must set the <xref href="Microsoft.Azure.Batch.CloudPool.AutoScaleEnabled" data-throw-if-not-resolved="false"></xref> property.
    return:
      type: Microsoft.Azure.Batch.CloudPool
      description: >-
        A <xref href="Microsoft.Azure.Batch.CloudPool" data-throw-if-not-resolved="false"></xref> representing a new pool that has not been added to the Batch service.

        To add the pool to the Batch account, call <xref href="Microsoft.Azure.Batch.CloudPool.CommitAsync(System.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.PoolOperations.CreatePool*
  nameWithType.vb: PoolOperations.CreatePool(String, String, CloudServiceConfiguration, Nullable(Of Int32))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.CreatePool(System.String, System.String, Microsoft.Azure.Batch.CloudServiceConfiguration, System.Nullable(Of System.Int32))
  name.vb: CreatePool(String, String, CloudServiceConfiguration, Nullable(Of Int32))
- uid: Microsoft.Azure.Batch.PoolOperations.CreatePool(System.String,System.String,Microsoft.Azure.Batch.VirtualMachineConfiguration,System.Nullable{System.Int32})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.CreatePool(System.String,System.String,Microsoft.Azure.Batch.VirtualMachineConfiguration,System.Nullable{System.Int32})
  id: CreatePool(System.String,System.String,Microsoft.Azure.Batch.VirtualMachineConfiguration,System.Nullable{System.Int32})
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: CreatePool(String, String, VirtualMachineConfiguration, Nullable<Int32>)
  nameWithType: PoolOperations.CreatePool(String, String, VirtualMachineConfiguration, Nullable<Int32>)
  fullName: Microsoft.Azure.Batch.PoolOperations.CreatePool(System.String, System.String, Microsoft.Azure.Batch.VirtualMachineConfiguration, System.Nullable<System.Int32>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CreatePool
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 253
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nCreates an instance of CloudPool that is unbound and does not have a consistency relationship to any pool in the Batch service.\n"
  example: []
  syntax:
    content: public CloudPool CreatePool(string poolId, string virtualMachineSize, VirtualMachineConfiguration virtualMachineConfiguration, int ? targetDedicated = null)
    content.vb: Public Function CreatePool(poolId As String, virtualMachineSize As String, virtualMachineConfiguration As VirtualMachineConfiguration, targetDedicated As Integer? = Nothing) As CloudPool
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool.
    - id: virtualMachineSize
      type: System.String
      description: The size of virtual machines in the pool.  See https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-size-specs/ for sizes.
    - id: virtualMachineConfiguration
      type: Microsoft.Azure.Batch.VirtualMachineConfiguration
      description: The <xref href="Microsoft.Azure.Batch.VirtualMachineConfiguration" data-throw-if-not-resolved="false"></xref> for the pool.
    - id: targetDedicated
      type: System.Nullable{System.Int32}
      description: The desired number of compute nodes in the pool. If omitted, you must set the <xref href="Microsoft.Azure.Batch.CloudPool.AutoScaleEnabled" data-throw-if-not-resolved="false"></xref> property.
    return:
      type: Microsoft.Azure.Batch.CloudPool
      description: >-
        A <xref href="Microsoft.Azure.Batch.CloudPool" data-throw-if-not-resolved="false"></xref> representing a new pool that has not been added to the Batch service.

        To add the pool to the Batch account, call <xref href="Microsoft.Azure.Batch.CloudPool.CommitAsync(System.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.PoolOperations.CreatePool*
  nameWithType.vb: PoolOperations.CreatePool(String, String, VirtualMachineConfiguration, Nullable(Of Int32))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.CreatePool(System.String, System.String, Microsoft.Azure.Batch.VirtualMachineConfiguration, System.Nullable(Of System.Int32))
  name.vb: CreatePool(String, String, VirtualMachineConfiguration, Nullable(Of Int32))
- uid: Microsoft.Azure.Batch.PoolOperations.ResizePoolAsync(System.String,System.Int32,System.Nullable{System.TimeSpan},System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.ResizePoolAsync(System.String,System.Int32,System.Nullable{System.TimeSpan},System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: ResizePoolAsync(System.String,System.Int32,System.Nullable{System.TimeSpan},System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: ResizePoolAsync(String, Int32, Nullable<TimeSpan>, Nullable<ComputeNodeDeallocationOption>, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: PoolOperations.ResizePoolAsync(String, Int32, Nullable<TimeSpan>, Nullable<ComputeNodeDeallocationOption>, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.PoolOperations.ResizePoolAsync(System.String, System.Int32, System.Nullable<System.TimeSpan>, System.Nullable<Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption>, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ResizePoolAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 309
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nResizes the specified pool.\n"
  remarks: "\n<p>The resize operation requests that the pool be resized.  The request puts the pool in the <xref href=\"Microsoft.Azure.Batch.Common.AllocationState.Resizing\" data-throw-if-not-resolved=\"false\"></xref> allocation state.\nThe Batch service will perform the actual resize without any further client action, and set the allocation state to <xref href=\"Microsoft.Azure.Batch.Common.AllocationState.Steady\" data-throw-if-not-resolved=\"false\"></xref> once complete.</p>\n<p>\nYou can only resize a pool when its <xref href=\"Microsoft.Azure.Batch.CloudPool.AllocationState\" data-throw-if-not-resolved=\"false\"></xref> is <xref href=\"Microsoft.Azure.Batch.Common.AllocationState.Steady\" data-throw-if-not-resolved=\"false\"></xref>.\nYou cannot resize pools which are configured for automatic scaling (that is, the <xref href=\"Microsoft.Azure.Batch.CloudPool.AutoScaleEnabled\" data-throw-if-not-resolved=\"false\"></xref> property of the pool is true).\nIf you decrease the pool size, the Batch service chooses which nodes to remove.  To remove specific nodes, call <xref href=\"Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync(System.String%2cSystem.Collections.Generic.IEnumerable%7bSystem.String%7d%2cSystem.Nullable%7bMicrosoft.Azure.Batch.Common.ComputeNodeDeallocationOption%7d%2cSystem.Nullable%7bSystem.TimeSpan%7d%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n<p>The resize operation runs asynchronously.</p>\n"
  example: []
  syntax:
    content: public Task ResizePoolAsync(string poolId, int targetDedicated, TimeSpan? resizeTimeout = null, ComputeNodeDeallocationOption? deallocationOption = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function ResizePoolAsync(poolId As String, targetDedicated As Integer, resizeTimeout As TimeSpan? = Nothing, deallocationOption As ComputeNodeDeallocationOption? = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool.
    - id: targetDedicated
      type: System.Int32
      description: The desired number of compute nodes in the pool.
    - id: resizeTimeout
      type: System.Nullable{System.TimeSpan}
      description: The timeout for allocation of compute nodes to the pool or removal of compute nodes from the pool. If the pool has not reached the target size after this time, the resize is stopped. The default is 15 minutes.
    - id: deallocationOption
      type: System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption}
      description: Specifies when nodes may be removed from the pool, if the pool size is decreasing. The default is <xref href="Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption.Requeue" data-throw-if-not-resolved="false"></xref>.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.PoolOperations.ResizePoolAsync*
  nameWithType.vb: PoolOperations.ResizePoolAsync(String, Int32, Nullable(Of TimeSpan), Nullable(Of ComputeNodeDeallocationOption), IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.ResizePoolAsync(System.String, System.Int32, System.Nullable(Of System.TimeSpan), System.Nullable(Of Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption), System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: ResizePoolAsync(String, Int32, Nullable(Of TimeSpan), Nullable(Of ComputeNodeDeallocationOption), IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.ResizePool(System.String,System.Int32,System.Nullable{System.TimeSpan},System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.ResizePool(System.String,System.Int32,System.Nullable{System.TimeSpan},System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: ResizePool(System.String,System.Int32,System.Nullable{System.TimeSpan},System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: ResizePool(String, Int32, Nullable<TimeSpan>, Nullable<ComputeNodeDeallocationOption>, IEnumerable<BatchClientBehavior>)
  nameWithType: PoolOperations.ResizePool(String, Int32, Nullable<TimeSpan>, Nullable<ComputeNodeDeallocationOption>, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.PoolOperations.ResizePool(System.String, System.Int32, System.Nullable<System.TimeSpan>, System.Nullable<Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption>, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ResizePool
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 350
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nResizes the specified pool.\n"
  remarks: "\n<p>The resize operation requests that the pool be resized.  The request puts the pool in the <xref href=\"Microsoft.Azure.Batch.Common.AllocationState.Resizing\" data-throw-if-not-resolved=\"false\"></xref> allocation state.\nThe Batch service will perform the actual resize without any further client action, and set the allocation state to <xref href=\"Microsoft.Azure.Batch.Common.AllocationState.Steady\" data-throw-if-not-resolved=\"false\"></xref> once complete.</p>\n<p>\nYou can only resize a pool when its <xref href=\"Microsoft.Azure.Batch.CloudPool.AllocationState\" data-throw-if-not-resolved=\"false\"></xref> is <xref href=\"Microsoft.Azure.Batch.Common.AllocationState.Steady\" data-throw-if-not-resolved=\"false\"></xref>.\nYou cannot resize pools which are configured for automatic scaling (that is, the <xref href=\"Microsoft.Azure.Batch.CloudPool.AutoScaleEnabled\" data-throw-if-not-resolved=\"false\"></xref> property of the pool is true).\nIf you decrease the pool size, the Batch service chooses which nodes to remove.  To remove specific nodes, call <xref href=\"Microsoft.Azure.Batch.PoolOperations.RemoveFromPool(System.String%2cSystem.Collections.Generic.IEnumerable%7bSystem.String%7d%2cSystem.Nullable%7bMicrosoft.Azure.Batch.Common.ComputeNodeDeallocationOption%7d%2cSystem.Nullable%7bSystem.TimeSpan%7d%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n<p>This is a blocking operation. For a non-blocking equivalent, see <xref href=\"Microsoft.Azure.Batch.PoolOperations.ResizePoolAsync(System.String%2cSystem.Int32%2cSystem.Nullable%7bSystem.TimeSpan%7d%2cSystem.Nullable%7bMicrosoft.Azure.Batch.Common.ComputeNodeDeallocationOption%7d%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public void ResizePool(string poolId, int targetDedicated, TimeSpan? resizeTimeout = null, ComputeNodeDeallocationOption? deallocationOption = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub ResizePool(poolId As String, targetDedicated As Integer, resizeTimeout As TimeSpan? = Nothing, deallocationOption As ComputeNodeDeallocationOption? = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool.
    - id: targetDedicated
      type: System.Int32
      description: The desired number of compute nodes in the pool.
    - id: resizeTimeout
      type: System.Nullable{System.TimeSpan}
      description: The timeout for allocation of compute nodes to the pool or removal of compute nodes from the pool. If the pool has not reached the target size after this time, the resize is stopped. The default is 15 minutes.
    - id: deallocationOption
      type: System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption}
      description: Specifies when nodes may be removed from the pool, if the pool size is decreasing. The default is <xref href="Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption.Requeue" data-throw-if-not-resolved="false"></xref>.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.PoolOperations.ResizePool*
  nameWithType.vb: PoolOperations.ResizePool(String, Int32, Nullable(Of TimeSpan), Nullable(Of ComputeNodeDeallocationOption), IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.ResizePool(System.String, System.Int32, System.Nullable(Of System.TimeSpan), System.Nullable(Of Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption), System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: ResizePool(String, Int32, Nullable(Of TimeSpan), Nullable(Of ComputeNodeDeallocationOption), IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.PoolOperations.StopResizePoolAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.StopResizePoolAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: StopResizePoolAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: StopResizePoolAsync(String, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: PoolOperations.StopResizePoolAsync(String, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.PoolOperations.StopResizePoolAsync(System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: StopResizePoolAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 385
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nStops a pool resize operation.\n"
  remarks: "\n<p>\nThis operation stops an ongoing resize operation on the pool.  The pool size will stabilize at the number of nodes it is at\nwhen the stop operation is done.  During the stop operation, the pool <xref href=\"Microsoft.Azure.Batch.CloudPool.AllocationState\" data-throw-if-not-resolved=\"false\"></xref> changes first\nto <xref href=\"Microsoft.Azure.Batch.Common.AllocationState.Stopping\" data-throw-if-not-resolved=\"false\"></xref> and then to <xref href=\"Microsoft.Azure.Batch.Common.AllocationState.Steady\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n<p>The stop resize operation runs asynchronously.</p>\n"
  example: []
  syntax:
    content: public Task StopResizePoolAsync(string poolId, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function StopResizePoolAsync(poolId As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.PoolOperations.StopResizePoolAsync*
  nameWithType.vb: PoolOperations.StopResizePoolAsync(String, IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.StopResizePoolAsync(System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: StopResizePoolAsync(String, IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.StopResizePool(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.StopResizePool(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: StopResizePool(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: StopResizePool(String, IEnumerable<BatchClientBehavior>)
  nameWithType: PoolOperations.StopResizePool(String, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.PoolOperations.StopResizePool(System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: StopResizePool
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 412
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nStops a pool resize operation.\n"
  remarks: "\n<p>\nThis operation stops an ongoing resize operation on the pool.  The pool size will stabilize at the number of nodes it is at\nwhen the stop operation is done.  During the stop operation, the pool <xref href=\"Microsoft.Azure.Batch.CloudPool.AllocationState\" data-throw-if-not-resolved=\"false\"></xref> changes first\nto <xref href=\"Microsoft.Azure.Batch.Common.AllocationState.Stopping\" data-throw-if-not-resolved=\"false\"></xref> and then to <xref href=\"Microsoft.Azure.Batch.Common.AllocationState.Steady\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n<p>This is a blocking operation. For a non-blocking equivalent, see <xref href=\"Microsoft.Azure.Batch.PoolOperations.StopResizePoolAsync(System.String%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public void StopResizePool(string poolId, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub StopResizePool(poolId As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.PoolOperations.StopResizePool*
  nameWithType.vb: PoolOperations.StopResizePool(String, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.StopResizePool(System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: StopResizePool(String, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.PoolOperations.ListComputeNodes(System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.ListComputeNodes(System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: ListComputeNodes(System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: ListComputeNodes(String, DetailLevel, IEnumerable<BatchClientBehavior>)
  nameWithType: PoolOperations.ListComputeNodes(String, DetailLevel, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.PoolOperations.ListComputeNodes(System.String, Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ListComputeNodes
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 452
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nEnumerates the <xref href=\"Microsoft.Azure.Batch.ComputeNode\" data-throw-if-not-resolved=\"false\"></xref> of the specified pool.\n"
  remarks: >-
    This method returns immediately; the nodes are retrieved from the Batch service only when the collection is enumerated.

    Retrieval is non-atomic; nodes are retrieved in pages during enumeration of the collection.
  example: []
  syntax:
    content: public IPagedEnumerable<ComputeNode> ListComputeNodes(string poolId, DetailLevel detailLevel = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Function ListComputeNodes(poolId As String, detailLevel As DetailLevel = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing) As IPagedEnumerable(Of ComputeNode)
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool.
    - id: detailLevel
      type: Microsoft.Azure.Batch.DetailLevel
      description: A <xref href="Microsoft.Azure.Batch.DetailLevel" data-throw-if-not-resolved="false"></xref> used for filtering the list and for controlling which properties are retrieved from the service.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref> and <span class="paramref">detailLevel</span>.
    return:
      type: Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.ComputeNode}
      description: An <xref href="Microsoft.Azure.Batch.IPagedEnumerable%601" data-throw-if-not-resolved="false"></xref> that can be used to enumerate compute nodes asynchronously or synchronously.
  overload: Microsoft.Azure.Batch.PoolOperations.ListComputeNodes*
  nameWithType.vb: PoolOperations.ListComputeNodes(String, DetailLevel, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.ListComputeNodes(System.String, Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: ListComputeNodes(String, DetailLevel, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.PoolOperations.GetComputeNodeAsync(System.String,System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.GetComputeNodeAsync(System.String,System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: GetComputeNodeAsync(System.String,System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: GetComputeNodeAsync(String, String, DetailLevel, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: PoolOperations.GetComputeNodeAsync(String, String, DetailLevel, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.PoolOperations.GetComputeNodeAsync(System.String, System.String, Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: GetComputeNodeAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 493
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the specified compute node.\n"
  remarks: The get node operation runs asynchronously.
  example: []
  syntax:
    content: public Task<ComputeNode> GetComputeNodeAsync(string poolId, string computeNodeId, DetailLevel detailLevel = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function GetComputeNodeAsync(poolId As String, computeNodeId As String, detailLevel As DetailLevel = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of ComputeNode)
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool.
    - id: computeNodeId
      type: System.String
      description: The id of the compute node to get from the pool.
    - id: detailLevel
      type: Microsoft.Azure.Batch.DetailLevel
      description: A <xref href="Microsoft.Azure.Batch.DetailLevel" data-throw-if-not-resolved="false"></xref> used for controlling which properties are retrieved from the service.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref> and <span class="paramref">detailLevel</span>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.Batch.ComputeNode}
      description: A <xref href="Microsoft.Azure.Batch.ComputeNode" data-throw-if-not-resolved="false"></xref> containing information about the specified compute node.
  overload: Microsoft.Azure.Batch.PoolOperations.GetComputeNodeAsync*
  nameWithType.vb: PoolOperations.GetComputeNodeAsync(String, String, DetailLevel, IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.GetComputeNodeAsync(System.String, System.String, Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: GetComputeNodeAsync(String, String, DetailLevel, IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.GetComputeNode(System.String,System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.GetComputeNode(System.String,System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: GetComputeNode(System.String,System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: GetComputeNode(String, String, DetailLevel, IEnumerable<BatchClientBehavior>)
  nameWithType: PoolOperations.GetComputeNode(String, String, DetailLevel, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.PoolOperations.GetComputeNode(System.String, System.String, Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: GetComputeNode
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 517
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the specified compute node.\n"
  remarks: This is a blocking operation. For a non-blocking equivalent, see <xref href="Microsoft.Azure.Batch.PoolOperations.GetComputeNodeAsync(System.String%2cSystem.String%2cMicrosoft.Azure.Batch.DetailLevel%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public ComputeNode GetComputeNode(string poolId, string computeNodeId, DetailLevel detailLevel = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Function GetComputeNode(poolId As String, computeNodeId As String, detailLevel As DetailLevel = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing) As ComputeNode
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool.
    - id: computeNodeId
      type: System.String
      description: The id of the compute node to get from the pool.
    - id: detailLevel
      type: Microsoft.Azure.Batch.DetailLevel
      description: A <xref href="Microsoft.Azure.Batch.DetailLevel" data-throw-if-not-resolved="false"></xref> used for controlling which properties are retrieved from the service.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.Azure.Batch.ComputeNode
      description: A <xref href="Microsoft.Azure.Batch.ComputeNode" data-throw-if-not-resolved="false"></xref> containing information about the specified compute node.
  overload: Microsoft.Azure.Batch.PoolOperations.GetComputeNode*
  nameWithType.vb: PoolOperations.GetComputeNode(String, String, DetailLevel, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.GetComputeNode(System.String, System.String, Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: GetComputeNode(String, String, DetailLevel, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.PoolOperations.EnableComputeNodeSchedulingAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.EnableComputeNodeSchedulingAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: EnableComputeNodeSchedulingAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: EnableComputeNodeSchedulingAsync(String, String, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: PoolOperations.EnableComputeNodeSchedulingAsync(String, String, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.PoolOperations.EnableComputeNodeSchedulingAsync(System.String, System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: EnableComputeNodeSchedulingAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 538
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nEnables task scheduling on the specified compute node.\n"
  remarks: This operation runs asynchronously.
  example: []
  syntax:
    content: public Task EnableComputeNodeSchedulingAsync(string poolId, string computeNodeId, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function EnableComputeNodeSchedulingAsync(poolId As String, computeNodeId As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool.
    - id: computeNodeId
      type: System.String
      description: The id of the compute node.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.PoolOperations.EnableComputeNodeSchedulingAsync*
  nameWithType.vb: PoolOperations.EnableComputeNodeSchedulingAsync(String, String, IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.EnableComputeNodeSchedulingAsync(System.String, System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: EnableComputeNodeSchedulingAsync(String, String, IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.EnableComputeNodeScheduling(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.EnableComputeNodeScheduling(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: EnableComputeNodeScheduling(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: EnableComputeNodeScheduling(String, String, IEnumerable<BatchClientBehavior>)
  nameWithType: PoolOperations.EnableComputeNodeScheduling(String, String, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.PoolOperations.EnableComputeNodeScheduling(System.String, System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: EnableComputeNodeScheduling
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 559
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nEnables task scheduling on the specified compute node.\n"
  remarks: This is a blocking operation. For a non-blocking equivalent, see <xref href="Microsoft.Azure.Batch.PoolOperations.EnableComputeNodeScheduling(System.String%2cSystem.String%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public void EnableComputeNodeScheduling(string poolId, string computeNodeId, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub EnableComputeNodeScheduling(poolId As String, computeNodeId As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool.
    - id: computeNodeId
      type: System.String
      description: The id of the compute node.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.PoolOperations.EnableComputeNodeScheduling*
  nameWithType.vb: PoolOperations.EnableComputeNodeScheduling(String, String, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.EnableComputeNodeScheduling(System.String, System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: EnableComputeNodeScheduling(String, String, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.PoolOperations.DisableComputeNodeSchedulingAsync(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.DisableComputeNodeSchedulingOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.DisableComputeNodeSchedulingAsync(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.DisableComputeNodeSchedulingOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: DisableComputeNodeSchedulingAsync(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.DisableComputeNodeSchedulingOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: DisableComputeNodeSchedulingAsync(String, String, Nullable<DisableComputeNodeSchedulingOption>, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: PoolOperations.DisableComputeNodeSchedulingAsync(String, String, Nullable<DisableComputeNodeSchedulingOption>, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.PoolOperations.DisableComputeNodeSchedulingAsync(System.String, System.String, System.Nullable<Microsoft.Azure.Batch.Common.DisableComputeNodeSchedulingOption>, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DisableComputeNodeSchedulingAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 580
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nDisables task scheduling on the specified compute node.\n"
  remarks: This operation runs asynchronously.
  example: []
  syntax:
    content: public Task DisableComputeNodeSchedulingAsync(string poolId, string computeNodeId, DisableComputeNodeSchedulingOption? disableComputeNodeSchedulingOption, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function DisableComputeNodeSchedulingAsync(poolId As String, computeNodeId As String, disableComputeNodeSchedulingOption As DisableComputeNodeSchedulingOption?, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool.
    - id: computeNodeId
      type: System.String
      description: The id of the compute node.
    - id: disableComputeNodeSchedulingOption
      type: System.Nullable{Microsoft.Azure.Batch.Common.DisableComputeNodeSchedulingOption}
      description: Specifies what to do with currently running tasks. The default is <xref href="Microsoft.Azure.Batch.Common.DisableComputeNodeSchedulingOption.Requeue" data-throw-if-not-resolved="false"></xref>.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.PoolOperations.DisableComputeNodeSchedulingAsync*
  nameWithType.vb: PoolOperations.DisableComputeNodeSchedulingAsync(String, String, Nullable(Of DisableComputeNodeSchedulingOption), IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.DisableComputeNodeSchedulingAsync(System.String, System.String, System.Nullable(Of Microsoft.Azure.Batch.Common.DisableComputeNodeSchedulingOption), System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: DisableComputeNodeSchedulingAsync(String, String, Nullable(Of DisableComputeNodeSchedulingOption), IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.DisableComputeNodeScheduling(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.DisableComputeNodeSchedulingOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.DisableComputeNodeScheduling(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.DisableComputeNodeSchedulingOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: DisableComputeNodeScheduling(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.DisableComputeNodeSchedulingOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: DisableComputeNodeScheduling(String, String, Nullable<DisableComputeNodeSchedulingOption>, IEnumerable<BatchClientBehavior>)
  nameWithType: PoolOperations.DisableComputeNodeScheduling(String, String, Nullable<DisableComputeNodeSchedulingOption>, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.PoolOperations.DisableComputeNodeScheduling(System.String, System.String, System.Nullable<Microsoft.Azure.Batch.Common.DisableComputeNodeSchedulingOption>, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DisableComputeNodeScheduling
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 603
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nDisables task scheduling on the specified compute node.\n"
  remarks: This is a blocking operation. For a non-blocking equivalent, see <xref href="Microsoft.Azure.Batch.PoolOperations.DisableComputeNodeSchedulingAsync(System.String%2cSystem.String%2cSystem.Nullable%7bMicrosoft.Azure.Batch.Common.DisableComputeNodeSchedulingOption%7d%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public void DisableComputeNodeScheduling(string poolId, string computeNodeId, DisableComputeNodeSchedulingOption? disableComputeNodeSchedulingOption, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub DisableComputeNodeScheduling(poolId As String, computeNodeId As String, disableComputeNodeSchedulingOption As DisableComputeNodeSchedulingOption?, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool.
    - id: computeNodeId
      type: System.String
      description: The id of the compute node.
    - id: disableComputeNodeSchedulingOption
      type: System.Nullable{Microsoft.Azure.Batch.Common.DisableComputeNodeSchedulingOption}
      description: Specifies what to do with currently running tasks. The default is <xref href="Microsoft.Azure.Batch.Common.DisableComputeNodeSchedulingOption.Requeue" data-throw-if-not-resolved="false"></xref>.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.PoolOperations.DisableComputeNodeScheduling*
  nameWithType.vb: PoolOperations.DisableComputeNodeScheduling(String, String, Nullable(Of DisableComputeNodeSchedulingOption), IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.DisableComputeNodeScheduling(System.String, System.String, System.Nullable(Of Microsoft.Azure.Batch.Common.DisableComputeNodeSchedulingOption), System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: DisableComputeNodeScheduling(String, String, Nullable(Of DisableComputeNodeSchedulingOption), IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.PoolOperations.EnableAutoScaleAsync(System.String,System.String,System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.EnableAutoScaleAsync(System.String,System.String,System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: EnableAutoScaleAsync(System.String,System.String,System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: EnableAutoScaleAsync(String, String, Nullable<TimeSpan>, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: PoolOperations.EnableAutoScaleAsync(String, String, Nullable<TimeSpan>, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.PoolOperations.EnableAutoScaleAsync(System.String, System.String, System.Nullable<System.TimeSpan>, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: EnableAutoScaleAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 647
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nEnables automatic scaling on the specified pool.\n"
  remarks: "\n<p>The formula is checked for validity before it is applied to the pool. If the formula is not valid, an exception occurs.</p>\n<p>You cannot enable automatic scaling on a pool if a resize operation is in progress on the pool.</p>\n<p>The enable autoscale operation runs asynchronously.</p>\n"
  example: []
  syntax:
    content: public Task EnableAutoScaleAsync(string poolId, string autoscaleFormula = null, TimeSpan? autoscaleEvaluationInterval = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function EnableAutoScaleAsync(poolId As String, autoscaleFormula As String = Nothing, autoscaleEvaluationInterval As TimeSpan? = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool.
    - id: autoscaleFormula
      type: System.String
      description: The formula for the desired number of compute nodes in the pool.
    - id: autoscaleEvaluationInterval
      type: System.Nullable{System.TimeSpan}
      description: The time interval at which to automatically adjust the pool size according to the AutoScale formula. The default value is 15 minutes. The minimum allowed value is 5 minutes.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.PoolOperations.EnableAutoScaleAsync*
  nameWithType.vb: PoolOperations.EnableAutoScaleAsync(String, String, Nullable(Of TimeSpan), IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.EnableAutoScaleAsync(System.String, System.String, System.Nullable(Of System.TimeSpan), System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: EnableAutoScaleAsync(String, String, Nullable(Of TimeSpan), IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.EnableAutoScale(System.String,System.String,System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.EnableAutoScale(System.String,System.String,System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: EnableAutoScale(System.String,System.String,System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: EnableAutoScale(String, String, Nullable<TimeSpan>, IEnumerable<BatchClientBehavior>)
  nameWithType: PoolOperations.EnableAutoScale(String, String, Nullable<TimeSpan>, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.PoolOperations.EnableAutoScale(System.String, System.String, System.Nullable<System.TimeSpan>, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: EnableAutoScale
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 675
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nEnables automatic scaling on the specified pool.\n"
  remarks: "\n<p>The formula is checked for validity before it is applied to the pool. If the formula is not valid, an exception occurs.</p>\n<p>You cannot enable automatic scaling on a pool if a resize operation is in progress on the pool.</p>\n<p>This is a blocking operation. For a non-blocking equivalent, see <xref href=\"Microsoft.Azure.Batch.PoolOperations.EnableAutoScaleAsync(System.String%2cSystem.String%2cSystem.Nullable%7bSystem.TimeSpan%7d%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public void EnableAutoScale(string poolId, string autoscaleFormula = null, TimeSpan? autoscaleEvaluationInterval = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub EnableAutoScale(poolId As String, autoscaleFormula As String = Nothing, autoscaleEvaluationInterval As TimeSpan? = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool.
    - id: autoscaleFormula
      type: System.String
      description: The formula for the desired number of compute nodes in the pool.
    - id: autoscaleEvaluationInterval
      type: System.Nullable{System.TimeSpan}
      description: The time interval at which to automatically adjust the pool size according to the AutoScale formula. The default value is 15 minutes. The minimum allowed value is 5 minutes.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.PoolOperations.EnableAutoScale*
  nameWithType.vb: PoolOperations.EnableAutoScale(String, String, Nullable(Of TimeSpan), IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.EnableAutoScale(System.String, System.String, System.Nullable(Of System.TimeSpan), System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: EnableAutoScale(String, String, Nullable(Of TimeSpan), IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.PoolOperations.DisableAutoScaleAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.DisableAutoScaleAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: DisableAutoScaleAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: DisableAutoScaleAsync(String, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: PoolOperations.DisableAutoScaleAsync(String, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.PoolOperations.DisableAutoScaleAsync(System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DisableAutoScaleAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 705
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nDisables automatic scaling on the specified pool.\n"
  remarks: "\n<p>The disable autoscale operation runs asynchronously.</p>\n"
  example: []
  syntax:
    content: public Task DisableAutoScaleAsync(string poolId, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function DisableAutoScaleAsync(poolId As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.PoolOperations.DisableAutoScaleAsync*
  nameWithType.vb: PoolOperations.DisableAutoScaleAsync(String, IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.DisableAutoScaleAsync(System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: DisableAutoScaleAsync(String, IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.DisableAutoScale(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.DisableAutoScale(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: DisableAutoScale(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: DisableAutoScale(String, IEnumerable<BatchClientBehavior>)
  nameWithType: PoolOperations.DisableAutoScale(String, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.PoolOperations.DisableAutoScale(System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DisableAutoScale
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 728
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nDisables automatic scaling on the specified pool.\n"
  remarks: "\n<p>This is a blocking operation. For a non-blocking equivalent, see <xref href=\"Microsoft.Azure.Batch.PoolOperations.DisableAutoScaleAsync(System.String%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public void DisableAutoScale(string poolId, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub DisableAutoScale(poolId As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.PoolOperations.DisableAutoScale*
  nameWithType.vb: PoolOperations.DisableAutoScale(String, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.DisableAutoScale(System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: DisableAutoScale(String, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.PoolOperations.EvaluateAutoScaleAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.EvaluateAutoScaleAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: EvaluateAutoScaleAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: EvaluateAutoScaleAsync(String, String, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: PoolOperations.EvaluateAutoScaleAsync(String, String, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.PoolOperations.EvaluateAutoScaleAsync(System.String, System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: EvaluateAutoScaleAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 766
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the result of evaluating an automatic scaling formula on the specified pool.  This \nis primarily for validating an autoscale formula, as it simply returns the result\nwithout applying the formula to the pool.\n"
  remarks: "\n<p>The formula is validated and its results calculated, but is not applied to the pool.  To apply the formula to the pool, use <xref href=\"Microsoft.Azure.Batch.PoolOperations.EnableAutoScaleAsync(System.String%2cSystem.String%2cSystem.Nullable%7bSystem.TimeSpan%7d%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method does not change any state of the pool, and does not affect the <xref href=\"Microsoft.Azure.Batch.CloudPool.LastModified\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Azure.Batch.CloudPool.ETag\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The evaluate operation runs asynchronously.</p>\n"
  example: []
  syntax:
    content: public Task<AutoScaleRun> EvaluateAutoScaleAsync(string poolId, string autoscaleFormula, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function EvaluateAutoScaleAsync(poolId As String, autoscaleFormula As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of AutoScaleRun)
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool.
    - id: autoscaleFormula
      type: System.String
      description: The formula to be evaluated on the pool.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.Batch.AutoScaleRun}
      description: The result of evaluating the <span class="paramref">autoscaleFormula</span> on the specified pool.
  overload: Microsoft.Azure.Batch.PoolOperations.EvaluateAutoScaleAsync*
  nameWithType.vb: PoolOperations.EvaluateAutoScaleAsync(String, String, IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.EvaluateAutoScaleAsync(System.String, System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: EvaluateAutoScaleAsync(String, String, IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.EvaluateAutoScale(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.EvaluateAutoScale(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: EvaluateAutoScale(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: EvaluateAutoScale(String, String, IEnumerable<BatchClientBehavior>)
  nameWithType: PoolOperations.EvaluateAutoScale(String, String, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.PoolOperations.EvaluateAutoScale(System.String, System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: EvaluateAutoScale
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 801
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the result of evaluating an automatic scaling formula on the specified pool.  This \nis primarily for validating an autoscale formula, as it simply returns the result\nwithout applying the formula to the pool.\n"
  remarks: "\n<p>The formula is validated and its results calculated, but is not applied to the pool.  To apply the formula to the pool, use <xref href=\"Microsoft.Azure.Batch.PoolOperations.EnableAutoScale(System.String%2cSystem.String%2cSystem.Nullable%7bSystem.TimeSpan%7d%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method does not change any state of the pool, and does not affect the <xref href=\"Microsoft.Azure.Batch.CloudPool.LastModified\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Azure.Batch.CloudPool.ETag\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This is a blocking operation. For a non-blocking equivalent, see <xref href=\"Microsoft.Azure.Batch.PoolOperations.EvaluateAutoScaleAsync(System.String%2cSystem.String%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public AutoScaleRun EvaluateAutoScale(string poolId, string autoscaleFormula, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Function EvaluateAutoScale(poolId As String, autoscaleFormula As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing) As AutoScaleRun
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool.
    - id: autoscaleFormula
      type: System.String
      description: The formula to be evaluated on the pool.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.Azure.Batch.AutoScaleRun
      description: The result of evaluating the <span class="paramref">autoscaleFormula</span> on the specified pool.
  overload: Microsoft.Azure.Batch.PoolOperations.EvaluateAutoScale*
  nameWithType.vb: PoolOperations.EvaluateAutoScale(String, String, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.EvaluateAutoScale(System.String, System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: EvaluateAutoScale(String, String, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: RemoveFromPoolAsync(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: RemoveFromPoolAsync(String, String, Nullable<ComputeNodeDeallocationOption>, Nullable<TimeSpan>, IEnumerable<BatchClientBehavior>)
  nameWithType: PoolOperations.RemoveFromPoolAsync(String, String, Nullable<ComputeNodeDeallocationOption>, Nullable<TimeSpan>, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync(System.String, System.String, System.Nullable<Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption>, System.Nullable<System.TimeSpan>, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: RemoveFromPoolAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 827
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nRemoves the specified compute node from the specified pool.\n"
  remarks: "\n<p>If you need to remove multiple compute nodes from a pool, it is more efficient to use the <xref href=\"Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync(System.String%2cSystem.Collections.Generic.IEnumerable%7bSystem.String%7d%2cSystem.Nullable%7bMicrosoft.Azure.Batch.Common.ComputeNodeDeallocationOption%7d%2cSystem.Nullable%7bSystem.TimeSpan%7d%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> overload.</p>\n<p>You can only remove nodes from a pool when the <xref href=\"Microsoft.Azure.Batch.CloudPool.AllocationState\" data-throw-if-not-resolved=\"false\"></xref> of the pool is <xref href=\"Microsoft.Azure.Batch.Common.AllocationState.Steady\" data-throw-if-not-resolved=\"false\"></xref>. If the pool is already resizing, an exception occurs.</p>\n<p>When you remove nodes from a pool, the pool's AllocationState changes from Steady to <xref href=\"Microsoft.Azure.Batch.Common.AllocationState.Resizing\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The remove operation runs asynchronously.</p>\n"
  example: []
  syntax:
    content: public Task RemoveFromPoolAsync(string poolId, string computeNodeId, ComputeNodeDeallocationOption? deallocationOption = null, TimeSpan? resizeTimeout = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Function RemoveFromPoolAsync(poolId As String, computeNodeId As String, deallocationOption As ComputeNodeDeallocationOption? = Nothing, resizeTimeout As TimeSpan? = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing) As Task
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool.
    - id: computeNodeId
      type: System.String
      description: The id of the compute node to remove from the pool.
    - id: deallocationOption
      type: System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption}
      description: Specifies when nodes may be removed from the pool. The default is <xref href="Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption.Requeue" data-throw-if-not-resolved="false"></xref>.
    - id: resizeTimeout
      type: System.Nullable{System.TimeSpan}
      description: Specifies the timeout for removal of compute nodes from the pool. The default value is 15 minutes. The minimum value is 5 minutes.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync*
  nameWithType.vb: PoolOperations.RemoveFromPoolAsync(String, String, Nullable(Of ComputeNodeDeallocationOption), Nullable(Of TimeSpan), IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync(System.String, System.String, System.Nullable(Of Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption), System.Nullable(Of System.TimeSpan), System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: RemoveFromPoolAsync(String, String, Nullable(Of ComputeNodeDeallocationOption), Nullable(Of TimeSpan), IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.PoolOperations.RemoveFromPool(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.RemoveFromPool(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: RemoveFromPool(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: RemoveFromPool(String, String, Nullable<ComputeNodeDeallocationOption>, Nullable<TimeSpan>, IEnumerable<BatchClientBehavior>)
  nameWithType: PoolOperations.RemoveFromPool(String, String, Nullable<ComputeNodeDeallocationOption>, Nullable<TimeSpan>, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.PoolOperations.RemoveFromPool(System.String, System.String, System.Nullable<Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption>, System.Nullable<System.TimeSpan>, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: RemoveFromPool
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 857
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nRemoves the specified compute node from the specified pool.\n"
  remarks: "\n<p>If you need to remove multiple compute nodes from a pool, it is more efficient to use the <xref href=\"Microsoft.Azure.Batch.PoolOperations.RemoveFromPool(System.String%2cSystem.Collections.Generic.IEnumerable%7bSystem.String%7d%2cSystem.Nullable%7bMicrosoft.Azure.Batch.Common.ComputeNodeDeallocationOption%7d%2cSystem.Nullable%7bSystem.TimeSpan%7d%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d)\" data-throw-if-not-resolved=\"false\"></xref> overload.</p>\n<p>You can only remove nodes from a pool when the <xref href=\"Microsoft.Azure.Batch.CloudPool.AllocationState\" data-throw-if-not-resolved=\"false\"></xref> of the pool is <xref href=\"Microsoft.Azure.Batch.Common.AllocationState.Steady\" data-throw-if-not-resolved=\"false\"></xref>. If the pool is already resizing, an exception occurs.</p>\n<p>When you remove nodes from a pool, the pool's AllocationState changes from Steady to <xref href=\"Microsoft.Azure.Batch.Common.AllocationState.Resizing\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This is a blocking operation. For a non-blocking equivalent, see <xref href=\"Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync(System.String%2cSystem.String%2cSystem.Nullable%7bMicrosoft.Azure.Batch.Common.ComputeNodeDeallocationOption%7d%2cSystem.Nullable%7bSystem.TimeSpan%7d%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public void RemoveFromPool(string poolId, string computeNodeId, ComputeNodeDeallocationOption? deallocationOption = null, TimeSpan? resizeTimeout = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub RemoveFromPool(poolId As String, computeNodeId As String, deallocationOption As ComputeNodeDeallocationOption? = Nothing, resizeTimeout As TimeSpan? = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool.
    - id: computeNodeId
      type: System.String
      description: The id of the compute node to remove from the pool.
    - id: deallocationOption
      type: System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption}
      description: Specifies when nodes may be removed from the pool. The default is <xref href="Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption.Requeue" data-throw-if-not-resolved="false"></xref>.
    - id: resizeTimeout
      type: System.Nullable{System.TimeSpan}
      description: Specifies the timeout for removal of compute nodes from the pool. The default value is 15 minutes. The minimum value is 5 minutes.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.PoolOperations.RemoveFromPool*
  nameWithType.vb: PoolOperations.RemoveFromPool(String, String, Nullable(Of ComputeNodeDeallocationOption), Nullable(Of TimeSpan), IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.RemoveFromPool(System.String, System.String, System.Nullable(Of Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption), System.Nullable(Of System.TimeSpan), System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: RemoveFromPool(String, String, Nullable(Of ComputeNodeDeallocationOption), Nullable(Of TimeSpan), IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: RemoveFromPoolAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: RemoveFromPoolAsync(String, IEnumerable<String>, Nullable<ComputeNodeDeallocationOption>, Nullable<TimeSpan>, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: PoolOperations.RemoveFromPoolAsync(String, IEnumerable<String>, Nullable<ComputeNodeDeallocationOption>, Nullable<TimeSpan>, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync(System.String, System.Collections.Generic.IEnumerable<System.String>, System.Nullable<Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption>, System.Nullable<System.TimeSpan>, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: RemoveFromPoolAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 905
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nRemoves the specified compute nodes from the specified pool.\n"
  remarks: "\n<p>You can only remove nodes from a pool when the <xref href=\"Microsoft.Azure.Batch.CloudPool.AllocationState\" data-throw-if-not-resolved=\"false\"></xref> of the pool is <xref href=\"Microsoft.Azure.Batch.Common.AllocationState.Steady\" data-throw-if-not-resolved=\"false\"></xref>. If the pool is already resizing, an exception occurs.</p>\n<p>When you remove nodes from a pool, the pool's AllocationState changes from Steady to <xref href=\"Microsoft.Azure.Batch.Common.AllocationState.Resizing\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The remove operation runs asynchronously.</p>\n"
  example: []
  syntax:
    content: public Task RemoveFromPoolAsync(string poolId, IEnumerable<string> computeNodeIds, ComputeNodeDeallocationOption? deallocationOption = null, TimeSpan? resizeTimeout = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function RemoveFromPoolAsync(poolId As String, computeNodeIds As IEnumerable(Of String), deallocationOption As ComputeNodeDeallocationOption? = Nothing, resizeTimeout As TimeSpan? = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool.
    - id: computeNodeIds
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The ids of the compute nodes to remove from the pool.
    - id: deallocationOption
      type: System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption}
      description: Specifies when nodes may be removed from the pool. The default is <xref href="Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption.Requeue" data-throw-if-not-resolved="false"></xref>.
    - id: resizeTimeout
      type: System.Nullable{System.TimeSpan}
      description: Specifies the timeout for removal of compute nodes from the pool. The default value is 15 minutes. The minimum value is 5 minutes.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync*
  nameWithType.vb: PoolOperations.RemoveFromPoolAsync(String, IEnumerable(Of String), Nullable(Of ComputeNodeDeallocationOption), Nullable(Of TimeSpan), IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync(System.String, System.Collections.Generic.IEnumerable(Of System.String), System.Nullable(Of Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption), System.Nullable(Of System.TimeSpan), System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: RemoveFromPoolAsync(String, IEnumerable(Of String), Nullable(Of ComputeNodeDeallocationOption), Nullable(Of TimeSpan), IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.RemoveFromPool(System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.RemoveFromPool(System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: RemoveFromPool(System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: RemoveFromPool(String, IEnumerable<String>, Nullable<ComputeNodeDeallocationOption>, Nullable<TimeSpan>, IEnumerable<BatchClientBehavior>)
  nameWithType: PoolOperations.RemoveFromPool(String, IEnumerable<String>, Nullable<ComputeNodeDeallocationOption>, Nullable<TimeSpan>, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.PoolOperations.RemoveFromPool(System.String, System.Collections.Generic.IEnumerable<System.String>, System.Nullable<Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption>, System.Nullable<System.TimeSpan>, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: RemoveFromPool
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 941
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nRemoves the specified compute nodes from the specified pool.\n"
  remarks: "\n<p>You can only remove nodes from a pool when the <xref href=\"Microsoft.Azure.Batch.CloudPool.AllocationState\" data-throw-if-not-resolved=\"false\"></xref> of the pool is <xref href=\"Microsoft.Azure.Batch.Common.AllocationState.Steady\" data-throw-if-not-resolved=\"false\"></xref>. If the pool is already resizing, an exception occurs.</p>\n<p>When you remove nodes from a pool, the pool's AllocationState changes from Steady to <xref href=\"Microsoft.Azure.Batch.Common.AllocationState.Resizing\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This is a blocking operation. For a non-blocking equivalent, see <xref href=\"Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync(System.String%2cSystem.Collections.Generic.IEnumerable%7bSystem.String%7d%2cSystem.Nullable%7bMicrosoft.Azure.Batch.Common.ComputeNodeDeallocationOption%7d%2cSystem.Nullable%7bSystem.TimeSpan%7d%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public void RemoveFromPool(string poolId, IEnumerable<string> computeNodeIds, ComputeNodeDeallocationOption? deallocationOption = null, TimeSpan? resizeTimeout = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub RemoveFromPool(poolId As String, computeNodeIds As IEnumerable(Of String), deallocationOption As ComputeNodeDeallocationOption? = Nothing, resizeTimeout As TimeSpan? = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool.
    - id: computeNodeIds
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The ids of the compute nodes to remove from the pool.
    - id: deallocationOption
      type: System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption}
      description: Specifies when nodes may be removed from the pool. The default is <xref href="Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption.Requeue" data-throw-if-not-resolved="false"></xref>.
    - id: resizeTimeout
      type: System.Nullable{System.TimeSpan}
      description: Specifies the timeout for removal of compute nodes from the pool. The default value is 15 minutes. The minimum value is 5 minutes.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.PoolOperations.RemoveFromPool*
  nameWithType.vb: PoolOperations.RemoveFromPool(String, IEnumerable(Of String), Nullable(Of ComputeNodeDeallocationOption), Nullable(Of TimeSpan), IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.RemoveFromPool(System.String, System.Collections.Generic.IEnumerable(Of System.String), System.Nullable(Of Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption), System.Nullable(Of System.TimeSpan), System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: RemoveFromPool(String, IEnumerable(Of String), Nullable(Of ComputeNodeDeallocationOption), Nullable(Of TimeSpan), IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync(System.String,Microsoft.Azure.Batch.ComputeNode,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync(System.String,Microsoft.Azure.Batch.ComputeNode,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: RemoveFromPoolAsync(System.String,Microsoft.Azure.Batch.ComputeNode,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: RemoveFromPoolAsync(String, ComputeNode, Nullable<ComputeNodeDeallocationOption>, Nullable<TimeSpan>, IEnumerable<BatchClientBehavior>)
  nameWithType: PoolOperations.RemoveFromPoolAsync(String, ComputeNode, Nullable<ComputeNodeDeallocationOption>, Nullable<TimeSpan>, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync(System.String, Microsoft.Azure.Batch.ComputeNode, System.Nullable<Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption>, System.Nullable<System.TimeSpan>, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: RemoveFromPoolAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 969
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nRemoves the specified compute node from the specified pool.\n"
  remarks: "\n<p>If you need to remove multiple compute nodes from a pool, it is more efficient to use the <xref href=\"Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync(System.String%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.ComputeNode%7d%2cSystem.Nullable%7bMicrosoft.Azure.Batch.Common.ComputeNodeDeallocationOption%7d%2cSystem.Nullable%7bSystem.TimeSpan%7d%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> overload.</p>\n<p>You can only remove nodes from a pool when the <xref href=\"Microsoft.Azure.Batch.CloudPool.AllocationState\" data-throw-if-not-resolved=\"false\"></xref> of the pool is <xref href=\"Microsoft.Azure.Batch.Common.AllocationState.Steady\" data-throw-if-not-resolved=\"false\"></xref>. If the pool is already resizing, an exception occurs.</p>\n<p>When you remove nodes from a pool, the pool's AllocationState changes from Steady to <xref href=\"Microsoft.Azure.Batch.Common.AllocationState.Resizing\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The remove operation runs asynchronously.</p>\n"
  example: []
  syntax:
    content: public Task RemoveFromPoolAsync(string poolId, ComputeNode computeNode, ComputeNodeDeallocationOption? deallocationOption = null, TimeSpan? resizeTimeout = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Function RemoveFromPoolAsync(poolId As String, computeNode As ComputeNode, deallocationOption As ComputeNodeDeallocationOption? = Nothing, resizeTimeout As TimeSpan? = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing) As Task
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool.
    - id: computeNode
      type: Microsoft.Azure.Batch.ComputeNode
      description: The <xref href="Microsoft.Azure.Batch.ComputeNode" data-throw-if-not-resolved="false"></xref> to remove from the pool.
    - id: deallocationOption
      type: System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption}
      description: Specifies when nodes may be removed from the pool. The default is <xref href="Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption.Requeue" data-throw-if-not-resolved="false"></xref>.
    - id: resizeTimeout
      type: System.Nullable{System.TimeSpan}
      description: Specifies the timeout for removal of compute nodes from the pool. The default value is 15 minutes. The minimum value is 5 minutes.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync*
  nameWithType.vb: PoolOperations.RemoveFromPoolAsync(String, ComputeNode, Nullable(Of ComputeNodeDeallocationOption), Nullable(Of TimeSpan), IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync(System.String, Microsoft.Azure.Batch.ComputeNode, System.Nullable(Of Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption), System.Nullable(Of System.TimeSpan), System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: RemoveFromPoolAsync(String, ComputeNode, Nullable(Of ComputeNodeDeallocationOption), Nullable(Of TimeSpan), IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.PoolOperations.RemoveFromPool(System.String,Microsoft.Azure.Batch.ComputeNode,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.RemoveFromPool(System.String,Microsoft.Azure.Batch.ComputeNode,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: RemoveFromPool(System.String,Microsoft.Azure.Batch.ComputeNode,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: RemoveFromPool(String, ComputeNode, Nullable<ComputeNodeDeallocationOption>, Nullable<TimeSpan>, IEnumerable<BatchClientBehavior>)
  nameWithType: PoolOperations.RemoveFromPool(String, ComputeNode, Nullable<ComputeNodeDeallocationOption>, Nullable<TimeSpan>, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.PoolOperations.RemoveFromPool(System.String, Microsoft.Azure.Batch.ComputeNode, System.Nullable<Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption>, System.Nullable<System.TimeSpan>, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: RemoveFromPool
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 999
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nRemoves the specified compute node from the specified pool.\n"
  remarks: "\n<p>If you need to remove multiple compute nodes from a pool, it is more efficient to use the <xref href=\"Microsoft.Azure.Batch.PoolOperations.RemoveFromPool(System.String%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.ComputeNode%7d%2cSystem.Nullable%7bMicrosoft.Azure.Batch.Common.ComputeNodeDeallocationOption%7d%2cSystem.Nullable%7bSystem.TimeSpan%7d%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d)\" data-throw-if-not-resolved=\"false\"></xref> overload.</p>\n<p>You can only remove nodes from a pool when the <xref href=\"Microsoft.Azure.Batch.CloudPool.AllocationState\" data-throw-if-not-resolved=\"false\"></xref> of the pool is <xref href=\"Microsoft.Azure.Batch.Common.AllocationState.Steady\" data-throw-if-not-resolved=\"false\"></xref>. If the pool is already resizing, an exception occurs.</p>\n<p>When you remove nodes from a pool, the pool's AllocationState changes from Steady to <xref href=\"Microsoft.Azure.Batch.Common.AllocationState.Resizing\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This is a blocking operation. For a non-blocking equivalent, see <xref href=\"Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync(System.String%2cMicrosoft.Azure.Batch.ComputeNode%2cSystem.Nullable%7bMicrosoft.Azure.Batch.Common.ComputeNodeDeallocationOption%7d%2cSystem.Nullable%7bSystem.TimeSpan%7d%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public void RemoveFromPool(string poolId, ComputeNode computeNode, ComputeNodeDeallocationOption? deallocationOption = null, TimeSpan? resizeTimeout = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub RemoveFromPool(poolId As String, computeNode As ComputeNode, deallocationOption As ComputeNodeDeallocationOption? = Nothing, resizeTimeout As TimeSpan? = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool.
    - id: computeNode
      type: Microsoft.Azure.Batch.ComputeNode
      description: The <xref href="Microsoft.Azure.Batch.ComputeNode" data-throw-if-not-resolved="false"></xref> to remove from the pool.
    - id: deallocationOption
      type: System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption}
      description: Specifies when nodes may be removed from the pool. The default is <xref href="Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption.Requeue" data-throw-if-not-resolved="false"></xref>.
    - id: resizeTimeout
      type: System.Nullable{System.TimeSpan}
      description: Specifies the timeout for removal of compute nodes from the pool. The default value is 15 minutes. The minimum value is 5 minutes.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.PoolOperations.RemoveFromPool*
  nameWithType.vb: PoolOperations.RemoveFromPool(String, ComputeNode, Nullable(Of ComputeNodeDeallocationOption), Nullable(Of TimeSpan), IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.RemoveFromPool(System.String, Microsoft.Azure.Batch.ComputeNode, System.Nullable(Of Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption), System.Nullable(Of System.TimeSpan), System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: RemoveFromPool(String, ComputeNode, Nullable(Of ComputeNodeDeallocationOption), Nullable(Of TimeSpan), IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.ComputeNode},System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.ComputeNode},System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: RemoveFromPoolAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.ComputeNode},System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: RemoveFromPoolAsync(String, IEnumerable<ComputeNode>, Nullable<ComputeNodeDeallocationOption>, Nullable<TimeSpan>, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: PoolOperations.RemoveFromPoolAsync(String, IEnumerable<ComputeNode>, Nullable<ComputeNodeDeallocationOption>, Nullable<TimeSpan>, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync(System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.ComputeNode>, System.Nullable<Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption>, System.Nullable<System.TimeSpan>, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: RemoveFromPoolAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 1054
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nRemoves the specified compute nodes from the specified pool.\n"
  remarks: "\n<p>You can only remove nodes from a pool when the <xref href=\"Microsoft.Azure.Batch.CloudPool.AllocationState\" data-throw-if-not-resolved=\"false\"></xref> of the pool is <xref href=\"Microsoft.Azure.Batch.Common.AllocationState.Steady\" data-throw-if-not-resolved=\"false\"></xref>. If the pool is already resizing, an exception occurs.</p>\n<p>When you remove nodes from a pool, the pool's AllocationState changes from Steady to <xref href=\"Microsoft.Azure.Batch.Common.AllocationState.Resizing\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The remove operation runs asynchronously.</p>\n"
  example: []
  syntax:
    content: public Task RemoveFromPoolAsync(string poolId, IEnumerable<ComputeNode> computeNodes, ComputeNodeDeallocationOption? deallocationOption = null, TimeSpan? resizeTimeout = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function RemoveFromPoolAsync(poolId As String, computeNodes As IEnumerable(Of ComputeNode), deallocationOption As ComputeNodeDeallocationOption? = Nothing, resizeTimeout As TimeSpan? = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool.
    - id: computeNodes
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.ComputeNode}
      description: The <xref href="Microsoft.Azure.Batch.ComputeNode" data-throw-if-not-resolved="false"></xref> to remove from the pool.
    - id: deallocationOption
      type: System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption}
      description: Specifies when nodes may be removed from the pool. The default is <xref href="Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption.Requeue" data-throw-if-not-resolved="false"></xref>.
    - id: resizeTimeout
      type: System.Nullable{System.TimeSpan}
      description: Specifies the timeout for removal of compute nodes from the pool. The default value is 15 minutes. The minimum value is 5 minutes.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync*
  nameWithType.vb: PoolOperations.RemoveFromPoolAsync(String, IEnumerable(Of ComputeNode), Nullable(Of ComputeNodeDeallocationOption), Nullable(Of TimeSpan), IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync(System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.ComputeNode), System.Nullable(Of Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption), System.Nullable(Of System.TimeSpan), System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: RemoveFromPoolAsync(String, IEnumerable(Of ComputeNode), Nullable(Of ComputeNodeDeallocationOption), Nullable(Of TimeSpan), IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.RemoveFromPool(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.ComputeNode},System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.RemoveFromPool(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.ComputeNode},System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: RemoveFromPool(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.ComputeNode},System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: RemoveFromPool(String, IEnumerable<ComputeNode>, Nullable<ComputeNodeDeallocationOption>, Nullable<TimeSpan>, IEnumerable<BatchClientBehavior>)
  nameWithType: PoolOperations.RemoveFromPool(String, IEnumerable<ComputeNode>, Nullable<ComputeNodeDeallocationOption>, Nullable<TimeSpan>, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.PoolOperations.RemoveFromPool(System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.ComputeNode>, System.Nullable<Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption>, System.Nullable<System.TimeSpan>, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: RemoveFromPool
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 1090
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nRemoves the specified compute nodes from the specified pool.\n"
  remarks: "\n<p>You can only remove nodes from a pool when the <xref href=\"Microsoft.Azure.Batch.CloudPool.AllocationState\" data-throw-if-not-resolved=\"false\"></xref> of the pool is <xref href=\"Microsoft.Azure.Batch.Common.AllocationState.Steady\" data-throw-if-not-resolved=\"false\"></xref>. If the pool is already resizing, an exception occurs.</p>\n<p>When you remove nodes from a pool, the pool's AllocationState changes from Steady to <xref href=\"Microsoft.Azure.Batch.Common.AllocationState.Resizing\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This is a blocking operation. For a non-blocking equivalent, see <xref href=\"Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync(System.String%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.ComputeNode%7d%2cSystem.Nullable%7bMicrosoft.Azure.Batch.Common.ComputeNodeDeallocationOption%7d%2cSystem.Nullable%7bSystem.TimeSpan%7d%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public void RemoveFromPool(string poolId, IEnumerable<ComputeNode> computeNodes, ComputeNodeDeallocationOption? deallocationOption = null, TimeSpan? resizeTimeout = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub RemoveFromPool(poolId As String, computeNodes As IEnumerable(Of ComputeNode), deallocationOption As ComputeNodeDeallocationOption? = Nothing, resizeTimeout As TimeSpan? = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool.
    - id: computeNodes
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.ComputeNode}
      description: The <xref href="Microsoft.Azure.Batch.ComputeNode" data-throw-if-not-resolved="false"></xref> to remove from the pool.
    - id: deallocationOption
      type: System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption}
      description: Specifies when nodes may be removed from the pool. The default is <xref href="Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption.Requeue" data-throw-if-not-resolved="false"></xref>.
    - id: resizeTimeout
      type: System.Nullable{System.TimeSpan}
      description: Specifies the timeout for removal of compute nodes from the pool. The default value is 15 minutes. The minimum value is 5 minutes.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.PoolOperations.RemoveFromPool*
  nameWithType.vb: PoolOperations.RemoveFromPool(String, IEnumerable(Of ComputeNode), Nullable(Of ComputeNodeDeallocationOption), Nullable(Of TimeSpan), IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.RemoveFromPool(System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.ComputeNode), System.Nullable(Of Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption), System.Nullable(Of System.TimeSpan), System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: RemoveFromPool(String, IEnumerable(Of ComputeNode), Nullable(Of ComputeNodeDeallocationOption), Nullable(Of TimeSpan), IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.PoolOperations.CreateComputeNodeUser(System.String,System.String)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.CreateComputeNodeUser(System.String,System.String)
  id: CreateComputeNodeUser(System.String,System.String)
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: CreateComputeNodeUser(String, String)
  nameWithType: PoolOperations.CreateComputeNodeUser(String, String)
  fullName: Microsoft.Azure.Batch.PoolOperations.CreateComputeNodeUser(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CreateComputeNodeUser
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 1111
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nCreates a <xref href=\"Microsoft.Azure.Batch.ComputeNodeUser\" data-throw-if-not-resolved=\"false\"></xref> representing a new compute node user account that\ndoes not yet exist in the Batch service.\n"
  remarks: To add the new user, call <xref href="Microsoft.Azure.Batch.ComputeNodeUser.CommitAsync(Microsoft.Azure.Batch.ComputeNodeUserCommitSemantics%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public ComputeNodeUser CreateComputeNodeUser(string poolId, string computeNodeId)
    content.vb: Public Function CreateComputeNodeUser(poolId As String, computeNodeId As String) As ComputeNodeUser
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool that contains the compute node.
    - id: computeNodeId
      type: System.String
      description: The id of the compute node where the user account will be created.
    return:
      type: Microsoft.Azure.Batch.ComputeNodeUser
      description: An unbound <xref href="Microsoft.Azure.Batch.ComputeNodeUser" data-throw-if-not-resolved="false"></xref> representing a new user account that has not been added to the compute node.
  overload: Microsoft.Azure.Batch.PoolOperations.CreateComputeNodeUser*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.PoolOperations.DeleteComputeNodeUserAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.DeleteComputeNodeUserAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: DeleteComputeNodeUserAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: DeleteComputeNodeUserAsync(String, String, String, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: PoolOperations.DeleteComputeNodeUserAsync(String, String, String, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.PoolOperations.DeleteComputeNodeUserAsync(System.String, System.String, System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DeleteComputeNodeUserAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 1131
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nDeletes the specified user account from the specified compute node.\n"
  remarks: "\n<p>You can delete a user account from a compute node only when it is in the <xref href=\"Microsoft.Azure.Batch.Common.ComputeNodeState.Idle\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Azure.Batch.Common.ComputeNodeState.Running\" data-throw-if-not-resolved=\"false\"></xref> state.</p>\n<p>The delete operation runs asynchronously.</p>\n"
  example: []
  syntax:
    content: public Task DeleteComputeNodeUserAsync(string poolId, string computeNodeId, string userName, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function DeleteComputeNodeUserAsync(poolId As String, computeNodeId As String, userName As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool that contains the compute node.
    - id: computeNodeId
      type: System.String
      description: The id of the compute node from which you want to delete the user account.
    - id: userName
      type: System.String
      description: The name of the user account to be deleted.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.PoolOperations.DeleteComputeNodeUserAsync*
  nameWithType.vb: PoolOperations.DeleteComputeNodeUserAsync(String, String, String, IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.DeleteComputeNodeUserAsync(System.String, System.String, System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: DeleteComputeNodeUserAsync(String, String, String, IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.DeleteComputeNodeUser(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.DeleteComputeNodeUser(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: DeleteComputeNodeUser(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: DeleteComputeNodeUser(String, String, String, IEnumerable<BatchClientBehavior>)
  nameWithType: PoolOperations.DeleteComputeNodeUser(String, String, String, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.PoolOperations.DeleteComputeNodeUser(System.String, System.String, System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DeleteComputeNodeUser
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 1162
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nDeletes the specified user account from the specified compute node.\n"
  remarks: "\n<p>You can delete a user account from a compute node only when it is in the <xref href=\"Microsoft.Azure.Batch.Common.ComputeNodeState.Idle\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Azure.Batch.Common.ComputeNodeState.Running\" data-throw-if-not-resolved=\"false\"></xref> state.</p>\n<p>This is a blocking operation. For a non-blocking equivalent, see <xref href=\"Microsoft.Azure.Batch.PoolOperations.DeleteComputeNodeUserAsync(System.String%2cSystem.String%2cSystem.String%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public void DeleteComputeNodeUser(string poolId, string computeNodeId, string userName, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub DeleteComputeNodeUser(poolId As String, computeNodeId As String, userName As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool that contains the compute node.
    - id: computeNodeId
      type: System.String
      description: The id of the compute node from which you want to delete the user account.
    - id: userName
      type: System.String
      description: The name of the user account to be deleted.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.PoolOperations.DeleteComputeNodeUser*
  nameWithType.vb: PoolOperations.DeleteComputeNodeUser(String, String, String, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.DeleteComputeNodeUser(System.String, System.String, System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: DeleteComputeNodeUser(String, String, String, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.PoolOperations.GetRDPFileAsync(System.String,System.String,System.IO.Stream,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.GetRDPFileAsync(System.String,System.String,System.IO.Stream,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: GetRDPFileAsync(System.String,System.String,System.IO.Stream,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: GetRDPFileAsync(String, String, Stream, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: PoolOperations.GetRDPFileAsync(String, String, Stream, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.PoolOperations.GetRDPFileAsync(System.String, System.String, System.IO.Stream, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: GetRDPFileAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 1188
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets a Remote Desktop Protocol (RDP) file for the specified node.\n"
  remarks: "\n<p>This method does not close the <span class=\"paramref\">rdpStream</span> stream, and it does not reset the position after writing.\nIt is the caller's responsibility to close the stream, or to reset the position if required.</p>\n<p>The get RDP file operation runs asynchronously.</p>\n<p>This method can be invoked only if the pool is created with a <xref href=\"Microsoft.Azure.Batch.CloudServiceConfiguration\" data-throw-if-not-resolved=\"false\"></xref> property. \nIf this method is invoked on pools created with <xref href=\"Microsoft.Azure.Batch.VirtualMachineConfiguration\" data-throw-if-not-resolved=\"false\"></xref>, then Batch service returns 409 (Conflict). \nFor pools with <xref href=\"Microsoft.Azure.Batch.VirtualMachineConfiguration\" data-throw-if-not-resolved=\"false\"></xref> property, the new method <xref href=\"Microsoft.Azure.Batch.PoolOperations.GetRemoteLoginSettings(System.String%2cSystem.String%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d)\" data-throw-if-not-resolved=\"false\"></xref> must be used.</p>\n"
  example: []
  syntax:
    content: public Task GetRDPFileAsync(string poolId, string computeNodeId, Stream rdpStream, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function GetRDPFileAsync(poolId As String, computeNodeId As String, rdpStream As Stream, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool that contains the compute node.
    - id: computeNodeId
      type: System.String
      description: The id of the compute node for which to get a Remote Desktop file.
    - id: rdpStream
      type: System.IO.Stream
      description: The <xref href="System.IO.Stream" data-throw-if-not-resolved="false"></xref> into which the RDP file contents will be written.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.PoolOperations.GetRDPFileAsync*
  nameWithType.vb: PoolOperations.GetRDPFileAsync(String, String, Stream, IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.GetRDPFileAsync(System.String, System.String, System.IO.Stream, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: GetRDPFileAsync(String, String, Stream, IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.GetRDPFile(System.String,System.String,System.IO.Stream,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.GetRDPFile(System.String,System.String,System.IO.Stream,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: GetRDPFile(System.String,System.String,System.IO.Stream,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: GetRDPFile(String, String, Stream, IEnumerable<BatchClientBehavior>)
  nameWithType: PoolOperations.GetRDPFile(String, String, Stream, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.PoolOperations.GetRDPFile(System.String, System.String, System.IO.Stream, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: GetRDPFile
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 1224
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets a Remote Desktop Protocol (RDP) file for the specified node.\n"
  remarks: "\n<p>This method does not close the <span class=\"paramref\">rdpStream</span> stream, and it does not reset the position after writing.\nIt is the caller's responsibility to close the stream, or to reset the position if required.</p>\n<p>This is a blocking operation. For a non-blocking equivalent, see <xref href=\"Microsoft.Azure.Batch.PoolOperations.GetRDPFileAsync(System.String%2cSystem.String%2cSystem.IO.Stream%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method can be invoked only if the pool is created with a <xref href=\"Microsoft.Azure.Batch.CloudServiceConfiguration\" data-throw-if-not-resolved=\"false\"></xref> property. \nIf this method is invoked on pools created with <xref href=\"Microsoft.Azure.Batch.VirtualMachineConfiguration\" data-throw-if-not-resolved=\"false\"></xref>, then Batch service returns 409 (Conflict). \nFor pools with <xref href=\"Microsoft.Azure.Batch.VirtualMachineConfiguration\" data-throw-if-not-resolved=\"false\"></xref> property, the new method <xref href=\"Microsoft.Azure.Batch.PoolOperations.GetRemoteLoginSettings(System.String%2cSystem.String%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d)\" data-throw-if-not-resolved=\"false\"></xref> must be used.</p>\n"
  example: []
  syntax:
    content: public void GetRDPFile(string poolId, string computeNodeId, Stream rdpStream, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub GetRDPFile(poolId As String, computeNodeId As String, rdpStream As Stream, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool that contains the compute node.
    - id: computeNodeId
      type: System.String
      description: The id of the compute node for which to get a Remote Desktop file.
    - id: rdpStream
      type: System.IO.Stream
      description: The <xref href="System.IO.Stream" data-throw-if-not-resolved="false"></xref> into which the RDP file contents will be written.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.PoolOperations.GetRDPFile*
  nameWithType.vb: PoolOperations.GetRDPFile(String, String, Stream, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.GetRDPFile(System.String, System.String, System.IO.Stream, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: GetRDPFile(String, String, Stream, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.PoolOperations.GetRDPFileAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.GetRDPFileAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: GetRDPFileAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: GetRDPFileAsync(String, String, String, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: PoolOperations.GetRDPFileAsync(String, String, String, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.PoolOperations.GetRDPFileAsync(System.String, System.String, System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: GetRDPFileAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 1271
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets a Remote Desktop Protocol file for the specified node.\n"
  remarks: "\n<p>If the file specified by <span class=\"paramref\">rdpFileNameToCreate</span> already exists, it is overwritten.</p>\n<p>The get RDP file operation runs asynchronously.</p>\n<p>This method can be invoked only if the pool is created with a <xref href=\"Microsoft.Azure.Batch.CloudServiceConfiguration\" data-throw-if-not-resolved=\"false\"></xref> property. \nIf this method is invoked on pools created with <xref href=\"Microsoft.Azure.Batch.VirtualMachineConfiguration\" data-throw-if-not-resolved=\"false\"></xref>, then Batch service returns 409 (Conflict). \nFor pools with <xref href=\"Microsoft.Azure.Batch.VirtualMachineConfiguration\" data-throw-if-not-resolved=\"false\"></xref> property, the new method <xref href=\"Microsoft.Azure.Batch.PoolOperations.GetRemoteLoginSettingsAsync(System.String%2cSystem.String%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> must be used.</p>\n"
  example: []
  syntax:
    content: public Task GetRDPFileAsync(string poolId, string computeNodeId, string rdpFileNameToCreate, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function GetRDPFileAsync(poolId As String, computeNodeId As String, rdpFileNameToCreate As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool that contains the compute node.
    - id: computeNodeId
      type: System.String
      description: The id of the compute node for which to get a Remote Desktop file.
    - id: rdpFileNameToCreate
      type: System.String
      description: The file path at which to create the RDP file.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.PoolOperations.GetRDPFileAsync*
  nameWithType.vb: PoolOperations.GetRDPFileAsync(String, String, String, IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.GetRDPFileAsync(System.String, System.String, System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: GetRDPFileAsync(String, String, String, IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.GetRDPFile(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.GetRDPFile(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: GetRDPFile(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: GetRDPFile(String, String, String, IEnumerable<BatchClientBehavior>)
  nameWithType: PoolOperations.GetRDPFile(String, String, String, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.PoolOperations.GetRDPFile(System.String, System.String, System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: GetRDPFile
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 1305
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets a Remote Desktop Protocol file for the specified node.\n"
  remarks: "\n<p>If the file specified by <span class=\"paramref\">rdpFileNameToCreate</span> already exists, it is overwritten.</p>\n<p>This is a blocking operation. For a non-blocking equivalent, see <xref href=\"Microsoft.Azure.Batch.PoolOperations.GetRDPFileAsync(System.String%2cSystem.String%2cSystem.String%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method can be invoked only if the pool is created with a <xref href=\"Microsoft.Azure.Batch.CloudServiceConfiguration\" data-throw-if-not-resolved=\"false\"></xref> property. \nIf this method is invoked on pools created with <xref href=\"Microsoft.Azure.Batch.VirtualMachineConfiguration\" data-throw-if-not-resolved=\"false\"></xref>, then Batch service returns 409 (Conflict). \nFor pools with <xref href=\"Microsoft.Azure.Batch.VirtualMachineConfiguration\" data-throw-if-not-resolved=\"false\"></xref> property, the new method <xref href=\"Microsoft.Azure.Batch.PoolOperations.GetRemoteLoginSettings(System.String%2cSystem.String%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d)\" data-throw-if-not-resolved=\"false\"></xref> must be used.</p>\n"
  example: []
  syntax:
    content: public void GetRDPFile(string poolId, string computeNodeId, string rdpFileNameToCreate, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub GetRDPFile(poolId As String, computeNodeId As String, rdpFileNameToCreate As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool that contains the compute node.
    - id: computeNodeId
      type: System.String
      description: The id of the compute node for which to get a Remote Desktop file.
    - id: rdpFileNameToCreate
      type: System.String
      description: The file path at which to create the RDP file.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.PoolOperations.GetRDPFile*
  nameWithType.vb: PoolOperations.GetRDPFile(String, String, String, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.GetRDPFile(System.String, System.String, System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: GetRDPFile(String, String, String, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.PoolOperations.GetRemoteLoginSettingsAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.GetRemoteLoginSettingsAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: GetRemoteLoginSettingsAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: GetRemoteLoginSettingsAsync(String, String, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: PoolOperations.GetRemoteLoginSettingsAsync(String, String, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.PoolOperations.GetRemoteLoginSettingsAsync(System.String, System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: GetRemoteLoginSettingsAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 1341
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the settings required for remote login to a compute node.\n"
  remarks: "\n<p>The get remote login settings operation runs asynchronously.</p>\n<p>This method can be invoked only if the pool is created with a <xref href=\"Microsoft.Azure.Batch.VirtualMachineConfiguration\" data-throw-if-not-resolved=\"false\"></xref> property. \nIf this method is invoked on pools created with <xref href=\"Microsoft.Azure.Batch.CloudServiceConfiguration\" data-throw-if-not-resolved=\"false\"></xref>, then Batch service returns 409 (Conflict). \nFor pools with a <xref href=\"Microsoft.Azure.Batch.CloudServiceConfiguration\" data-throw-if-not-resolved=\"false\"></xref> property, one of the GetRDPFileAsync/GetRDPFile methods must be used.</p>\n"
  example: []
  syntax:
    content: public Task<RemoteLoginSettings> GetRemoteLoginSettingsAsync(string poolId, string computeNodeId, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function GetRemoteLoginSettingsAsync(poolId As String, computeNodeId As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of RemoteLoginSettings)
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool that contains the compute node.
    - id: computeNodeId
      type: System.String
      description: The id of the compute node for which to get a Remote Desktop file.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.Batch.RemoteLoginSettings}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.PoolOperations.GetRemoteLoginSettingsAsync*
  nameWithType.vb: PoolOperations.GetRemoteLoginSettingsAsync(String, String, IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.GetRemoteLoginSettingsAsync(System.String, System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: GetRemoteLoginSettingsAsync(String, String, IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.GetRemoteLoginSettings(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.GetRemoteLoginSettings(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: GetRemoteLoginSettings(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: GetRemoteLoginSettings(String, String, IEnumerable<BatchClientBehavior>)
  nameWithType: PoolOperations.GetRemoteLoginSettings(String, String, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.PoolOperations.GetRemoteLoginSettings(System.String, System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: GetRemoteLoginSettings
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 1371
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets the settings required for remote login to a compute node.\n"
  remarks: "\n<p>This is a blocking operation. For a non-blocking equivalent, see <xref href=\"Microsoft.Azure.Batch.PoolOperations.GetRemoteLoginSettingsAsync(System.String%2cSystem.String%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method can be invoked only if the pool is created with a <xref href=\"Microsoft.Azure.Batch.VirtualMachineConfiguration\" data-throw-if-not-resolved=\"false\"></xref> property. \nIf this method is invoked on pools created with <xref href=\"Microsoft.Azure.Batch.CloudServiceConfiguration\" data-throw-if-not-resolved=\"false\"></xref>, then Batch service returns 409 (Conflict). \nFor pools with a <xref href=\"Microsoft.Azure.Batch.CloudServiceConfiguration\" data-throw-if-not-resolved=\"false\"></xref> property, one of the GetRDPFileAsync/GetRDPFile methods must be used.</p>\n"
  example: []
  syntax:
    content: public RemoteLoginSettings GetRemoteLoginSettings(string poolId, string computeNodeId, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Function GetRemoteLoginSettings(poolId As String, computeNodeId As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing) As RemoteLoginSettings
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool that contains the compute node.
    - id: computeNodeId
      type: System.String
      description: The id of the compute node for which to get a Remote Desktop file.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.Azure.Batch.RemoteLoginSettings
  overload: Microsoft.Azure.Batch.PoolOperations.GetRemoteLoginSettings*
  nameWithType.vb: PoolOperations.GetRemoteLoginSettings(String, String, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.GetRemoteLoginSettings(System.String, System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: GetRemoteLoginSettings(String, String, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.PoolOperations.RebootAsync(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeRebootOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.RebootAsync(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeRebootOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: RebootAsync(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeRebootOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: RebootAsync(String, String, Nullable<ComputeNodeRebootOption>, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: PoolOperations.RebootAsync(String, String, Nullable<ComputeNodeRebootOption>, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.PoolOperations.RebootAsync(System.String, System.String, System.Nullable<Microsoft.Azure.Batch.Common.ComputeNodeRebootOption>, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: RebootAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 1397
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nReboots the specified compute node.\n"
  remarks: "\n<p>You can reboot a compute node only when it is in the <xref href=\"Microsoft.Azure.Batch.Common.ComputeNodeState.Idle\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Azure.Batch.Common.ComputeNodeState.Running\" data-throw-if-not-resolved=\"false\"></xref> state.</p>\n<p>The reboot operation runs asynchronously.</p>\n"
  example: []
  syntax:
    content: public Task RebootAsync(string poolId, string computeNodeId, ComputeNodeRebootOption? rebootOption = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function RebootAsync(poolId As String, computeNodeId As String, rebootOption As ComputeNodeRebootOption? = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool that contains the compute node.
    - id: computeNodeId
      type: System.String
      description: The id of the compute node to reboot.
    - id: rebootOption
      type: System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeRebootOption}
      description: Specifies when to reboot the node and what to do with currently running tasks. The default is <xref href="Microsoft.Azure.Batch.Common.ComputeNodeRebootOption.Requeue" data-throw-if-not-resolved="false"></xref>.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.PoolOperations.RebootAsync*
  nameWithType.vb: PoolOperations.RebootAsync(String, String, Nullable(Of ComputeNodeRebootOption), IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.RebootAsync(System.String, System.String, System.Nullable(Of Microsoft.Azure.Batch.Common.ComputeNodeRebootOption), System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: RebootAsync(String, String, Nullable(Of ComputeNodeRebootOption), IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.Reboot(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeRebootOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.Reboot(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeRebootOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: Reboot(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeRebootOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: Reboot(String, String, Nullable<ComputeNodeRebootOption>, IEnumerable<BatchClientBehavior>)
  nameWithType: PoolOperations.Reboot(String, String, Nullable<ComputeNodeRebootOption>, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.PoolOperations.Reboot(System.String, System.String, System.Nullable<Microsoft.Azure.Batch.Common.ComputeNodeRebootOption>, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Reboot
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 1427
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nReboots the specified compute node.\n"
  remarks: "\n<p>You can reboot a compute node only when it is in the <xref href=\"Microsoft.Azure.Batch.Common.ComputeNodeState.Idle\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Azure.Batch.Common.ComputeNodeState.Running\" data-throw-if-not-resolved=\"false\"></xref> state.</p>\n<p>This is a blocking operation. For a non-blocking equivalent, see <xref href=\"Microsoft.Azure.Batch.PoolOperations.RebootAsync(System.String%2cSystem.String%2cSystem.Nullable%7bMicrosoft.Azure.Batch.Common.ComputeNodeRebootOption%7d%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public void Reboot(string poolId, string computeNodeId, ComputeNodeRebootOption? rebootOption = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub Reboot(poolId As String, computeNodeId As String, rebootOption As ComputeNodeRebootOption? = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool that contains the compute node.
    - id: computeNodeId
      type: System.String
      description: The id of the compute node to reboot.
    - id: rebootOption
      type: System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeRebootOption}
      description: Specifies when to reboot the node and what to do with currently running tasks. The default is <xref href="Microsoft.Azure.Batch.Common.ComputeNodeRebootOption.Requeue" data-throw-if-not-resolved="false"></xref>.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.PoolOperations.Reboot*
  nameWithType.vb: PoolOperations.Reboot(String, String, Nullable(Of ComputeNodeRebootOption), IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.Reboot(System.String, System.String, System.Nullable(Of Microsoft.Azure.Batch.Common.ComputeNodeRebootOption), System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: Reboot(String, String, Nullable(Of ComputeNodeRebootOption), IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.PoolOperations.ReimageAsync(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeReimageOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.ReimageAsync(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeReimageOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: ReimageAsync(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeReimageOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: ReimageAsync(String, String, Nullable<ComputeNodeReimageOption>, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: PoolOperations.ReimageAsync(String, String, Nullable<ComputeNodeReimageOption>, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.PoolOperations.ReimageAsync(System.String, System.String, System.Nullable<Microsoft.Azure.Batch.Common.ComputeNodeReimageOption>, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ReimageAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 1449
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nReinstalls the operating system on the specified compute node.\n"
  remarks: "\n<p>You can reimage a compute node only when it is in the <xref href=\"Microsoft.Azure.Batch.Common.ComputeNodeState.Idle\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Azure.Batch.Common.ComputeNodeState.Running\" data-throw-if-not-resolved=\"false\"></xref> state.</p>\n<p>The reimage operation runs asynchronously.</p>\n"
  example: []
  syntax:
    content: public Task ReimageAsync(string poolId, string computeNodeId, ComputeNodeReimageOption? reimageOption = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function ReimageAsync(poolId As String, computeNodeId As String, reimageOption As ComputeNodeReimageOption? = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool that contains the compute node.
    - id: computeNodeId
      type: System.String
      description: The id of the compute node to reimage.
    - id: reimageOption
      type: System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeReimageOption}
      description: Specifies when to reimage the node and what to do with currently running tasks. The default is <xref href="Microsoft.Azure.Batch.Common.ComputeNodeReimageOption.Requeue" data-throw-if-not-resolved="false"></xref>.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.PoolOperations.ReimageAsync*
  nameWithType.vb: PoolOperations.ReimageAsync(String, String, Nullable(Of ComputeNodeReimageOption), IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.ReimageAsync(System.String, System.String, System.Nullable(Of Microsoft.Azure.Batch.Common.ComputeNodeReimageOption), System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: ReimageAsync(String, String, Nullable(Of ComputeNodeReimageOption), IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.Reimage(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeReimageOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.Reimage(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeReimageOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: Reimage(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeReimageOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: Reimage(String, String, Nullable<ComputeNodeReimageOption>, IEnumerable<BatchClientBehavior>)
  nameWithType: PoolOperations.Reimage(String, String, Nullable<ComputeNodeReimageOption>, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.PoolOperations.Reimage(System.String, System.String, System.Nullable<Microsoft.Azure.Batch.Common.ComputeNodeReimageOption>, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Reimage
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 1475
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nReinstalls the operating system on the specified compute node.\n"
  remarks: "\n<p>You can reimage a compute node only when it is in the <xref href=\"Microsoft.Azure.Batch.Common.ComputeNodeState.Idle\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Azure.Batch.Common.ComputeNodeState.Running\" data-throw-if-not-resolved=\"false\"></xref> state.</p>\n<p>This is a blocking operation. For a non-blocking equivalent, see <xref href=\"Microsoft.Azure.Batch.PoolOperations.ReimageAsync(System.String%2cSystem.String%2cSystem.Nullable%7bMicrosoft.Azure.Batch.Common.ComputeNodeReimageOption%7d%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public void Reimage(string poolId, string computeNodeId, ComputeNodeReimageOption? reimageOption = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub Reimage(poolId As String, computeNodeId As String, reimageOption As ComputeNodeReimageOption? = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool that contains the compute node.
    - id: computeNodeId
      type: System.String
      description: The id of the compute node to reimage.
    - id: reimageOption
      type: System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeReimageOption}
      description: Specifies when to reimage the node and what to do with currently running tasks. The default is <xref href="Microsoft.Azure.Batch.Common.ComputeNodeReimageOption.Requeue" data-throw-if-not-resolved="false"></xref>.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.PoolOperations.Reimage*
  nameWithType.vb: PoolOperations.Reimage(String, String, Nullable(Of ComputeNodeReimageOption), IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.Reimage(System.String, System.String, System.Nullable(Of Microsoft.Azure.Batch.Common.ComputeNodeReimageOption), System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: Reimage(String, String, Nullable(Of ComputeNodeReimageOption), IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.PoolOperations.ChangeOSVersionAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.ChangeOSVersionAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: ChangeOSVersionAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: ChangeOSVersionAsync(String, String, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: PoolOperations.ChangeOSVersionAsync(String, String, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.PoolOperations.ChangeOSVersionAsync(System.String, System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ChangeOSVersionAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 1499
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nChanges the operating system version of the specified pool.\n"
  remarks: "\n<p>During the change OS version operation, the Batch service traverses the nodes of the pool, changing the OS version of compute nodes.  When a compute node is chosen, any tasks running on that node are removed from the node and requeued to be rerun later (or on a different compute node).  The node will be unavailable until the version change is complete.</p>\n<p>The operation will result in temporarily reduced pool capacity as nodes are taken out of service to have their OS version changed. Although the Batch service tries to avoid changing all compute nodes at the same time, it does not guarantee to do this (particularly on small pools); therefore, the operation may result in the pool being temporarily unavailable to run tasks.</p>\n<p>When you request an OS version change, the pool state changes to <xref href=\"Microsoft.Azure.Batch.Common.PoolState.Upgrading\" data-throw-if-not-resolved=\"false\"></xref>.  When all compute nodes have finished changing version, the pool state returns to <xref href=\"Microsoft.Azure.Batch.Common.PoolState.Active\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>While the version change is in progress, the pool's <xref href=\"Microsoft.Azure.Batch.CloudServiceConfiguration.CurrentOSVersion\" data-throw-if-not-resolved=\"false\"></xref> reflects the OS version that nodes are changing from, and <xref href=\"Microsoft.Azure.Batch.CloudServiceConfiguration.TargetOSVersion\" data-throw-if-not-resolved=\"false\"></xref> reflects the OS version that nodes are changing to. Once the change is complete, CurrentOSVersion is updated to reflect the OS version now running on all nodes.</p>\n<p>The change version operation runs asynchronously.</p>\n"
  example: []
  syntax:
    content: public Task ChangeOSVersionAsync(string poolId, string targetOSVersion, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function ChangeOSVersionAsync(poolId As String, targetOSVersion As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool.
    - id: targetOSVersion
      type: System.String
      description: The Azure Guest OS version to be installed on the virtual machines in the pool.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.PoolOperations.ChangeOSVersionAsync*
  nameWithType.vb: PoolOperations.ChangeOSVersionAsync(String, String, IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.ChangeOSVersionAsync(System.String, System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: ChangeOSVersionAsync(String, String, IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.ChangeOSVersion(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.ChangeOSVersion(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: ChangeOSVersion(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: ChangeOSVersion(String, String, IEnumerable<BatchClientBehavior>)
  nameWithType: PoolOperations.ChangeOSVersion(String, String, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.PoolOperations.ChangeOSVersion(System.String, System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ChangeOSVersion
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 1530
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nChanges the operating system version of the specified pool.\n"
  remarks: "\n<p>During the change OS version operation, the Batch service traverses the nodes of the pool, changing the OS version of compute nodes.  When a compute node is chosen, any tasks running on that node are removed from the node and requeued to be rerun later (or on a different compute node).  The node will be unavailable until the version change is complete.</p>\n<p>The operation will result in temporarily reduced pool capacity as nodes are taken out of service to have their OS version changed. Although the Batch service tries to avoid changing all compute nodes at the same time, it does not guarantee to do this (particularly on small pools); therefore, the operation may result in the pool being temporarily unavailable to run tasks.</p>\n<p>When you request an OS version change, the pool state changes to <xref href=\"Microsoft.Azure.Batch.Common.PoolState.Upgrading\" data-throw-if-not-resolved=\"false\"></xref>.  When all compute nodes have finished changing version, the pool state returns to <xref href=\"Microsoft.Azure.Batch.Common.PoolState.Active\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>While the version change is in progress, the pool's <xref href=\"Microsoft.Azure.Batch.CloudServiceConfiguration.CurrentOSVersion\" data-throw-if-not-resolved=\"false\"></xref> reflects the OS version that nodes are changing from, and <xref href=\"Microsoft.Azure.Batch.CloudServiceConfiguration.TargetOSVersion\" data-throw-if-not-resolved=\"false\"></xref> reflects the OS version that nodes are changing to. Once the change is complete, CurrentOSVersion is updated to reflect the OS version now running on all nodes.</p>\n<p>This is a blocking operation. For a non-blocking equivalent, see <xref href=\"Microsoft.Azure.Batch.PoolOperations.ChangeOSVersionAsync(System.String%2cSystem.String%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public void ChangeOSVersion(string poolId, string targetOSVersion, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub ChangeOSVersion(poolId As String, targetOSVersion As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool.
    - id: targetOSVersion
      type: System.String
      description: The Azure Guest OS version to be installed on the virtual machines in the pool.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.PoolOperations.ChangeOSVersion*
  nameWithType.vb: PoolOperations.ChangeOSVersion(String, String, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.ChangeOSVersion(System.String, System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: ChangeOSVersion(String, String, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.PoolOperations.GetNodeFileAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.GetNodeFileAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: GetNodeFileAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: GetNodeFileAsync(String, String, String, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: PoolOperations.GetNodeFileAsync(String, String, String, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.PoolOperations.GetNodeFileAsync(System.String, System.String, System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: GetNodeFileAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 1571
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets information about a file on a compute node.\n"
  remarks: The get file operation runs asynchronously.
  example: []
  syntax:
    content: public Task<NodeFile> GetNodeFileAsync(string poolId, string computeNodeId, string fileName, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function GetNodeFileAsync(poolId As String, computeNodeId As String, fileName As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of NodeFile)
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool that contains the compute node.
    - id: computeNodeId
      type: System.String
      description: The id of the compute node.
    - id: fileName
      type: System.String
      description: The name of the file to retrieve.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.Batch.NodeFile}
      description: A <xref href="Microsoft.Azure.Batch.NodeFile" data-throw-if-not-resolved="false"></xref> containing information about the file, and which can be used to download the file (see <xref href="Microsoft.Azure.Batch.NodeFile.CopyToStreamAsync(System.IO.Stream%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>).
  overload: Microsoft.Azure.Batch.PoolOperations.GetNodeFileAsync*
  nameWithType.vb: PoolOperations.GetNodeFileAsync(String, String, String, IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.GetNodeFileAsync(System.String, System.String, System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: GetNodeFileAsync(String, String, String, IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.GetNodeFile(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.GetNodeFile(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: GetNodeFile(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: GetNodeFile(String, String, String, IEnumerable<BatchClientBehavior>)
  nameWithType: PoolOperations.GetNodeFile(String, String, String, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.PoolOperations.GetNodeFile(System.String, System.String, System.String, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: GetNodeFile
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 1600
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets information about a file on a compute node.\n"
  remarks: This is a blocking operation. For a non-blocking equivalent, see <xref href="Microsoft.Azure.Batch.PoolOperations.GetNodeFileAsync(System.String%2cSystem.String%2cSystem.String%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public NodeFile GetNodeFile(string poolId, string computeNodeId, string fileName, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Function GetNodeFile(poolId As String, computeNodeId As String, fileName As String, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing) As NodeFile
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool that contains the compute node.
    - id: computeNodeId
      type: System.String
      description: The id of the compute node.
    - id: fileName
      type: System.String
      description: The name of the file to retrieve.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.Azure.Batch.NodeFile
      description: A <xref href="Microsoft.Azure.Batch.NodeFile" data-throw-if-not-resolved="false"></xref> containing information about the file, and which can be used to download the file (see <xref href="Microsoft.Azure.Batch.NodeFile.CopyToStream(System.IO.Stream%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d)" data-throw-if-not-resolved="false"></xref>).
  overload: Microsoft.Azure.Batch.PoolOperations.GetNodeFile*
  nameWithType.vb: PoolOperations.GetNodeFile(String, String, String, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.GetNodeFile(System.String, System.String, System.String, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: GetNodeFile(String, String, String, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.PoolOperations.ListNodeFiles(System.String,System.String,System.Nullable{System.Boolean},Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.ListNodeFiles(System.String,System.String,System.Nullable{System.Boolean},Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: ListNodeFiles(System.String,System.String,System.Nullable{System.Boolean},Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: ListNodeFiles(String, String, Nullable<Boolean>, DetailLevel, IEnumerable<BatchClientBehavior>)
  nameWithType: PoolOperations.ListNodeFiles(String, String, Nullable<Boolean>, DetailLevel, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.PoolOperations.ListNodeFiles(System.String, System.String, System.Nullable<System.Boolean>, Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ListNodeFiles
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 1642
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nEnumerates files on the specified compute node.\n"
  remarks: >-
    This method returns immediately; the file data is retrieved from the Batch service only when the collection is enumerated.

    Retrieval is non-atomic; file data is retrieved in pages during enumeration of the collection.
  example: []
  syntax:
    content: public IPagedEnumerable<NodeFile> ListNodeFiles(string poolId, string computeNodeId, bool ? recursive = null, DetailLevel detailLevel = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Function ListNodeFiles(poolId As String, computeNodeId As String, recursive As Boolean? = Nothing, detailLevel As DetailLevel = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing) As IPagedEnumerable(Of NodeFile)
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool that contains the compute node.
    - id: computeNodeId
      type: System.String
      description: The id of the compute node.
    - id: recursive
      type: System.Nullable{System.Boolean}
      description: If true, recursively enumerates all files on the compute node. If false, enumerates only the files in the compute node root directory.
    - id: detailLevel
      type: Microsoft.Azure.Batch.DetailLevel
      description: A <xref href="Microsoft.Azure.Batch.DetailLevel" data-throw-if-not-resolved="false"></xref> used for filtering the list and for controlling which properties are retrieved from the service.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref> and <span class="paramref">detailLevel</span>.
    return:
      type: Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.NodeFile}
      description: An <xref href="Microsoft.Azure.Batch.IPagedEnumerable%601" data-throw-if-not-resolved="false"></xref> that can be used to enumerate files asynchronously or synchronously.
  overload: Microsoft.Azure.Batch.PoolOperations.ListNodeFiles*
  nameWithType.vb: PoolOperations.ListNodeFiles(String, String, Nullable(Of Boolean), DetailLevel, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.ListNodeFiles(System.String, System.String, System.Nullable(Of System.Boolean), Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: ListNodeFiles(String, String, Nullable(Of Boolean), DetailLevel, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.PoolOperations.DeleteNodeFileAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.DeleteNodeFileAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: DeleteNodeFileAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: DeleteNodeFileAsync(String, String, String, Nullable<Boolean>, IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: PoolOperations.DeleteNodeFileAsync(String, String, String, Nullable<Boolean>, IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.PoolOperations.DeleteNodeFileAsync(System.String, System.String, System.String, System.Nullable<System.Boolean>, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DeleteNodeFileAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 1678
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nDeletes the specified file from the specified compute node.\n"
  remarks: The delete operation runs asynchronously.
  example: []
  syntax:
    content: public Task DeleteNodeFileAsync(string poolId, string computeNodeId, string fileName, bool ? recursive = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function DeleteNodeFileAsync(poolId As String, computeNodeId As String, fileName As String, recursive As Boolean? = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool that contains the compute node.
    - id: computeNodeId
      type: System.String
      description: The id of the compute node.
    - id: fileName
      type: System.String
      description: The name of the file to delete.
    - id: recursive
      type: System.Nullable{System.Boolean}
      description: "\nIf the file-path parameter represents a directory instead of a file, you can set the optional \nrecursive parameter to true to delete the directory and all of the files and subdirectories in it. If recursive is false \nthen the directory must be empty or deletion will fail.\n"
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.PoolOperations.DeleteNodeFileAsync*
  nameWithType.vb: PoolOperations.DeleteNodeFileAsync(String, String, String, Nullable(Of Boolean), IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.DeleteNodeFileAsync(System.String, System.String, System.String, System.Nullable(Of System.Boolean), System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: DeleteNodeFileAsync(String, String, String, Nullable(Of Boolean), IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.DeleteNodeFile(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.DeleteNodeFile(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: DeleteNodeFile(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: DeleteNodeFile(String, String, String, Nullable<Boolean>, IEnumerable<BatchClientBehavior>)
  nameWithType: PoolOperations.DeleteNodeFile(String, String, String, Nullable<Boolean>, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.PoolOperations.DeleteNodeFile(System.String, System.String, System.String, System.Nullable<System.Boolean>, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DeleteNodeFile
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 1713
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nDeletes the specified file from the specified compute node.\n"
  remarks: This is a blocking operation.  For a non-blocking equivalent, see <xref href="Microsoft.Azure.Batch.PoolOperations.DeleteNodeFileAsync(System.String%2cSystem.String%2cSystem.String%2cSystem.Nullable%7bSystem.Boolean%7d%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public void DeleteNodeFile(string poolId, string computeNodeId, string fileName, bool ? recursive = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub DeleteNodeFile(poolId As String, computeNodeId As String, fileName As String, recursive As Boolean? = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: poolId
      type: System.String
      description: The id of the pool that contains the compute node.
    - id: computeNodeId
      type: System.String
      description: The id of the compute node.
    - id: fileName
      type: System.String
      description: The name of the file to delete.
    - id: recursive
      type: System.Nullable{System.Boolean}
      description: "\nIf the file-path parameter represents a directory instead of a file, you can set the optional \nrecursive parameter to true to delete the directory and all of the files and subdirectories in it. If recursive is false \nthen the directory must be empty or deletion will fail.\n"
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.PoolOperations.DeleteNodeFile*
  nameWithType.vb: PoolOperations.DeleteNodeFile(String, String, String, Nullable(Of Boolean), IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.DeleteNodeFile(System.String, System.String, System.String, System.Nullable(Of System.Boolean), System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: DeleteNodeFile(String, String, String, Nullable(Of Boolean), IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.PoolOperations.GetAllPoolsLifetimeStatisticsAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.GetAllPoolsLifetimeStatisticsAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  id: GetAllPoolsLifetimeStatisticsAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: GetAllPoolsLifetimeStatisticsAsync(IEnumerable<BatchClientBehavior>, CancellationToken)
  nameWithType: PoolOperations.GetAllPoolsLifetimeStatisticsAsync(IEnumerable<BatchClientBehavior>, CancellationToken)
  fullName: Microsoft.Azure.Batch.PoolOperations.GetAllPoolsLifetimeStatisticsAsync(System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: GetAllPoolsLifetimeStatisticsAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 1735
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets lifetime summary statistics for all of the pools in the current account.  \nStatistics are aggregated across all pools that have ever existed in the account, from account creation to the last update time of the statistics.\n"
  remarks: The get statistics operation runs asynchronously.
  example: []
  syntax:
    content: public Task<PoolStatistics> GetAllPoolsLifetimeStatisticsAsync(IEnumerable<BatchClientBehavior> additionalBehaviors = null, CancellationToken cancellationToken = null)
    content.vb: Public Function GetAllPoolsLifetimeStatisticsAsync(additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of PoolStatistics)
    parameters:
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.Batch.PoolStatistics}
      description: The aggregated pool statistics.
  overload: Microsoft.Azure.Batch.PoolOperations.GetAllPoolsLifetimeStatisticsAsync*
  nameWithType.vb: PoolOperations.GetAllPoolsLifetimeStatisticsAsync(IEnumerable(Of BatchClientBehavior), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.GetAllPoolsLifetimeStatisticsAsync(System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior), System.Threading.CancellationToken)
  name.vb: GetAllPoolsLifetimeStatisticsAsync(IEnumerable(Of BatchClientBehavior), CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.GetAllPoolsLifetimeStatistics(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.GetAllPoolsLifetimeStatistics(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: GetAllPoolsLifetimeStatistics(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: GetAllPoolsLifetimeStatistics(IEnumerable<BatchClientBehavior>)
  nameWithType: PoolOperations.GetAllPoolsLifetimeStatistics(IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.PoolOperations.GetAllPoolsLifetimeStatistics(System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: GetAllPoolsLifetimeStatistics
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 1757
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets lifetime summary statistics for all of the pools in the current account.  \nStatistics are aggregated across all pools that have ever existed in the account, from account creation to the last update time of the statistics.\n"
  remarks: This is a blocking operation. For a non-blocking equivalent, see <xref href="Microsoft.Azure.Batch.PoolOperations.GetAllPoolsLifetimeStatisticsAsync(System.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d%2cSystem.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public PoolStatistics GetAllPoolsLifetimeStatistics(IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Function GetAllPoolsLifetimeStatistics(additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing) As PoolStatistics
    parameters:
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.Azure.Batch.PoolStatistics
      description: The aggregated pool statistics.
  overload: Microsoft.Azure.Batch.PoolOperations.GetAllPoolsLifetimeStatistics*
  nameWithType.vb: PoolOperations.GetAllPoolsLifetimeStatistics(IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.GetAllPoolsLifetimeStatistics(System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: GetAllPoolsLifetimeStatistics(IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.PoolOperations.ListPoolUsageMetrics(System.Nullable{System.DateTime},System.Nullable{System.DateTime},Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.ListPoolUsageMetrics(System.Nullable{System.DateTime},System.Nullable{System.DateTime},Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: ListPoolUsageMetrics(System.Nullable{System.DateTime},System.Nullable{System.DateTime},Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: ListPoolUsageMetrics(Nullable<DateTime>, Nullable<DateTime>, DetailLevel, IEnumerable<BatchClientBehavior>)
  nameWithType: PoolOperations.ListPoolUsageMetrics(Nullable<DateTime>, Nullable<DateTime>, DetailLevel, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.PoolOperations.ListPoolUsageMetrics(System.Nullable<System.DateTime>, System.Nullable<System.DateTime>, Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ListPoolUsageMetrics
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 1777
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nEnumerates pool usage metrics.\n"
  remarks: >-
    This method returns immediately; the metrics data is retrieved from the Batch service only when the collection is enumerated.

    Retrieval is non-atomic; metrics data is retrieved in pages during enumeration of the collection.
  example: []
  syntax:
    content: public IPagedEnumerable<PoolUsageMetrics> ListPoolUsageMetrics(DateTime? startTime = null, DateTime? endTime = null, DetailLevel detailLevel = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Function ListPoolUsageMetrics(startTime As Date? = Nothing, endTime As Date? = Nothing, detailLevel As DetailLevel = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing) As IPagedEnumerable(Of PoolUsageMetrics)
    parameters:
    - id: startTime
      type: System.Nullable{System.DateTime}
      description: The start time of the aggregation interval covered by this entry.
    - id: endTime
      type: System.Nullable{System.DateTime}
      description: The end time of the aggregation interval for this entry.
    - id: detailLevel
      type: Microsoft.Azure.Batch.DetailLevel
      description: A <xref href="Microsoft.Azure.Batch.DetailLevel" data-throw-if-not-resolved="false"></xref> used for filtering the list and for controlling which properties are retrieved from the service.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref> and <span class="paramref">detailLevel</span>.
    return:
      type: Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.PoolUsageMetrics}
      description: An <xref href="Microsoft.Azure.Batch.IPagedEnumerable%601" data-throw-if-not-resolved="false"></xref> that can be used to enumerate metrics asynchronously or synchronously.
  overload: Microsoft.Azure.Batch.PoolOperations.ListPoolUsageMetrics*
  nameWithType.vb: PoolOperations.ListPoolUsageMetrics(Nullable(Of DateTime), Nullable(Of DateTime), DetailLevel, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.ListPoolUsageMetrics(System.Nullable(Of System.DateTime), System.Nullable(Of System.DateTime), Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: ListPoolUsageMetrics(Nullable(Of DateTime), Nullable(Of DateTime), DetailLevel, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.PoolOperations.ListNodeAgentSkus(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.ListNodeAgentSkus(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: ListNodeAgentSkus(Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.PoolOperations
  langs:
  - csharp
  - vb
  name: ListNodeAgentSkus(DetailLevel, IEnumerable<BatchClientBehavior>)
  nameWithType: PoolOperations.ListNodeAgentSkus(DetailLevel, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.PoolOperations.ListNodeAgentSkus(Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PoolOperations.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ListNodeAgentSkus
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PoolOperations.cs
    startLine: 1803
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nEnumerates the node agent Sku values supported by Batch Service. \n"
  example: []
  syntax:
    content: public IPagedEnumerable<NodeAgentSku> ListNodeAgentSkus(DetailLevel detailLevel = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Function ListNodeAgentSkus(detailLevel As DetailLevel = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing) As IPagedEnumerable(Of NodeAgentSku)
    parameters:
    - id: detailLevel
      type: Microsoft.Azure.Batch.DetailLevel
      description: A <xref href="Microsoft.Azure.Batch.DetailLevel" data-throw-if-not-resolved="false"></xref> used for filtering the list and for controlling which properties are retrieved from the service.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.PoolOperations.CustomBehaviors" data-throw-if-not-resolved="false"></xref> and <span class="paramref">detailLevel</span>.
    return:
      type: Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.NodeAgentSku}
      description: An <xref href="Microsoft.Azure.Batch.IPagedEnumerable%601" data-throw-if-not-resolved="false"></xref> that can be used to enumerate node agent sku values asynchronously or synchronously.
  overload: Microsoft.Azure.Batch.PoolOperations.ListNodeAgentSkus*
  nameWithType.vb: PoolOperations.ListNodeAgentSkus(DetailLevel, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.PoolOperations.ListNodeAgentSkus(Microsoft.Azure.Batch.DetailLevel, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: ListNodeAgentSkus(DetailLevel, IEnumerable(Of BatchClientBehavior))
references:
- uid: Microsoft.Azure.Batch
  commentId: N:Microsoft.Azure.Batch
  isExternal: false
  name: Microsoft.Azure.Batch
  nameWithType: Microsoft.Azure.Batch
  fullName: Microsoft.Azure.Batch
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Azure.Batch.IInheritedBehaviors
  commentId: T:Microsoft.Azure.Batch.IInheritedBehaviors
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: IInheritedBehaviors
  nameWithType: IInheritedBehaviors
  fullName: Microsoft.Azure.Batch.IInheritedBehaviors
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Batch.PoolOperations
  commentId: T:Microsoft.Azure.Batch.PoolOperations
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: PoolOperations
  nameWithType: PoolOperations
  fullName: Microsoft.Azure.Batch.PoolOperations
- uid: Microsoft.Azure.Batch.PoolOperations.CustomBehaviors*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.CustomBehaviors
  isExternal: false
  name: CustomBehaviors
  nameWithType: PoolOperations.CustomBehaviors
  fullName: Microsoft.Azure.Batch.PoolOperations.CustomBehaviors
- uid: Microsoft.Azure.Batch.IInheritedBehaviors.CustomBehaviors
  commentId: P:Microsoft.Azure.Batch.IInheritedBehaviors.CustomBehaviors
  parent: Microsoft.Azure.Batch.IInheritedBehaviors
  isExternal: false
  name: CustomBehaviors
  nameWithType: IInheritedBehaviors.CustomBehaviors
  fullName: Microsoft.Azure.Batch.IInheritedBehaviors.CustomBehaviors
- uid: System.Collections.Generic.IList{Microsoft.Azure.Batch.BatchClientBehavior}
  commentId: T:System.Collections.Generic.IList{Microsoft.Azure.Batch.BatchClientBehavior}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<BatchClientBehavior>
  nameWithType: IList<BatchClientBehavior>
  fullName: System.Collections.Generic.IList<Microsoft.Azure.Batch.BatchClientBehavior>
  nameWithType.vb: IList(Of BatchClientBehavior)
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.Azure.Batch.BatchClientBehavior)
  name.vb: IList(Of BatchClientBehavior)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.BatchClientBehavior
    name: BatchClientBehavior
    nameWithType: BatchClientBehavior
    fullName: Microsoft.Azure.Batch.BatchClientBehavior
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.BatchClientBehavior
    name: BatchClientBehavior
    nameWithType: BatchClientBehavior
    fullName: Microsoft.Azure.Batch.BatchClientBehavior
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Azure.Batch.CloudPool
  commentId: T:Microsoft.Azure.Batch.CloudPool
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: CloudPool
  nameWithType: CloudPool
  fullName: Microsoft.Azure.Batch.CloudPool
- uid: Microsoft.Azure.Batch.DetailLevel
  commentId: T:Microsoft.Azure.Batch.DetailLevel
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: DetailLevel
  nameWithType: DetailLevel
  fullName: Microsoft.Azure.Batch.DetailLevel
- uid: Microsoft.Azure.Batch.BatchClientBehavior
  commentId: T:Microsoft.Azure.Batch.BatchClientBehavior
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: BatchClientBehavior
  nameWithType: BatchClientBehavior
  fullName: Microsoft.Azure.Batch.BatchClientBehavior
- uid: Microsoft.Azure.Batch.PoolOperations.CustomBehaviors
  commentId: P:Microsoft.Azure.Batch.PoolOperations.CustomBehaviors
- uid: Microsoft.Azure.Batch.IPagedEnumerable`1
  commentId: T:Microsoft.Azure.Batch.IPagedEnumerable`1
  isExternal: false
  name: IPagedEnumerable<T>
  nameWithType: IPagedEnumerable<T>
  fullName: Microsoft.Azure.Batch.IPagedEnumerable<T>
  nameWithType.vb: IPagedEnumerable(Of T)
  fullname.vb: Microsoft.Azure.Batch.IPagedEnumerable(Of T)
  name.vb: IPagedEnumerable(Of T)
  spec.csharp:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.PoolOperations.ListPools*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.ListPools
  isExternal: false
  name: ListPools
  nameWithType: PoolOperations.ListPools
  fullName: Microsoft.Azure.Batch.PoolOperations.ListPools
- uid: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<BatchClientBehavior>
  nameWithType: IEnumerable<BatchClientBehavior>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>
  nameWithType.vb: IEnumerable(Of BatchClientBehavior)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior)
  name.vb: IEnumerable(Of BatchClientBehavior)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.BatchClientBehavior
    name: BatchClientBehavior
    nameWithType: BatchClientBehavior
    fullName: Microsoft.Azure.Batch.BatchClientBehavior
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.BatchClientBehavior
    name: BatchClientBehavior
    nameWithType: BatchClientBehavior
    fullName: Microsoft.Azure.Batch.BatchClientBehavior
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.CloudPool}
  commentId: T:Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.CloudPool}
  parent: Microsoft.Azure.Batch
  definition: Microsoft.Azure.Batch.IPagedEnumerable`1
  name: IPagedEnumerable<CloudPool>
  nameWithType: IPagedEnumerable<CloudPool>
  fullName: Microsoft.Azure.Batch.IPagedEnumerable<Microsoft.Azure.Batch.CloudPool>
  nameWithType.vb: IPagedEnumerable(Of CloudPool)
  fullname.vb: Microsoft.Azure.Batch.IPagedEnumerable(Of Microsoft.Azure.Batch.CloudPool)
  name.vb: IPagedEnumerable(Of CloudPool)
  spec.csharp:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.CloudPool
    name: CloudPool
    nameWithType: CloudPool
    fullName: Microsoft.Azure.Batch.CloudPool
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.CloudPool
    name: CloudPool
    nameWithType: CloudPool
    fullName: Microsoft.Azure.Batch.CloudPool
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: Microsoft.Azure.Batch.PoolOperations.GetPoolAsync*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.GetPoolAsync
  isExternal: false
  name: GetPoolAsync
  nameWithType: PoolOperations.GetPoolAsync
  fullName: Microsoft.Azure.Batch.PoolOperations.GetPoolAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{Microsoft.Azure.Batch.CloudPool}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.Batch.CloudPool}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<CloudPool>
  nameWithType: Task<CloudPool>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.Batch.CloudPool>
  nameWithType.vb: Task(Of CloudPool)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.Batch.CloudPool)
  name.vb: Task(Of CloudPool)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.CloudPool
    name: CloudPool
    nameWithType: CloudPool
    fullName: Microsoft.Azure.Batch.CloudPool
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.CloudPool
    name: CloudPool
    nameWithType: CloudPool
    fullName: Microsoft.Azure.Batch.CloudPool
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.Azure.Batch.PoolOperations.GetPoolAsync(System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.GetPoolAsync(System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.GetPool*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.GetPool
  isExternal: false
  name: GetPool
  nameWithType: PoolOperations.GetPool
  fullName: Microsoft.Azure.Batch.PoolOperations.GetPool
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.Azure.Batch.Common.PoolState.Deleting
  commentId: F:Microsoft.Azure.Batch.Common.PoolState.Deleting
- uid: Microsoft.Azure.Batch.PoolOperations.DeletePoolAsync*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.DeletePoolAsync
  isExternal: false
  name: DeletePoolAsync
  nameWithType: PoolOperations.DeletePoolAsync
  fullName: Microsoft.Azure.Batch.PoolOperations.DeletePoolAsync
- uid: Microsoft.Azure.Batch.PoolOperations.DeletePoolAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.DeletePoolAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.DeletePool*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.DeletePool
  isExternal: false
  name: DeletePool
  nameWithType: PoolOperations.DeletePool
  fullName: Microsoft.Azure.Batch.PoolOperations.DeletePool
- uid: Microsoft.Azure.Batch.CloudPool.CommitAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.CloudPool.CommitAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.CreatePool*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.CreatePool
  isExternal: false
  name: CreatePool
  nameWithType: PoolOperations.CreatePool
  fullName: Microsoft.Azure.Batch.PoolOperations.CreatePool
- uid: Microsoft.Azure.Batch.CloudServiceConfiguration
  commentId: T:Microsoft.Azure.Batch.CloudServiceConfiguration
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: CloudServiceConfiguration
  nameWithType: CloudServiceConfiguration
  fullName: Microsoft.Azure.Batch.CloudServiceConfiguration
- uid: Microsoft.Azure.Batch.CloudPool.AutoScaleEnabled
  commentId: P:Microsoft.Azure.Batch.CloudPool.AutoScaleEnabled
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullname.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.VirtualMachineConfiguration
  commentId: T:Microsoft.Azure.Batch.VirtualMachineConfiguration
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: VirtualMachineConfiguration
  nameWithType: VirtualMachineConfiguration
  fullName: Microsoft.Azure.Batch.VirtualMachineConfiguration
- uid: Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption.Requeue
  commentId: F:Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption.Requeue
- uid: Microsoft.Azure.Batch.Common.AllocationState.Resizing
  commentId: F:Microsoft.Azure.Batch.Common.AllocationState.Resizing
- uid: Microsoft.Azure.Batch.Common.AllocationState.Steady
  commentId: F:Microsoft.Azure.Batch.Common.AllocationState.Steady
- uid: Microsoft.Azure.Batch.CloudPool.AllocationState
  commentId: P:Microsoft.Azure.Batch.CloudPool.AllocationState
- uid: Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.ResizePoolAsync*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.ResizePoolAsync
  isExternal: false
  name: ResizePoolAsync
  nameWithType: PoolOperations.ResizePoolAsync
  fullName: Microsoft.Azure.Batch.PoolOperations.ResizePoolAsync
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Nullable{System.TimeSpan}
  commentId: T:System.Nullable{System.TimeSpan}
  parent: System
  definition: System.Nullable`1
  name: Nullable<TimeSpan>
  nameWithType: Nullable<TimeSpan>
  fullName: System.Nullable<System.TimeSpan>
  nameWithType.vb: Nullable(Of TimeSpan)
  fullname.vb: System.Nullable(Of System.TimeSpan)
  name.vb: Nullable(Of TimeSpan)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption}
  commentId: T:System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption}
  parent: System
  definition: System.Nullable`1
  name: Nullable<ComputeNodeDeallocationOption>
  nameWithType: Nullable<ComputeNodeDeallocationOption>
  fullName: System.Nullable<Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption>
  nameWithType.vb: Nullable(Of ComputeNodeDeallocationOption)
  fullname.vb: System.Nullable(Of Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption)
  name.vb: Nullable(Of ComputeNodeDeallocationOption)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption
    name: ComputeNodeDeallocationOption
    nameWithType: ComputeNodeDeallocationOption
    fullName: Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption
    name: ComputeNodeDeallocationOption
    nameWithType: ComputeNodeDeallocationOption
    fullName: Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.PoolOperations.RemoveFromPool(System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.RemoveFromPool(System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
- uid: Microsoft.Azure.Batch.PoolOperations.ResizePoolAsync(System.String,System.Int32,System.Nullable{System.TimeSpan},System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.ResizePoolAsync(System.String,System.Int32,System.Nullable{System.TimeSpan},System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.ResizePool*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.ResizePool
  isExternal: false
  name: ResizePool
  nameWithType: PoolOperations.ResizePool
  fullName: Microsoft.Azure.Batch.PoolOperations.ResizePool
- uid: Microsoft.Azure.Batch.Common.AllocationState.Stopping
  commentId: F:Microsoft.Azure.Batch.Common.AllocationState.Stopping
- uid: Microsoft.Azure.Batch.PoolOperations.StopResizePoolAsync*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.StopResizePoolAsync
  isExternal: false
  name: StopResizePoolAsync
  nameWithType: PoolOperations.StopResizePoolAsync
  fullName: Microsoft.Azure.Batch.PoolOperations.StopResizePoolAsync
- uid: Microsoft.Azure.Batch.PoolOperations.StopResizePoolAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.StopResizePoolAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.StopResizePool*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.StopResizePool
  isExternal: false
  name: StopResizePool
  nameWithType: PoolOperations.StopResizePool
  fullName: Microsoft.Azure.Batch.PoolOperations.StopResizePool
- uid: Microsoft.Azure.Batch.ComputeNode
  commentId: T:Microsoft.Azure.Batch.ComputeNode
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: ComputeNode
  nameWithType: ComputeNode
  fullName: Microsoft.Azure.Batch.ComputeNode
- uid: Microsoft.Azure.Batch.PoolOperations.ListComputeNodes*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.ListComputeNodes
  isExternal: false
  name: ListComputeNodes
  nameWithType: PoolOperations.ListComputeNodes
  fullName: Microsoft.Azure.Batch.PoolOperations.ListComputeNodes
- uid: Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.ComputeNode}
  commentId: T:Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.ComputeNode}
  parent: Microsoft.Azure.Batch
  definition: Microsoft.Azure.Batch.IPagedEnumerable`1
  name: IPagedEnumerable<ComputeNode>
  nameWithType: IPagedEnumerable<ComputeNode>
  fullName: Microsoft.Azure.Batch.IPagedEnumerable<Microsoft.Azure.Batch.ComputeNode>
  nameWithType.vb: IPagedEnumerable(Of ComputeNode)
  fullname.vb: Microsoft.Azure.Batch.IPagedEnumerable(Of Microsoft.Azure.Batch.ComputeNode)
  name.vb: IPagedEnumerable(Of ComputeNode)
  spec.csharp:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.ComputeNode
    name: ComputeNode
    nameWithType: ComputeNode
    fullName: Microsoft.Azure.Batch.ComputeNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.ComputeNode
    name: ComputeNode
    nameWithType: ComputeNode
    fullName: Microsoft.Azure.Batch.ComputeNode
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.PoolOperations.GetComputeNodeAsync*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.GetComputeNodeAsync
  isExternal: false
  name: GetComputeNodeAsync
  nameWithType: PoolOperations.GetComputeNodeAsync
  fullName: Microsoft.Azure.Batch.PoolOperations.GetComputeNodeAsync
- uid: System.Threading.Tasks.Task{Microsoft.Azure.Batch.ComputeNode}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.Batch.ComputeNode}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ComputeNode>
  nameWithType: Task<ComputeNode>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.Batch.ComputeNode>
  nameWithType.vb: Task(Of ComputeNode)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.Batch.ComputeNode)
  name.vb: Task(Of ComputeNode)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.ComputeNode
    name: ComputeNode
    nameWithType: ComputeNode
    fullName: Microsoft.Azure.Batch.ComputeNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.ComputeNode
    name: ComputeNode
    nameWithType: ComputeNode
    fullName: Microsoft.Azure.Batch.ComputeNode
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.PoolOperations.GetComputeNodeAsync(System.String,System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.GetComputeNodeAsync(System.String,System.String,Microsoft.Azure.Batch.DetailLevel,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.GetComputeNode*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.GetComputeNode
  isExternal: false
  name: GetComputeNode
  nameWithType: PoolOperations.GetComputeNode
  fullName: Microsoft.Azure.Batch.PoolOperations.GetComputeNode
- uid: Microsoft.Azure.Batch.PoolOperations.EnableComputeNodeSchedulingAsync*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.EnableComputeNodeSchedulingAsync
  isExternal: false
  name: EnableComputeNodeSchedulingAsync
  nameWithType: PoolOperations.EnableComputeNodeSchedulingAsync
  fullName: Microsoft.Azure.Batch.PoolOperations.EnableComputeNodeSchedulingAsync
- uid: Microsoft.Azure.Batch.PoolOperations.EnableComputeNodeScheduling(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.EnableComputeNodeScheduling(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
- uid: Microsoft.Azure.Batch.PoolOperations.EnableComputeNodeScheduling*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.EnableComputeNodeScheduling
  isExternal: false
  name: EnableComputeNodeScheduling
  nameWithType: PoolOperations.EnableComputeNodeScheduling
  fullName: Microsoft.Azure.Batch.PoolOperations.EnableComputeNodeScheduling
- uid: Microsoft.Azure.Batch.Common.DisableComputeNodeSchedulingOption.Requeue
  commentId: F:Microsoft.Azure.Batch.Common.DisableComputeNodeSchedulingOption.Requeue
- uid: Microsoft.Azure.Batch.PoolOperations.DisableComputeNodeSchedulingAsync*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.DisableComputeNodeSchedulingAsync
  isExternal: false
  name: DisableComputeNodeSchedulingAsync
  nameWithType: PoolOperations.DisableComputeNodeSchedulingAsync
  fullName: Microsoft.Azure.Batch.PoolOperations.DisableComputeNodeSchedulingAsync
- uid: System.Nullable{Microsoft.Azure.Batch.Common.DisableComputeNodeSchedulingOption}
  commentId: T:System.Nullable{Microsoft.Azure.Batch.Common.DisableComputeNodeSchedulingOption}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DisableComputeNodeSchedulingOption>
  nameWithType: Nullable<DisableComputeNodeSchedulingOption>
  fullName: System.Nullable<Microsoft.Azure.Batch.Common.DisableComputeNodeSchedulingOption>
  nameWithType.vb: Nullable(Of DisableComputeNodeSchedulingOption)
  fullname.vb: System.Nullable(Of Microsoft.Azure.Batch.Common.DisableComputeNodeSchedulingOption)
  name.vb: Nullable(Of DisableComputeNodeSchedulingOption)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.Common.DisableComputeNodeSchedulingOption
    name: DisableComputeNodeSchedulingOption
    nameWithType: DisableComputeNodeSchedulingOption
    fullName: Microsoft.Azure.Batch.Common.DisableComputeNodeSchedulingOption
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.Common.DisableComputeNodeSchedulingOption
    name: DisableComputeNodeSchedulingOption
    nameWithType: DisableComputeNodeSchedulingOption
    fullName: Microsoft.Azure.Batch.Common.DisableComputeNodeSchedulingOption
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.PoolOperations.DisableComputeNodeSchedulingAsync(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.DisableComputeNodeSchedulingOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.DisableComputeNodeSchedulingAsync(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.DisableComputeNodeSchedulingOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.DisableComputeNodeScheduling*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.DisableComputeNodeScheduling
  isExternal: false
  name: DisableComputeNodeScheduling
  nameWithType: PoolOperations.DisableComputeNodeScheduling
  fullName: Microsoft.Azure.Batch.PoolOperations.DisableComputeNodeScheduling
- uid: Microsoft.Azure.Batch.PoolOperations.EnableAutoScaleAsync*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.EnableAutoScaleAsync
  isExternal: false
  name: EnableAutoScaleAsync
  nameWithType: PoolOperations.EnableAutoScaleAsync
  fullName: Microsoft.Azure.Batch.PoolOperations.EnableAutoScaleAsync
- uid: Microsoft.Azure.Batch.PoolOperations.EnableAutoScaleAsync(System.String,System.String,System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.EnableAutoScaleAsync(System.String,System.String,System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.EnableAutoScale*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.EnableAutoScale
  isExternal: false
  name: EnableAutoScale
  nameWithType: PoolOperations.EnableAutoScale
  fullName: Microsoft.Azure.Batch.PoolOperations.EnableAutoScale
- uid: Microsoft.Azure.Batch.PoolOperations.DisableAutoScaleAsync*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.DisableAutoScaleAsync
  isExternal: false
  name: DisableAutoScaleAsync
  nameWithType: PoolOperations.DisableAutoScaleAsync
  fullName: Microsoft.Azure.Batch.PoolOperations.DisableAutoScaleAsync
- uid: Microsoft.Azure.Batch.PoolOperations.DisableAutoScaleAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.DisableAutoScaleAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.DisableAutoScale*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.DisableAutoScale
  isExternal: false
  name: DisableAutoScale
  nameWithType: PoolOperations.DisableAutoScale
  fullName: Microsoft.Azure.Batch.PoolOperations.DisableAutoScale
- uid: Microsoft.Azure.Batch.CloudPool.LastModified
  commentId: P:Microsoft.Azure.Batch.CloudPool.LastModified
- uid: Microsoft.Azure.Batch.CloudPool.ETag
  commentId: P:Microsoft.Azure.Batch.CloudPool.ETag
- uid: Microsoft.Azure.Batch.PoolOperations.EvaluateAutoScaleAsync*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.EvaluateAutoScaleAsync
  isExternal: false
  name: EvaluateAutoScaleAsync
  nameWithType: PoolOperations.EvaluateAutoScaleAsync
  fullName: Microsoft.Azure.Batch.PoolOperations.EvaluateAutoScaleAsync
- uid: System.Threading.Tasks.Task{Microsoft.Azure.Batch.AutoScaleRun}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.Batch.AutoScaleRun}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<AutoScaleRun>
  nameWithType: Task<AutoScaleRun>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.Batch.AutoScaleRun>
  nameWithType.vb: Task(Of AutoScaleRun)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.Batch.AutoScaleRun)
  name.vb: Task(Of AutoScaleRun)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.AutoScaleRun
    name: AutoScaleRun
    nameWithType: AutoScaleRun
    fullName: Microsoft.Azure.Batch.AutoScaleRun
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.AutoScaleRun
    name: AutoScaleRun
    nameWithType: AutoScaleRun
    fullName: Microsoft.Azure.Batch.AutoScaleRun
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.PoolOperations.EnableAutoScale(System.String,System.String,System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.EnableAutoScale(System.String,System.String,System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
- uid: Microsoft.Azure.Batch.PoolOperations.EvaluateAutoScaleAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.EvaluateAutoScaleAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.EvaluateAutoScale*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.EvaluateAutoScale
  isExternal: false
  name: EvaluateAutoScale
  nameWithType: PoolOperations.EvaluateAutoScale
  fullName: Microsoft.Azure.Batch.PoolOperations.EvaluateAutoScale
- uid: Microsoft.Azure.Batch.AutoScaleRun
  commentId: T:Microsoft.Azure.Batch.AutoScaleRun
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: AutoScaleRun
  nameWithType: AutoScaleRun
  fullName: Microsoft.Azure.Batch.AutoScaleRun
- uid: Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync
  isExternal: false
  name: RemoveFromPoolAsync
  nameWithType: PoolOperations.RemoveFromPoolAsync
  fullName: Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync
- uid: Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
- uid: Microsoft.Azure.Batch.PoolOperations.RemoveFromPool*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.RemoveFromPool
  isExternal: false
  name: RemoveFromPool
  nameWithType: PoolOperations.RemoveFromPool
  fullName: Microsoft.Azure.Batch.PoolOperations.RemoveFromPool
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.ComputeNode},System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.ComputeNode},System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.RemoveFromPool(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.ComputeNode},System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.RemoveFromPool(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.ComputeNode},System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
- uid: Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync(System.String,Microsoft.Azure.Batch.ComputeNode,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.RemoveFromPoolAsync(System.String,Microsoft.Azure.Batch.ComputeNode,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
- uid: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.ComputeNode}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.ComputeNode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ComputeNode>
  nameWithType: IEnumerable<ComputeNode>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.ComputeNode>
  nameWithType.vb: IEnumerable(Of ComputeNode)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.ComputeNode)
  name.vb: IEnumerable(Of ComputeNode)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.ComputeNode
    name: ComputeNode
    nameWithType: ComputeNode
    fullName: Microsoft.Azure.Batch.ComputeNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.ComputeNode
    name: ComputeNode
    nameWithType: ComputeNode
    fullName: Microsoft.Azure.Batch.ComputeNode
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.ComputeNodeUser
  commentId: T:Microsoft.Azure.Batch.ComputeNodeUser
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: ComputeNodeUser
  nameWithType: ComputeNodeUser
  fullName: Microsoft.Azure.Batch.ComputeNodeUser
- uid: Microsoft.Azure.Batch.ComputeNodeUser.CommitAsync(Microsoft.Azure.Batch.ComputeNodeUserCommitSemantics,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.ComputeNodeUser.CommitAsync(Microsoft.Azure.Batch.ComputeNodeUserCommitSemantics,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.CreateComputeNodeUser*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.CreateComputeNodeUser
  isExternal: false
  name: CreateComputeNodeUser
  nameWithType: PoolOperations.CreateComputeNodeUser
  fullName: Microsoft.Azure.Batch.PoolOperations.CreateComputeNodeUser
- uid: Microsoft.Azure.Batch.Common.ComputeNodeState.Idle
  commentId: F:Microsoft.Azure.Batch.Common.ComputeNodeState.Idle
- uid: Microsoft.Azure.Batch.Common.ComputeNodeState.Running
  commentId: F:Microsoft.Azure.Batch.Common.ComputeNodeState.Running
- uid: Microsoft.Azure.Batch.PoolOperations.DeleteComputeNodeUserAsync*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.DeleteComputeNodeUserAsync
  isExternal: false
  name: DeleteComputeNodeUserAsync
  nameWithType: PoolOperations.DeleteComputeNodeUserAsync
  fullName: Microsoft.Azure.Batch.PoolOperations.DeleteComputeNodeUserAsync
- uid: Microsoft.Azure.Batch.PoolOperations.DeleteComputeNodeUserAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.DeleteComputeNodeUserAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.DeleteComputeNodeUser*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.DeleteComputeNodeUser
  isExternal: false
  name: DeleteComputeNodeUser
  nameWithType: PoolOperations.DeleteComputeNodeUser
  fullName: Microsoft.Azure.Batch.PoolOperations.DeleteComputeNodeUser
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: Microsoft.Azure.Batch.PoolOperations.GetRemoteLoginSettings(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.PoolOperations.GetRemoteLoginSettings(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
- uid: Microsoft.Azure.Batch.PoolOperations.GetRDPFileAsync*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.GetRDPFileAsync
  isExternal: false
  name: GetRDPFileAsync
  nameWithType: PoolOperations.GetRDPFileAsync
  fullName: Microsoft.Azure.Batch.PoolOperations.GetRDPFileAsync
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Microsoft.Azure.Batch.PoolOperations.GetRDPFileAsync(System.String,System.String,System.IO.Stream,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.GetRDPFileAsync(System.String,System.String,System.IO.Stream,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.GetRDPFile*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.GetRDPFile
  isExternal: false
  name: GetRDPFile
  nameWithType: PoolOperations.GetRDPFile
  fullName: Microsoft.Azure.Batch.PoolOperations.GetRDPFile
- uid: Microsoft.Azure.Batch.PoolOperations.GetRemoteLoginSettingsAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.GetRemoteLoginSettingsAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.GetRDPFileAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.GetRDPFileAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.GetRemoteLoginSettingsAsync*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.GetRemoteLoginSettingsAsync
  isExternal: false
  name: GetRemoteLoginSettingsAsync
  nameWithType: PoolOperations.GetRemoteLoginSettingsAsync
  fullName: Microsoft.Azure.Batch.PoolOperations.GetRemoteLoginSettingsAsync
- uid: System.Threading.Tasks.Task{Microsoft.Azure.Batch.RemoteLoginSettings}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.Batch.RemoteLoginSettings}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RemoteLoginSettings>
  nameWithType: Task<RemoteLoginSettings>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.Batch.RemoteLoginSettings>
  nameWithType.vb: Task(Of RemoteLoginSettings)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.Batch.RemoteLoginSettings)
  name.vb: Task(Of RemoteLoginSettings)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.RemoteLoginSettings
    name: RemoteLoginSettings
    nameWithType: RemoteLoginSettings
    fullName: Microsoft.Azure.Batch.RemoteLoginSettings
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.RemoteLoginSettings
    name: RemoteLoginSettings
    nameWithType: RemoteLoginSettings
    fullName: Microsoft.Azure.Batch.RemoteLoginSettings
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.PoolOperations.GetRemoteLoginSettings*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.GetRemoteLoginSettings
  isExternal: false
  name: GetRemoteLoginSettings
  nameWithType: PoolOperations.GetRemoteLoginSettings
  fullName: Microsoft.Azure.Batch.PoolOperations.GetRemoteLoginSettings
- uid: Microsoft.Azure.Batch.RemoteLoginSettings
  commentId: T:Microsoft.Azure.Batch.RemoteLoginSettings
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: RemoteLoginSettings
  nameWithType: RemoteLoginSettings
  fullName: Microsoft.Azure.Batch.RemoteLoginSettings
- uid: Microsoft.Azure.Batch.Common.ComputeNodeRebootOption.Requeue
  commentId: F:Microsoft.Azure.Batch.Common.ComputeNodeRebootOption.Requeue
- uid: Microsoft.Azure.Batch.PoolOperations.RebootAsync*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.RebootAsync
  isExternal: false
  name: RebootAsync
  nameWithType: PoolOperations.RebootAsync
  fullName: Microsoft.Azure.Batch.PoolOperations.RebootAsync
- uid: System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeRebootOption}
  commentId: T:System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeRebootOption}
  parent: System
  definition: System.Nullable`1
  name: Nullable<ComputeNodeRebootOption>
  nameWithType: Nullable<ComputeNodeRebootOption>
  fullName: System.Nullable<Microsoft.Azure.Batch.Common.ComputeNodeRebootOption>
  nameWithType.vb: Nullable(Of ComputeNodeRebootOption)
  fullname.vb: System.Nullable(Of Microsoft.Azure.Batch.Common.ComputeNodeRebootOption)
  name.vb: Nullable(Of ComputeNodeRebootOption)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.Common.ComputeNodeRebootOption
    name: ComputeNodeRebootOption
    nameWithType: ComputeNodeRebootOption
    fullName: Microsoft.Azure.Batch.Common.ComputeNodeRebootOption
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.Common.ComputeNodeRebootOption
    name: ComputeNodeRebootOption
    nameWithType: ComputeNodeRebootOption
    fullName: Microsoft.Azure.Batch.Common.ComputeNodeRebootOption
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.PoolOperations.RebootAsync(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeRebootOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.RebootAsync(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeRebootOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.Reboot*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.Reboot
  isExternal: false
  name: Reboot
  nameWithType: PoolOperations.Reboot
  fullName: Microsoft.Azure.Batch.PoolOperations.Reboot
- uid: Microsoft.Azure.Batch.Common.ComputeNodeReimageOption.Requeue
  commentId: F:Microsoft.Azure.Batch.Common.ComputeNodeReimageOption.Requeue
- uid: Microsoft.Azure.Batch.PoolOperations.ReimageAsync*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.ReimageAsync
  isExternal: false
  name: ReimageAsync
  nameWithType: PoolOperations.ReimageAsync
  fullName: Microsoft.Azure.Batch.PoolOperations.ReimageAsync
- uid: System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeReimageOption}
  commentId: T:System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeReimageOption}
  parent: System
  definition: System.Nullable`1
  name: Nullable<ComputeNodeReimageOption>
  nameWithType: Nullable<ComputeNodeReimageOption>
  fullName: System.Nullable<Microsoft.Azure.Batch.Common.ComputeNodeReimageOption>
  nameWithType.vb: Nullable(Of ComputeNodeReimageOption)
  fullname.vb: System.Nullable(Of Microsoft.Azure.Batch.Common.ComputeNodeReimageOption)
  name.vb: Nullable(Of ComputeNodeReimageOption)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.Common.ComputeNodeReimageOption
    name: ComputeNodeReimageOption
    nameWithType: ComputeNodeReimageOption
    fullName: Microsoft.Azure.Batch.Common.ComputeNodeReimageOption
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.Common.ComputeNodeReimageOption
    name: ComputeNodeReimageOption
    nameWithType: ComputeNodeReimageOption
    fullName: Microsoft.Azure.Batch.Common.ComputeNodeReimageOption
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.PoolOperations.ReimageAsync(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeReimageOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.ReimageAsync(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Common.ComputeNodeReimageOption},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.Reimage*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.Reimage
  isExternal: false
  name: Reimage
  nameWithType: PoolOperations.Reimage
  fullName: Microsoft.Azure.Batch.PoolOperations.Reimage
- uid: Microsoft.Azure.Batch.Common.PoolState.Upgrading
  commentId: F:Microsoft.Azure.Batch.Common.PoolState.Upgrading
- uid: Microsoft.Azure.Batch.Common.PoolState.Active
  commentId: F:Microsoft.Azure.Batch.Common.PoolState.Active
- uid: Microsoft.Azure.Batch.CloudServiceConfiguration.CurrentOSVersion
  commentId: P:Microsoft.Azure.Batch.CloudServiceConfiguration.CurrentOSVersion
- uid: Microsoft.Azure.Batch.CloudServiceConfiguration.TargetOSVersion
  commentId: P:Microsoft.Azure.Batch.CloudServiceConfiguration.TargetOSVersion
- uid: Microsoft.Azure.Batch.PoolOperations.ChangeOSVersionAsync*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.ChangeOSVersionAsync
  isExternal: false
  name: ChangeOSVersionAsync
  nameWithType: PoolOperations.ChangeOSVersionAsync
  fullName: Microsoft.Azure.Batch.PoolOperations.ChangeOSVersionAsync
- uid: Microsoft.Azure.Batch.PoolOperations.ChangeOSVersionAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.ChangeOSVersionAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.ChangeOSVersion*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.ChangeOSVersion
  isExternal: false
  name: ChangeOSVersion
  nameWithType: PoolOperations.ChangeOSVersion
  fullName: Microsoft.Azure.Batch.PoolOperations.ChangeOSVersion
- uid: Microsoft.Azure.Batch.NodeFile
  commentId: T:Microsoft.Azure.Batch.NodeFile
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: NodeFile
  nameWithType: NodeFile
  fullName: Microsoft.Azure.Batch.NodeFile
- uid: Microsoft.Azure.Batch.NodeFile.CopyToStreamAsync(System.IO.Stream,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.NodeFile.CopyToStreamAsync(System.IO.Stream,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.GetNodeFileAsync*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.GetNodeFileAsync
  isExternal: false
  name: GetNodeFileAsync
  nameWithType: PoolOperations.GetNodeFileAsync
  fullName: Microsoft.Azure.Batch.PoolOperations.GetNodeFileAsync
- uid: System.Threading.Tasks.Task{Microsoft.Azure.Batch.NodeFile}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.Batch.NodeFile}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<NodeFile>
  nameWithType: Task<NodeFile>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.Batch.NodeFile>
  nameWithType.vb: Task(Of NodeFile)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.Batch.NodeFile)
  name.vb: Task(Of NodeFile)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.NodeFile
    name: NodeFile
    nameWithType: NodeFile
    fullName: Microsoft.Azure.Batch.NodeFile
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.NodeFile
    name: NodeFile
    nameWithType: NodeFile
    fullName: Microsoft.Azure.Batch.NodeFile
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.NodeFile.CopyToStream(System.IO.Stream,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.NodeFile.CopyToStream(System.IO.Stream,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
- uid: Microsoft.Azure.Batch.PoolOperations.GetNodeFileAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.GetNodeFileAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.GetNodeFile*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.GetNodeFile
  isExternal: false
  name: GetNodeFile
  nameWithType: PoolOperations.GetNodeFile
  fullName: Microsoft.Azure.Batch.PoolOperations.GetNodeFile
- uid: Microsoft.Azure.Batch.PoolOperations.ListNodeFiles*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.ListNodeFiles
  isExternal: false
  name: ListNodeFiles
  nameWithType: PoolOperations.ListNodeFiles
  fullName: Microsoft.Azure.Batch.PoolOperations.ListNodeFiles
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullname.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.NodeFile}
  commentId: T:Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.NodeFile}
  parent: Microsoft.Azure.Batch
  definition: Microsoft.Azure.Batch.IPagedEnumerable`1
  name: IPagedEnumerable<NodeFile>
  nameWithType: IPagedEnumerable<NodeFile>
  fullName: Microsoft.Azure.Batch.IPagedEnumerable<Microsoft.Azure.Batch.NodeFile>
  nameWithType.vb: IPagedEnumerable(Of NodeFile)
  fullname.vb: Microsoft.Azure.Batch.IPagedEnumerable(Of Microsoft.Azure.Batch.NodeFile)
  name.vb: IPagedEnumerable(Of NodeFile)
  spec.csharp:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.NodeFile
    name: NodeFile
    nameWithType: NodeFile
    fullName: Microsoft.Azure.Batch.NodeFile
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.NodeFile
    name: NodeFile
    nameWithType: NodeFile
    fullName: Microsoft.Azure.Batch.NodeFile
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.PoolOperations.DeleteNodeFileAsync*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.DeleteNodeFileAsync
  isExternal: false
  name: DeleteNodeFileAsync
  nameWithType: PoolOperations.DeleteNodeFileAsync
  fullName: Microsoft.Azure.Batch.PoolOperations.DeleteNodeFileAsync
- uid: Microsoft.Azure.Batch.PoolOperations.DeleteNodeFileAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.DeleteNodeFileAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.DeleteNodeFile*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.DeleteNodeFile
  isExternal: false
  name: DeleteNodeFile
  nameWithType: PoolOperations.DeleteNodeFile
  fullName: Microsoft.Azure.Batch.PoolOperations.DeleteNodeFile
- uid: Microsoft.Azure.Batch.PoolOperations.GetAllPoolsLifetimeStatisticsAsync*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.GetAllPoolsLifetimeStatisticsAsync
  isExternal: false
  name: GetAllPoolsLifetimeStatisticsAsync
  nameWithType: PoolOperations.GetAllPoolsLifetimeStatisticsAsync
  fullName: Microsoft.Azure.Batch.PoolOperations.GetAllPoolsLifetimeStatisticsAsync
- uid: System.Threading.Tasks.Task{Microsoft.Azure.Batch.PoolStatistics}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.Batch.PoolStatistics}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<PoolStatistics>
  nameWithType: Task<PoolStatistics>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.Batch.PoolStatistics>
  nameWithType.vb: Task(Of PoolStatistics)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.Batch.PoolStatistics)
  name.vb: Task(Of PoolStatistics)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.PoolStatistics
    name: PoolStatistics
    nameWithType: PoolStatistics
    fullName: Microsoft.Azure.Batch.PoolStatistics
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.PoolStatistics
    name: PoolStatistics
    nameWithType: PoolStatistics
    fullName: Microsoft.Azure.Batch.PoolStatistics
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.PoolOperations.GetAllPoolsLifetimeStatisticsAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PoolOperations.GetAllPoolsLifetimeStatisticsAsync(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.PoolOperations.GetAllPoolsLifetimeStatistics*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.GetAllPoolsLifetimeStatistics
  isExternal: false
  name: GetAllPoolsLifetimeStatistics
  nameWithType: PoolOperations.GetAllPoolsLifetimeStatistics
  fullName: Microsoft.Azure.Batch.PoolOperations.GetAllPoolsLifetimeStatistics
- uid: Microsoft.Azure.Batch.PoolStatistics
  commentId: T:Microsoft.Azure.Batch.PoolStatistics
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: PoolStatistics
  nameWithType: PoolStatistics
  fullName: Microsoft.Azure.Batch.PoolStatistics
- uid: Microsoft.Azure.Batch.PoolOperations.ListPoolUsageMetrics*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.ListPoolUsageMetrics
  isExternal: false
  name: ListPoolUsageMetrics
  nameWithType: PoolOperations.ListPoolUsageMetrics
  fullName: Microsoft.Azure.Batch.PoolOperations.ListPoolUsageMetrics
- uid: System.Nullable{System.DateTime}
  commentId: T:System.Nullable{System.DateTime}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<System.DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullname.vb: System.Nullable(Of System.DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.PoolUsageMetrics}
  commentId: T:Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.PoolUsageMetrics}
  parent: Microsoft.Azure.Batch
  definition: Microsoft.Azure.Batch.IPagedEnumerable`1
  name: IPagedEnumerable<PoolUsageMetrics>
  nameWithType: IPagedEnumerable<PoolUsageMetrics>
  fullName: Microsoft.Azure.Batch.IPagedEnumerable<Microsoft.Azure.Batch.PoolUsageMetrics>
  nameWithType.vb: IPagedEnumerable(Of PoolUsageMetrics)
  fullname.vb: Microsoft.Azure.Batch.IPagedEnumerable(Of Microsoft.Azure.Batch.PoolUsageMetrics)
  name.vb: IPagedEnumerable(Of PoolUsageMetrics)
  spec.csharp:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.PoolUsageMetrics
    name: PoolUsageMetrics
    nameWithType: PoolUsageMetrics
    fullName: Microsoft.Azure.Batch.PoolUsageMetrics
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.PoolUsageMetrics
    name: PoolUsageMetrics
    nameWithType: PoolUsageMetrics
    fullName: Microsoft.Azure.Batch.PoolUsageMetrics
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.PoolOperations.ListNodeAgentSkus*
  commentId: Overload:Microsoft.Azure.Batch.PoolOperations.ListNodeAgentSkus
  isExternal: false
  name: ListNodeAgentSkus
  nameWithType: PoolOperations.ListNodeAgentSkus
  fullName: Microsoft.Azure.Batch.PoolOperations.ListNodeAgentSkus
- uid: Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.NodeAgentSku}
  commentId: T:Microsoft.Azure.Batch.IPagedEnumerable{Microsoft.Azure.Batch.NodeAgentSku}
  parent: Microsoft.Azure.Batch
  definition: Microsoft.Azure.Batch.IPagedEnumerable`1
  name: IPagedEnumerable<NodeAgentSku>
  nameWithType: IPagedEnumerable<NodeAgentSku>
  fullName: Microsoft.Azure.Batch.IPagedEnumerable<Microsoft.Azure.Batch.NodeAgentSku>
  nameWithType.vb: IPagedEnumerable(Of NodeAgentSku)
  fullname.vb: Microsoft.Azure.Batch.IPagedEnumerable(Of Microsoft.Azure.Batch.NodeAgentSku)
  name.vb: IPagedEnumerable(Of NodeAgentSku)
  spec.csharp:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.NodeAgentSku
    name: NodeAgentSku
    nameWithType: NodeAgentSku
    fullName: Microsoft.Azure.Batch.NodeAgentSku
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.NodeAgentSku
    name: NodeAgentSku
    nameWithType: NodeAgentSku
    fullName: Microsoft.Azure.Batch.NodeAgentSku
  - name: )
    nameWithType: )
    fullName: )
