### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Batch.TaskStateMonitor
  commentId: T:Microsoft.Azure.Batch.TaskStateMonitor
  id: TaskStateMonitor
  parent: Microsoft.Azure.Batch
  children:
  - Microsoft.Azure.Batch.TaskStateMonitor.CustomBehaviors
  - Microsoft.Azure.Batch.TaskStateMonitor.WaitAll(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask},Microsoft.Azure.Batch.Common.TaskState,System.TimeSpan,Microsoft.Azure.Batch.ODATAMonitorControl,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.TaskStateMonitor.WhenAll(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask},Microsoft.Azure.Batch.Common.TaskState,System.Threading.CancellationToken,Microsoft.Azure.Batch.ODATAMonitorControl,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  - Microsoft.Azure.Batch.TaskStateMonitor.WhenAll(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask},Microsoft.Azure.Batch.Common.TaskState,System.TimeSpan,Microsoft.Azure.Batch.ODATAMonitorControl,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  langs:
  - csharp
  - vb
  name: TaskStateMonitor
  nameWithType: TaskStateMonitor
  fullName: Microsoft.Azure.Batch.TaskStateMonitor
  type: Class
  source:
    remote:
      path: src/Batch/Client/Src/TaskStateMonitor.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: TaskStateMonitor
    path: src/azure-sdk-for-net/src/Batch/Client/Src/TaskStateMonitor.cs
    startLine: 24
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nProvides utilities to help monitor CloudTask states.\n"
  example: []
  syntax:
    content: 'public class TaskStateMonitor : IInheritedBehaviors'
    content.vb: >-
      Public Class TaskStateMonitor
          Implements IInheritedBehaviors
  inheritance:
  - System.Object
  implements:
  - Microsoft.Azure.Batch.IInheritedBehaviors
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Batch.TaskStateMonitor.CustomBehaviors
  commentId: P:Microsoft.Azure.Batch.TaskStateMonitor.CustomBehaviors
  id: CustomBehaviors
  parent: Microsoft.Azure.Batch.TaskStateMonitor
  langs:
  - csharp
  - vb
  name: CustomBehaviors
  nameWithType: TaskStateMonitor.CustomBehaviors
  fullName: Microsoft.Azure.Batch.TaskStateMonitor.CustomBehaviors
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/TaskStateMonitor.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CustomBehaviors
    path: src/azure-sdk-for-net/src/Batch/Client/Src/TaskStateMonitor.cs
    startLine: 55
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets a list of behaviors that modify or customize requests to the Batch service\nmade via this <xref href=\"Microsoft.Azure.Batch.TaskStateMonitor\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\n<p>These behaviors are inherited by child objects.</p>\n<p>Modifications are applied in the order of the collection. The last write wins.</p>\n"
  example: []
  syntax:
    content: public IList<BatchClientBehavior> CustomBehaviors { get; set; }
    content.vb: Public Property CustomBehaviors As IList(Of BatchClientBehavior)
    parameters: []
    return:
      type: System.Collections.Generic.IList{Microsoft.Azure.Batch.BatchClientBehavior}
  overload: Microsoft.Azure.Batch.TaskStateMonitor.CustomBehaviors*
  implements:
  - Microsoft.Azure.Batch.IInheritedBehaviors.CustomBehaviors
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.TaskStateMonitor.WhenAll(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask},Microsoft.Azure.Batch.Common.TaskState,System.TimeSpan,Microsoft.Azure.Batch.ODATAMonitorControl,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.TaskStateMonitor.WhenAll(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask},Microsoft.Azure.Batch.Common.TaskState,System.TimeSpan,Microsoft.Azure.Batch.ODATAMonitorControl,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: WhenAll(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask},Microsoft.Azure.Batch.Common.TaskState,System.TimeSpan,Microsoft.Azure.Batch.ODATAMonitorControl,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.TaskStateMonitor
  langs:
  - csharp
  - vb
  name: WhenAll(IEnumerable<CloudTask>, TaskState, TimeSpan, ODATAMonitorControl, IEnumerable<BatchClientBehavior>)
  nameWithType: TaskStateMonitor.WhenAll(IEnumerable<CloudTask>, TaskState, TimeSpan, ODATAMonitorControl, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.TaskStateMonitor.WhenAll(System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.CloudTask>, Microsoft.Azure.Batch.Common.TaskState, System.TimeSpan, Microsoft.Azure.Batch.ODATAMonitorControl, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/TaskStateMonitor.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: WhenAll
    path: src/azure-sdk-for-net/src/Batch/Client/Src/TaskStateMonitor.cs
    startLine: 82
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nMonitors a <xref href=\"Microsoft.Azure.Batch.CloudTask\" data-throw-if-not-resolved=\"false\"></xref> collection until each of its members has reached a desired state at least once.\n"
  remarks: "\n<p>\nThe state of each <xref href=\"Microsoft.Azure.Batch.CloudTask\" data-throw-if-not-resolved=\"false\"></xref> instance is assumed to be authoritative at the time of the call.\nInstances that are already at the <span class=\"paramref\">desiredState</span> are ignored.\nThe <xref href=\"Microsoft.Azure.Batch.CloudTask\" data-throw-if-not-resolved=\"false\"></xref> instances in the collection are treated as read-only.\nThis means that when the call completes (timeout or not) the <xref href=\"Microsoft.Azure.Batch.CloudTask\" data-throw-if-not-resolved=\"false\"></xref> instances should be refreshed before using.\n</p>\n<p>\nThis method runs asynchronously.\n</p>\n"
  example: []
  syntax:
    content: public Task WhenAll(IEnumerable<CloudTask> tasksToMonitor, TaskState desiredState, TimeSpan timeout, ODATAMonitorControl controlParams = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Function WhenAll(tasksToMonitor As IEnumerable(Of CloudTask), desiredState As TaskState, timeout As TimeSpan, controlParams As ODATAMonitorControl = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing) As Task
    parameters:
    - id: tasksToMonitor
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask}
      description: The collection of tasks to monitor.
    - id: desiredState
      type: Microsoft.Azure.Batch.Common.TaskState
      description: The target state of the tasks. The method will exit when all tasks have reached this state at least once.
    - id: timeout
      type: System.TimeSpan
      description: The maximum amount of time this call will wait before timing out.
    - id: controlParams
      type: Microsoft.Azure.Batch.ODATAMonitorControl
      description: Controls various settings of the monitor, such as delay between each poll.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.TaskStateMonitor.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.TaskStateMonitor.WhenAll*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Thrown if the <span class="paramref">timeout</span> has elapsed.
  nameWithType.vb: TaskStateMonitor.WhenAll(IEnumerable(Of CloudTask), TaskState, TimeSpan, ODATAMonitorControl, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.TaskStateMonitor.WhenAll(System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.CloudTask), Microsoft.Azure.Batch.Common.TaskState, System.TimeSpan, Microsoft.Azure.Batch.ODATAMonitorControl, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: WhenAll(IEnumerable(Of CloudTask), TaskState, TimeSpan, ODATAMonitorControl, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.TaskStateMonitor.WhenAll(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask},Microsoft.Azure.Batch.Common.TaskState,System.Threading.CancellationToken,Microsoft.Azure.Batch.ODATAMonitorControl,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.TaskStateMonitor.WhenAll(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask},Microsoft.Azure.Batch.Common.TaskState,System.Threading.CancellationToken,Microsoft.Azure.Batch.ODATAMonitorControl,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: WhenAll(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask},Microsoft.Azure.Batch.Common.TaskState,System.Threading.CancellationToken,Microsoft.Azure.Batch.ODATAMonitorControl,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.TaskStateMonitor
  langs:
  - csharp
  - vb
  name: WhenAll(IEnumerable<CloudTask>, TaskState, CancellationToken, ODATAMonitorControl, IEnumerable<BatchClientBehavior>)
  nameWithType: TaskStateMonitor.WhenAll(IEnumerable<CloudTask>, TaskState, CancellationToken, ODATAMonitorControl, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.TaskStateMonitor.WhenAll(System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.CloudTask>, Microsoft.Azure.Batch.Common.TaskState, System.Threading.CancellationToken, Microsoft.Azure.Batch.ODATAMonitorControl, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/TaskStateMonitor.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: WhenAll
    path: src/azure-sdk-for-net/src/Batch/Client/Src/TaskStateMonitor.cs
    startLine: 135
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nMonitors a <xref href=\"Microsoft.Azure.Batch.CloudTask\" data-throw-if-not-resolved=\"false\"></xref> collection until each of its members has reached a desired state at least once.\n"
  remarks: "\n<p>\nThe state of each <xref href=\"Microsoft.Azure.Batch.CloudTask\" data-throw-if-not-resolved=\"false\"></xref> instance is assumed to be authoritative at the time of the call.\nInstances that are already at the <span class=\"paramref\">desiredState</span> are ignored.\nThe <xref href=\"Microsoft.Azure.Batch.CloudTask\" data-throw-if-not-resolved=\"false\"></xref> instances in the collection are treated as read-only.\nThis means that when the call completes (timeout or not) the <xref href=\"Microsoft.Azure.Batch.CloudTask\" data-throw-if-not-resolved=\"false\"></xref> instances should be refreshed before using.\n</p>\n<p>\nThis method runs asynchronously.\n</p>\n"
  example: []
  syntax:
    content: public Task WhenAll(IEnumerable<CloudTask> tasksToMonitor, TaskState desiredState, CancellationToken cancellationToken, ODATAMonitorControl controlParams = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Function WhenAll(tasksToMonitor As IEnumerable(Of CloudTask), desiredState As TaskState, cancellationToken As CancellationToken, controlParams As ODATAMonitorControl = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing) As Task
    parameters:
    - id: tasksToMonitor
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask}
      description: The collection of tasks to monitor.
    - id: desiredState
      type: Microsoft.Azure.Batch.Common.TaskState
      description: The target state of the tasks. The method will exit when all tasks have reached this state at least once.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    - id: controlParams
      type: Microsoft.Azure.Batch.ODATAMonitorControl
      description: Controls various settings of the monitor, such as delay between each poll.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.TaskStateMonitor.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.TaskStateMonitor.WhenAll*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Thrown if the <span class="paramref">cancellationToken</span> was cancelled.
  nameWithType.vb: TaskStateMonitor.WhenAll(IEnumerable(Of CloudTask), TaskState, CancellationToken, ODATAMonitorControl, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.TaskStateMonitor.WhenAll(System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.CloudTask), Microsoft.Azure.Batch.Common.TaskState, System.Threading.CancellationToken, Microsoft.Azure.Batch.ODATAMonitorControl, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: WhenAll(IEnumerable(Of CloudTask), TaskState, CancellationToken, ODATAMonitorControl, IEnumerable(Of BatchClientBehavior))
- uid: Microsoft.Azure.Batch.TaskStateMonitor.WaitAll(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask},Microsoft.Azure.Batch.Common.TaskState,System.TimeSpan,Microsoft.Azure.Batch.ODATAMonitorControl,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.TaskStateMonitor.WaitAll(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask},Microsoft.Azure.Batch.Common.TaskState,System.TimeSpan,Microsoft.Azure.Batch.ODATAMonitorControl,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  id: WaitAll(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask},Microsoft.Azure.Batch.Common.TaskState,System.TimeSpan,Microsoft.Azure.Batch.ODATAMonitorControl,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  parent: Microsoft.Azure.Batch.TaskStateMonitor
  langs:
  - csharp
  - vb
  name: WaitAll(IEnumerable<CloudTask>, TaskState, TimeSpan, ODATAMonitorControl, IEnumerable<BatchClientBehavior>)
  nameWithType: TaskStateMonitor.WaitAll(IEnumerable<CloudTask>, TaskState, TimeSpan, ODATAMonitorControl, IEnumerable<BatchClientBehavior>)
  fullName: Microsoft.Azure.Batch.TaskStateMonitor.WaitAll(System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.CloudTask>, Microsoft.Azure.Batch.Common.TaskState, System.TimeSpan, Microsoft.Azure.Batch.ODATAMonitorControl, System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/TaskStateMonitor.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: WaitAll
    path: src/azure-sdk-for-net/src/Batch/Client/Src/TaskStateMonitor.cs
    startLine: 171
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nMonitors a <xref href=\"Microsoft.Azure.Batch.CloudTask\" data-throw-if-not-resolved=\"false\"></xref> collection until each of its members has reached a desired state at least once.\n"
  remarks: "\n<p>\nThe state of each <xref href=\"Microsoft.Azure.Batch.CloudTask\" data-throw-if-not-resolved=\"false\"></xref> instance is assumed to be authoritative at the time of the call.\nInstances that are already at the <span class=\"paramref\">desiredState</span> are ignored.\nThe <xref href=\"Microsoft.Azure.Batch.CloudTask\" data-throw-if-not-resolved=\"false\"></xref> instances in the collection are treated as read-only.\nThis means that when the call completes (timeout or not) the <xref href=\"Microsoft.Azure.Batch.CloudTask\" data-throw-if-not-resolved=\"false\"></xref> instances should be refreshed before using.\n</p>\n<p>\nThis is a blocking operation. For a non-blocking equivalent, see\n<xref href=\"Microsoft.Azure.Batch.TaskStateMonitor.WhenAll(System.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.CloudTask%7d%2cMicrosoft.Azure.Batch.Common.TaskState%2cSystem.TimeSpan%2cMicrosoft.Azure.Batch.ODATAMonitorControl%2cSystem.Collections.Generic.IEnumerable%7bMicrosoft.Azure.Batch.BatchClientBehavior%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n"
  example: []
  syntax:
    content: public void WaitAll(IEnumerable<CloudTask> tasksToMonitor, TaskState desiredState, TimeSpan timeout, ODATAMonitorControl controlParams = null, IEnumerable<BatchClientBehavior> additionalBehaviors = null)
    content.vb: Public Sub WaitAll(tasksToMonitor As IEnumerable(Of CloudTask), desiredState As TaskState, timeout As TimeSpan, controlParams As ODATAMonitorControl = Nothing, additionalBehaviors As IEnumerable(Of BatchClientBehavior) = Nothing)
    parameters:
    - id: tasksToMonitor
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask}
      description: The collection of tasks to monitor.
    - id: desiredState
      type: Microsoft.Azure.Batch.Common.TaskState
      description: The target state of the tasks. The method will exit when all tasks have reached this state at least once.
    - id: timeout
      type: System.TimeSpan
      description: The maximum amount of time this call will wait before timing out.
    - id: controlParams
      type: Microsoft.Azure.Batch.ODATAMonitorControl
      description: Controls various settings of the monitor, such as delay between each poll.
    - id: additionalBehaviors
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
      description: A collection of <xref href="Microsoft.Azure.Batch.BatchClientBehavior" data-throw-if-not-resolved="false"></xref> instances that are applied to the Batch service request after the <xref href="Microsoft.Azure.Batch.TaskStateMonitor.CustomBehaviors" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.Azure.Batch.TaskStateMonitor.WaitAll*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Thrown if the <span class="paramref">timeout</span> has elapsed.
  nameWithType.vb: TaskStateMonitor.WaitAll(IEnumerable(Of CloudTask), TaskState, TimeSpan, ODATAMonitorControl, IEnumerable(Of BatchClientBehavior))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.TaskStateMonitor.WaitAll(System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.CloudTask), Microsoft.Azure.Batch.Common.TaskState, System.TimeSpan, Microsoft.Azure.Batch.ODATAMonitorControl, System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior))
  name.vb: WaitAll(IEnumerable(Of CloudTask), TaskState, TimeSpan, ODATAMonitorControl, IEnumerable(Of BatchClientBehavior))
references:
- uid: Microsoft.Azure.Batch
  commentId: N:Microsoft.Azure.Batch
  isExternal: false
  name: Microsoft.Azure.Batch
  nameWithType: Microsoft.Azure.Batch
  fullName: Microsoft.Azure.Batch
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Azure.Batch.IInheritedBehaviors
  commentId: T:Microsoft.Azure.Batch.IInheritedBehaviors
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: IInheritedBehaviors
  nameWithType: IInheritedBehaviors
  fullName: Microsoft.Azure.Batch.IInheritedBehaviors
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Batch.TaskStateMonitor
  commentId: T:Microsoft.Azure.Batch.TaskStateMonitor
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: TaskStateMonitor
  nameWithType: TaskStateMonitor
  fullName: Microsoft.Azure.Batch.TaskStateMonitor
- uid: Microsoft.Azure.Batch.TaskStateMonitor.CustomBehaviors*
  commentId: Overload:Microsoft.Azure.Batch.TaskStateMonitor.CustomBehaviors
  isExternal: false
  name: CustomBehaviors
  nameWithType: TaskStateMonitor.CustomBehaviors
  fullName: Microsoft.Azure.Batch.TaskStateMonitor.CustomBehaviors
- uid: Microsoft.Azure.Batch.IInheritedBehaviors.CustomBehaviors
  commentId: P:Microsoft.Azure.Batch.IInheritedBehaviors.CustomBehaviors
  parent: Microsoft.Azure.Batch.IInheritedBehaviors
  isExternal: false
  name: CustomBehaviors
  nameWithType: IInheritedBehaviors.CustomBehaviors
  fullName: Microsoft.Azure.Batch.IInheritedBehaviors.CustomBehaviors
- uid: System.Collections.Generic.IList{Microsoft.Azure.Batch.BatchClientBehavior}
  commentId: T:System.Collections.Generic.IList{Microsoft.Azure.Batch.BatchClientBehavior}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<BatchClientBehavior>
  nameWithType: IList<BatchClientBehavior>
  fullName: System.Collections.Generic.IList<Microsoft.Azure.Batch.BatchClientBehavior>
  nameWithType.vb: IList(Of BatchClientBehavior)
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.Azure.Batch.BatchClientBehavior)
  name.vb: IList(Of BatchClientBehavior)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.BatchClientBehavior
    name: BatchClientBehavior
    nameWithType: BatchClientBehavior
    fullName: Microsoft.Azure.Batch.BatchClientBehavior
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.BatchClientBehavior
    name: BatchClientBehavior
    nameWithType: BatchClientBehavior
    fullName: Microsoft.Azure.Batch.BatchClientBehavior
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Azure.Batch.CloudTask
  commentId: T:Microsoft.Azure.Batch.CloudTask
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: CloudTask
  nameWithType: CloudTask
  fullName: Microsoft.Azure.Batch.CloudTask
- uid: Microsoft.Azure.Batch.BatchClientBehavior
  commentId: T:Microsoft.Azure.Batch.BatchClientBehavior
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: BatchClientBehavior
  nameWithType: BatchClientBehavior
  fullName: Microsoft.Azure.Batch.BatchClientBehavior
- uid: Microsoft.Azure.Batch.TaskStateMonitor.CustomBehaviors
  commentId: P:Microsoft.Azure.Batch.TaskStateMonitor.CustomBehaviors
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.Azure.Batch.TaskStateMonitor.WhenAll*
  commentId: Overload:Microsoft.Azure.Batch.TaskStateMonitor.WhenAll
  isExternal: false
  name: WhenAll
  nameWithType: TaskStateMonitor.WhenAll
  fullName: Microsoft.Azure.Batch.TaskStateMonitor.WhenAll
- uid: System.TimeoutException
  commentId: T:System.TimeoutException
- uid: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<CloudTask>
  nameWithType: IEnumerable<CloudTask>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.CloudTask>
  nameWithType.vb: IEnumerable(Of CloudTask)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.CloudTask)
  name.vb: IEnumerable(Of CloudTask)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.CloudTask
    name: CloudTask
    nameWithType: CloudTask
    fullName: Microsoft.Azure.Batch.CloudTask
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.CloudTask
    name: CloudTask
    nameWithType: CloudTask
    fullName: Microsoft.Azure.Batch.CloudTask
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.Common.TaskState
  commentId: T:Microsoft.Azure.Batch.Common.TaskState
  parent: Microsoft.Azure.Batch.Common
  isExternal: false
  name: TaskState
  nameWithType: TaskState
  fullName: Microsoft.Azure.Batch.Common.TaskState
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Microsoft.Azure.Batch.ODATAMonitorControl
  commentId: T:Microsoft.Azure.Batch.ODATAMonitorControl
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: ODATAMonitorControl
  nameWithType: ODATAMonitorControl
  fullName: Microsoft.Azure.Batch.ODATAMonitorControl
- uid: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<BatchClientBehavior>
  nameWithType: IEnumerable<BatchClientBehavior>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.BatchClientBehavior>
  nameWithType.vb: IEnumerable(Of BatchClientBehavior)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.BatchClientBehavior)
  name.vb: IEnumerable(Of BatchClientBehavior)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.BatchClientBehavior
    name: BatchClientBehavior
    nameWithType: BatchClientBehavior
    fullName: Microsoft.Azure.Batch.BatchClientBehavior
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.BatchClientBehavior
    name: BatchClientBehavior
    nameWithType: BatchClientBehavior
    fullName: Microsoft.Azure.Batch.BatchClientBehavior
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.Common
  commentId: N:Microsoft.Azure.Batch.Common
  isExternal: false
  name: Microsoft.Azure.Batch.Common
  nameWithType: Microsoft.Azure.Batch.Common
  fullName: Microsoft.Azure.Batch.Common
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.OperationCanceledException
  commentId: T:System.OperationCanceledException
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: Microsoft.Azure.Batch.TaskStateMonitor.WhenAll(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask},Microsoft.Azure.Batch.Common.TaskState,System.TimeSpan,Microsoft.Azure.Batch.ODATAMonitorControl,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
  commentId: M:Microsoft.Azure.Batch.TaskStateMonitor.WhenAll(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask},Microsoft.Azure.Batch.Common.TaskState,System.TimeSpan,Microsoft.Azure.Batch.ODATAMonitorControl,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})
- uid: Microsoft.Azure.Batch.TaskStateMonitor.WaitAll*
  commentId: Overload:Microsoft.Azure.Batch.TaskStateMonitor.WaitAll
  isExternal: false
  name: WaitAll
  nameWithType: TaskStateMonitor.WaitAll
  fullName: Microsoft.Azure.Batch.TaskStateMonitor.WaitAll
