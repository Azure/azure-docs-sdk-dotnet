### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Batch.PagedEnumerableExtensions
  commentId: T:Microsoft.Azure.Batch.PagedEnumerableExtensions
  id: PagedEnumerableExtensions
  parent: Microsoft.Azure.Batch
  children:
  - Microsoft.Azure.Batch.PagedEnumerableExtensions.ForEachAsync``1(Microsoft.Azure.Batch.IPagedEnumerable{``0},System.Action{``0},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.PagedEnumerableExtensions.ForEachAsync``1(Microsoft.Azure.Batch.IPagedEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.PagedEnumerableExtensions.ForEachAsync``1(Microsoft.Azure.Batch.IPagedEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task},System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.PagedEnumerableExtensions.ToListAsync``1(Microsoft.Azure.Batch.IPagedEnumerable{``0},System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: PagedEnumerableExtensions
  nameWithType: PagedEnumerableExtensions
  fullName: Microsoft.Azure.Batch.PagedEnumerableExtensions
  type: Class
  source:
    remote:
      path: src/Batch/Client/Src/PagedEnumerableExtensions.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: PagedEnumerableExtensions
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PagedEnumerableExtensions.cs
    startLine: 25
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nProvides a set of static (Shared in Visual Basic) methods for working with sequences that\nimplement <xref href=\"Microsoft.Azure.Batch.IPagedEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static class PagedEnumerableExtensions
    content.vb: Public Module PagedEnumerableExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Azure.Batch.PagedEnumerableExtensions.ForEachAsync``1(Microsoft.Azure.Batch.IPagedEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PagedEnumerableExtensions.ForEachAsync``1(Microsoft.Azure.Batch.IPagedEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task},System.Threading.CancellationToken)
  id: ForEachAsync``1(Microsoft.Azure.Batch.IPagedEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.Azure.Batch.PagedEnumerableExtensions
  langs:
  - csharp
  - vb
  name: ForEachAsync<T>(IPagedEnumerable<T>, Func<T, Task>, CancellationToken)
  nameWithType: PagedEnumerableExtensions.ForEachAsync<T>(IPagedEnumerable<T>, Func<T, Task>, CancellationToken)
  fullName: Microsoft.Azure.Batch.PagedEnumerableExtensions.ForEachAsync<T>(Microsoft.Azure.Batch.IPagedEnumerable<T>, System.Func<T, System.Threading.Tasks.Task>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PagedEnumerableExtensions.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ForEachAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PagedEnumerableExtensions.cs
    startLine: 37
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nIterates over an <xref href=\"Microsoft.Azure.Batch.IPagedEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> sequence, invoking an asynchronous delegate for each element.\n"
  remarks: >-
    This method processes elements sequentially, not concurrently.  That is, for each element in the

    sequence, the method awaits the asynchronous delegate before processing the next element.
  example: []
  syntax:
    content: public static Task ForEachAsync<T>(this IPagedEnumerable<T> source, Func<T, Task> body, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ForEachAsync(Of T)(source As IPagedEnumerable(Of T), body As Func(Of T, Task), cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: source
      type: Microsoft.Azure.Batch.IPagedEnumerable{{T}}
      description: The <xref href="Microsoft.Azure.Batch.IPagedEnumerable%601" data-throw-if-not-resolved="false"></xref> to iterate over.
    - id: body
      type: System.Func{{T},System.Threading.Tasks.Task}
      description: The asynchronous delegate to execute for each element in <span class="paramref">source</span>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task
      description: >-
        A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the iteration operation. The task

        completes when iteration is complete.
  overload: Microsoft.Azure.Batch.PagedEnumerableExtensions.ForEachAsync*
  nameWithType.vb: PagedEnumerableExtensions.ForEachAsync(Of T)(IPagedEnumerable(Of T), Func(Of T, Task), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.Batch.PagedEnumerableExtensions.ForEachAsync(Of T)(Microsoft.Azure.Batch.IPagedEnumerable(Of T), System.Func(Of T, System.Threading.Tasks.Task), System.Threading.CancellationToken)
  name.vb: ForEachAsync(Of T)(IPagedEnumerable(Of T), Func(Of T, Task), CancellationToken)
- uid: Microsoft.Azure.Batch.PagedEnumerableExtensions.ForEachAsync``1(Microsoft.Azure.Batch.IPagedEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PagedEnumerableExtensions.ForEachAsync``1(Microsoft.Azure.Batch.IPagedEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)
  id: ForEachAsync``1(Microsoft.Azure.Batch.IPagedEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.Azure.Batch.PagedEnumerableExtensions
  langs:
  - csharp
  - vb
  name: ForEachAsync<T>(IPagedEnumerable<T>, Func<T, CancellationToken, Task>, CancellationToken)
  nameWithType: PagedEnumerableExtensions.ForEachAsync<T>(IPagedEnumerable<T>, Func<T, CancellationToken, Task>, CancellationToken)
  fullName: Microsoft.Azure.Batch.PagedEnumerableExtensions.ForEachAsync<T>(Microsoft.Azure.Batch.IPagedEnumerable<T>, System.Func<T, System.Threading.CancellationToken, System.Threading.Tasks.Task>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PagedEnumerableExtensions.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ForEachAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PagedEnumerableExtensions.cs
    startLine: 61
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nIterates over an <xref href=\"Microsoft.Azure.Batch.IPagedEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> sequence, invoking an asynchronous delegate for each element.\n"
  remarks: >-
    This method processes elements sequentially, not concurrently.  That is, for each element in the

    sequence, the method awaits the asynchronous delegate before processing the next element.
  example: []
  syntax:
    content: public static Task ForEachAsync<T>(this IPagedEnumerable<T> source, Func<T, CancellationToken, Task> body, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ForEachAsync(Of T)(source As IPagedEnumerable(Of T), body As Func(Of T, CancellationToken, Task), cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: source
      type: Microsoft.Azure.Batch.IPagedEnumerable{{T}}
      description: The <xref href="Microsoft.Azure.Batch.IPagedEnumerable%601" data-throw-if-not-resolved="false"></xref> to iterate over.
    - id: body
      type: System.Func{{T},System.Threading.CancellationToken,System.Threading.Tasks.Task}
      description: The asynchronous delegate to execute for each element in <span class="paramref">source</span>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task
      description: >-
        A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the iteration operation. The task

        completes when iteration is complete.
  overload: Microsoft.Azure.Batch.PagedEnumerableExtensions.ForEachAsync*
  nameWithType.vb: PagedEnumerableExtensions.ForEachAsync(Of T)(IPagedEnumerable(Of T), Func(Of T, CancellationToken, Task), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.Batch.PagedEnumerableExtensions.ForEachAsync(Of T)(Microsoft.Azure.Batch.IPagedEnumerable(Of T), System.Func(Of T, System.Threading.CancellationToken, System.Threading.Tasks.Task), System.Threading.CancellationToken)
  name.vb: ForEachAsync(Of T)(IPagedEnumerable(Of T), Func(Of T, CancellationToken, Task), CancellationToken)
- uid: Microsoft.Azure.Batch.PagedEnumerableExtensions.ForEachAsync``1(Microsoft.Azure.Batch.IPagedEnumerable{``0},System.Action{``0},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PagedEnumerableExtensions.ForEachAsync``1(Microsoft.Azure.Batch.IPagedEnumerable{``0},System.Action{``0},System.Threading.CancellationToken)
  id: ForEachAsync``1(Microsoft.Azure.Batch.IPagedEnumerable{``0},System.Action{``0},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.Azure.Batch.PagedEnumerableExtensions
  langs:
  - csharp
  - vb
  name: ForEachAsync<T>(IPagedEnumerable<T>, Action<T>, CancellationToken)
  nameWithType: PagedEnumerableExtensions.ForEachAsync<T>(IPagedEnumerable<T>, Action<T>, CancellationToken)
  fullName: Microsoft.Azure.Batch.PagedEnumerableExtensions.ForEachAsync<T>(Microsoft.Azure.Batch.IPagedEnumerable<T>, System.Action<T>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PagedEnumerableExtensions.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ForEachAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PagedEnumerableExtensions.cs
    startLine: 93
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nIterates over an <xref href=\"Microsoft.Azure.Batch.IPagedEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> sequence, invoking a synchronous delegate for each element.\n"
  remarks: >-
    This method processes elements sequentially, not concurrently.  That is, for each element in the

    sequence, the method completes execution of the delegate before processing the next element.
  example: []
  syntax:
    content: public static Task ForEachAsync<T>(this IPagedEnumerable<T> source, Action<T> body, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ForEachAsync(Of T)(source As IPagedEnumerable(Of T), body As Action(Of T), cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: source
      type: Microsoft.Azure.Batch.IPagedEnumerable{{T}}
      description: The <xref href="Microsoft.Azure.Batch.IPagedEnumerable%601" data-throw-if-not-resolved="false"></xref> to iterate over.
    - id: body
      type: System.Action{{T}}
      description: The delegate to execute for each element in <span class="paramref">source</span>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task
      description: >-
        A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the iteration operation. The task

        completes when iteration is complete.
  overload: Microsoft.Azure.Batch.PagedEnumerableExtensions.ForEachAsync*
  nameWithType.vb: PagedEnumerableExtensions.ForEachAsync(Of T)(IPagedEnumerable(Of T), Action(Of T), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.Batch.PagedEnumerableExtensions.ForEachAsync(Of T)(Microsoft.Azure.Batch.IPagedEnumerable(Of T), System.Action(Of T), System.Threading.CancellationToken)
  name.vb: ForEachAsync(Of T)(IPagedEnumerable(Of T), Action(Of T), CancellationToken)
- uid: Microsoft.Azure.Batch.PagedEnumerableExtensions.ToListAsync``1(Microsoft.Azure.Batch.IPagedEnumerable{``0},System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.PagedEnumerableExtensions.ToListAsync``1(Microsoft.Azure.Batch.IPagedEnumerable{``0},System.Threading.CancellationToken)
  id: ToListAsync``1(Microsoft.Azure.Batch.IPagedEnumerable{``0},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.Azure.Batch.PagedEnumerableExtensions
  langs:
  - csharp
  - vb
  name: ToListAsync<T>(IPagedEnumerable<T>, CancellationToken)
  nameWithType: PagedEnumerableExtensions.ToListAsync<T>(IPagedEnumerable<T>, CancellationToken)
  fullName: Microsoft.Azure.Batch.PagedEnumerableExtensions.ToListAsync<T>(Microsoft.Azure.Batch.IPagedEnumerable<T>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/PagedEnumerableExtensions.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ToListAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/PagedEnumerableExtensions.cs
    startLine: 122
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nCreates a <xref href=\"System.Collections.Generic.List%601\" data-throw-if-not-resolved=\"false\"></xref> from an <xref href=\"Microsoft.Azure.Batch.IPagedEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static Task<List<T>> ToListAsync<T>(this IPagedEnumerable<T> source, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToListAsync(Of T)(source As IPagedEnumerable(Of T), cancellationToken As CancellationToken = Nothing) As Task(Of List(Of T))
    parameters:
    - id: source
      type: Microsoft.Azure.Batch.IPagedEnumerable{{T}}
      description: The <xref href="Microsoft.Azure.Batch.IPagedEnumerable%601" data-throw-if-not-resolved="false"></xref> to create a list from.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{{T}}}
      description: >-
        A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation. The result

        of the task is a <xref href="System.Collections.Generic.List%601" data-throw-if-not-resolved="false"></xref> containing all elements of the source sequence.
  overload: Microsoft.Azure.Batch.PagedEnumerableExtensions.ToListAsync*
  nameWithType.vb: PagedEnumerableExtensions.ToListAsync(Of T)(IPagedEnumerable(Of T), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.Batch.PagedEnumerableExtensions.ToListAsync(Of T)(Microsoft.Azure.Batch.IPagedEnumerable(Of T), System.Threading.CancellationToken)
  name.vb: ToListAsync(Of T)(IPagedEnumerable(Of T), CancellationToken)
references:
- uid: Microsoft.Azure.Batch.IPagedEnumerable`1
  commentId: T:Microsoft.Azure.Batch.IPagedEnumerable`1
  isExternal: false
  name: IPagedEnumerable<T>
  nameWithType: IPagedEnumerable<T>
  fullName: Microsoft.Azure.Batch.IPagedEnumerable<T>
  nameWithType.vb: IPagedEnumerable(Of T)
  fullname.vb: Microsoft.Azure.Batch.IPagedEnumerable(Of T)
  name.vb: IPagedEnumerable(Of T)
  spec.csharp:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch
  commentId: N:Microsoft.Azure.Batch
  isExternal: false
  name: Microsoft.Azure.Batch
  nameWithType: Microsoft.Azure.Batch
  fullName: Microsoft.Azure.Batch
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.Azure.Batch.PagedEnumerableExtensions.ForEachAsync*
  commentId: Overload:Microsoft.Azure.Batch.PagedEnumerableExtensions.ForEachAsync
  isExternal: false
  name: ForEachAsync<T>
  nameWithType: PagedEnumerableExtensions.ForEachAsync<T>
  fullName: Microsoft.Azure.Batch.PagedEnumerableExtensions.ForEachAsync<T>
  nameWithType.vb: PagedEnumerableExtensions.ForEachAsync(Of T)
  fullname.vb: Microsoft.Azure.Batch.PagedEnumerableExtensions.ForEachAsync(Of T)
  name.vb: ForEachAsync(Of T)
- uid: Microsoft.Azure.Batch.IPagedEnumerable{{T}}
  commentId: T:Microsoft.Azure.Batch.IPagedEnumerable{``0}
  parent: Microsoft.Azure.Batch
  definition: Microsoft.Azure.Batch.IPagedEnumerable`1
  name: IPagedEnumerable<T>
  nameWithType: IPagedEnumerable<T>
  fullName: Microsoft.Azure.Batch.IPagedEnumerable<T>
  nameWithType.vb: IPagedEnumerable(Of T)
  fullname.vb: Microsoft.Azure.Batch.IPagedEnumerable(Of T)
  name.vb: IPagedEnumerable(Of T)
  spec.csharp:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Batch.IPagedEnumerable`1
    name: IPagedEnumerable
    nameWithType: IPagedEnumerable
    fullName: Microsoft.Azure.Batch.IPagedEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T},System.Threading.Tasks.Task}
  commentId: T:System.Func{``0,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`2
  name: Func<T, Task>
  nameWithType: Func<T, Task>
  fullName: System.Func<T, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of T, Task)
  fullname.vb: System.Func(Of T, System.Threading.Tasks.Task)
  name.vb: Func(Of T, Task)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T},System.Threading.CancellationToken,System.Threading.Tasks.Task}
  commentId: T:System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`3
  name: Func<T, CancellationToken, Task>
  nameWithType: Func<T, CancellationToken, Task>
  fullName: System.Func<T, System.Threading.CancellationToken, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of T, CancellationToken, Task)
  fullname.vb: System.Func(Of T, System.Threading.CancellationToken, System.Threading.Tasks.Task)
  name.vb: Func(Of T, CancellationToken, Task)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullname.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{{T}}
  commentId: T:System.Action{``0}
  parent: System
  definition: System.Action`1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullname.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullname.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullname.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.PagedEnumerableExtensions.ToListAsync*
  commentId: Overload:Microsoft.Azure.Batch.PagedEnumerableExtensions.ToListAsync
  isExternal: false
  name: ToListAsync<T>
  nameWithType: PagedEnumerableExtensions.ToListAsync<T>
  fullName: Microsoft.Azure.Batch.PagedEnumerableExtensions.ToListAsync<T>
  nameWithType.vb: PagedEnumerableExtensions.ToListAsync(Of T)
  fullname.vb: Microsoft.Azure.Batch.PagedEnumerableExtensions.ToListAsync(Of T)
  name.vb: ToListAsync(Of T)
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{{T}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{``0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<List<T>>
  nameWithType: Task<List<T>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<T>>
  nameWithType.vb: Task(Of List(Of T))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of T))
  name.vb: Task(Of List(Of T))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
