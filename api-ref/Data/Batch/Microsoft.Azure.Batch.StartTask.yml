### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Batch.StartTask
  commentId: T:Microsoft.Azure.Batch.StartTask
  id: StartTask
  parent: Microsoft.Azure.Batch
  children:
  - Microsoft.Azure.Batch.StartTask.#ctor
  - Microsoft.Azure.Batch.StartTask.#ctor(System.String)
  - Microsoft.Azure.Batch.StartTask.CommandLine
  - Microsoft.Azure.Batch.StartTask.EnvironmentSettings
  - Microsoft.Azure.Batch.StartTask.MaxTaskRetryCount
  - Microsoft.Azure.Batch.StartTask.ResourceFiles
  - Microsoft.Azure.Batch.StartTask.RunElevated
  - Microsoft.Azure.Batch.StartTask.WaitForSuccess
  langs:
  - csharp
  - vb
  name: StartTask
  nameWithType: StartTask
  fullName: Microsoft.Azure.Batch.StartTask
  type: Class
  source:
    remote:
      path: src/Batch/Client/Src/Generated/StartTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: StartTask
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/StartTask.cs
    startLine: 34
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nA task which is run when a compute node joins a pool in the Azure Batch service, or when the compute node is rebooted \nor reimaged.\n"
  example: []
  syntax:
    content: 'public class StartTask : ITransportObjectProvider<StartTask>, IPropertyMetadata, IModifiable, IReadOnly'
    content.vb: >-
      Public Class StartTask
          Implements ITransportObjectProvider(Of StartTask), IPropertyMetadata, IModifiable, IReadOnly
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Batch.StartTask.#ctor
  commentId: M:Microsoft.Azure.Batch.StartTask.#ctor
  id: '#ctor'
  parent: Microsoft.Azure.Batch.StartTask
  langs:
  - csharp
  - vb
  name: StartTask()
  nameWithType: StartTask.StartTask()
  fullName: Microsoft.Azure.Batch.StartTask.StartTask()
  type: Constructor
  source:
    remote:
      path: src/Batch/Client/Src/StartTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/Batch/Client/Src/StartTask.cs
    startLine: 20
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  syntax:
    content: public StartTask()
    content.vb: Public Sub New
  overload: Microsoft.Azure.Batch.StartTask.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.StartTask.#ctor(System.String)
  commentId: M:Microsoft.Azure.Batch.StartTask.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.Azure.Batch.StartTask
  langs:
  - csharp
  - vb
  name: StartTask(String)
  nameWithType: StartTask.StartTask(String)
  fullName: Microsoft.Azure.Batch.StartTask.StartTask(System.String)
  type: Constructor
  source:
    remote:
      path: src/Batch/Client/Src/Generated/StartTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/StartTask.cs
    startLine: 92
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.Azure.Batch.StartTask\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public StartTask(string commandLine)
    content.vb: Public Sub New(commandLine As String)
    parameters:
    - id: commandLine
      type: System.String
      description: The command line of the task.
  overload: Microsoft.Azure.Batch.StartTask.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.StartTask.CommandLine
  commentId: P:Microsoft.Azure.Batch.StartTask.CommandLine
  id: CommandLine
  parent: Microsoft.Azure.Batch.StartTask
  langs:
  - csharp
  - vb
  name: CommandLine
  nameWithType: StartTask.CommandLine
  fullName: Microsoft.Azure.Batch.StartTask.CommandLine
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/StartTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CommandLine
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/StartTask.cs
    startLine: 116
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets the command line of the task.\n"
  remarks: "\nThe command line does not run under a shell, and therefore cannot take advantage of shell features such as environment \nvariable expansion. If you want to take advantage of such features, you should invoke the shell in the command \nline, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux.\n"
  example: []
  syntax:
    content: public string CommandLine { get; set; }
    content.vb: Public Property CommandLine As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Batch.StartTask.CommandLine*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.StartTask.EnvironmentSettings
  commentId: P:Microsoft.Azure.Batch.StartTask.EnvironmentSettings
  id: EnvironmentSettings
  parent: Microsoft.Azure.Batch.StartTask
  langs:
  - csharp
  - vb
  name: EnvironmentSettings
  nameWithType: StartTask.EnvironmentSettings
  fullName: Microsoft.Azure.Batch.StartTask.EnvironmentSettings
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/StartTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: EnvironmentSettings
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/StartTask.cs
    startLine: 125
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets a set of environment settings for the start task.\n"
  example: []
  syntax:
    content: public IList<EnvironmentSetting> EnvironmentSettings { get; set; }
    content.vb: Public Property EnvironmentSettings As IList(Of EnvironmentSetting)
    parameters: []
    return:
      type: System.Collections.Generic.IList{Microsoft.Azure.Batch.EnvironmentSetting}
  overload: Microsoft.Azure.Batch.StartTask.EnvironmentSettings*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.StartTask.MaxTaskRetryCount
  commentId: P:Microsoft.Azure.Batch.StartTask.MaxTaskRetryCount
  id: MaxTaskRetryCount
  parent: Microsoft.Azure.Batch.StartTask
  langs:
  - csharp
  - vb
  name: MaxTaskRetryCount
  nameWithType: StartTask.MaxTaskRetryCount
  fullName: Microsoft.Azure.Batch.StartTask.MaxTaskRetryCount
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/StartTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: MaxTaskRetryCount
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/StartTask.cs
    startLine: 137
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets the maximum number of retries for the task.\n"
  example: []
  syntax:
    content: public int ? MaxTaskRetryCount { get; set; }
    content.vb: Public Property MaxTaskRetryCount As Integer?
    parameters: []
    return:
      type: System.Nullable{System.Int32}
  overload: Microsoft.Azure.Batch.StartTask.MaxTaskRetryCount*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.StartTask.ResourceFiles
  commentId: P:Microsoft.Azure.Batch.StartTask.ResourceFiles
  id: ResourceFiles
  parent: Microsoft.Azure.Batch.StartTask
  langs:
  - csharp
  - vb
  name: ResourceFiles
  nameWithType: StartTask.ResourceFiles
  fullName: Microsoft.Azure.Batch.StartTask.ResourceFiles
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/StartTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ResourceFiles
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/StartTask.cs
    startLine: 147
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets a list of files that the Batch service will download to the compute node before running the command \nline.\n"
  example: []
  syntax:
    content: public IList<ResourceFile> ResourceFiles { get; set; }
    content.vb: Public Property ResourceFiles As IList(Of ResourceFile)
    parameters: []
    return:
      type: System.Collections.Generic.IList{Microsoft.Azure.Batch.ResourceFile}
  overload: Microsoft.Azure.Batch.StartTask.ResourceFiles*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.StartTask.RunElevated
  commentId: P:Microsoft.Azure.Batch.StartTask.RunElevated
  id: RunElevated
  parent: Microsoft.Azure.Batch.StartTask
  langs:
  - csharp
  - vb
  name: RunElevated
  nameWithType: StartTask.RunElevated
  fullName: Microsoft.Azure.Batch.StartTask.RunElevated
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/StartTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: RunElevated
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/StartTask.cs
    startLine: 159
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets whether to run the task in elevated mode.\n"
  example: []
  syntax:
    content: public bool ? RunElevated { get; set; }
    content.vb: Public Property RunElevated As Boolean?
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
  overload: Microsoft.Azure.Batch.StartTask.RunElevated*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.StartTask.WaitForSuccess
  commentId: P:Microsoft.Azure.Batch.StartTask.WaitForSuccess
  id: WaitForSuccess
  parent: Microsoft.Azure.Batch.StartTask
  langs:
  - csharp
  - vb
  name: WaitForSuccess
  nameWithType: StartTask.WaitForSuccess
  fullName: Microsoft.Azure.Batch.StartTask.WaitForSuccess
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/StartTask.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: WaitForSuccess
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/StartTask.cs
    startLine: 172
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets a value indicating whether the Batch service should wait for the start task to complete before scheduling \nany tasks on the compute node.\n"
  remarks: "\nIf this is not specified, the default is false.\n"
  example: []
  syntax:
    content: public bool ? WaitForSuccess { get; set; }
    content.vb: Public Property WaitForSuccess As Boolean?
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
  overload: Microsoft.Azure.Batch.StartTask.WaitForSuccess*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Azure.Batch
  commentId: N:Microsoft.Azure.Batch
  isExternal: false
  name: Microsoft.Azure.Batch
  nameWithType: Microsoft.Azure.Batch
  fullName: Microsoft.Azure.Batch
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Batch.StartTask.#ctor*
  commentId: Overload:Microsoft.Azure.Batch.StartTask.#ctor
  isExternal: false
  name: StartTask
  nameWithType: StartTask.StartTask
  fullName: Microsoft.Azure.Batch.StartTask.StartTask
- uid: Microsoft.Azure.Batch.StartTask
  commentId: T:Microsoft.Azure.Batch.StartTask
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: StartTask
  nameWithType: StartTask
  fullName: Microsoft.Azure.Batch.StartTask
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Azure.Batch.StartTask.CommandLine*
  commentId: Overload:Microsoft.Azure.Batch.StartTask.CommandLine
  isExternal: false
  name: CommandLine
  nameWithType: StartTask.CommandLine
  fullName: Microsoft.Azure.Batch.StartTask.CommandLine
- uid: Microsoft.Azure.Batch.StartTask.EnvironmentSettings*
  commentId: Overload:Microsoft.Azure.Batch.StartTask.EnvironmentSettings
  isExternal: false
  name: EnvironmentSettings
  nameWithType: StartTask.EnvironmentSettings
  fullName: Microsoft.Azure.Batch.StartTask.EnvironmentSettings
- uid: System.Collections.Generic.IList{Microsoft.Azure.Batch.EnvironmentSetting}
  commentId: T:System.Collections.Generic.IList{Microsoft.Azure.Batch.EnvironmentSetting}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<EnvironmentSetting>
  nameWithType: IList<EnvironmentSetting>
  fullName: System.Collections.Generic.IList<Microsoft.Azure.Batch.EnvironmentSetting>
  nameWithType.vb: IList(Of EnvironmentSetting)
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.Azure.Batch.EnvironmentSetting)
  name.vb: IList(Of EnvironmentSetting)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.EnvironmentSetting
    name: EnvironmentSetting
    nameWithType: EnvironmentSetting
    fullName: Microsoft.Azure.Batch.EnvironmentSetting
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.EnvironmentSetting
    name: EnvironmentSetting
    nameWithType: EnvironmentSetting
    fullName: Microsoft.Azure.Batch.EnvironmentSetting
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Azure.Batch.StartTask.MaxTaskRetryCount*
  commentId: Overload:Microsoft.Azure.Batch.StartTask.MaxTaskRetryCount
  isExternal: false
  name: MaxTaskRetryCount
  nameWithType: StartTask.MaxTaskRetryCount
  fullName: Microsoft.Azure.Batch.StartTask.MaxTaskRetryCount
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullname.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.StartTask.ResourceFiles*
  commentId: Overload:Microsoft.Azure.Batch.StartTask.ResourceFiles
  isExternal: false
  name: ResourceFiles
  nameWithType: StartTask.ResourceFiles
  fullName: Microsoft.Azure.Batch.StartTask.ResourceFiles
- uid: System.Collections.Generic.IList{Microsoft.Azure.Batch.ResourceFile}
  commentId: T:System.Collections.Generic.IList{Microsoft.Azure.Batch.ResourceFile}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<ResourceFile>
  nameWithType: IList<ResourceFile>
  fullName: System.Collections.Generic.IList<Microsoft.Azure.Batch.ResourceFile>
  nameWithType.vb: IList(Of ResourceFile)
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.Azure.Batch.ResourceFile)
  name.vb: IList(Of ResourceFile)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.ResourceFile
    name: ResourceFile
    nameWithType: ResourceFile
    fullName: Microsoft.Azure.Batch.ResourceFile
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.ResourceFile
    name: ResourceFile
    nameWithType: ResourceFile
    fullName: Microsoft.Azure.Batch.ResourceFile
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.StartTask.RunElevated*
  commentId: Overload:Microsoft.Azure.Batch.StartTask.RunElevated
  isExternal: false
  name: RunElevated
  nameWithType: StartTask.RunElevated
  fullName: Microsoft.Azure.Batch.StartTask.RunElevated
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullname.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.StartTask.WaitForSuccess*
  commentId: Overload:Microsoft.Azure.Batch.StartTask.WaitForSuccess
  isExternal: false
  name: WaitForSuccess
  nameWithType: StartTask.WaitForSuccess
  fullName: Microsoft.Azure.Batch.StartTask.WaitForSuccess
