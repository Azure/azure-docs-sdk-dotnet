### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Batch.Protocol.IBatchRequest`1
  commentId: T:Microsoft.Azure.Batch.Protocol.IBatchRequest`1
  id: IBatchRequest`1
  parent: Microsoft.Azure.Batch.Protocol
  children:
  - Microsoft.Azure.Batch.Protocol.IBatchRequest`1.ExecuteRequestAsync
  langs:
  - csharp
  - vb
  name: IBatchRequest<TResponse>
  nameWithType: IBatchRequest<TResponse>
  fullName: Microsoft.Azure.Batch.Protocol.IBatchRequest<TResponse>
  type: Interface
  source:
    remote:
      path: src/Batch/Client/Src/Protocol/IBatchRequest.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: IBatchRequest
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Protocol/IBatchRequest.cs
    startLine: 68
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol
  summary: "\nRepresents a request to the Batch Service with a particular response type.\n"
  example: []
  syntax:
    content: 'public interface IBatchRequest<TResponse> : IBatchRequest'
    content.vb: >-
      Public Interface IBatchRequest(Of TResponse)
          Inherits IBatchRequest
    typeParameters:
    - id: TResponse
      description: The type of the response returned by the Batch service.
  inheritedMembers:
  - Microsoft.Azure.Batch.Protocol.IBatchRequest.RestClient
  - Microsoft.Azure.Batch.Protocol.IBatchRequest.Options
  - Microsoft.Azure.Batch.Protocol.IBatchRequest.RetryPolicy
  - Microsoft.Azure.Batch.Protocol.IBatchRequest.OperationContext
  - Microsoft.Azure.Batch.Protocol.IBatchRequest.Timeout
  - Microsoft.Azure.Batch.Protocol.IBatchRequest.CancellationToken
  - Microsoft.Azure.Batch.Protocol.IBatchRequest.ClientRequestIdProvider
  nameWithType.vb: IBatchRequest(Of TResponse)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Microsoft.Azure.Batch.Protocol.IBatchRequest(Of TResponse)
  name.vb: IBatchRequest(Of TResponse)
- uid: Microsoft.Azure.Batch.Protocol.IBatchRequest`1.ExecuteRequestAsync
  commentId: M:Microsoft.Azure.Batch.Protocol.IBatchRequest`1.ExecuteRequestAsync
  id: ExecuteRequestAsync
  parent: Microsoft.Azure.Batch.Protocol.IBatchRequest`1
  langs:
  - csharp
  - vb
  name: ExecuteRequestAsync()
  nameWithType: IBatchRequest<TResponse>.ExecuteRequestAsync()
  fullName: Microsoft.Azure.Batch.Protocol.IBatchRequest<TResponse>.ExecuteRequestAsync()
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/Protocol/IBatchRequest.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ExecuteRequestAsync
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Protocol/IBatchRequest.cs
    startLine: 74
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol
  summary: "\nExecutes the request.\n"
  example: []
  syntax:
    content: Task<TResponse> ExecuteRequestAsync()
    content.vb: Function ExecuteRequestAsync As Task(Of TResponse)
    return:
      type: System.Threading.Tasks.Task{{TResponse}}
      description: An asynchronous operation of return type <span class="typeparamref">TResponse</span>.
  overload: Microsoft.Azure.Batch.Protocol.IBatchRequest`1.ExecuteRequestAsync*
  nameWithType.vb: IBatchRequest(Of TResponse).ExecuteRequestAsync()
  fullName.vb: Microsoft.Azure.Batch.Protocol.IBatchRequest(Of TResponse).ExecuteRequestAsync()
references:
- uid: Microsoft.Azure.Batch.Protocol
  commentId: N:Microsoft.Azure.Batch.Protocol
  isExternal: false
  name: Microsoft.Azure.Batch.Protocol
  nameWithType: Microsoft.Azure.Batch.Protocol
  fullName: Microsoft.Azure.Batch.Protocol
- uid: Microsoft.Azure.Batch.Protocol.IBatchRequest.RestClient
  commentId: P:Microsoft.Azure.Batch.Protocol.IBatchRequest.RestClient
  parent: Microsoft.Azure.Batch.Protocol.IBatchRequest
  isExternal: false
  name: RestClient
  nameWithType: IBatchRequest.RestClient
  fullName: Microsoft.Azure.Batch.Protocol.IBatchRequest.RestClient
- uid: Microsoft.Azure.Batch.Protocol.IBatchRequest.Options
  commentId: P:Microsoft.Azure.Batch.Protocol.IBatchRequest.Options
  parent: Microsoft.Azure.Batch.Protocol.IBatchRequest
  isExternal: false
  name: Options
  nameWithType: IBatchRequest.Options
  fullName: Microsoft.Azure.Batch.Protocol.IBatchRequest.Options
- uid: Microsoft.Azure.Batch.Protocol.IBatchRequest.RetryPolicy
  commentId: P:Microsoft.Azure.Batch.Protocol.IBatchRequest.RetryPolicy
  parent: Microsoft.Azure.Batch.Protocol.IBatchRequest
  isExternal: false
  name: RetryPolicy
  nameWithType: IBatchRequest.RetryPolicy
  fullName: Microsoft.Azure.Batch.Protocol.IBatchRequest.RetryPolicy
- uid: Microsoft.Azure.Batch.Protocol.IBatchRequest.OperationContext
  commentId: P:Microsoft.Azure.Batch.Protocol.IBatchRequest.OperationContext
  parent: Microsoft.Azure.Batch.Protocol.IBatchRequest
  isExternal: false
  name: OperationContext
  nameWithType: IBatchRequest.OperationContext
  fullName: Microsoft.Azure.Batch.Protocol.IBatchRequest.OperationContext
- uid: Microsoft.Azure.Batch.Protocol.IBatchRequest.Timeout
  commentId: P:Microsoft.Azure.Batch.Protocol.IBatchRequest.Timeout
  parent: Microsoft.Azure.Batch.Protocol.IBatchRequest
  isExternal: false
  name: Timeout
  nameWithType: IBatchRequest.Timeout
  fullName: Microsoft.Azure.Batch.Protocol.IBatchRequest.Timeout
- uid: Microsoft.Azure.Batch.Protocol.IBatchRequest.CancellationToken
  commentId: P:Microsoft.Azure.Batch.Protocol.IBatchRequest.CancellationToken
  parent: Microsoft.Azure.Batch.Protocol.IBatchRequest
  isExternal: false
  name: CancellationToken
  nameWithType: IBatchRequest.CancellationToken
  fullName: Microsoft.Azure.Batch.Protocol.IBatchRequest.CancellationToken
- uid: Microsoft.Azure.Batch.Protocol.IBatchRequest.ClientRequestIdProvider
  commentId: P:Microsoft.Azure.Batch.Protocol.IBatchRequest.ClientRequestIdProvider
  parent: Microsoft.Azure.Batch.Protocol.IBatchRequest
  isExternal: false
  name: ClientRequestIdProvider
  nameWithType: IBatchRequest.ClientRequestIdProvider
  fullName: Microsoft.Azure.Batch.Protocol.IBatchRequest.ClientRequestIdProvider
- uid: Microsoft.Azure.Batch.Protocol.IBatchRequest
  commentId: T:Microsoft.Azure.Batch.Protocol.IBatchRequest
  parent: Microsoft.Azure.Batch.Protocol
  isExternal: false
  name: IBatchRequest
  nameWithType: IBatchRequest
  fullName: Microsoft.Azure.Batch.Protocol.IBatchRequest
- uid: Microsoft.Azure.Batch.Protocol.IBatchRequest`1.ExecuteRequestAsync*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.IBatchRequest`1.ExecuteRequestAsync
  isExternal: false
  name: ExecuteRequestAsync
  nameWithType: IBatchRequest.ExecuteRequestAsync
  fullName: Microsoft.Azure.Batch.Protocol.IBatchRequest.ExecuteRequestAsync
- uid: System.Threading.Tasks.Task{{TResponse}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TResponse>
  nameWithType: Task<TResponse>
  fullName: System.Threading.Tasks.Task<TResponse>
  nameWithType.vb: Task(Of TResponse)
  fullname.vb: System.Threading.Tasks.Task(Of TResponse)
  name.vb: Task(Of TResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
