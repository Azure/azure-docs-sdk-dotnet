### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Batch.Protocol.Models.Certificate
  commentId: T:Microsoft.Azure.Batch.Protocol.Models.Certificate
  id: Certificate
  parent: Microsoft.Azure.Batch.Protocol.Models
  children:
  - Microsoft.Azure.Batch.Protocol.Models.Certificate.#ctor
  - Microsoft.Azure.Batch.Protocol.Models.Certificate.#ctor(System.String,System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Protocol.Models.CertificateState},System.Nullable{System.DateTime},System.Nullable{Microsoft.Azure.Batch.Protocol.Models.CertificateState},System.Nullable{System.DateTime},System.String,Microsoft.Azure.Batch.Protocol.Models.DeleteCertificateError)
  - Microsoft.Azure.Batch.Protocol.Models.Certificate.DeleteCertificateError
  - Microsoft.Azure.Batch.Protocol.Models.Certificate.PreviousState
  - Microsoft.Azure.Batch.Protocol.Models.Certificate.PreviousStateTransitionTime
  - Microsoft.Azure.Batch.Protocol.Models.Certificate.PublicData
  - Microsoft.Azure.Batch.Protocol.Models.Certificate.State
  - Microsoft.Azure.Batch.Protocol.Models.Certificate.StateTransitionTime
  - Microsoft.Azure.Batch.Protocol.Models.Certificate.Thumbprint
  - Microsoft.Azure.Batch.Protocol.Models.Certificate.ThumbprintAlgorithm
  - Microsoft.Azure.Batch.Protocol.Models.Certificate.Url
  langs:
  - csharp
  - vb
  name: Certificate
  nameWithType: Certificate
  fullName: Microsoft.Azure.Batch.Protocol.Models.Certificate
  type: Class
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/Certificate.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Certificate
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/Certificate.cs
    startLine: 26
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nA certificate that can be installed on compute nodes and can be used\nto authenticate operations on the machine.\n"
  example: []
  syntax:
    content: public class Certificate
    content.vb: Public Class Certificate
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Batch.Protocol.Models.Certificate.#ctor
  commentId: M:Microsoft.Azure.Batch.Protocol.Models.Certificate.#ctor
  id: '#ctor'
  parent: Microsoft.Azure.Batch.Protocol.Models.Certificate
  langs:
  - csharp
  - vb
  name: Certificate()
  nameWithType: Certificate.Certificate()
  fullName: Microsoft.Azure.Batch.Protocol.Models.Certificate.Certificate()
  type: Constructor
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/Certificate.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/Certificate.cs
    startLine: 31
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nInitializes a new instance of the Certificate class.\n"
  example: []
  syntax:
    content: public Certificate()
    content.vb: Public Sub New
  overload: Microsoft.Azure.Batch.Protocol.Models.Certificate.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.Certificate.#ctor(System.String,System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Protocol.Models.CertificateState},System.Nullable{System.DateTime},System.Nullable{Microsoft.Azure.Batch.Protocol.Models.CertificateState},System.Nullable{System.DateTime},System.String,Microsoft.Azure.Batch.Protocol.Models.DeleteCertificateError)
  commentId: M:Microsoft.Azure.Batch.Protocol.Models.Certificate.#ctor(System.String,System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Protocol.Models.CertificateState},System.Nullable{System.DateTime},System.Nullable{Microsoft.Azure.Batch.Protocol.Models.CertificateState},System.Nullable{System.DateTime},System.String,Microsoft.Azure.Batch.Protocol.Models.DeleteCertificateError)
  id: '#ctor(System.String,System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Protocol.Models.CertificateState},System.Nullable{System.DateTime},System.Nullable{Microsoft.Azure.Batch.Protocol.Models.CertificateState},System.Nullable{System.DateTime},System.String,Microsoft.Azure.Batch.Protocol.Models.DeleteCertificateError)'
  parent: Microsoft.Azure.Batch.Protocol.Models.Certificate
  langs:
  - csharp
  - vb
  name: Certificate(String, String, String, Nullable<CertificateState>, Nullable<DateTime>, Nullable<CertificateState>, Nullable<DateTime>, String, DeleteCertificateError)
  nameWithType: Certificate.Certificate(String, String, String, Nullable<CertificateState>, Nullable<DateTime>, Nullable<CertificateState>, Nullable<DateTime>, String, DeleteCertificateError)
  fullName: Microsoft.Azure.Batch.Protocol.Models.Certificate.Certificate(System.String, System.String, System.String, System.Nullable<Microsoft.Azure.Batch.Protocol.Models.CertificateState>, System.Nullable<System.DateTime>, System.Nullable<Microsoft.Azure.Batch.Protocol.Models.CertificateState>, System.Nullable<System.DateTime>, System.String, Microsoft.Azure.Batch.Protocol.Models.DeleteCertificateError)
  type: Constructor
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/Certificate.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/Certificate.cs
    startLine: 53
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nInitializes a new instance of the Certificate class.\n"
  example: []
  syntax:
    content: public Certificate(string thumbprint = null, string thumbprintAlgorithm = null, string url = null, CertificateState? state = null, DateTime? stateTransitionTime = null, CertificateState? previousState = null, DateTime? previousStateTransitionTime = null, string publicData = null, DeleteCertificateError deleteCertificateError = null)
    content.vb: Public Sub New(thumbprint As String = Nothing, thumbprintAlgorithm As String = Nothing, url As String = Nothing, state As CertificateState? = Nothing, stateTransitionTime As Date? = Nothing, previousState As CertificateState? = Nothing, previousStateTransitionTime As Date? = Nothing, publicData As String = Nothing, deleteCertificateError As DeleteCertificateError = Nothing)
    parameters:
    - id: thumbprint
      type: System.String
      description: >-
        The X.509 thumbprint of the certificate.

        This is a sequence of up to 40 hex digits (it may include spaces

        but these are removed).
    - id: thumbprintAlgorithm
      type: System.String
      description: >-
        The algorithm used to derive the

        thumbprint. This must be sha1.
    - id: url
      type: System.String
      description: The URL of the certificate.
    - id: state
      type: System.Nullable{Microsoft.Azure.Batch.Protocol.Models.CertificateState}
      description: The current state of the certificate.
    - id: stateTransitionTime
      type: System.Nullable{System.DateTime}
      description: >-
        The time at which the

        certificate entered its current state.
    - id: previousState
      type: System.Nullable{Microsoft.Azure.Batch.Protocol.Models.CertificateState}
      description: >-
        The previous state of the

        certificate.
    - id: previousStateTransitionTime
      type: System.Nullable{System.DateTime}
      description: >-
        The time at which the

        certificate entered its previous state.
    - id: publicData
      type: System.String
      description: >-
        The public part of the certificate as a

        base-64 encoded .cer file.
    - id: deleteCertificateError
      type: Microsoft.Azure.Batch.Protocol.Models.DeleteCertificateError
      description: >-
        The error that occurred on

        the last attempt to delete this certificate.
  overload: Microsoft.Azure.Batch.Protocol.Models.Certificate.#ctor*
  nameWithType.vb: Certificate.Certificate(String, String, String, Nullable(Of CertificateState), Nullable(Of DateTime), Nullable(Of CertificateState), Nullable(Of DateTime), String, DeleteCertificateError)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.Protocol.Models.Certificate.Certificate(System.String, System.String, System.String, System.Nullable(Of Microsoft.Azure.Batch.Protocol.Models.CertificateState), System.Nullable(Of System.DateTime), System.Nullable(Of Microsoft.Azure.Batch.Protocol.Models.CertificateState), System.Nullable(Of System.DateTime), System.String, Microsoft.Azure.Batch.Protocol.Models.DeleteCertificateError)
  name.vb: Certificate(String, String, String, Nullable(Of CertificateState), Nullable(Of DateTime), Nullable(Of CertificateState), Nullable(Of DateTime), String, DeleteCertificateError)
- uid: Microsoft.Azure.Batch.Protocol.Models.Certificate.Thumbprint
  commentId: P:Microsoft.Azure.Batch.Protocol.Models.Certificate.Thumbprint
  id: Thumbprint
  parent: Microsoft.Azure.Batch.Protocol.Models.Certificate
  langs:
  - csharp
  - vb
  name: Thumbprint
  nameWithType: Certificate.Thumbprint
  fullName: Microsoft.Azure.Batch.Protocol.Models.Certificate.Thumbprint
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/Certificate.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Thumbprint
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/Certificate.cs
    startLine: 71
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nGets or sets the X.509 thumbprint of the certificate. This is a\nsequence of up to 40 hex digits (it may include spaces but these\nare removed).\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "thumbprint")]

      public string Thumbprint { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="thumbprint")>

      Public Property Thumbprint As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Batch.Protocol.Models.Certificate.Thumbprint*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: thumbprint
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.Certificate.ThumbprintAlgorithm
  commentId: P:Microsoft.Azure.Batch.Protocol.Models.Certificate.ThumbprintAlgorithm
  id: ThumbprintAlgorithm
  parent: Microsoft.Azure.Batch.Protocol.Models.Certificate
  langs:
  - csharp
  - vb
  name: ThumbprintAlgorithm
  nameWithType: Certificate.ThumbprintAlgorithm
  fullName: Microsoft.Azure.Batch.Protocol.Models.Certificate.ThumbprintAlgorithm
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/Certificate.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ThumbprintAlgorithm
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/Certificate.cs
    startLine: 78
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nGets or sets the algorithm used to derive the thumbprint. This\nmust be sha1.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "thumbprintAlgorithm")]

      public string ThumbprintAlgorithm { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="thumbprintAlgorithm")>

      Public Property ThumbprintAlgorithm As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Batch.Protocol.Models.Certificate.ThumbprintAlgorithm*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: thumbprintAlgorithm
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.Certificate.Url
  commentId: P:Microsoft.Azure.Batch.Protocol.Models.Certificate.Url
  id: Url
  parent: Microsoft.Azure.Batch.Protocol.Models.Certificate
  langs:
  - csharp
  - vb
  name: Url
  nameWithType: Certificate.Url
  fullName: Microsoft.Azure.Batch.Protocol.Models.Certificate.Url
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/Certificate.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Url
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/Certificate.cs
    startLine: 84
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nGets or sets the URL of the certificate.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "url")]

      public string Url { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="url")>

      Public Property Url As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Batch.Protocol.Models.Certificate.Url*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: url
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.Certificate.State
  commentId: P:Microsoft.Azure.Batch.Protocol.Models.Certificate.State
  id: State
  parent: Microsoft.Azure.Batch.Protocol.Models.Certificate
  langs:
  - csharp
  - vb
  name: State
  nameWithType: Certificate.State
  fullName: Microsoft.Azure.Batch.Protocol.Models.Certificate.State
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/Certificate.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: State
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/Certificate.cs
    startLine: 93
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nGets or sets the current state of the certificate.\n"
  remarks: "\nPossible values include: 'active', 'deleting', 'deletefailed'\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "state")]

      public CertificateState? State { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="state")>

      Public Property State As CertificateState?
    parameters: []
    return:
      type: System.Nullable{Microsoft.Azure.Batch.Protocol.Models.CertificateState}
  overload: Microsoft.Azure.Batch.Protocol.Models.Certificate.State*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: state
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.Certificate.StateTransitionTime
  commentId: P:Microsoft.Azure.Batch.Protocol.Models.Certificate.StateTransitionTime
  id: StateTransitionTime
  parent: Microsoft.Azure.Batch.Protocol.Models.Certificate
  langs:
  - csharp
  - vb
  name: StateTransitionTime
  nameWithType: Certificate.StateTransitionTime
  fullName: Microsoft.Azure.Batch.Protocol.Models.Certificate.StateTransitionTime
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/Certificate.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: StateTransitionTime
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/Certificate.cs
    startLine: 100
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nGets or sets the time at which the certificate entered its current\nstate.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "stateTransitionTime")]

      public DateTime? StateTransitionTime { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="stateTransitionTime")>

      Public Property StateTransitionTime As Date?
    parameters: []
    return:
      type: System.Nullable{System.DateTime}
  overload: Microsoft.Azure.Batch.Protocol.Models.Certificate.StateTransitionTime*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: stateTransitionTime
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.Certificate.PreviousState
  commentId: P:Microsoft.Azure.Batch.Protocol.Models.Certificate.PreviousState
  id: PreviousState
  parent: Microsoft.Azure.Batch.Protocol.Models.Certificate
  langs:
  - csharp
  - vb
  name: PreviousState
  nameWithType: Certificate.PreviousState
  fullName: Microsoft.Azure.Batch.Protocol.Models.Certificate.PreviousState
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/Certificate.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: PreviousState
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/Certificate.cs
    startLine: 111
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nGets or sets the previous state of the certificate.\n"
  remarks: "\nThis property is not set if the certificate is in its initial\nActive state. Possible values include: 'active', 'deleting',\n'deletefailed'\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "previousState")]

      public CertificateState? PreviousState { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="previousState")>

      Public Property PreviousState As CertificateState?
    parameters: []
    return:
      type: System.Nullable{Microsoft.Azure.Batch.Protocol.Models.CertificateState}
  overload: Microsoft.Azure.Batch.Protocol.Models.Certificate.PreviousState*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: previousState
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.Certificate.PreviousStateTransitionTime
  commentId: P:Microsoft.Azure.Batch.Protocol.Models.Certificate.PreviousStateTransitionTime
  id: PreviousStateTransitionTime
  parent: Microsoft.Azure.Batch.Protocol.Models.Certificate
  langs:
  - csharp
  - vb
  name: PreviousStateTransitionTime
  nameWithType: Certificate.PreviousStateTransitionTime
  fullName: Microsoft.Azure.Batch.Protocol.Models.Certificate.PreviousStateTransitionTime
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/Certificate.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: PreviousStateTransitionTime
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/Certificate.cs
    startLine: 122
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nGets or sets the time at which the certificate entered its\nprevious state.\n"
  remarks: "\nThis property is not set if the certificate is in its initial\nActive state.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "previousStateTransitionTime")]

      public DateTime? PreviousStateTransitionTime { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="previousStateTransitionTime")>

      Public Property PreviousStateTransitionTime As Date?
    parameters: []
    return:
      type: System.Nullable{System.DateTime}
  overload: Microsoft.Azure.Batch.Protocol.Models.Certificate.PreviousStateTransitionTime*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: previousStateTransitionTime
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.Certificate.PublicData
  commentId: P:Microsoft.Azure.Batch.Protocol.Models.Certificate.PublicData
  id: PublicData
  parent: Microsoft.Azure.Batch.Protocol.Models.Certificate
  langs:
  - csharp
  - vb
  name: PublicData
  nameWithType: Certificate.PublicData
  fullName: Microsoft.Azure.Batch.Protocol.Models.Certificate.PublicData
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/Certificate.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: PublicData
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/Certificate.cs
    startLine: 129
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nGets or sets the public part of the certificate as a base-64\nencoded .cer file.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "publicData")]

      public string PublicData { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="publicData")>

      Public Property PublicData As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Batch.Protocol.Models.Certificate.PublicData*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: publicData
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.Certificate.DeleteCertificateError
  commentId: P:Microsoft.Azure.Batch.Protocol.Models.Certificate.DeleteCertificateError
  id: DeleteCertificateError
  parent: Microsoft.Azure.Batch.Protocol.Models.Certificate
  langs:
  - csharp
  - vb
  name: DeleteCertificateError
  nameWithType: Certificate.DeleteCertificateError
  fullName: Microsoft.Azure.Batch.Protocol.Models.Certificate.DeleteCertificateError
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/Certificate.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DeleteCertificateError
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/Certificate.cs
    startLine: 140
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nGets or sets the error that occurred on the last attempt to delete\nthis certificate.\n"
  remarks: "\nThis property is set only if the certificate is in the\nDeleteFailed state.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "deleteCertificateError")]

      public DeleteCertificateError DeleteCertificateError { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="deleteCertificateError")>

      Public Property DeleteCertificateError As DeleteCertificateError
    parameters: []
    return:
      type: Microsoft.Azure.Batch.Protocol.Models.DeleteCertificateError
  overload: Microsoft.Azure.Batch.Protocol.Models.Certificate.DeleteCertificateError*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: deleteCertificateError
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Azure.Batch.Protocol.Models
  commentId: N:Microsoft.Azure.Batch.Protocol.Models
  isExternal: false
  name: Microsoft.Azure.Batch.Protocol.Models
  nameWithType: Microsoft.Azure.Batch.Protocol.Models
  fullName: Microsoft.Azure.Batch.Protocol.Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Batch.Protocol.Models.Certificate.#ctor*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.Certificate.#ctor
  isExternal: false
  name: Certificate
  nameWithType: Certificate.Certificate
  fullName: Microsoft.Azure.Batch.Protocol.Models.Certificate.Certificate
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Nullable{Microsoft.Azure.Batch.Protocol.Models.CertificateState}
  commentId: T:System.Nullable{Microsoft.Azure.Batch.Protocol.Models.CertificateState}
  parent: System
  definition: System.Nullable`1
  name: Nullable<CertificateState>
  nameWithType: Nullable<CertificateState>
  fullName: System.Nullable<Microsoft.Azure.Batch.Protocol.Models.CertificateState>
  nameWithType.vb: Nullable(Of CertificateState)
  fullname.vb: System.Nullable(Of Microsoft.Azure.Batch.Protocol.Models.CertificateState)
  name.vb: Nullable(Of CertificateState)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.Protocol.Models.CertificateState
    name: CertificateState
    nameWithType: CertificateState
    fullName: Microsoft.Azure.Batch.Protocol.Models.CertificateState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.Protocol.Models.CertificateState
    name: CertificateState
    nameWithType: CertificateState
    fullName: Microsoft.Azure.Batch.Protocol.Models.CertificateState
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.DateTime}
  commentId: T:System.Nullable{System.DateTime}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<System.DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullname.vb: System.Nullable(Of System.DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.Protocol.Models.DeleteCertificateError
  commentId: T:Microsoft.Azure.Batch.Protocol.Models.DeleteCertificateError
  parent: Microsoft.Azure.Batch.Protocol.Models
  isExternal: false
  name: DeleteCertificateError
  nameWithType: DeleteCertificateError
  fullName: Microsoft.Azure.Batch.Protocol.Models.DeleteCertificateError
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.Protocol.Models.Certificate.Thumbprint*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.Certificate.Thumbprint
  isExternal: false
  name: Thumbprint
  nameWithType: Certificate.Thumbprint
  fullName: Microsoft.Azure.Batch.Protocol.Models.Certificate.Thumbprint
- uid: Microsoft.Azure.Batch.Protocol.Models.Certificate.ThumbprintAlgorithm*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.Certificate.ThumbprintAlgorithm
  isExternal: false
  name: ThumbprintAlgorithm
  nameWithType: Certificate.ThumbprintAlgorithm
  fullName: Microsoft.Azure.Batch.Protocol.Models.Certificate.ThumbprintAlgorithm
- uid: Microsoft.Azure.Batch.Protocol.Models.Certificate.Url*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.Certificate.Url
  isExternal: false
  name: Url
  nameWithType: Certificate.Url
  fullName: Microsoft.Azure.Batch.Protocol.Models.Certificate.Url
- uid: Microsoft.Azure.Batch.Protocol.Models.Certificate.State*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.Certificate.State
  isExternal: false
  name: State
  nameWithType: Certificate.State
  fullName: Microsoft.Azure.Batch.Protocol.Models.Certificate.State
- uid: Microsoft.Azure.Batch.Protocol.Models.Certificate.StateTransitionTime*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.Certificate.StateTransitionTime
  isExternal: false
  name: StateTransitionTime
  nameWithType: Certificate.StateTransitionTime
  fullName: Microsoft.Azure.Batch.Protocol.Models.Certificate.StateTransitionTime
- uid: Microsoft.Azure.Batch.Protocol.Models.Certificate.PreviousState*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.Certificate.PreviousState
  isExternal: false
  name: PreviousState
  nameWithType: Certificate.PreviousState
  fullName: Microsoft.Azure.Batch.Protocol.Models.Certificate.PreviousState
- uid: Microsoft.Azure.Batch.Protocol.Models.Certificate.PreviousStateTransitionTime*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.Certificate.PreviousStateTransitionTime
  isExternal: false
  name: PreviousStateTransitionTime
  nameWithType: Certificate.PreviousStateTransitionTime
  fullName: Microsoft.Azure.Batch.Protocol.Models.Certificate.PreviousStateTransitionTime
- uid: Microsoft.Azure.Batch.Protocol.Models.Certificate.PublicData*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.Certificate.PublicData
  isExternal: false
  name: PublicData
  nameWithType: Certificate.PublicData
  fullName: Microsoft.Azure.Batch.Protocol.Models.Certificate.PublicData
- uid: Microsoft.Azure.Batch.Protocol.Models.Certificate.DeleteCertificateError*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.Certificate.DeleteCertificateError
  isExternal: false
  name: DeleteCertificateError
  nameWithType: Certificate.DeleteCertificateError
  fullName: Microsoft.Azure.Batch.Protocol.Models.Certificate.DeleteCertificateError
