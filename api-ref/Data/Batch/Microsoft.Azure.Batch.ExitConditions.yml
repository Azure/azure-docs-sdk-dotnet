### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Batch.ExitConditions
  commentId: T:Microsoft.Azure.Batch.ExitConditions
  id: ExitConditions
  parent: Microsoft.Azure.Batch
  children:
  - Microsoft.Azure.Batch.ExitConditions.#ctor
  - Microsoft.Azure.Batch.ExitConditions.Default
  - Microsoft.Azure.Batch.ExitConditions.ExitCodeRanges
  - Microsoft.Azure.Batch.ExitConditions.ExitCodes
  - Microsoft.Azure.Batch.ExitConditions.SchedulingError
  langs:
  - csharp
  - vb
  name: ExitConditions
  nameWithType: ExitConditions
  fullName: Microsoft.Azure.Batch.ExitConditions
  type: Class
  source:
    remote:
      path: src/Batch/Client/Src/Generated/ExitConditions.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ExitConditions
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/ExitConditions.cs
    startLine: 33
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nHow the Batch service should respond when a task completes.\n"
  example: []
  syntax:
    content: 'public class ExitConditions : ITransportObjectProvider<ExitConditions>, IPropertyMetadata, IModifiable, IReadOnly'
    content.vb: >-
      Public Class ExitConditions
          Implements ITransportObjectProvider(Of ExitConditions), IPropertyMetadata, IModifiable, IReadOnly
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Batch.ExitConditions.#ctor
  commentId: M:Microsoft.Azure.Batch.ExitConditions.#ctor
  id: '#ctor'
  parent: Microsoft.Azure.Batch.ExitConditions
  langs:
  - csharp
  - vb
  name: ExitConditions()
  nameWithType: ExitConditions.ExitConditions()
  fullName: Microsoft.Azure.Batch.ExitConditions.ExitConditions()
  type: Constructor
  source:
    remote:
      path: src/Batch/Client/Src/Generated/ExitConditions.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/ExitConditions.cs
    startLine: 78
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.Azure.Batch.ExitConditions\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public ExitConditions()
    content.vb: Public Sub New
  overload: Microsoft.Azure.Batch.ExitConditions.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.ExitConditions.Default
  commentId: P:Microsoft.Azure.Batch.ExitConditions.Default
  id: Default
  parent: Microsoft.Azure.Batch.ExitConditions
  langs:
  - csharp
  - vb
  name: Default
  nameWithType: ExitConditions.Default
  fullName: Microsoft.Azure.Batch.ExitConditions.Default
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/ExitConditions.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Default
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/ExitConditions.cs
    startLine: 101
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets how the Batch service should respond if the task fails with an exit condition not covered by any \nof the other properties.\n"
  remarks: "\nThis value is used if the task exits with any nonzero exit code not listed in the <xref href=\"Microsoft.Azure.Batch.ExitConditions.ExitCodes\" data-throw-if-not-resolved=\"false\"></xref> or \n<xref href=\"Microsoft.Azure.Batch.ExitConditions.ExitCodeRanges\" data-throw-if-not-resolved=\"false\"></xref> collection, or with a scheduling error if the <xref href=\"Microsoft.Azure.Batch.ExitConditions.SchedulingError\" data-throw-if-not-resolved=\"false\"></xref> property \nis not present.\n"
  example: []
  syntax:
    content: public ExitOptions Default { get; set; }
    content.vb: Public Property Default As ExitOptions
    parameters: []
    return:
      type: Microsoft.Azure.Batch.ExitOptions
  overload: Microsoft.Azure.Batch.ExitConditions.Default*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.ExitConditions.ExitCodeRanges
  commentId: P:Microsoft.Azure.Batch.ExitConditions.ExitCodeRanges
  id: ExitCodeRanges
  parent: Microsoft.Azure.Batch.ExitConditions
  langs:
  - csharp
  - vb
  name: ExitCodeRanges
  nameWithType: ExitConditions.ExitCodeRanges
  fullName: Microsoft.Azure.Batch.ExitConditions.ExitCodeRanges
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/ExitConditions.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ExitCodeRanges
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/ExitConditions.cs
    startLine: 110
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets a list of task exit code ranges and how the Batch service should respond to them.\n"
  example: []
  syntax:
    content: public IList<ExitCodeRangeMapping> ExitCodeRanges { get; set; }
    content.vb: Public Property ExitCodeRanges As IList(Of ExitCodeRangeMapping)
    parameters: []
    return:
      type: System.Collections.Generic.IList{Microsoft.Azure.Batch.ExitCodeRangeMapping}
  overload: Microsoft.Azure.Batch.ExitConditions.ExitCodeRanges*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.ExitConditions.ExitCodes
  commentId: P:Microsoft.Azure.Batch.ExitConditions.ExitCodes
  id: ExitCodes
  parent: Microsoft.Azure.Batch.ExitConditions
  langs:
  - csharp
  - vb
  name: ExitCodes
  nameWithType: ExitConditions.ExitCodes
  fullName: Microsoft.Azure.Batch.ExitConditions.ExitCodes
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/ExitConditions.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ExitCodes
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/ExitConditions.cs
    startLine: 122
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets a list of task exit codes and how the Batch service should respond to them.\n"
  example: []
  syntax:
    content: public IList<ExitCodeMapping> ExitCodes { get; set; }
    content.vb: Public Property ExitCodes As IList(Of ExitCodeMapping)
    parameters: []
    return:
      type: System.Collections.Generic.IList{Microsoft.Azure.Batch.ExitCodeMapping}
  overload: Microsoft.Azure.Batch.ExitConditions.ExitCodes*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.ExitConditions.SchedulingError
  commentId: P:Microsoft.Azure.Batch.ExitConditions.SchedulingError
  id: SchedulingError
  parent: Microsoft.Azure.Batch.ExitConditions
  langs:
  - csharp
  - vb
  name: SchedulingError
  nameWithType: ExitConditions.SchedulingError
  fullName: Microsoft.Azure.Batch.ExitConditions.SchedulingError
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/Generated/ExitConditions.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: SchedulingError
    path: src/azure-sdk-for-net/src/Batch/Client/Src/Generated/ExitConditions.cs
    startLine: 134
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch
  summary: "\nGets or sets how the Batch service should respond if the task fails with a scheduling error.\n"
  example: []
  syntax:
    content: public ExitOptions SchedulingError { get; set; }
    content.vb: Public Property SchedulingError As ExitOptions
    parameters: []
    return:
      type: Microsoft.Azure.Batch.ExitOptions
  overload: Microsoft.Azure.Batch.ExitConditions.SchedulingError*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Azure.Batch
  commentId: N:Microsoft.Azure.Batch
  isExternal: false
  name: Microsoft.Azure.Batch
  nameWithType: Microsoft.Azure.Batch
  fullName: Microsoft.Azure.Batch
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Batch.ExitConditions
  commentId: T:Microsoft.Azure.Batch.ExitConditions
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: ExitConditions
  nameWithType: ExitConditions
  fullName: Microsoft.Azure.Batch.ExitConditions
- uid: Microsoft.Azure.Batch.ExitConditions.#ctor*
  commentId: Overload:Microsoft.Azure.Batch.ExitConditions.#ctor
  isExternal: false
  name: ExitConditions
  nameWithType: ExitConditions.ExitConditions
  fullName: Microsoft.Azure.Batch.ExitConditions.ExitConditions
- uid: Microsoft.Azure.Batch.ExitConditions.ExitCodes
  commentId: P:Microsoft.Azure.Batch.ExitConditions.ExitCodes
- uid: Microsoft.Azure.Batch.ExitConditions.ExitCodeRanges
  commentId: P:Microsoft.Azure.Batch.ExitConditions.ExitCodeRanges
- uid: Microsoft.Azure.Batch.ExitConditions.SchedulingError
  commentId: P:Microsoft.Azure.Batch.ExitConditions.SchedulingError
- uid: Microsoft.Azure.Batch.ExitConditions.Default*
  commentId: Overload:Microsoft.Azure.Batch.ExitConditions.Default
  isExternal: false
  name: Default
  nameWithType: ExitConditions.Default
  fullName: Microsoft.Azure.Batch.ExitConditions.Default
- uid: Microsoft.Azure.Batch.ExitOptions
  commentId: T:Microsoft.Azure.Batch.ExitOptions
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: ExitOptions
  nameWithType: ExitOptions
  fullName: Microsoft.Azure.Batch.ExitOptions
- uid: Microsoft.Azure.Batch.ExitConditions.ExitCodeRanges*
  commentId: Overload:Microsoft.Azure.Batch.ExitConditions.ExitCodeRanges
  isExternal: false
  name: ExitCodeRanges
  nameWithType: ExitConditions.ExitCodeRanges
  fullName: Microsoft.Azure.Batch.ExitConditions.ExitCodeRanges
- uid: System.Collections.Generic.IList{Microsoft.Azure.Batch.ExitCodeRangeMapping}
  commentId: T:System.Collections.Generic.IList{Microsoft.Azure.Batch.ExitCodeRangeMapping}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<ExitCodeRangeMapping>
  nameWithType: IList<ExitCodeRangeMapping>
  fullName: System.Collections.Generic.IList<Microsoft.Azure.Batch.ExitCodeRangeMapping>
  nameWithType.vb: IList(Of ExitCodeRangeMapping)
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.Azure.Batch.ExitCodeRangeMapping)
  name.vb: IList(Of ExitCodeRangeMapping)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.ExitCodeRangeMapping
    name: ExitCodeRangeMapping
    nameWithType: ExitCodeRangeMapping
    fullName: Microsoft.Azure.Batch.ExitCodeRangeMapping
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.ExitCodeRangeMapping
    name: ExitCodeRangeMapping
    nameWithType: ExitCodeRangeMapping
    fullName: Microsoft.Azure.Batch.ExitCodeRangeMapping
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Azure.Batch.ExitConditions.ExitCodes*
  commentId: Overload:Microsoft.Azure.Batch.ExitConditions.ExitCodes
  isExternal: false
  name: ExitCodes
  nameWithType: ExitConditions.ExitCodes
  fullName: Microsoft.Azure.Batch.ExitConditions.ExitCodes
- uid: System.Collections.Generic.IList{Microsoft.Azure.Batch.ExitCodeMapping}
  commentId: T:System.Collections.Generic.IList{Microsoft.Azure.Batch.ExitCodeMapping}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<ExitCodeMapping>
  nameWithType: IList<ExitCodeMapping>
  fullName: System.Collections.Generic.IList<Microsoft.Azure.Batch.ExitCodeMapping>
  nameWithType.vb: IList(Of ExitCodeMapping)
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.Azure.Batch.ExitCodeMapping)
  name.vb: IList(Of ExitCodeMapping)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.ExitCodeMapping
    name: ExitCodeMapping
    nameWithType: ExitCodeMapping
    fullName: Microsoft.Azure.Batch.ExitCodeMapping
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.ExitCodeMapping
    name: ExitCodeMapping
    nameWithType: ExitCodeMapping
    fullName: Microsoft.Azure.Batch.ExitCodeMapping
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.ExitConditions.SchedulingError*
  commentId: Overload:Microsoft.Azure.Batch.ExitConditions.SchedulingError
  isExternal: false
  name: SchedulingError
  nameWithType: ExitConditions.SchedulingError
  fullName: Microsoft.Azure.Batch.ExitConditions.SchedulingError
