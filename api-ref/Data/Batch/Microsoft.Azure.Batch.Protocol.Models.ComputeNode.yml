### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode
  commentId: T:Microsoft.Azure.Batch.Protocol.Models.ComputeNode
  id: ComputeNode
  parent: Microsoft.Azure.Batch.Protocol.Models
  children:
  - Microsoft.Azure.Batch.Protocol.Models.ComputeNode.#ctor
  - Microsoft.Azure.Batch.Protocol.Models.ComputeNode.#ctor(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Protocol.Models.ComputeNodeState},System.Nullable{Microsoft.Azure.Batch.Protocol.Models.SchedulingState},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IList{Microsoft.Azure.Batch.Protocol.Models.TaskInformation},Microsoft.Azure.Batch.Protocol.Models.StartTask,Microsoft.Azure.Batch.Protocol.Models.StartTaskInformation,System.Collections.Generic.IList{Microsoft.Azure.Batch.Protocol.Models.CertificateReference},System.Collections.Generic.IList{Microsoft.Azure.Batch.Protocol.Models.ComputeNodeError})
  - Microsoft.Azure.Batch.Protocol.Models.ComputeNode.AffinityId
  - Microsoft.Azure.Batch.Protocol.Models.ComputeNode.AllocationTime
  - Microsoft.Azure.Batch.Protocol.Models.ComputeNode.CertificateReferences
  - Microsoft.Azure.Batch.Protocol.Models.ComputeNode.Errors
  - Microsoft.Azure.Batch.Protocol.Models.ComputeNode.Id
  - Microsoft.Azure.Batch.Protocol.Models.ComputeNode.IpAddress
  - Microsoft.Azure.Batch.Protocol.Models.ComputeNode.LastBootTime
  - Microsoft.Azure.Batch.Protocol.Models.ComputeNode.RecentTasks
  - Microsoft.Azure.Batch.Protocol.Models.ComputeNode.RunningTasksCount
  - Microsoft.Azure.Batch.Protocol.Models.ComputeNode.SchedulingState
  - Microsoft.Azure.Batch.Protocol.Models.ComputeNode.StartTask
  - Microsoft.Azure.Batch.Protocol.Models.ComputeNode.StartTaskInfo
  - Microsoft.Azure.Batch.Protocol.Models.ComputeNode.State
  - Microsoft.Azure.Batch.Protocol.Models.ComputeNode.StateTransitionTime
  - Microsoft.Azure.Batch.Protocol.Models.ComputeNode.TotalTasksRun
  - Microsoft.Azure.Batch.Protocol.Models.ComputeNode.TotalTasksSucceeded
  - Microsoft.Azure.Batch.Protocol.Models.ComputeNode.Url
  - Microsoft.Azure.Batch.Protocol.Models.ComputeNode.Validate
  - Microsoft.Azure.Batch.Protocol.Models.ComputeNode.VmSize
  langs:
  - csharp
  - vb
  name: ComputeNode
  nameWithType: ComputeNode
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode
  type: Class
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ComputeNode
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
    startLine: 25
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nA compute node in the Batch service.\n"
  example: []
  syntax:
    content: public class ComputeNode
    content.vb: Public Class ComputeNode
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.#ctor
  commentId: M:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.#ctor
  id: '#ctor'
  parent: Microsoft.Azure.Batch.Protocol.Models.ComputeNode
  langs:
  - csharp
  - vb
  name: ComputeNode()
  nameWithType: ComputeNode.ComputeNode()
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.ComputeNode()
  type: Constructor
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
    startLine: 30
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nInitializes a new instance of the ComputeNode class.\n"
  example: []
  syntax:
    content: public ComputeNode()
    content.vb: Public Sub New
  overload: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.#ctor(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Protocol.Models.ComputeNodeState},System.Nullable{Microsoft.Azure.Batch.Protocol.Models.SchedulingState},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IList{Microsoft.Azure.Batch.Protocol.Models.TaskInformation},Microsoft.Azure.Batch.Protocol.Models.StartTask,Microsoft.Azure.Batch.Protocol.Models.StartTaskInformation,System.Collections.Generic.IList{Microsoft.Azure.Batch.Protocol.Models.CertificateReference},System.Collections.Generic.IList{Microsoft.Azure.Batch.Protocol.Models.ComputeNodeError})
  commentId: M:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.#ctor(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Protocol.Models.ComputeNodeState},System.Nullable{Microsoft.Azure.Batch.Protocol.Models.SchedulingState},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IList{Microsoft.Azure.Batch.Protocol.Models.TaskInformation},Microsoft.Azure.Batch.Protocol.Models.StartTask,Microsoft.Azure.Batch.Protocol.Models.StartTaskInformation,System.Collections.Generic.IList{Microsoft.Azure.Batch.Protocol.Models.CertificateReference},System.Collections.Generic.IList{Microsoft.Azure.Batch.Protocol.Models.ComputeNodeError})
  id: '#ctor(System.String,System.String,System.Nullable{Microsoft.Azure.Batch.Protocol.Models.ComputeNodeState},System.Nullable{Microsoft.Azure.Batch.Protocol.Models.SchedulingState},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IList{Microsoft.Azure.Batch.Protocol.Models.TaskInformation},Microsoft.Azure.Batch.Protocol.Models.StartTask,Microsoft.Azure.Batch.Protocol.Models.StartTaskInformation,System.Collections.Generic.IList{Microsoft.Azure.Batch.Protocol.Models.CertificateReference},System.Collections.Generic.IList{Microsoft.Azure.Batch.Protocol.Models.ComputeNodeError})'
  parent: Microsoft.Azure.Batch.Protocol.Models.ComputeNode
  langs:
  - csharp
  - vb
  name: ComputeNode(String, String, Nullable<ComputeNodeState>, Nullable<SchedulingState>, Nullable<DateTime>, Nullable<DateTime>, Nullable<DateTime>, String, String, String, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, IList<TaskInformation>, StartTask, StartTaskInformation, IList<CertificateReference>, IList<ComputeNodeError>)
  nameWithType: ComputeNode.ComputeNode(String, String, Nullable<ComputeNodeState>, Nullable<SchedulingState>, Nullable<DateTime>, Nullable<DateTime>, Nullable<DateTime>, String, String, String, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, IList<TaskInformation>, StartTask, StartTaskInformation, IList<CertificateReference>, IList<ComputeNodeError>)
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.ComputeNode(System.String, System.String, System.Nullable<Microsoft.Azure.Batch.Protocol.Models.ComputeNodeState>, System.Nullable<Microsoft.Azure.Batch.Protocol.Models.SchedulingState>, System.Nullable<System.DateTime>, System.Nullable<System.DateTime>, System.Nullable<System.DateTime>, System.String, System.String, System.String, System.Nullable<System.Int32>, System.Nullable<System.Int32>, System.Nullable<System.Int32>, System.Collections.Generic.IList<Microsoft.Azure.Batch.Protocol.Models.TaskInformation>, Microsoft.Azure.Batch.Protocol.Models.StartTask, Microsoft.Azure.Batch.Protocol.Models.StartTaskInformation, System.Collections.Generic.IList<Microsoft.Azure.Batch.Protocol.Models.CertificateReference>, System.Collections.Generic.IList<Microsoft.Azure.Batch.Protocol.Models.ComputeNodeError>)
  type: Constructor
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
    startLine: 75
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nInitializes a new instance of the ComputeNode class.\n"
  example: []
  syntax:
    content: public ComputeNode(string id = null, string url = null, ComputeNodeState? state = null, SchedulingState? schedulingState = null, DateTime? stateTransitionTime = null, DateTime? lastBootTime = null, DateTime? allocationTime = null, string ipAddress = null, string affinityId = null, string vmSize = null, int ? totalTasksRun = null, int ? runningTasksCount = null, int ? totalTasksSucceeded = null, IList<TaskInformation> recentTasks = null, StartTask startTask = null, StartTaskInformation startTaskInfo = null, IList<CertificateReference> certificateReferences = null, IList<ComputeNodeError> errors = null)
    content.vb: Public Sub New(id As String = Nothing, url As String = Nothing, state As ComputeNodeState? = Nothing, schedulingState As SchedulingState? = Nothing, stateTransitionTime As Date? = Nothing, lastBootTime As Date? = Nothing, allocationTime As Date? = Nothing, ipAddress As String = Nothing, affinityId As String = Nothing, vmSize As String = Nothing, totalTasksRun As Integer? = Nothing, runningTasksCount As Integer? = Nothing, totalTasksSucceeded As Integer? = Nothing, recentTasks As IList(Of TaskInformation) = Nothing, startTask As StartTask = Nothing, startTaskInfo As StartTaskInformation = Nothing, certificateReferences As IList(Of CertificateReference) = Nothing, errors As IList(Of ComputeNodeError) = Nothing)
    parameters:
    - id: id
      type: System.String
      description: The id of the compute node.
    - id: url
      type: System.String
      description: The URL of the compute node.
    - id: state
      type: System.Nullable{Microsoft.Azure.Batch.Protocol.Models.ComputeNodeState}
      description: The current state of the compute node.
    - id: schedulingState
      type: System.Nullable{Microsoft.Azure.Batch.Protocol.Models.SchedulingState}
      description: >-
        Whether the compute node should be

        available for task scheduling.
    - id: stateTransitionTime
      type: System.Nullable{System.DateTime}
      description: >-
        The time at which the compute

        node entered its current state.
    - id: lastBootTime
      type: System.Nullable{System.DateTime}
      description: >-
        The time at which the compute node was

        started.
    - id: allocationTime
      type: System.Nullable{System.DateTime}
      description: >-
        The time at which this compute node

        was allocated to the pool.
    - id: ipAddress
      type: System.String
      description: >-
        The IP address that other compute nodes

        can use to communicate with this compute node.
    - id: affinityId
      type: System.String
      description: >-
        An identifier which can be passed in the

        Add Task API to request that the task be scheduled close to this

        compute node.
    - id: vmSize
      type: System.String
      description: >-
        The size of the virtual machine hosting the

        compute node.
    - id: totalTasksRun
      type: System.Nullable{System.Int32}
      description: >-
        The total number of job tasks

        completed on the compute node. This includes Job Preparation, Job

        Release and Job Manager tasks, but not the pool start

        task.
    - id: runningTasksCount
      type: System.Nullable{System.Int32}
      description: >-
        The total number of currently

        running job tasks on the compute node. This includes Job

        Preparation, Job Release, and Job Manager tasks, but not the pool

        start task.
    - id: totalTasksSucceeded
      type: System.Nullable{System.Int32}
      description: >-
        The total number of job tasks

        which completed successfully (with exitCode 0) on the compute

        node. This includes Job Preparation, Job Release, and Job Manager

        tasks, but not the pool start task.
    - id: recentTasks
      type: System.Collections.Generic.IList{Microsoft.Azure.Batch.Protocol.Models.TaskInformation}
      description: >-
        The list of tasks that are currently

        running on the compute node.
    - id: startTask
      type: Microsoft.Azure.Batch.Protocol.Models.StartTask
      description: >-
        The task specified to run on the compute

        node as it joins the pool.
    - id: startTaskInfo
      type: Microsoft.Azure.Batch.Protocol.Models.StartTaskInformation
      description: >-
        Runtime information about the

        execution of the start task on the compute node.
    - id: certificateReferences
      type: System.Collections.Generic.IList{Microsoft.Azure.Batch.Protocol.Models.CertificateReference}
      description: >-
        The list of certificates

        installed on the compute node.
    - id: errors
      type: System.Collections.Generic.IList{Microsoft.Azure.Batch.Protocol.Models.ComputeNodeError}
      description: >-
        The list of errors that are currently being

        encountered by the compute node.
  overload: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.#ctor*
  nameWithType.vb: ComputeNode.ComputeNode(String, String, Nullable(Of ComputeNodeState), Nullable(Of SchedulingState), Nullable(Of DateTime), Nullable(Of DateTime), Nullable(Of DateTime), String, String, String, Nullable(Of Int32), Nullable(Of Int32), Nullable(Of Int32), IList(Of TaskInformation), StartTask, StartTaskInformation, IList(Of CertificateReference), IList(Of ComputeNodeError))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.ComputeNode(System.String, System.String, System.Nullable(Of Microsoft.Azure.Batch.Protocol.Models.ComputeNodeState), System.Nullable(Of Microsoft.Azure.Batch.Protocol.Models.SchedulingState), System.Nullable(Of System.DateTime), System.Nullable(Of System.DateTime), System.Nullable(Of System.DateTime), System.String, System.String, System.String, System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), System.Collections.Generic.IList(Of Microsoft.Azure.Batch.Protocol.Models.TaskInformation), Microsoft.Azure.Batch.Protocol.Models.StartTask, Microsoft.Azure.Batch.Protocol.Models.StartTaskInformation, System.Collections.Generic.IList(Of Microsoft.Azure.Batch.Protocol.Models.CertificateReference), System.Collections.Generic.IList(Of Microsoft.Azure.Batch.Protocol.Models.ComputeNodeError))
  name.vb: ComputeNode(String, String, Nullable(Of ComputeNodeState), Nullable(Of SchedulingState), Nullable(Of DateTime), Nullable(Of DateTime), Nullable(Of DateTime), String, String, String, Nullable(Of Int32), Nullable(Of Int32), Nullable(Of Int32), IList(Of TaskInformation), StartTask, StartTaskInformation, IList(Of CertificateReference), IList(Of ComputeNodeError))
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.Id
  commentId: P:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.Id
  id: Id
  parent: Microsoft.Azure.Batch.Protocol.Models.ComputeNode
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: ComputeNode.Id
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.Id
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Id
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
    startLine: 100
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nGets or sets the id of the compute node.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "id")]

      public string Id { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="id")>

      Public Property Id As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.Id*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: id
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.Url
  commentId: P:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.Url
  id: Url
  parent: Microsoft.Azure.Batch.Protocol.Models.ComputeNode
  langs:
  - csharp
  - vb
  name: Url
  nameWithType: ComputeNode.Url
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.Url
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Url
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
    startLine: 106
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nGets or sets the URL of the compute node.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "url")]

      public string Url { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="url")>

      Public Property Url As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.Url*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: url
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.State
  commentId: P:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.State
  id: State
  parent: Microsoft.Azure.Batch.Protocol.Models.ComputeNode
  langs:
  - csharp
  - vb
  name: State
  nameWithType: ComputeNode.State
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.State
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: State
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
    startLine: 118
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nGets or sets the current state of the compute node.\n"
  remarks: "\nPossible values include: 'idle', 'rebooting', 'reimaging',\n'running', 'unusable', 'creating', 'starting',\n'waitingforstarttask', 'starttaskfailed', 'unknown',\n'leavingpool', 'offline'\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "state")]

      public ComputeNodeState? State { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="state")>

      Public Property State As ComputeNodeState?
    parameters: []
    return:
      type: System.Nullable{Microsoft.Azure.Batch.Protocol.Models.ComputeNodeState}
  overload: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.State*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: state
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.SchedulingState
  commentId: P:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.SchedulingState
  id: SchedulingState
  parent: Microsoft.Azure.Batch.Protocol.Models.ComputeNode
  langs:
  - csharp
  - vb
  name: SchedulingState
  nameWithType: ComputeNode.SchedulingState
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.SchedulingState
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: SchedulingState
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
    startLine: 128
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nGets or sets whether the compute node should be available for task\nscheduling.\n"
  remarks: "\nPossible values include: 'enabled', 'disabled'\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "schedulingState")]

      public SchedulingState? SchedulingState { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="schedulingState")>

      Public Property SchedulingState As SchedulingState?
    parameters: []
    return:
      type: System.Nullable{Microsoft.Azure.Batch.Protocol.Models.SchedulingState}
  overload: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.SchedulingState*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: schedulingState
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.StateTransitionTime
  commentId: P:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.StateTransitionTime
  id: StateTransitionTime
  parent: Microsoft.Azure.Batch.Protocol.Models.ComputeNode
  langs:
  - csharp
  - vb
  name: StateTransitionTime
  nameWithType: ComputeNode.StateTransitionTime
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.StateTransitionTime
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: StateTransitionTime
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
    startLine: 135
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nGets or sets the time at which the compute node entered its\ncurrent state.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "stateTransitionTime")]

      public DateTime? StateTransitionTime { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="stateTransitionTime")>

      Public Property StateTransitionTime As Date?
    parameters: []
    return:
      type: System.Nullable{System.DateTime}
  overload: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.StateTransitionTime*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: stateTransitionTime
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.LastBootTime
  commentId: P:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.LastBootTime
  id: LastBootTime
  parent: Microsoft.Azure.Batch.Protocol.Models.ComputeNode
  langs:
  - csharp
  - vb
  name: LastBootTime
  nameWithType: ComputeNode.LastBootTime
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.LastBootTime
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: LastBootTime
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
    startLine: 141
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nGets or sets the time at which the compute node was started.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "lastBootTime")]

      public DateTime? LastBootTime { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="lastBootTime")>

      Public Property LastBootTime As Date?
    parameters: []
    return:
      type: System.Nullable{System.DateTime}
  overload: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.LastBootTime*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: lastBootTime
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.AllocationTime
  commentId: P:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.AllocationTime
  id: AllocationTime
  parent: Microsoft.Azure.Batch.Protocol.Models.ComputeNode
  langs:
  - csharp
  - vb
  name: AllocationTime
  nameWithType: ComputeNode.AllocationTime
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.AllocationTime
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: AllocationTime
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
    startLine: 148
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nGets or sets the time at which this compute node was allocated to\nthe pool.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "allocationTime")]

      public DateTime? AllocationTime { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="allocationTime")>

      Public Property AllocationTime As Date?
    parameters: []
    return:
      type: System.Nullable{System.DateTime}
  overload: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.AllocationTime*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: allocationTime
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.IpAddress
  commentId: P:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.IpAddress
  id: IpAddress
  parent: Microsoft.Azure.Batch.Protocol.Models.ComputeNode
  langs:
  - csharp
  - vb
  name: IpAddress
  nameWithType: ComputeNode.IpAddress
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.IpAddress
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: IpAddress
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
    startLine: 155
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nGets or sets the IP address that other compute nodes can use to\ncommunicate with this compute node.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "ipAddress")]

      public string IpAddress { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="ipAddress")>

      Public Property IpAddress As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.IpAddress*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: ipAddress
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.AffinityId
  commentId: P:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.AffinityId
  id: AffinityId
  parent: Microsoft.Azure.Batch.Protocol.Models.ComputeNode
  langs:
  - csharp
  - vb
  name: AffinityId
  nameWithType: ComputeNode.AffinityId
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.AffinityId
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: AffinityId
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
    startLine: 162
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nGets or sets an identifier which can be passed in the Add Task API\nto request that the task be scheduled close to this compute node.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "affinityId")]

      public string AffinityId { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="affinityId")>

      Public Property AffinityId As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.AffinityId*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: affinityId
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.VmSize
  commentId: P:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.VmSize
  id: VmSize
  parent: Microsoft.Azure.Batch.Protocol.Models.ComputeNode
  langs:
  - csharp
  - vb
  name: VmSize
  nameWithType: ComputeNode.VmSize
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.VmSize
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: VmSize
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
    startLine: 169
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nGets or sets the size of the virtual machine hosting the compute\nnode.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "vmSize")]

      public string VmSize { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="vmSize")>

      Public Property VmSize As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.VmSize*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: vmSize
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.TotalTasksRun
  commentId: P:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.TotalTasksRun
  id: TotalTasksRun
  parent: Microsoft.Azure.Batch.Protocol.Models.ComputeNode
  langs:
  - csharp
  - vb
  name: TotalTasksRun
  nameWithType: ComputeNode.TotalTasksRun
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.TotalTasksRun
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: TotalTasksRun
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
    startLine: 177
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nGets or sets the total number of job tasks completed on the\ncompute node. This includes Job Preparation, Job Release and Job\nManager tasks, but not the pool start task.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "totalTasksRun")]

      public int ? TotalTasksRun { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="totalTasksRun")>

      Public Property TotalTasksRun As Integer?
    parameters: []
    return:
      type: System.Nullable{System.Int32}
  overload: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.TotalTasksRun*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: totalTasksRun
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.RunningTasksCount
  commentId: P:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.RunningTasksCount
  id: RunningTasksCount
  parent: Microsoft.Azure.Batch.Protocol.Models.ComputeNode
  langs:
  - csharp
  - vb
  name: RunningTasksCount
  nameWithType: ComputeNode.RunningTasksCount
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.RunningTasksCount
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: RunningTasksCount
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
    startLine: 185
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nGets or sets the total number of currently running job tasks on\nthe compute node. This includes Job Preparation, Job Release, and\nJob Manager tasks, but not the pool start task.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "runningTasksCount")]

      public int ? RunningTasksCount { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="runningTasksCount")>

      Public Property RunningTasksCount As Integer?
    parameters: []
    return:
      type: System.Nullable{System.Int32}
  overload: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.RunningTasksCount*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: runningTasksCount
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.TotalTasksSucceeded
  commentId: P:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.TotalTasksSucceeded
  id: TotalTasksSucceeded
  parent: Microsoft.Azure.Batch.Protocol.Models.ComputeNode
  langs:
  - csharp
  - vb
  name: TotalTasksSucceeded
  nameWithType: ComputeNode.TotalTasksSucceeded
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.TotalTasksSucceeded
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: TotalTasksSucceeded
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
    startLine: 194
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nGets or sets the total number of job tasks which completed\nsuccessfully (with exitCode 0) on the compute node. This includes\nJob Preparation, Job Release, and Job Manager tasks, but not the\npool start task.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "totalTasksSucceeded")]

      public int ? TotalTasksSucceeded { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="totalTasksSucceeded")>

      Public Property TotalTasksSucceeded As Integer?
    parameters: []
    return:
      type: System.Nullable{System.Int32}
  overload: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.TotalTasksSucceeded*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: totalTasksSucceeded
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.RecentTasks
  commentId: P:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.RecentTasks
  id: RecentTasks
  parent: Microsoft.Azure.Batch.Protocol.Models.ComputeNode
  langs:
  - csharp
  - vb
  name: RecentTasks
  nameWithType: ComputeNode.RecentTasks
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.RecentTasks
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: RecentTasks
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
    startLine: 201
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nGets or sets the list of tasks that are currently running on the\ncompute node.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "recentTasks")]

      public IList<TaskInformation> RecentTasks { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="recentTasks")>

      Public Property RecentTasks As IList(Of TaskInformation)
    parameters: []
    return:
      type: System.Collections.Generic.IList{Microsoft.Azure.Batch.Protocol.Models.TaskInformation}
  overload: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.RecentTasks*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: recentTasks
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.StartTask
  commentId: P:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.StartTask
  id: StartTask
  parent: Microsoft.Azure.Batch.Protocol.Models.ComputeNode
  langs:
  - csharp
  - vb
  name: StartTask
  nameWithType: ComputeNode.StartTask
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.StartTask
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: StartTask
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
    startLine: 208
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nGets or sets the task specified to run on the compute node as it\njoins the pool.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "startTask")]

      public StartTask StartTask { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="startTask")>

      Public Property StartTask As StartTask
    parameters: []
    return:
      type: Microsoft.Azure.Batch.Protocol.Models.StartTask
  overload: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.StartTask*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: startTask
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.StartTaskInfo
  commentId: P:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.StartTaskInfo
  id: StartTaskInfo
  parent: Microsoft.Azure.Batch.Protocol.Models.ComputeNode
  langs:
  - csharp
  - vb
  name: StartTaskInfo
  nameWithType: ComputeNode.StartTaskInfo
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.StartTaskInfo
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: StartTaskInfo
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
    startLine: 215
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nGets or sets runtime information about the execution of the start\ntask on the compute node.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "startTaskInfo")]

      public StartTaskInformation StartTaskInfo { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="startTaskInfo")>

      Public Property StartTaskInfo As StartTaskInformation
    parameters: []
    return:
      type: Microsoft.Azure.Batch.Protocol.Models.StartTaskInformation
  overload: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.StartTaskInfo*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: startTaskInfo
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.CertificateReferences
  commentId: P:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.CertificateReferences
  id: CertificateReferences
  parent: Microsoft.Azure.Batch.Protocol.Models.ComputeNode
  langs:
  - csharp
  - vb
  name: CertificateReferences
  nameWithType: ComputeNode.CertificateReferences
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.CertificateReferences
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CertificateReferences
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
    startLine: 222
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nGets or sets the list of certificates installed on the compute\nnode.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "certificateReferences")]

      public IList<CertificateReference> CertificateReferences { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="certificateReferences")>

      Public Property CertificateReferences As IList(Of CertificateReference)
    parameters: []
    return:
      type: System.Collections.Generic.IList{Microsoft.Azure.Batch.Protocol.Models.CertificateReference}
  overload: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.CertificateReferences*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: certificateReferences
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.Errors
  commentId: P:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.Errors
  id: Errors
  parent: Microsoft.Azure.Batch.Protocol.Models.ComputeNode
  langs:
  - csharp
  - vb
  name: Errors
  nameWithType: ComputeNode.Errors
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.Errors
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Errors
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
    startLine: 229
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nGets or sets the list of errors that are currently being\nencountered by the compute node.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "errors")]

      public IList<ComputeNodeError> Errors { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="errors")>

      Public Property Errors As IList(Of ComputeNodeError)
    parameters: []
    return:
      type: System.Collections.Generic.IList{Microsoft.Azure.Batch.Protocol.Models.ComputeNodeError}
  overload: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.Errors*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: errors
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.Validate
  commentId: M:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.Validate
  id: Validate
  parent: Microsoft.Azure.Batch.Protocol.Models.ComputeNode
  langs:
  - csharp
  - vb
  name: Validate()
  nameWithType: ComputeNode.Validate()
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.Validate()
  type: Method
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Validate
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNode.cs
    startLine: 238
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nValidate the object.\n"
  example: []
  syntax:
    content: public virtual void Validate()
    content.vb: Public Overridable Sub Validate
  overload: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.Validate*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Microsoft.Azure.Batch.Protocol.Models
  commentId: N:Microsoft.Azure.Batch.Protocol.Models
  isExternal: false
  name: Microsoft.Azure.Batch.Protocol.Models
  nameWithType: Microsoft.Azure.Batch.Protocol.Models
  fullName: Microsoft.Azure.Batch.Protocol.Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.#ctor*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.#ctor
  isExternal: false
  name: ComputeNode
  nameWithType: ComputeNode.ComputeNode
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.ComputeNode
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Nullable{Microsoft.Azure.Batch.Protocol.Models.ComputeNodeState}
  commentId: T:System.Nullable{Microsoft.Azure.Batch.Protocol.Models.ComputeNodeState}
  parent: System
  definition: System.Nullable`1
  name: Nullable<ComputeNodeState>
  nameWithType: Nullable<ComputeNodeState>
  fullName: System.Nullable<Microsoft.Azure.Batch.Protocol.Models.ComputeNodeState>
  nameWithType.vb: Nullable(Of ComputeNodeState)
  fullname.vb: System.Nullable(Of Microsoft.Azure.Batch.Protocol.Models.ComputeNodeState)
  name.vb: Nullable(Of ComputeNodeState)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeState
    name: ComputeNodeState
    nameWithType: ComputeNodeState
    fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeState
    name: ComputeNodeState
    nameWithType: ComputeNodeState
    fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeState
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{Microsoft.Azure.Batch.Protocol.Models.SchedulingState}
  commentId: T:System.Nullable{Microsoft.Azure.Batch.Protocol.Models.SchedulingState}
  parent: System
  definition: System.Nullable`1
  name: Nullable<SchedulingState>
  nameWithType: Nullable<SchedulingState>
  fullName: System.Nullable<Microsoft.Azure.Batch.Protocol.Models.SchedulingState>
  nameWithType.vb: Nullable(Of SchedulingState)
  fullname.vb: System.Nullable(Of Microsoft.Azure.Batch.Protocol.Models.SchedulingState)
  name.vb: Nullable(Of SchedulingState)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.Protocol.Models.SchedulingState
    name: SchedulingState
    nameWithType: SchedulingState
    fullName: Microsoft.Azure.Batch.Protocol.Models.SchedulingState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.Protocol.Models.SchedulingState
    name: SchedulingState
    nameWithType: SchedulingState
    fullName: Microsoft.Azure.Batch.Protocol.Models.SchedulingState
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.DateTime}
  commentId: T:System.Nullable{System.DateTime}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<System.DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullname.vb: System.Nullable(Of System.DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullname.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList{Microsoft.Azure.Batch.Protocol.Models.TaskInformation}
  commentId: T:System.Collections.Generic.IList{Microsoft.Azure.Batch.Protocol.Models.TaskInformation}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<TaskInformation>
  nameWithType: IList<TaskInformation>
  fullName: System.Collections.Generic.IList<Microsoft.Azure.Batch.Protocol.Models.TaskInformation>
  nameWithType.vb: IList(Of TaskInformation)
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.Azure.Batch.Protocol.Models.TaskInformation)
  name.vb: IList(Of TaskInformation)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.Protocol.Models.TaskInformation
    name: TaskInformation
    nameWithType: TaskInformation
    fullName: Microsoft.Azure.Batch.Protocol.Models.TaskInformation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.Protocol.Models.TaskInformation
    name: TaskInformation
    nameWithType: TaskInformation
    fullName: Microsoft.Azure.Batch.Protocol.Models.TaskInformation
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.Protocol.Models.StartTask
  commentId: T:Microsoft.Azure.Batch.Protocol.Models.StartTask
  parent: Microsoft.Azure.Batch.Protocol.Models
  isExternal: false
  name: StartTask
  nameWithType: StartTask
  fullName: Microsoft.Azure.Batch.Protocol.Models.StartTask
- uid: Microsoft.Azure.Batch.Protocol.Models.StartTaskInformation
  commentId: T:Microsoft.Azure.Batch.Protocol.Models.StartTaskInformation
  parent: Microsoft.Azure.Batch.Protocol.Models
  isExternal: false
  name: StartTaskInformation
  nameWithType: StartTaskInformation
  fullName: Microsoft.Azure.Batch.Protocol.Models.StartTaskInformation
- uid: System.Collections.Generic.IList{Microsoft.Azure.Batch.Protocol.Models.CertificateReference}
  commentId: T:System.Collections.Generic.IList{Microsoft.Azure.Batch.Protocol.Models.CertificateReference}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<CertificateReference>
  nameWithType: IList<CertificateReference>
  fullName: System.Collections.Generic.IList<Microsoft.Azure.Batch.Protocol.Models.CertificateReference>
  nameWithType.vb: IList(Of CertificateReference)
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.Azure.Batch.Protocol.Models.CertificateReference)
  name.vb: IList(Of CertificateReference)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.Protocol.Models.CertificateReference
    name: CertificateReference
    nameWithType: CertificateReference
    fullName: Microsoft.Azure.Batch.Protocol.Models.CertificateReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.Protocol.Models.CertificateReference
    name: CertificateReference
    nameWithType: CertificateReference
    fullName: Microsoft.Azure.Batch.Protocol.Models.CertificateReference
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList{Microsoft.Azure.Batch.Protocol.Models.ComputeNodeError}
  commentId: T:System.Collections.Generic.IList{Microsoft.Azure.Batch.Protocol.Models.ComputeNodeError}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<ComputeNodeError>
  nameWithType: IList<ComputeNodeError>
  fullName: System.Collections.Generic.IList<Microsoft.Azure.Batch.Protocol.Models.ComputeNodeError>
  nameWithType.vb: IList(Of ComputeNodeError)
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.Azure.Batch.Protocol.Models.ComputeNodeError)
  name.vb: IList(Of ComputeNodeError)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeError
    name: ComputeNodeError
    nameWithType: ComputeNodeError
    fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeError
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeError
    name: ComputeNodeError
    nameWithType: ComputeNodeError
    fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeError
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.Id*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.Id
  isExternal: false
  name: Id
  nameWithType: ComputeNode.Id
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.Id
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.Url*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.Url
  isExternal: false
  name: Url
  nameWithType: ComputeNode.Url
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.Url
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.State*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.State
  isExternal: false
  name: State
  nameWithType: ComputeNode.State
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.State
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.SchedulingState*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.SchedulingState
  isExternal: false
  name: SchedulingState
  nameWithType: ComputeNode.SchedulingState
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.SchedulingState
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.StateTransitionTime*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.StateTransitionTime
  isExternal: false
  name: StateTransitionTime
  nameWithType: ComputeNode.StateTransitionTime
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.StateTransitionTime
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.LastBootTime*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.LastBootTime
  isExternal: false
  name: LastBootTime
  nameWithType: ComputeNode.LastBootTime
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.LastBootTime
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.AllocationTime*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.AllocationTime
  isExternal: false
  name: AllocationTime
  nameWithType: ComputeNode.AllocationTime
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.AllocationTime
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.IpAddress*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.IpAddress
  isExternal: false
  name: IpAddress
  nameWithType: ComputeNode.IpAddress
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.IpAddress
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.AffinityId*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.AffinityId
  isExternal: false
  name: AffinityId
  nameWithType: ComputeNode.AffinityId
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.AffinityId
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.VmSize*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.VmSize
  isExternal: false
  name: VmSize
  nameWithType: ComputeNode.VmSize
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.VmSize
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.TotalTasksRun*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.TotalTasksRun
  isExternal: false
  name: TotalTasksRun
  nameWithType: ComputeNode.TotalTasksRun
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.TotalTasksRun
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.RunningTasksCount*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.RunningTasksCount
  isExternal: false
  name: RunningTasksCount
  nameWithType: ComputeNode.RunningTasksCount
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.RunningTasksCount
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.TotalTasksSucceeded*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.TotalTasksSucceeded
  isExternal: false
  name: TotalTasksSucceeded
  nameWithType: ComputeNode.TotalTasksSucceeded
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.TotalTasksSucceeded
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.RecentTasks*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.RecentTasks
  isExternal: false
  name: RecentTasks
  nameWithType: ComputeNode.RecentTasks
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.RecentTasks
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.StartTask*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.StartTask
  isExternal: false
  name: StartTask
  nameWithType: ComputeNode.StartTask
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.StartTask
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.StartTaskInfo*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.StartTaskInfo
  isExternal: false
  name: StartTaskInfo
  nameWithType: ComputeNode.StartTaskInfo
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.StartTaskInfo
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.CertificateReferences*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.CertificateReferences
  isExternal: false
  name: CertificateReferences
  nameWithType: ComputeNode.CertificateReferences
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.CertificateReferences
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.Errors*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.Errors
  isExternal: false
  name: Errors
  nameWithType: ComputeNode.Errors
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.Errors
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.Validate*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.ComputeNode.Validate
  isExternal: false
  name: Validate
  nameWithType: ComputeNode.Validate
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode.Validate
