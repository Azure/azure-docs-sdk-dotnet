### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation
  commentId: T:Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation
  id: ComputeNodeInformation
  parent: Microsoft.Azure.Batch.Protocol.Models
  children:
  - Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.#ctor
  - Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)
  - Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.AffinityId
  - Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.NodeId
  - Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.NodeUrl
  - Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.PoolId
  - Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.TaskRootDirectory
  - Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.TaskRootDirectoryUrl
  langs:
  - csharp
  - vb
  name: ComputeNodeInformation
  nameWithType: ComputeNodeInformation
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation
  type: Class
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNodeInformation.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ComputeNodeInformation
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNodeInformation.cs
    startLine: 25
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nInformation about the compute node on which a task ran.\n"
  example: []
  syntax:
    content: public class ComputeNodeInformation
    content.vb: Public Class ComputeNodeInformation
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.#ctor
  commentId: M:Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.#ctor
  id: '#ctor'
  parent: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation
  langs:
  - csharp
  - vb
  name: ComputeNodeInformation()
  nameWithType: ComputeNodeInformation.ComputeNodeInformation()
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.ComputeNodeInformation()
  type: Constructor
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNodeInformation.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNodeInformation.cs
    startLine: 30
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nInitializes a new instance of the ComputeNodeInformation class.\n"
  example: []
  syntax:
    content: public ComputeNodeInformation()
    content.vb: Public Sub New
  overload: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)
  commentId: M:Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String,System.String,System.String,System.String)'
  parent: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation
  langs:
  - csharp
  - vb
  name: ComputeNodeInformation(String, String, String, String, String, String)
  nameWithType: ComputeNodeInformation.ComputeNodeInformation(String, String, String, String, String, String)
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.ComputeNodeInformation(System.String, System.String, System.String, System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNodeInformation.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNodeInformation.cs
    startLine: 49
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nInitializes a new instance of the ComputeNodeInformation class.\n"
  example: []
  syntax:
    content: public ComputeNodeInformation(string affinityId = null, string nodeUrl = null, string poolId = null, string nodeId = null, string taskRootDirectory = null, string taskRootDirectoryUrl = null)
    content.vb: Public Sub New(affinityId As String = Nothing, nodeUrl As String = Nothing, poolId As String = Nothing, nodeId As String = Nothing, taskRootDirectory As String = Nothing, taskRootDirectoryUrl As String = Nothing)
    parameters:
    - id: affinityId
      type: System.String
      description: >-
        An identifier for the compute node on

        which the task ran, which can be passed when adding a task to

        request that the task be scheduled close to this compute

        node.
    - id: nodeUrl
      type: System.String
      description: >
        The URL of the node on which the task ran.
    - id: poolId
      type: System.String
      description: >-
        The id of the pool on which the task

        ran.
    - id: nodeId
      type: System.String
      description: >-
        The id of the node on which the task

        ran.
    - id: taskRootDirectory
      type: System.String
      description: >-
        The root directory of the task on

        the compute node.
    - id: taskRootDirectoryUrl
      type: System.String
      description: >-
        The URL to the root directory

        of the task on the compute node.
  overload: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.AffinityId
  commentId: P:Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.AffinityId
  id: AffinityId
  parent: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation
  langs:
  - csharp
  - vb
  name: AffinityId
  nameWithType: ComputeNodeInformation.AffinityId
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.AffinityId
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNodeInformation.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: AffinityId
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNodeInformation.cs
    startLine: 64
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nGets or sets an identifier for the compute node on which the task\nran, which can be passed when adding a task to request that the\ntask be scheduled close to this compute node.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "affinityId")]

      public string AffinityId { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="affinityId")>

      Public Property AffinityId As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.AffinityId*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: affinityId
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.NodeUrl
  commentId: P:Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.NodeUrl
  id: NodeUrl
  parent: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation
  langs:
  - csharp
  - vb
  name: NodeUrl
  nameWithType: ComputeNodeInformation.NodeUrl
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.NodeUrl
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNodeInformation.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: NodeUrl
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNodeInformation.cs
    startLine: 70
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nGets or sets the URL of the node on which the task ran.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "nodeUrl")]

      public string NodeUrl { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="nodeUrl")>

      Public Property NodeUrl As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.NodeUrl*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: nodeUrl
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.PoolId
  commentId: P:Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.PoolId
  id: PoolId
  parent: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation
  langs:
  - csharp
  - vb
  name: PoolId
  nameWithType: ComputeNodeInformation.PoolId
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.PoolId
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNodeInformation.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: PoolId
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNodeInformation.cs
    startLine: 76
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nGets or sets the id of the pool on which the task ran.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "poolId")]

      public string PoolId { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="poolId")>

      Public Property PoolId As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.PoolId*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: poolId
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.NodeId
  commentId: P:Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.NodeId
  id: NodeId
  parent: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation
  langs:
  - csharp
  - vb
  name: NodeId
  nameWithType: ComputeNodeInformation.NodeId
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.NodeId
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNodeInformation.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: NodeId
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNodeInformation.cs
    startLine: 82
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nGets or sets the id of the node on which the task ran.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "nodeId")]

      public string NodeId { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="nodeId")>

      Public Property NodeId As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.NodeId*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: nodeId
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.TaskRootDirectory
  commentId: P:Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.TaskRootDirectory
  id: TaskRootDirectory
  parent: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation
  langs:
  - csharp
  - vb
  name: TaskRootDirectory
  nameWithType: ComputeNodeInformation.TaskRootDirectory
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.TaskRootDirectory
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNodeInformation.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: TaskRootDirectory
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNodeInformation.cs
    startLine: 88
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nGets or sets the root directory of the task on the compute node.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "taskRootDirectory")]

      public string TaskRootDirectory { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="taskRootDirectory")>

      Public Property TaskRootDirectory As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.TaskRootDirectory*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: taskRootDirectory
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.TaskRootDirectoryUrl
  commentId: P:Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.TaskRootDirectoryUrl
  id: TaskRootDirectoryUrl
  parent: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation
  langs:
  - csharp
  - vb
  name: TaskRootDirectoryUrl
  nameWithType: ComputeNodeInformation.TaskRootDirectoryUrl
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.TaskRootDirectoryUrl
  type: Property
  source:
    remote:
      path: src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNodeInformation.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: TaskRootDirectoryUrl
    path: src/azure-sdk-for-net/src/Batch/Client/Src/GeneratedProtocol/Models/ComputeNodeInformation.cs
    startLine: 95
  assemblies:
  - Microsoft.Azure.Batch
  namespace: Microsoft.Azure.Batch.Protocol.Models
  summary: "\nGets or sets the URL to the root directory of the task on the\ncompute node.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "taskRootDirectoryUrl")]

      public string TaskRootDirectoryUrl { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="taskRootDirectoryUrl")>

      Public Property TaskRootDirectoryUrl As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.TaskRootDirectoryUrl*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: taskRootDirectoryUrl
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Azure.Batch.Protocol.Models
  commentId: N:Microsoft.Azure.Batch.Protocol.Models
  isExternal: false
  name: Microsoft.Azure.Batch.Protocol.Models
  nameWithType: Microsoft.Azure.Batch.Protocol.Models
  fullName: Microsoft.Azure.Batch.Protocol.Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.#ctor*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.#ctor
  isExternal: false
  name: ComputeNodeInformation
  nameWithType: ComputeNodeInformation.ComputeNodeInformation
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.ComputeNodeInformation
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.AffinityId*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.AffinityId
  isExternal: false
  name: AffinityId
  nameWithType: ComputeNodeInformation.AffinityId
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.AffinityId
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.NodeUrl*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.NodeUrl
  isExternal: false
  name: NodeUrl
  nameWithType: ComputeNodeInformation.NodeUrl
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.NodeUrl
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.PoolId*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.PoolId
  isExternal: false
  name: PoolId
  nameWithType: ComputeNodeInformation.PoolId
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.PoolId
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.NodeId*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.NodeId
  isExternal: false
  name: NodeId
  nameWithType: ComputeNodeInformation.NodeId
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.NodeId
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.TaskRootDirectory*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.TaskRootDirectory
  isExternal: false
  name: TaskRootDirectory
  nameWithType: ComputeNodeInformation.TaskRootDirectory
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.TaskRootDirectory
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.TaskRootDirectoryUrl*
  commentId: Overload:Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.TaskRootDirectoryUrl
  isExternal: false
  name: TaskRootDirectoryUrl
  nameWithType: ComputeNodeInformation.TaskRootDirectoryUrl
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNodeInformation.TaskRootDirectoryUrl
