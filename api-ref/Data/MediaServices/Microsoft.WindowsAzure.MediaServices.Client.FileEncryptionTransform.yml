### YamlMime:ManagedReference
items:
- uid: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform
  commentId: T:Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform
  id: FileEncryptionTransform
  parent: Microsoft.WindowsAzure.MediaServices.Client
  children:
  - Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.CanReuseTransform
  - Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.CanTransformMultipleBlocks
  - Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.Dispose
  - Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.Dispose(System.Boolean)
  - Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.FileOffset
  - Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.InputBlockSize
  - Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.OutputBlockSize
  - Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: FileEncryptionTransform
  nameWithType: FileEncryptionTransform
  fullName: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform
  type: Class
  source:
    remote:
      path: src/net/Client/Common/Common.FileEncryption/FileEncryptionTransform.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-media-services
    id: FileEncryptionTransform
    path: src/azure-sdk-for-media-services/src/net/Client/Common/Common.FileEncryption/FileEncryptionTransform.cs
    startLine: 26
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Common.FileEncryption
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nProvides a file encryption transformation.\n"
  example: []
  syntax:
    content: 'public class FileEncryptionTransform : ICryptoTransform, IDisposable'
    content.vb: >-
      Public Class FileEncryptionTransform
          Implements ICryptoTransform, IDisposable
  inheritance:
  - System.Object
  implements:
  - System.Security.Cryptography.ICryptoTransform
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.FileOffset
  commentId: P:Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.FileOffset
  id: FileOffset
  parent: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform
  langs:
  - csharp
  - vb
  name: FileOffset
  nameWithType: FileEncryptionTransform.FileOffset
  fullName: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.FileOffset
  type: Property
  source:
    remote:
      path: src/net/Client/Common/Common.FileEncryption/FileEncryptionTransform.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-media-services
    id: FileOffset
    path: src/azure-sdk-for-media-services/src/net/Client/Common/Common.FileEncryption/FileEncryptionTransform.cs
    startLine: 68
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Common.FileEncryption
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nGets or sets the file offset.\n"
  example: []
  syntax:
    content: public long FileOffset { get; set; }
    content.vb: Public Property FileOffset As Long
    parameters: []
    return:
      type: System.Int64
      description: "\nThe file offset.\n"
  overload: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.FileOffset*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.InputBlockSize
  commentId: P:Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.InputBlockSize
  id: InputBlockSize
  parent: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform
  langs:
  - csharp
  - vb
  name: InputBlockSize
  nameWithType: FileEncryptionTransform.InputBlockSize
  fullName: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.InputBlockSize
  type: Property
  source:
    remote:
      path: src/net/Client/Common/Common.FileEncryption/FileEncryptionTransform.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-media-services
    id: InputBlockSize
    path: src/azure-sdk-for-media-services/src/net/Client/Common/Common.FileEncryption/FileEncryptionTransform.cs
    startLine: 76
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Common.FileEncryption
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nGets the input block size.\n"
  example: []
  syntax:
    content: public int InputBlockSize { get; }
    content.vb: Public ReadOnly Property InputBlockSize As Integer
    parameters: []
    return:
      type: System.Int32
      description: The size of the input data blocks in bytes.
  overload: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.InputBlockSize*
  implements:
  - System.Security.Cryptography.ICryptoTransform.InputBlockSize
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.OutputBlockSize
  commentId: P:Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.OutputBlockSize
  id: OutputBlockSize
  parent: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform
  langs:
  - csharp
  - vb
  name: OutputBlockSize
  nameWithType: FileEncryptionTransform.OutputBlockSize
  fullName: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.OutputBlockSize
  type: Property
  source:
    remote:
      path: src/net/Client/Common/Common.FileEncryption/FileEncryptionTransform.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-media-services
    id: OutputBlockSize
    path: src/azure-sdk-for-media-services/src/net/Client/Common/Common.FileEncryption/FileEncryptionTransform.cs
    startLine: 85
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Common.FileEncryption
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nGets the output block size.\n"
  example: []
  syntax:
    content: public int OutputBlockSize { get; }
    content.vb: Public ReadOnly Property OutputBlockSize As Integer
    parameters: []
    return:
      type: System.Int32
      description: The size of the output data blocks in bytes.
  overload: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.OutputBlockSize*
  implements:
  - System.Security.Cryptography.ICryptoTransform.OutputBlockSize
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.CanTransformMultipleBlocks
  commentId: P:Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.CanTransformMultipleBlocks
  id: CanTransformMultipleBlocks
  parent: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform
  langs:
  - csharp
  - vb
  name: CanTransformMultipleBlocks
  nameWithType: FileEncryptionTransform.CanTransformMultipleBlocks
  fullName: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.CanTransformMultipleBlocks
  type: Property
  source:
    remote:
      path: src/net/Client/Common/Common.FileEncryption/FileEncryptionTransform.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-media-services
    id: CanTransformMultipleBlocks
    path: src/azure-sdk-for-media-services/src/net/Client/Common/Common.FileEncryption/FileEncryptionTransform.cs
    startLine: 94
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Common.FileEncryption
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nGets a value indicating whether multiple blocks can be transformed.\n"
  example: []
  syntax:
    content: public bool CanTransformMultipleBlocks { get; }
    content.vb: Public ReadOnly Property CanTransformMultipleBlocks As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if multiple blocks can be transformed; otherwise, false.
  overload: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.CanTransformMultipleBlocks*
  implements:
  - System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.CanReuseTransform
  commentId: P:Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.CanReuseTransform
  id: CanReuseTransform
  parent: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform
  langs:
  - csharp
  - vb
  name: CanReuseTransform
  nameWithType: FileEncryptionTransform.CanReuseTransform
  fullName: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.CanReuseTransform
  type: Property
  source:
    remote:
      path: src/net/Client/Common/Common.FileEncryption/FileEncryptionTransform.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-media-services
    id: CanReuseTransform
    path: src/azure-sdk-for-media-services/src/net/Client/Common/Common.FileEncryption/FileEncryptionTransform.cs
    startLine: 103
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Common.FileEncryption
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nGets a value indicating whether the current transform can be reused.\n"
  example: []
  syntax:
    content: public bool CanReuseTransform { get; }
    content.vb: Public ReadOnly Property CanReuseTransform As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the current transform can be reused; otherwise, false.
  overload: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.CanReuseTransform*
  implements:
  - System.Security.Cryptography.ICryptoTransform.CanReuseTransform
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  id: TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform
  langs:
  - csharp
  - vb
  name: TransformBlock(Byte[], Int32, Int32, Byte[], Int32)
  nameWithType: FileEncryptionTransform.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.TransformBlock(System.Byte[], System.Int32, System.Int32, System.Byte[], System.Int32)
  type: Method
  source:
    remote:
      path: src/net/Client/Common/Common.FileEncryption/FileEncryptionTransform.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-media-services
    id: TransformBlock
    path: src/azure-sdk-for-media-services/src/net/Client/Common/Common.FileEncryption/FileEncryptionTransform.cs
    startLine: 119
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Common.FileEncryption
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nTransforms the specified region of the input byte array and copies the resulting transform to the specified region of the output byte array.\n"
  example: []
  syntax:
    content: public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset)
    content.vb: Public Function TransformBlock(inputBuffer As Byte(), inputOffset As Integer, inputCount As Integer, outputBuffer As Byte(), outputOffset As Integer) As Integer
    parameters:
    - id: inputBuffer
      type: System.Byte[]
      description: The input for which to compute the transform.
    - id: inputOffset
      type: System.Int32
      description: The offset into the input byte array from which to begin using data.
    - id: inputCount
      type: System.Int32
      description: The number of bytes in the input byte array to use as data.
    - id: outputBuffer
      type: System.Byte[]
      description: The output to which to write the transform.
    - id: outputOffset
      type: System.Int32
      description: The offset into the output byte array from which to begin writing data.
    return:
      type: System.Int32
      description: "\nThe number of bytes written.\n"
  overload: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.TransformBlock*
  implements:
  - System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  nameWithType.vb: FileEncryptionTransform.TransformBlock(Byte(), Int32, Int32, Byte(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.TransformBlock(System.Byte(), System.Int32, System.Int32, System.Byte(), System.Int32)
  name.vb: TransformBlock(Byte(), Int32, Int32, Byte(), Int32)
- uid: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  id: TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform
  langs:
  - csharp
  - vb
  name: TransformFinalBlock(Byte[], Int32, Int32)
  nameWithType: FileEncryptionTransform.TransformFinalBlock(Byte[], Int32, Int32)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.TransformFinalBlock(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/net/Client/Common/Common.FileEncryption/FileEncryptionTransform.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-media-services
    id: TransformFinalBlock
    path: src/azure-sdk-for-media-services/src/net/Client/Common/Common.FileEncryption/FileEncryptionTransform.cs
    startLine: 137
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Common.FileEncryption
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nTransforms the specified region of the specified byte array.\n"
  example: []
  syntax:
    content: public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount)
    content.vb: Public Function TransformFinalBlock(inputBuffer As Byte(), inputOffset As Integer, inputCount As Integer) As Byte()
    parameters:
    - id: inputBuffer
      type: System.Byte[]
      description: The input for which to compute the transform.
    - id: inputOffset
      type: System.Int32
      description: The offset into the byte array from which to begin using data.
    - id: inputCount
      type: System.Int32
      description: The number of bytes in the byte array to use as data.
    return:
      type: System.Byte[]
      description: "\nThe computed transform.\n"
  overload: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.TransformFinalBlock*
  implements:
  - System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  nameWithType.vb: FileEncryptionTransform.TransformFinalBlock(Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.TransformFinalBlock(System.Byte(), System.Int32, System.Int32)
  name.vb: TransformFinalBlock(Byte(), Int32, Int32)
- uid: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.Dispose
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.Dispose
  id: Dispose
  parent: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: FileEncryptionTransform.Dispose()
  fullName: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.Dispose()
  type: Method
  source:
    remote:
      path: src/net/Client/Common/Common.FileEncryption/FileEncryptionTransform.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-media-services
    id: Dispose
    path: src/azure-sdk-for-media-services/src/net/Client/Common/Common.FileEncryption/FileEncryptionTransform.cs
    startLine: 156
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Common.FileEncryption
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nPerforms application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.Dispose(System.Boolean)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: FileEncryptionTransform.Dispose(Boolean)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/net/Client/Common/Common.FileEncryption/FileEncryptionTransform.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-media-services
    id: Dispose
    path: src/azure-sdk-for-media-services/src/net/Client/Common/Common.FileEncryption/FileEncryptionTransform.cs
    startLine: 169
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Common.FileEncryption
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nReleases unmanaged and - optionally - managed resources.\n"
  example: []
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: <code>true</code> to release both managed and unmanaged resources; <code>false</code> to release only unmanaged resources.
  overload: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.Dispose*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: Microsoft.WindowsAzure.MediaServices.Client
  commentId: N:Microsoft.WindowsAzure.MediaServices.Client
  isExternal: false
  name: Microsoft.WindowsAzure.MediaServices.Client
  nameWithType: Microsoft.WindowsAzure.MediaServices.Client
  fullName: Microsoft.WindowsAzure.MediaServices.Client
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Security.Cryptography.ICryptoTransform
  commentId: T:System.Security.Cryptography.ICryptoTransform
  parent: System.Security.Cryptography
  isExternal: true
  name: ICryptoTransform
  nameWithType: ICryptoTransform
  fullName: System.Security.Cryptography.ICryptoTransform
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Security.Cryptography
  commentId: N:System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  nameWithType: System.Security.Cryptography
  fullName: System.Security.Cryptography
- uid: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.FileOffset*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.FileOffset
  isExternal: false
  name: FileOffset
  nameWithType: FileEncryptionTransform.FileOffset
  fullName: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.FileOffset
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.InputBlockSize*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.InputBlockSize
  isExternal: false
  name: InputBlockSize
  nameWithType: FileEncryptionTransform.InputBlockSize
  fullName: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.InputBlockSize
- uid: System.Security.Cryptography.ICryptoTransform.InputBlockSize
  commentId: P:System.Security.Cryptography.ICryptoTransform.InputBlockSize
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: true
  name: InputBlockSize
  nameWithType: ICryptoTransform.InputBlockSize
  fullName: System.Security.Cryptography.ICryptoTransform.InputBlockSize
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.OutputBlockSize*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.OutputBlockSize
  isExternal: false
  name: OutputBlockSize
  nameWithType: FileEncryptionTransform.OutputBlockSize
  fullName: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.OutputBlockSize
- uid: System.Security.Cryptography.ICryptoTransform.OutputBlockSize
  commentId: P:System.Security.Cryptography.ICryptoTransform.OutputBlockSize
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: true
  name: OutputBlockSize
  nameWithType: ICryptoTransform.OutputBlockSize
  fullName: System.Security.Cryptography.ICryptoTransform.OutputBlockSize
- uid: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.CanTransformMultipleBlocks*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.CanTransformMultipleBlocks
  isExternal: false
  name: CanTransformMultipleBlocks
  nameWithType: FileEncryptionTransform.CanTransformMultipleBlocks
  fullName: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.CanTransformMultipleBlocks
- uid: System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks
  commentId: P:System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: true
  name: CanTransformMultipleBlocks
  nameWithType: ICryptoTransform.CanTransformMultipleBlocks
  fullName: System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.CanReuseTransform*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.CanReuseTransform
  isExternal: false
  name: CanReuseTransform
  nameWithType: FileEncryptionTransform.CanReuseTransform
  fullName: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.CanReuseTransform
- uid: System.Security.Cryptography.ICryptoTransform.CanReuseTransform
  commentId: P:System.Security.Cryptography.ICryptoTransform.CanReuseTransform
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: true
  name: CanReuseTransform
  nameWithType: ICryptoTransform.CanReuseTransform
  fullName: System.Security.Cryptography.ICryptoTransform.CanReuseTransform
- uid: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.TransformBlock*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.TransformBlock
  isExternal: false
  name: TransformBlock
  nameWithType: FileEncryptionTransform.TransformBlock
  fullName: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.TransformBlock
- uid: System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  commentId: M:System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: true
  name: TransformBlock(Byte[], Int32, Int32, Byte[], Int32)
  nameWithType: ICryptoTransform.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)
  fullName: System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[], System.Int32, System.Int32, System.Byte[], System.Int32)
  nameWithType.vb: ICryptoTransform.TransformBlock(Byte(), Int32, Int32, Byte(), Int32)
  fullname.vb: System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte(), System.Int32, System.Int32, System.Byte(), System.Int32)
  name.vb: TransformBlock(Byte(), Int32, Int32, Byte(), Int32)
  spec.csharp:
  - uid: System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
    name: TransformBlock
    nameWithType: ICryptoTransform.TransformBlock
    fullName: System.Security.Cryptography.ICryptoTransform.TransformBlock
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
    name: TransformBlock
    nameWithType: ICryptoTransform.TransformBlock
    fullName: System.Security.Cryptography.ICryptoTransform.TransformBlock
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.TransformFinalBlock*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.TransformFinalBlock
  isExternal: false
  name: TransformFinalBlock
  nameWithType: FileEncryptionTransform.TransformFinalBlock
  fullName: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.TransformFinalBlock
- uid: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: true
  name: TransformFinalBlock(Byte[], Int32, Int32)
  nameWithType: ICryptoTransform.TransformFinalBlock(Byte[], Int32, Int32)
  fullName: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[], System.Int32, System.Int32)
  nameWithType.vb: ICryptoTransform.TransformFinalBlock(Byte(), Int32, Int32)
  fullname.vb: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte(), System.Int32, System.Int32)
  name.vb: TransformFinalBlock(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
    name: TransformFinalBlock
    nameWithType: ICryptoTransform.TransformFinalBlock
    fullName: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
    name: TransformFinalBlock
    nameWithType: ICryptoTransform.TransformFinalBlock
    fullName: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.Dispose*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.Dispose
  isExternal: false
  name: Dispose
  nameWithType: FileEncryptionTransform.Dispose
  fullName: Microsoft.WindowsAzure.MediaServices.Client.FileEncryptionTransform.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
