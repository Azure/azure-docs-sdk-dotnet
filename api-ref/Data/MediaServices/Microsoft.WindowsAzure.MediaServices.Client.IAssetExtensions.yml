### YamlMime:ManagedReference
items:
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions
  commentId: T:Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions
  id: IAssetExtensions
  parent: Microsoft.WindowsAzure.MediaServices.Client
  children:
  - Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.Copy(Microsoft.WindowsAzure.MediaServices.Client.IAsset,Microsoft.WindowsAzure.MediaServices.Client.IAsset,Microsoft.WindowsAzure.Storage.Auth.StorageCredentials)
  - Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.CopyAsync(Microsoft.WindowsAzure.MediaServices.Client.IAsset,Microsoft.WindowsAzure.MediaServices.Client.IAsset,Microsoft.WindowsAzure.Storage.Auth.StorageCredentials,System.Threading.CancellationToken)
  - Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.DownloadToFolder(Microsoft.WindowsAzure.MediaServices.Client.IAsset,System.String)
  - Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.DownloadToFolder(Microsoft.WindowsAzure.MediaServices.Client.IAsset,System.String,System.Action{Microsoft.WindowsAzure.MediaServices.Client.IAssetFile,Microsoft.WindowsAzure.MediaServices.Client.DownloadProgressChangedEventArgs})
  - Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.DownloadToFolderAsync(Microsoft.WindowsAzure.MediaServices.Client.IAsset,System.String,System.Action{Microsoft.WindowsAzure.MediaServices.Client.IAssetFile,Microsoft.WindowsAzure.MediaServices.Client.DownloadProgressChangedEventArgs},System.Threading.CancellationToken)
  - Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.DownloadToFolderAsync(Microsoft.WindowsAzure.MediaServices.Client.IAsset,System.String,System.Threading.CancellationToken)
  - Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GenerateFromStorage(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  - Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GenerateFromStorageAsync(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  - Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetHlsUri(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  - Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetHlsv3Uri(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  - Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetManifestAssetFile(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  - Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMediaContext(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  - Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMetadata(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  - Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMetadata(Microsoft.WindowsAzure.MediaServices.Client.IAsset,Microsoft.WindowsAzure.MediaServices.Client.ILocator)
  - Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMetadataAsync(Microsoft.WindowsAzure.MediaServices.Client.IAsset,Microsoft.WindowsAzure.MediaServices.Client.ILocator,System.Threading.CancellationToken)
  - Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMetadataAsync(Microsoft.WindowsAzure.MediaServices.Client.IAsset,System.Threading.CancellationToken)
  - Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMpegDashUri(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  - Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetSmoothStreamingUri(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  - Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.InputMetadataFileSuffix
  - Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.MetadataFileSuffix
  langs:
  - csharp
  - vb
  name: IAssetExtensions
  nameWithType: IAssetExtensions
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions
  type: Class
  source:
    remote:
      path: MediaServices.Client.Extensions/IAssetExtensions.cs
      branch: dev
      repo: https://github.com/Azure/azure-sdk-for-media-services-extensions
    id: IAssetExtensions
    path: src/azure-sdk-for-media-services-extensions/MediaServices.Client.Extensions/IAssetExtensions.cs
    startLine: 33
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Extensions
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nContains extension methods and helpers for the <xref href=\"Microsoft.WindowsAzure.MediaServices.Client.IAsset\" data-throw-if-not-resolved=\"false\"></xref> interface.\n"
  example: []
  syntax:
    content: public static class IAssetExtensions
    content.vb: Public Module IAssetExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.MetadataFileSuffix
  commentId: F:Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.MetadataFileSuffix
  id: MetadataFileSuffix
  parent: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions
  langs:
  - csharp
  - vb
  name: MetadataFileSuffix
  nameWithType: IAssetExtensions.MetadataFileSuffix
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.MetadataFileSuffix
  type: Field
  source:
    remote:
      path: MediaServices.Client.Extensions/IAssetExtensions.cs
      branch: dev
      repo: https://github.com/Azure/azure-sdk-for-media-services-extensions
    id: MetadataFileSuffix
    path: src/azure-sdk-for-media-services-extensions/MediaServices.Client.Extensions/IAssetExtensions.cs
    startLine: 38
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Extensions
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nFile name suffix with extension which represents metadata about output of encoder.\n"
  example: []
  syntax:
    content: public const string MetadataFileSuffix = "_manifest.xml"
    content.vb: Public Const MetadataFileSuffix As String = "_manifest.xml"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.InputMetadataFileSuffix
  commentId: F:Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.InputMetadataFileSuffix
  id: InputMetadataFileSuffix
  parent: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions
  langs:
  - csharp
  - vb
  name: InputMetadataFileSuffix
  nameWithType: IAssetExtensions.InputMetadataFileSuffix
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.InputMetadataFileSuffix
  type: Field
  source:
    remote:
      path: MediaServices.Client.Extensions/IAssetExtensions.cs
      branch: dev
      repo: https://github.com/Azure/azure-sdk-for-media-services-extensions
    id: InputMetadataFileSuffix
    path: src/azure-sdk-for-media-services-extensions/MediaServices.Client.Extensions/IAssetExtensions.cs
    startLine: 43
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Extensions
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nFile name suffix with extension which represents metadata about input of encoder.\n"
  example: []
  syntax:
    content: public const string InputMetadataFileSuffix = "_metadata.xml"
    content.vb: Public Const InputMetadataFileSuffix As String = "_metadata.xml"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GenerateFromStorageAsync(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GenerateFromStorageAsync(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  id: GenerateFromStorageAsync(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  isExtensionMethod: true
  parent: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions
  langs:
  - csharp
  - vb
  name: GenerateFromStorageAsync(IAsset)
  nameWithType: IAssetExtensions.GenerateFromStorageAsync(IAsset)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GenerateFromStorageAsync(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  type: Method
  source:
    remote:
      path: MediaServices.Client.Extensions/IAssetExtensions.cs
      branch: dev
      repo: https://github.com/Azure/azure-sdk-for-media-services-extensions
    id: GenerateFromStorageAsync
    path: src/azure-sdk-for-media-services-extensions/MediaServices.Client.Extensions/IAssetExtensions.cs
    startLine: 50
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Extensions
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nReturns a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> instance to generate <xref href=\"Microsoft.WindowsAzure.MediaServices.Client.IAssetFile\" data-throw-if-not-resolved=\"false\"></xref> for the <span class=\"paramref\">asset</span>.\n"
  example: []
  syntax:
    content: public static Task GenerateFromStorageAsync(this IAsset asset)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GenerateFromStorageAsync(asset As IAsset) As Task
    parameters:
    - id: asset
      type: Microsoft.WindowsAzure.MediaServices.Client.IAsset
      description: The <xref href="Microsoft.WindowsAzure.MediaServices.Client.IAsset" data-throw-if-not-resolved="false"></xref> instance where to generate its <xref href="Microsoft.WindowsAzure.MediaServices.Client.IAssetFile" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> instance to generate <xref href="Microsoft.WindowsAzure.MediaServices.Client.IAssetFile" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GenerateFromStorageAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GenerateFromStorage(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GenerateFromStorage(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  id: GenerateFromStorage(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  isExtensionMethod: true
  parent: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions
  langs:
  - csharp
  - vb
  name: GenerateFromStorage(IAsset)
  nameWithType: IAssetExtensions.GenerateFromStorage(IAsset)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GenerateFromStorage(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  type: Method
  source:
    remote:
      path: MediaServices.Client.Extensions/IAssetExtensions.cs
      branch: dev
      repo: https://github.com/Azure/azure-sdk-for-media-services-extensions
    id: GenerateFromStorage
    path: src/azure-sdk-for-media-services-extensions/MediaServices.Client.Extensions/IAssetExtensions.cs
    startLine: 74
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Extensions
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nGenerates <xref href=\"Microsoft.WindowsAzure.MediaServices.Client.IAssetFile\" data-throw-if-not-resolved=\"false\"></xref> for the <span class=\"paramref\">asset</span>.\n"
  example: []
  syntax:
    content: public static void GenerateFromStorage(this IAsset asset)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub GenerateFromStorage(asset As IAsset)
    parameters:
    - id: asset
      type: Microsoft.WindowsAzure.MediaServices.Client.IAsset
      description: The <xref href="Microsoft.WindowsAzure.MediaServices.Client.IAsset" data-throw-if-not-resolved="false"></xref> instance where to generate its <xref href="Microsoft.WindowsAzure.MediaServices.Client.IAssetFile" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GenerateFromStorage*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMetadataAsync(Microsoft.WindowsAzure.MediaServices.Client.IAsset,Microsoft.WindowsAzure.MediaServices.Client.ILocator,System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMetadataAsync(Microsoft.WindowsAzure.MediaServices.Client.IAsset,Microsoft.WindowsAzure.MediaServices.Client.ILocator,System.Threading.CancellationToken)
  id: GetMetadataAsync(Microsoft.WindowsAzure.MediaServices.Client.IAsset,Microsoft.WindowsAzure.MediaServices.Client.ILocator,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions
  langs:
  - csharp
  - vb
  name: GetMetadataAsync(IAsset, ILocator, CancellationToken)
  nameWithType: IAssetExtensions.GetMetadataAsync(IAsset, ILocator, CancellationToken)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMetadataAsync(Microsoft.WindowsAzure.MediaServices.Client.IAsset, Microsoft.WindowsAzure.MediaServices.Client.ILocator, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: MediaServices.Client.Extensions/IAssetExtensions.cs
      branch: dev
      repo: https://github.com/Azure/azure-sdk-for-media-services-extensions
    id: GetMetadataAsync
    path: src/azure-sdk-for-media-services-extensions/MediaServices.Client.Extensions/IAssetExtensions.cs
    startLine: 89
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Extensions
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nReturns a <xref href=\"System.Threading.Tasks.Task%601\" data-throw-if-not-resolved=\"false\"></xref> instance to retrieve the <span class=\"paramref\">asset</span> metadata.\n"
  example: []
  syntax:
    content: public static Task<IEnumerable<AssetFileMetadata>> GetMetadataAsync(this IAsset asset, ILocator sasLocator, CancellationToken cancellationToken)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetMetadataAsync(asset As IAsset, sasLocator As ILocator, cancellationToken As CancellationToken) As Task(Of IEnumerable(Of AssetFileMetadata))
    parameters:
    - id: asset
      type: Microsoft.WindowsAzure.MediaServices.Client.IAsset
      description: The <xref href="Microsoft.WindowsAzure.MediaServices.Client.IAsset" data-throw-if-not-resolved="false"></xref> instance from where to get the metadata.
    - id: sasLocator
      type: Microsoft.WindowsAzure.MediaServices.Client.ILocator
      description: The <xref href="Microsoft.WindowsAzure.MediaServices.Client.ILocator" data-throw-if-not-resolved="false"></xref> instance.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> instance used for cancellation.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.WindowsAzure.MediaServices.Client.Metadata.AssetFileMetadata}}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> instance to retrieve the <span class="paramref">asset</span> metadata.
  overload: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMetadataAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMetadataAsync(Microsoft.WindowsAzure.MediaServices.Client.IAsset,System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMetadataAsync(Microsoft.WindowsAzure.MediaServices.Client.IAsset,System.Threading.CancellationToken)
  id: GetMetadataAsync(Microsoft.WindowsAzure.MediaServices.Client.IAsset,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions
  langs:
  - csharp
  - vb
  name: GetMetadataAsync(IAsset, CancellationToken)
  nameWithType: IAssetExtensions.GetMetadataAsync(IAsset, CancellationToken)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMetadataAsync(Microsoft.WindowsAzure.MediaServices.Client.IAsset, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: MediaServices.Client.Extensions/IAssetExtensions.cs
      branch: dev
      repo: https://github.com/Azure/azure-sdk-for-media-services-extensions
    id: GetMetadataAsync
    path: src/azure-sdk-for-media-services-extensions/MediaServices.Client.Extensions/IAssetExtensions.cs
    startLine: 140
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Extensions
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nReturns a <xref href=\"System.Threading.Tasks.Task%601\" data-throw-if-not-resolved=\"false\"></xref> instance to retrieve the <span class=\"paramref\">asset</span> metadata.\n"
  example: []
  syntax:
    content: public static Task<IEnumerable<AssetFileMetadata>> GetMetadataAsync(this IAsset asset, CancellationToken cancellationToken)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetMetadataAsync(asset As IAsset, cancellationToken As CancellationToken) As Task(Of IEnumerable(Of AssetFileMetadata))
    parameters:
    - id: asset
      type: Microsoft.WindowsAzure.MediaServices.Client.IAsset
      description: The <xref href="Microsoft.WindowsAzure.MediaServices.Client.IAsset" data-throw-if-not-resolved="false"></xref> instance from where to get the metadata.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> instance used for cancellation.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.WindowsAzure.MediaServices.Client.Metadata.AssetFileMetadata}}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> instance to retrieve the <span class="paramref">asset</span> metadata.
  overload: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMetadataAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMetadata(Microsoft.WindowsAzure.MediaServices.Client.IAsset,Microsoft.WindowsAzure.MediaServices.Client.ILocator)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMetadata(Microsoft.WindowsAzure.MediaServices.Client.IAsset,Microsoft.WindowsAzure.MediaServices.Client.ILocator)
  id: GetMetadata(Microsoft.WindowsAzure.MediaServices.Client.IAsset,Microsoft.WindowsAzure.MediaServices.Client.ILocator)
  isExtensionMethod: true
  parent: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions
  langs:
  - csharp
  - vb
  name: GetMetadata(IAsset, ILocator)
  nameWithType: IAssetExtensions.GetMetadata(IAsset, ILocator)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMetadata(Microsoft.WindowsAzure.MediaServices.Client.IAsset, Microsoft.WindowsAzure.MediaServices.Client.ILocator)
  type: Method
  source:
    remote:
      path: MediaServices.Client.Extensions/IAssetExtensions.cs
      branch: dev
      repo: https://github.com/Azure/azure-sdk-for-media-services-extensions
    id: GetMetadata
    path: src/azure-sdk-for-media-services-extensions/MediaServices.Client.Extensions/IAssetExtensions.cs
    startLine: 164
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Extensions
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nReturns a <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> enumeration with the <span class=\"paramref\">asset</span> metadata.\n"
  example: []
  syntax:
    content: public static IEnumerable<AssetFileMetadata> GetMetadata(this IAsset asset, ILocator sasLocator)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetMetadata(asset As IAsset, sasLocator As ILocator) As IEnumerable(Of AssetFileMetadata)
    parameters:
    - id: asset
      type: Microsoft.WindowsAzure.MediaServices.Client.IAsset
      description: The <xref href="Microsoft.WindowsAzure.MediaServices.Client.IAsset" data-throw-if-not-resolved="false"></xref> instance from where to get the metadata.
    - id: sasLocator
      type: Microsoft.WindowsAzure.MediaServices.Client.ILocator
      description: The <xref href="Microsoft.WindowsAzure.MediaServices.Client.ILocator" data-throw-if-not-resolved="false"></xref> instance.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.WindowsAzure.MediaServices.Client.Metadata.AssetFileMetadata}
      description: A <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> enumeration with the <span class="paramref">asset</span> metadata.
  overload: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMetadata*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMetadata(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMetadata(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  id: GetMetadata(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  isExtensionMethod: true
  parent: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions
  langs:
  - csharp
  - vb
  name: GetMetadata(IAsset)
  nameWithType: IAssetExtensions.GetMetadata(IAsset)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMetadata(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  type: Method
  source:
    remote:
      path: MediaServices.Client.Extensions/IAssetExtensions.cs
      branch: dev
      repo: https://github.com/Azure/azure-sdk-for-media-services-extensions
    id: GetMetadata
    path: src/azure-sdk-for-media-services-extensions/MediaServices.Client.Extensions/IAssetExtensions.cs
    startLine: 177
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Extensions
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nReturns a <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> enumeration with the <span class=\"paramref\">asset</span> metadata.\n"
  example: []
  syntax:
    content: public static IEnumerable<AssetFileMetadata> GetMetadata(this IAsset asset)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetMetadata(asset As IAsset) As IEnumerable(Of AssetFileMetadata)
    parameters:
    - id: asset
      type: Microsoft.WindowsAzure.MediaServices.Client.IAsset
      description: The <xref href="Microsoft.WindowsAzure.MediaServices.Client.IAsset" data-throw-if-not-resolved="false"></xref> instance from where to get the metadata.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.WindowsAzure.MediaServices.Client.Metadata.AssetFileMetadata}
      description: A <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> enumeration with the <span class="paramref">asset</span> metadata.
  overload: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMetadata*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.DownloadToFolderAsync(Microsoft.WindowsAzure.MediaServices.Client.IAsset,System.String,System.Action{Microsoft.WindowsAzure.MediaServices.Client.IAssetFile,Microsoft.WindowsAzure.MediaServices.Client.DownloadProgressChangedEventArgs},System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.DownloadToFolderAsync(Microsoft.WindowsAzure.MediaServices.Client.IAsset,System.String,System.Action{Microsoft.WindowsAzure.MediaServices.Client.IAssetFile,Microsoft.WindowsAzure.MediaServices.Client.DownloadProgressChangedEventArgs},System.Threading.CancellationToken)
  id: DownloadToFolderAsync(Microsoft.WindowsAzure.MediaServices.Client.IAsset,System.String,System.Action{Microsoft.WindowsAzure.MediaServices.Client.IAssetFile,Microsoft.WindowsAzure.MediaServices.Client.DownloadProgressChangedEventArgs},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions
  langs:
  - csharp
  - vb
  name: DownloadToFolderAsync(IAsset, String, Action<IAssetFile, DownloadProgressChangedEventArgs>, CancellationToken)
  nameWithType: IAssetExtensions.DownloadToFolderAsync(IAsset, String, Action<IAssetFile, DownloadProgressChangedEventArgs>, CancellationToken)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.DownloadToFolderAsync(Microsoft.WindowsAzure.MediaServices.Client.IAsset, System.String, System.Action<Microsoft.WindowsAzure.MediaServices.Client.IAssetFile, Microsoft.WindowsAzure.MediaServices.Client.DownloadProgressChangedEventArgs>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: MediaServices.Client.Extensions/IAssetExtensions.cs
      branch: dev
      repo: https://github.com/Azure/azure-sdk-for-media-services-extensions
    id: DownloadToFolderAsync
    path: src/azure-sdk-for-media-services-extensions/MediaServices.Client.Extensions/IAssetExtensions.cs
    startLine: 193
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Extensions
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nReturns a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> instance to download all the asset files in the <span class=\"paramref\">asset</span> to the <span class=\"paramref\">folderPath</span>.\n"
  example: []
  syntax:
    content: public static Task DownloadToFolderAsync(this IAsset asset, string folderPath, Action<IAssetFile, DownloadProgressChangedEventArgs> downloadProgressChangedCallback, CancellationToken cancellationToken)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DownloadToFolderAsync(asset As IAsset, folderPath As String, downloadProgressChangedCallback As Action(Of IAssetFile, DownloadProgressChangedEventArgs), cancellationToken As CancellationToken) As Task
    parameters:
    - id: asset
      type: Microsoft.WindowsAzure.MediaServices.Client.IAsset
      description: The <xref href="Microsoft.WindowsAzure.MediaServices.Client.IAsset" data-throw-if-not-resolved="false"></xref> instance from where to download the asset files.
    - id: folderPath
      type: System.String
      description: The path to the folder where to download the asset files in the <span class="paramref">asset</span>.
    - id: downloadProgressChangedCallback
      type: System.Action{Microsoft.WindowsAzure.MediaServices.Client.IAssetFile,Microsoft.WindowsAzure.MediaServices.Client.DownloadProgressChangedEventArgs}
      description: A callback to report download progress for each asset file in the <span class="paramref">asset</span>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> instance used for cancellation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> instance to download all the asset files in the <span class="paramref">asset</span>.
  overload: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.DownloadToFolderAsync*
  nameWithType.vb: IAssetExtensions.DownloadToFolderAsync(IAsset, String, Action(Of IAssetFile, DownloadProgressChangedEventArgs), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.DownloadToFolderAsync(Microsoft.WindowsAzure.MediaServices.Client.IAsset, System.String, System.Action(Of Microsoft.WindowsAzure.MediaServices.Client.IAssetFile, Microsoft.WindowsAzure.MediaServices.Client.DownloadProgressChangedEventArgs), System.Threading.CancellationToken)
  name.vb: DownloadToFolderAsync(IAsset, String, Action(Of IAssetFile, DownloadProgressChangedEventArgs), CancellationToken)
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.DownloadToFolderAsync(Microsoft.WindowsAzure.MediaServices.Client.IAsset,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.DownloadToFolderAsync(Microsoft.WindowsAzure.MediaServices.Client.IAsset,System.String,System.Threading.CancellationToken)
  id: DownloadToFolderAsync(Microsoft.WindowsAzure.MediaServices.Client.IAsset,System.String,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions
  langs:
  - csharp
  - vb
  name: DownloadToFolderAsync(IAsset, String, CancellationToken)
  nameWithType: IAssetExtensions.DownloadToFolderAsync(IAsset, String, CancellationToken)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.DownloadToFolderAsync(Microsoft.WindowsAzure.MediaServices.Client.IAsset, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: MediaServices.Client.Extensions/IAssetExtensions.cs
      branch: dev
      repo: https://github.com/Azure/azure-sdk-for-media-services-extensions
    id: DownloadToFolderAsync
    path: src/azure-sdk-for-media-services-extensions/MediaServices.Client.Extensions/IAssetExtensions.cs
    startLine: 254
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Extensions
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nReturns a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> instance to download all the asset files in the <span class=\"paramref\">asset</span> to the <span class=\"paramref\">folderPath</span>.\n"
  example: []
  syntax:
    content: public static Task DownloadToFolderAsync(this IAsset asset, string folderPath, CancellationToken cancellationToken)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DownloadToFolderAsync(asset As IAsset, folderPath As String, cancellationToken As CancellationToken) As Task
    parameters:
    - id: asset
      type: Microsoft.WindowsAzure.MediaServices.Client.IAsset
      description: The <xref href="Microsoft.WindowsAzure.MediaServices.Client.IAsset" data-throw-if-not-resolved="false"></xref> instance from where to download the asset files.
    - id: folderPath
      type: System.String
      description: The path to the folder where to download the asset files in the <span class="paramref">asset</span>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> instance used for cancellation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> instance to download all the asset files in the <span class="paramref">asset</span>.
  overload: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.DownloadToFolderAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.DownloadToFolder(Microsoft.WindowsAzure.MediaServices.Client.IAsset,System.String,System.Action{Microsoft.WindowsAzure.MediaServices.Client.IAssetFile,Microsoft.WindowsAzure.MediaServices.Client.DownloadProgressChangedEventArgs})
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.DownloadToFolder(Microsoft.WindowsAzure.MediaServices.Client.IAsset,System.String,System.Action{Microsoft.WindowsAzure.MediaServices.Client.IAssetFile,Microsoft.WindowsAzure.MediaServices.Client.DownloadProgressChangedEventArgs})
  id: DownloadToFolder(Microsoft.WindowsAzure.MediaServices.Client.IAsset,System.String,System.Action{Microsoft.WindowsAzure.MediaServices.Client.IAssetFile,Microsoft.WindowsAzure.MediaServices.Client.DownloadProgressChangedEventArgs})
  isExtensionMethod: true
  parent: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions
  langs:
  - csharp
  - vb
  name: DownloadToFolder(IAsset, String, Action<IAssetFile, DownloadProgressChangedEventArgs>)
  nameWithType: IAssetExtensions.DownloadToFolder(IAsset, String, Action<IAssetFile, DownloadProgressChangedEventArgs>)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.DownloadToFolder(Microsoft.WindowsAzure.MediaServices.Client.IAsset, System.String, System.Action<Microsoft.WindowsAzure.MediaServices.Client.IAssetFile, Microsoft.WindowsAzure.MediaServices.Client.DownloadProgressChangedEventArgs>)
  type: Method
  source:
    remote:
      path: MediaServices.Client.Extensions/IAssetExtensions.cs
      branch: dev
      repo: https://github.com/Azure/azure-sdk-for-media-services-extensions
    id: DownloadToFolder
    path: src/azure-sdk-for-media-services-extensions/MediaServices.Client.Extensions/IAssetExtensions.cs
    startLine: 265
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Extensions
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nDownloads all the asset files in the <span class=\"paramref\">asset</span> to the <span class=\"paramref\">folderPath</span>.\n"
  example: []
  syntax:
    content: public static void DownloadToFolder(this IAsset asset, string folderPath, Action<IAssetFile, DownloadProgressChangedEventArgs> downloadProgressChangedCallback)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub DownloadToFolder(asset As IAsset, folderPath As String, downloadProgressChangedCallback As Action(Of IAssetFile, DownloadProgressChangedEventArgs))
    parameters:
    - id: asset
      type: Microsoft.WindowsAzure.MediaServices.Client.IAsset
      description: The <xref href="Microsoft.WindowsAzure.MediaServices.Client.IAsset" data-throw-if-not-resolved="false"></xref> instance from where to download the asset files.
    - id: folderPath
      type: System.String
      description: The path to the folder where to download the asset files in the <span class="paramref">asset</span>.
    - id: downloadProgressChangedCallback
      type: System.Action{Microsoft.WindowsAzure.MediaServices.Client.IAssetFile,Microsoft.WindowsAzure.MediaServices.Client.DownloadProgressChangedEventArgs}
      description: A callback to report download progress for each asset file in the <span class="paramref">asset</span>.
  overload: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.DownloadToFolder*
  nameWithType.vb: IAssetExtensions.DownloadToFolder(IAsset, String, Action(Of IAssetFile, DownloadProgressChangedEventArgs))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.DownloadToFolder(Microsoft.WindowsAzure.MediaServices.Client.IAsset, System.String, System.Action(Of Microsoft.WindowsAzure.MediaServices.Client.IAssetFile, Microsoft.WindowsAzure.MediaServices.Client.DownloadProgressChangedEventArgs))
  name.vb: DownloadToFolder(IAsset, String, Action(Of IAssetFile, DownloadProgressChangedEventArgs))
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.DownloadToFolder(Microsoft.WindowsAzure.MediaServices.Client.IAsset,System.String)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.DownloadToFolder(Microsoft.WindowsAzure.MediaServices.Client.IAsset,System.String)
  id: DownloadToFolder(Microsoft.WindowsAzure.MediaServices.Client.IAsset,System.String)
  isExtensionMethod: true
  parent: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions
  langs:
  - csharp
  - vb
  name: DownloadToFolder(IAsset, String)
  nameWithType: IAssetExtensions.DownloadToFolder(IAsset, String)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.DownloadToFolder(Microsoft.WindowsAzure.MediaServices.Client.IAsset, System.String)
  type: Method
  source:
    remote:
      path: MediaServices.Client.Extensions/IAssetExtensions.cs
      branch: dev
      repo: https://github.com/Azure/azure-sdk-for-media-services-extensions
    id: DownloadToFolder
    path: src/azure-sdk-for-media-services-extensions/MediaServices.Client.Extensions/IAssetExtensions.cs
    startLine: 278
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Extensions
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nDownloads all the asset files in the <span class=\"paramref\">asset</span> to the <span class=\"paramref\">folderPath</span>.\n"
  example: []
  syntax:
    content: public static void DownloadToFolder(this IAsset asset, string folderPath)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub DownloadToFolder(asset As IAsset, folderPath As String)
    parameters:
    - id: asset
      type: Microsoft.WindowsAzure.MediaServices.Client.IAsset
      description: The <xref href="Microsoft.WindowsAzure.MediaServices.Client.IAsset" data-throw-if-not-resolved="false"></xref> instance from where to download the asset files.
    - id: folderPath
      type: System.String
      description: The path to the folder where to download the asset files in the <span class="paramref">asset</span>.
  overload: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.DownloadToFolder*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetManifestAssetFile(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetManifestAssetFile(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  id: GetManifestAssetFile(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  isExtensionMethod: true
  parent: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions
  langs:
  - csharp
  - vb
  name: GetManifestAssetFile(IAsset)
  nameWithType: IAssetExtensions.GetManifestAssetFile(IAsset)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetManifestAssetFile(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  type: Method
  source:
    remote:
      path: MediaServices.Client.Extensions/IAssetExtensions.cs
      branch: dev
      repo: https://github.com/Azure/azure-sdk-for-media-services-extensions
    id: GetManifestAssetFile
    path: src/azure-sdk-for-media-services-extensions/MediaServices.Client.Extensions/IAssetExtensions.cs
    startLine: 288
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Extensions
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nReturns the <xref href=\"Microsoft.WindowsAzure.MediaServices.Client.IAssetFile\" data-throw-if-not-resolved=\"false\"></xref> instance that represents the manifest file of the asset; otherwise, null.\n"
  example: []
  syntax:
    content: public static IAssetFile GetManifestAssetFile(this IAsset asset)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetManifestAssetFile(asset As IAsset) As IAssetFile
    parameters:
    - id: asset
      type: Microsoft.WindowsAzure.MediaServices.Client.IAsset
      description: The <xref href="Microsoft.WindowsAzure.MediaServices.Client.IAsset" data-throw-if-not-resolved="false"></xref> instance.
    return:
      type: Microsoft.WindowsAzure.MediaServices.Client.IAssetFile
      description: A <xref href="Microsoft.WindowsAzure.MediaServices.Client.IAssetFile" data-throw-if-not-resolved="false"></xref> instance that represents the manifest file of the asset; otherwise, null.
  overload: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetManifestAssetFile*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetSmoothStreamingUri(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetSmoothStreamingUri(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  id: GetSmoothStreamingUri(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  isExtensionMethod: true
  parent: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions
  langs:
  - csharp
  - vb
  name: GetSmoothStreamingUri(IAsset)
  nameWithType: IAssetExtensions.GetSmoothStreamingUri(IAsset)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetSmoothStreamingUri(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  type: Method
  source:
    remote:
      path: MediaServices.Client.Extensions/IAssetExtensions.cs
      branch: dev
      repo: https://github.com/Azure/azure-sdk-for-media-services-extensions
    id: GetSmoothStreamingUri
    path: src/azure-sdk-for-media-services-extensions/MediaServices.Client.Extensions/IAssetExtensions.cs
    startLine: 307
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Extensions
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nReturns the Smooth Streaming URL of the <span class=\"paramref\">asset</span> using the on-demand origin locator with the longest expiration time; otherwise, null.\n"
  example: []
  syntax:
    content: public static Uri GetSmoothStreamingUri(this IAsset asset)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetSmoothStreamingUri(asset As IAsset) As Uri
    parameters:
    - id: asset
      type: Microsoft.WindowsAzure.MediaServices.Client.IAsset
      description: The <xref href="Microsoft.WindowsAzure.MediaServices.Client.IAsset" data-throw-if-not-resolved="false"></xref> instance.
    return:
      type: System.Uri
      description: A <xref href="System.Uri" data-throw-if-not-resolved="false"></xref> representing the Smooth Streaming URL of the <span class="paramref">asset</span>; otherwise, null.
  overload: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetSmoothStreamingUri*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetHlsUri(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetHlsUri(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  id: GetHlsUri(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  isExtensionMethod: true
  parent: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions
  langs:
  - csharp
  - vb
  name: GetHlsUri(IAsset)
  nameWithType: IAssetExtensions.GetHlsUri(IAsset)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetHlsUri(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  type: Method
  source:
    remote:
      path: MediaServices.Client.Extensions/IAssetExtensions.cs
      branch: dev
      repo: https://github.com/Azure/azure-sdk-for-media-services-extensions
    id: GetHlsUri
    path: src/azure-sdk-for-media-services-extensions/MediaServices.Client.Extensions/IAssetExtensions.cs
    startLine: 317
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Extensions
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nReturns the HLS version 4 URL of the <span class=\"paramref\">asset</span> using the on-demand origin locator with the longest expiration time; otherwise, null.\n"
  example: []
  syntax:
    content: public static Uri GetHlsUri(this IAsset asset)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetHlsUri(asset As IAsset) As Uri
    parameters:
    - id: asset
      type: Microsoft.WindowsAzure.MediaServices.Client.IAsset
      description: The <xref href="Microsoft.WindowsAzure.MediaServices.Client.IAsset" data-throw-if-not-resolved="false"></xref> instance.
    return:
      type: System.Uri
      description: A <xref href="System.Uri" data-throw-if-not-resolved="false"></xref> representing the HLS version 4 URL of the <span class="paramref">asset</span>; otherwise, null.
  overload: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetHlsUri*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetHlsv3Uri(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetHlsv3Uri(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  id: GetHlsv3Uri(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  isExtensionMethod: true
  parent: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions
  langs:
  - csharp
  - vb
  name: GetHlsv3Uri(IAsset)
  nameWithType: IAssetExtensions.GetHlsv3Uri(IAsset)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetHlsv3Uri(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  type: Method
  source:
    remote:
      path: MediaServices.Client.Extensions/IAssetExtensions.cs
      branch: dev
      repo: https://github.com/Azure/azure-sdk-for-media-services-extensions
    id: GetHlsv3Uri
    path: src/azure-sdk-for-media-services-extensions/MediaServices.Client.Extensions/IAssetExtensions.cs
    startLine: 327
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Extensions
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nReturns the HLS version 3 URL of the <span class=\"paramref\">asset</span> using the on-demand origin locator with the longest expiration time; otherwise, null.\n"
  example: []
  syntax:
    content: public static Uri GetHlsv3Uri(this IAsset asset)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetHlsv3Uri(asset As IAsset) As Uri
    parameters:
    - id: asset
      type: Microsoft.WindowsAzure.MediaServices.Client.IAsset
      description: The <xref href="Microsoft.WindowsAzure.MediaServices.Client.IAsset" data-throw-if-not-resolved="false"></xref> instance.
    return:
      type: System.Uri
      description: A <xref href="System.Uri" data-throw-if-not-resolved="false"></xref> representing the HLS version 3 URL of the <span class="paramref">asset</span>; otherwise, null.
  overload: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetHlsv3Uri*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMpegDashUri(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMpegDashUri(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  id: GetMpegDashUri(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  isExtensionMethod: true
  parent: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions
  langs:
  - csharp
  - vb
  name: GetMpegDashUri(IAsset)
  nameWithType: IAssetExtensions.GetMpegDashUri(IAsset)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMpegDashUri(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  type: Method
  source:
    remote:
      path: MediaServices.Client.Extensions/IAssetExtensions.cs
      branch: dev
      repo: https://github.com/Azure/azure-sdk-for-media-services-extensions
    id: GetMpegDashUri
    path: src/azure-sdk-for-media-services-extensions/MediaServices.Client.Extensions/IAssetExtensions.cs
    startLine: 337
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Extensions
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nReturns the MPEG-DASH URL of the <span class=\"paramref\">asset</span> using the on-demand origin locator with the longest expiration time; otherwise, null.\n"
  example: []
  syntax:
    content: public static Uri GetMpegDashUri(this IAsset asset)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetMpegDashUri(asset As IAsset) As Uri
    parameters:
    - id: asset
      type: Microsoft.WindowsAzure.MediaServices.Client.IAsset
      description: The <xref href="Microsoft.WindowsAzure.MediaServices.Client.IAsset" data-throw-if-not-resolved="false"></xref> instance.
    return:
      type: System.Uri
      description: A <xref href="System.Uri" data-throw-if-not-resolved="false"></xref> representing the MPEG-DASH URL of the <span class="paramref">asset</span>; otherwise, null.
  overload: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMpegDashUri*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.CopyAsync(Microsoft.WindowsAzure.MediaServices.Client.IAsset,Microsoft.WindowsAzure.MediaServices.Client.IAsset,Microsoft.WindowsAzure.Storage.Auth.StorageCredentials,System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.CopyAsync(Microsoft.WindowsAzure.MediaServices.Client.IAsset,Microsoft.WindowsAzure.MediaServices.Client.IAsset,Microsoft.WindowsAzure.Storage.Auth.StorageCredentials,System.Threading.CancellationToken)
  id: CopyAsync(Microsoft.WindowsAzure.MediaServices.Client.IAsset,Microsoft.WindowsAzure.MediaServices.Client.IAsset,Microsoft.WindowsAzure.Storage.Auth.StorageCredentials,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions
  langs:
  - csharp
  - vb
  name: CopyAsync(IAsset, IAsset, StorageCredentials, CancellationToken)
  nameWithType: IAssetExtensions.CopyAsync(IAsset, IAsset, StorageCredentials, CancellationToken)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.CopyAsync(Microsoft.WindowsAzure.MediaServices.Client.IAsset, Microsoft.WindowsAzure.MediaServices.Client.IAsset, Microsoft.WindowsAzure.Storage.Auth.StorageCredentials, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: MediaServices.Client.Extensions/IAssetExtensions.cs
      branch: dev
      repo: https://github.com/Azure/azure-sdk-for-media-services-extensions
    id: CopyAsync
    path: src/azure-sdk-for-media-services-extensions/MediaServices.Client.Extensions/IAssetExtensions.cs
    startLine: 350
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Extensions
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nCopies the files in the <span class=\"paramref\">sourceAsset</span> into into the <span class=\"paramref\">destinationAsset</span> instance.\n"
  example: []
  syntax:
    content: public static Task CopyAsync(this IAsset sourceAsset, IAsset destinationAsset, StorageCredentials destinationStorageCredentials, CancellationToken cancellationToken)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CopyAsync(sourceAsset As IAsset, destinationAsset As IAsset, destinationStorageCredentials As StorageCredentials, cancellationToken As CancellationToken) As Task
    parameters:
    - id: sourceAsset
      type: Microsoft.WindowsAzure.MediaServices.Client.IAsset
      description: The <xref href="Microsoft.WindowsAzure.MediaServices.Client.IAsset" data-throw-if-not-resolved="false"></xref> instance that contains the asset files to copy.
    - id: destinationAsset
      type: Microsoft.WindowsAzure.MediaServices.Client.IAsset
      description: The <xref href="Microsoft.WindowsAzure.MediaServices.Client.IAsset" data-throw-if-not-resolved="false"></xref> instance that receives asset files.
    - id: destinationStorageCredentials
      type: Microsoft.WindowsAzure.Storage.Auth.StorageCredentials
      description: The <xref href="Microsoft.WindowsAzure.Storage.Auth.StorageCredentials" data-throw-if-not-resolved="false"></xref> instance for the <span class="paramref">destinationAsset</span> Storage Account.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> instance used for cancellation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> instance to copy the files in the <span class="paramref">sourceAsset</span> into into the <span class="paramref">destinationAsset</span> instance.
  overload: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.CopyAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.Copy(Microsoft.WindowsAzure.MediaServices.Client.IAsset,Microsoft.WindowsAzure.MediaServices.Client.IAsset,Microsoft.WindowsAzure.Storage.Auth.StorageCredentials)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.Copy(Microsoft.WindowsAzure.MediaServices.Client.IAsset,Microsoft.WindowsAzure.MediaServices.Client.IAsset,Microsoft.WindowsAzure.Storage.Auth.StorageCredentials)
  id: Copy(Microsoft.WindowsAzure.MediaServices.Client.IAsset,Microsoft.WindowsAzure.MediaServices.Client.IAsset,Microsoft.WindowsAzure.Storage.Auth.StorageCredentials)
  isExtensionMethod: true
  parent: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions
  langs:
  - csharp
  - vb
  name: Copy(IAsset, IAsset, StorageCredentials)
  nameWithType: IAssetExtensions.Copy(IAsset, IAsset, StorageCredentials)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.Copy(Microsoft.WindowsAzure.MediaServices.Client.IAsset, Microsoft.WindowsAzure.MediaServices.Client.IAsset, Microsoft.WindowsAzure.Storage.Auth.StorageCredentials)
  type: Method
  source:
    remote:
      path: MediaServices.Client.Extensions/IAssetExtensions.cs
      branch: dev
      repo: https://github.com/Azure/azure-sdk-for-media-services-extensions
    id: Copy
    path: src/azure-sdk-for-media-services-extensions/MediaServices.Client.Extensions/IAssetExtensions.cs
    startLine: 410
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Extensions
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nCopies the files in the <span class=\"paramref\">sourceAsset</span> into into the <span class=\"paramref\">destinationAsset</span> instance.\n"
  example: []
  syntax:
    content: public static void Copy(this IAsset sourceAsset, IAsset destinationAsset, StorageCredentials destinationStorageCredentials)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Copy(sourceAsset As IAsset, destinationAsset As IAsset, destinationStorageCredentials As StorageCredentials)
    parameters:
    - id: sourceAsset
      type: Microsoft.WindowsAzure.MediaServices.Client.IAsset
      description: The <xref href="Microsoft.WindowsAzure.MediaServices.Client.IAsset" data-throw-if-not-resolved="false"></xref> instance that contains the asset files to copy.
    - id: destinationAsset
      type: Microsoft.WindowsAzure.MediaServices.Client.IAsset
      description: The <xref href="Microsoft.WindowsAzure.MediaServices.Client.IAsset" data-throw-if-not-resolved="false"></xref> instance that receives asset files.
    - id: destinationStorageCredentials
      type: Microsoft.WindowsAzure.Storage.Auth.StorageCredentials
      description: The <xref href="Microsoft.WindowsAzure.Storage.Auth.StorageCredentials" data-throw-if-not-resolved="false"></xref> instance for the <span class="paramref">destinationAsset</span> Storage Account.
  overload: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.Copy*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMediaContext(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMediaContext(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  id: GetMediaContext(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  isExtensionMethod: true
  parent: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions
  langs:
  - csharp
  - vb
  name: GetMediaContext(IAsset)
  nameWithType: IAssetExtensions.GetMediaContext(IAsset)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMediaContext(Microsoft.WindowsAzure.MediaServices.Client.IAsset)
  type: Method
  source:
    remote:
      path: MediaServices.Client.Extensions/IAssetExtensions.cs
      branch: dev
      repo: https://github.com/Azure/azure-sdk-for-media-services-extensions
    id: GetMediaContext
    path: src/azure-sdk-for-media-services-extensions/MediaServices.Client.Extensions/IAssetExtensions.cs
    startLine: 423
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Extensions
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nReturns the parent <xref href=\"Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase\" data-throw-if-not-resolved=\"false\"></xref> instance.\n"
  example: []
  syntax:
    content: public static MediaContextBase GetMediaContext(this IAsset asset)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetMediaContext(asset As IAsset) As MediaContextBase
    parameters:
    - id: asset
      type: Microsoft.WindowsAzure.MediaServices.Client.IAsset
      description: The <xref href="Microsoft.WindowsAzure.MediaServices.Client.IAsset" data-throw-if-not-resolved="false"></xref> instance.
    return:
      type: Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase
      description: The parent <xref href="Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase" data-throw-if-not-resolved="false"></xref> instance.
  overload: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMediaContext*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAsset
  commentId: T:Microsoft.WindowsAzure.MediaServices.Client.IAsset
  parent: Microsoft.WindowsAzure.MediaServices.Client
  isExternal: false
  name: IAsset
  nameWithType: IAsset
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAsset
- uid: Microsoft.WindowsAzure.MediaServices.Client
  commentId: N:Microsoft.WindowsAzure.MediaServices.Client
  isExternal: false
  name: Microsoft.WindowsAzure.MediaServices.Client
  nameWithType: Microsoft.WindowsAzure.MediaServices.Client
  fullName: Microsoft.WindowsAzure.MediaServices.Client
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetFile
  commentId: T:Microsoft.WindowsAzure.MediaServices.Client.IAssetFile
  parent: Microsoft.WindowsAzure.MediaServices.Client
  isExternal: false
  name: IAssetFile
  nameWithType: IAssetFile
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetFile
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GenerateFromStorageAsync*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GenerateFromStorageAsync
  isExternal: false
  name: GenerateFromStorageAsync
  nameWithType: IAssetExtensions.GenerateFromStorageAsync
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GenerateFromStorageAsync
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GenerateFromStorage*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GenerateFromStorage
  isExternal: false
  name: GenerateFromStorage
  nameWithType: IAssetExtensions.GenerateFromStorage
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GenerateFromStorage
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.WindowsAzure.MediaServices.Client.ILocator
  commentId: T:Microsoft.WindowsAzure.MediaServices.Client.ILocator
  parent: Microsoft.WindowsAzure.MediaServices.Client
  isExternal: false
  name: ILocator
  nameWithType: ILocator
  fullName: Microsoft.WindowsAzure.MediaServices.Client.ILocator
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMetadataAsync*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMetadataAsync
  isExternal: false
  name: GetMetadataAsync
  nameWithType: IAssetExtensions.GetMetadataAsync
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMetadataAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.WindowsAzure.MediaServices.Client.Metadata.AssetFileMetadata}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.WindowsAzure.MediaServices.Client.Metadata.AssetFileMetadata}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<AssetFileMetadata>>
  nameWithType: Task<IEnumerable<AssetFileMetadata>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.WindowsAzure.MediaServices.Client.Metadata.AssetFileMetadata>>
  nameWithType.vb: Task(Of IEnumerable(Of AssetFileMetadata))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of Microsoft.WindowsAzure.MediaServices.Client.Metadata.AssetFileMetadata))
  name.vb: Task(Of IEnumerable(Of AssetFileMetadata))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.WindowsAzure.MediaServices.Client.Metadata.AssetFileMetadata
    name: AssetFileMetadata
    nameWithType: AssetFileMetadata
    fullName: Microsoft.WindowsAzure.MediaServices.Client.Metadata.AssetFileMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.WindowsAzure.MediaServices.Client.Metadata.AssetFileMetadata
    name: AssetFileMetadata
    nameWithType: AssetFileMetadata
    fullName: Microsoft.WindowsAzure.MediaServices.Client.Metadata.AssetFileMetadata
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMetadata*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMetadata
  isExternal: false
  name: GetMetadata
  nameWithType: IAssetExtensions.GetMetadata
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMetadata
- uid: System.Collections.Generic.IEnumerable{Microsoft.WindowsAzure.MediaServices.Client.Metadata.AssetFileMetadata}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.WindowsAzure.MediaServices.Client.Metadata.AssetFileMetadata}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<AssetFileMetadata>
  nameWithType: IEnumerable<AssetFileMetadata>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.WindowsAzure.MediaServices.Client.Metadata.AssetFileMetadata>
  nameWithType.vb: IEnumerable(Of AssetFileMetadata)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.WindowsAzure.MediaServices.Client.Metadata.AssetFileMetadata)
  name.vb: IEnumerable(Of AssetFileMetadata)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.WindowsAzure.MediaServices.Client.Metadata.AssetFileMetadata
    name: AssetFileMetadata
    nameWithType: AssetFileMetadata
    fullName: Microsoft.WindowsAzure.MediaServices.Client.Metadata.AssetFileMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.WindowsAzure.MediaServices.Client.Metadata.AssetFileMetadata
    name: AssetFileMetadata
    nameWithType: AssetFileMetadata
    fullName: Microsoft.WindowsAzure.MediaServices.Client.Metadata.AssetFileMetadata
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.DownloadToFolderAsync*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.DownloadToFolderAsync
  isExternal: false
  name: DownloadToFolderAsync
  nameWithType: IAssetExtensions.DownloadToFolderAsync
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.DownloadToFolderAsync
- uid: System.Action{Microsoft.WindowsAzure.MediaServices.Client.IAssetFile,Microsoft.WindowsAzure.MediaServices.Client.DownloadProgressChangedEventArgs}
  commentId: T:System.Action{Microsoft.WindowsAzure.MediaServices.Client.IAssetFile,Microsoft.WindowsAzure.MediaServices.Client.DownloadProgressChangedEventArgs}
  parent: System
  definition: System.Action`2
  name: Action<IAssetFile, DownloadProgressChangedEventArgs>
  nameWithType: Action<IAssetFile, DownloadProgressChangedEventArgs>
  fullName: System.Action<Microsoft.WindowsAzure.MediaServices.Client.IAssetFile, Microsoft.WindowsAzure.MediaServices.Client.DownloadProgressChangedEventArgs>
  nameWithType.vb: Action(Of IAssetFile, DownloadProgressChangedEventArgs)
  fullname.vb: System.Action(Of Microsoft.WindowsAzure.MediaServices.Client.IAssetFile, Microsoft.WindowsAzure.MediaServices.Client.DownloadProgressChangedEventArgs)
  name.vb: Action(Of IAssetFile, DownloadProgressChangedEventArgs)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetFile
    name: IAssetFile
    nameWithType: IAssetFile
    fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetFile
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.WindowsAzure.MediaServices.Client.DownloadProgressChangedEventArgs
    name: DownloadProgressChangedEventArgs
    nameWithType: DownloadProgressChangedEventArgs
    fullName: Microsoft.WindowsAzure.MediaServices.Client.DownloadProgressChangedEventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetFile
    name: IAssetFile
    nameWithType: IAssetFile
    fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetFile
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.WindowsAzure.MediaServices.Client.DownloadProgressChangedEventArgs
    name: DownloadProgressChangedEventArgs
    nameWithType: DownloadProgressChangedEventArgs
    fullName: Microsoft.WindowsAzure.MediaServices.Client.DownloadProgressChangedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullname.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.DownloadToFolder*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.DownloadToFolder
  isExternal: false
  name: DownloadToFolder
  nameWithType: IAssetExtensions.DownloadToFolder
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.DownloadToFolder
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetManifestAssetFile*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetManifestAssetFile
  isExternal: false
  name: GetManifestAssetFile
  nameWithType: IAssetExtensions.GetManifestAssetFile
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetManifestAssetFile
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetSmoothStreamingUri*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetSmoothStreamingUri
  isExternal: false
  name: GetSmoothStreamingUri
  nameWithType: IAssetExtensions.GetSmoothStreamingUri
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetSmoothStreamingUri
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetHlsUri*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetHlsUri
  isExternal: false
  name: GetHlsUri
  nameWithType: IAssetExtensions.GetHlsUri
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetHlsUri
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetHlsv3Uri*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetHlsv3Uri
  isExternal: false
  name: GetHlsv3Uri
  nameWithType: IAssetExtensions.GetHlsv3Uri
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetHlsv3Uri
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMpegDashUri*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMpegDashUri
  isExternal: false
  name: GetMpegDashUri
  nameWithType: IAssetExtensions.GetMpegDashUri
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMpegDashUri
- uid: Microsoft.WindowsAzure.Storage.Auth.StorageCredentials
  commentId: T:Microsoft.WindowsAzure.Storage.Auth.StorageCredentials
  parent: Microsoft.WindowsAzure.Storage.Auth
  isExternal: true
  name: StorageCredentials
  nameWithType: StorageCredentials
  fullName: Microsoft.WindowsAzure.Storage.Auth.StorageCredentials
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.CopyAsync*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.CopyAsync
  isExternal: false
  name: CopyAsync
  nameWithType: IAssetExtensions.CopyAsync
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.CopyAsync
- uid: Microsoft.WindowsAzure.Storage.Auth
  commentId: N:Microsoft.WindowsAzure.Storage.Auth
  isExternal: false
  name: Microsoft.WindowsAzure.Storage.Auth
  nameWithType: Microsoft.WindowsAzure.Storage.Auth
  fullName: Microsoft.WindowsAzure.Storage.Auth
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.Copy*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.Copy
  isExternal: false
  name: Copy
  nameWithType: IAssetExtensions.Copy
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.Copy
- uid: Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase
  commentId: T:Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase
  parent: Microsoft.WindowsAzure.MediaServices.Client
  isExternal: false
  name: MediaContextBase
  nameWithType: MediaContextBase
  fullName: Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMediaContext*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMediaContext
  isExternal: false
  name: GetMediaContext
  nameWithType: IAssetExtensions.GetMediaContext
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAssetExtensions.GetMediaContext
