### YamlMime:ManagedReference
items:
- uid: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy
  commentId: T:Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy
  id: CapacityBasedAccountSelectionStrategy
  parent: Microsoft.WindowsAzure.MediaServices.Client
  children:
  - Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.#ctor(Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase)
  - Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.AddStorageAccount(Microsoft.WindowsAzure.MediaServices.Client.IStorageAccount,System.Boolean,System.Int64)
  - Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.AddStorageAccountByName(System.String,System.Boolean,System.Int64)
  - Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.FromAccounts(Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase,System.Boolean,System.Int64,System.String[])
  - Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.GetStorageAccounts
  - Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.oneHundredEightyTB
  - Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.Random
  - Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.SelectAccountForAsset
  - Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.twoHundredTB
  langs:
  - csharp
  - vb
  name: CapacityBasedAccountSelectionStrategy
  nameWithType: CapacityBasedAccountSelectionStrategy
  fullName: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy
  type: Class
  source:
    remote:
      path: MediaServices.Client.Extensions/CapacityBasedAccountSelectionStrategy.cs
      branch: dev
      repo: https://github.com/Azure/azure-sdk-for-media-services-extensions
    id: CapacityBasedAccountSelectionStrategy
    path: src/azure-sdk-for-media-services-extensions/MediaServices.Client.Extensions/CapacityBasedAccountSelectionStrategy.cs
    startLine: 39
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Extensions
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nThis IAccountSelectionStrategy implementation uses the number of used bytes in a storage account to help determine which storage account\nshould be used to create the next asset.  It relies on the capacity metrics of the blob storage service to get the number of bytes used\nvia the Wiindows Azure Media Services REST API.  If storage account metrics are not enabled for the storage account, then null is returned\nfor the number of bytes used (these accounts are not used unless IncludeAccountsWithNoCapacityData is set to true).  Even knowing the \ncapacity of each storage account, the IAccountSelectionStrategy implementation still tries to spread out the new assets between the given \nstorage accounts.  This is especially important since the capacity is only calculated once per day by the storage service.  Thus, the\nIAccountSelectionStrategy implementation randomly selects from the available storage accounts but the probability of a storage account \nbeing selected is based on the accounts remaining capacity.  For example, if there are two storage accounts to choose from where one account \nis 50% full and the other account is 30% full then the implementation will pick the half full storage account 5 times out of \n12 ((100 – 50)/(200 – 50 – 30)) and the other storage account 7 times out of 12 ((100 – 30)/(200 – 50 – 30)).  If the algorithm always \nselected the storage account with the most available space, it would be used exclusively for 24 hours until the storage account metrics \nwere recalculated.  This weighted probability approach should spread the assets across the given storage accounts over time.  In order \nto have a margin of safety, storage accounts that are too close to the limit will be given a zero probability of being selected.  \nThis is controlled by the MaximumStorageAccountCapacity value.  Storage accounts that are at this capacity or greater will be considered\nfull and will not be selected for new assets.\n"
  example: []
  syntax:
    content: 'public class CapacityBasedAccountSelectionStrategy : BaseEntity<IAccountSelectionStrategy>, IMediaContextContainer, IAccountSelectionStrategy'
    content.vb: >-
      Public Class CapacityBasedAccountSelectionStrategy
          Inherits BaseEntity(Of IAccountSelectionStrategy)
          Implements IMediaContextContainer, IAccountSelectionStrategy
  inheritance:
  - System.Object
  - Microsoft.WindowsAzure.MediaServices.Client.BaseEntity
  - Microsoft.WindowsAzure.MediaServices.Client.BaseEntity{Microsoft.WindowsAzure.MediaServices.Client.IAccountSelectionStrategy}
  implements:
  - Microsoft.WindowsAzure.MediaServices.Client.IMediaContextContainer
  - Microsoft.WindowsAzure.MediaServices.Client.IAccountSelectionStrategy
  inheritedMembers:
  - Microsoft.WindowsAzure.MediaServices.Client.BaseEntity.SetMediaContext(Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase)
  - Microsoft.WindowsAzure.MediaServices.Client.BaseEntity.GetMediaContext
  - Microsoft.WindowsAzure.MediaServices.Client.BaseEntity.LoadProperty(Microsoft.WindowsAzure.MediaServices.Client.IMediaDataServiceContext,System.String)
  - Microsoft.WindowsAzure.MediaServices.Client.BaseEntity.LoadProperty(Microsoft.WindowsAzure.MediaServices.Client.IMediaDataServiceContext,Microsoft.WindowsAzure.MediaServices.Client.BaseEntity,System.String)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.twoHundredTB
  commentId: F:Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.twoHundredTB
  id: twoHundredTB
  parent: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy
  langs:
  - csharp
  - vb
  name: twoHundredTB
  nameWithType: CapacityBasedAccountSelectionStrategy.twoHundredTB
  fullName: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.twoHundredTB
  type: Field
  source:
    remote:
      path: MediaServices.Client.Extensions/CapacityBasedAccountSelectionStrategy.cs
      branch: dev
      repo: https://github.com/Azure/azure-sdk-for-media-services-extensions
    id: twoHundredTB
    path: src/azure-sdk-for-media-services-extensions/MediaServices.Client.Extensions/CapacityBasedAccountSelectionStrategy.cs
    startLine: 41
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Extensions
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  syntax:
    content: public const long twoHundredTB = 219902325555200L
    content.vb: Public Const twoHundredTB As Long = 219902325555200L
    return:
      type: System.Int64
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.oneHundredEightyTB
  commentId: F:Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.oneHundredEightyTB
  id: oneHundredEightyTB
  parent: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy
  langs:
  - csharp
  - vb
  name: oneHundredEightyTB
  nameWithType: CapacityBasedAccountSelectionStrategy.oneHundredEightyTB
  fullName: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.oneHundredEightyTB
  type: Field
  source:
    remote:
      path: MediaServices.Client.Extensions/CapacityBasedAccountSelectionStrategy.cs
      branch: dev
      repo: https://github.com/Azure/azure-sdk-for-media-services-extensions
    id: oneHundredEightyTB
    path: src/azure-sdk-for-media-services-extensions/MediaServices.Client.Extensions/CapacityBasedAccountSelectionStrategy.cs
    startLine: 42
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Extensions
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  syntax:
    content: public const long oneHundredEightyTB = 197912092999680L
    content.vb: Public Const oneHundredEightyTB As Long = 197912092999680L
    return:
      type: System.Int64
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.#ctor(Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.#ctor(Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase)
  id: '#ctor(Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase)'
  parent: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy
  langs:
  - csharp
  - vb
  name: CapacityBasedAccountSelectionStrategy(MediaContextBase)
  nameWithType: CapacityBasedAccountSelectionStrategy.CapacityBasedAccountSelectionStrategy(MediaContextBase)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.CapacityBasedAccountSelectionStrategy(Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase)
  type: Constructor
  source:
    remote:
      path: MediaServices.Client.Extensions/CapacityBasedAccountSelectionStrategy.cs
      branch: dev
      repo: https://github.com/Azure/azure-sdk-for-media-services-extensions
    id: .ctor
    path: src/azure-sdk-for-media-services-extensions/MediaServices.Client.Extensions/CapacityBasedAccountSelectionStrategy.cs
    startLine: 51
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Extensions
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nConstructor for the CapacityBasedAccountSelectionStrategy class\n"
  example: []
  syntax:
    content: public CapacityBasedAccountSelectionStrategy(MediaContextBase mediaContextBase)
    content.vb: Public Sub New(mediaContextBase As MediaContextBase)
    parameters:
    - id: mediaContextBase
      type: Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase
      description: MediaContextBase instance to query IStorageAccount entities
  overload: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.FromAccounts(Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase,System.Boolean,System.Int64,System.String[])
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.FromAccounts(Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase,System.Boolean,System.Int64,System.String[])
  id: FromAccounts(Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase,System.Boolean,System.Int64,System.String[])
  parent: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy
  langs:
  - csharp
  - vb
  name: FromAccounts(MediaContextBase, Boolean, Int64, String[])
  nameWithType: CapacityBasedAccountSelectionStrategy.FromAccounts(MediaContextBase, Boolean, Int64, String[])
  fullName: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.FromAccounts(Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase, System.Boolean, System.Int64, System.String[])
  type: Method
  source:
    remote:
      path: MediaServices.Client.Extensions/CapacityBasedAccountSelectionStrategy.cs
      branch: dev
      repo: https://github.com/Azure/azure-sdk-for-media-services-extensions
    id: FromAccounts
    path: src/azure-sdk-for-media-services-extensions/MediaServices.Client.Extensions/CapacityBasedAccountSelectionStrategy.cs
    startLine: 78
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Extensions
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nCreates a new instance of the CapacityBasedAccountSelectionStrategy class and then enumerates all of the storage accounts in the \ngiven MediaContextBase.StorageAccounts collection and adds each account to the classes internal list.  The includeAccountsWithNoCapacityData\nflag is used if no capacity data is available.  If includeAccountsWithNoCapacityData is true and no data is available, then the storage \naccount is considered to have its full capacity (maximumStorageAccountCapacity) available.  If includeAccountsWithNoCapacityData \nis false and no data is available, then the storage account is considered to have no capacity (0) available.  If data is available,\nthen the IStorageAccount.BytesUsed value is subtracted from maximumStorageAccountCapacity to get the available capacity.  The \nstorageAccountNames list is used to filter the results of the MediaContextBase.StorageAccounts collection.  Account names that\nare not on the list but in the enumeration will be skipped.  Names that are on the list but not in the enumeration will not be\nadded.  Pass null (the default) to include all of the enumerated accounts.\n"
  example: []
  syntax:
    content: public static CapacityBasedAccountSelectionStrategy FromAccounts(MediaContextBase mediaContextBase, bool includeAccountsWithNoCapacityData = false, long maximumStorageAccountCapacity = 197912092999680L, string[] storageAccountNames = null)
    content.vb: Public Shared Function FromAccounts(mediaContextBase As MediaContextBase, includeAccountsWithNoCapacityData As Boolean = False, maximumStorageAccountCapacity As Long = 197912092999680L, storageAccountNames As String() = Nothing) As CapacityBasedAccountSelectionStrategy
    parameters:
    - id: mediaContextBase
      type: Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase
      description: MediaContextBase used to enumerate the IStorageAccount instances to add
    - id: includeAccountsWithNoCapacityData
      type: System.Boolean
      description: Boolean value telling the method whether accounts should be used if no capacity data is available.
    - id: maximumStorageAccountCapacity
      type: System.Int64
      description: Maximum storage account capacity for the given storage accounts.
    - id: storageAccountNames
      type: System.String[]
      description: List of storage account names to include.
    return:
      type: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy
      description: ''
  overload: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.FromAccounts*
  nameWithType.vb: CapacityBasedAccountSelectionStrategy.FromAccounts(MediaContextBase, Boolean, Int64, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.FromAccounts(Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase, System.Boolean, System.Int64, System.String())
  name.vb: FromAccounts(MediaContextBase, Boolean, Int64, String())
- uid: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.AddStorageAccount(Microsoft.WindowsAzure.MediaServices.Client.IStorageAccount,System.Boolean,System.Int64)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.AddStorageAccount(Microsoft.WindowsAzure.MediaServices.Client.IStorageAccount,System.Boolean,System.Int64)
  id: AddStorageAccount(Microsoft.WindowsAzure.MediaServices.Client.IStorageAccount,System.Boolean,System.Int64)
  parent: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy
  langs:
  - csharp
  - vb
  name: AddStorageAccount(IStorageAccount, Boolean, Int64)
  nameWithType: CapacityBasedAccountSelectionStrategy.AddStorageAccount(IStorageAccount, Boolean, Int64)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.AddStorageAccount(Microsoft.WindowsAzure.MediaServices.Client.IStorageAccount, System.Boolean, System.Int64)
  type: Method
  source:
    remote:
      path: MediaServices.Client.Extensions/CapacityBasedAccountSelectionStrategy.cs
      branch: dev
      repo: https://github.com/Azure/azure-sdk-for-media-services-extensions
    id: AddStorageAccount
    path: src/azure-sdk-for-media-services-extensions/MediaServices.Client.Extensions/CapacityBasedAccountSelectionStrategy.cs
    startLine: 108
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Extensions
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nAdds a CapacityBaseAccountSelectionStrategyListEntry to the classes internal list.  The considerFullCapacityIfNoDataAvailable flag is\nused if no capacity data is available.  If considerFullCapacityIfNoDataAvailable is true and no data is available, then the storage \naccount is considered to have its full capacity (maximumStorageAccountCapacity) available.  If considerFullCapacityIfNoDataAvailable \nis false and no data is available, then the storage account is considered to have no capacity (0) available.  If data is available,\nthen the IStorageAccount.BytesUsed value is subtracted from maximumStorageAccountCapacity to get the available capacity.\n"
  example: []
  syntax:
    content: public void AddStorageAccount(IStorageAccount storageAccount, bool considerAccountWithNoDataToBeEmpty = false, long maximumStorageAccountCapacity = 197912092999680L)
    content.vb: Public Sub AddStorageAccount(storageAccount As IStorageAccount, considerAccountWithNoDataToBeEmpty As Boolean = False, maximumStorageAccountCapacity As Long = 197912092999680L)
    parameters:
    - id: storageAccount
      type: Microsoft.WindowsAzure.MediaServices.Client.IStorageAccount
      description: IStorageAccount instance to add
    - id: considerAccountWithNoDataToBeEmpty
      type: System.Boolean
      description: Boolean value telling the method whether accounts should be considered to be empty (and can be used for new assets) if no capacity data is available.
    - id: maximumStorageAccountCapacity
      type: System.Int64
      description: Maximum storage account capacity for the given storage account.
  overload: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.AddStorageAccount*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.AddStorageAccountByName(System.String,System.Boolean,System.Int64)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.AddStorageAccountByName(System.String,System.Boolean,System.Int64)
  id: AddStorageAccountByName(System.String,System.Boolean,System.Int64)
  parent: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy
  langs:
  - csharp
  - vb
  name: AddStorageAccountByName(String, Boolean, Int64)
  nameWithType: CapacityBasedAccountSelectionStrategy.AddStorageAccountByName(String, Boolean, Int64)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.AddStorageAccountByName(System.String, System.Boolean, System.Int64)
  type: Method
  source:
    remote:
      path: MediaServices.Client.Extensions/CapacityBasedAccountSelectionStrategy.cs
      branch: dev
      repo: https://github.com/Azure/azure-sdk-for-media-services-extensions
    id: AddStorageAccountByName
    path: src/azure-sdk-for-media-services-extensions/MediaServices.Client.Extensions/CapacityBasedAccountSelectionStrategy.cs
    startLine: 137
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Extensions
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nAdds a CapacityBaseAccountSelectionStrategyListEntry to the classes internal list.  The given storage account name is used to look \nup the IStorageAccount entity.  The considerFullCapacityIfNoDataAvailable flag is used if no capacity data is available.  If \nconsiderFullCapacityIfNoDataAvailable is true and no data is available, then the storage account is considered to have its full \ncapacity (maximumStorageAccountCapacity) available.  If considerFullCapacityIfNoDataAvailable is false and no data is available, \nthen the storage account is considered to have no capacity (0) available.  If data is available, then the IStorageAccount.BytesUsed \nvalue is subtracted from maximumStorageAccountCapacity to get the available capacity.\n"
  example: []
  syntax:
    content: public void AddStorageAccountByName(string storageAccountName, bool considerFullCapacityIfNoDataAvailable = false, long maximumStorageAccountCapacity = 197912092999680L)
    content.vb: Public Sub AddStorageAccountByName(storageAccountName As String, considerFullCapacityIfNoDataAvailable As Boolean = False, maximumStorageAccountCapacity As Long = 197912092999680L)
    parameters:
    - id: storageAccountName
      type: System.String
      description: Name of the storage account to add
    - id: considerFullCapacityIfNoDataAvailable
      type: System.Boolean
      description: Boolean value telling the method whether accounts should be considered to have full capacity if no capacity data is available.
    - id: maximumStorageAccountCapacity
      type: System.Int64
      description: Maximum storage account capacity for the given storage account.
  overload: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.AddStorageAccountByName*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.SelectAccountForAsset
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.SelectAccountForAsset
  id: SelectAccountForAsset
  parent: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy
  langs:
  - csharp
  - vb
  name: SelectAccountForAsset()
  nameWithType: CapacityBasedAccountSelectionStrategy.SelectAccountForAsset()
  fullName: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.SelectAccountForAsset()
  type: Method
  source:
    remote:
      path: MediaServices.Client.Extensions/CapacityBasedAccountSelectionStrategy.cs
      branch: dev
      repo: https://github.com/Azure/azure-sdk-for-media-services-extensions
    id: SelectAccountForAsset
    path: src/azure-sdk-for-media-services-extensions/MediaServices.Client.Extensions/CapacityBasedAccountSelectionStrategy.cs
    startLine: 161
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Extensions
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nImplementation of the IAccountSelectionStrategy method SelectAccountForAssets\n"
  example: []
  syntax:
    content: public string SelectAccountForAsset()
    content.vb: Public Function SelectAccountForAsset As String
    return:
      type: System.String
      description: The name of the storage account to use for creating a new asset.
  overload: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.SelectAccountForAsset*
  implements:
  - Microsoft.WindowsAzure.MediaServices.Client.IAccountSelectionStrategy.SelectAccountForAsset
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.GetStorageAccounts
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.GetStorageAccounts
  id: GetStorageAccounts
  parent: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy
  langs:
  - csharp
  - vb
  name: GetStorageAccounts()
  nameWithType: CapacityBasedAccountSelectionStrategy.GetStorageAccounts()
  fullName: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.GetStorageAccounts()
  type: Method
  source:
    remote:
      path: MediaServices.Client.Extensions/CapacityBasedAccountSelectionStrategy.cs
      branch: dev
      repo: https://github.com/Azure/azure-sdk-for-media-services-extensions
    id: GetStorageAccounts
    path: src/azure-sdk-for-media-services-extensions/MediaServices.Client.Extensions/CapacityBasedAccountSelectionStrategy.cs
    startLine: 176
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Extensions
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nGet the list of CapacityBaseAccountSelectionStrategyListEntry that contain the storage accounts to select from along\nwith their calculated available capacity.\n"
  example: []
  syntax:
    content: public IList<CapacityBasedAccountSelectionStrategyListEntry> GetStorageAccounts()
    content.vb: Public Function GetStorageAccounts As IList(Of CapacityBasedAccountSelectionStrategyListEntry)
    return:
      type: System.Collections.Generic.IList{Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategyListEntry}
      description: IList of CapacityBaseAccountSelectionStrategyListEntrys
  overload: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.GetStorageAccounts*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.Random
  commentId: P:Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.Random
  id: Random
  parent: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy
  langs:
  - csharp
  - vb
  name: Random
  nameWithType: CapacityBasedAccountSelectionStrategy.Random
  fullName: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.Random
  type: Property
  source:
    remote:
      path: MediaServices.Client.Extensions/CapacityBasedAccountSelectionStrategy.cs
      branch: dev
      repo: https://github.com/Azure/azure-sdk-for-media-services-extensions
    id: Random
    path: src/azure-sdk-for-media-services-extensions/MediaServices.Client.Extensions/CapacityBasedAccountSelectionStrategy.cs
    startLine: 184
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Extensions
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nProperty to get or set the <xref href=\"System.Random\" data-throw-if-not-resolved=\"false\"></xref> instance used by the class.\n"
  example: []
  syntax:
    content: public Random Random { get; set; }
    content.vb: Public Property Random As Random
    parameters: []
    return:
      type: System.Random
  overload: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.Random*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Microsoft.WindowsAzure.MediaServices.Client
  commentId: N:Microsoft.WindowsAzure.MediaServices.Client
  isExternal: false
  name: Microsoft.WindowsAzure.MediaServices.Client
  nameWithType: Microsoft.WindowsAzure.MediaServices.Client
  fullName: Microsoft.WindowsAzure.MediaServices.Client
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity
  commentId: T:Microsoft.WindowsAzure.MediaServices.Client.BaseEntity
  parent: Microsoft.WindowsAzure.MediaServices.Client
  isExternal: false
  name: BaseEntity
  nameWithType: BaseEntity
  fullName: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity
- uid: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity{Microsoft.WindowsAzure.MediaServices.Client.IAccountSelectionStrategy}
  commentId: T:Microsoft.WindowsAzure.MediaServices.Client.BaseEntity{Microsoft.WindowsAzure.MediaServices.Client.IAccountSelectionStrategy}
  parent: Microsoft.WindowsAzure.MediaServices.Client
  definition: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity`1
  name: BaseEntity<IAccountSelectionStrategy>
  nameWithType: BaseEntity<IAccountSelectionStrategy>
  fullName: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity<Microsoft.WindowsAzure.MediaServices.Client.IAccountSelectionStrategy>
  nameWithType.vb: BaseEntity(Of IAccountSelectionStrategy)
  fullname.vb: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity(Of Microsoft.WindowsAzure.MediaServices.Client.IAccountSelectionStrategy)
  name.vb: BaseEntity(Of IAccountSelectionStrategy)
  spec.csharp:
  - uid: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity`1
    name: BaseEntity
    nameWithType: BaseEntity
    fullName: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.WindowsAzure.MediaServices.Client.IAccountSelectionStrategy
    name: IAccountSelectionStrategy
    nameWithType: IAccountSelectionStrategy
    fullName: Microsoft.WindowsAzure.MediaServices.Client.IAccountSelectionStrategy
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity`1
    name: BaseEntity
    nameWithType: BaseEntity
    fullName: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.WindowsAzure.MediaServices.Client.IAccountSelectionStrategy
    name: IAccountSelectionStrategy
    nameWithType: IAccountSelectionStrategy
    fullName: Microsoft.WindowsAzure.MediaServices.Client.IAccountSelectionStrategy
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.WindowsAzure.MediaServices.Client.IMediaContextContainer
  commentId: T:Microsoft.WindowsAzure.MediaServices.Client.IMediaContextContainer
  parent: Microsoft.WindowsAzure.MediaServices.Client
  isExternal: false
  name: IMediaContextContainer
  nameWithType: IMediaContextContainer
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IMediaContextContainer
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAccountSelectionStrategy
  commentId: T:Microsoft.WindowsAzure.MediaServices.Client.IAccountSelectionStrategy
  parent: Microsoft.WindowsAzure.MediaServices.Client
  isExternal: false
  name: IAccountSelectionStrategy
  nameWithType: IAccountSelectionStrategy
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAccountSelectionStrategy
- uid: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity.SetMediaContext(Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.BaseEntity.SetMediaContext(Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase)
  parent: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity
  isExternal: false
  name: SetMediaContext(MediaContextBase)
  nameWithType: BaseEntity.SetMediaContext(MediaContextBase)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity.SetMediaContext(Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase)
  spec.csharp:
  - uid: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity.SetMediaContext(Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase)
    name: SetMediaContext
    nameWithType: BaseEntity.SetMediaContext
    fullName: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity.SetMediaContext
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase
    name: MediaContextBase
    nameWithType: MediaContextBase
    fullName: Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity.SetMediaContext(Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase)
    name: SetMediaContext
    nameWithType: BaseEntity.SetMediaContext
    fullName: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity.SetMediaContext
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase
    name: MediaContextBase
    nameWithType: MediaContextBase
    fullName: Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity.GetMediaContext
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.BaseEntity.GetMediaContext
  parent: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity
  isExternal: false
  name: GetMediaContext()
  nameWithType: BaseEntity.GetMediaContext()
  fullName: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity.GetMediaContext()
  spec.csharp:
  - uid: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity.GetMediaContext
    name: GetMediaContext
    nameWithType: BaseEntity.GetMediaContext
    fullName: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity.GetMediaContext
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity.GetMediaContext
    name: GetMediaContext
    nameWithType: BaseEntity.GetMediaContext
    fullName: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity.GetMediaContext
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity.LoadProperty(Microsoft.WindowsAzure.MediaServices.Client.IMediaDataServiceContext,System.String)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.BaseEntity.LoadProperty(Microsoft.WindowsAzure.MediaServices.Client.IMediaDataServiceContext,System.String)
  parent: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity
  isExternal: true
  name: LoadProperty(IMediaDataServiceContext, String)
  nameWithType: BaseEntity.LoadProperty(IMediaDataServiceContext, String)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity.LoadProperty(Microsoft.WindowsAzure.MediaServices.Client.IMediaDataServiceContext, System.String)
  spec.csharp:
  - uid: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity.LoadProperty(Microsoft.WindowsAzure.MediaServices.Client.IMediaDataServiceContext,System.String)
    name: LoadProperty
    nameWithType: BaseEntity.LoadProperty
    fullName: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity.LoadProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.WindowsAzure.MediaServices.Client.IMediaDataServiceContext
    name: IMediaDataServiceContext
    nameWithType: IMediaDataServiceContext
    fullName: Microsoft.WindowsAzure.MediaServices.Client.IMediaDataServiceContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity.LoadProperty(Microsoft.WindowsAzure.MediaServices.Client.IMediaDataServiceContext,System.String)
    name: LoadProperty
    nameWithType: BaseEntity.LoadProperty
    fullName: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity.LoadProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.WindowsAzure.MediaServices.Client.IMediaDataServiceContext
    name: IMediaDataServiceContext
    nameWithType: IMediaDataServiceContext
    fullName: Microsoft.WindowsAzure.MediaServices.Client.IMediaDataServiceContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity.LoadProperty(Microsoft.WindowsAzure.MediaServices.Client.IMediaDataServiceContext,Microsoft.WindowsAzure.MediaServices.Client.BaseEntity,System.String)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.BaseEntity.LoadProperty(Microsoft.WindowsAzure.MediaServices.Client.IMediaDataServiceContext,Microsoft.WindowsAzure.MediaServices.Client.BaseEntity,System.String)
  parent: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity
  isExternal: true
  name: LoadProperty(IMediaDataServiceContext, BaseEntity, String)
  nameWithType: BaseEntity.LoadProperty(IMediaDataServiceContext, BaseEntity, String)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity.LoadProperty(Microsoft.WindowsAzure.MediaServices.Client.IMediaDataServiceContext, Microsoft.WindowsAzure.MediaServices.Client.BaseEntity, System.String)
  spec.csharp:
  - uid: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity.LoadProperty(Microsoft.WindowsAzure.MediaServices.Client.IMediaDataServiceContext,Microsoft.WindowsAzure.MediaServices.Client.BaseEntity,System.String)
    name: LoadProperty
    nameWithType: BaseEntity.LoadProperty
    fullName: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity.LoadProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.WindowsAzure.MediaServices.Client.IMediaDataServiceContext
    name: IMediaDataServiceContext
    nameWithType: IMediaDataServiceContext
    fullName: Microsoft.WindowsAzure.MediaServices.Client.IMediaDataServiceContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity
    name: BaseEntity
    nameWithType: BaseEntity
    fullName: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity.LoadProperty(Microsoft.WindowsAzure.MediaServices.Client.IMediaDataServiceContext,Microsoft.WindowsAzure.MediaServices.Client.BaseEntity,System.String)
    name: LoadProperty
    nameWithType: BaseEntity.LoadProperty
    fullName: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity.LoadProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.WindowsAzure.MediaServices.Client.IMediaDataServiceContext
    name: IMediaDataServiceContext
    nameWithType: IMediaDataServiceContext
    fullName: Microsoft.WindowsAzure.MediaServices.Client.IMediaDataServiceContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity
    name: BaseEntity
    nameWithType: BaseEntity
    fullName: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity`1
  commentId: T:Microsoft.WindowsAzure.MediaServices.Client.BaseEntity`1
  isExternal: false
  name: BaseEntity<T>
  nameWithType: BaseEntity<T>
  fullName: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity<T>
  nameWithType.vb: BaseEntity(Of T)
  fullname.vb: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity(Of T)
  name.vb: BaseEntity(Of T)
  spec.csharp:
  - uid: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity`1
    name: BaseEntity
    nameWithType: BaseEntity
    fullName: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity`1
    name: BaseEntity
    nameWithType: BaseEntity
    fullName: Microsoft.WindowsAzure.MediaServices.Client.BaseEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.#ctor*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.#ctor
  isExternal: false
  name: CapacityBasedAccountSelectionStrategy
  nameWithType: CapacityBasedAccountSelectionStrategy.CapacityBasedAccountSelectionStrategy
  fullName: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.CapacityBasedAccountSelectionStrategy
- uid: Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase
  commentId: T:Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase
  parent: Microsoft.WindowsAzure.MediaServices.Client
  isExternal: false
  name: MediaContextBase
  nameWithType: MediaContextBase
  fullName: Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase
- uid: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.FromAccounts*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.FromAccounts
  isExternal: false
  name: FromAccounts
  nameWithType: CapacityBasedAccountSelectionStrategy.FromAccounts
  fullName: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.FromAccounts
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy
  commentId: T:Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy
  parent: Microsoft.WindowsAzure.MediaServices.Client
  isExternal: false
  name: CapacityBasedAccountSelectionStrategy
  nameWithType: CapacityBasedAccountSelectionStrategy
  fullName: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy
- uid: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.AddStorageAccount*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.AddStorageAccount
  isExternal: false
  name: AddStorageAccount
  nameWithType: CapacityBasedAccountSelectionStrategy.AddStorageAccount
  fullName: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.AddStorageAccount
- uid: Microsoft.WindowsAzure.MediaServices.Client.IStorageAccount
  commentId: T:Microsoft.WindowsAzure.MediaServices.Client.IStorageAccount
  parent: Microsoft.WindowsAzure.MediaServices.Client
  isExternal: false
  name: IStorageAccount
  nameWithType: IStorageAccount
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IStorageAccount
- uid: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.AddStorageAccountByName*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.AddStorageAccountByName
  isExternal: false
  name: AddStorageAccountByName
  nameWithType: CapacityBasedAccountSelectionStrategy.AddStorageAccountByName
  fullName: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.AddStorageAccountByName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.SelectAccountForAsset*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.SelectAccountForAsset
  isExternal: false
  name: SelectAccountForAsset
  nameWithType: CapacityBasedAccountSelectionStrategy.SelectAccountForAsset
  fullName: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.SelectAccountForAsset
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAccountSelectionStrategy.SelectAccountForAsset
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.IAccountSelectionStrategy.SelectAccountForAsset
  parent: Microsoft.WindowsAzure.MediaServices.Client.IAccountSelectionStrategy
  isExternal: false
  name: SelectAccountForAsset()
  nameWithType: IAccountSelectionStrategy.SelectAccountForAsset()
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAccountSelectionStrategy.SelectAccountForAsset()
  spec.csharp:
  - uid: Microsoft.WindowsAzure.MediaServices.Client.IAccountSelectionStrategy.SelectAccountForAsset
    name: SelectAccountForAsset
    nameWithType: IAccountSelectionStrategy.SelectAccountForAsset
    fullName: Microsoft.WindowsAzure.MediaServices.Client.IAccountSelectionStrategy.SelectAccountForAsset
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.WindowsAzure.MediaServices.Client.IAccountSelectionStrategy.SelectAccountForAsset
    name: SelectAccountForAsset
    nameWithType: IAccountSelectionStrategy.SelectAccountForAsset
    fullName: Microsoft.WindowsAzure.MediaServices.Client.IAccountSelectionStrategy.SelectAccountForAsset
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.GetStorageAccounts*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.GetStorageAccounts
  isExternal: false
  name: GetStorageAccounts
  nameWithType: CapacityBasedAccountSelectionStrategy.GetStorageAccounts
  fullName: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.GetStorageAccounts
- uid: System.Collections.Generic.IList{Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategyListEntry}
  commentId: T:System.Collections.Generic.IList{Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategyListEntry}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<CapacityBasedAccountSelectionStrategyListEntry>
  nameWithType: IList<CapacityBasedAccountSelectionStrategyListEntry>
  fullName: System.Collections.Generic.IList<Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategyListEntry>
  nameWithType.vb: IList(Of CapacityBasedAccountSelectionStrategyListEntry)
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategyListEntry)
  name.vb: IList(Of CapacityBasedAccountSelectionStrategyListEntry)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategyListEntry
    name: CapacityBasedAccountSelectionStrategyListEntry
    nameWithType: CapacityBasedAccountSelectionStrategyListEntry
    fullName: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategyListEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategyListEntry
    name: CapacityBasedAccountSelectionStrategyListEntry
    nameWithType: CapacityBasedAccountSelectionStrategyListEntry
    fullName: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategyListEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Random
  commentId: T:System.Random
  parent: System
  isExternal: true
  name: Random
  nameWithType: Random
  fullName: System.Random
- uid: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.Random*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.Random
  isExternal: false
  name: Random
  nameWithType: CapacityBasedAccountSelectionStrategy.Random
  fullName: Microsoft.WindowsAzure.MediaServices.Client.CapacityBasedAccountSelectionStrategy.Random
