### YamlMime:ManagedReference
items:
- uid: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy
  commentId: T:Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy
  id: MediaRetryPolicy
  parent: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling
  children:
  - Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.#ctor(Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy,Microsoft.Practices.TransientFaultHandling.RetryStrategy)
  - Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.#ctor(Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy,System.Int32)
  - Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.#ctor(Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan)
  - Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.#ctor(Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan,System.TimeSpan)
  - Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.#ctor(Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan,Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.IRetryPolicyAdapter)
  - Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAction``1(System.Func{``0})
  - Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAsync(System.Func{System.Threading.Tasks.Task})
  - Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  - Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}})
  - Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  - Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.RetryPolicyAdapter
  langs:
  - csharp
  - vb
  name: MediaRetryPolicy
  nameWithType: MediaRetryPolicy
  fullName: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy
  type: Class
  source:
    remote:
      path: src/net/Client/TransientFaultHandling/MediaRetryPolicy.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-media-services
    id: MediaRetryPolicy
    path: src/azure-sdk-for-media-services/src/net/Client/TransientFaultHandling/MediaRetryPolicy.cs
    startLine: 23
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client
  namespace: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling
  syntax:
    content: 'public class MediaRetryPolicy : RetryPolicy'
    content.vb: >-
      Public Class MediaRetryPolicy
          Inherits RetryPolicy
  inheritance:
  - System.Object
  - Microsoft.Practices.TransientFaultHandling.RetryPolicy
  inheritedMembers:
  - Microsoft.Practices.TransientFaultHandling.RetryPolicy.NoRetry
  - Microsoft.Practices.TransientFaultHandling.RetryPolicy.DefaultFixed
  - Microsoft.Practices.TransientFaultHandling.RetryPolicy.DefaultProgressive
  - Microsoft.Practices.TransientFaultHandling.RetryPolicy.DefaultExponential
  - Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction(System.Action)
  - Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction(System.Action{System.AsyncCallback},System.Action{System.IAsyncResult},System.Action,System.Action{System.Exception})
  - Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction``1(System.Action{System.AsyncCallback},System.Func{System.IAsyncResult,{TResult}},System.Action{{TResult}},System.Action{System.Exception})
  - Microsoft.Practices.TransientFaultHandling.RetryPolicy.OnRetrying(System.Int32,System.Exception,System.TimeSpan)
  - Microsoft.Practices.TransientFaultHandling.RetryPolicy.RetryStrategy
  - Microsoft.Practices.TransientFaultHandling.RetryPolicy.ErrorDetectionStrategy
  - Microsoft.Practices.TransientFaultHandling.RetryPolicy.Retrying
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Microsoft.Practices.TransientFaultHandling.RetryPolicy.Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.RetryPolicyExtensions.AsAzureStorageClientRetryPolicy
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.RetryPolicyAdapter
  commentId: P:Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.RetryPolicyAdapter
  id: RetryPolicyAdapter
  parent: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy
  langs:
  - csharp
  - vb
  name: RetryPolicyAdapter
  nameWithType: MediaRetryPolicy.RetryPolicyAdapter
  fullName: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.RetryPolicyAdapter
  type: Property
  source:
    remote:
      path: src/net/Client/TransientFaultHandling/MediaRetryPolicy.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-media-services
    id: RetryPolicyAdapter
    path: src/azure-sdk-for-media-services/src/net/Client/TransientFaultHandling/MediaRetryPolicy.cs
    startLine: 25
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client
  namespace: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling
  syntax:
    content: public IRetryPolicyAdapter RetryPolicyAdapter { get; set; }
    content.vb: Public Property RetryPolicyAdapter As IRetryPolicyAdapter
    parameters: []
    return:
      type: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.IRetryPolicyAdapter
  overload: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.RetryPolicyAdapter*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.#ctor(Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy,Microsoft.Practices.TransientFaultHandling.RetryStrategy)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.#ctor(Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy,Microsoft.Practices.TransientFaultHandling.RetryStrategy)
  id: '#ctor(Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy,Microsoft.Practices.TransientFaultHandling.RetryStrategy)'
  parent: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy
  langs:
  - csharp
  - vb
  name: MediaRetryPolicy(ITransientErrorDetectionStrategy, RetryStrategy)
  nameWithType: MediaRetryPolicy.MediaRetryPolicy(ITransientErrorDetectionStrategy, RetryStrategy)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.MediaRetryPolicy(Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy, Microsoft.Practices.TransientFaultHandling.RetryStrategy)
  type: Constructor
  source:
    remote:
      path: src/net/Client/TransientFaultHandling/MediaRetryPolicy.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-media-services
    id: .ctor
    path: src/azure-sdk-for-media-services/src/net/Client/TransientFaultHandling/MediaRetryPolicy.cs
    startLine: 27
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client
  namespace: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling
  syntax:
    content: public MediaRetryPolicy(ITransientErrorDetectionStrategy errorDetectionStrategy, RetryStrategy retryStrategy)
    content.vb: Public Sub New(errorDetectionStrategy As ITransientErrorDetectionStrategy, retryStrategy As RetryStrategy)
    parameters:
    - id: errorDetectionStrategy
      type: Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy
    - id: retryStrategy
      type: Microsoft.Practices.TransientFaultHandling.RetryStrategy
  overload: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.#ctor(Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy,System.Int32)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.#ctor(Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy,System.Int32)
  id: '#ctor(Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy,System.Int32)'
  parent: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy
  langs:
  - csharp
  - vb
  name: MediaRetryPolicy(ITransientErrorDetectionStrategy, Int32)
  nameWithType: MediaRetryPolicy.MediaRetryPolicy(ITransientErrorDetectionStrategy, Int32)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.MediaRetryPolicy(Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/net/Client/TransientFaultHandling/MediaRetryPolicy.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-media-services
    id: .ctor
    path: src/azure-sdk-for-media-services/src/net/Client/TransientFaultHandling/MediaRetryPolicy.cs
    startLine: 33
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client
  namespace: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling
  syntax:
    content: public MediaRetryPolicy(ITransientErrorDetectionStrategy errorDetectionStrategy, int retryCount)
    content.vb: Public Sub New(errorDetectionStrategy As ITransientErrorDetectionStrategy, retryCount As Integer)
    parameters:
    - id: errorDetectionStrategy
      type: Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy
    - id: retryCount
      type: System.Int32
  overload: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.#ctor(Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.#ctor(Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan)
  id: '#ctor(Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan)'
  parent: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy
  langs:
  - csharp
  - vb
  name: MediaRetryPolicy(ITransientErrorDetectionStrategy, Int32, TimeSpan)
  nameWithType: MediaRetryPolicy.MediaRetryPolicy(ITransientErrorDetectionStrategy, Int32, TimeSpan)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.MediaRetryPolicy(Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy, System.Int32, System.TimeSpan)
  type: Constructor
  source:
    remote:
      path: src/net/Client/TransientFaultHandling/MediaRetryPolicy.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-media-services
    id: .ctor
    path: src/azure-sdk-for-media-services/src/net/Client/TransientFaultHandling/MediaRetryPolicy.cs
    startLine: 38
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client
  namespace: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling
  syntax:
    content: public MediaRetryPolicy(ITransientErrorDetectionStrategy errorDetectionStrategy, int retryCount, TimeSpan retryInterval)
    content.vb: Public Sub New(errorDetectionStrategy As ITransientErrorDetectionStrategy, retryCount As Integer, retryInterval As TimeSpan)
    parameters:
    - id: errorDetectionStrategy
      type: Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy
    - id: retryCount
      type: System.Int32
    - id: retryInterval
      type: System.TimeSpan
  overload: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.#ctor(Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan,Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.IRetryPolicyAdapter)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.#ctor(Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan,Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.IRetryPolicyAdapter)
  id: '#ctor(Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan,Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.IRetryPolicyAdapter)'
  parent: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy
  langs:
  - csharp
  - vb
  name: MediaRetryPolicy(ITransientErrorDetectionStrategy, Int32, TimeSpan, TimeSpan, TimeSpan, IRetryPolicyAdapter)
  nameWithType: MediaRetryPolicy.MediaRetryPolicy(ITransientErrorDetectionStrategy, Int32, TimeSpan, TimeSpan, TimeSpan, IRetryPolicyAdapter)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.MediaRetryPolicy(Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy, System.Int32, System.TimeSpan, System.TimeSpan, System.TimeSpan, Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.IRetryPolicyAdapter)
  type: Constructor
  source:
    remote:
      path: src/net/Client/TransientFaultHandling/MediaRetryPolicy.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-media-services
    id: .ctor
    path: src/azure-sdk-for-media-services/src/net/Client/TransientFaultHandling/MediaRetryPolicy.cs
    startLine: 43
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client
  namespace: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling
  syntax:
    content: public MediaRetryPolicy(ITransientErrorDetectionStrategy errorDetectionStrategy, int retryCount, TimeSpan minBackoff, TimeSpan maxBackoff, TimeSpan deltaBackoff, IRetryPolicyAdapter adapter = null)
    content.vb: Public Sub New(errorDetectionStrategy As ITransientErrorDetectionStrategy, retryCount As Integer, minBackoff As TimeSpan, maxBackoff As TimeSpan, deltaBackoff As TimeSpan, adapter As IRetryPolicyAdapter = Nothing)
    parameters:
    - id: errorDetectionStrategy
      type: Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy
    - id: retryCount
      type: System.Int32
    - id: minBackoff
      type: System.TimeSpan
    - id: maxBackoff
      type: System.TimeSpan
    - id: deltaBackoff
      type: System.TimeSpan
    - id: adapter
      type: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.IRetryPolicyAdapter
  overload: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.#ctor(Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan,System.TimeSpan)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.#ctor(Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan,System.TimeSpan)
  id: '#ctor(Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan,System.TimeSpan)'
  parent: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy
  langs:
  - csharp
  - vb
  name: MediaRetryPolicy(ITransientErrorDetectionStrategy, Int32, TimeSpan, TimeSpan)
  nameWithType: MediaRetryPolicy.MediaRetryPolicy(ITransientErrorDetectionStrategy, Int32, TimeSpan, TimeSpan)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.MediaRetryPolicy(Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy, System.Int32, System.TimeSpan, System.TimeSpan)
  type: Constructor
  source:
    remote:
      path: src/net/Client/TransientFaultHandling/MediaRetryPolicy.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-media-services
    id: .ctor
    path: src/azure-sdk-for-media-services/src/net/Client/TransientFaultHandling/MediaRetryPolicy.cs
    startLine: 49
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client
  namespace: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling
  syntax:
    content: public MediaRetryPolicy(ITransientErrorDetectionStrategy errorDetectionStrategy, int retryCount, TimeSpan initialInterval, TimeSpan increment)
    content.vb: Public Sub New(errorDetectionStrategy As ITransientErrorDetectionStrategy, retryCount As Integer, initialInterval As TimeSpan, increment As TimeSpan)
    parameters:
    - id: errorDetectionStrategy
      type: Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy
    - id: retryCount
      type: System.Int32
    - id: initialInterval
      type: System.TimeSpan
    - id: increment
      type: System.TimeSpan
  overload: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAction``1(System.Func{``0})
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAction``1(System.Func{``0})
  id: ExecuteAction``1(System.Func{``0})
  parent: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy
  langs:
  - csharp
  - vb
  name: ExecuteAction<TResult>(Func<TResult>)
  nameWithType: MediaRetryPolicy.ExecuteAction<TResult>(Func<TResult>)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAction<TResult>(System.Func<TResult>)
  type: Method
  source:
    remote:
      path: src/net/Client/TransientFaultHandling/MediaRetryPolicy.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-media-services
    id: ExecuteAction
    path: src/azure-sdk-for-media-services/src/net/Client/TransientFaultHandling/MediaRetryPolicy.cs
    startLine: 61
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client
  namespace: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling
  summary: "\nExecutes the action.\n"
  example: []
  syntax:
    content: public override TResult ExecuteAction<TResult>(Func<TResult> func)
    content.vb: Public Overrides Function ExecuteAction(Of TResult)(func As Func(Of TResult)) As TResult
    parameters:
    - id: func
      type: System.Func{{TResult}}
      description: The function.
    typeParameters:
    - id: TResult
      description: The type of the t result.
    return:
      type: '{TResult}'
      description: TResult.
  overridden: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction``1(System.Func{{TResult}})
  overload: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAction*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: func
  nameWithType.vb: MediaRetryPolicy.ExecuteAction(Of TResult)(Func(Of TResult))
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAction(Of TResult)(System.Func(Of TResult))
  name.vb: ExecuteAction(Of TResult)(Func(Of TResult))
- uid: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}})
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}})
  id: ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}})
  parent: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TResult>(Func<Task<TResult>>)
  nameWithType: MediaRetryPolicy.ExecuteAsync<TResult>(Func<Task<TResult>>)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAsync<TResult>(System.Func<System.Threading.Tasks.Task<TResult>>)
  type: Method
  source:
    remote:
      path: src/net/Client/TransientFaultHandling/MediaRetryPolicy.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-media-services
    id: ExecuteAsync
    path: src/azure-sdk-for-media-services/src/net/Client/TransientFaultHandling/MediaRetryPolicy.cs
    startLine: 123
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client
  namespace: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling
  syntax:
    content: public Task<TResult> ExecuteAsync<TResult>(Func<Task<TResult>> taskFunc)
    content.vb: Public Function ExecuteAsync(Of TResult)(taskFunc As Func(Of Task(Of TResult))) As Task(Of TResult)
    parameters:
    - id: taskFunc
      type: System.Func{System.Threading.Tasks.Task{{TResult}}}
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
  overload: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAsync*
  nameWithType.vb: MediaRetryPolicy.ExecuteAsync(Of TResult)(Func(Of Task(Of TResult)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAsync(Of TResult)(System.Func(Of System.Threading.Tasks.Task(Of TResult)))
  name.vb: ExecuteAsync(Of TResult)(Func(Of Task(Of TResult)))
- uid: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAsync(System.Func{System.Threading.Tasks.Task})
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAsync(System.Func{System.Threading.Tasks.Task})
  id: ExecuteAsync(System.Func{System.Threading.Tasks.Task})
  parent: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy
  langs:
  - csharp
  - vb
  name: ExecuteAsync(Func<Task>)
  nameWithType: MediaRetryPolicy.ExecuteAsync(Func<Task>)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAsync(System.Func<System.Threading.Tasks.Task>)
  type: Method
  source:
    remote:
      path: src/net/Client/TransientFaultHandling/MediaRetryPolicy.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-media-services
    id: ExecuteAsync
    path: src/azure-sdk-for-media-services/src/net/Client/TransientFaultHandling/MediaRetryPolicy.cs
    startLine: 136
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client
  namespace: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling
  summary: "\nRepetitively executes the specified asynchronous task while it satisfies the current retry policy.\n"
  example: []
  syntax:
    content: public Task ExecuteAsync(Func<Task> taskAction)
    content.vb: Public Function ExecuteAsync(taskAction As Func(Of Task)) As Task
    parameters:
    - id: taskAction
      type: System.Func{System.Threading.Tasks.Task}
      description: A function that returns a started task (also refered as "hot" task).
    return:
      type: System.Threading.Tasks.Task
      description: >-
        Returns a task that will run to completion if the original task completes successfully (either the

        first time or after retrying transient failures). If the task fails with a non-transient error or

        the retry limit is reached, the returned task will become faulted and the exception must be observed.
  overload: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAsync*
  nameWithType.vb: MediaRetryPolicy.ExecuteAsync(Func(Of Task))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAsync(System.Func(Of System.Threading.Tasks.Task))
  name.vb: ExecuteAsync(Func(Of Task))
- uid: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  id: ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  parent: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TResult>(Func<Task<TResult>>, CancellationToken)
  nameWithType: MediaRetryPolicy.ExecuteAsync<TResult>(Func<Task<TResult>>, CancellationToken)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAsync<TResult>(System.Func<System.Threading.Tasks.Task<TResult>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/net/Client/TransientFaultHandling/MediaRetryPolicy.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-media-services
    id: ExecuteAsync
    path: src/azure-sdk-for-media-services/src/net/Client/TransientFaultHandling/MediaRetryPolicy.cs
    startLine: 152
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client
  namespace: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling
  summary: "\nRepeatedly executes the specified asynchronous task while it satisfies the current retry policy.\n"
  example: []
  syntax:
    content: public Task<TResult> ExecuteAsync<TResult>(Func<Task<TResult>> taskFunc, CancellationToken cancellationToken)
    content.vb: Public Function ExecuteAsync(Of TResult)(taskFunc As Func(Of Task(Of TResult)), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: taskFunc
      type: System.Func{System.Threading.Tasks.Task{{TResult}}}
      description: A function that returns a started task (also refered as "hot" task).
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    typeParameters:
    - id: TResult
      description: The type of the t result.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: >-
        Returns a task that will run to completion if the original task completes
            successfully (either the first time or after retrying transient failures).
            If the task fails with a non-transient error or the retry limit is reached,
            the returned task will become faulted and the exception must be observed.
  overload: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAsync*
  nameWithType.vb: MediaRetryPolicy.ExecuteAsync(Of TResult)(Func(Of Task(Of TResult)), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAsync(Of TResult)(System.Func(Of System.Threading.Tasks.Task(Of TResult)), System.Threading.CancellationToken)
  name.vb: ExecuteAsync(Of TResult)(Func(Of Task(Of TResult)), CancellationToken)
- uid: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  id: ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  parent: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy
  langs:
  - csharp
  - vb
  name: ExecuteAsync(Func<Task>, CancellationToken)
  nameWithType: MediaRetryPolicy.ExecuteAsync(Func<Task>, CancellationToken)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAsync(System.Func<System.Threading.Tasks.Task>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/net/Client/TransientFaultHandling/MediaRetryPolicy.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-media-services
    id: ExecuteAsync
    path: src/azure-sdk-for-media-services/src/net/Client/TransientFaultHandling/MediaRetryPolicy.cs
    startLine: 165
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client
  namespace: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling
  summary: "\nRepetitively executes the specified asynchronous task while it satisfies the current retry policy.\n"
  example: []
  syntax:
    content: public Task ExecuteAsync(Func<Task> taskAction, CancellationToken cancellationToken)
    content.vb: Public Function ExecuteAsync(taskAction As Func(Of Task), cancellationToken As CancellationToken) As Task
    parameters:
    - id: taskAction
      type: System.Func{System.Threading.Tasks.Task}
      description: A function that returns a started task (also refered as "hot" task).
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To cancel the retry operation, but not operations that are already in flight or that already completed successfully.
    return:
      type: System.Threading.Tasks.Task
      description: >-
        Returns a task that will run to completion if the original task completes successfully (either the

        first time or after retrying transient failures). If the task fails with a non-transient error or

        the retry limit is reached, the returned task will become faulted and the exception must be observed.
  overload: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAsync*
  nameWithType.vb: MediaRetryPolicy.ExecuteAsync(Func(Of Task), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAsync(System.Func(Of System.Threading.Tasks.Task), System.Threading.CancellationToken)
  name.vb: ExecuteAsync(Func(Of Task), CancellationToken)
references:
- uid: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling
  commentId: N:Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling
  isExternal: false
  name: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling
  nameWithType: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling
  fullName: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Practices.TransientFaultHandling.RetryPolicy
  commentId: T:Microsoft.Practices.TransientFaultHandling.RetryPolicy
  parent: Microsoft.Practices.TransientFaultHandling
  isExternal: true
  name: RetryPolicy
  nameWithType: RetryPolicy
  fullName: Microsoft.Practices.TransientFaultHandling.RetryPolicy
- uid: Microsoft.Practices.TransientFaultHandling.RetryPolicy.NoRetry
  commentId: F:Microsoft.Practices.TransientFaultHandling.RetryPolicy.NoRetry
  parent: Microsoft.Practices.TransientFaultHandling.RetryPolicy
  isExternal: true
  name: NoRetry
  nameWithType: RetryPolicy.NoRetry
  fullName: Microsoft.Practices.TransientFaultHandling.RetryPolicy.NoRetry
- uid: Microsoft.Practices.TransientFaultHandling.RetryPolicy.DefaultFixed
  commentId: F:Microsoft.Practices.TransientFaultHandling.RetryPolicy.DefaultFixed
  parent: Microsoft.Practices.TransientFaultHandling.RetryPolicy
  isExternal: true
  name: DefaultFixed
  nameWithType: RetryPolicy.DefaultFixed
  fullName: Microsoft.Practices.TransientFaultHandling.RetryPolicy.DefaultFixed
- uid: Microsoft.Practices.TransientFaultHandling.RetryPolicy.DefaultProgressive
  commentId: F:Microsoft.Practices.TransientFaultHandling.RetryPolicy.DefaultProgressive
  parent: Microsoft.Practices.TransientFaultHandling.RetryPolicy
  isExternal: true
  name: DefaultProgressive
  nameWithType: RetryPolicy.DefaultProgressive
  fullName: Microsoft.Practices.TransientFaultHandling.RetryPolicy.DefaultProgressive
- uid: Microsoft.Practices.TransientFaultHandling.RetryPolicy.DefaultExponential
  commentId: F:Microsoft.Practices.TransientFaultHandling.RetryPolicy.DefaultExponential
  parent: Microsoft.Practices.TransientFaultHandling.RetryPolicy
  isExternal: true
  name: DefaultExponential
  nameWithType: RetryPolicy.DefaultExponential
  fullName: Microsoft.Practices.TransientFaultHandling.RetryPolicy.DefaultExponential
- uid: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction(System.Action)
  commentId: M:Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction(System.Action)
  parent: Microsoft.Practices.TransientFaultHandling.RetryPolicy
  isExternal: true
  name: ExecuteAction(Action)
  nameWithType: RetryPolicy.ExecuteAction(Action)
  fullName: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction(System.Action)
  spec.csharp:
  - uid: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction(System.Action)
    name: ExecuteAction
    nameWithType: RetryPolicy.ExecuteAction
    fullName: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction(System.Action)
    name: ExecuteAction
    nameWithType: RetryPolicy.ExecuteAction
    fullName: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction(System.Action{System.AsyncCallback},System.Action{System.IAsyncResult},System.Action,System.Action{System.Exception})
  commentId: M:Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction(System.Action{System.AsyncCallback},System.Action{System.IAsyncResult},System.Action,System.Action{System.Exception})
  parent: Microsoft.Practices.TransientFaultHandling.RetryPolicy
  isExternal: true
  name: ExecuteAction(Action<AsyncCallback>, Action<IAsyncResult>, Action, Action<Exception>)
  nameWithType: RetryPolicy.ExecuteAction(Action<AsyncCallback>, Action<IAsyncResult>, Action, Action<Exception>)
  fullName: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction(System.Action<System.AsyncCallback>, System.Action<System.IAsyncResult>, System.Action, System.Action<System.Exception>)
  nameWithType.vb: RetryPolicy.ExecuteAction(Action(Of AsyncCallback), Action(Of IAsyncResult), Action, Action(Of Exception))
  fullname.vb: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction(System.Action(Of System.AsyncCallback), System.Action(Of System.IAsyncResult), System.Action, System.Action(Of System.Exception))
  name.vb: ExecuteAction(Action(Of AsyncCallback), Action(Of IAsyncResult), Action, Action(Of Exception))
  spec.csharp:
  - uid: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction(System.Action{System.AsyncCallback},System.Action{System.IAsyncResult},System.Action,System.Action{System.Exception})
    name: ExecuteAction
    nameWithType: RetryPolicy.ExecuteAction
    fullName: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction(System.Action{System.AsyncCallback},System.Action{System.IAsyncResult},System.Action,System.Action{System.Exception})
    name: ExecuteAction
    nameWithType: RetryPolicy.ExecuteAction
    fullName: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction``1(System.Action{System.AsyncCallback},System.Func{System.IAsyncResult,{TResult}},System.Action{{TResult}},System.Action{System.Exception})
  commentId: M:Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction``1(System.Action{System.AsyncCallback},System.Func{System.IAsyncResult,``0},System.Action{``0},System.Action{System.Exception})
  parent: Microsoft.Practices.TransientFaultHandling.RetryPolicy
  definition: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction``1(System.Action{System.AsyncCallback},System.Func{System.IAsyncResult,``0},System.Action{``0},System.Action{System.Exception})
  name: ExecuteAction<TResult>(Action<AsyncCallback>, Func<IAsyncResult, TResult>, Action<TResult>, Action<Exception>)
  nameWithType: RetryPolicy.ExecuteAction<TResult>(Action<AsyncCallback>, Func<IAsyncResult, TResult>, Action<TResult>, Action<Exception>)
  fullName: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction<TResult>(System.Action<System.AsyncCallback>, System.Func<System.IAsyncResult, TResult>, System.Action<TResult>, System.Action<System.Exception>)
  nameWithType.vb: RetryPolicy.ExecuteAction(Of TResult)(Action(Of AsyncCallback), Func(Of IAsyncResult, TResult), Action(Of TResult), Action(Of Exception))
  fullname.vb: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction(Of TResult)(System.Action(Of System.AsyncCallback), System.Func(Of System.IAsyncResult, TResult), System.Action(Of TResult), System.Action(Of System.Exception))
  name.vb: ExecuteAction(Of TResult)(Action(Of AsyncCallback), Func(Of IAsyncResult, TResult), Action(Of TResult), Action(Of Exception))
  spec.csharp:
  - uid: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction``1(System.Action{System.AsyncCallback},System.Func{System.IAsyncResult,``0},System.Action{``0},System.Action{System.Exception})
    name: ExecuteAction<TResult>
    nameWithType: RetryPolicy.ExecuteAction<TResult>
    fullName: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction``1(System.Action{System.AsyncCallback},System.Func{System.IAsyncResult,``0},System.Action{``0},System.Action{System.Exception})
    name: ExecuteAction(Of TResult)
    nameWithType: RetryPolicy.ExecuteAction(Of TResult)
    fullName: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Practices.TransientFaultHandling.RetryPolicy.OnRetrying(System.Int32,System.Exception,System.TimeSpan)
  commentId: M:Microsoft.Practices.TransientFaultHandling.RetryPolicy.OnRetrying(System.Int32,System.Exception,System.TimeSpan)
  parent: Microsoft.Practices.TransientFaultHandling.RetryPolicy
  isExternal: true
  name: OnRetrying(Int32, Exception, TimeSpan)
  nameWithType: RetryPolicy.OnRetrying(Int32, Exception, TimeSpan)
  fullName: Microsoft.Practices.TransientFaultHandling.RetryPolicy.OnRetrying(System.Int32, System.Exception, System.TimeSpan)
  spec.csharp:
  - uid: Microsoft.Practices.TransientFaultHandling.RetryPolicy.OnRetrying(System.Int32,System.Exception,System.TimeSpan)
    name: OnRetrying
    nameWithType: RetryPolicy.OnRetrying
    fullName: Microsoft.Practices.TransientFaultHandling.RetryPolicy.OnRetrying
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Practices.TransientFaultHandling.RetryPolicy.OnRetrying(System.Int32,System.Exception,System.TimeSpan)
    name: OnRetrying
    nameWithType: RetryPolicy.OnRetrying
    fullName: Microsoft.Practices.TransientFaultHandling.RetryPolicy.OnRetrying
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Practices.TransientFaultHandling.RetryPolicy.RetryStrategy
  commentId: P:Microsoft.Practices.TransientFaultHandling.RetryPolicy.RetryStrategy
  parent: Microsoft.Practices.TransientFaultHandling.RetryPolicy
  isExternal: true
  name: RetryStrategy
  nameWithType: RetryPolicy.RetryStrategy
  fullName: Microsoft.Practices.TransientFaultHandling.RetryPolicy.RetryStrategy
- uid: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ErrorDetectionStrategy
  commentId: P:Microsoft.Practices.TransientFaultHandling.RetryPolicy.ErrorDetectionStrategy
  parent: Microsoft.Practices.TransientFaultHandling.RetryPolicy
  isExternal: true
  name: ErrorDetectionStrategy
  nameWithType: RetryPolicy.ErrorDetectionStrategy
  fullName: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ErrorDetectionStrategy
- uid: Microsoft.Practices.TransientFaultHandling.RetryPolicy.Retrying
  commentId: E:Microsoft.Practices.TransientFaultHandling.RetryPolicy.Retrying
  parent: Microsoft.Practices.TransientFaultHandling.RetryPolicy
  isExternal: true
  name: Retrying
  nameWithType: RetryPolicy.Retrying
  fullName: Microsoft.Practices.TransientFaultHandling.RetryPolicy.Retrying
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Practices.TransientFaultHandling.RetryPolicy.Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.RetryPolicyExtensions.AsAzureStorageClientRetryPolicy
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.RetryPolicyExtensions.AsAzureStorageClientRetryPolicy(Microsoft.Practices.TransientFaultHandling.RetryPolicy)
  parent: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.RetryPolicyExtensions
  definition: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.RetryPolicyExtensions.AsAzureStorageClientRetryPolicy(Microsoft.Practices.TransientFaultHandling.RetryPolicy)
  name: AsAzureStorageClientRetryPolicy()
  nameWithType: RetryPolicyExtensions.AsAzureStorageClientRetryPolicy()
  fullName: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.RetryPolicyExtensions.AsAzureStorageClientRetryPolicy()
  spec.csharp:
  - uid: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.RetryPolicyExtensions.AsAzureStorageClientRetryPolicy
    name: AsAzureStorageClientRetryPolicy
    nameWithType: RetryPolicyExtensions.AsAzureStorageClientRetryPolicy
    fullName: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.RetryPolicyExtensions.AsAzureStorageClientRetryPolicy
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.RetryPolicyExtensions.AsAzureStorageClientRetryPolicy
    name: AsAzureStorageClientRetryPolicy
    nameWithType: RetryPolicyExtensions.AsAzureStorageClientRetryPolicy
    fullName: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.RetryPolicyExtensions.AsAzureStorageClientRetryPolicy
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Practices.TransientFaultHandling
  commentId: N:Microsoft.Practices.TransientFaultHandling
  isExternal: false
  name: Microsoft.Practices.TransientFaultHandling
  nameWithType: Microsoft.Practices.TransientFaultHandling
  fullName: Microsoft.Practices.TransientFaultHandling
- uid: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction``1(System.Action{System.AsyncCallback},System.Func{System.IAsyncResult,``0},System.Action{``0},System.Action{System.Exception})
  commentId: M:Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction``1(System.Action{System.AsyncCallback},System.Func{System.IAsyncResult,``0},System.Action{``0},System.Action{System.Exception})
  isExternal: true
  name: ExecuteAction<TResult>(Action<AsyncCallback>, Func<IAsyncResult, TResult>, Action<TResult>, Action<Exception>)
  nameWithType: RetryPolicy.ExecuteAction<TResult>(Action<AsyncCallback>, Func<IAsyncResult, TResult>, Action<TResult>, Action<Exception>)
  fullName: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction<TResult>(System.Action<System.AsyncCallback>, System.Func<System.IAsyncResult, TResult>, System.Action<TResult>, System.Action<System.Exception>)
  nameWithType.vb: RetryPolicy.ExecuteAction(Of TResult)(Action(Of AsyncCallback), Func(Of IAsyncResult, TResult), Action(Of TResult), Action(Of Exception))
  fullname.vb: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction(Of TResult)(System.Action(Of System.AsyncCallback), System.Func(Of System.IAsyncResult, TResult), System.Action(Of TResult), System.Action(Of System.Exception))
  name.vb: ExecuteAction(Of TResult)(Action(Of AsyncCallback), Func(Of IAsyncResult, TResult), Action(Of TResult), Action(Of Exception))
  spec.csharp:
  - uid: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction``1(System.Action{System.AsyncCallback},System.Func{System.IAsyncResult,``0},System.Action{``0},System.Action{System.Exception})
    name: ExecuteAction<TResult>
    nameWithType: RetryPolicy.ExecuteAction<TResult>
    fullName: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction``1(System.Action{System.AsyncCallback},System.Func{System.IAsyncResult,``0},System.Action{``0},System.Action{System.Exception})
    name: ExecuteAction(Of TResult)
    nameWithType: RetryPolicy.ExecuteAction(Of TResult)
    fullName: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.RetryPolicyExtensions.AsAzureStorageClientRetryPolicy(Microsoft.Practices.TransientFaultHandling.RetryPolicy)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.RetryPolicyExtensions.AsAzureStorageClientRetryPolicy(Microsoft.Practices.TransientFaultHandling.RetryPolicy)
  isExternal: true
  name: AsAzureStorageClientRetryPolicy(RetryPolicy)
  nameWithType: RetryPolicyExtensions.AsAzureStorageClientRetryPolicy(RetryPolicy)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.RetryPolicyExtensions.AsAzureStorageClientRetryPolicy(Microsoft.Practices.TransientFaultHandling.RetryPolicy)
  spec.csharp:
  - uid: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.RetryPolicyExtensions.AsAzureStorageClientRetryPolicy(Microsoft.Practices.TransientFaultHandling.RetryPolicy)
    name: AsAzureStorageClientRetryPolicy
    nameWithType: RetryPolicyExtensions.AsAzureStorageClientRetryPolicy
    fullName: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.RetryPolicyExtensions.AsAzureStorageClientRetryPolicy
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Practices.TransientFaultHandling.RetryPolicy
    name: RetryPolicy
    nameWithType: RetryPolicy
    fullName: Microsoft.Practices.TransientFaultHandling.RetryPolicy
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.RetryPolicyExtensions.AsAzureStorageClientRetryPolicy(Microsoft.Practices.TransientFaultHandling.RetryPolicy)
    name: AsAzureStorageClientRetryPolicy
    nameWithType: RetryPolicyExtensions.AsAzureStorageClientRetryPolicy
    fullName: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.RetryPolicyExtensions.AsAzureStorageClientRetryPolicy
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Practices.TransientFaultHandling.RetryPolicy
    name: RetryPolicy
    nameWithType: RetryPolicy
    fullName: Microsoft.Practices.TransientFaultHandling.RetryPolicy
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.RetryPolicyExtensions
  commentId: T:Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.RetryPolicyExtensions
  parent: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling
  isExternal: false
  name: RetryPolicyExtensions
  nameWithType: RetryPolicyExtensions
  fullName: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.RetryPolicyExtensions
- uid: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.RetryPolicyAdapter*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.RetryPolicyAdapter
  isExternal: false
  name: RetryPolicyAdapter
  nameWithType: MediaRetryPolicy.RetryPolicyAdapter
  fullName: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.RetryPolicyAdapter
- uid: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.IRetryPolicyAdapter
  commentId: T:Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.IRetryPolicyAdapter
  parent: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling
  isExternal: false
  name: IRetryPolicyAdapter
  nameWithType: IRetryPolicyAdapter
  fullName: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.IRetryPolicyAdapter
- uid: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.#ctor*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.#ctor
  isExternal: false
  name: MediaRetryPolicy
  nameWithType: MediaRetryPolicy.MediaRetryPolicy
  fullName: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.MediaRetryPolicy
- uid: Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy
  commentId: T:Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy
  parent: Microsoft.Practices.TransientFaultHandling
  isExternal: true
  name: ITransientErrorDetectionStrategy
  nameWithType: ITransientErrorDetectionStrategy
  fullName: Microsoft.Practices.TransientFaultHandling.ITransientErrorDetectionStrategy
- uid: Microsoft.Practices.TransientFaultHandling.RetryStrategy
  commentId: T:Microsoft.Practices.TransientFaultHandling.RetryStrategy
  parent: Microsoft.Practices.TransientFaultHandling
  isExternal: true
  name: RetryStrategy
  nameWithType: RetryStrategy
  fullName: Microsoft.Practices.TransientFaultHandling.RetryStrategy
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction``1(System.Func{{TResult}})
  commentId: M:Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction``1(System.Func{``0})
  parent: Microsoft.Practices.TransientFaultHandling.RetryPolicy
  definition: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction``1(System.Func{``0})
  name: ExecuteAction<TResult>(Func<TResult>)
  nameWithType: RetryPolicy.ExecuteAction<TResult>(Func<TResult>)
  fullName: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction<TResult>(System.Func<TResult>)
  nameWithType.vb: RetryPolicy.ExecuteAction(Of TResult)(Func(Of TResult))
  fullname.vb: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction(Of TResult)(System.Func(Of TResult))
  name.vb: ExecuteAction(Of TResult)(Func(Of TResult))
  spec.csharp:
  - uid: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction``1(System.Func{``0})
    name: ExecuteAction<TResult>
    nameWithType: RetryPolicy.ExecuteAction<TResult>
    fullName: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction``1(System.Func{``0})
    name: ExecuteAction(Of TResult)
    nameWithType: RetryPolicy.ExecuteAction(Of TResult)
    fullName: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAction*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAction
  isExternal: false
  name: ExecuteAction<TResult>
  nameWithType: MediaRetryPolicy.ExecuteAction<TResult>
  fullName: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAction<TResult>
  nameWithType.vb: MediaRetryPolicy.ExecuteAction(Of TResult)
  fullname.vb: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAction(Of TResult)
  name.vb: ExecuteAction(Of TResult)
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.Func{{TResult}}
  commentId: T:System.Func{``0}
  parent: System
  definition: System.Func`1
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullname.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction``1(System.Func{``0})
  commentId: M:Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction``1(System.Func{``0})
  isExternal: true
  name: ExecuteAction<TResult>(Func<TResult>)
  nameWithType: RetryPolicy.ExecuteAction<TResult>(Func<TResult>)
  fullName: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction<TResult>(System.Func<TResult>)
  nameWithType.vb: RetryPolicy.ExecuteAction(Of TResult)(Func(Of TResult))
  fullname.vb: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction(Of TResult)(System.Func(Of TResult))
  name.vb: ExecuteAction(Of TResult)(Func(Of TResult))
  spec.csharp:
  - uid: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction``1(System.Func{``0})
    name: ExecuteAction<TResult>
    nameWithType: RetryPolicy.ExecuteAction<TResult>
    fullName: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction``1(System.Func{``0})
    name: ExecuteAction(Of TResult)
    nameWithType: RetryPolicy.ExecuteAction(Of TResult)
    fullName: Microsoft.Practices.TransientFaultHandling.RetryPolicy.ExecuteAction(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullname.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TResult
  commentId: '!:TResult'
  isExternal: false
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAsync*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAsync
  isExternal: false
  name: ExecuteAsync<TResult>
  nameWithType: MediaRetryPolicy.ExecuteAsync<TResult>
  fullName: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAsync<TResult>
  nameWithType.vb: MediaRetryPolicy.ExecuteAsync(Of TResult)
  fullname.vb: Microsoft.WindowsAzure.MediaServices.Client.TransientFaultHandling.MediaRetryPolicy.ExecuteAsync(Of TResult)
  name.vb: ExecuteAsync(Of TResult)
- uid: System.Func{System.Threading.Tasks.Task{{TResult}}}
  commentId: T:System.Func{System.Threading.Tasks.Task{``0}}
  parent: System
  definition: System.Func`1
  name: Func<Task<TResult>>
  nameWithType: Func<Task<TResult>>
  fullName: System.Func<System.Threading.Tasks.Task<TResult>>
  nameWithType.vb: Func(Of Task(Of TResult))
  fullname.vb: System.Func(Of System.Threading.Tasks.Task(Of TResult))
  name.vb: Func(Of Task(Of TResult))
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TResult}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Func{System.Threading.Tasks.Task}
  commentId: T:System.Func{System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`1
  name: Func<Task>
  nameWithType: Func<Task>
  fullName: System.Func<System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of Task)
  fullname.vb: System.Func(Of System.Threading.Tasks.Task)
  name.vb: Func(Of Task)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
