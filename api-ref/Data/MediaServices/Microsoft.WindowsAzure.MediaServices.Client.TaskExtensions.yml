### YamlMime:ManagedReference
items:
- uid: Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions
  commentId: T:Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions
  id: TaskExtensions
  parent: Microsoft.WindowsAzure.MediaServices.Client
  children:
  - Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions.HandleCancellation``1(System.Threading.Tasks.Task{``0},System.Threading.CancellationToken)
  - Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions.ThrowIfCancellationRequested(System.Threading.CancellationToken,System.Action)
  - Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions.ThrowIfFaulted(System.Threading.Tasks.Task)
  - Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions.ThrowIfFaulted(System.Threading.Tasks.Task,System.Action)
  langs:
  - csharp
  - vb
  name: TaskExtensions
  nameWithType: TaskExtensions
  fullName: Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions
  type: Class
  source:
    remote:
      path: src/net/Client/TaskExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-media-services
    id: TaskExtensions
    path: src/azure-sdk-for-media-services/src/net/Client/TaskExtensions.cs
    startLine: 25
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nExtension methods for a task.\n"
  example: []
  syntax:
    content: public static class TaskExtensions
    content.vb: Public Module TaskExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions.ThrowIfFaulted(System.Threading.Tasks.Task,System.Action)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions.ThrowIfFaulted(System.Threading.Tasks.Task,System.Action)
  id: ThrowIfFaulted(System.Threading.Tasks.Task,System.Action)
  isExtensionMethod: true
  parent: Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions
  langs:
  - csharp
  - vb
  name: ThrowIfFaulted(Task, Action)
  nameWithType: TaskExtensions.ThrowIfFaulted(Task, Action)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions.ThrowIfFaulted(System.Threading.Tasks.Task, System.Action)
  type: Method
  source:
    remote:
      path: src/net/Client/TaskExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-media-services
    id: ThrowIfFaulted
    path: src/azure-sdk-for-media-services/src/net/Client/TaskExtensions.cs
    startLine: 32
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nThrows an exception if the task faulted.\n"
  example: []
  syntax:
    content: public static void ThrowIfFaulted(this Task task, Action faultedCallback)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub ThrowIfFaulted(task As Task, faultedCallback As Action)
    parameters:
    - id: task
      type: System.Threading.Tasks.Task
      description: The task.
    - id: faultedCallback
      type: System.Action
      description: The faulted callback.
  overload: Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions.ThrowIfFaulted*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions.ThrowIfFaulted(System.Threading.Tasks.Task)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions.ThrowIfFaulted(System.Threading.Tasks.Task)
  id: ThrowIfFaulted(System.Threading.Tasks.Task)
  isExtensionMethod: true
  parent: Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions
  langs:
  - csharp
  - vb
  name: ThrowIfFaulted(Task)
  nameWithType: TaskExtensions.ThrowIfFaulted(Task)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions.ThrowIfFaulted(System.Threading.Tasks.Task)
  type: Method
  source:
    remote:
      path: src/net/Client/TaskExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-media-services
    id: ThrowIfFaulted
    path: src/azure-sdk-for-media-services/src/net/Client/TaskExtensions.cs
    startLine: 56
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nThrows an exception if the task is faulted.\n"
  example: []
  syntax:
    content: public static void ThrowIfFaulted(this Task task)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub ThrowIfFaulted(task As Task)
    parameters:
    - id: task
      type: System.Threading.Tasks.Task
      description: The task.
  overload: Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions.ThrowIfFaulted*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions.ThrowIfCancellationRequested(System.Threading.CancellationToken,System.Action)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions.ThrowIfCancellationRequested(System.Threading.CancellationToken,System.Action)
  id: ThrowIfCancellationRequested(System.Threading.CancellationToken,System.Action)
  isExtensionMethod: true
  parent: Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions
  langs:
  - csharp
  - vb
  name: ThrowIfCancellationRequested(CancellationToken, Action)
  nameWithType: TaskExtensions.ThrowIfCancellationRequested(CancellationToken, Action)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions.ThrowIfCancellationRequested(System.Threading.CancellationToken, System.Action)
  type: Method
  source:
    remote:
      path: src/net/Client/TaskExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-media-services
    id: ThrowIfCancellationRequested
    path: src/azure-sdk-for-media-services/src/net/Client/TaskExtensions.cs
    startLine: 66
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nThrows an exception if cancellation was requested.\n"
  example: []
  syntax:
    content: public static void ThrowIfCancellationRequested(this CancellationToken cancellationToken, Action cancelledCallback)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub ThrowIfCancellationRequested(cancellationToken As CancellationToken, cancelledCallback As Action)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    - id: cancelledCallback
      type: System.Action
      description: The cancelled callback.
  overload: Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions.ThrowIfCancellationRequested*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions.HandleCancellation``1(System.Threading.Tasks.Task{``0},System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions.HandleCancellation``1(System.Threading.Tasks.Task{``0},System.Threading.CancellationToken)
  id: HandleCancellation``1(System.Threading.Tasks.Task{``0},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions
  langs:
  - csharp
  - vb
  name: HandleCancellation<TResult>(Task<TResult>, CancellationToken)
  nameWithType: TaskExtensions.HandleCancellation<TResult>(Task<TResult>, CancellationToken)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions.HandleCancellation<TResult>(System.Threading.Tasks.Task<TResult>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/net/Client/TaskExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-media-services
    id: HandleCancellation
    path: src/azure-sdk-for-media-services/src/net/Client/TaskExtensions.cs
    startLine: 79
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  syntax:
    content: public static Task<TResult> HandleCancellation<TResult>(this Task<TResult> asyncTask, CancellationToken cancellationToken)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HandleCancellation(Of TResult)(asyncTask As Task(Of TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: asyncTask
      type: System.Threading.Tasks.Task{{TResult}}
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
  overload: Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions.HandleCancellation*
  nameWithType.vb: TaskExtensions.HandleCancellation(Of TResult)(Task(Of TResult), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions.HandleCancellation(Of TResult)(System.Threading.Tasks.Task(Of TResult), System.Threading.CancellationToken)
  name.vb: HandleCancellation(Of TResult)(Task(Of TResult), CancellationToken)
references:
- uid: Microsoft.WindowsAzure.MediaServices.Client
  commentId: N:Microsoft.WindowsAzure.MediaServices.Client
  isExternal: false
  name: Microsoft.WindowsAzure.MediaServices.Client
  nameWithType: Microsoft.WindowsAzure.MediaServices.Client
  fullName: Microsoft.WindowsAzure.MediaServices.Client
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions.ThrowIfFaulted*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions.ThrowIfFaulted
  isExternal: false
  name: ThrowIfFaulted
  nameWithType: TaskExtensions.ThrowIfFaulted
  fullName: Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions.ThrowIfFaulted
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions.ThrowIfCancellationRequested*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions.ThrowIfCancellationRequested
  isExternal: false
  name: ThrowIfCancellationRequested
  nameWithType: TaskExtensions.ThrowIfCancellationRequested
  fullName: Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions.ThrowIfCancellationRequested
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions.HandleCancellation*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions.HandleCancellation
  isExternal: false
  name: HandleCancellation<TResult>
  nameWithType: TaskExtensions.HandleCancellation<TResult>
  fullName: Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions.HandleCancellation<TResult>
  nameWithType.vb: TaskExtensions.HandleCancellation(Of TResult)
  fullname.vb: Microsoft.WindowsAzure.MediaServices.Client.TaskExtensions.HandleCancellation(Of TResult)
  name.vb: HandleCancellation(Of TResult)
- uid: System.Threading.Tasks.Task{{TResult}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
