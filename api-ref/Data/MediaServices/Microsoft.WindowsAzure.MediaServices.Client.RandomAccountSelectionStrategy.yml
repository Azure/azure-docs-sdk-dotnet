### YamlMime:ManagedReference
items:
- uid: Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy
  commentId: T:Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy
  id: RandomAccountSelectionStrategy
  parent: Microsoft.WindowsAzure.MediaServices.Client
  children:
  - Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy.#ctor(System.String[])
  - Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy.FromAccounts(Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase)
  - Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy.GetStorageAccounts
  - Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy.SelectAccountForAsset
  langs:
  - csharp
  - vb
  name: RandomAccountSelectionStrategy
  nameWithType: RandomAccountSelectionStrategy
  fullName: Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy
  type: Class
  source:
    remote:
      path: MediaServices.Client.Extensions/RandomAccountSelectionStrategy.cs
      branch: dev
      repo: https://github.com/Azure/azure-sdk-for-media-services-extensions
    id: RandomAccountSelectionStrategy
    path: src/azure-sdk-for-media-services-extensions/MediaServices.Client.Extensions/RandomAccountSelectionStrategy.cs
    startLine: 24
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Extensions
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nRepresents simple pseudo random account selection based on the <xref href=\"System.Random\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: 'public class RandomAccountSelectionStrategy : IAccountSelectionStrategy'
    content.vb: >-
      Public Class RandomAccountSelectionStrategy
          Implements IAccountSelectionStrategy
  inheritance:
  - System.Object
  implements:
  - Microsoft.WindowsAzure.MediaServices.Client.IAccountSelectionStrategy
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy.FromAccounts(Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase)
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy.FromAccounts(Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase)
  id: FromAccounts(Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase)
  parent: Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy
  langs:
  - csharp
  - vb
  name: FromAccounts(MediaContextBase)
  nameWithType: RandomAccountSelectionStrategy.FromAccounts(MediaContextBase)
  fullName: Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy.FromAccounts(Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase)
  type: Method
  source:
    remote:
      path: MediaServices.Client.Extensions/RandomAccountSelectionStrategy.cs
      branch: dev
      repo: https://github.com/Azure/azure-sdk-for-media-services-extensions
    id: FromAccounts
    path: src/azure-sdk-for-media-services-extensions/MediaServices.Client.Extensions/RandomAccountSelectionStrategy.cs
    startLine: 34
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Extensions
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nCreates a RandomAccountSelectionStrategy instance using all of storage account names found in the MediaContextBase.StorageAccounts collection.\n"
  example: []
  syntax:
    content: public static RandomAccountSelectionStrategy FromAccounts(MediaContextBase mediaContextBase)
    content.vb: Public Shared Function FromAccounts(mediaContextBase As MediaContextBase) As RandomAccountSelectionStrategy
    parameters:
    - id: mediaContextBase
      type: Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase
      description: MediaContextBase to use to query the storage account names from.
    return:
      type: Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy
      description: A new RandomAccountSelectionStrategy instance.
  overload: Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy.FromAccounts*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy.#ctor(System.String[])
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy.#ctor(System.String[])
  id: '#ctor(System.String[])'
  parent: Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy
  langs:
  - csharp
  - vb
  name: RandomAccountSelectionStrategy(String[])
  nameWithType: RandomAccountSelectionStrategy.RandomAccountSelectionStrategy(String[])
  fullName: Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy.RandomAccountSelectionStrategy(System.String[])
  type: Constructor
  source:
    remote:
      path: MediaServices.Client.Extensions/RandomAccountSelectionStrategy.cs
      branch: dev
      repo: https://github.com/Azure/azure-sdk-for-media-services-extensions
    id: .ctor
    path: src/azure-sdk-for-media-services-extensions/MediaServices.Client.Extensions/RandomAccountSelectionStrategy.cs
    startLine: 46
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Extensions
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nConstructs a new RandomAccountSelectionStrategy that will use a pseudo random selection based on the <xref href=\"System.Random\" data-throw-if-not-resolved=\"false\"></xref> class of the\nstorage account names provided.\n"
  example: []
  syntax:
    content: public RandomAccountSelectionStrategy(string[] storageAccountNames)
    content.vb: Public Sub New(storageAccountNames As String())
    parameters:
    - id: storageAccountNames
      type: System.String[]
      description: Array of storage account names to choose from.
  overload: Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy.#ctor*
  nameWithType.vb: RandomAccountSelectionStrategy.RandomAccountSelectionStrategy(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy.RandomAccountSelectionStrategy(System.String())
  name.vb: RandomAccountSelectionStrategy(String())
- uid: Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy.GetStorageAccounts
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy.GetStorageAccounts
  id: GetStorageAccounts
  parent: Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy
  langs:
  - csharp
  - vb
  name: GetStorageAccounts()
  nameWithType: RandomAccountSelectionStrategy.GetStorageAccounts()
  fullName: Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy.GetStorageAccounts()
  type: Method
  source:
    remote:
      path: MediaServices.Client.Extensions/RandomAccountSelectionStrategy.cs
      branch: dev
      repo: https://github.com/Azure/azure-sdk-for-media-services-extensions
    id: GetStorageAccounts
    path: src/azure-sdk-for-media-services-extensions/MediaServices.Client.Extensions/RandomAccountSelectionStrategy.cs
    startLine: 65
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Extensions
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  syntax:
    content: public IList<string> GetStorageAccounts()
    content.vb: Public Function GetStorageAccounts As IList(Of String)
    return:
      type: System.Collections.Generic.IList{System.String}
  overload: Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy.GetStorageAccounts*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy.SelectAccountForAsset
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy.SelectAccountForAsset
  id: SelectAccountForAsset
  parent: Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy
  langs:
  - csharp
  - vb
  name: SelectAccountForAsset()
  nameWithType: RandomAccountSelectionStrategy.SelectAccountForAsset()
  fullName: Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy.SelectAccountForAsset()
  type: Method
  source:
    remote:
      path: MediaServices.Client.Extensions/RandomAccountSelectionStrategy.cs
      branch: dev
      repo: https://github.com/Azure/azure-sdk-for-media-services-extensions
    id: SelectAccountForAsset
    path: src/azure-sdk-for-media-services-extensions/MediaServices.Client.Extensions/RandomAccountSelectionStrategy.cs
    startLine: 74
  assemblies:
  - Microsoft.WindowsAzure.MediaServices.Client.Extensions
  namespace: Microsoft.WindowsAzure.MediaServices.Client
  summary: "\nSelects a single storage account name from the storage account names provided when the class is constructed using a pseudo random selection based on the <xref href=\"System.Random\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public string SelectAccountForAsset()
    content.vb: Public Function SelectAccountForAsset As String
    return:
      type: System.String
      description: A single storage account name
  overload: Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy.SelectAccountForAsset*
  implements:
  - Microsoft.WindowsAzure.MediaServices.Client.IAccountSelectionStrategy.SelectAccountForAsset
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Random
  commentId: T:System.Random
  parent: System
  isExternal: true
  name: Random
  nameWithType: Random
  fullName: System.Random
- uid: Microsoft.WindowsAzure.MediaServices.Client
  commentId: N:Microsoft.WindowsAzure.MediaServices.Client
  isExternal: false
  name: Microsoft.WindowsAzure.MediaServices.Client
  nameWithType: Microsoft.WindowsAzure.MediaServices.Client
  fullName: Microsoft.WindowsAzure.MediaServices.Client
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAccountSelectionStrategy
  commentId: T:Microsoft.WindowsAzure.MediaServices.Client.IAccountSelectionStrategy
  parent: Microsoft.WindowsAzure.MediaServices.Client
  isExternal: false
  name: IAccountSelectionStrategy
  nameWithType: IAccountSelectionStrategy
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAccountSelectionStrategy
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy.FromAccounts*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy.FromAccounts
  isExternal: false
  name: FromAccounts
  nameWithType: RandomAccountSelectionStrategy.FromAccounts
  fullName: Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy.FromAccounts
- uid: Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase
  commentId: T:Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase
  parent: Microsoft.WindowsAzure.MediaServices.Client
  isExternal: false
  name: MediaContextBase
  nameWithType: MediaContextBase
  fullName: Microsoft.WindowsAzure.MediaServices.Client.MediaContextBase
- uid: Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy
  commentId: T:Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy
  parent: Microsoft.WindowsAzure.MediaServices.Client
  isExternal: false
  name: RandomAccountSelectionStrategy
  nameWithType: RandomAccountSelectionStrategy
  fullName: Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy
- uid: Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy.#ctor*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy.#ctor
  isExternal: false
  name: RandomAccountSelectionStrategy
  nameWithType: RandomAccountSelectionStrategy.RandomAccountSelectionStrategy
  fullName: Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy.RandomAccountSelectionStrategy
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy.GetStorageAccounts*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy.GetStorageAccounts
  isExternal: false
  name: GetStorageAccounts
  nameWithType: RandomAccountSelectionStrategy.GetStorageAccounts
  fullName: Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy.GetStorageAccounts
- uid: System.Collections.Generic.IList{System.String}
  commentId: T:System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  nameWithType.vb: IList(Of String)
  fullname.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy.SelectAccountForAsset*
  commentId: Overload:Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy.SelectAccountForAsset
  isExternal: false
  name: SelectAccountForAsset
  nameWithType: RandomAccountSelectionStrategy.SelectAccountForAsset
  fullName: Microsoft.WindowsAzure.MediaServices.Client.RandomAccountSelectionStrategy.SelectAccountForAsset
- uid: Microsoft.WindowsAzure.MediaServices.Client.IAccountSelectionStrategy.SelectAccountForAsset
  commentId: M:Microsoft.WindowsAzure.MediaServices.Client.IAccountSelectionStrategy.SelectAccountForAsset
  parent: Microsoft.WindowsAzure.MediaServices.Client.IAccountSelectionStrategy
  isExternal: false
  name: SelectAccountForAsset()
  nameWithType: IAccountSelectionStrategy.SelectAccountForAsset()
  fullName: Microsoft.WindowsAzure.MediaServices.Client.IAccountSelectionStrategy.SelectAccountForAsset()
  spec.csharp:
  - uid: Microsoft.WindowsAzure.MediaServices.Client.IAccountSelectionStrategy.SelectAccountForAsset
    name: SelectAccountForAsset
    nameWithType: IAccountSelectionStrategy.SelectAccountForAsset
    fullName: Microsoft.WindowsAzure.MediaServices.Client.IAccountSelectionStrategy.SelectAccountForAsset
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.WindowsAzure.MediaServices.Client.IAccountSelectionStrategy.SelectAccountForAsset
    name: SelectAccountForAsset
    nameWithType: IAccountSelectionStrategy.SelectAccountForAsset
    fullName: Microsoft.WindowsAzure.MediaServices.Client.IAccountSelectionStrategy.SelectAccountForAsset
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
