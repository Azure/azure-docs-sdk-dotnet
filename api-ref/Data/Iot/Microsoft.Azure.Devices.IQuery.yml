### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Devices.IQuery
  commentId: T:Microsoft.Azure.Devices.IQuery
  id: IQuery
  parent: Microsoft.Azure.Devices
  children:
  - Microsoft.Azure.Devices.IQuery.GetNextAsDeviceJobAsync
  - Microsoft.Azure.Devices.IQuery.GetNextAsJobResponseAsync
  - Microsoft.Azure.Devices.IQuery.GetNextAsJsonAsync
  - Microsoft.Azure.Devices.IQuery.GetNextAsTwinAsync
  - Microsoft.Azure.Devices.IQuery.HasMoreResults
  langs:
  - csharp
  - vb
  name: IQuery
  nameWithType: IQuery
  fullName: Microsoft.Azure.Devices.IQuery
  type: Interface
  source:
    remote:
      path: service/Microsoft.Azure.Devices/IQuery.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: IQuery
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/IQuery.cs
    startLine: 19
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  syntax:
    content: public interface IQuery
    content.vb: Public Interface IQuery
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.Azure.Devices.IQuery.HasMoreResults
  commentId: P:Microsoft.Azure.Devices.IQuery.HasMoreResults
  id: HasMoreResults
  parent: Microsoft.Azure.Devices.IQuery
  langs:
  - csharp
  - vb
  name: HasMoreResults
  nameWithType: IQuery.HasMoreResults
  fullName: Microsoft.Azure.Devices.IQuery.HasMoreResults
  type: Property
  source:
    remote:
      path: service/Microsoft.Azure.Devices/IQuery.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: HasMoreResults
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/IQuery.cs
    startLine: 24
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nIndicate if more results can be fetched\n"
  example: []
  syntax:
    content: bool HasMoreResults { get; }
    content.vb: ReadOnly Property HasMoreResults As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.Azure.Devices.IQuery.HasMoreResults*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.Azure.Devices.IQuery.GetNextAsTwinAsync
  commentId: M:Microsoft.Azure.Devices.IQuery.GetNextAsTwinAsync
  id: GetNextAsTwinAsync
  parent: Microsoft.Azure.Devices.IQuery
  langs:
  - csharp
  - vb
  name: GetNextAsTwinAsync()
  nameWithType: IQuery.GetNextAsTwinAsync()
  fullName: Microsoft.Azure.Devices.IQuery.GetNextAsTwinAsync()
  type: Method
  source:
    remote:
      path: service/Microsoft.Azure.Devices/IQuery.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: GetNextAsTwinAsync
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/IQuery.cs
    startLine: 26
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  syntax:
    content: Task<IEnumerable<Twin>> GetNextAsTwinAsync()
    content.vb: Function GetNextAsTwinAsync As Task(Of IEnumerable(Of Twin))
    return:
      type: Task{IEnumerable{Microsoft.Azure.Devices.Shared.Twin}}
  overload: Microsoft.Azure.Devices.IQuery.GetNextAsTwinAsync*
- uid: Microsoft.Azure.Devices.IQuery.GetNextAsDeviceJobAsync
  commentId: M:Microsoft.Azure.Devices.IQuery.GetNextAsDeviceJobAsync
  id: GetNextAsDeviceJobAsync
  parent: Microsoft.Azure.Devices.IQuery
  langs:
  - csharp
  - vb
  name: GetNextAsDeviceJobAsync()
  nameWithType: IQuery.GetNextAsDeviceJobAsync()
  fullName: Microsoft.Azure.Devices.IQuery.GetNextAsDeviceJobAsync()
  type: Method
  source:
    remote:
      path: service/Microsoft.Azure.Devices/IQuery.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: GetNextAsDeviceJobAsync
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/IQuery.cs
    startLine: 28
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  syntax:
    content: Task<IEnumerable<DeviceJob>> GetNextAsDeviceJobAsync()
    content.vb: Function GetNextAsDeviceJobAsync As Task(Of IEnumerable(Of DeviceJob))
    return:
      type: Task{IEnumerable{Microsoft.Azure.Devices.DeviceJob}}
  overload: Microsoft.Azure.Devices.IQuery.GetNextAsDeviceJobAsync*
- uid: Microsoft.Azure.Devices.IQuery.GetNextAsJobResponseAsync
  commentId: M:Microsoft.Azure.Devices.IQuery.GetNextAsJobResponseAsync
  id: GetNextAsJobResponseAsync
  parent: Microsoft.Azure.Devices.IQuery
  langs:
  - csharp
  - vb
  name: GetNextAsJobResponseAsync()
  nameWithType: IQuery.GetNextAsJobResponseAsync()
  fullName: Microsoft.Azure.Devices.IQuery.GetNextAsJobResponseAsync()
  type: Method
  source:
    remote:
      path: service/Microsoft.Azure.Devices/IQuery.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: GetNextAsJobResponseAsync
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/IQuery.cs
    startLine: 30
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  syntax:
    content: Task<IEnumerable<JobResponse>> GetNextAsJobResponseAsync()
    content.vb: Function GetNextAsJobResponseAsync As Task(Of IEnumerable(Of JobResponse))
    return:
      type: Task{IEnumerable{Microsoft.Azure.Devices.JobResponse}}
  overload: Microsoft.Azure.Devices.IQuery.GetNextAsJobResponseAsync*
- uid: Microsoft.Azure.Devices.IQuery.GetNextAsJsonAsync
  commentId: M:Microsoft.Azure.Devices.IQuery.GetNextAsJsonAsync
  id: GetNextAsJsonAsync
  parent: Microsoft.Azure.Devices.IQuery
  langs:
  - csharp
  - vb
  name: GetNextAsJsonAsync()
  nameWithType: IQuery.GetNextAsJsonAsync()
  fullName: Microsoft.Azure.Devices.IQuery.GetNextAsJsonAsync()
  type: Method
  source:
    remote:
      path: service/Microsoft.Azure.Devices/IQuery.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: GetNextAsJsonAsync
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/IQuery.cs
    startLine: 32
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  syntax:
    content: Task<IEnumerable<string>> GetNextAsJsonAsync()
    content.vb: Function GetNextAsJsonAsync As Task(Of IEnumerable(Of String))
    return:
      type: Task{IEnumerable{System.String}}
  overload: Microsoft.Azure.Devices.IQuery.GetNextAsJsonAsync*
references:
- uid: Microsoft.Azure.Devices
  commentId: N:Microsoft.Azure.Devices
  isExternal: false
  name: Microsoft.Azure.Devices
  nameWithType: Microsoft.Azure.Devices
  fullName: Microsoft.Azure.Devices
- uid: Microsoft.Azure.Devices.IQuery.HasMoreResults*
  commentId: Overload:Microsoft.Azure.Devices.IQuery.HasMoreResults
  isExternal: false
  name: HasMoreResults
  nameWithType: IQuery.HasMoreResults
  fullName: Microsoft.Azure.Devices.IQuery.HasMoreResults
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Devices.IQuery.GetNextAsTwinAsync*
  commentId: Overload:Microsoft.Azure.Devices.IQuery.GetNextAsTwinAsync
  isExternal: false
  name: GetNextAsTwinAsync
  nameWithType: IQuery.GetNextAsTwinAsync
  fullName: Microsoft.Azure.Devices.IQuery.GetNextAsTwinAsync
- uid: Task{IEnumerable{Microsoft.Azure.Devices.Shared.Twin}}
  commentId: '!:Task{IEnumerable{Microsoft.Azure.Devices.Shared.Twin}}'
  definition: Task`1
  name: Task<IEnumerable<Twin>>
  nameWithType: Task<IEnumerable<Twin>>
  fullName: Task<IEnumerable<Microsoft.Azure.Devices.Shared.Twin>>
  nameWithType.vb: Task(Of IEnumerable(Of Twin))
  fullname.vb: Task(Of IEnumerable(Of Microsoft.Azure.Devices.Shared.Twin))
  name.vb: Task(Of IEnumerable(Of Twin))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Devices.Shared.Twin
    name: Twin
    nameWithType: Twin
    fullName: Microsoft.Azure.Devices.Shared.Twin
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Devices.Shared.Twin
    name: Twin
    nameWithType: Twin
    fullName: Microsoft.Azure.Devices.Shared.Twin
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullname.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Devices.IQuery.GetNextAsDeviceJobAsync*
  commentId: Overload:Microsoft.Azure.Devices.IQuery.GetNextAsDeviceJobAsync
  isExternal: false
  name: GetNextAsDeviceJobAsync
  nameWithType: IQuery.GetNextAsDeviceJobAsync
  fullName: Microsoft.Azure.Devices.IQuery.GetNextAsDeviceJobAsync
- uid: Task{IEnumerable{Microsoft.Azure.Devices.DeviceJob}}
  commentId: '!:Task{IEnumerable{Microsoft.Azure.Devices.DeviceJob}}'
  definition: Task`1
  name: Task<IEnumerable<DeviceJob>>
  nameWithType: Task<IEnumerable<DeviceJob>>
  fullName: Task<IEnumerable<Microsoft.Azure.Devices.DeviceJob>>
  nameWithType.vb: Task(Of IEnumerable(Of DeviceJob))
  fullname.vb: Task(Of IEnumerable(Of Microsoft.Azure.Devices.DeviceJob))
  name.vb: Task(Of IEnumerable(Of DeviceJob))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Devices.DeviceJob
    name: DeviceJob
    nameWithType: DeviceJob
    fullName: Microsoft.Azure.Devices.DeviceJob
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Devices.DeviceJob
    name: DeviceJob
    nameWithType: DeviceJob
    fullName: Microsoft.Azure.Devices.DeviceJob
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Devices.IQuery.GetNextAsJobResponseAsync*
  commentId: Overload:Microsoft.Azure.Devices.IQuery.GetNextAsJobResponseAsync
  isExternal: false
  name: GetNextAsJobResponseAsync
  nameWithType: IQuery.GetNextAsJobResponseAsync
  fullName: Microsoft.Azure.Devices.IQuery.GetNextAsJobResponseAsync
- uid: Task{IEnumerable{Microsoft.Azure.Devices.JobResponse}}
  commentId: '!:Task{IEnumerable{Microsoft.Azure.Devices.JobResponse}}'
  definition: Task`1
  name: Task<IEnumerable<JobResponse>>
  nameWithType: Task<IEnumerable<JobResponse>>
  fullName: Task<IEnumerable<Microsoft.Azure.Devices.JobResponse>>
  nameWithType.vb: Task(Of IEnumerable(Of JobResponse))
  fullname.vb: Task(Of IEnumerable(Of Microsoft.Azure.Devices.JobResponse))
  name.vb: Task(Of IEnumerable(Of JobResponse))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Devices.JobResponse
    name: JobResponse
    nameWithType: JobResponse
    fullName: Microsoft.Azure.Devices.JobResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Devices.JobResponse
    name: JobResponse
    nameWithType: JobResponse
    fullName: Microsoft.Azure.Devices.JobResponse
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Devices.IQuery.GetNextAsJsonAsync*
  commentId: Overload:Microsoft.Azure.Devices.IQuery.GetNextAsJsonAsync
  isExternal: false
  name: GetNextAsJsonAsync
  nameWithType: IQuery.GetNextAsJsonAsync
  fullName: Microsoft.Azure.Devices.IQuery.GetNextAsJsonAsync
- uid: Task{IEnumerable{System.String}}
  commentId: '!:Task{IEnumerable{System.String}}'
  definition: Task`1
  name: Task<IEnumerable<String>>
  nameWithType: Task<IEnumerable<String>>
  fullName: Task<IEnumerable<System.String>>
  nameWithType.vb: Task(Of IEnumerable(Of String))
  fullname.vb: Task(Of IEnumerable(Of System.String))
  name.vb: Task(Of IEnumerable(Of String))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
