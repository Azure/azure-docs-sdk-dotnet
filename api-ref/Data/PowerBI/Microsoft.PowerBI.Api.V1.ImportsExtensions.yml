### YamlMime:ManagedReference
items:
- uid: Microsoft.PowerBI.Api.V1.ImportsExtensions
  commentId: T:Microsoft.PowerBI.Api.V1.ImportsExtensions
  id: ImportsExtensions
  parent: Microsoft.PowerBI.Api.V1
  children:
  - Microsoft.PowerBI.Api.V1.ImportsExtensions.GetImportById(Microsoft.PowerBI.Api.V1.IImports,System.String,System.String,System.String)
  - Microsoft.PowerBI.Api.V1.ImportsExtensions.GetImportByIdAsync(Microsoft.PowerBI.Api.V1.IImports,System.String,System.String,System.String,System.Threading.CancellationToken)
  - Microsoft.PowerBI.Api.V1.ImportsExtensions.GetImports(Microsoft.PowerBI.Api.V1.IImports,System.String,System.String)
  - Microsoft.PowerBI.Api.V1.ImportsExtensions.GetImportsAsync(Microsoft.PowerBI.Api.V1.IImports,System.String,System.String,System.Threading.CancellationToken)
  - Microsoft.PowerBI.Api.V1.ImportsExtensions.PostImport(Microsoft.PowerBI.Api.V1.IImports,System.String,System.String,System.String,Microsoft.PowerBI.Api.V1.Models.ImportInfo,System.String)
  - Microsoft.PowerBI.Api.V1.ImportsExtensions.PostImportAsync(Microsoft.PowerBI.Api.V1.IImports,System.String,System.String,System.String,Microsoft.PowerBI.Api.V1.Models.ImportInfo,System.String,System.Threading.CancellationToken)
  - Microsoft.PowerBI.Api.V1.ImportsExtensions.PostImportWithFile(Microsoft.PowerBI.Api.V1.IImports,System.String,System.String,System.IO.Stream,System.String,System.String)
  - Microsoft.PowerBI.Api.V1.ImportsExtensions.PostImportWithFileAsync(Microsoft.PowerBI.Api.V1.IImports,System.String,System.String,System.IO.Stream,System.String,System.String,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: ImportsExtensions
  nameWithType: ImportsExtensions
  fullName: Microsoft.PowerBI.Api.V1.ImportsExtensions
  type: Class
  source:
    remote:
      path: sdk/PowerBI.Api/Source/ImportsExtensions.cs
      branch: master
      repo: https://github.com/Microsoft/PowerBI-CSharp
    id: ImportsExtensions
    path: src/PowerBI-CSharp/sdk/PowerBI.Api/Source/ImportsExtensions.cs
    startLine: 17
  assemblies:
  - Microsoft.PowerBI.Api
  namespace: Microsoft.PowerBI.Api.V1
  summary: "\nExtension methods for Imports.\n"
  example: []
  syntax:
    content: public static class ImportsExtensions
    content.vb: Public Module ImportsExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.PowerBI.Api.V1.ImportsExtensions.PostImportWithFile(Microsoft.PowerBI.Api.V1.IImports,System.String,System.String,System.IO.Stream,System.String,System.String)
  commentId: M:Microsoft.PowerBI.Api.V1.ImportsExtensions.PostImportWithFile(Microsoft.PowerBI.Api.V1.IImports,System.String,System.String,System.IO.Stream,System.String,System.String)
  id: PostImportWithFile(Microsoft.PowerBI.Api.V1.IImports,System.String,System.String,System.IO.Stream,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.PowerBI.Api.V1.ImportsExtensions
  langs:
  - csharp
  - vb
  name: PostImportWithFile(IImports, String, String, Stream, String, String)
  nameWithType: ImportsExtensions.PostImportWithFile(IImports, String, String, Stream, String, String)
  fullName: Microsoft.PowerBI.Api.V1.ImportsExtensions.PostImportWithFile(Microsoft.PowerBI.Api.V1.IImports, System.String, System.String, System.IO.Stream, System.String, System.String)
  type: Method
  source:
    remote:
      path: sdk/PowerBI.Api/Imports/ImportsExtensions.cs
      branch: master
      repo: https://github.com/Microsoft/PowerBI-CSharp
    id: PostImportWithFile
    path: src/PowerBI-CSharp/sdk/PowerBI.Api/Imports/ImportsExtensions.cs
    startLine: 30
  assemblies:
  - Microsoft.PowerBI.Api
  namespace: Microsoft.PowerBI.Api.V1
  summary: "\nUploads a PBIX file to the specified workspace\n"
  example: []
  syntax:
    content: public static Import PostImportWithFile(this IImports operations, string collectionName, string workspaceId, Stream fileStream, string datasetDisplayName = null, string nameConflict = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function PostImportWithFile(operations As IImports, collectionName As String, workspaceId As String, fileStream As Stream, datasetDisplayName As String = Nothing, nameConflict As String = Nothing) As Import
    parameters:
    - id: operations
      type: Microsoft.PowerBI.Api.V1.IImports
      description: "\nThe import operations\n"
    - id: collectionName
      type: System.String
      description: "\nThe workspace collection name\n"
    - id: workspaceId
      type: System.String
      description: "\nThe workspace id\n"
    - id: fileStream
      type: System.IO.Stream
      description: "\nThe PBIX file to import\n"
    - id: datasetDisplayName
      type: System.String
      description: "\nThe dataset display name\n"
    - id: nameConflict
      type: System.String
      description: "\nWhether to overwrite dataset during conflicts\n"
    return:
      type: Microsoft.PowerBI.Api.V1.Models.Import
  overload: Microsoft.PowerBI.Api.V1.ImportsExtensions.PostImportWithFile*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.PowerBI.Api.V1.ImportsExtensions.PostImportWithFileAsync(Microsoft.PowerBI.Api.V1.IImports,System.String,System.String,System.IO.Stream,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.PowerBI.Api.V1.ImportsExtensions.PostImportWithFileAsync(Microsoft.PowerBI.Api.V1.IImports,System.String,System.String,System.IO.Stream,System.String,System.String,System.Threading.CancellationToken)
  id: PostImportWithFileAsync(Microsoft.PowerBI.Api.V1.IImports,System.String,System.String,System.IO.Stream,System.String,System.String,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.PowerBI.Api.V1.ImportsExtensions
  langs:
  - csharp
  - vb
  name: PostImportWithFileAsync(IImports, String, String, Stream, String, String, CancellationToken)
  nameWithType: ImportsExtensions.PostImportWithFileAsync(IImports, String, String, Stream, String, String, CancellationToken)
  fullName: Microsoft.PowerBI.Api.V1.ImportsExtensions.PostImportWithFileAsync(Microsoft.PowerBI.Api.V1.IImports, System.String, System.String, System.IO.Stream, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: sdk/PowerBI.Api/Imports/ImportsExtensions.cs
      branch: master
      repo: https://github.com/Microsoft/PowerBI-CSharp
    id: PostImportWithFileAsync
    path: src/PowerBI-CSharp/sdk/PowerBI.Api/Imports/ImportsExtensions.cs
    startLine: 60
  assemblies:
  - Microsoft.PowerBI.Api
  namespace: Microsoft.PowerBI.Api.V1
  summary: "\nUploads a PBIX file to the specified workspace\n"
  example: []
  syntax:
    content: public static Task<Import> PostImportWithFileAsync(this IImports operations, string collectionName, string workspaceId, Stream fileStream, string datasetDisplayName = null, string nameConflict = null, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function PostImportWithFileAsync(operations As IImports, collectionName As String, workspaceId As String, fileStream As Stream, datasetDisplayName As String = Nothing, nameConflict As String = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of Import)
    parameters:
    - id: operations
      type: Microsoft.PowerBI.Api.V1.IImports
      description: "\nThe import operations\n"
    - id: collectionName
      type: System.String
      description: "\nThe workspace collection name\n"
    - id: workspaceId
      type: System.String
      description: "\nThe workspace id\n"
    - id: fileStream
      type: System.IO.Stream
      description: "\nThe PBIX file to import\n"
    - id: datasetDisplayName
      type: System.String
      description: "\nThe dataset display name\n"
    - id: nameConflict
      type: System.String
      description: "\nWhether to overwrite dataset during conflicts\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nThe cancellation token.\n"
    return:
      type: System.Threading.Tasks.Task{Microsoft.PowerBI.Api.V1.Models.Import}
  overload: Microsoft.PowerBI.Api.V1.ImportsExtensions.PostImportWithFileAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.PowerBI.Api.V1.ImportsExtensions.GetImports(Microsoft.PowerBI.Api.V1.IImports,System.String,System.String)
  commentId: M:Microsoft.PowerBI.Api.V1.ImportsExtensions.GetImports(Microsoft.PowerBI.Api.V1.IImports,System.String,System.String)
  id: GetImports(Microsoft.PowerBI.Api.V1.IImports,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.PowerBI.Api.V1.ImportsExtensions
  langs:
  - csharp
  - vb
  name: GetImports(IImports, String, String)
  nameWithType: ImportsExtensions.GetImports(IImports, String, String)
  fullName: Microsoft.PowerBI.Api.V1.ImportsExtensions.GetImports(Microsoft.PowerBI.Api.V1.IImports, System.String, System.String)
  type: Method
  source:
    remote:
      path: sdk/PowerBI.Api/Source/ImportsExtensions.cs
      branch: master
      repo: https://github.com/Microsoft/PowerBI-CSharp
    id: GetImports
    path: src/PowerBI-CSharp/sdk/PowerBI.Api/Source/ImportsExtensions.cs
    startLine: 31
  assemblies:
  - Microsoft.PowerBI.Api
  namespace: Microsoft.PowerBI.Api.V1
  summary: "\nReturns a list of imports for the specified workspace\n"
  example: []
  syntax:
    content: public static ODataResponseListImport GetImports(this IImports operations, string collectionName, string workspaceId)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetImports(operations As IImports, collectionName As String, workspaceId As String) As ODataResponseListImport
    parameters:
    - id: operations
      type: Microsoft.PowerBI.Api.V1.IImports
      description: "\nThe operations group for this extension method.\n"
    - id: collectionName
      type: System.String
      description: "\nThe workspace collection name\n"
    - id: workspaceId
      type: System.String
      description: "\nThe workspace id\n"
    return:
      type: Microsoft.PowerBI.Api.V1.Models.ODataResponseListImport
  overload: Microsoft.PowerBI.Api.V1.ImportsExtensions.GetImports*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.PowerBI.Api.V1.ImportsExtensions.GetImportsAsync(Microsoft.PowerBI.Api.V1.IImports,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.PowerBI.Api.V1.ImportsExtensions.GetImportsAsync(Microsoft.PowerBI.Api.V1.IImports,System.String,System.String,System.Threading.CancellationToken)
  id: GetImportsAsync(Microsoft.PowerBI.Api.V1.IImports,System.String,System.String,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.PowerBI.Api.V1.ImportsExtensions
  langs:
  - csharp
  - vb
  name: GetImportsAsync(IImports, String, String, CancellationToken)
  nameWithType: ImportsExtensions.GetImportsAsync(IImports, String, String, CancellationToken)
  fullName: Microsoft.PowerBI.Api.V1.ImportsExtensions.GetImportsAsync(Microsoft.PowerBI.Api.V1.IImports, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: sdk/PowerBI.Api/Source/ImportsExtensions.cs
      branch: master
      repo: https://github.com/Microsoft/PowerBI-CSharp
    id: GetImportsAsync
    path: src/PowerBI-CSharp/sdk/PowerBI.Api/Source/ImportsExtensions.cs
    startLine: 51
  assemblies:
  - Microsoft.PowerBI.Api
  namespace: Microsoft.PowerBI.Api.V1
  summary: "\nReturns a list of imports for the specified workspace\n"
  example: []
  syntax:
    content: public static Task<ODataResponseListImport> GetImportsAsync(this IImports operations, string collectionName, string workspaceId, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetImportsAsync(operations As IImports, collectionName As String, workspaceId As String, cancellationToken As CancellationToken = Nothing) As Task(Of ODataResponseListImport)
    parameters:
    - id: operations
      type: Microsoft.PowerBI.Api.V1.IImports
      description: "\nThe operations group for this extension method.\n"
    - id: collectionName
      type: System.String
      description: "\nThe workspace collection name\n"
    - id: workspaceId
      type: System.String
      description: "\nThe workspace id\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nThe cancellation token.\n"
    return:
      type: System.Threading.Tasks.Task{Microsoft.PowerBI.Api.V1.Models.ODataResponseListImport}
  overload: Microsoft.PowerBI.Api.V1.ImportsExtensions.GetImportsAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.PowerBI.Api.V1.ImportsExtensions.PostImport(Microsoft.PowerBI.Api.V1.IImports,System.String,System.String,System.String,Microsoft.PowerBI.Api.V1.Models.ImportInfo,System.String)
  commentId: M:Microsoft.PowerBI.Api.V1.ImportsExtensions.PostImport(Microsoft.PowerBI.Api.V1.IImports,System.String,System.String,System.String,Microsoft.PowerBI.Api.V1.Models.ImportInfo,System.String)
  id: PostImport(Microsoft.PowerBI.Api.V1.IImports,System.String,System.String,System.String,Microsoft.PowerBI.Api.V1.Models.ImportInfo,System.String)
  isExtensionMethod: true
  parent: Microsoft.PowerBI.Api.V1.ImportsExtensions
  langs:
  - csharp
  - vb
  name: PostImport(IImports, String, String, String, ImportInfo, String)
  nameWithType: ImportsExtensions.PostImport(IImports, String, String, String, ImportInfo, String)
  fullName: Microsoft.PowerBI.Api.V1.ImportsExtensions.PostImport(Microsoft.PowerBI.Api.V1.IImports, System.String, System.String, System.String, Microsoft.PowerBI.Api.V1.Models.ImportInfo, System.String)
  type: Method
  source:
    remote:
      path: sdk/PowerBI.Api/Source/ImportsExtensions.cs
      branch: master
      repo: https://github.com/Microsoft/PowerBI-CSharp
    id: PostImport
    path: src/PowerBI-CSharp/sdk/PowerBI.Api/Source/ImportsExtensions.cs
    startLine: 80
  assemblies:
  - Microsoft.PowerBI.Api
  namespace: Microsoft.PowerBI.Api.V1
  summary: "\nCreates a new import using the specified import info\n"
  example: []
  syntax:
    content: public static Import PostImport(this IImports operations, string collectionName, string workspaceId, string datasetDisplayName, ImportInfo importInfo, string nameConflict = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function PostImport(operations As IImports, collectionName As String, workspaceId As String, datasetDisplayName As String, importInfo As ImportInfo, nameConflict As String = Nothing) As Import
    parameters:
    - id: operations
      type: Microsoft.PowerBI.Api.V1.IImports
      description: "\nThe operations group for this extension method.\n"
    - id: collectionName
      type: System.String
      description: "\nThe workspace collection name\n"
    - id: workspaceId
      type: System.String
      description: "\nThe workspace id\n"
    - id: datasetDisplayName
      type: System.String
      description: "\nThe display name of the dataset\n"
    - id: importInfo
      type: Microsoft.PowerBI.Api.V1.Models.ImportInfo
      description: "\nThe import to post\n"
    - id: nameConflict
      type: System.String
      description: "\nDetermines what to do if a dataset with the same name already exists\n"
    return:
      type: Microsoft.PowerBI.Api.V1.Models.Import
  overload: Microsoft.PowerBI.Api.V1.ImportsExtensions.PostImport*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.PowerBI.Api.V1.ImportsExtensions.PostImportAsync(Microsoft.PowerBI.Api.V1.IImports,System.String,System.String,System.String,Microsoft.PowerBI.Api.V1.Models.ImportInfo,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.PowerBI.Api.V1.ImportsExtensions.PostImportAsync(Microsoft.PowerBI.Api.V1.IImports,System.String,System.String,System.String,Microsoft.PowerBI.Api.V1.Models.ImportInfo,System.String,System.Threading.CancellationToken)
  id: PostImportAsync(Microsoft.PowerBI.Api.V1.IImports,System.String,System.String,System.String,Microsoft.PowerBI.Api.V1.Models.ImportInfo,System.String,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.PowerBI.Api.V1.ImportsExtensions
  langs:
  - csharp
  - vb
  name: PostImportAsync(IImports, String, String, String, ImportInfo, String, CancellationToken)
  nameWithType: ImportsExtensions.PostImportAsync(IImports, String, String, String, ImportInfo, String, CancellationToken)
  fullName: Microsoft.PowerBI.Api.V1.ImportsExtensions.PostImportAsync(Microsoft.PowerBI.Api.V1.IImports, System.String, System.String, System.String, Microsoft.PowerBI.Api.V1.Models.ImportInfo, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: sdk/PowerBI.Api/Source/ImportsExtensions.cs
      branch: master
      repo: https://github.com/Microsoft/PowerBI-CSharp
    id: PostImportAsync
    path: src/PowerBI-CSharp/sdk/PowerBI.Api/Source/ImportsExtensions.cs
    startLine: 109
  assemblies:
  - Microsoft.PowerBI.Api
  namespace: Microsoft.PowerBI.Api.V1
  summary: "\nCreates a new import using the specified import info\n"
  example: []
  syntax:
    content: public static Task<Import> PostImportAsync(this IImports operations, string collectionName, string workspaceId, string datasetDisplayName, ImportInfo importInfo, string nameConflict = null, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function PostImportAsync(operations As IImports, collectionName As String, workspaceId As String, datasetDisplayName As String, importInfo As ImportInfo, nameConflict As String = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of Import)
    parameters:
    - id: operations
      type: Microsoft.PowerBI.Api.V1.IImports
      description: "\nThe operations group for this extension method.\n"
    - id: collectionName
      type: System.String
      description: "\nThe workspace collection name\n"
    - id: workspaceId
      type: System.String
      description: "\nThe workspace id\n"
    - id: datasetDisplayName
      type: System.String
      description: "\nThe display name of the dataset\n"
    - id: importInfo
      type: Microsoft.PowerBI.Api.V1.Models.ImportInfo
      description: "\nThe import to post\n"
    - id: nameConflict
      type: System.String
      description: "\nDetermines what to do if a dataset with the same name already exists\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nThe cancellation token.\n"
    return:
      type: System.Threading.Tasks.Task{Microsoft.PowerBI.Api.V1.Models.Import}
  overload: Microsoft.PowerBI.Api.V1.ImportsExtensions.PostImportAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.PowerBI.Api.V1.ImportsExtensions.GetImportById(Microsoft.PowerBI.Api.V1.IImports,System.String,System.String,System.String)
  commentId: M:Microsoft.PowerBI.Api.V1.ImportsExtensions.GetImportById(Microsoft.PowerBI.Api.V1.IImports,System.String,System.String,System.String)
  id: GetImportById(Microsoft.PowerBI.Api.V1.IImports,System.String,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.PowerBI.Api.V1.ImportsExtensions
  langs:
  - csharp
  - vb
  name: GetImportById(IImports, String, String, String)
  nameWithType: ImportsExtensions.GetImportById(IImports, String, String, String)
  fullName: Microsoft.PowerBI.Api.V1.ImportsExtensions.GetImportById(Microsoft.PowerBI.Api.V1.IImports, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: sdk/PowerBI.Api/Source/ImportsExtensions.cs
      branch: master
      repo: https://github.com/Microsoft/PowerBI-CSharp
    id: GetImportById
    path: src/PowerBI-CSharp/sdk/PowerBI.Api/Source/ImportsExtensions.cs
    startLine: 132
  assemblies:
  - Microsoft.PowerBI.Api
  namespace: Microsoft.PowerBI.Api.V1
  summary: "\nGets the import metadata for the specifed import id\n"
  example: []
  syntax:
    content: public static Import GetImportById(this IImports operations, string collectionName, string workspaceId, string importId)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetImportById(operations As IImports, collectionName As String, workspaceId As String, importId As String) As Import
    parameters:
    - id: operations
      type: Microsoft.PowerBI.Api.V1.IImports
      description: "\nThe operations group for this extension method.\n"
    - id: collectionName
      type: System.String
      description: "\nThe workspace collection name\n"
    - id: workspaceId
      type: System.String
      description: "\nThe workspace id\n"
    - id: importId
      type: System.String
      description: "\nThe import id\n"
    return:
      type: Microsoft.PowerBI.Api.V1.Models.Import
  overload: Microsoft.PowerBI.Api.V1.ImportsExtensions.GetImportById*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.PowerBI.Api.V1.ImportsExtensions.GetImportByIdAsync(Microsoft.PowerBI.Api.V1.IImports,System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.PowerBI.Api.V1.ImportsExtensions.GetImportByIdAsync(Microsoft.PowerBI.Api.V1.IImports,System.String,System.String,System.String,System.Threading.CancellationToken)
  id: GetImportByIdAsync(Microsoft.PowerBI.Api.V1.IImports,System.String,System.String,System.String,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.PowerBI.Api.V1.ImportsExtensions
  langs:
  - csharp
  - vb
  name: GetImportByIdAsync(IImports, String, String, String, CancellationToken)
  nameWithType: ImportsExtensions.GetImportByIdAsync(IImports, String, String, String, CancellationToken)
  fullName: Microsoft.PowerBI.Api.V1.ImportsExtensions.GetImportByIdAsync(Microsoft.PowerBI.Api.V1.IImports, System.String, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: sdk/PowerBI.Api/Source/ImportsExtensions.cs
      branch: master
      repo: https://github.com/Microsoft/PowerBI-CSharp
    id: GetImportByIdAsync
    path: src/PowerBI-CSharp/sdk/PowerBI.Api/Source/ImportsExtensions.cs
    startLine: 155
  assemblies:
  - Microsoft.PowerBI.Api
  namespace: Microsoft.PowerBI.Api.V1
  summary: "\nGets the import metadata for the specifed import id\n"
  example: []
  syntax:
    content: public static Task<Import> GetImportByIdAsync(this IImports operations, string collectionName, string workspaceId, string importId, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetImportByIdAsync(operations As IImports, collectionName As String, workspaceId As String, importId As String, cancellationToken As CancellationToken = Nothing) As Task(Of Import)
    parameters:
    - id: operations
      type: Microsoft.PowerBI.Api.V1.IImports
      description: "\nThe operations group for this extension method.\n"
    - id: collectionName
      type: System.String
      description: "\nThe workspace collection name\n"
    - id: workspaceId
      type: System.String
      description: "\nThe workspace id\n"
    - id: importId
      type: System.String
      description: "\nThe import id\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nThe cancellation token.\n"
    return:
      type: System.Threading.Tasks.Task{Microsoft.PowerBI.Api.V1.Models.Import}
  overload: Microsoft.PowerBI.Api.V1.ImportsExtensions.GetImportByIdAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.PowerBI.Api.V1
  commentId: N:Microsoft.PowerBI.Api.V1
  isExternal: false
  name: Microsoft.PowerBI.Api.V1
  nameWithType: Microsoft.PowerBI.Api.V1
  fullName: Microsoft.PowerBI.Api.V1
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.PowerBI.Api.V1.ImportsExtensions.PostImportWithFile*
  commentId: Overload:Microsoft.PowerBI.Api.V1.ImportsExtensions.PostImportWithFile
  isExternal: false
  name: PostImportWithFile
  nameWithType: ImportsExtensions.PostImportWithFile
  fullName: Microsoft.PowerBI.Api.V1.ImportsExtensions.PostImportWithFile
- uid: Microsoft.PowerBI.Api.V1.IImports
  commentId: T:Microsoft.PowerBI.Api.V1.IImports
  parent: Microsoft.PowerBI.Api.V1
  isExternal: false
  name: IImports
  nameWithType: IImports
  fullName: Microsoft.PowerBI.Api.V1.IImports
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: Microsoft.PowerBI.Api.V1.Models.Import
  commentId: T:Microsoft.PowerBI.Api.V1.Models.Import
  parent: Microsoft.PowerBI.Api.V1.Models
  isExternal: false
  name: Import
  nameWithType: Import
  fullName: Microsoft.PowerBI.Api.V1.Models.Import
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Microsoft.PowerBI.Api.V1.Models
  commentId: N:Microsoft.PowerBI.Api.V1.Models
  isExternal: false
  name: Microsoft.PowerBI.Api.V1.Models
  nameWithType: Microsoft.PowerBI.Api.V1.Models
  fullName: Microsoft.PowerBI.Api.V1.Models
- uid: Microsoft.PowerBI.Api.V1.ImportsExtensions.PostImportWithFileAsync*
  commentId: Overload:Microsoft.PowerBI.Api.V1.ImportsExtensions.PostImportWithFileAsync
  isExternal: false
  name: PostImportWithFileAsync
  nameWithType: ImportsExtensions.PostImportWithFileAsync
  fullName: Microsoft.PowerBI.Api.V1.ImportsExtensions.PostImportWithFileAsync
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{Microsoft.PowerBI.Api.V1.Models.Import}
  commentId: T:System.Threading.Tasks.Task{Microsoft.PowerBI.Api.V1.Models.Import}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Import>
  nameWithType: Task<Import>
  fullName: System.Threading.Tasks.Task<Microsoft.PowerBI.Api.V1.Models.Import>
  nameWithType.vb: Task(Of Import)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.PowerBI.Api.V1.Models.Import)
  name.vb: Task(Of Import)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.PowerBI.Api.V1.Models.Import
    name: Import
    nameWithType: Import
    fullName: Microsoft.PowerBI.Api.V1.Models.Import
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.PowerBI.Api.V1.Models.Import
    name: Import
    nameWithType: Import
    fullName: Microsoft.PowerBI.Api.V1.Models.Import
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.PowerBI.Api.V1.ImportsExtensions.GetImports*
  commentId: Overload:Microsoft.PowerBI.Api.V1.ImportsExtensions.GetImports
  isExternal: false
  name: GetImports
  nameWithType: ImportsExtensions.GetImports
  fullName: Microsoft.PowerBI.Api.V1.ImportsExtensions.GetImports
- uid: Microsoft.PowerBI.Api.V1.Models.ODataResponseListImport
  commentId: T:Microsoft.PowerBI.Api.V1.Models.ODataResponseListImport
  parent: Microsoft.PowerBI.Api.V1.Models
  isExternal: false
  name: ODataResponseListImport
  nameWithType: ODataResponseListImport
  fullName: Microsoft.PowerBI.Api.V1.Models.ODataResponseListImport
- uid: Microsoft.PowerBI.Api.V1.ImportsExtensions.GetImportsAsync*
  commentId: Overload:Microsoft.PowerBI.Api.V1.ImportsExtensions.GetImportsAsync
  isExternal: false
  name: GetImportsAsync
  nameWithType: ImportsExtensions.GetImportsAsync
  fullName: Microsoft.PowerBI.Api.V1.ImportsExtensions.GetImportsAsync
- uid: System.Threading.Tasks.Task{Microsoft.PowerBI.Api.V1.Models.ODataResponseListImport}
  commentId: T:System.Threading.Tasks.Task{Microsoft.PowerBI.Api.V1.Models.ODataResponseListImport}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ODataResponseListImport>
  nameWithType: Task<ODataResponseListImport>
  fullName: System.Threading.Tasks.Task<Microsoft.PowerBI.Api.V1.Models.ODataResponseListImport>
  nameWithType.vb: Task(Of ODataResponseListImport)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.PowerBI.Api.V1.Models.ODataResponseListImport)
  name.vb: Task(Of ODataResponseListImport)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.PowerBI.Api.V1.Models.ODataResponseListImport
    name: ODataResponseListImport
    nameWithType: ODataResponseListImport
    fullName: Microsoft.PowerBI.Api.V1.Models.ODataResponseListImport
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.PowerBI.Api.V1.Models.ODataResponseListImport
    name: ODataResponseListImport
    nameWithType: ODataResponseListImport
    fullName: Microsoft.PowerBI.Api.V1.Models.ODataResponseListImport
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.PowerBI.Api.V1.ImportsExtensions.PostImport*
  commentId: Overload:Microsoft.PowerBI.Api.V1.ImportsExtensions.PostImport
  isExternal: false
  name: PostImport
  nameWithType: ImportsExtensions.PostImport
  fullName: Microsoft.PowerBI.Api.V1.ImportsExtensions.PostImport
- uid: Microsoft.PowerBI.Api.V1.Models.ImportInfo
  commentId: T:Microsoft.PowerBI.Api.V1.Models.ImportInfo
  parent: Microsoft.PowerBI.Api.V1.Models
  isExternal: false
  name: ImportInfo
  nameWithType: ImportInfo
  fullName: Microsoft.PowerBI.Api.V1.Models.ImportInfo
- uid: Microsoft.PowerBI.Api.V1.ImportsExtensions.PostImportAsync*
  commentId: Overload:Microsoft.PowerBI.Api.V1.ImportsExtensions.PostImportAsync
  isExternal: false
  name: PostImportAsync
  nameWithType: ImportsExtensions.PostImportAsync
  fullName: Microsoft.PowerBI.Api.V1.ImportsExtensions.PostImportAsync
- uid: Microsoft.PowerBI.Api.V1.ImportsExtensions.GetImportById*
  commentId: Overload:Microsoft.PowerBI.Api.V1.ImportsExtensions.GetImportById
  isExternal: false
  name: GetImportById
  nameWithType: ImportsExtensions.GetImportById
  fullName: Microsoft.PowerBI.Api.V1.ImportsExtensions.GetImportById
- uid: Microsoft.PowerBI.Api.V1.ImportsExtensions.GetImportByIdAsync*
  commentId: Overload:Microsoft.PowerBI.Api.V1.ImportsExtensions.GetImportByIdAsync
  isExternal: false
  name: GetImportByIdAsync
  nameWithType: ImportsExtensions.GetImportByIdAsync
  fullName: Microsoft.PowerBI.Api.V1.ImportsExtensions.GetImportByIdAsync
