### YamlMime:ManagedReference
items:
- uid: Microsoft.PowerBI.Security.TokenManager
  commentId: T:Microsoft.PowerBI.Security.TokenManager
  id: TokenManager
  parent: Microsoft.PowerBI.Security
  children:
  - Microsoft.PowerBI.Security.TokenManager.Clear
  - Microsoft.PowerBI.Security.TokenManager.Current
  - Microsoft.PowerBI.Security.TokenManager.ReadToken(System.Security.Principal.IIdentity)
  - Microsoft.PowerBI.Security.TokenManager.SetTokenReader(System.Func{System.Security.Principal.IIdentity,System.String})
  - Microsoft.PowerBI.Security.TokenManager.SetTokenWriter(System.Action{System.Security.Principal.IIdentity,System.String})
  - Microsoft.PowerBI.Security.TokenManager.WriteToken(System.Security.Principal.IIdentity,System.String)
  langs:
  - csharp
  - vb
  name: TokenManager
  nameWithType: TokenManager
  fullName: Microsoft.PowerBI.Security.TokenManager
  type: Class
  source:
    remote:
      path: sdk/PowerBI.Core/Security/TokenManager.cs
      branch: master
      repo: https://github.com/Microsoft/PowerBI-CSharp
    id: TokenManager
    path: src/PowerBI-CSharp/sdk/PowerBI.Core/Security/TokenManager.cs
    startLine: 9
  assemblies:
  - Microsoft.PowerBI.Core
  namespace: Microsoft.PowerBI.Security
  summary: "\nManages reading / storing tokens for use in the Power BI service\n"
  example: []
  syntax:
    content: public class TokenManager
    content.vb: Public Class TokenManager
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.PowerBI.Security.TokenManager.WriteToken(System.Security.Principal.IIdentity,System.String)
  commentId: M:Microsoft.PowerBI.Security.TokenManager.WriteToken(System.Security.Principal.IIdentity,System.String)
  id: WriteToken(System.Security.Principal.IIdentity,System.String)
  parent: Microsoft.PowerBI.Security.TokenManager
  langs:
  - csharp
  - vb
  name: WriteToken(IIdentity, String)
  nameWithType: TokenManager.WriteToken(IIdentity, String)
  fullName: Microsoft.PowerBI.Security.TokenManager.WriteToken(System.Security.Principal.IIdentity, System.String)
  type: Method
  source:
    remote:
      path: sdk/PowerBI.Core/Security/TokenManager.cs
      branch: master
      repo: https://github.com/Microsoft/PowerBI-CSharp
    id: WriteToken
    path: src/PowerBI-CSharp/sdk/PowerBI.Core/Security/TokenManager.cs
    startLine: 45
  assemblies:
  - Microsoft.PowerBI.Core
  namespace: Microsoft.PowerBI.Security
  summary: "\nStores a Power BI token and associates it with the specified identity\n"
  example: []
  syntax:
    content: public void WriteToken(IIdentity identity, string accessToken)
    content.vb: Public Sub WriteToken(identity As IIdentity, accessToken As String)
    parameters:
    - id: identity
      type: System.Security.Principal.IIdentity
      description: ''
    - id: accessToken
      type: System.String
      description: ''
  overload: Microsoft.PowerBI.Security.TokenManager.WriteToken*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.PowerBI.Security.TokenManager.ReadToken(System.Security.Principal.IIdentity)
  commentId: M:Microsoft.PowerBI.Security.TokenManager.ReadToken(System.Security.Principal.IIdentity)
  id: ReadToken(System.Security.Principal.IIdentity)
  parent: Microsoft.PowerBI.Security.TokenManager
  langs:
  - csharp
  - vb
  name: ReadToken(IIdentity)
  nameWithType: TokenManager.ReadToken(IIdentity)
  fullName: Microsoft.PowerBI.Security.TokenManager.ReadToken(System.Security.Principal.IIdentity)
  type: Method
  source:
    remote:
      path: sdk/PowerBI.Core/Security/TokenManager.cs
      branch: master
      repo: https://github.com/Microsoft/PowerBI-CSharp
    id: ReadToken
    path: src/PowerBI-CSharp/sdk/PowerBI.Core/Security/TokenManager.cs
    startLine: 58
  assemblies:
  - Microsoft.PowerBI.Core
  namespace: Microsoft.PowerBI.Security
  summary: "\nReads the Power BI token for the specified identity\n"
  example: []
  syntax:
    content: public string ReadToken(IIdentity identity)
    content.vb: Public Function ReadToken(identity As IIdentity) As String
    parameters:
    - id: identity
      type: System.Security.Principal.IIdentity
      description: ''
    return:
      type: System.String
      description: ''
  overload: Microsoft.PowerBI.Security.TokenManager.ReadToken*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.PowerBI.Security.TokenManager.Current
  commentId: P:Microsoft.PowerBI.Security.TokenManager.Current
  id: Current
  parent: Microsoft.PowerBI.Security.TokenManager
  langs:
  - csharp
  - vb
  name: Current
  nameWithType: TokenManager.Current
  fullName: Microsoft.PowerBI.Security.TokenManager.Current
  type: Property
  source:
    remote:
      path: sdk/PowerBI.Core/Security/TokenManager.cs
      branch: master
      repo: https://github.com/Microsoft/PowerBI-CSharp
    id: Current
    path: src/PowerBI-CSharp/sdk/PowerBI.Core/Security/TokenManager.cs
    startLine: 67
  assemblies:
  - Microsoft.PowerBI.Core
  namespace: Microsoft.PowerBI.Security
  summary: "\nGets the current instance of the TokenManager class\n"
  example: []
  syntax:
    content: public static TokenManager Current { get; }
    content.vb: Public Shared ReadOnly Property Current As TokenManager
    parameters: []
    return:
      type: Microsoft.PowerBI.Security.TokenManager
  overload: Microsoft.PowerBI.Security.TokenManager.Current*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.PowerBI.Security.TokenManager.SetTokenReader(System.Func{System.Security.Principal.IIdentity,System.String})
  commentId: M:Microsoft.PowerBI.Security.TokenManager.SetTokenReader(System.Func{System.Security.Principal.IIdentity,System.String})
  id: SetTokenReader(System.Func{System.Security.Principal.IIdentity,System.String})
  parent: Microsoft.PowerBI.Security.TokenManager
  langs:
  - csharp
  - vb
  name: SetTokenReader(Func<IIdentity, String>)
  nameWithType: TokenManager.SetTokenReader(Func<IIdentity, String>)
  fullName: Microsoft.PowerBI.Security.TokenManager.SetTokenReader(System.Func<System.Security.Principal.IIdentity, System.String>)
  type: Method
  source:
    remote:
      path: sdk/PowerBI.Core/Security/TokenManager.cs
      branch: master
      repo: https://github.com/Microsoft/PowerBI-CSharp
    id: SetTokenReader
    path: src/PowerBI-CSharp/sdk/PowerBI.Core/Security/TokenManager.cs
    startLine: 79
  assemblies:
  - Microsoft.PowerBI.Core
  namespace: Microsoft.PowerBI.Security
  summary: "\nSets the reader strategy for reading Power BI tokens\n"
  example: []
  syntax:
    content: public void SetTokenReader(Func<IIdentity, string> readTokenFactory)
    content.vb: Public Sub SetTokenReader(readTokenFactory As Func(Of IIdentity, String))
    parameters:
    - id: readTokenFactory
      type: System.Func{System.Security.Principal.IIdentity,System.String}
      description: The strategy expression used to read tokens
  overload: Microsoft.PowerBI.Security.TokenManager.SetTokenReader*
  nameWithType.vb: TokenManager.SetTokenReader(Func(Of IIdentity, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.PowerBI.Security.TokenManager.SetTokenReader(System.Func(Of System.Security.Principal.IIdentity, System.String))
  name.vb: SetTokenReader(Func(Of IIdentity, String))
- uid: Microsoft.PowerBI.Security.TokenManager.SetTokenWriter(System.Action{System.Security.Principal.IIdentity,System.String})
  commentId: M:Microsoft.PowerBI.Security.TokenManager.SetTokenWriter(System.Action{System.Security.Principal.IIdentity,System.String})
  id: SetTokenWriter(System.Action{System.Security.Principal.IIdentity,System.String})
  parent: Microsoft.PowerBI.Security.TokenManager
  langs:
  - csharp
  - vb
  name: SetTokenWriter(Action<IIdentity, String>)
  nameWithType: TokenManager.SetTokenWriter(Action<IIdentity, String>)
  fullName: Microsoft.PowerBI.Security.TokenManager.SetTokenWriter(System.Action<System.Security.Principal.IIdentity, System.String>)
  type: Method
  source:
    remote:
      path: sdk/PowerBI.Core/Security/TokenManager.cs
      branch: master
      repo: https://github.com/Microsoft/PowerBI-CSharp
    id: SetTokenWriter
    path: src/PowerBI-CSharp/sdk/PowerBI.Core/Security/TokenManager.cs
    startLine: 89
  assemblies:
  - Microsoft.PowerBI.Core
  namespace: Microsoft.PowerBI.Security
  summary: "\nSets the writer strategy for storing Power BI tokens\n"
  example: []
  syntax:
    content: public void SetTokenWriter(Action<IIdentity, string> writeTokenAction)
    content.vb: Public Sub SetTokenWriter(writeTokenAction As Action(Of IIdentity, String))
    parameters:
    - id: writeTokenAction
      type: System.Action{System.Security.Principal.IIdentity,System.String}
      description: The strategy expression used to store tokens
  overload: Microsoft.PowerBI.Security.TokenManager.SetTokenWriter*
  nameWithType.vb: TokenManager.SetTokenWriter(Action(Of IIdentity, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.PowerBI.Security.TokenManager.SetTokenWriter(System.Action(Of System.Security.Principal.IIdentity, System.String))
  name.vb: SetTokenWriter(Action(Of IIdentity, String))
- uid: Microsoft.PowerBI.Security.TokenManager.Clear
  commentId: M:Microsoft.PowerBI.Security.TokenManager.Clear
  id: Clear
  parent: Microsoft.PowerBI.Security.TokenManager
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: TokenManager.Clear()
  fullName: Microsoft.PowerBI.Security.TokenManager.Clear()
  type: Method
  source:
    remote:
      path: sdk/PowerBI.Core/Security/TokenManager.cs
      branch: master
      repo: https://github.com/Microsoft/PowerBI-CSharp
    id: Clear
    path: src/PowerBI-CSharp/sdk/PowerBI.Core/Security/TokenManager.cs
    startLine: 98
  assemblies:
  - Microsoft.PowerBI.Core
  namespace: Microsoft.PowerBI.Security
  summary: "\nClears the token store for all users\n"
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: Microsoft.PowerBI.Security.TokenManager.Clear*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.PowerBI.Security
  commentId: N:Microsoft.PowerBI.Security
  isExternal: false
  name: Microsoft.PowerBI.Security
  nameWithType: Microsoft.PowerBI.Security
  fullName: Microsoft.PowerBI.Security
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.PowerBI.Security.TokenManager.WriteToken*
  commentId: Overload:Microsoft.PowerBI.Security.TokenManager.WriteToken
  isExternal: false
  name: WriteToken
  nameWithType: TokenManager.WriteToken
  fullName: Microsoft.PowerBI.Security.TokenManager.WriteToken
- uid: System.Security.Principal.IIdentity
  commentId: T:System.Security.Principal.IIdentity
  parent: System.Security.Principal
  isExternal: true
  name: IIdentity
  nameWithType: IIdentity
  fullName: System.Security.Principal.IIdentity
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Principal
  commentId: N:System.Security.Principal
  isExternal: false
  name: System.Security.Principal
  nameWithType: System.Security.Principal
  fullName: System.Security.Principal
- uid: Microsoft.PowerBI.Security.TokenManager.ReadToken*
  commentId: Overload:Microsoft.PowerBI.Security.TokenManager.ReadToken
  isExternal: false
  name: ReadToken
  nameWithType: TokenManager.ReadToken
  fullName: Microsoft.PowerBI.Security.TokenManager.ReadToken
- uid: Microsoft.PowerBI.Security.TokenManager.Current*
  commentId: Overload:Microsoft.PowerBI.Security.TokenManager.Current
  isExternal: false
  name: Current
  nameWithType: TokenManager.Current
  fullName: Microsoft.PowerBI.Security.TokenManager.Current
- uid: Microsoft.PowerBI.Security.TokenManager
  commentId: T:Microsoft.PowerBI.Security.TokenManager
  parent: Microsoft.PowerBI.Security
  isExternal: false
  name: TokenManager
  nameWithType: TokenManager
  fullName: Microsoft.PowerBI.Security.TokenManager
- uid: Microsoft.PowerBI.Security.TokenManager.SetTokenReader*
  commentId: Overload:Microsoft.PowerBI.Security.TokenManager.SetTokenReader
  isExternal: false
  name: SetTokenReader
  nameWithType: TokenManager.SetTokenReader
  fullName: Microsoft.PowerBI.Security.TokenManager.SetTokenReader
- uid: System.Func{System.Security.Principal.IIdentity,System.String}
  commentId: T:System.Func{System.Security.Principal.IIdentity,System.String}
  parent: System
  definition: System.Func`2
  name: Func<IIdentity, String>
  nameWithType: Func<IIdentity, String>
  fullName: System.Func<System.Security.Principal.IIdentity, System.String>
  nameWithType.vb: Func(Of IIdentity, String)
  fullname.vb: System.Func(Of System.Security.Principal.IIdentity, System.String)
  name.vb: Func(Of IIdentity, String)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Principal.IIdentity
    name: IIdentity
    nameWithType: IIdentity
    fullName: System.Security.Principal.IIdentity
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Principal.IIdentity
    name: IIdentity
    nameWithType: IIdentity
    fullName: System.Security.Principal.IIdentity
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.PowerBI.Security.TokenManager.SetTokenWriter*
  commentId: Overload:Microsoft.PowerBI.Security.TokenManager.SetTokenWriter
  isExternal: false
  name: SetTokenWriter
  nameWithType: TokenManager.SetTokenWriter
  fullName: Microsoft.PowerBI.Security.TokenManager.SetTokenWriter
- uid: System.Action{System.Security.Principal.IIdentity,System.String}
  commentId: T:System.Action{System.Security.Principal.IIdentity,System.String}
  parent: System
  definition: System.Action`2
  name: Action<IIdentity, String>
  nameWithType: Action<IIdentity, String>
  fullName: System.Action<System.Security.Principal.IIdentity, System.String>
  nameWithType.vb: Action(Of IIdentity, String)
  fullname.vb: System.Action(Of System.Security.Principal.IIdentity, System.String)
  name.vb: Action(Of IIdentity, String)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Principal.IIdentity
    name: IIdentity
    nameWithType: IIdentity
    fullName: System.Security.Principal.IIdentity
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Principal.IIdentity
    name: IIdentity
    nameWithType: IIdentity
    fullName: System.Security.Principal.IIdentity
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullname.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.PowerBI.Security.TokenManager.Clear*
  commentId: Overload:Microsoft.PowerBI.Security.TokenManager.Clear
  isExternal: false
  name: Clear
  nameWithType: TokenManager.Clear
  fullName: Microsoft.PowerBI.Security.TokenManager.Clear
