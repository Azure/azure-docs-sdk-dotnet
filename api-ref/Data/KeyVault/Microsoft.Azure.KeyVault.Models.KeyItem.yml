### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.KeyVault.Models.KeyItem
  commentId: T:Microsoft.Azure.KeyVault.Models.KeyItem
  id: KeyItem
  parent: Microsoft.Azure.KeyVault.Models
  children:
  - Microsoft.Azure.KeyVault.Models.KeyItem.#ctor
  - Microsoft.Azure.KeyVault.Models.KeyItem.#ctor(System.String,Microsoft.Azure.KeyVault.Models.KeyAttributes,System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{System.Boolean})
  - Microsoft.Azure.KeyVault.Models.KeyItem.Attributes
  - Microsoft.Azure.KeyVault.Models.KeyItem.Identifier
  - Microsoft.Azure.KeyVault.Models.KeyItem.Kid
  - Microsoft.Azure.KeyVault.Models.KeyItem.Managed
  - Microsoft.Azure.KeyVault.Models.KeyItem.Tags
  langs:
  - csharp
  - vb
  name: KeyItem
  nameWithType: KeyItem
  fullName: Microsoft.Azure.KeyVault.Models.KeyItem
  type: Class
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/KeyItem.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: KeyItem
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/KeyItem.cs
    startLine: 21
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault.Models
  summary: "\nThe key item containing key metadata\n"
  example: []
  syntax:
    content: public class KeyItem
    content.vb: Public Class KeyItem
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.KeyVault.Models.KeyItem.Identifier
  commentId: P:Microsoft.Azure.KeyVault.Models.KeyItem.Identifier
  id: Identifier
  parent: Microsoft.Azure.KeyVault.Models.KeyItem
  langs:
  - csharp
  - vb
  name: Identifier
  nameWithType: KeyItem.Identifier
  fullName: Microsoft.Azure.KeyVault.Models.KeyItem.Identifier
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Customized/KeyItem.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Identifier
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Customized/KeyItem.cs
    startLine: 11
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault.Models
  summary: "\nIdentifier for the key object\n"
  example: []
  syntax:
    content: public KeyIdentifier Identifier { get; }
    content.vb: Public ReadOnly Property Identifier As KeyIdentifier
    parameters: []
    return:
      type: Microsoft.Azure.KeyVault.KeyIdentifier
  overload: Microsoft.Azure.KeyVault.Models.KeyItem.Identifier*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.KeyVault.Models.KeyItem.#ctor
  commentId: M:Microsoft.Azure.KeyVault.Models.KeyItem.#ctor
  id: '#ctor'
  parent: Microsoft.Azure.KeyVault.Models.KeyItem
  langs:
  - csharp
  - vb
  name: KeyItem()
  nameWithType: KeyItem.KeyItem()
  fullName: Microsoft.Azure.KeyVault.Models.KeyItem.KeyItem()
  type: Constructor
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/KeyItem.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/KeyItem.cs
    startLine: 26
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault.Models
  summary: "\nInitializes a new instance of the KeyItem class.\n"
  example: []
  syntax:
    content: public KeyItem()
    content.vb: Public Sub New
  overload: Microsoft.Azure.KeyVault.Models.KeyItem.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.Models.KeyItem.#ctor(System.String,Microsoft.Azure.KeyVault.Models.KeyAttributes,System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{System.Boolean})
  commentId: M:Microsoft.Azure.KeyVault.Models.KeyItem.#ctor(System.String,Microsoft.Azure.KeyVault.Models.KeyAttributes,System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{System.Boolean})
  id: '#ctor(System.String,Microsoft.Azure.KeyVault.Models.KeyAttributes,System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{System.Boolean})'
  parent: Microsoft.Azure.KeyVault.Models.KeyItem
  langs:
  - csharp
  - vb
  name: KeyItem(String, KeyAttributes, IDictionary<String, String>, Nullable<Boolean>)
  nameWithType: KeyItem.KeyItem(String, KeyAttributes, IDictionary<String, String>, Nullable<Boolean>)
  fullName: Microsoft.Azure.KeyVault.Models.KeyItem.KeyItem(System.String, Microsoft.Azure.KeyVault.Models.KeyAttributes, System.Collections.Generic.IDictionary<System.String, System.String>, System.Nullable<System.Boolean>)
  type: Constructor
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/KeyItem.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/KeyItem.cs
    startLine: 38
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault.Models
  summary: "\nInitializes a new instance of the KeyItem class.\n"
  example: []
  syntax:
    content: public KeyItem(string kid = null, KeyAttributes attributes = null, IDictionary<string, string> tags = null, bool ? managed = null)
    content.vb: Public Sub New(kid As String = Nothing, attributes As KeyAttributes = Nothing, tags As IDictionary(Of String, String) = Nothing, managed As Boolean? = Nothing)
    parameters:
    - id: kid
      type: System.String
      description: Key Identifier
    - id: attributes
      type: Microsoft.Azure.KeyVault.Models.KeyAttributes
      description: The key management attributes
    - id: tags
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: >-
        Application-specific metadata in the form of

        key-value pairs
    - id: managed
      type: System.Nullable{System.Boolean}
      description: >-
        True if the key's lifetime is managed by key

        vault i.e. if this is a key backing a certificate, then managed

        will be true.
  overload: Microsoft.Azure.KeyVault.Models.KeyItem.#ctor*
  nameWithType.vb: KeyItem.KeyItem(String, KeyAttributes, IDictionary(Of String, String), Nullable(Of Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.KeyVault.Models.KeyItem.KeyItem(System.String, Microsoft.Azure.KeyVault.Models.KeyAttributes, System.Collections.Generic.IDictionary(Of System.String, System.String), System.Nullable(Of System.Boolean))
  name.vb: KeyItem(String, KeyAttributes, IDictionary(Of String, String), Nullable(Of Boolean))
- uid: Microsoft.Azure.KeyVault.Models.KeyItem.Kid
  commentId: P:Microsoft.Azure.KeyVault.Models.KeyItem.Kid
  id: Kid
  parent: Microsoft.Azure.KeyVault.Models.KeyItem
  langs:
  - csharp
  - vb
  name: Kid
  nameWithType: KeyItem.Kid
  fullName: Microsoft.Azure.KeyVault.Models.KeyItem.Kid
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/KeyItem.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Kid
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/KeyItem.cs
    startLine: 49
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault.Models
  summary: "\nGets or sets key Identifier\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "kid")]

      public string Kid { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="kid")>

      Public Property Kid As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.KeyVault.Models.KeyItem.Kid*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: kid
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.Models.KeyItem.Attributes
  commentId: P:Microsoft.Azure.KeyVault.Models.KeyItem.Attributes
  id: Attributes
  parent: Microsoft.Azure.KeyVault.Models.KeyItem
  langs:
  - csharp
  - vb
  name: Attributes
  nameWithType: KeyItem.Attributes
  fullName: Microsoft.Azure.KeyVault.Models.KeyItem.Attributes
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/KeyItem.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Attributes
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/KeyItem.cs
    startLine: 55
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault.Models
  summary: "\nGets or sets the key management attributes\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "attributes")]

      public KeyAttributes Attributes { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="attributes")>

      Public Property Attributes As KeyAttributes
    parameters: []
    return:
      type: Microsoft.Azure.KeyVault.Models.KeyAttributes
  overload: Microsoft.Azure.KeyVault.Models.KeyItem.Attributes*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: attributes
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.Models.KeyItem.Tags
  commentId: P:Microsoft.Azure.KeyVault.Models.KeyItem.Tags
  id: Tags
  parent: Microsoft.Azure.KeyVault.Models.KeyItem
  langs:
  - csharp
  - vb
  name: Tags
  nameWithType: KeyItem.Tags
  fullName: Microsoft.Azure.KeyVault.Models.KeyItem.Tags
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/KeyItem.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Tags
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/KeyItem.cs
    startLine: 62
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault.Models
  summary: "\nGets or sets application-specific metadata in the form of\nkey-value pairs\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "tags")]

      public IDictionary<string, string> Tags { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="tags")>

      Public Property Tags As IDictionary(Of String, String)
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
  overload: Microsoft.Azure.KeyVault.Models.KeyItem.Tags*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: tags
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.Models.KeyItem.Managed
  commentId: P:Microsoft.Azure.KeyVault.Models.KeyItem.Managed
  id: Managed
  parent: Microsoft.Azure.KeyVault.Models.KeyItem
  langs:
  - csharp
  - vb
  name: Managed
  nameWithType: KeyItem.Managed
  fullName: Microsoft.Azure.KeyVault.Models.KeyItem.Managed
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/KeyItem.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Managed
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/KeyItem.cs
    startLine: 69
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault.Models
  summary: "\nGets true if the key's lifetime is managed by key vault i.e. if\nthis is a key backing a certificate, then managed will be true.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "managed")]

      public bool ? Managed { get; }
    content.vb: >-
      <JsonProperty(PropertyName:="managed")>

      Public ReadOnly Property Managed As Boolean?
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
  overload: Microsoft.Azure.KeyVault.Models.KeyItem.Managed*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: managed
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Microsoft.Azure.KeyVault.Models
  commentId: N:Microsoft.Azure.KeyVault.Models
  isExternal: false
  name: Microsoft.Azure.KeyVault.Models
  nameWithType: Microsoft.Azure.KeyVault.Models
  fullName: Microsoft.Azure.KeyVault.Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.KeyVault.Models.KeyItem.Identifier*
  commentId: Overload:Microsoft.Azure.KeyVault.Models.KeyItem.Identifier
  isExternal: false
  name: Identifier
  nameWithType: KeyItem.Identifier
  fullName: Microsoft.Azure.KeyVault.Models.KeyItem.Identifier
- uid: Microsoft.Azure.KeyVault.KeyIdentifier
  commentId: T:Microsoft.Azure.KeyVault.KeyIdentifier
  parent: Microsoft.Azure.KeyVault
  isExternal: false
  name: KeyIdentifier
  nameWithType: KeyIdentifier
  fullName: Microsoft.Azure.KeyVault.KeyIdentifier
- uid: Microsoft.Azure.KeyVault
  commentId: N:Microsoft.Azure.KeyVault
  isExternal: false
  name: Microsoft.Azure.KeyVault
  nameWithType: Microsoft.Azure.KeyVault
  fullName: Microsoft.Azure.KeyVault
- uid: Microsoft.Azure.KeyVault.Models.KeyItem.#ctor*
  commentId: Overload:Microsoft.Azure.KeyVault.Models.KeyItem.#ctor
  isExternal: false
  name: KeyItem
  nameWithType: KeyItem.KeyItem
  fullName: Microsoft.Azure.KeyVault.Models.KeyItem.KeyItem
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Azure.KeyVault.Models.KeyAttributes
  commentId: T:Microsoft.Azure.KeyVault.Models.KeyAttributes
  parent: Microsoft.Azure.KeyVault.Models
  isExternal: false
  name: KeyAttributes
  nameWithType: KeyAttributes
  fullName: Microsoft.Azure.KeyVault.Models.KeyAttributes
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String>
  nameWithType: IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  nameWithType.vb: IDictionary(Of String, String)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullname.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.KeyVault.Models.KeyItem.Kid*
  commentId: Overload:Microsoft.Azure.KeyVault.Models.KeyItem.Kid
  isExternal: false
  name: Kid
  nameWithType: KeyItem.Kid
  fullName: Microsoft.Azure.KeyVault.Models.KeyItem.Kid
- uid: Microsoft.Azure.KeyVault.Models.KeyItem.Attributes*
  commentId: Overload:Microsoft.Azure.KeyVault.Models.KeyItem.Attributes
  isExternal: false
  name: Attributes
  nameWithType: KeyItem.Attributes
  fullName: Microsoft.Azure.KeyVault.Models.KeyItem.Attributes
- uid: Microsoft.Azure.KeyVault.Models.KeyItem.Tags*
  commentId: Overload:Microsoft.Azure.KeyVault.Models.KeyItem.Tags
  isExternal: false
  name: Tags
  nameWithType: KeyItem.Tags
  fullName: Microsoft.Azure.KeyVault.Models.KeyItem.Tags
- uid: Microsoft.Azure.KeyVault.Models.KeyItem.Managed*
  commentId: Overload:Microsoft.Azure.KeyVault.Models.KeyItem.Managed
  isExternal: false
  name: Managed
  nameWithType: KeyItem.Managed
  fullName: Microsoft.Azure.KeyVault.Models.KeyItem.Managed
