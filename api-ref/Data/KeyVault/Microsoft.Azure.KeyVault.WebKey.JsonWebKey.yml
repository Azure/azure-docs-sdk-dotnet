### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
  commentId: T:Microsoft.Azure.KeyVault.WebKey.JsonWebKey
  id: JsonWebKey
  parent: Microsoft.Azure.KeyVault.WebKey
  children:
  - Microsoft.Azure.KeyVault.WebKey.JsonWebKey.#ctor
  - Microsoft.Azure.KeyVault.WebKey.JsonWebKey.#ctor(System.Security.Cryptography.Aes)
  - Microsoft.Azure.KeyVault.WebKey.JsonWebKey.#ctor(System.Security.Cryptography.RSA,System.Boolean)
  - Microsoft.Azure.KeyVault.WebKey.JsonWebKey.#ctor(System.Security.Cryptography.RSAParameters)
  - Microsoft.Azure.KeyVault.WebKey.JsonWebKey.CanonicalizeRSA
  - Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ClearMemory
  - Microsoft.Azure.KeyVault.WebKey.JsonWebKey.D
  - Microsoft.Azure.KeyVault.WebKey.JsonWebKey.DP
  - Microsoft.Azure.KeyVault.WebKey.JsonWebKey.DQ
  - Microsoft.Azure.KeyVault.WebKey.JsonWebKey.E
  - Microsoft.Azure.KeyVault.WebKey.JsonWebKey.Equals(Microsoft.Azure.KeyVault.WebKey.JsonWebKey)
  - Microsoft.Azure.KeyVault.WebKey.JsonWebKey.Equals(System.Object)
  - Microsoft.Azure.KeyVault.WebKey.JsonWebKey.GetHashCode
  - Microsoft.Azure.KeyVault.WebKey.JsonWebKey.HasPrivateKey
  - Microsoft.Azure.KeyVault.WebKey.JsonWebKey.IsValid
  - Microsoft.Azure.KeyVault.WebKey.JsonWebKey.K
  - Microsoft.Azure.KeyVault.WebKey.JsonWebKey.KeyOps
  - Microsoft.Azure.KeyVault.WebKey.JsonWebKey.Kid
  - Microsoft.Azure.KeyVault.WebKey.JsonWebKey.Kty
  - Microsoft.Azure.KeyVault.WebKey.JsonWebKey.N
  - Microsoft.Azure.KeyVault.WebKey.JsonWebKey.P
  - Microsoft.Azure.KeyVault.WebKey.JsonWebKey.Q
  - Microsoft.Azure.KeyVault.WebKey.JsonWebKey.QI
  - Microsoft.Azure.KeyVault.WebKey.JsonWebKey.T
  - Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ToAes
  - Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ToRSA(System.Boolean)
  - Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ToRSAParameters(System.Boolean)
  - Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ToString
  langs:
  - csharp
  - vb
  name: JsonWebKey
  nameWithType: JsonWebKey
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
  type: Class
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: JsonWebKey
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
    startLine: 17
  assemblies:
  - Microsoft.Azure.KeyVault.WebKey
  namespace: Microsoft.Azure.KeyVault.WebKey
  summary: "\nAs of http://tools.ietf.org/html/draft-ietf-jose-json-web-key-18\n"
  example: []
  syntax:
    content: >-
      [JsonObject]

      public class JsonWebKey
    content.vb: >-
      <JsonObject>

      Public Class JsonWebKey
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: Newtonsoft.Json.JsonObjectAttribute
    ctor: Newtonsoft.Json.JsonObjectAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.Kid
  commentId: P:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.Kid
  id: Kid
  parent: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
  langs:
  - csharp
  - vb
  name: Kid
  nameWithType: JsonWebKey.Kid
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.Kid
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Kid
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
    startLine: 44
  assemblies:
  - Microsoft.Azure.KeyVault.WebKey
  namespace: Microsoft.Azure.KeyVault.WebKey
  summary: "\nKey Identifier\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(DefaultValueHandling = DefaultValueHandling.Ignore, NullValueHandling = NullValueHandling.Ignore, PropertyName = "kid", Required = Required.Default)]

      public string Kid { get; set; }
    content.vb: >-
      <JsonProperty(DefaultValueHandling:=DefaultValueHandling.Ignore, NullValueHandling:=NullValueHandling.Ignore, PropertyName:="kid", Required:=Required.Default)>

      Public Property Kid As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.Kid*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: DefaultValueHandling
      type: Newtonsoft.Json.DefaultValueHandling
      value: 1
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
    - name: PropertyName
      type: System.String
      value: kid
    - name: Required
      type: Newtonsoft.Json.Required
      value: 0
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.Kty
  commentId: P:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.Kty
  id: Kty
  parent: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
  langs:
  - csharp
  - vb
  name: Kty
  nameWithType: JsonWebKey.Kty
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.Kty
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Kty
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
    startLine: 52
  assemblies:
  - Microsoft.Azure.KeyVault.WebKey
  namespace: Microsoft.Azure.KeyVault.WebKey
  summary: "\nGets or sets supported JsonWebKey key types (kty) for Elliptic\nCurve, RSA, HSM, Octet, usually RSA. Possible values include:\n'EC', 'RSA', 'RSA-HSM', 'oct'\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(DefaultValueHandling = DefaultValueHandling.Ignore, NullValueHandling = NullValueHandling.Ignore, PropertyName = "kty", Required = Required.Always)]

      public string Kty { get; set; }
    content.vb: >-
      <JsonProperty(DefaultValueHandling:=DefaultValueHandling.Ignore, NullValueHandling:=NullValueHandling.Ignore, PropertyName:="kty", Required:=Required.Always)>

      Public Property Kty As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.Kty*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: DefaultValueHandling
      type: Newtonsoft.Json.DefaultValueHandling
      value: 1
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
    - name: PropertyName
      type: System.String
      value: kty
    - name: Required
      type: Newtonsoft.Json.Required
      value: 2
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.KeyOps
  commentId: P:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.KeyOps
  id: KeyOps
  parent: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
  langs:
  - csharp
  - vb
  name: KeyOps
  nameWithType: JsonWebKey.KeyOps
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.KeyOps
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: KeyOps
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
    startLine: 58
  assemblies:
  - Microsoft.Azure.KeyVault.WebKey
  namespace: Microsoft.Azure.KeyVault.WebKey
  summary: "\nSupported Key Operations\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(DefaultValueHandling = DefaultValueHandling.Ignore, NullValueHandling = NullValueHandling.Ignore, PropertyName = "key_ops", Required = Required.Default)]

      public IList<string> KeyOps { get; set; }
    content.vb: >-
      <JsonProperty(DefaultValueHandling:=DefaultValueHandling.Ignore, NullValueHandling:=NullValueHandling.Ignore, PropertyName:="key_ops", Required:=Required.Default)>

      Public Property KeyOps As IList(Of String)
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.String}
  overload: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.KeyOps*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: DefaultValueHandling
      type: Newtonsoft.Json.DefaultValueHandling
      value: 1
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
    - name: PropertyName
      type: System.String
      value: key_ops
    - name: Required
      type: Newtonsoft.Json.Required
      value: 0
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.N
  commentId: P:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.N
  id: N
  parent: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
  langs:
  - csharp
  - vb
  name: N
  nameWithType: JsonWebKey.N
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.N
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: N
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
    startLine: 66
  assemblies:
  - Microsoft.Azure.KeyVault.WebKey
  namespace: Microsoft.Azure.KeyVault.WebKey
  summary: "\nRSA modulus, in Base64.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(DefaultValueHandling = DefaultValueHandling.Ignore, NullValueHandling = NullValueHandling.Ignore, PropertyName = "n", Required = Required.Default)]

      [JsonConverter(typeof (Base64UrlJsonConverter))]

      public byte[] N { get; set; }
    content.vb: >-
      <JsonProperty(DefaultValueHandling:=DefaultValueHandling.Ignore, NullValueHandling:=NullValueHandling.Ignore, PropertyName:="n", Required:=Required.Default)>

      <JsonConverter(GetType(Base64UrlJsonConverter))>

      Public Property N As Byte()
    parameters: []
    return:
      type: System.Byte[]
  overload: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.N*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: DefaultValueHandling
      type: Newtonsoft.Json.DefaultValueHandling
      value: 1
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
    - name: PropertyName
      type: System.String
      value: n
    - name: Required
      type: Newtonsoft.Json.Required
      value: 0
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.E
  commentId: P:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.E
  id: E
  parent: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
  langs:
  - csharp
  - vb
  name: E
  nameWithType: JsonWebKey.E
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.E
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: E
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
    startLine: 73
  assemblies:
  - Microsoft.Azure.KeyVault.WebKey
  namespace: Microsoft.Azure.KeyVault.WebKey
  summary: "\nRSA public exponent, in Base64.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(DefaultValueHandling = DefaultValueHandling.Ignore, NullValueHandling = NullValueHandling.Ignore, PropertyName = "e", Required = Required.Default)]

      [JsonConverter(typeof (Base64UrlJsonConverter))]

      public byte[] E { get; set; }
    content.vb: >-
      <JsonProperty(DefaultValueHandling:=DefaultValueHandling.Ignore, NullValueHandling:=NullValueHandling.Ignore, PropertyName:="e", Required:=Required.Default)>

      <JsonConverter(GetType(Base64UrlJsonConverter))>

      Public Property E As Byte()
    parameters: []
    return:
      type: System.Byte[]
  overload: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.E*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: DefaultValueHandling
      type: Newtonsoft.Json.DefaultValueHandling
      value: 1
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
    - name: PropertyName
      type: System.String
      value: e
    - name: Required
      type: Newtonsoft.Json.Required
      value: 0
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.D
  commentId: P:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.D
  id: D
  parent: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
  langs:
  - csharp
  - vb
  name: D
  nameWithType: JsonWebKey.D
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.D
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: D
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
    startLine: 84
  assemblies:
  - Microsoft.Azure.KeyVault.WebKey
  namespace: Microsoft.Azure.KeyVault.WebKey
  summary: "\nRSA private exponent\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(DefaultValueHandling = DefaultValueHandling.Ignore, NullValueHandling = NullValueHandling.Ignore, PropertyName = "d", Required = Required.Default)]

      [JsonConverter(typeof (Base64UrlJsonConverter))]

      public byte[] D { get; set; }
    content.vb: >-
      <JsonProperty(DefaultValueHandling:=DefaultValueHandling.Ignore, NullValueHandling:=NullValueHandling.Ignore, PropertyName:="d", Required:=Required.Default)>

      <JsonConverter(GetType(Base64UrlJsonConverter))>

      Public Property D As Byte()
    parameters: []
    return:
      type: System.Byte[]
  overload: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.D*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: DefaultValueHandling
      type: Newtonsoft.Json.DefaultValueHandling
      value: 1
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
    - name: PropertyName
      type: System.String
      value: d
    - name: Required
      type: Newtonsoft.Json.Required
      value: 0
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.DP
  commentId: P:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.DP
  id: DP
  parent: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
  langs:
  - csharp
  - vb
  name: DP
  nameWithType: JsonWebKey.DP
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.DP
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DP
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
    startLine: 91
  assemblies:
  - Microsoft.Azure.KeyVault.WebKey
  namespace: Microsoft.Azure.KeyVault.WebKey
  summary: "\nRSA Private Key Parameter\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(DefaultValueHandling = DefaultValueHandling.Ignore, NullValueHandling = NullValueHandling.Ignore, PropertyName = "dp", Required = Required.Default)]

      [JsonConverter(typeof (Base64UrlJsonConverter))]

      public byte[] DP { get; set; }
    content.vb: >-
      <JsonProperty(DefaultValueHandling:=DefaultValueHandling.Ignore, NullValueHandling:=NullValueHandling.Ignore, PropertyName:="dp", Required:=Required.Default)>

      <JsonConverter(GetType(Base64UrlJsonConverter))>

      Public Property DP As Byte()
    parameters: []
    return:
      type: System.Byte[]
  overload: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.DP*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: DefaultValueHandling
      type: Newtonsoft.Json.DefaultValueHandling
      value: 1
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
    - name: PropertyName
      type: System.String
      value: dp
    - name: Required
      type: Newtonsoft.Json.Required
      value: 0
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.DQ
  commentId: P:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.DQ
  id: DQ
  parent: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
  langs:
  - csharp
  - vb
  name: DQ
  nameWithType: JsonWebKey.DQ
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.DQ
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DQ
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
    startLine: 98
  assemblies:
  - Microsoft.Azure.KeyVault.WebKey
  namespace: Microsoft.Azure.KeyVault.WebKey
  summary: "\nRSA Private Key Parameter\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(DefaultValueHandling = DefaultValueHandling.Ignore, NullValueHandling = NullValueHandling.Ignore, PropertyName = "dq", Required = Required.Default)]

      [JsonConverter(typeof (Base64UrlJsonConverter))]

      public byte[] DQ { get; set; }
    content.vb: >-
      <JsonProperty(DefaultValueHandling:=DefaultValueHandling.Ignore, NullValueHandling:=NullValueHandling.Ignore, PropertyName:="dq", Required:=Required.Default)>

      <JsonConverter(GetType(Base64UrlJsonConverter))>

      Public Property DQ As Byte()
    parameters: []
    return:
      type: System.Byte[]
  overload: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.DQ*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: DefaultValueHandling
      type: Newtonsoft.Json.DefaultValueHandling
      value: 1
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
    - name: PropertyName
      type: System.String
      value: dq
    - name: Required
      type: Newtonsoft.Json.Required
      value: 0
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.QI
  commentId: P:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.QI
  id: QI
  parent: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
  langs:
  - csharp
  - vb
  name: QI
  nameWithType: JsonWebKey.QI
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.QI
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: QI
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
    startLine: 105
  assemblies:
  - Microsoft.Azure.KeyVault.WebKey
  namespace: Microsoft.Azure.KeyVault.WebKey
  summary: "\nRSA Private Key Parameter\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(DefaultValueHandling = DefaultValueHandling.Ignore, NullValueHandling = NullValueHandling.Ignore, PropertyName = "qi", Required = Required.Default)]

      [JsonConverter(typeof (Base64UrlJsonConverter))]

      public byte[] QI { get; set; }
    content.vb: >-
      <JsonProperty(DefaultValueHandling:=DefaultValueHandling.Ignore, NullValueHandling:=NullValueHandling.Ignore, PropertyName:="qi", Required:=Required.Default)>

      <JsonConverter(GetType(Base64UrlJsonConverter))>

      Public Property QI As Byte()
    parameters: []
    return:
      type: System.Byte[]
  overload: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.QI*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: DefaultValueHandling
      type: Newtonsoft.Json.DefaultValueHandling
      value: 1
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
    - name: PropertyName
      type: System.String
      value: qi
    - name: Required
      type: Newtonsoft.Json.Required
      value: 0
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.P
  commentId: P:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.P
  id: P
  parent: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
  langs:
  - csharp
  - vb
  name: P
  nameWithType: JsonWebKey.P
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.P
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: P
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
    startLine: 112
  assemblies:
  - Microsoft.Azure.KeyVault.WebKey
  namespace: Microsoft.Azure.KeyVault.WebKey
  summary: "\nRSA secret prime\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(DefaultValueHandling = DefaultValueHandling.Ignore, NullValueHandling = NullValueHandling.Ignore, PropertyName = "p", Required = Required.Default)]

      [JsonConverter(typeof (Base64UrlJsonConverter))]

      public byte[] P { get; set; }
    content.vb: >-
      <JsonProperty(DefaultValueHandling:=DefaultValueHandling.Ignore, NullValueHandling:=NullValueHandling.Ignore, PropertyName:="p", Required:=Required.Default)>

      <JsonConverter(GetType(Base64UrlJsonConverter))>

      Public Property P As Byte()
    parameters: []
    return:
      type: System.Byte[]
  overload: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.P*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: DefaultValueHandling
      type: Newtonsoft.Json.DefaultValueHandling
      value: 1
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
    - name: PropertyName
      type: System.String
      value: p
    - name: Required
      type: Newtonsoft.Json.Required
      value: 0
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.Q
  commentId: P:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.Q
  id: Q
  parent: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
  langs:
  - csharp
  - vb
  name: Q
  nameWithType: JsonWebKey.Q
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.Q
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Q
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
    startLine: 119
  assemblies:
  - Microsoft.Azure.KeyVault.WebKey
  namespace: Microsoft.Azure.KeyVault.WebKey
  summary: "\nRSA secret prime, with p &lt; q\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(DefaultValueHandling = DefaultValueHandling.Ignore, NullValueHandling = NullValueHandling.Ignore, PropertyName = "q", Required = Required.Default)]

      [JsonConverter(typeof (Base64UrlJsonConverter))]

      public byte[] Q { get; set; }
    content.vb: >-
      <JsonProperty(DefaultValueHandling:=DefaultValueHandling.Ignore, NullValueHandling:=NullValueHandling.Ignore, PropertyName:="q", Required:=Required.Default)>

      <JsonConverter(GetType(Base64UrlJsonConverter))>

      Public Property Q As Byte()
    parameters: []
    return:
      type: System.Byte[]
  overload: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.Q*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: DefaultValueHandling
      type: Newtonsoft.Json.DefaultValueHandling
      value: 1
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
    - name: PropertyName
      type: System.String
      value: q
    - name: Required
      type: Newtonsoft.Json.Required
      value: 0
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.K
  commentId: P:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.K
  id: K
  parent: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
  langs:
  - csharp
  - vb
  name: K
  nameWithType: JsonWebKey.K
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.K
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: K
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
    startLine: 131
  assemblies:
  - Microsoft.Azure.KeyVault.WebKey
  namespace: Microsoft.Azure.KeyVault.WebKey
  summary: "\nSymmetric key\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(DefaultValueHandling = DefaultValueHandling.Ignore, NullValueHandling = NullValueHandling.Ignore, PropertyName = "k", Required = Required.Default)]

      [JsonConverter(typeof (Base64UrlJsonConverter))]

      public byte[] K { get; set; }
    content.vb: >-
      <JsonProperty(DefaultValueHandling:=DefaultValueHandling.Ignore, NullValueHandling:=NullValueHandling.Ignore, PropertyName:="k", Required:=Required.Default)>

      <JsonConverter(GetType(Base64UrlJsonConverter))>

      Public Property K As Byte()
    parameters: []
    return:
      type: System.Byte[]
  overload: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.K*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: DefaultValueHandling
      type: Newtonsoft.Json.DefaultValueHandling
      value: 1
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
    - name: PropertyName
      type: System.String
      value: k
    - name: Required
      type: Newtonsoft.Json.Required
      value: 0
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.T
  commentId: P:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.T
  id: T
  parent: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
  langs:
  - csharp
  - vb
  name: T
  nameWithType: JsonWebKey.T
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.T
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: T
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
    startLine: 140
  assemblies:
  - Microsoft.Azure.KeyVault.WebKey
  namespace: Microsoft.Azure.KeyVault.WebKey
  summary: "\nHSM Token, used with \"Bring Your Own Key\"\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(DefaultValueHandling = DefaultValueHandling.Ignore, NullValueHandling = NullValueHandling.Ignore, PropertyName = "key_hsm", Required = Required.Default)]

      [JsonConverter(typeof (Base64UrlJsonConverter))]

      public byte[] T { get; set; }
    content.vb: >-
      <JsonProperty(DefaultValueHandling:=DefaultValueHandling.Ignore, NullValueHandling:=NullValueHandling.Ignore, PropertyName:="key_hsm", Required:=Required.Default)>

      <JsonConverter(GetType(Base64UrlJsonConverter))>

      Public Property T As Byte()
    parameters: []
    return:
      type: System.Byte[]
  overload: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.T*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: DefaultValueHandling
      type: Newtonsoft.Json.DefaultValueHandling
      value: 1
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
    - name: PropertyName
      type: System.String
      value: key_hsm
    - name: Required
      type: Newtonsoft.Json.Required
      value: 0
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.#ctor
  commentId: M:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.#ctor
  id: '#ctor'
  parent: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
  langs:
  - csharp
  - vb
  name: JsonWebKey()
  nameWithType: JsonWebKey.JsonWebKey()
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.JsonWebKey()
  type: Constructor
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
    startLine: 147
  assemblies:
  - Microsoft.Azure.KeyVault.WebKey
  namespace: Microsoft.Azure.KeyVault.WebKey
  summary: "\nCreates an instance of <xref href=\"Microsoft.Azure.KeyVault.WebKey.JsonWebKey\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: >-
      [JsonConstructor]

      public JsonWebKey()
    content.vb: >-
      <JsonConstructor>

      Public Sub New
  overload: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.#ctor*
  attributes:
  - type: Newtonsoft.Json.JsonConstructorAttribute
    ctor: Newtonsoft.Json.JsonConstructorAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.#ctor(System.Security.Cryptography.Aes)
  commentId: M:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.#ctor(System.Security.Cryptography.Aes)
  id: '#ctor(System.Security.Cryptography.Aes)'
  parent: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
  langs:
  - csharp
  - vb
  name: JsonWebKey(Aes)
  nameWithType: JsonWebKey.JsonWebKey(Aes)
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.JsonWebKey(System.Security.Cryptography.Aes)
  type: Constructor
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
    startLine: 158
  assemblies:
  - Microsoft.Azure.KeyVault.WebKey
  namespace: Microsoft.Azure.KeyVault.WebKey
  summary: "\nConverts an AES object to a WebKey of type Octet\n"
  example: []
  syntax:
    content: public JsonWebKey(Aes aesProvider)
    content.vb: Public Sub New(aesProvider As Aes)
    parameters:
    - id: aesProvider
      type: System.Security.Cryptography.Aes
      description: ''
  overload: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.#ctor(System.Security.Cryptography.RSA,System.Boolean)
  commentId: M:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.#ctor(System.Security.Cryptography.RSA,System.Boolean)
  id: '#ctor(System.Security.Cryptography.RSA,System.Boolean)'
  parent: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
  langs:
  - csharp
  - vb
  name: JsonWebKey(RSA, Boolean)
  nameWithType: JsonWebKey.JsonWebKey(RSA, Boolean)
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.JsonWebKey(System.Security.Cryptography.RSA, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
    startLine: 173
  assemblies:
  - Microsoft.Azure.KeyVault.WebKey
  namespace: Microsoft.Azure.KeyVault.WebKey
  summary: "\nConverts a RSA object to a WebKey of type RSA.\n"
  example: []
  syntax:
    content: public JsonWebKey(RSA rsaProvider, bool includePrivateParameters = false)
    content.vb: Public Sub New(rsaProvider As RSA, includePrivateParameters As Boolean = False)
    parameters:
    - id: rsaProvider
      type: System.Security.Cryptography.RSA
      description: The RSA object to convert
    - id: includePrivateParameters
      type: System.Boolean
      description: True to include the RSA private key parameters
  overload: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.#ctor(System.Security.Cryptography.RSAParameters)
  commentId: M:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.#ctor(System.Security.Cryptography.RSAParameters)
  id: '#ctor(System.Security.Cryptography.RSAParameters)'
  parent: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
  langs:
  - csharp
  - vb
  name: JsonWebKey(RSAParameters)
  nameWithType: JsonWebKey.JsonWebKey(RSAParameters)
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.JsonWebKey(System.Security.Cryptography.RSAParameters)
  type: Constructor
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
    startLine: 182
  assemblies:
  - Microsoft.Azure.KeyVault.WebKey
  namespace: Microsoft.Azure.KeyVault.WebKey
  summary: "\nConverts a RSAParameters object to a WebKey of type RSA.\n"
  example: []
  syntax:
    content: public JsonWebKey(RSAParameters rsaParameters)
    content.vb: Public Sub New(rsaParameters As RSAParameters)
    parameters:
    - id: rsaParameters
      type: System.Security.Cryptography.RSAParameters
      description: The RSA object to convert
  overload: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.Equals(System.Object)
  commentId: M:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.Equals(System.Object)
  id: Equals(System.Object)
  parent: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: JsonWebKey.Equals(Object)
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Equals
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
    startLine: 197
  assemblies:
  - Microsoft.Azure.KeyVault.WebKey
  namespace: Microsoft.Azure.KeyVault.WebKey
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
  overridden: System.Object.Equals(System.Object)
  overload: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.Equals(Microsoft.Azure.KeyVault.WebKey.JsonWebKey)
  commentId: M:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.Equals(Microsoft.Azure.KeyVault.WebKey.JsonWebKey)
  id: Equals(Microsoft.Azure.KeyVault.WebKey.JsonWebKey)
  parent: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
  langs:
  - csharp
  - vb
  name: Equals(JsonWebKey)
  nameWithType: JsonWebKey.Equals(JsonWebKey)
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.Equals(Microsoft.Azure.KeyVault.WebKey.JsonWebKey)
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Equals
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
    startLine: 218
  assemblies:
  - Microsoft.Azure.KeyVault.WebKey
  namespace: Microsoft.Azure.KeyVault.WebKey
  summary: "\nCompares <xref href=\"Microsoft.Azure.KeyVault.WebKey.JsonWebKey\" data-throw-if-not-resolved=\"false\"></xref> objects\n"
  example: []
  syntax:
    content: public bool Equals(JsonWebKey other)
    content.vb: Public Function Equals(other As JsonWebKey) As Boolean
    parameters:
    - id: other
      type: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
      description: 'the <xref href="Microsoft.Azure.KeyVault.WebKey.JsonWebKey" data-throw-if-not-resolved="false"></xref> object to compare with '
    return:
      type: System.Boolean
      description: 'whether the <xref href="Microsoft.Azure.KeyVault.WebKey.JsonWebKey" data-throw-if-not-resolved="false"></xref> objects are equals '
  overload: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.Equals*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.GetHashCode
  commentId: M:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.GetHashCode
  id: GetHashCode
  parent: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: JsonWebKey.GetHashCode()
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.GetHashCode()
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: GetHashCode
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
    startLine: 273
  assemblies:
  - Microsoft.Azure.KeyVault.WebKey
  namespace: Microsoft.Azure.KeyVault.WebKey
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  overridden: System.Object.GetHashCode
  overload: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.HasPrivateKey
  commentId: M:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.HasPrivateKey
  id: HasPrivateKey
  parent: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
  langs:
  - csharp
  - vb
  name: HasPrivateKey()
  nameWithType: JsonWebKey.HasPrivateKey()
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.HasPrivateKey()
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: HasPrivateKey
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
    startLine: 317
  assemblies:
  - Microsoft.Azure.KeyVault.WebKey
  namespace: Microsoft.Azure.KeyVault.WebKey
  summary: "\nVerifies whether this object has a private key\n"
  example: []
  syntax:
    content: public virtual bool HasPrivateKey()
    content.vb: Public Overridable Function HasPrivateKey As Boolean
    return:
      type: System.Boolean
      description: True if the object has private key; false otherwise.
  overload: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.HasPrivateKey*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.IsValid
  commentId: M:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.IsValid
  id: IsValid
  parent: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
  langs:
  - csharp
  - vb
  name: IsValid()
  nameWithType: JsonWebKey.IsValid()
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.IsValid()
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: IsValid
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
    startLine: 339
  assemblies:
  - Microsoft.Azure.KeyVault.WebKey
  namespace: Microsoft.Azure.KeyVault.WebKey
  summary: "\nDetermines if the WebKey object is valid according to the rules for\neach of the possible WebKeyTypes. For more information, see WebKeyTypes.\n"
  example: []
  syntax:
    content: public virtual bool IsValid()
    content.vb: Public Overridable Function IsValid As Boolean
    return:
      type: System.Boolean
      description: true if the WebKey is valid
  overload: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.IsValid*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ToAes
  commentId: M:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ToAes
  id: ToAes
  parent: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
  langs:
  - csharp
  - vb
  name: ToAes()
  nameWithType: JsonWebKey.ToAes()
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ToAes()
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ToAes
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
    startLine: 427
  assemblies:
  - Microsoft.Azure.KeyVault.WebKey
  namespace: Microsoft.Azure.KeyVault.WebKey
  summary: "\nConverts a WebKey of type Octet to an AES object.\n"
  example: []
  syntax:
    content: public Aes ToAes()
    content.vb: Public Function ToAes As Aes
    return:
      type: System.Security.Cryptography.Aes
      description: An AES object
  overload: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ToAes*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.CanonicalizeRSA
  commentId: M:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.CanonicalizeRSA
  id: CanonicalizeRSA
  parent: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
  langs:
  - csharp
  - vb
  name: CanonicalizeRSA()
  nameWithType: JsonWebKey.CanonicalizeRSA()
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.CanonicalizeRSA()
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CanonicalizeRSA
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
    startLine: 446
  assemblies:
  - Microsoft.Azure.KeyVault.WebKey
  namespace: Microsoft.Azure.KeyVault.WebKey
  summary: "\nRemove leading zeros from all RSA parameters.\n"
  example: []
  syntax:
    content: public void CanonicalizeRSA()
    content.vb: Public Sub CanonicalizeRSA
  overload: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.CanonicalizeRSA*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ToRSA(System.Boolean)
  commentId: M:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ToRSA(System.Boolean)
  id: ToRSA(System.Boolean)
  parent: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
  langs:
  - csharp
  - vb
  name: ToRSA(Boolean)
  nameWithType: JsonWebKey.ToRSA(Boolean)
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ToRSA(System.Boolean)
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ToRSA
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
    startLine: 463
  assemblies:
  - Microsoft.Azure.KeyVault.WebKey
  namespace: Microsoft.Azure.KeyVault.WebKey
  summary: "\nConverts a WebKey of type RSA or RSAHSM to a RSA object\n"
  example: []
  syntax:
    content: public RSA ToRSA(bool includePrivateParameters = false)
    content.vb: Public Function ToRSA(includePrivateParameters As Boolean = False) As RSA
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: Determines whether private key material, if available, is included
    return:
      type: System.Security.Cryptography.RSA
      description: An initialized RSA instance
  overload: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ToRSA*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ToRSAParameters(System.Boolean)
  commentId: M:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ToRSAParameters(System.Boolean)
  id: ToRSAParameters(System.Boolean)
  parent: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
  langs:
  - csharp
  - vb
  name: ToRSAParameters(Boolean)
  nameWithType: JsonWebKey.ToRSAParameters(Boolean)
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ToRSAParameters(System.Boolean)
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ToRSAParameters
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
    startLine: 478
  assemblies:
  - Microsoft.Azure.KeyVault.WebKey
  namespace: Microsoft.Azure.KeyVault.WebKey
  summary: "\nConverts a WebKey of type RSA or RSAHSM to a RSA parameter object\n"
  example: []
  syntax:
    content: public RSAParameters ToRSAParameters(bool includePrivateParameters = false)
    content.vb: Public Function ToRSAParameters(includePrivateParameters As Boolean = False) As RSAParameters
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: Determines whether private key material, if available, is included
    return:
      type: System.Security.Cryptography.RSAParameters
      description: An RSA parameter
  overload: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ToRSAParameters*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ToString
  commentId: M:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ToString
  id: ToString
  parent: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: JsonWebKey.ToString()
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ToString()
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ToString
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
    startLine: 575
  assemblies:
  - Microsoft.Azure.KeyVault.WebKey
  namespace: Microsoft.Azure.KeyVault.WebKey
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
  overridden: System.Object.ToString
  overload: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ClearMemory
  commentId: M:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ClearMemory
  id: ClearMemory
  parent: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
  langs:
  - csharp
  - vb
  name: ClearMemory()
  nameWithType: JsonWebKey.ClearMemory()
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ClearMemory()
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ClearMemory
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.WebKey/JsonWebKey.cs
    startLine: 584
  assemblies:
  - Microsoft.Azure.KeyVault.WebKey
  namespace: Microsoft.Azure.KeyVault.WebKey
  summary: "\nBest effort to clear private key material \nNot strong guarantee since GC may move the arrays during compact.\n"
  example: []
  syntax:
    content: public void ClearMemory()
    content.vb: Public Sub ClearMemory
  overload: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ClearMemory*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Azure.KeyVault.WebKey
  commentId: N:Microsoft.Azure.KeyVault.WebKey
  isExternal: false
  name: Microsoft.Azure.KeyVault.WebKey
  nameWithType: Microsoft.Azure.KeyVault.WebKey
  fullName: Microsoft.Azure.KeyVault.WebKey
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.Kid*
  commentId: Overload:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.Kid
  isExternal: false
  name: Kid
  nameWithType: JsonWebKey.Kid
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.Kid
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.Kty*
  commentId: Overload:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.Kty
  isExternal: false
  name: Kty
  nameWithType: JsonWebKey.Kty
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.Kty
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.KeyOps*
  commentId: Overload:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.KeyOps
  isExternal: false
  name: KeyOps
  nameWithType: JsonWebKey.KeyOps
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.KeyOps
- uid: System.Collections.Generic.IList{System.String}
  commentId: T:System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  nameWithType.vb: IList(Of String)
  fullname.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.N*
  commentId: Overload:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.N
  isExternal: false
  name: N
  nameWithType: JsonWebKey.N
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.N
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.E*
  commentId: Overload:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.E
  isExternal: false
  name: E
  nameWithType: JsonWebKey.E
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.E
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.D*
  commentId: Overload:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.D
  isExternal: false
  name: D
  nameWithType: JsonWebKey.D
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.D
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.DP*
  commentId: Overload:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.DP
  isExternal: false
  name: DP
  nameWithType: JsonWebKey.DP
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.DP
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.DQ*
  commentId: Overload:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.DQ
  isExternal: false
  name: DQ
  nameWithType: JsonWebKey.DQ
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.DQ
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.QI*
  commentId: Overload:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.QI
  isExternal: false
  name: QI
  nameWithType: JsonWebKey.QI
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.QI
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.P*
  commentId: Overload:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.P
  isExternal: false
  name: P
  nameWithType: JsonWebKey.P
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.P
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.Q*
  commentId: Overload:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.Q
  isExternal: false
  name: Q
  nameWithType: JsonWebKey.Q
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.Q
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.K*
  commentId: Overload:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.K
  isExternal: false
  name: K
  nameWithType: JsonWebKey.K
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.K
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.T*
  commentId: Overload:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.T
  isExternal: false
  name: T
  nameWithType: JsonWebKey.T
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.T
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
  commentId: T:Microsoft.Azure.KeyVault.WebKey.JsonWebKey
  parent: Microsoft.Azure.KeyVault.WebKey
  isExternal: false
  name: JsonWebKey
  nameWithType: JsonWebKey
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.#ctor*
  commentId: Overload:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.#ctor
  isExternal: false
  name: JsonWebKey
  nameWithType: JsonWebKey.JsonWebKey
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.JsonWebKey
- uid: System.Security.Cryptography.Aes
  commentId: T:System.Security.Cryptography.Aes
  parent: System.Security.Cryptography
  isExternal: true
  name: Aes
  nameWithType: Aes
  fullName: System.Security.Cryptography.Aes
- uid: System.Security.Cryptography
  commentId: N:System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  nameWithType: System.Security.Cryptography
  fullName: System.Security.Cryptography
- uid: System.Security.Cryptography.RSA
  commentId: T:System.Security.Cryptography.RSA
  parent: System.Security.Cryptography
  isExternal: true
  name: RSA
  nameWithType: RSA
  fullName: System.Security.Cryptography.RSA
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.RSAParameters
  commentId: T:System.Security.Cryptography.RSAParameters
  parent: System.Security.Cryptography
  isExternal: true
  name: RSAParameters
  nameWithType: RSAParameters
  fullName: System.Security.Cryptography.RSAParameters
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.Equals*
  commentId: Overload:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.Equals
  isExternal: false
  name: Equals
  nameWithType: JsonWebKey.Equals
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.Equals
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.GetHashCode*
  commentId: Overload:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.GetHashCode
  isExternal: false
  name: GetHashCode
  nameWithType: JsonWebKey.GetHashCode
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.HasPrivateKey*
  commentId: Overload:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.HasPrivateKey
  isExternal: false
  name: HasPrivateKey
  nameWithType: JsonWebKey.HasPrivateKey
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.HasPrivateKey
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.IsValid*
  commentId: Overload:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.IsValid
  isExternal: false
  name: IsValid
  nameWithType: JsonWebKey.IsValid
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.IsValid
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ToAes*
  commentId: Overload:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ToAes
  isExternal: false
  name: ToAes
  nameWithType: JsonWebKey.ToAes
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ToAes
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.CanonicalizeRSA*
  commentId: Overload:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.CanonicalizeRSA
  isExternal: false
  name: CanonicalizeRSA
  nameWithType: JsonWebKey.CanonicalizeRSA
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.CanonicalizeRSA
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ToRSA*
  commentId: Overload:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ToRSA
  isExternal: false
  name: ToRSA
  nameWithType: JsonWebKey.ToRSA
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ToRSA
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ToRSAParameters*
  commentId: Overload:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ToRSAParameters
  isExternal: false
  name: ToRSAParameters
  nameWithType: JsonWebKey.ToRSAParameters
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ToRSAParameters
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ToString*
  commentId: Overload:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ToString
  isExternal: false
  name: ToString
  nameWithType: JsonWebKey.ToString
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ToString
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ClearMemory*
  commentId: Overload:Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ClearMemory
  isExternal: false
  name: ClearMemory
  nameWithType: JsonWebKey.ClearMemory
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey.ClearMemory
