### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.KeyVault.Models.SecretBundle
  commentId: T:Microsoft.Azure.KeyVault.Models.SecretBundle
  id: SecretBundle
  parent: Microsoft.Azure.KeyVault.Models
  children:
  - Microsoft.Azure.KeyVault.Models.SecretBundle.#ctor
  - Microsoft.Azure.KeyVault.Models.SecretBundle.#ctor(System.String,System.String,System.String,Microsoft.Azure.KeyVault.Models.SecretAttributes,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Nullable{System.Boolean})
  - Microsoft.Azure.KeyVault.Models.SecretBundle.Attributes
  - Microsoft.Azure.KeyVault.Models.SecretBundle.ContentType
  - Microsoft.Azure.KeyVault.Models.SecretBundle.Id
  - Microsoft.Azure.KeyVault.Models.SecretBundle.Kid
  - Microsoft.Azure.KeyVault.Models.SecretBundle.Managed
  - Microsoft.Azure.KeyVault.Models.SecretBundle.SecretIdentifier
  - Microsoft.Azure.KeyVault.Models.SecretBundle.Tags
  - Microsoft.Azure.KeyVault.Models.SecretBundle.ToString
  - Microsoft.Azure.KeyVault.Models.SecretBundle.Value
  langs:
  - csharp
  - vb
  name: SecretBundle
  nameWithType: SecretBundle
  fullName: Microsoft.Azure.KeyVault.Models.SecretBundle
  type: Class
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/SecretBundle.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: SecretBundle
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/SecretBundle.cs
    startLine: 21
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault.Models
  summary: "\nA Secret consisting of a value, id and its attributes.\n"
  example: []
  syntax:
    content: public class SecretBundle
    content.vb: Public Class SecretBundle
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.KeyVault.Models.SecretBundle.SecretIdentifier
  commentId: P:Microsoft.Azure.KeyVault.Models.SecretBundle.SecretIdentifier
  id: SecretIdentifier
  parent: Microsoft.Azure.KeyVault.Models.SecretBundle
  langs:
  - csharp
  - vb
  name: SecretIdentifier
  nameWithType: SecretBundle.SecretIdentifier
  fullName: Microsoft.Azure.KeyVault.Models.SecretBundle.SecretIdentifier
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Customized/SecretBundle.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: SecretIdentifier
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Customized/SecretBundle.cs
    startLine: 13
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault.Models
  summary: "\nThe identifier for secret object\n"
  example: []
  syntax:
    content: public SecretIdentifier SecretIdentifier { get; }
    content.vb: Public ReadOnly Property SecretIdentifier As SecretIdentifier
    parameters: []
    return:
      type: Microsoft.Azure.KeyVault.SecretIdentifier
  overload: Microsoft.Azure.KeyVault.Models.SecretBundle.SecretIdentifier*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.KeyVault.Models.SecretBundle.ToString
  commentId: M:Microsoft.Azure.KeyVault.Models.SecretBundle.ToString
  id: ToString
  parent: Microsoft.Azure.KeyVault.Models.SecretBundle
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: SecretBundle.ToString()
  fullName: Microsoft.Azure.KeyVault.Models.SecretBundle.ToString()
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Customized/SecretBundle.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ToString
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Customized/SecretBundle.cs
    startLine: 24
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault.Models
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
  overridden: System.Object.ToString
  overload: Microsoft.Azure.KeyVault.Models.SecretBundle.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Azure.KeyVault.Models.SecretBundle.#ctor
  commentId: M:Microsoft.Azure.KeyVault.Models.SecretBundle.#ctor
  id: '#ctor'
  parent: Microsoft.Azure.KeyVault.Models.SecretBundle
  langs:
  - csharp
  - vb
  name: SecretBundle()
  nameWithType: SecretBundle.SecretBundle()
  fullName: Microsoft.Azure.KeyVault.Models.SecretBundle.SecretBundle()
  type: Constructor
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/SecretBundle.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/SecretBundle.cs
    startLine: 26
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault.Models
  summary: "\nInitializes a new instance of the SecretBundle class.\n"
  example: []
  syntax:
    content: public SecretBundle()
    content.vb: Public Sub New
  overload: Microsoft.Azure.KeyVault.Models.SecretBundle.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.Models.SecretBundle.#ctor(System.String,System.String,System.String,Microsoft.Azure.KeyVault.Models.SecretAttributes,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Nullable{System.Boolean})
  commentId: M:Microsoft.Azure.KeyVault.Models.SecretBundle.#ctor(System.String,System.String,System.String,Microsoft.Azure.KeyVault.Models.SecretAttributes,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Nullable{System.Boolean})
  id: '#ctor(System.String,System.String,System.String,Microsoft.Azure.KeyVault.Models.SecretAttributes,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Nullable{System.Boolean})'
  parent: Microsoft.Azure.KeyVault.Models.SecretBundle
  langs:
  - csharp
  - vb
  name: SecretBundle(String, String, String, SecretAttributes, IDictionary<String, String>, String, Nullable<Boolean>)
  nameWithType: SecretBundle.SecretBundle(String, String, String, SecretAttributes, IDictionary<String, String>, String, Nullable<Boolean>)
  fullName: Microsoft.Azure.KeyVault.Models.SecretBundle.SecretBundle(System.String, System.String, System.String, Microsoft.Azure.KeyVault.Models.SecretAttributes, System.Collections.Generic.IDictionary<System.String, System.String>, System.String, System.Nullable<System.Boolean>)
  type: Constructor
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/SecretBundle.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/SecretBundle.cs
    startLine: 43
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault.Models
  summary: "\nInitializes a new instance of the SecretBundle class.\n"
  example: []
  syntax:
    content: public SecretBundle(string value = null, string id = null, string contentType = null, SecretAttributes attributes = null, IDictionary<string, string> tags = null, string kid = null, bool ? managed = null)
    content.vb: Public Sub New(value As String = Nothing, id As String = Nothing, contentType As String = Nothing, attributes As SecretAttributes = Nothing, tags As IDictionary(Of String, String) = Nothing, kid As String = Nothing, managed As Boolean? = Nothing)
    parameters:
    - id: value
      type: System.String
      description: 'The secret value '
    - id: id
      type: System.String
      description: The secret id
    - id: contentType
      type: System.String
      description: The content type of the secret
    - id: attributes
      type: Microsoft.Azure.KeyVault.Models.SecretAttributes
      description: The secret management attributes
    - id: tags
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: >-
        Application-specific metadata in the form of

        key-value pairs
    - id: kid
      type: System.String
      description: >-
        If this is a secret backing a KV certificate,

        then this field specifies the corresponding key backing the KV

        certificate.
    - id: managed
      type: System.Nullable{System.Boolean}
      description: >-
        True if the secret's lifetime is managed by

        key vault i.e. if this is a secret backing a certificate, then

        managed will be true.
  overload: Microsoft.Azure.KeyVault.Models.SecretBundle.#ctor*
  nameWithType.vb: SecretBundle.SecretBundle(String, String, String, SecretAttributes, IDictionary(Of String, String), String, Nullable(Of Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.KeyVault.Models.SecretBundle.SecretBundle(System.String, System.String, System.String, Microsoft.Azure.KeyVault.Models.SecretAttributes, System.Collections.Generic.IDictionary(Of System.String, System.String), System.String, System.Nullable(Of System.Boolean))
  name.vb: SecretBundle(String, String, String, SecretAttributes, IDictionary(Of String, String), String, Nullable(Of Boolean))
- uid: Microsoft.Azure.KeyVault.Models.SecretBundle.Value
  commentId: P:Microsoft.Azure.KeyVault.Models.SecretBundle.Value
  id: Value
  parent: Microsoft.Azure.KeyVault.Models.SecretBundle
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: SecretBundle.Value
  fullName: Microsoft.Azure.KeyVault.Models.SecretBundle.Value
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/SecretBundle.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Value
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/SecretBundle.cs
    startLine: 57
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault.Models
  summary: "\nGets or sets the secret value\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "value")]

      public string Value { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="value")>

      Public Property Value As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.KeyVault.Models.SecretBundle.Value*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: value
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.Models.SecretBundle.Id
  commentId: P:Microsoft.Azure.KeyVault.Models.SecretBundle.Id
  id: Id
  parent: Microsoft.Azure.KeyVault.Models.SecretBundle
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: SecretBundle.Id
  fullName: Microsoft.Azure.KeyVault.Models.SecretBundle.Id
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/SecretBundle.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Id
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/SecretBundle.cs
    startLine: 63
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault.Models
  summary: "\nGets or sets the secret id\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "id")]

      public string Id { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="id")>

      Public Property Id As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.KeyVault.Models.SecretBundle.Id*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: id
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.Models.SecretBundle.ContentType
  commentId: P:Microsoft.Azure.KeyVault.Models.SecretBundle.ContentType
  id: ContentType
  parent: Microsoft.Azure.KeyVault.Models.SecretBundle
  langs:
  - csharp
  - vb
  name: ContentType
  nameWithType: SecretBundle.ContentType
  fullName: Microsoft.Azure.KeyVault.Models.SecretBundle.ContentType
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/SecretBundle.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ContentType
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/SecretBundle.cs
    startLine: 69
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault.Models
  summary: "\nGets or sets the content type of the secret\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "contentType")]

      public string ContentType { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="contentType")>

      Public Property ContentType As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.KeyVault.Models.SecretBundle.ContentType*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: contentType
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.Models.SecretBundle.Attributes
  commentId: P:Microsoft.Azure.KeyVault.Models.SecretBundle.Attributes
  id: Attributes
  parent: Microsoft.Azure.KeyVault.Models.SecretBundle
  langs:
  - csharp
  - vb
  name: Attributes
  nameWithType: SecretBundle.Attributes
  fullName: Microsoft.Azure.KeyVault.Models.SecretBundle.Attributes
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/SecretBundle.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Attributes
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/SecretBundle.cs
    startLine: 75
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault.Models
  summary: "\nGets or sets the secret management attributes\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "attributes")]

      public SecretAttributes Attributes { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="attributes")>

      Public Property Attributes As SecretAttributes
    parameters: []
    return:
      type: Microsoft.Azure.KeyVault.Models.SecretAttributes
  overload: Microsoft.Azure.KeyVault.Models.SecretBundle.Attributes*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: attributes
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.Models.SecretBundle.Tags
  commentId: P:Microsoft.Azure.KeyVault.Models.SecretBundle.Tags
  id: Tags
  parent: Microsoft.Azure.KeyVault.Models.SecretBundle
  langs:
  - csharp
  - vb
  name: Tags
  nameWithType: SecretBundle.Tags
  fullName: Microsoft.Azure.KeyVault.Models.SecretBundle.Tags
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/SecretBundle.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Tags
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/SecretBundle.cs
    startLine: 82
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault.Models
  summary: "\nGets or sets application-specific metadata in the form of\nkey-value pairs\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "tags")]

      public IDictionary<string, string> Tags { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="tags")>

      Public Property Tags As IDictionary(Of String, String)
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
  overload: Microsoft.Azure.KeyVault.Models.SecretBundle.Tags*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: tags
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.Models.SecretBundle.Kid
  commentId: P:Microsoft.Azure.KeyVault.Models.SecretBundle.Kid
  id: Kid
  parent: Microsoft.Azure.KeyVault.Models.SecretBundle
  langs:
  - csharp
  - vb
  name: Kid
  nameWithType: SecretBundle.Kid
  fullName: Microsoft.Azure.KeyVault.Models.SecretBundle.Kid
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/SecretBundle.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Kid
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/SecretBundle.cs
    startLine: 89
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault.Models
  summary: "\nGets if this is a secret backing a KV certificate, then this field\nspecifies the corresponding key backing the KV certificate.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "kid")]

      public string Kid { get; }
    content.vb: >-
      <JsonProperty(PropertyName:="kid")>

      Public ReadOnly Property Kid As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.KeyVault.Models.SecretBundle.Kid*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: kid
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.KeyVault.Models.SecretBundle.Managed
  commentId: P:Microsoft.Azure.KeyVault.Models.SecretBundle.Managed
  id: Managed
  parent: Microsoft.Azure.KeyVault.Models.SecretBundle
  langs:
  - csharp
  - vb
  name: Managed
  nameWithType: SecretBundle.Managed
  fullName: Microsoft.Azure.KeyVault.Models.SecretBundle.Managed
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/SecretBundle.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Managed
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/SecretBundle.cs
    startLine: 96
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault.Models
  summary: "\nGets true if the secret's lifetime is managed by key vault i.e. if\nthis is a secret backing a certificate, then managed will be true.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "managed")]

      public bool ? Managed { get; }
    content.vb: >-
      <JsonProperty(PropertyName:="managed")>

      Public ReadOnly Property Managed As Boolean?
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
  overload: Microsoft.Azure.KeyVault.Models.SecretBundle.Managed*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: managed
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Microsoft.Azure.KeyVault.Models
  commentId: N:Microsoft.Azure.KeyVault.Models
  isExternal: false
  name: Microsoft.Azure.KeyVault.Models
  nameWithType: Microsoft.Azure.KeyVault.Models
  fullName: Microsoft.Azure.KeyVault.Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.KeyVault.Models.SecretBundle.SecretIdentifier*
  commentId: Overload:Microsoft.Azure.KeyVault.Models.SecretBundle.SecretIdentifier
  isExternal: false
  name: SecretIdentifier
  nameWithType: SecretBundle.SecretIdentifier
  fullName: Microsoft.Azure.KeyVault.Models.SecretBundle.SecretIdentifier
- uid: Microsoft.Azure.KeyVault.SecretIdentifier
  commentId: T:Microsoft.Azure.KeyVault.SecretIdentifier
  parent: Microsoft.Azure.KeyVault
  isExternal: false
  name: SecretIdentifier
  nameWithType: SecretIdentifier
  fullName: Microsoft.Azure.KeyVault.SecretIdentifier
- uid: Microsoft.Azure.KeyVault
  commentId: N:Microsoft.Azure.KeyVault
  isExternal: false
  name: Microsoft.Azure.KeyVault
  nameWithType: Microsoft.Azure.KeyVault
  fullName: Microsoft.Azure.KeyVault
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.KeyVault.Models.SecretBundle.ToString*
  commentId: Overload:Microsoft.Azure.KeyVault.Models.SecretBundle.ToString
  isExternal: false
  name: ToString
  nameWithType: SecretBundle.ToString
  fullName: Microsoft.Azure.KeyVault.Models.SecretBundle.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Azure.KeyVault.Models.SecretBundle.#ctor*
  commentId: Overload:Microsoft.Azure.KeyVault.Models.SecretBundle.#ctor
  isExternal: false
  name: SecretBundle
  nameWithType: SecretBundle.SecretBundle
  fullName: Microsoft.Azure.KeyVault.Models.SecretBundle.SecretBundle
- uid: Microsoft.Azure.KeyVault.Models.SecretAttributes
  commentId: T:Microsoft.Azure.KeyVault.Models.SecretAttributes
  parent: Microsoft.Azure.KeyVault.Models
  isExternal: false
  name: SecretAttributes
  nameWithType: SecretAttributes
  fullName: Microsoft.Azure.KeyVault.Models.SecretAttributes
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String>
  nameWithType: IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  nameWithType.vb: IDictionary(Of String, String)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullname.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.KeyVault.Models.SecretBundle.Value*
  commentId: Overload:Microsoft.Azure.KeyVault.Models.SecretBundle.Value
  isExternal: false
  name: Value
  nameWithType: SecretBundle.Value
  fullName: Microsoft.Azure.KeyVault.Models.SecretBundle.Value
- uid: Microsoft.Azure.KeyVault.Models.SecretBundle.Id*
  commentId: Overload:Microsoft.Azure.KeyVault.Models.SecretBundle.Id
  isExternal: false
  name: Id
  nameWithType: SecretBundle.Id
  fullName: Microsoft.Azure.KeyVault.Models.SecretBundle.Id
- uid: Microsoft.Azure.KeyVault.Models.SecretBundle.ContentType*
  commentId: Overload:Microsoft.Azure.KeyVault.Models.SecretBundle.ContentType
  isExternal: false
  name: ContentType
  nameWithType: SecretBundle.ContentType
  fullName: Microsoft.Azure.KeyVault.Models.SecretBundle.ContentType
- uid: Microsoft.Azure.KeyVault.Models.SecretBundle.Attributes*
  commentId: Overload:Microsoft.Azure.KeyVault.Models.SecretBundle.Attributes
  isExternal: false
  name: Attributes
  nameWithType: SecretBundle.Attributes
  fullName: Microsoft.Azure.KeyVault.Models.SecretBundle.Attributes
- uid: Microsoft.Azure.KeyVault.Models.SecretBundle.Tags*
  commentId: Overload:Microsoft.Azure.KeyVault.Models.SecretBundle.Tags
  isExternal: false
  name: Tags
  nameWithType: SecretBundle.Tags
  fullName: Microsoft.Azure.KeyVault.Models.SecretBundle.Tags
- uid: Microsoft.Azure.KeyVault.Models.SecretBundle.Kid*
  commentId: Overload:Microsoft.Azure.KeyVault.Models.SecretBundle.Kid
  isExternal: false
  name: Kid
  nameWithType: SecretBundle.Kid
  fullName: Microsoft.Azure.KeyVault.Models.SecretBundle.Kid
- uid: Microsoft.Azure.KeyVault.Models.SecretBundle.Managed*
  commentId: Overload:Microsoft.Azure.KeyVault.Models.SecretBundle.Managed
  isExternal: false
  name: Managed
  nameWithType: SecretBundle.Managed
  fullName: Microsoft.Azure.KeyVault.Models.SecretBundle.Managed
