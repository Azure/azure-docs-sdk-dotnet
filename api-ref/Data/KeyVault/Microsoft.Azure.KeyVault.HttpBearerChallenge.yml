### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.KeyVault.HttpBearerChallenge
  commentId: T:Microsoft.Azure.KeyVault.HttpBearerChallenge
  id: HttpBearerChallenge
  parent: Microsoft.Azure.KeyVault
  children:
  - Microsoft.Azure.KeyVault.HttpBearerChallenge.#ctor(System.Uri,System.String)
  - Microsoft.Azure.KeyVault.HttpBearerChallenge.AuthorizationServer
  - Microsoft.Azure.KeyVault.HttpBearerChallenge.IsBearerChallenge(System.String)
  - Microsoft.Azure.KeyVault.HttpBearerChallenge.Resource
  - Microsoft.Azure.KeyVault.HttpBearerChallenge.Scope
  - Microsoft.Azure.KeyVault.HttpBearerChallenge.SourceAuthority
  - Microsoft.Azure.KeyVault.HttpBearerChallenge.SourceUri
  - Microsoft.Azure.KeyVault.HttpBearerChallenge.TryGetValue(System.String,System.String@)
  langs:
  - csharp
  - vb
  name: HttpBearerChallenge
  nameWithType: HttpBearerChallenge
  fullName: Microsoft.Azure.KeyVault.HttpBearerChallenge
  type: Class
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Customized/Authentication/HttpBearerChallenge.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: HttpBearerChallenge
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Customized/Authentication/HttpBearerChallenge.cs
    startLine: 12
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault
  summary: "\nHandles http bearer challenge operations\n"
  example: []
  syntax:
    content: public sealed class HttpBearerChallenge
    content.vb: Public NotInheritable Class HttpBearerChallenge
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.Azure.KeyVault.HttpBearerChallenge.IsBearerChallenge(System.String)
  commentId: M:Microsoft.Azure.KeyVault.HttpBearerChallenge.IsBearerChallenge(System.String)
  id: IsBearerChallenge(System.String)
  parent: Microsoft.Azure.KeyVault.HttpBearerChallenge
  langs:
  - csharp
  - vb
  name: IsBearerChallenge(String)
  nameWithType: HttpBearerChallenge.IsBearerChallenge(String)
  fullName: Microsoft.Azure.KeyVault.HttpBearerChallenge.IsBearerChallenge(System.String)
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Customized/Authentication/HttpBearerChallenge.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: IsBearerChallenge
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Customized/Authentication/HttpBearerChallenge.cs
    startLine: 27
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault
  summary: "\nTests whether an authentication header is a Bearer challenge\n"
  remarks: "\nThis method is forgiving: if the parameter is null, or the scheme\nin the header is missing, then it will simply return false.\n"
  example: []
  syntax:
    content: public static bool IsBearerChallenge(string challenge)
    content.vb: Public Shared Function IsBearerChallenge(challenge As String) As Boolean
    parameters:
    - id: challenge
      type: System.String
      description: The AuthenticationHeaderValue to test
    return:
      type: System.Boolean
      description: True if the header is a Bearer challenge
  overload: Microsoft.Azure.KeyVault.HttpBearerChallenge.IsBearerChallenge*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Azure.KeyVault.HttpBearerChallenge.#ctor(System.Uri,System.String)
  commentId: M:Microsoft.Azure.KeyVault.HttpBearerChallenge.#ctor(System.Uri,System.String)
  id: '#ctor(System.Uri,System.String)'
  parent: Microsoft.Azure.KeyVault.HttpBearerChallenge
  langs:
  - csharp
  - vb
  name: HttpBearerChallenge(Uri, String)
  nameWithType: HttpBearerChallenge.HttpBearerChallenge(Uri, String)
  fullName: Microsoft.Azure.KeyVault.HttpBearerChallenge.HttpBearerChallenge(System.Uri, System.String)
  type: Constructor
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Customized/Authentication/HttpBearerChallenge.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Customized/Authentication/HttpBearerChallenge.cs
    startLine: 46
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault
  summary: "\nParses an HTTP WWW-Authentication Bearer challenge from a server.\n"
  example: []
  syntax:
    content: public HttpBearerChallenge(Uri requestUri, string challenge)
    content.vb: Public Sub New(requestUri As Uri, challenge As String)
    parameters:
    - id: requestUri
      type: System.Uri
    - id: challenge
      type: System.String
      description: The AuthenticationHeaderValue to parse
  overload: Microsoft.Azure.KeyVault.HttpBearerChallenge.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.HttpBearerChallenge.TryGetValue(System.String,System.String@)
  commentId: M:Microsoft.Azure.KeyVault.HttpBearerChallenge.TryGetValue(System.String,System.String@)
  id: TryGetValue(System.String,System.String@)
  parent: Microsoft.Azure.KeyVault.HttpBearerChallenge
  langs:
  - csharp
  - vb
  name: TryGetValue(String, out String)
  nameWithType: HttpBearerChallenge.TryGetValue(String, out String)
  fullName: Microsoft.Azure.KeyVault.HttpBearerChallenge.TryGetValue(System.String, out System.String)
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Customized/Authentication/HttpBearerChallenge.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: TryGetValue
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Customized/Authentication/HttpBearerChallenge.cs
    startLine: 101
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault
  summary: "\nReturns the value stored at the specified key.\n"
  remarks: "\nIf the key does not exist, will return false and the\ncontent of value will not be changed\n"
  example: []
  syntax:
    content: public bool TryGetValue(string key, out string value)
    content.vb: Public Function TryGetValue(key As String, ByRef value As String) As Boolean
    parameters:
    - id: key
      type: System.String
      description: The key to be retrieved
    - id: value
      type: System.String
      description: The value for the specified key
    return:
      type: System.Boolean
      description: True when the key is found, false when it is not
  overload: Microsoft.Azure.KeyVault.HttpBearerChallenge.TryGetValue*
  nameWithType.vb: HttpBearerChallenge.TryGetValue(String, ByRef String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.KeyVault.HttpBearerChallenge.TryGetValue(System.String, ByRef System.String)
  name.vb: TryGetValue(String, ByRef String)
- uid: Microsoft.Azure.KeyVault.HttpBearerChallenge.AuthorizationServer
  commentId: P:Microsoft.Azure.KeyVault.HttpBearerChallenge.AuthorizationServer
  id: AuthorizationServer
  parent: Microsoft.Azure.KeyVault.HttpBearerChallenge
  langs:
  - csharp
  - vb
  name: AuthorizationServer
  nameWithType: HttpBearerChallenge.AuthorizationServer
  fullName: Microsoft.Azure.KeyVault.HttpBearerChallenge.AuthorizationServer
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Customized/Authentication/HttpBearerChallenge.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: AuthorizationServer
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Customized/Authentication/HttpBearerChallenge.cs
    startLine: 110
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault
  summary: "\nReturns the URI for the Authorization server if present,\notherwise string.Empty\n"
  example: []
  syntax:
    content: public string AuthorizationServer { get; }
    content.vb: Public ReadOnly Property AuthorizationServer As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.KeyVault.HttpBearerChallenge.AuthorizationServer*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.KeyVault.HttpBearerChallenge.Resource
  commentId: P:Microsoft.Azure.KeyVault.HttpBearerChallenge.Resource
  id: Resource
  parent: Microsoft.Azure.KeyVault.HttpBearerChallenge
  langs:
  - csharp
  - vb
  name: Resource
  nameWithType: HttpBearerChallenge.Resource
  fullName: Microsoft.Azure.KeyVault.HttpBearerChallenge.Resource
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Customized/Authentication/HttpBearerChallenge.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Resource
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Customized/Authentication/HttpBearerChallenge.cs
    startLine: 130
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault
  summary: "\nReturns the Realm value if present, otherwise the Authority\nof the request URI given in the ctor\n"
  example: []
  syntax:
    content: public string Resource { get; }
    content.vb: Public ReadOnly Property Resource As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.KeyVault.HttpBearerChallenge.Resource*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.KeyVault.HttpBearerChallenge.Scope
  commentId: P:Microsoft.Azure.KeyVault.HttpBearerChallenge.Scope
  id: Scope
  parent: Microsoft.Azure.KeyVault.HttpBearerChallenge
  langs:
  - csharp
  - vb
  name: Scope
  nameWithType: HttpBearerChallenge.Scope
  fullName: Microsoft.Azure.KeyVault.HttpBearerChallenge.Scope
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Customized/Authentication/HttpBearerChallenge.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Scope
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Customized/Authentication/HttpBearerChallenge.cs
    startLine: 146
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault
  summary: "\nReturns the Scope value if present, otherwise string.Empty\n"
  example: []
  syntax:
    content: public string Scope { get; }
    content.vb: Public ReadOnly Property Scope As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.KeyVault.HttpBearerChallenge.Scope*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.KeyVault.HttpBearerChallenge.SourceAuthority
  commentId: P:Microsoft.Azure.KeyVault.HttpBearerChallenge.SourceAuthority
  id: SourceAuthority
  parent: Microsoft.Azure.KeyVault.HttpBearerChallenge
  langs:
  - csharp
  - vb
  name: SourceAuthority
  nameWithType: HttpBearerChallenge.SourceAuthority
  fullName: Microsoft.Azure.KeyVault.HttpBearerChallenge.SourceAuthority
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Customized/Authentication/HttpBearerChallenge.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: SourceAuthority
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Customized/Authentication/HttpBearerChallenge.cs
    startLine: 162
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault
  summary: "\nThe Authority of the request URI\n"
  example: []
  syntax:
    content: public string SourceAuthority { get; }
    content.vb: Public ReadOnly Property SourceAuthority As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.KeyVault.HttpBearerChallenge.SourceAuthority*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.KeyVault.HttpBearerChallenge.SourceUri
  commentId: P:Microsoft.Azure.KeyVault.HttpBearerChallenge.SourceUri
  id: SourceUri
  parent: Microsoft.Azure.KeyVault.HttpBearerChallenge
  langs:
  - csharp
  - vb
  name: SourceUri
  nameWithType: HttpBearerChallenge.SourceUri
  fullName: Microsoft.Azure.KeyVault.HttpBearerChallenge.SourceUri
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Customized/Authentication/HttpBearerChallenge.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: SourceUri
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Customized/Authentication/HttpBearerChallenge.cs
    startLine: 173
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault
  summary: "\nThe source URI\n"
  example: []
  syntax:
    content: public Uri SourceUri { get; }
    content.vb: Public ReadOnly Property SourceUri As Uri
    parameters: []
    return:
      type: System.Uri
  overload: Microsoft.Azure.KeyVault.HttpBearerChallenge.SourceUri*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Microsoft.Azure.KeyVault
  commentId: N:Microsoft.Azure.KeyVault
  isExternal: false
  name: Microsoft.Azure.KeyVault
  nameWithType: Microsoft.Azure.KeyVault
  fullName: Microsoft.Azure.KeyVault
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.KeyVault.HttpBearerChallenge.IsBearerChallenge*
  commentId: Overload:Microsoft.Azure.KeyVault.HttpBearerChallenge.IsBearerChallenge
  isExternal: false
  name: IsBearerChallenge
  nameWithType: HttpBearerChallenge.IsBearerChallenge
  fullName: Microsoft.Azure.KeyVault.HttpBearerChallenge.IsBearerChallenge
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Azure.KeyVault.HttpBearerChallenge.#ctor*
  commentId: Overload:Microsoft.Azure.KeyVault.HttpBearerChallenge.#ctor
  isExternal: false
  name: HttpBearerChallenge
  nameWithType: HttpBearerChallenge.HttpBearerChallenge
  fullName: Microsoft.Azure.KeyVault.HttpBearerChallenge.HttpBearerChallenge
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: Microsoft.Azure.KeyVault.HttpBearerChallenge.TryGetValue*
  commentId: Overload:Microsoft.Azure.KeyVault.HttpBearerChallenge.TryGetValue
  isExternal: false
  name: TryGetValue
  nameWithType: HttpBearerChallenge.TryGetValue
  fullName: Microsoft.Azure.KeyVault.HttpBearerChallenge.TryGetValue
- uid: Microsoft.Azure.KeyVault.HttpBearerChallenge.AuthorizationServer*
  commentId: Overload:Microsoft.Azure.KeyVault.HttpBearerChallenge.AuthorizationServer
  isExternal: false
  name: AuthorizationServer
  nameWithType: HttpBearerChallenge.AuthorizationServer
  fullName: Microsoft.Azure.KeyVault.HttpBearerChallenge.AuthorizationServer
- uid: Microsoft.Azure.KeyVault.HttpBearerChallenge.Resource*
  commentId: Overload:Microsoft.Azure.KeyVault.HttpBearerChallenge.Resource
  isExternal: false
  name: Resource
  nameWithType: HttpBearerChallenge.Resource
  fullName: Microsoft.Azure.KeyVault.HttpBearerChallenge.Resource
- uid: Microsoft.Azure.KeyVault.HttpBearerChallenge.Scope*
  commentId: Overload:Microsoft.Azure.KeyVault.HttpBearerChallenge.Scope
  isExternal: false
  name: Scope
  nameWithType: HttpBearerChallenge.Scope
  fullName: Microsoft.Azure.KeyVault.HttpBearerChallenge.Scope
- uid: Microsoft.Azure.KeyVault.HttpBearerChallenge.SourceAuthority*
  commentId: Overload:Microsoft.Azure.KeyVault.HttpBearerChallenge.SourceAuthority
  isExternal: false
  name: SourceAuthority
  nameWithType: HttpBearerChallenge.SourceAuthority
  fullName: Microsoft.Azure.KeyVault.HttpBearerChallenge.SourceAuthority
- uid: Microsoft.Azure.KeyVault.HttpBearerChallenge.SourceUri*
  commentId: Overload:Microsoft.Azure.KeyVault.HttpBearerChallenge.SourceUri
  isExternal: false
  name: SourceUri
  nameWithType: HttpBearerChallenge.SourceUri
  fullName: Microsoft.Azure.KeyVault.HttpBearerChallenge.SourceUri
