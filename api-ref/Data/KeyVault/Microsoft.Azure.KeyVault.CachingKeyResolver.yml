### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.KeyVault.CachingKeyResolver
  commentId: T:Microsoft.Azure.KeyVault.CachingKeyResolver
  id: CachingKeyResolver
  parent: Microsoft.Azure.KeyVault
  children:
  - Microsoft.Azure.KeyVault.CachingKeyResolver.#ctor(System.Int32,Microsoft.Azure.KeyVault.Core.IKeyResolver)
  - Microsoft.Azure.KeyVault.CachingKeyResolver.Dispose
  - Microsoft.Azure.KeyVault.CachingKeyResolver.Dispose(System.Boolean)
  - Microsoft.Azure.KeyVault.CachingKeyResolver.ResolveKeyAsync(System.String,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: CachingKeyResolver
  nameWithType: CachingKeyResolver
  fullName: Microsoft.Azure.KeyVault.CachingKeyResolver
  type: Class
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.Extensions/CachingKeyResolver.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CachingKeyResolver
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.Extensions/CachingKeyResolver.cs
    startLine: 15
  assemblies:
  - Microsoft.Azure.KeyVault.Extensions
  namespace: Microsoft.Azure.KeyVault
  summary: "\nA simple caching Key Resolver using a LRU cache\n"
  example: []
  syntax:
    content: 'public class CachingKeyResolver : IKeyResolver, IDisposable'
    content.vb: >-
      Public Class CachingKeyResolver
          Implements IKeyResolver, IDisposable
  inheritance:
  - System.Object
  implements:
  - Microsoft.Azure.KeyVault.Core.IKeyResolver
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.KeyVault.CachingKeyResolver.#ctor(System.Int32,Microsoft.Azure.KeyVault.Core.IKeyResolver)
  commentId: M:Microsoft.Azure.KeyVault.CachingKeyResolver.#ctor(System.Int32,Microsoft.Azure.KeyVault.Core.IKeyResolver)
  id: '#ctor(System.Int32,Microsoft.Azure.KeyVault.Core.IKeyResolver)'
  parent: Microsoft.Azure.KeyVault.CachingKeyResolver
  langs:
  - csharp
  - vb
  name: CachingKeyResolver(Int32, IKeyResolver)
  nameWithType: CachingKeyResolver.CachingKeyResolver(Int32, IKeyResolver)
  fullName: Microsoft.Azure.KeyVault.CachingKeyResolver.CachingKeyResolver(System.Int32, Microsoft.Azure.KeyVault.Core.IKeyResolver)
  type: Constructor
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.Extensions/CachingKeyResolver.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.Extensions/CachingKeyResolver.cs
    startLine: 26
  assemblies:
  - Microsoft.Azure.KeyVault.Extensions
  namespace: Microsoft.Azure.KeyVault
  summary: "\nConstructor.\n"
  example: []
  syntax:
    content: public CachingKeyResolver(int capacity, IKeyResolver inner)
    content.vb: Public Sub New(capacity As Integer, inner As IKeyResolver)
    parameters:
    - id: capacity
      type: System.Int32
      description: The maximim capacity for the cache
    - id: inner
      type: Microsoft.Azure.KeyVault.Core.IKeyResolver
      description: The IKeyResolver to wrap
  overload: Microsoft.Azure.KeyVault.CachingKeyResolver.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.CachingKeyResolver.ResolveKeyAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.KeyVault.CachingKeyResolver.ResolveKeyAsync(System.String,System.Threading.CancellationToken)
  id: ResolveKeyAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.Azure.KeyVault.CachingKeyResolver
  langs:
  - csharp
  - vb
  name: ResolveKeyAsync(String, CancellationToken)
  nameWithType: CachingKeyResolver.ResolveKeyAsync(String, CancellationToken)
  fullName: Microsoft.Azure.KeyVault.CachingKeyResolver.ResolveKeyAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.Extensions/CachingKeyResolver.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ResolveKeyAsync
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.Extensions/CachingKeyResolver.cs
    startLine: 43
  assemblies:
  - Microsoft.Azure.KeyVault.Extensions
  namespace: Microsoft.Azure.KeyVault
  summary: "\nResolve a key indicated by its ID to the corresponding <xref href=\"Microsoft.Azure.KeyVault.Core.IKey\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public Task<IKey> ResolveKeyAsync(string kid, CancellationToken token)
    content.vb: Public Function ResolveKeyAsync(kid As String, token As CancellationToken) As Task(Of IKey)
    parameters:
    - id: kid
      type: System.String
      description: 'the key identifier '
    - id: token
      type: System.Threading.CancellationToken
      description: 'the cancellation token '
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.KeyVault.Core.IKey}
      description: task result of the <xref href="Microsoft.Azure.KeyVault.Core.IKey" data-throw-if-not-resolved="false"></xref>
  overload: Microsoft.Azure.KeyVault.CachingKeyResolver.ResolveKeyAsync*
  implements:
  - Microsoft.Azure.KeyVault.Core.IKeyResolver.ResolveKeyAsync(System.String,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.CachingKeyResolver.Dispose
  commentId: M:Microsoft.Azure.KeyVault.CachingKeyResolver.Dispose
  id: Dispose
  parent: Microsoft.Azure.KeyVault.CachingKeyResolver
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: CachingKeyResolver.Dispose()
  fullName: Microsoft.Azure.KeyVault.CachingKeyResolver.Dispose()
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.Extensions/CachingKeyResolver.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Dispose
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.Extensions/CachingKeyResolver.cs
    startLine: 76
  assemblies:
  - Microsoft.Azure.KeyVault.Extensions
  namespace: Microsoft.Azure.KeyVault
  summary: "\nDisposes the object\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Microsoft.Azure.KeyVault.CachingKeyResolver.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.CachingKeyResolver.Dispose(System.Boolean)
  commentId: M:Microsoft.Azure.KeyVault.CachingKeyResolver.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: Microsoft.Azure.KeyVault.CachingKeyResolver
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: CachingKeyResolver.Dispose(Boolean)
  fullName: Microsoft.Azure.KeyVault.CachingKeyResolver.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.Extensions/CachingKeyResolver.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Dispose
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.Extensions/CachingKeyResolver.cs
    startLine: 82
  assemblies:
  - Microsoft.Azure.KeyVault.Extensions
  namespace: Microsoft.Azure.KeyVault
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
  overload: Microsoft.Azure.KeyVault.CachingKeyResolver.Dispose*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: Microsoft.Azure.KeyVault
  commentId: N:Microsoft.Azure.KeyVault
  isExternal: false
  name: Microsoft.Azure.KeyVault
  nameWithType: Microsoft.Azure.KeyVault
  fullName: Microsoft.Azure.KeyVault
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Azure.KeyVault.Core.IKeyResolver
  commentId: T:Microsoft.Azure.KeyVault.Core.IKeyResolver
  parent: Microsoft.Azure.KeyVault.Core
  isExternal: false
  name: IKeyResolver
  nameWithType: IKeyResolver
  fullName: Microsoft.Azure.KeyVault.Core.IKeyResolver
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.KeyVault.Core
  commentId: N:Microsoft.Azure.KeyVault.Core
  isExternal: false
  name: Microsoft.Azure.KeyVault.Core
  nameWithType: Microsoft.Azure.KeyVault.Core
  fullName: Microsoft.Azure.KeyVault.Core
- uid: Microsoft.Azure.KeyVault.CachingKeyResolver.#ctor*
  commentId: Overload:Microsoft.Azure.KeyVault.CachingKeyResolver.#ctor
  isExternal: false
  name: CachingKeyResolver
  nameWithType: CachingKeyResolver.CachingKeyResolver
  fullName: Microsoft.Azure.KeyVault.CachingKeyResolver.CachingKeyResolver
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Azure.KeyVault.Core.IKey
  commentId: T:Microsoft.Azure.KeyVault.Core.IKey
  parent: Microsoft.Azure.KeyVault.Core
  isExternal: false
  name: IKey
  nameWithType: IKey
  fullName: Microsoft.Azure.KeyVault.Core.IKey
- uid: Microsoft.Azure.KeyVault.CachingKeyResolver.ResolveKeyAsync*
  commentId: Overload:Microsoft.Azure.KeyVault.CachingKeyResolver.ResolveKeyAsync
  isExternal: false
  name: ResolveKeyAsync
  nameWithType: CachingKeyResolver.ResolveKeyAsync
  fullName: Microsoft.Azure.KeyVault.CachingKeyResolver.ResolveKeyAsync
- uid: Microsoft.Azure.KeyVault.Core.IKeyResolver.ResolveKeyAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.KeyVault.Core.IKeyResolver.ResolveKeyAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.Azure.KeyVault.Core.IKeyResolver
  isExternal: true
  name: ResolveKeyAsync(String, CancellationToken)
  nameWithType: IKeyResolver.ResolveKeyAsync(String, CancellationToken)
  fullName: Microsoft.Azure.KeyVault.Core.IKeyResolver.ResolveKeyAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.Azure.KeyVault.Core.IKeyResolver.ResolveKeyAsync(System.String,System.Threading.CancellationToken)
    name: ResolveKeyAsync
    nameWithType: IKeyResolver.ResolveKeyAsync
    fullName: Microsoft.Azure.KeyVault.Core.IKeyResolver.ResolveKeyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.KeyVault.Core.IKeyResolver.ResolveKeyAsync(System.String,System.Threading.CancellationToken)
    name: ResolveKeyAsync
    nameWithType: IKeyResolver.ResolveKeyAsync
    fullName: Microsoft.Azure.KeyVault.Core.IKeyResolver.ResolveKeyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{Microsoft.Azure.KeyVault.Core.IKey}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.KeyVault.Core.IKey}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IKey>
  nameWithType: Task<IKey>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.KeyVault.Core.IKey>
  nameWithType.vb: Task(Of IKey)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.KeyVault.Core.IKey)
  name.vb: Task(Of IKey)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.KeyVault.Core.IKey
    name: IKey
    nameWithType: IKey
    fullName: Microsoft.Azure.KeyVault.Core.IKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.KeyVault.Core.IKey
    name: IKey
    nameWithType: IKey
    fullName: Microsoft.Azure.KeyVault.Core.IKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.Azure.KeyVault.CachingKeyResolver.Dispose*
  commentId: Overload:Microsoft.Azure.KeyVault.CachingKeyResolver.Dispose
  isExternal: false
  name: Dispose
  nameWithType: CachingKeyResolver.Dispose
  fullName: Microsoft.Azure.KeyVault.CachingKeyResolver.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
