### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.KeyVault.Models.CertificateBundle
  commentId: T:Microsoft.Azure.KeyVault.Models.CertificateBundle
  id: CertificateBundle
  parent: Microsoft.Azure.KeyVault.Models
  children:
  - Microsoft.Azure.KeyVault.Models.CertificateBundle.#ctor
  - Microsoft.Azure.KeyVault.Models.CertificateBundle.#ctor(System.String,System.String,System.String,System.Byte[],Microsoft.Azure.KeyVault.Models.CertificatePolicy,System.Byte[],System.String,Microsoft.Azure.KeyVault.Models.CertificateAttributes,System.Collections.Generic.IDictionary{System.String,System.String})
  - Microsoft.Azure.KeyVault.Models.CertificateBundle.Attributes
  - Microsoft.Azure.KeyVault.Models.CertificateBundle.Cer
  - Microsoft.Azure.KeyVault.Models.CertificateBundle.CertificateIdentifier
  - Microsoft.Azure.KeyVault.Models.CertificateBundle.ContentType
  - Microsoft.Azure.KeyVault.Models.CertificateBundle.Id
  - Microsoft.Azure.KeyVault.Models.CertificateBundle.KeyIdentifier
  - Microsoft.Azure.KeyVault.Models.CertificateBundle.Kid
  - Microsoft.Azure.KeyVault.Models.CertificateBundle.Policy
  - Microsoft.Azure.KeyVault.Models.CertificateBundle.SecretIdentifier
  - Microsoft.Azure.KeyVault.Models.CertificateBundle.Sid
  - Microsoft.Azure.KeyVault.Models.CertificateBundle.Tags
  - Microsoft.Azure.KeyVault.Models.CertificateBundle.Validate
  - Microsoft.Azure.KeyVault.Models.CertificateBundle.X509Thumbprint
  langs:
  - csharp
  - vb
  name: CertificateBundle
  nameWithType: CertificateBundle
  fullName: Microsoft.Azure.KeyVault.Models.CertificateBundle
  type: Class
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/CertificateBundle.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CertificateBundle
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/CertificateBundle.cs
    startLine: 22
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault.Models
  summary: "\nA certificate bundle consists of a certificate (X509) plus its\nattributes.\n"
  example: []
  syntax:
    content: public class CertificateBundle
    content.vb: Public Class CertificateBundle
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.KeyVault.Models.CertificateBundle.SecretIdentifier
  commentId: P:Microsoft.Azure.KeyVault.Models.CertificateBundle.SecretIdentifier
  id: SecretIdentifier
  parent: Microsoft.Azure.KeyVault.Models.CertificateBundle
  langs:
  - csharp
  - vb
  name: SecretIdentifier
  nameWithType: CertificateBundle.SecretIdentifier
  fullName: Microsoft.Azure.KeyVault.Models.CertificateBundle.SecretIdentifier
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Customized/CertificateBundle.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: SecretIdentifier
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Customized/CertificateBundle.cs
    startLine: 11
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault.Models
  summary: "\nThis is the Id of the secret backing the certificate.\n"
  example: []
  syntax:
    content: public SecretIdentifier SecretIdentifier { get; }
    content.vb: Public ReadOnly Property SecretIdentifier As SecretIdentifier
    parameters: []
    return:
      type: Microsoft.Azure.KeyVault.SecretIdentifier
  overload: Microsoft.Azure.KeyVault.Models.CertificateBundle.SecretIdentifier*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.KeyVault.Models.CertificateBundle.KeyIdentifier
  commentId: P:Microsoft.Azure.KeyVault.Models.CertificateBundle.KeyIdentifier
  id: KeyIdentifier
  parent: Microsoft.Azure.KeyVault.Models.CertificateBundle
  langs:
  - csharp
  - vb
  name: KeyIdentifier
  nameWithType: CertificateBundle.KeyIdentifier
  fullName: Microsoft.Azure.KeyVault.Models.CertificateBundle.KeyIdentifier
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Customized/CertificateBundle.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: KeyIdentifier
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Customized/CertificateBundle.cs
    startLine: 25
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault.Models
  summary: "\nThis is the Id of the key backing the certificate.\n"
  example: []
  syntax:
    content: public KeyIdentifier KeyIdentifier { get; }
    content.vb: Public ReadOnly Property KeyIdentifier As KeyIdentifier
    parameters: []
    return:
      type: Microsoft.Azure.KeyVault.KeyIdentifier
  overload: Microsoft.Azure.KeyVault.Models.CertificateBundle.KeyIdentifier*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.KeyVault.Models.CertificateBundle.CertificateIdentifier
  commentId: P:Microsoft.Azure.KeyVault.Models.CertificateBundle.CertificateIdentifier
  id: CertificateIdentifier
  parent: Microsoft.Azure.KeyVault.Models.CertificateBundle
  langs:
  - csharp
  - vb
  name: CertificateIdentifier
  nameWithType: CertificateBundle.CertificateIdentifier
  fullName: Microsoft.Azure.KeyVault.Models.CertificateBundle.CertificateIdentifier
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Customized/CertificateBundle.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CertificateIdentifier
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Customized/CertificateBundle.cs
    startLine: 39
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault.Models
  summary: "\nThis is the Id of the certificate.\n"
  example: []
  syntax:
    content: public CertificateIdentifier CertificateIdentifier { get; }
    content.vb: Public ReadOnly Property CertificateIdentifier As CertificateIdentifier
    parameters: []
    return:
      type: Microsoft.Azure.KeyVault.CertificateIdentifier
  overload: Microsoft.Azure.KeyVault.Models.CertificateBundle.CertificateIdentifier*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.KeyVault.Models.CertificateBundle.#ctor
  commentId: M:Microsoft.Azure.KeyVault.Models.CertificateBundle.#ctor
  id: '#ctor'
  parent: Microsoft.Azure.KeyVault.Models.CertificateBundle
  langs:
  - csharp
  - vb
  name: CertificateBundle()
  nameWithType: CertificateBundle.CertificateBundle()
  fullName: Microsoft.Azure.KeyVault.Models.CertificateBundle.CertificateBundle()
  type: Constructor
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/CertificateBundle.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/CertificateBundle.cs
    startLine: 27
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault.Models
  summary: "\nInitializes a new instance of the CertificateBundle class.\n"
  example: []
  syntax:
    content: public CertificateBundle()
    content.vb: Public Sub New
  overload: Microsoft.Azure.KeyVault.Models.CertificateBundle.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.Models.CertificateBundle.#ctor(System.String,System.String,System.String,System.Byte[],Microsoft.Azure.KeyVault.Models.CertificatePolicy,System.Byte[],System.String,Microsoft.Azure.KeyVault.Models.CertificateAttributes,System.Collections.Generic.IDictionary{System.String,System.String})
  commentId: M:Microsoft.Azure.KeyVault.Models.CertificateBundle.#ctor(System.String,System.String,System.String,System.Byte[],Microsoft.Azure.KeyVault.Models.CertificatePolicy,System.Byte[],System.String,Microsoft.Azure.KeyVault.Models.CertificateAttributes,System.Collections.Generic.IDictionary{System.String,System.String})
  id: '#ctor(System.String,System.String,System.String,System.Byte[],Microsoft.Azure.KeyVault.Models.CertificatePolicy,System.Byte[],System.String,Microsoft.Azure.KeyVault.Models.CertificateAttributes,System.Collections.Generic.IDictionary{System.String,System.String})'
  parent: Microsoft.Azure.KeyVault.Models.CertificateBundle
  langs:
  - csharp
  - vb
  name: CertificateBundle(String, String, String, Byte[], CertificatePolicy, Byte[], String, CertificateAttributes, IDictionary<String, String>)
  nameWithType: CertificateBundle.CertificateBundle(String, String, String, Byte[], CertificatePolicy, Byte[], String, CertificateAttributes, IDictionary<String, String>)
  fullName: Microsoft.Azure.KeyVault.Models.CertificateBundle.CertificateBundle(System.String, System.String, System.String, System.Byte[], Microsoft.Azure.KeyVault.Models.CertificatePolicy, System.Byte[], System.String, Microsoft.Azure.KeyVault.Models.CertificateAttributes, System.Collections.Generic.IDictionary<System.String, System.String>)
  type: Constructor
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/CertificateBundle.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/CertificateBundle.cs
    startLine: 42
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault.Models
  summary: "\nInitializes a new instance of the CertificateBundle class.\n"
  example: []
  syntax:
    content: public CertificateBundle(string id = null, string kid = null, string sid = null, byte[] x509Thumbprint = null, CertificatePolicy policy = null, byte[] cer = null, string contentType = null, CertificateAttributes attributes = null, IDictionary<string, string> tags = null)
    content.vb: Public Sub New(id As String = Nothing, kid As String = Nothing, sid As String = Nothing, x509Thumbprint As Byte() = Nothing, policy As CertificatePolicy = Nothing, cer As Byte() = Nothing, contentType As String = Nothing, attributes As CertificateAttributes = Nothing, tags As IDictionary(Of String, String) = Nothing)
    parameters:
    - id: id
      type: System.String
      description: The certificate id
    - id: kid
      type: System.String
      description: The key id
    - id: sid
      type: System.String
      description: The secret id
    - id: x509Thumbprint
      type: System.Byte[]
      description: Thumbprint of the certificate.
    - id: policy
      type: Microsoft.Azure.KeyVault.Models.CertificatePolicy
      description: The management policy.
    - id: cer
      type: System.Byte[]
      description: CER contents of x509 certificate.
    - id: contentType
      type: System.String
      description: The content type of the secret
    - id: attributes
      type: Microsoft.Azure.KeyVault.Models.CertificateAttributes
      description: The certificate attributes.
    - id: tags
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: >-
        Application-specific metadata in the form of

        key-value pairs
  overload: Microsoft.Azure.KeyVault.Models.CertificateBundle.#ctor*
  nameWithType.vb: CertificateBundle.CertificateBundle(String, String, String, Byte(), CertificatePolicy, Byte(), String, CertificateAttributes, IDictionary(Of String, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.KeyVault.Models.CertificateBundle.CertificateBundle(System.String, System.String, System.String, System.Byte(), Microsoft.Azure.KeyVault.Models.CertificatePolicy, System.Byte(), System.String, Microsoft.Azure.KeyVault.Models.CertificateAttributes, System.Collections.Generic.IDictionary(Of System.String, System.String))
  name.vb: CertificateBundle(String, String, String, Byte(), CertificatePolicy, Byte(), String, CertificateAttributes, IDictionary(Of String, String))
- uid: Microsoft.Azure.KeyVault.Models.CertificateBundle.Id
  commentId: P:Microsoft.Azure.KeyVault.Models.CertificateBundle.Id
  id: Id
  parent: Microsoft.Azure.KeyVault.Models.CertificateBundle
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: CertificateBundle.Id
  fullName: Microsoft.Azure.KeyVault.Models.CertificateBundle.Id
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/CertificateBundle.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Id
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/CertificateBundle.cs
    startLine: 58
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault.Models
  summary: "\nGets the certificate id\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "id")]

      public string Id { get; }
    content.vb: >-
      <JsonProperty(PropertyName:="id")>

      Public ReadOnly Property Id As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.KeyVault.Models.CertificateBundle.Id*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: id
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.KeyVault.Models.CertificateBundle.Kid
  commentId: P:Microsoft.Azure.KeyVault.Models.CertificateBundle.Kid
  id: Kid
  parent: Microsoft.Azure.KeyVault.Models.CertificateBundle
  langs:
  - csharp
  - vb
  name: Kid
  nameWithType: CertificateBundle.Kid
  fullName: Microsoft.Azure.KeyVault.Models.CertificateBundle.Kid
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/CertificateBundle.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Kid
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/CertificateBundle.cs
    startLine: 64
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault.Models
  summary: "\nGets the key id\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "kid")]

      public string Kid { get; }
    content.vb: >-
      <JsonProperty(PropertyName:="kid")>

      Public ReadOnly Property Kid As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.KeyVault.Models.CertificateBundle.Kid*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: kid
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.KeyVault.Models.CertificateBundle.Sid
  commentId: P:Microsoft.Azure.KeyVault.Models.CertificateBundle.Sid
  id: Sid
  parent: Microsoft.Azure.KeyVault.Models.CertificateBundle
  langs:
  - csharp
  - vb
  name: Sid
  nameWithType: CertificateBundle.Sid
  fullName: Microsoft.Azure.KeyVault.Models.CertificateBundle.Sid
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/CertificateBundle.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Sid
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/CertificateBundle.cs
    startLine: 70
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault.Models
  summary: "\nGets the secret id\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "sid")]

      public string Sid { get; }
    content.vb: >-
      <JsonProperty(PropertyName:="sid")>

      Public ReadOnly Property Sid As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.KeyVault.Models.CertificateBundle.Sid*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: sid
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.KeyVault.Models.CertificateBundle.X509Thumbprint
  commentId: P:Microsoft.Azure.KeyVault.Models.CertificateBundle.X509Thumbprint
  id: X509Thumbprint
  parent: Microsoft.Azure.KeyVault.Models.CertificateBundle
  langs:
  - csharp
  - vb
  name: X509Thumbprint
  nameWithType: CertificateBundle.X509Thumbprint
  fullName: Microsoft.Azure.KeyVault.Models.CertificateBundle.X509Thumbprint
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/CertificateBundle.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: X509Thumbprint
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/CertificateBundle.cs
    startLine: 76
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault.Models
  summary: "\nGets thumbprint of the certificate.\n"
  example: []
  syntax:
    content: >-
      [JsonConverter(typeof (Base64UrlJsonConverter))]

      [JsonProperty(PropertyName = "x5t")]

      public byte[] X509Thumbprint { get; }
    content.vb: >-
      <JsonConverter(GetType(Base64UrlJsonConverter))>

      <JsonProperty(PropertyName:="x5t")>

      Public ReadOnly Property X509Thumbprint As Byte()
    parameters: []
    return:
      type: System.Byte[]
  overload: Microsoft.Azure.KeyVault.Models.CertificateBundle.X509Thumbprint*
  attributes:
  - type: Newtonsoft.Json.JsonConverterAttribute
    ctor: Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type)
    arguments:
    - type: System.Type
      value: Microsoft.Rest.Serialization.Base64UrlJsonConverter
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: x5t
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.KeyVault.Models.CertificateBundle.Policy
  commentId: P:Microsoft.Azure.KeyVault.Models.CertificateBundle.Policy
  id: Policy
  parent: Microsoft.Azure.KeyVault.Models.CertificateBundle
  langs:
  - csharp
  - vb
  name: Policy
  nameWithType: CertificateBundle.Policy
  fullName: Microsoft.Azure.KeyVault.Models.CertificateBundle.Policy
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/CertificateBundle.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Policy
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/CertificateBundle.cs
    startLine: 83
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault.Models
  summary: "\nGets the management policy.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "policy")]

      public CertificatePolicy Policy { get; }
    content.vb: >-
      <JsonProperty(PropertyName:="policy")>

      Public ReadOnly Property Policy As CertificatePolicy
    parameters: []
    return:
      type: Microsoft.Azure.KeyVault.Models.CertificatePolicy
  overload: Microsoft.Azure.KeyVault.Models.CertificateBundle.Policy*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: policy
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.KeyVault.Models.CertificateBundle.Cer
  commentId: P:Microsoft.Azure.KeyVault.Models.CertificateBundle.Cer
  id: Cer
  parent: Microsoft.Azure.KeyVault.Models.CertificateBundle
  langs:
  - csharp
  - vb
  name: Cer
  nameWithType: CertificateBundle.Cer
  fullName: Microsoft.Azure.KeyVault.Models.CertificateBundle.Cer
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/CertificateBundle.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Cer
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/CertificateBundle.cs
    startLine: 89
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault.Models
  summary: "\nGets or sets CER contents of x509 certificate.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "cer")]

      public byte[] Cer { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="cer")>

      Public Property Cer As Byte()
    parameters: []
    return:
      type: System.Byte[]
  overload: Microsoft.Azure.KeyVault.Models.CertificateBundle.Cer*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: cer
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.Models.CertificateBundle.ContentType
  commentId: P:Microsoft.Azure.KeyVault.Models.CertificateBundle.ContentType
  id: ContentType
  parent: Microsoft.Azure.KeyVault.Models.CertificateBundle
  langs:
  - csharp
  - vb
  name: ContentType
  nameWithType: CertificateBundle.ContentType
  fullName: Microsoft.Azure.KeyVault.Models.CertificateBundle.ContentType
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/CertificateBundle.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ContentType
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/CertificateBundle.cs
    startLine: 95
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault.Models
  summary: "\nGets or sets the content type of the secret\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "contentType")]

      public string ContentType { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="contentType")>

      Public Property ContentType As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.KeyVault.Models.CertificateBundle.ContentType*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: contentType
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.Models.CertificateBundle.Attributes
  commentId: P:Microsoft.Azure.KeyVault.Models.CertificateBundle.Attributes
  id: Attributes
  parent: Microsoft.Azure.KeyVault.Models.CertificateBundle
  langs:
  - csharp
  - vb
  name: Attributes
  nameWithType: CertificateBundle.Attributes
  fullName: Microsoft.Azure.KeyVault.Models.CertificateBundle.Attributes
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/CertificateBundle.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Attributes
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/CertificateBundle.cs
    startLine: 101
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault.Models
  summary: "\nGets or sets the certificate attributes.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "attributes")]

      public CertificateAttributes Attributes { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="attributes")>

      Public Property Attributes As CertificateAttributes
    parameters: []
    return:
      type: Microsoft.Azure.KeyVault.Models.CertificateAttributes
  overload: Microsoft.Azure.KeyVault.Models.CertificateBundle.Attributes*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: attributes
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.Models.CertificateBundle.Tags
  commentId: P:Microsoft.Azure.KeyVault.Models.CertificateBundle.Tags
  id: Tags
  parent: Microsoft.Azure.KeyVault.Models.CertificateBundle
  langs:
  - csharp
  - vb
  name: Tags
  nameWithType: CertificateBundle.Tags
  fullName: Microsoft.Azure.KeyVault.Models.CertificateBundle.Tags
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/CertificateBundle.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Tags
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/CertificateBundle.cs
    startLine: 108
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault.Models
  summary: "\nGets or sets application-specific metadata in the form of\nkey-value pairs\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "tags")]

      public IDictionary<string, string> Tags { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="tags")>

      Public Property Tags As IDictionary(Of String, String)
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
  overload: Microsoft.Azure.KeyVault.Models.CertificateBundle.Tags*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: tags
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.Models.CertificateBundle.Validate
  commentId: M:Microsoft.Azure.KeyVault.Models.CertificateBundle.Validate
  id: Validate
  parent: Microsoft.Azure.KeyVault.Models.CertificateBundle
  langs:
  - csharp
  - vb
  name: Validate()
  nameWithType: CertificateBundle.Validate()
  fullName: Microsoft.Azure.KeyVault.Models.CertificateBundle.Validate()
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/CertificateBundle.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Validate
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault/Generated/Models/CertificateBundle.cs
    startLine: 117
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault.Models
  summary: "\nValidate the object.\n"
  example: []
  syntax:
    content: public virtual void Validate()
    content.vb: Public Overridable Sub Validate
  overload: Microsoft.Azure.KeyVault.Models.CertificateBundle.Validate*
  exceptions:
  - type: Microsoft.Rest.ValidationException
    commentId: T:Microsoft.Rest.ValidationException
    description: "\nThrown if validation fails\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Microsoft.Azure.KeyVault.Models
  commentId: N:Microsoft.Azure.KeyVault.Models
  isExternal: false
  name: Microsoft.Azure.KeyVault.Models
  nameWithType: Microsoft.Azure.KeyVault.Models
  fullName: Microsoft.Azure.KeyVault.Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.KeyVault.Models.CertificateBundle.SecretIdentifier*
  commentId: Overload:Microsoft.Azure.KeyVault.Models.CertificateBundle.SecretIdentifier
  isExternal: false
  name: SecretIdentifier
  nameWithType: CertificateBundle.SecretIdentifier
  fullName: Microsoft.Azure.KeyVault.Models.CertificateBundle.SecretIdentifier
- uid: Microsoft.Azure.KeyVault.SecretIdentifier
  commentId: T:Microsoft.Azure.KeyVault.SecretIdentifier
  parent: Microsoft.Azure.KeyVault
  isExternal: false
  name: SecretIdentifier
  nameWithType: SecretIdentifier
  fullName: Microsoft.Azure.KeyVault.SecretIdentifier
- uid: Microsoft.Azure.KeyVault
  commentId: N:Microsoft.Azure.KeyVault
  isExternal: false
  name: Microsoft.Azure.KeyVault
  nameWithType: Microsoft.Azure.KeyVault
  fullName: Microsoft.Azure.KeyVault
- uid: Microsoft.Azure.KeyVault.Models.CertificateBundle.KeyIdentifier*
  commentId: Overload:Microsoft.Azure.KeyVault.Models.CertificateBundle.KeyIdentifier
  isExternal: false
  name: KeyIdentifier
  nameWithType: CertificateBundle.KeyIdentifier
  fullName: Microsoft.Azure.KeyVault.Models.CertificateBundle.KeyIdentifier
- uid: Microsoft.Azure.KeyVault.KeyIdentifier
  commentId: T:Microsoft.Azure.KeyVault.KeyIdentifier
  parent: Microsoft.Azure.KeyVault
  isExternal: false
  name: KeyIdentifier
  nameWithType: KeyIdentifier
  fullName: Microsoft.Azure.KeyVault.KeyIdentifier
- uid: Microsoft.Azure.KeyVault.Models.CertificateBundle.CertificateIdentifier*
  commentId: Overload:Microsoft.Azure.KeyVault.Models.CertificateBundle.CertificateIdentifier
  isExternal: false
  name: CertificateIdentifier
  nameWithType: CertificateBundle.CertificateIdentifier
  fullName: Microsoft.Azure.KeyVault.Models.CertificateBundle.CertificateIdentifier
- uid: Microsoft.Azure.KeyVault.CertificateIdentifier
  commentId: T:Microsoft.Azure.KeyVault.CertificateIdentifier
  parent: Microsoft.Azure.KeyVault
  isExternal: false
  name: CertificateIdentifier
  nameWithType: CertificateIdentifier
  fullName: Microsoft.Azure.KeyVault.CertificateIdentifier
- uid: Microsoft.Azure.KeyVault.Models.CertificateBundle.#ctor*
  commentId: Overload:Microsoft.Azure.KeyVault.Models.CertificateBundle.#ctor
  isExternal: false
  name: CertificateBundle
  nameWithType: CertificateBundle.CertificateBundle
  fullName: Microsoft.Azure.KeyVault.Models.CertificateBundle.CertificateBundle
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Azure.KeyVault.Models.CertificatePolicy
  commentId: T:Microsoft.Azure.KeyVault.Models.CertificatePolicy
  parent: Microsoft.Azure.KeyVault.Models
  isExternal: false
  name: CertificatePolicy
  nameWithType: CertificatePolicy
  fullName: Microsoft.Azure.KeyVault.Models.CertificatePolicy
- uid: Microsoft.Azure.KeyVault.Models.CertificateAttributes
  commentId: T:Microsoft.Azure.KeyVault.Models.CertificateAttributes
  parent: Microsoft.Azure.KeyVault.Models
  isExternal: false
  name: CertificateAttributes
  nameWithType: CertificateAttributes
  fullName: Microsoft.Azure.KeyVault.Models.CertificateAttributes
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String>
  nameWithType: IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  nameWithType.vb: IDictionary(Of String, String)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Azure.KeyVault.Models.CertificateBundle.Id*
  commentId: Overload:Microsoft.Azure.KeyVault.Models.CertificateBundle.Id
  isExternal: false
  name: Id
  nameWithType: CertificateBundle.Id
  fullName: Microsoft.Azure.KeyVault.Models.CertificateBundle.Id
- uid: Microsoft.Azure.KeyVault.Models.CertificateBundle.Kid*
  commentId: Overload:Microsoft.Azure.KeyVault.Models.CertificateBundle.Kid
  isExternal: false
  name: Kid
  nameWithType: CertificateBundle.Kid
  fullName: Microsoft.Azure.KeyVault.Models.CertificateBundle.Kid
- uid: Microsoft.Azure.KeyVault.Models.CertificateBundle.Sid*
  commentId: Overload:Microsoft.Azure.KeyVault.Models.CertificateBundle.Sid
  isExternal: false
  name: Sid
  nameWithType: CertificateBundle.Sid
  fullName: Microsoft.Azure.KeyVault.Models.CertificateBundle.Sid
- uid: Microsoft.Azure.KeyVault.Models.CertificateBundle.X509Thumbprint*
  commentId: Overload:Microsoft.Azure.KeyVault.Models.CertificateBundle.X509Thumbprint
  isExternal: false
  name: X509Thumbprint
  nameWithType: CertificateBundle.X509Thumbprint
  fullName: Microsoft.Azure.KeyVault.Models.CertificateBundle.X509Thumbprint
- uid: Microsoft.Azure.KeyVault.Models.CertificateBundle.Policy*
  commentId: Overload:Microsoft.Azure.KeyVault.Models.CertificateBundle.Policy
  isExternal: false
  name: Policy
  nameWithType: CertificateBundle.Policy
  fullName: Microsoft.Azure.KeyVault.Models.CertificateBundle.Policy
- uid: Microsoft.Azure.KeyVault.Models.CertificateBundle.Cer*
  commentId: Overload:Microsoft.Azure.KeyVault.Models.CertificateBundle.Cer
  isExternal: false
  name: Cer
  nameWithType: CertificateBundle.Cer
  fullName: Microsoft.Azure.KeyVault.Models.CertificateBundle.Cer
- uid: Microsoft.Azure.KeyVault.Models.CertificateBundle.ContentType*
  commentId: Overload:Microsoft.Azure.KeyVault.Models.CertificateBundle.ContentType
  isExternal: false
  name: ContentType
  nameWithType: CertificateBundle.ContentType
  fullName: Microsoft.Azure.KeyVault.Models.CertificateBundle.ContentType
- uid: Microsoft.Azure.KeyVault.Models.CertificateBundle.Attributes*
  commentId: Overload:Microsoft.Azure.KeyVault.Models.CertificateBundle.Attributes
  isExternal: false
  name: Attributes
  nameWithType: CertificateBundle.Attributes
  fullName: Microsoft.Azure.KeyVault.Models.CertificateBundle.Attributes
- uid: Microsoft.Azure.KeyVault.Models.CertificateBundle.Tags*
  commentId: Overload:Microsoft.Azure.KeyVault.Models.CertificateBundle.Tags
  isExternal: false
  name: Tags
  nameWithType: CertificateBundle.Tags
  fullName: Microsoft.Azure.KeyVault.Models.CertificateBundle.Tags
- uid: Microsoft.Azure.KeyVault.Models.CertificateBundle.Validate*
  commentId: Overload:Microsoft.Azure.KeyVault.Models.CertificateBundle.Validate
  isExternal: false
  name: Validate
  nameWithType: CertificateBundle.Validate
  fullName: Microsoft.Azure.KeyVault.Models.CertificateBundle.Validate
- uid: Microsoft.Rest.ValidationException
  commentId: T:Microsoft.Rest.ValidationException
