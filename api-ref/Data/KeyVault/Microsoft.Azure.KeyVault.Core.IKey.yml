### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.KeyVault.Core.IKey
  commentId: T:Microsoft.Azure.KeyVault.Core.IKey
  id: IKey
  parent: Microsoft.Azure.KeyVault.Core
  children:
  - Microsoft.Azure.KeyVault.Core.IKey.DecryptAsync(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.String,System.Threading.CancellationToken)
  - Microsoft.Azure.KeyVault.Core.IKey.DefaultEncryptionAlgorithm
  - Microsoft.Azure.KeyVault.Core.IKey.DefaultKeyWrapAlgorithm
  - Microsoft.Azure.KeyVault.Core.IKey.DefaultSignatureAlgorithm
  - Microsoft.Azure.KeyVault.Core.IKey.EncryptAsync(System.Byte[],System.Byte[],System.Byte[],System.String,System.Threading.CancellationToken)
  - Microsoft.Azure.KeyVault.Core.IKey.Kid
  - Microsoft.Azure.KeyVault.Core.IKey.SignAsync(System.Byte[],System.String,System.Threading.CancellationToken)
  - Microsoft.Azure.KeyVault.Core.IKey.UnwrapKeyAsync(System.Byte[],System.String,System.Threading.CancellationToken)
  - Microsoft.Azure.KeyVault.Core.IKey.VerifyAsync(System.Byte[],System.Byte[],System.String,System.Threading.CancellationToken)
  - Microsoft.Azure.KeyVault.Core.IKey.WrapKeyAsync(System.Byte[],System.String,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IKey
  nameWithType: IKey
  fullName: Microsoft.Azure.KeyVault.Core.IKey
  type: Interface
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.Core/IKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: IKey
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.Core/IKey.cs
    startLine: 13
  assemblies:
  - Microsoft.Azure.KeyVault.Core
  namespace: Microsoft.Azure.KeyVault.Core
  summary: "\nInterface for Keys\n"
  example: []
  syntax:
    content: 'public interface IKey : IDisposable'
    content.vb: >-
      Public Interface IKey
          Inherits IDisposable
  inheritedMembers:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.Azure.KeyVault.Core.IKey.DefaultEncryptionAlgorithm
  commentId: P:Microsoft.Azure.KeyVault.Core.IKey.DefaultEncryptionAlgorithm
  id: DefaultEncryptionAlgorithm
  parent: Microsoft.Azure.KeyVault.Core.IKey
  langs:
  - csharp
  - vb
  name: DefaultEncryptionAlgorithm
  nameWithType: IKey.DefaultEncryptionAlgorithm
  fullName: Microsoft.Azure.KeyVault.Core.IKey.DefaultEncryptionAlgorithm
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.Core/IKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DefaultEncryptionAlgorithm
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.Core/IKey.cs
    startLine: 18
  assemblies:
  - Microsoft.Azure.KeyVault.Core
  namespace: Microsoft.Azure.KeyVault.Core
  summary: "\nThe default encryption algorithm for this key\n"
  example: []
  syntax:
    content: string DefaultEncryptionAlgorithm { get; }
    content.vb: ReadOnly Property DefaultEncryptionAlgorithm As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.KeyVault.Core.IKey.DefaultEncryptionAlgorithm*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.Azure.KeyVault.Core.IKey.DefaultKeyWrapAlgorithm
  commentId: P:Microsoft.Azure.KeyVault.Core.IKey.DefaultKeyWrapAlgorithm
  id: DefaultKeyWrapAlgorithm
  parent: Microsoft.Azure.KeyVault.Core.IKey
  langs:
  - csharp
  - vb
  name: DefaultKeyWrapAlgorithm
  nameWithType: IKey.DefaultKeyWrapAlgorithm
  fullName: Microsoft.Azure.KeyVault.Core.IKey.DefaultKeyWrapAlgorithm
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.Core/IKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DefaultKeyWrapAlgorithm
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.Core/IKey.cs
    startLine: 23
  assemblies:
  - Microsoft.Azure.KeyVault.Core
  namespace: Microsoft.Azure.KeyVault.Core
  summary: "\nThe default key wrap algorithm for this key\n"
  example: []
  syntax:
    content: string DefaultKeyWrapAlgorithm { get; }
    content.vb: ReadOnly Property DefaultKeyWrapAlgorithm As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.KeyVault.Core.IKey.DefaultKeyWrapAlgorithm*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.Azure.KeyVault.Core.IKey.DefaultSignatureAlgorithm
  commentId: P:Microsoft.Azure.KeyVault.Core.IKey.DefaultSignatureAlgorithm
  id: DefaultSignatureAlgorithm
  parent: Microsoft.Azure.KeyVault.Core.IKey
  langs:
  - csharp
  - vb
  name: DefaultSignatureAlgorithm
  nameWithType: IKey.DefaultSignatureAlgorithm
  fullName: Microsoft.Azure.KeyVault.Core.IKey.DefaultSignatureAlgorithm
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.Core/IKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DefaultSignatureAlgorithm
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.Core/IKey.cs
    startLine: 28
  assemblies:
  - Microsoft.Azure.KeyVault.Core
  namespace: Microsoft.Azure.KeyVault.Core
  summary: "\nThe default signature algorithm for this key\n"
  example: []
  syntax:
    content: string DefaultSignatureAlgorithm { get; }
    content.vb: ReadOnly Property DefaultSignatureAlgorithm As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.KeyVault.Core.IKey.DefaultSignatureAlgorithm*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.Azure.KeyVault.Core.IKey.Kid
  commentId: P:Microsoft.Azure.KeyVault.Core.IKey.Kid
  id: Kid
  parent: Microsoft.Azure.KeyVault.Core.IKey
  langs:
  - csharp
  - vb
  name: Kid
  nameWithType: IKey.Kid
  fullName: Microsoft.Azure.KeyVault.Core.IKey.Kid
  type: Property
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.Core/IKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Kid
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.Core/IKey.cs
    startLine: 33
  assemblies:
  - Microsoft.Azure.KeyVault.Core
  namespace: Microsoft.Azure.KeyVault.Core
  summary: "\nThe key identifier\n"
  example: []
  syntax:
    content: string Kid { get; }
    content.vb: ReadOnly Property Kid As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.KeyVault.Core.IKey.Kid*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.Azure.KeyVault.Core.IKey.DecryptAsync(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.KeyVault.Core.IKey.DecryptAsync(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.String,System.Threading.CancellationToken)
  id: DecryptAsync(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.String,System.Threading.CancellationToken)
  parent: Microsoft.Azure.KeyVault.Core.IKey
  langs:
  - csharp
  - vb
  name: DecryptAsync(Byte[], Byte[], Byte[], Byte[], String, CancellationToken)
  nameWithType: IKey.DecryptAsync(Byte[], Byte[], Byte[], Byte[], String, CancellationToken)
  fullName: Microsoft.Azure.KeyVault.Core.IKey.DecryptAsync(System.Byte[], System.Byte[], System.Byte[], System.Byte[], System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.Core/IKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DecryptAsync
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.Core/IKey.cs
    startLine: 46
  assemblies:
  - Microsoft.Azure.KeyVault.Core
  namespace: Microsoft.Azure.KeyVault.Core
  summary: "\nDecrypts the specified cipher text.\n"
  remarks: >-
    If algorithm is not specified, an implementation should use its default algorithm.

    Not all algorithms require, or support, all parameters.
  example: []
  syntax:
    content: Task<byte[]> DecryptAsync(byte[] ciphertext, byte[] iv, byte[] authenticationData, byte[] authenticationTag, string algorithm, CancellationToken token)
    content.vb: Function DecryptAsync(ciphertext As Byte(), iv As Byte(), authenticationData As Byte(), authenticationTag As Byte(), algorithm As String, token As CancellationToken) As Task(Of Byte())
    parameters:
    - id: ciphertext
      type: System.Byte[]
      description: The cipher text to decrypt
    - id: iv
      type: System.Byte[]
      description: The initialization vector
    - id: authenticationData
      type: System.Byte[]
      description: The authentication data
    - id: authenticationTag
      type: System.Byte[]
    - id: algorithm
      type: System.String
      description: The algorithm to use
    - id: token
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: The plain text
  overload: Microsoft.Azure.KeyVault.Core.IKey.DecryptAsync*
  nameWithType.vb: IKey.DecryptAsync(Byte(), Byte(), Byte(), Byte(), String, CancellationToken)
  fullName.vb: Microsoft.Azure.KeyVault.Core.IKey.DecryptAsync(System.Byte(), System.Byte(), System.Byte(), System.Byte(), System.String, System.Threading.CancellationToken)
  name.vb: DecryptAsync(Byte(), Byte(), Byte(), Byte(), String, CancellationToken)
- uid: Microsoft.Azure.KeyVault.Core.IKey.EncryptAsync(System.Byte[],System.Byte[],System.Byte[],System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.KeyVault.Core.IKey.EncryptAsync(System.Byte[],System.Byte[],System.Byte[],System.String,System.Threading.CancellationToken)
  id: EncryptAsync(System.Byte[],System.Byte[],System.Byte[],System.String,System.Threading.CancellationToken)
  parent: Microsoft.Azure.KeyVault.Core.IKey
  langs:
  - csharp
  - vb
  name: EncryptAsync(Byte[], Byte[], Byte[], String, CancellationToken)
  nameWithType: IKey.EncryptAsync(Byte[], Byte[], Byte[], String, CancellationToken)
  fullName: Microsoft.Azure.KeyVault.Core.IKey.EncryptAsync(System.Byte[], System.Byte[], System.Byte[], System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.Core/IKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: EncryptAsync
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.Core/IKey.cs
    startLine: 59
  assemblies:
  - Microsoft.Azure.KeyVault.Core
  namespace: Microsoft.Azure.KeyVault.Core
  summary: "\nEncrypts the specified plain text.\n"
  remarks: >-
    If the algorithm is not specified, an implementation should use its default algorithm.

    Not all algorithyms require, or support, all parameters.
  example: []
  syntax:
    content: Task<Tuple<byte[], byte[], string>> EncryptAsync(byte[] plaintext, byte[] iv, byte[] authenticationData, string algorithm, CancellationToken token)
    content.vb: Function EncryptAsync(plaintext As Byte(), iv As Byte(), authenticationData As Byte(), algorithm As String, token As CancellationToken) As Task(Of Tuple(Of Byte(), Byte(), String))
    parameters:
    - id: plaintext
      type: System.Byte[]
      description: The plain text to encrypt
    - id: iv
      type: System.Byte[]
      description: The initialization vector
    - id: authenticationData
      type: System.Byte[]
      description: The authentication data
    - id: algorithm
      type: System.String
      description: The algorithm to use
    - id: token
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Tuple{System.Byte[],System.Byte[],System.String}}
      description: A Tuple consisting of the cipher text, the authentication tag (if applicable), the algorithm used
  overload: Microsoft.Azure.KeyVault.Core.IKey.EncryptAsync*
  nameWithType.vb: IKey.EncryptAsync(Byte(), Byte(), Byte(), String, CancellationToken)
  fullName.vb: Microsoft.Azure.KeyVault.Core.IKey.EncryptAsync(System.Byte(), System.Byte(), System.Byte(), System.String, System.Threading.CancellationToken)
  name.vb: EncryptAsync(Byte(), Byte(), Byte(), String, CancellationToken)
- uid: Microsoft.Azure.KeyVault.Core.IKey.WrapKeyAsync(System.Byte[],System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.KeyVault.Core.IKey.WrapKeyAsync(System.Byte[],System.String,System.Threading.CancellationToken)
  id: WrapKeyAsync(System.Byte[],System.String,System.Threading.CancellationToken)
  parent: Microsoft.Azure.KeyVault.Core.IKey
  langs:
  - csharp
  - vb
  name: WrapKeyAsync(Byte[], String, CancellationToken)
  nameWithType: IKey.WrapKeyAsync(Byte[], String, CancellationToken)
  fullName: Microsoft.Azure.KeyVault.Core.IKey.WrapKeyAsync(System.Byte[], System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.Core/IKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: WrapKeyAsync
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.Core/IKey.cs
    startLine: 69
  assemblies:
  - Microsoft.Azure.KeyVault.Core
  namespace: Microsoft.Azure.KeyVault.Core
  summary: "\nEncrypts the specified key material.\n"
  remarks: If the algorithm is not specified, an implementation should use its default algorithm
  example: []
  syntax:
    content: Task<Tuple<byte[], string>> WrapKeyAsync(byte[] key, string algorithm, CancellationToken token)
    content.vb: Function WrapKeyAsync(key As Byte(), algorithm As String, token As CancellationToken) As Task(Of Tuple(Of Byte(), String))
    parameters:
    - id: key
      type: System.Byte[]
      description: The key material to encrypt
    - id: algorithm
      type: System.String
      description: The algorithm to use
    - id: token
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Tuple{System.Byte[],System.String}}
      description: A Tuple consisting of the encrypted key and the algorithm used
  overload: Microsoft.Azure.KeyVault.Core.IKey.WrapKeyAsync*
  nameWithType.vb: IKey.WrapKeyAsync(Byte(), String, CancellationToken)
  fullName.vb: Microsoft.Azure.KeyVault.Core.IKey.WrapKeyAsync(System.Byte(), System.String, System.Threading.CancellationToken)
  name.vb: WrapKeyAsync(Byte(), String, CancellationToken)
- uid: Microsoft.Azure.KeyVault.Core.IKey.UnwrapKeyAsync(System.Byte[],System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.KeyVault.Core.IKey.UnwrapKeyAsync(System.Byte[],System.String,System.Threading.CancellationToken)
  id: UnwrapKeyAsync(System.Byte[],System.String,System.Threading.CancellationToken)
  parent: Microsoft.Azure.KeyVault.Core.IKey
  langs:
  - csharp
  - vb
  name: UnwrapKeyAsync(Byte[], String, CancellationToken)
  nameWithType: IKey.UnwrapKeyAsync(Byte[], String, CancellationToken)
  fullName: Microsoft.Azure.KeyVault.Core.IKey.UnwrapKeyAsync(System.Byte[], System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.Core/IKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: UnwrapKeyAsync
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.Core/IKey.cs
    startLine: 79
  assemblies:
  - Microsoft.Azure.KeyVault.Core
  namespace: Microsoft.Azure.KeyVault.Core
  summary: "\nDecrypts the specified key material.\n"
  remarks: If the algorithm is not specified, an implementation should use its default algorithm
  example: []
  syntax:
    content: Task<byte[]> UnwrapKeyAsync(byte[] encryptedKey, string algorithm, CancellationToken token)
    content.vb: Function UnwrapKeyAsync(encryptedKey As Byte(), algorithm As String, token As CancellationToken) As Task(Of Byte())
    parameters:
    - id: encryptedKey
      type: System.Byte[]
      description: The encrypted key material
    - id: algorithm
      type: System.String
      description: The algorithm to use
    - id: token
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: The decrypted key material
  overload: Microsoft.Azure.KeyVault.Core.IKey.UnwrapKeyAsync*
  nameWithType.vb: IKey.UnwrapKeyAsync(Byte(), String, CancellationToken)
  fullName.vb: Microsoft.Azure.KeyVault.Core.IKey.UnwrapKeyAsync(System.Byte(), System.String, System.Threading.CancellationToken)
  name.vb: UnwrapKeyAsync(Byte(), String, CancellationToken)
- uid: Microsoft.Azure.KeyVault.Core.IKey.SignAsync(System.Byte[],System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.KeyVault.Core.IKey.SignAsync(System.Byte[],System.String,System.Threading.CancellationToken)
  id: SignAsync(System.Byte[],System.String,System.Threading.CancellationToken)
  parent: Microsoft.Azure.KeyVault.Core.IKey
  langs:
  - csharp
  - vb
  name: SignAsync(Byte[], String, CancellationToken)
  nameWithType: IKey.SignAsync(Byte[], String, CancellationToken)
  fullName: Microsoft.Azure.KeyVault.Core.IKey.SignAsync(System.Byte[], System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.Core/IKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: SignAsync
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.Core/IKey.cs
    startLine: 89
  assemblies:
  - Microsoft.Azure.KeyVault.Core
  namespace: Microsoft.Azure.KeyVault.Core
  summary: "\nSigns the specified digest.\n"
  remarks: If the algorithm is not specified, an implementation should use its default algorithm
  example: []
  syntax:
    content: Task<Tuple<byte[], string>> SignAsync(byte[] digest, string algorithm, CancellationToken token)
    content.vb: Function SignAsync(digest As Byte(), algorithm As String, token As CancellationToken) As Task(Of Tuple(Of Byte(), String))
    parameters:
    - id: digest
      type: System.Byte[]
      description: The digest to sign
    - id: algorithm
      type: System.String
      description: The algorithm to use
    - id: token
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Tuple{System.Byte[],System.String}}
      description: A Tuple consisting of the signature and the algorithm used
  overload: Microsoft.Azure.KeyVault.Core.IKey.SignAsync*
  nameWithType.vb: IKey.SignAsync(Byte(), String, CancellationToken)
  fullName.vb: Microsoft.Azure.KeyVault.Core.IKey.SignAsync(System.Byte(), System.String, System.Threading.CancellationToken)
  name.vb: SignAsync(Byte(), String, CancellationToken)
- uid: Microsoft.Azure.KeyVault.Core.IKey.VerifyAsync(System.Byte[],System.Byte[],System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.KeyVault.Core.IKey.VerifyAsync(System.Byte[],System.Byte[],System.String,System.Threading.CancellationToken)
  id: VerifyAsync(System.Byte[],System.Byte[],System.String,System.Threading.CancellationToken)
  parent: Microsoft.Azure.KeyVault.Core.IKey
  langs:
  - csharp
  - vb
  name: VerifyAsync(Byte[], Byte[], String, CancellationToken)
  nameWithType: IKey.VerifyAsync(Byte[], Byte[], String, CancellationToken)
  fullName: Microsoft.Azure.KeyVault.Core.IKey.VerifyAsync(System.Byte[], System.Byte[], System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.Core/IKey.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: VerifyAsync
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.Core/IKey.cs
    startLine: 99
  assemblies:
  - Microsoft.Azure.KeyVault.Core
  namespace: Microsoft.Azure.KeyVault.Core
  summary: "\nVerifies the specified signature value\n"
  example: []
  syntax:
    content: Task<bool> VerifyAsync(byte[] digest, byte[] signature, string algorithm, CancellationToken token)
    content.vb: Function VerifyAsync(digest As Byte(), signature As Byte(), algorithm As String, token As CancellationToken) As Task(Of Boolean)
    parameters:
    - id: digest
      type: System.Byte[]
      description: The digest
    - id: signature
      type: System.Byte[]
      description: The signature value
    - id: algorithm
      type: System.String
      description: The algorithm to use
    - id: token
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A bool indicating whether the signature was successfully verified
  overload: Microsoft.Azure.KeyVault.Core.IKey.VerifyAsync*
  nameWithType.vb: IKey.VerifyAsync(Byte(), Byte(), String, CancellationToken)
  fullName.vb: Microsoft.Azure.KeyVault.Core.IKey.VerifyAsync(System.Byte(), System.Byte(), System.String, System.Threading.CancellationToken)
  name.vb: VerifyAsync(Byte(), Byte(), String, CancellationToken)
references:
- uid: Microsoft.Azure.KeyVault.Core
  commentId: N:Microsoft.Azure.KeyVault.Core
  isExternal: false
  name: Microsoft.Azure.KeyVault.Core
  nameWithType: Microsoft.Azure.KeyVault.Core
  fullName: Microsoft.Azure.KeyVault.Core
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.KeyVault.Core.IKey.DefaultEncryptionAlgorithm*
  commentId: Overload:Microsoft.Azure.KeyVault.Core.IKey.DefaultEncryptionAlgorithm
  isExternal: false
  name: DefaultEncryptionAlgorithm
  nameWithType: IKey.DefaultEncryptionAlgorithm
  fullName: Microsoft.Azure.KeyVault.Core.IKey.DefaultEncryptionAlgorithm
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Azure.KeyVault.Core.IKey.DefaultKeyWrapAlgorithm*
  commentId: Overload:Microsoft.Azure.KeyVault.Core.IKey.DefaultKeyWrapAlgorithm
  isExternal: false
  name: DefaultKeyWrapAlgorithm
  nameWithType: IKey.DefaultKeyWrapAlgorithm
  fullName: Microsoft.Azure.KeyVault.Core.IKey.DefaultKeyWrapAlgorithm
- uid: Microsoft.Azure.KeyVault.Core.IKey.DefaultSignatureAlgorithm*
  commentId: Overload:Microsoft.Azure.KeyVault.Core.IKey.DefaultSignatureAlgorithm
  isExternal: false
  name: DefaultSignatureAlgorithm
  nameWithType: IKey.DefaultSignatureAlgorithm
  fullName: Microsoft.Azure.KeyVault.Core.IKey.DefaultSignatureAlgorithm
- uid: Microsoft.Azure.KeyVault.Core.IKey.Kid*
  commentId: Overload:Microsoft.Azure.KeyVault.Core.IKey.Kid
  isExternal: false
  name: Kid
  nameWithType: IKey.Kid
  fullName: Microsoft.Azure.KeyVault.Core.IKey.Kid
- uid: Microsoft.Azure.KeyVault.Core.IKey.DecryptAsync*
  commentId: Overload:Microsoft.Azure.KeyVault.Core.IKey.DecryptAsync
  isExternal: false
  name: DecryptAsync
  nameWithType: IKey.DecryptAsync
  fullName: Microsoft.Azure.KeyVault.Core.IKey.DecryptAsync
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Byte[]}
  commentId: T:System.Threading.Tasks.Task{System.Byte[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Byte[]>
  nameWithType: Task<Byte[]>
  fullName: System.Threading.Tasks.Task<System.Byte[]>
  nameWithType.vb: Task(Of Byte())
  fullname.vb: System.Threading.Tasks.Task(Of System.Byte())
  name.vb: Task(Of Byte())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.Azure.KeyVault.Core.IKey.EncryptAsync*
  commentId: Overload:Microsoft.Azure.KeyVault.Core.IKey.EncryptAsync
  isExternal: false
  name: EncryptAsync
  nameWithType: IKey.EncryptAsync
  fullName: Microsoft.Azure.KeyVault.Core.IKey.EncryptAsync
- uid: System.Threading.Tasks.Task{System.Tuple{System.Byte[],System.Byte[],System.String}}
  commentId: T:System.Threading.Tasks.Task{System.Tuple{System.Byte[],System.Byte[],System.String}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Tuple<Byte[], Byte[], String>>
  nameWithType: Task<Tuple<Byte[], Byte[], String>>
  fullName: System.Threading.Tasks.Task<System.Tuple<System.Byte[], System.Byte[], System.String>>
  nameWithType.vb: Task(Of Tuple(Of Byte(), Byte(), String))
  fullname.vb: System.Threading.Tasks.Task(Of System.Tuple(Of System.Byte(), System.Byte(), System.String))
  name.vb: Task(Of Tuple(Of Byte(), Byte(), String))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.KeyVault.Core.IKey.WrapKeyAsync*
  commentId: Overload:Microsoft.Azure.KeyVault.Core.IKey.WrapKeyAsync
  isExternal: false
  name: WrapKeyAsync
  nameWithType: IKey.WrapKeyAsync
  fullName: Microsoft.Azure.KeyVault.Core.IKey.WrapKeyAsync
- uid: System.Threading.Tasks.Task{System.Tuple{System.Byte[],System.String}}
  commentId: T:System.Threading.Tasks.Task{System.Tuple{System.Byte[],System.String}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Tuple<Byte[], String>>
  nameWithType: Task<Tuple<Byte[], String>>
  fullName: System.Threading.Tasks.Task<System.Tuple<System.Byte[], System.String>>
  nameWithType.vb: Task(Of Tuple(Of Byte(), String))
  fullname.vb: System.Threading.Tasks.Task(Of System.Tuple(Of System.Byte(), System.String))
  name.vb: Task(Of Tuple(Of Byte(), String))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.KeyVault.Core.IKey.UnwrapKeyAsync*
  commentId: Overload:Microsoft.Azure.KeyVault.Core.IKey.UnwrapKeyAsync
  isExternal: false
  name: UnwrapKeyAsync
  nameWithType: IKey.UnwrapKeyAsync
  fullName: Microsoft.Azure.KeyVault.Core.IKey.UnwrapKeyAsync
- uid: Microsoft.Azure.KeyVault.Core.IKey.SignAsync*
  commentId: Overload:Microsoft.Azure.KeyVault.Core.IKey.SignAsync
  isExternal: false
  name: SignAsync
  nameWithType: IKey.SignAsync
  fullName: Microsoft.Azure.KeyVault.Core.IKey.SignAsync
- uid: Microsoft.Azure.KeyVault.Core.IKey.VerifyAsync*
  commentId: Overload:Microsoft.Azure.KeyVault.Core.IKey.VerifyAsync
  isExternal: false
  name: VerifyAsync
  nameWithType: IKey.VerifyAsync
  fullName: Microsoft.Azure.KeyVault.Core.IKey.VerifyAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullname.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
