### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Relay.HybridConnectionListener
  commentId: T:Microsoft.Azure.Relay.HybridConnectionListener
  id: HybridConnectionListener
  parent: Microsoft.Azure.Relay
  children:
  - Microsoft.Azure.Relay.HybridConnectionListener.#ctor(System.String)
  - Microsoft.Azure.Relay.HybridConnectionListener.#ctor(System.String,System.String)
  - Microsoft.Azure.Relay.HybridConnectionListener.#ctor(System.Uri,Microsoft.Azure.Relay.TokenProvider)
  - Microsoft.Azure.Relay.HybridConnectionListener.AcceptConnectionAsync
  - Microsoft.Azure.Relay.HybridConnectionListener.Address
  - Microsoft.Azure.Relay.HybridConnectionListener.CloseAsync
  - Microsoft.Azure.Relay.HybridConnectionListener.CloseAsync(System.Threading.CancellationToken)
  - Microsoft.Azure.Relay.HybridConnectionListener.CloseAsync(System.TimeSpan)
  - Microsoft.Azure.Relay.HybridConnectionListener.Connecting
  - Microsoft.Azure.Relay.HybridConnectionListener.GetRuntimeInformationAsync
  - Microsoft.Azure.Relay.HybridConnectionListener.GetRuntimeInformationAsync(System.Threading.CancellationToken)
  - Microsoft.Azure.Relay.HybridConnectionListener.IsOnline
  - Microsoft.Azure.Relay.HybridConnectionListener.LastError
  - Microsoft.Azure.Relay.HybridConnectionListener.Offline
  - Microsoft.Azure.Relay.HybridConnectionListener.Online
  - Microsoft.Azure.Relay.HybridConnectionListener.OpenAsync
  - Microsoft.Azure.Relay.HybridConnectionListener.OpenAsync(System.Threading.CancellationToken)
  - Microsoft.Azure.Relay.HybridConnectionListener.OpenAsync(System.TimeSpan)
  - Microsoft.Azure.Relay.HybridConnectionListener.Proxy
  - Microsoft.Azure.Relay.HybridConnectionListener.TokenProvider
  - Microsoft.Azure.Relay.HybridConnectionListener.ToString
  langs:
  - csharp
  - vb
  name: HybridConnectionListener
  nameWithType: HybridConnectionListener
  fullName: Microsoft.Azure.Relay.HybridConnectionListener
  type: Class
  source:
    remote:
      path: src/Microsoft.Azure.Relay/HybridConnectionListener.cs
      branch: master
      repo: https://github.com/Azure/azure-relay-dotnet
      commit: 99007f002281f9f1ffe98e9024ee6c7626ec308d
    id: HybridConnectionListener
    path: src/azure-relay-dotnet/src/Microsoft.Azure.Relay/HybridConnectionListener.cs
    startLine: 20
  assemblies:
  - Microsoft.Azure.Relay
  namespace: Microsoft.Azure.Relay
  summary: "\nProvides a listener for accepting HybridConnections from remote clients.\n"
  example: []
  syntax:
    content: 'public class HybridConnectionListener : IConnectionStatus'
    content.vb: >-
      Public Class HybridConnectionListener
          Implements IConnectionStatus
  inheritance:
  - System.Object
  implements:
  - Microsoft.Azure.Relay.IConnectionStatus
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Relay.HybridConnectionListener.#ctor(System.Uri,Microsoft.Azure.Relay.TokenProvider)
  commentId: M:Microsoft.Azure.Relay.HybridConnectionListener.#ctor(System.Uri,Microsoft.Azure.Relay.TokenProvider)
  id: '#ctor(System.Uri,Microsoft.Azure.Relay.TokenProvider)'
  parent: Microsoft.Azure.Relay.HybridConnectionListener
  langs:
  - csharp
  - vb
  name: HybridConnectionListener(Uri, TokenProvider)
  nameWithType: HybridConnectionListener.HybridConnectionListener(Uri, TokenProvider)
  fullName: Microsoft.Azure.Relay.HybridConnectionListener.HybridConnectionListener(System.Uri, Microsoft.Azure.Relay.TokenProvider)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Azure.Relay/HybridConnectionListener.cs
      branch: master
      repo: https://github.com/Azure/azure-relay-dotnet
      commit: 99007f002281f9f1ffe98e9024ee6c7626ec308d
    id: .ctor
    path: src/azure-relay-dotnet/src/Microsoft.Azure.Relay/HybridConnectionListener.cs
    startLine: 40
  assemblies:
  - Microsoft.Azure.Relay
  namespace: Microsoft.Azure.Relay
  summary: "\nCreate a new HybridConnectionListener instance for accepting HybridConnections.\n"
  example: []
  syntax:
    content: public HybridConnectionListener(Uri address, TokenProvider tokenProvider)
    content.vb: Public Sub New(address As Uri, tokenProvider As TokenProvider)
    parameters:
    - id: address
      type: System.Uri
      description: "The address on which to listen for HybridConnections.  This address should \nbe of the format \"sb://contoso.servicebus.windows.net/yourhybridconnection\"."
    - id: tokenProvider
      type: Microsoft.Azure.Relay.TokenProvider
      description: The TokenProvider for connecting this listener to ServiceBus.
  overload: Microsoft.Azure.Relay.HybridConnectionListener.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Relay.HybridConnectionListener.#ctor(System.String)
  commentId: M:Microsoft.Azure.Relay.HybridConnectionListener.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.Azure.Relay.HybridConnectionListener
  langs:
  - csharp
  - vb
  name: HybridConnectionListener(String)
  nameWithType: HybridConnectionListener.HybridConnectionListener(String)
  fullName: Microsoft.Azure.Relay.HybridConnectionListener.HybridConnectionListener(System.String)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Azure.Relay/HybridConnectionListener.cs
      branch: master
      repo: https://github.com/Azure/azure-relay-dotnet
      commit: 99007f002281f9f1ffe98e9024ee6c7626ec308d
    id: .ctor
    path: src/azure-relay-dotnet/src/Microsoft.Azure.Relay/HybridConnectionListener.cs
    startLine: 68
  assemblies:
  - Microsoft.Azure.Relay
  namespace: Microsoft.Azure.Relay
  summary: Creates a new instance of <xref href="Microsoft.Azure.Relay.HybridConnectionListener" data-throw-if-not-resolved="false"></xref> using the specified connection string.
  example: []
  syntax:
    content: public HybridConnectionListener(string connectionString)
    content.vb: Public Sub New(connectionString As String)
    parameters:
    - id: connectionString
      type: System.String
      description: The connection string to use.  This connection string must include the EntityPath property.
  overload: Microsoft.Azure.Relay.HybridConnectionListener.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown when the format of the <span class="paramref">connectionString</span> parameter is incorrect.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Relay.HybridConnectionListener.#ctor(System.String,System.String)
  commentId: M:Microsoft.Azure.Relay.HybridConnectionListener.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: Microsoft.Azure.Relay.HybridConnectionListener
  langs:
  - csharp
  - vb
  name: HybridConnectionListener(String, String)
  nameWithType: HybridConnectionListener.HybridConnectionListener(String, String)
  fullName: Microsoft.Azure.Relay.HybridConnectionListener.HybridConnectionListener(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Azure.Relay/HybridConnectionListener.cs
      branch: master
      repo: https://github.com/Azure/azure-relay-dotnet
      commit: 99007f002281f9f1ffe98e9024ee6c7626ec308d
    id: .ctor
    path: src/azure-relay-dotnet/src/Microsoft.Azure.Relay/HybridConnectionListener.cs
    startLine: 80
  assemblies:
  - Microsoft.Azure.Relay
  namespace: Microsoft.Azure.Relay
  summary: "Creates a new instance of <xref href=\"Microsoft.Azure.Relay.HybridConnectionListener\" data-throw-if-not-resolved=\"false\"></xref> from a connection string and\nthe specified HybridConection path. Use this overload only when the connection string does not use the \n<xref href=\"Microsoft.Azure.Relay.RelayConnectionStringBuilder.EntityPath\" data-throw-if-not-resolved=\"false\"></xref> property."
  example: []
  syntax:
    content: public HybridConnectionListener(string connectionString, string path)
    content.vb: Public Sub New(connectionString As String, path As String)
    parameters:
    - id: connectionString
      type: System.String
      description: The connection string used. This connection string must not include the EntityPath property.
    - id: path
      type: System.String
      description: The path to the HybridConnection.
  overload: Microsoft.Azure.Relay.HybridConnectionListener.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown when the format of the <span class="paramref">connectionString</span> parameter is incorrect.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Relay.HybridConnectionListener.Connecting
  commentId: E:Microsoft.Azure.Relay.HybridConnectionListener.Connecting
  id: Connecting
  parent: Microsoft.Azure.Relay.HybridConnectionListener
  langs:
  - csharp
  - vb
  name: Connecting
  nameWithType: HybridConnectionListener.Connecting
  fullName: Microsoft.Azure.Relay.HybridConnectionListener.Connecting
  type: Event
  source:
    remote:
      path: src/Microsoft.Azure.Relay/HybridConnectionListener.cs
      branch: master
      repo: https://github.com/Azure/azure-relay-dotnet
      commit: 99007f002281f9f1ffe98e9024ee6c7626ec308d
    id: Connecting
    path: src/azure-relay-dotnet/src/Microsoft.Azure.Relay/HybridConnectionListener.cs
    startLine: 135
  assemblies:
  - Microsoft.Azure.Relay
  namespace: Microsoft.Azure.Relay
  summary: "\nRaised when the Listener is attempting to reconnect with ServiceBus after a connection loss.\n"
  example: []
  syntax:
    content: public event EventHandler Connecting
    content.vb: Public Event Connecting As EventHandler
    return:
      type: System.EventHandler
  implements:
  - Microsoft.Azure.Relay.IConnectionStatus.Connecting
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Relay.HybridConnectionListener.Online
  commentId: E:Microsoft.Azure.Relay.HybridConnectionListener.Online
  id: Online
  parent: Microsoft.Azure.Relay.HybridConnectionListener
  langs:
  - csharp
  - vb
  name: Online
  nameWithType: HybridConnectionListener.Online
  fullName: Microsoft.Azure.Relay.HybridConnectionListener.Online
  type: Event
  source:
    remote:
      path: src/Microsoft.Azure.Relay/HybridConnectionListener.cs
      branch: master
      repo: https://github.com/Azure/azure-relay-dotnet
      commit: 99007f002281f9f1ffe98e9024ee6c7626ec308d
    id: Online
    path: src/azure-relay-dotnet/src/Microsoft.Azure.Relay/HybridConnectionListener.cs
    startLine: 140
  assemblies:
  - Microsoft.Azure.Relay
  namespace: Microsoft.Azure.Relay
  summary: "\nRaised when the Listener has successfully connected with ServiceBus\n"
  example: []
  syntax:
    content: public event EventHandler Online
    content.vb: Public Event Online As EventHandler
    return:
      type: System.EventHandler
  implements:
  - Microsoft.Azure.Relay.IConnectionStatus.Online
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Relay.HybridConnectionListener.Offline
  commentId: E:Microsoft.Azure.Relay.HybridConnectionListener.Offline
  id: Offline
  parent: Microsoft.Azure.Relay.HybridConnectionListener
  langs:
  - csharp
  - vb
  name: Offline
  nameWithType: HybridConnectionListener.Offline
  fullName: Microsoft.Azure.Relay.HybridConnectionListener.Offline
  type: Event
  source:
    remote:
      path: src/Microsoft.Azure.Relay/HybridConnectionListener.cs
      branch: master
      repo: https://github.com/Azure/azure-relay-dotnet
      commit: 99007f002281f9f1ffe98e9024ee6c7626ec308d
    id: Offline
    path: src/azure-relay-dotnet/src/Microsoft.Azure.Relay/HybridConnectionListener.cs
    startLine: 145
  assemblies:
  - Microsoft.Azure.Relay
  namespace: Microsoft.Azure.Relay
  summary: "\nRaised when the Listener will no longer be attempting to (re)connect with ServiceBus.\n"
  example: []
  syntax:
    content: public event EventHandler Offline
    content.vb: Public Event Offline As EventHandler
    return:
      type: System.EventHandler
  implements:
  - Microsoft.Azure.Relay.IConnectionStatus.Offline
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Relay.HybridConnectionListener.IsOnline
  commentId: P:Microsoft.Azure.Relay.HybridConnectionListener.IsOnline
  id: IsOnline
  parent: Microsoft.Azure.Relay.HybridConnectionListener
  langs:
  - csharp
  - vb
  name: IsOnline
  nameWithType: HybridConnectionListener.IsOnline
  fullName: Microsoft.Azure.Relay.HybridConnectionListener.IsOnline
  type: Property
  source:
    remote:
      path: src/Microsoft.Azure.Relay/HybridConnectionListener.cs
      branch: master
      repo: https://github.com/Azure/azure-relay-dotnet
      commit: 99007f002281f9f1ffe98e9024ee6c7626ec308d
    id: IsOnline
    path: src/azure-relay-dotnet/src/Microsoft.Azure.Relay/HybridConnectionListener.cs
    startLine: 150
  assemblies:
  - Microsoft.Azure.Relay
  namespace: Microsoft.Azure.Relay
  summary: Gets a value that determines whether the connection is online.
  example: []
  syntax:
    content: public bool IsOnline { get; }
    content.vb: Public ReadOnly Property IsOnline As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "true if the connection is alive and online; false if there \nis no connectivity towards the Azure Service Bus from the current network location."
  overload: Microsoft.Azure.Relay.HybridConnectionListener.IsOnline*
  implements:
  - Microsoft.Azure.Relay.IConnectionStatus.IsOnline
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Relay.HybridConnectionListener.LastError
  commentId: P:Microsoft.Azure.Relay.HybridConnectionListener.LastError
  id: LastError
  parent: Microsoft.Azure.Relay.HybridConnectionListener
  langs:
  - csharp
  - vb
  name: LastError
  nameWithType: HybridConnectionListener.LastError
  fullName: Microsoft.Azure.Relay.HybridConnectionListener.LastError
  type: Property
  source:
    remote:
      path: src/Microsoft.Azure.Relay/HybridConnectionListener.cs
      branch: master
      repo: https://github.com/Azure/azure-relay-dotnet
      commit: 99007f002281f9f1ffe98e9024ee6c7626ec308d
    id: LastError
    path: src/azure-relay-dotnet/src/Microsoft.Azure.Relay/HybridConnectionListener.cs
    startLine: 154
  assemblies:
  - Microsoft.Azure.Relay
  namespace: Microsoft.Azure.Relay
  summary: Retrieves the last error encountered when trying to reestablish the connection from the offline state.
  example: []
  syntax:
    content: public Exception LastError { get; }
    content.vb: Public ReadOnly Property LastError As Exception
    parameters: []
    return:
      type: System.Exception
      description: Returns a <xref href="System.Exception" data-throw-if-not-resolved="false"></xref> that contains the last error.
  overload: Microsoft.Azure.Relay.HybridConnectionListener.LastError*
  implements:
  - Microsoft.Azure.Relay.IConnectionStatus.LastError
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Relay.HybridConnectionListener.Address
  commentId: P:Microsoft.Azure.Relay.HybridConnectionListener.Address
  id: Address
  parent: Microsoft.Azure.Relay.HybridConnectionListener
  langs:
  - csharp
  - vb
  name: Address
  nameWithType: HybridConnectionListener.Address
  fullName: Microsoft.Azure.Relay.HybridConnectionListener.Address
  type: Property
  source:
    remote:
      path: src/Microsoft.Azure.Relay/HybridConnectionListener.cs
      branch: master
      repo: https://github.com/Azure/azure-relay-dotnet
      commit: 99007f002281f9f1ffe98e9024ee6c7626ec308d
    id: Address
    path: src/azure-relay-dotnet/src/Microsoft.Azure.Relay/HybridConnectionListener.cs
    startLine: 160
  assemblies:
  - Microsoft.Azure.Relay
  namespace: Microsoft.Azure.Relay
  summary: "\nGets the address on which to listen for HybridConnections.  This address should be of the format\n\"sb://contoso.servicebus.windows.net/yourhybridconnection\".\n"
  example: []
  syntax:
    content: public Uri Address { get; }
    content.vb: Public ReadOnly Property Address As Uri
    parameters: []
    return:
      type: System.Uri
  overload: Microsoft.Azure.Relay.HybridConnectionListener.Address*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Relay.HybridConnectionListener.Proxy
  commentId: P:Microsoft.Azure.Relay.HybridConnectionListener.Proxy
  id: Proxy
  parent: Microsoft.Azure.Relay.HybridConnectionListener
  langs:
  - csharp
  - vb
  name: Proxy
  nameWithType: HybridConnectionListener.Proxy
  fullName: Microsoft.Azure.Relay.HybridConnectionListener.Proxy
  type: Property
  source:
    remote:
      path: src/Microsoft.Azure.Relay/HybridConnectionListener.cs
      branch: master
      repo: https://github.com/Azure/azure-relay-dotnet
      commit: 99007f002281f9f1ffe98e9024ee6c7626ec308d
    id: Proxy
    path: src/azure-relay-dotnet/src/Microsoft.Azure.Relay/HybridConnectionListener.cs
    startLine: 165
  assemblies:
  - Microsoft.Azure.Relay
  namespace: Microsoft.Azure.Relay
  summary: "\nGets or sets proxy information for connecting to ServiceBus.\n"
  example: []
  syntax:
    content: public IWebProxy Proxy { get; set; }
    content.vb: Public Property Proxy As IWebProxy
    parameters: []
    return:
      type: System.Net.IWebProxy
  overload: Microsoft.Azure.Relay.HybridConnectionListener.Proxy*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Relay.HybridConnectionListener.TokenProvider
  commentId: P:Microsoft.Azure.Relay.HybridConnectionListener.TokenProvider
  id: TokenProvider
  parent: Microsoft.Azure.Relay.HybridConnectionListener
  langs:
  - csharp
  - vb
  name: TokenProvider
  nameWithType: HybridConnectionListener.TokenProvider
  fullName: Microsoft.Azure.Relay.HybridConnectionListener.TokenProvider
  type: Property
  source:
    remote:
      path: src/Microsoft.Azure.Relay/HybridConnectionListener.cs
      branch: master
      repo: https://github.com/Azure/azure-relay-dotnet
      commit: 99007f002281f9f1ffe98e9024ee6c7626ec308d
    id: TokenProvider
    path: src/azure-relay-dotnet/src/Microsoft.Azure.Relay/HybridConnectionListener.cs
    startLine: 181
  assemblies:
  - Microsoft.Azure.Relay
  namespace: Microsoft.Azure.Relay
  summary: "\nGets the TokenProvider for authenticating this HybridConnection listener.\n"
  example: []
  syntax:
    content: public TokenProvider TokenProvider { get; }
    content.vb: Public ReadOnly Property TokenProvider As TokenProvider
    parameters: []
    return:
      type: Microsoft.Azure.Relay.TokenProvider
  overload: Microsoft.Azure.Relay.HybridConnectionListener.TokenProvider*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Relay.HybridConnectionListener.OpenAsync
  commentId: M:Microsoft.Azure.Relay.HybridConnectionListener.OpenAsync
  id: OpenAsync
  parent: Microsoft.Azure.Relay.HybridConnectionListener
  langs:
  - csharp
  - vb
  name: OpenAsync()
  nameWithType: HybridConnectionListener.OpenAsync()
  fullName: Microsoft.Azure.Relay.HybridConnectionListener.OpenAsync()
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.Relay/HybridConnectionListener.cs
      branch: master
      repo: https://github.com/Azure/azure-relay-dotnet
      commit: 99007f002281f9f1ffe98e9024ee6c7626ec308d
    id: OpenAsync
    path: src/azure-relay-dotnet/src/Microsoft.Azure.Relay/HybridConnectionListener.cs
    startLine: 211
  assemblies:
  - Microsoft.Azure.Relay
  namespace: Microsoft.Azure.Relay
  summary: "\nOpens the <xref href=\"Microsoft.Azure.Relay.HybridConnectionListener\" data-throw-if-not-resolved=\"false\"></xref> and registers it as a listener in ServiceBus.\nUnless specified in the connection string the default is 1 minute.\n"
  example: []
  syntax:
    content: public Task OpenAsync()
    content.vb: Public Function OpenAsync As Task
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.Azure.Relay.HybridConnectionListener.OpenAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Relay.HybridConnectionListener.OpenAsync(System.TimeSpan)
  commentId: M:Microsoft.Azure.Relay.HybridConnectionListener.OpenAsync(System.TimeSpan)
  id: OpenAsync(System.TimeSpan)
  parent: Microsoft.Azure.Relay.HybridConnectionListener
  langs:
  - csharp
  - vb
  name: OpenAsync(TimeSpan)
  nameWithType: HybridConnectionListener.OpenAsync(TimeSpan)
  fullName: Microsoft.Azure.Relay.HybridConnectionListener.OpenAsync(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.Relay/HybridConnectionListener.cs
      branch: master
      repo: https://github.com/Azure/azure-relay-dotnet
      commit: 99007f002281f9f1ffe98e9024ee6c7626ec308d
    id: OpenAsync
    path: src/azure-relay-dotnet/src/Microsoft.Azure.Relay/HybridConnectionListener.cs
    startLine: 219
  assemblies:
  - Microsoft.Azure.Relay
  namespace: Microsoft.Azure.Relay
  summary: "\nOpens the <xref href=\"Microsoft.Azure.Relay.HybridConnectionListener\" data-throw-if-not-resolved=\"false\"></xref> and registers it as a listener in ServiceBus.\n"
  example: []
  syntax:
    content: public Task OpenAsync(TimeSpan timeout)
    content.vb: Public Function OpenAsync(timeout As TimeSpan) As Task
    parameters:
    - id: timeout
      type: System.TimeSpan
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.Azure.Relay.HybridConnectionListener.OpenAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Relay.HybridConnectionListener.OpenAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Relay.HybridConnectionListener.OpenAsync(System.Threading.CancellationToken)
  id: OpenAsync(System.Threading.CancellationToken)
  parent: Microsoft.Azure.Relay.HybridConnectionListener
  langs:
  - csharp
  - vb
  name: OpenAsync(CancellationToken)
  nameWithType: HybridConnectionListener.OpenAsync(CancellationToken)
  fullName: Microsoft.Azure.Relay.HybridConnectionListener.OpenAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.Relay/HybridConnectionListener.cs
      branch: master
      repo: https://github.com/Azure/azure-relay-dotnet
      commit: 99007f002281f9f1ffe98e9024ee6c7626ec308d
    id: OpenAsync
    path: src/azure-relay-dotnet/src/Microsoft.Azure.Relay/HybridConnectionListener.cs
    startLine: 231
  assemblies:
  - Microsoft.Azure.Relay
  namespace: Microsoft.Azure.Relay
  summary: "\nOpens the <xref href=\"Microsoft.Azure.Relay.HybridConnectionListener\" data-throw-if-not-resolved=\"false\"></xref> and registers it as a listener in ServiceBus.\n"
  example: []
  syntax:
    content: public Task OpenAsync(CancellationToken cancellationToken)
    content.vb: Public Function OpenAsync(cancellationToken As CancellationToken) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.Azure.Relay.HybridConnectionListener.OpenAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Relay.HybridConnectionListener.CloseAsync
  commentId: M:Microsoft.Azure.Relay.HybridConnectionListener.CloseAsync
  id: CloseAsync
  parent: Microsoft.Azure.Relay.HybridConnectionListener
  langs:
  - csharp
  - vb
  name: CloseAsync()
  nameWithType: HybridConnectionListener.CloseAsync()
  fullName: Microsoft.Azure.Relay.HybridConnectionListener.CloseAsync()
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.Relay/HybridConnectionListener.cs
      branch: master
      repo: https://github.com/Azure/azure-relay-dotnet
      commit: 99007f002281f9f1ffe98e9024ee6c7626ec308d
    id: CloseAsync
    path: src/azure-relay-dotnet/src/Microsoft.Azure.Relay/HybridConnectionListener.cs
    startLine: 259
  assemblies:
  - Microsoft.Azure.Relay
  namespace: Microsoft.Azure.Relay
  summary: "\nCloses the <xref href=\"Microsoft.Azure.Relay.HybridConnectionListener\" data-throw-if-not-resolved=\"false\"></xref> using the default timeout.\nUnless specified in the connection string the default is 1 minute.\n"
  example: []
  syntax:
    content: public Task CloseAsync()
    content.vb: Public Function CloseAsync As Task
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.Azure.Relay.HybridConnectionListener.CloseAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Relay.HybridConnectionListener.CloseAsync(System.TimeSpan)
  commentId: M:Microsoft.Azure.Relay.HybridConnectionListener.CloseAsync(System.TimeSpan)
  id: CloseAsync(System.TimeSpan)
  parent: Microsoft.Azure.Relay.HybridConnectionListener
  langs:
  - csharp
  - vb
  name: CloseAsync(TimeSpan)
  nameWithType: HybridConnectionListener.CloseAsync(TimeSpan)
  fullName: Microsoft.Azure.Relay.HybridConnectionListener.CloseAsync(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.Relay/HybridConnectionListener.cs
      branch: master
      repo: https://github.com/Azure/azure-relay-dotnet
      commit: 99007f002281f9f1ffe98e9024ee6c7626ec308d
    id: CloseAsync
    path: src/azure-relay-dotnet/src/Microsoft.Azure.Relay/HybridConnectionListener.cs
    startLine: 267
  assemblies:
  - Microsoft.Azure.Relay
  namespace: Microsoft.Azure.Relay
  summary: "\nCloses the <xref href=\"Microsoft.Azure.Relay.HybridConnectionListener\" data-throw-if-not-resolved=\"false\"></xref> using the provided timeout.\n"
  example: []
  syntax:
    content: public Task CloseAsync(TimeSpan timeout)
    content.vb: Public Function CloseAsync(timeout As TimeSpan) As Task
    parameters:
    - id: timeout
      type: System.TimeSpan
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.Azure.Relay.HybridConnectionListener.CloseAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Relay.HybridConnectionListener.CloseAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Relay.HybridConnectionListener.CloseAsync(System.Threading.CancellationToken)
  id: CloseAsync(System.Threading.CancellationToken)
  parent: Microsoft.Azure.Relay.HybridConnectionListener
  langs:
  - csharp
  - vb
  name: CloseAsync(CancellationToken)
  nameWithType: HybridConnectionListener.CloseAsync(CancellationToken)
  fullName: Microsoft.Azure.Relay.HybridConnectionListener.CloseAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.Relay/HybridConnectionListener.cs
      branch: master
      repo: https://github.com/Azure/azure-relay-dotnet
      commit: 99007f002281f9f1ffe98e9024ee6c7626ec308d
    id: CloseAsync
    path: src/azure-relay-dotnet/src/Microsoft.Azure.Relay/HybridConnectionListener.cs
    startLine: 279
  assemblies:
  - Microsoft.Azure.Relay
  namespace: Microsoft.Azure.Relay
  summary: "\nCloses the <xref href=\"Microsoft.Azure.Relay.HybridConnectionListener\" data-throw-if-not-resolved=\"false\"></xref> using the provided CancellationToken.\n"
  example: []
  syntax:
    content: public Task CloseAsync(CancellationToken cancellationToken)
    content.vb: Public Function CloseAsync(cancellationToken As CancellationToken) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.Azure.Relay.HybridConnectionListener.CloseAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Relay.HybridConnectionListener.AcceptConnectionAsync
  commentId: M:Microsoft.Azure.Relay.HybridConnectionListener.AcceptConnectionAsync
  id: AcceptConnectionAsync
  parent: Microsoft.Azure.Relay.HybridConnectionListener
  langs:
  - csharp
  - vb
  name: AcceptConnectionAsync()
  nameWithType: HybridConnectionListener.AcceptConnectionAsync()
  fullName: Microsoft.Azure.Relay.HybridConnectionListener.AcceptConnectionAsync()
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.Relay/HybridConnectionListener.cs
      branch: master
      repo: https://github.com/Azure/azure-relay-dotnet
      commit: 99007f002281f9f1ffe98e9024ee6c7626ec308d
    id: AcceptConnectionAsync
    path: src/azure-relay-dotnet/src/Microsoft.Azure.Relay/HybridConnectionListener.cs
    startLine: 320
  assemblies:
  - Microsoft.Azure.Relay
  namespace: Microsoft.Azure.Relay
  summary: "\nAccepts a new HybridConnection which was initiated by a remote client and returns the Stream.\n"
  example: []
  syntax:
    content: public Task<HybridConnectionStream> AcceptConnectionAsync()
    content.vb: Public Function AcceptConnectionAsync As Task(Of HybridConnectionStream)
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.Relay.HybridConnectionStream}
  overload: Microsoft.Azure.Relay.HybridConnectionListener.AcceptConnectionAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Relay.HybridConnectionListener.ToString
  commentId: M:Microsoft.Azure.Relay.HybridConnectionListener.ToString
  id: ToString
  parent: Microsoft.Azure.Relay.HybridConnectionListener
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: HybridConnectionListener.ToString()
  fullName: Microsoft.Azure.Relay.HybridConnectionListener.ToString()
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.Relay/HybridConnectionListener.cs
      branch: master
      repo: https://github.com/Azure/azure-relay-dotnet
      commit: 99007f002281f9f1ffe98e9024ee6c7626ec308d
    id: ToString
    path: src/azure-relay-dotnet/src/Microsoft.Azure.Relay/HybridConnectionListener.cs
    startLine: 336
  assemblies:
  - Microsoft.Azure.Relay
  namespace: Microsoft.Azure.Relay
  summary: "\nReturns a string that represents the current object.\n"
  example: []
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
  overridden: System.Object.ToString
  overload: Microsoft.Azure.Relay.HybridConnectionListener.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Azure.Relay.HybridConnectionListener.GetRuntimeInformationAsync
  commentId: M:Microsoft.Azure.Relay.HybridConnectionListener.GetRuntimeInformationAsync
  id: GetRuntimeInformationAsync
  parent: Microsoft.Azure.Relay.HybridConnectionListener
  langs:
  - csharp
  - vb
  name: GetRuntimeInformationAsync()
  nameWithType: HybridConnectionListener.GetRuntimeInformationAsync()
  fullName: Microsoft.Azure.Relay.HybridConnectionListener.GetRuntimeInformationAsync()
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.Relay/HybridConnectionListener.cs
      branch: master
      repo: https://github.com/Azure/azure-relay-dotnet
      commit: 99007f002281f9f1ffe98e9024ee6c7626ec308d
    id: GetRuntimeInformationAsync
    path: src/azure-relay-dotnet/src/Microsoft.Azure.Relay/HybridConnectionListener.cs
    startLine: 350
  assemblies:
  - Microsoft.Azure.Relay
  namespace: Microsoft.Azure.Relay
  summary: "\nGets the <xref href=\"Microsoft.Azure.Relay.HybridConnectionRuntimeInformation\" data-throw-if-not-resolved=\"false\"></xref> for this HybridConnection entity using the default timeout.\nUnless specified in the connection string the default is 1 minute.\n"
  example: []
  syntax:
    content: public Task<HybridConnectionRuntimeInformation> GetRuntimeInformationAsync()
    content.vb: Public Function GetRuntimeInformationAsync As Task(Of HybridConnectionRuntimeInformation)
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.Relay.HybridConnectionRuntimeInformation}
  overload: Microsoft.Azure.Relay.HybridConnectionListener.GetRuntimeInformationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Relay.HybridConnectionListener.GetRuntimeInformationAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Relay.HybridConnectionListener.GetRuntimeInformationAsync(System.Threading.CancellationToken)
  id: GetRuntimeInformationAsync(System.Threading.CancellationToken)
  parent: Microsoft.Azure.Relay.HybridConnectionListener
  langs:
  - csharp
  - vb
  name: GetRuntimeInformationAsync(CancellationToken)
  nameWithType: HybridConnectionListener.GetRuntimeInformationAsync(CancellationToken)
  fullName: Microsoft.Azure.Relay.HybridConnectionListener.GetRuntimeInformationAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.Relay/HybridConnectionListener.cs
      branch: master
      repo: https://github.com/Azure/azure-relay-dotnet
      commit: 99007f002281f9f1ffe98e9024ee6c7626ec308d
    id: GetRuntimeInformationAsync
    path: src/azure-relay-dotnet/src/Microsoft.Azure.Relay/HybridConnectionListener.cs
    startLine: 361
  assemblies:
  - Microsoft.Azure.Relay
  namespace: Microsoft.Azure.Relay
  summary: "\nGets the <xref href=\"Microsoft.Azure.Relay.HybridConnectionRuntimeInformation\" data-throw-if-not-resolved=\"false\"></xref> for this HybridConnection entity using the provided CancellationToken.\n"
  example: []
  syntax:
    content: public Task<HybridConnectionRuntimeInformation> GetRuntimeInformationAsync(CancellationToken cancellationToken)
    content.vb: Public Function GetRuntimeInformationAsync(cancellationToken As CancellationToken) As Task(Of HybridConnectionRuntimeInformation)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.Relay.HybridConnectionRuntimeInformation}
  overload: Microsoft.Azure.Relay.HybridConnectionListener.GetRuntimeInformationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Azure.Relay
  commentId: N:Microsoft.Azure.Relay
  isExternal: false
  name: Microsoft.Azure.Relay
  nameWithType: Microsoft.Azure.Relay
  fullName: Microsoft.Azure.Relay
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Azure.Relay.IConnectionStatus
  commentId: T:Microsoft.Azure.Relay.IConnectionStatus
  parent: Microsoft.Azure.Relay
  isExternal: false
  name: IConnectionStatus
  nameWithType: IConnectionStatus
  fullName: Microsoft.Azure.Relay.IConnectionStatus
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Relay.HybridConnectionListener.#ctor*
  commentId: Overload:Microsoft.Azure.Relay.HybridConnectionListener.#ctor
  isExternal: false
  name: HybridConnectionListener
  nameWithType: HybridConnectionListener.HybridConnectionListener
  fullName: Microsoft.Azure.Relay.HybridConnectionListener.HybridConnectionListener
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: Microsoft.Azure.Relay.TokenProvider
  commentId: T:Microsoft.Azure.Relay.TokenProvider
  parent: Microsoft.Azure.Relay
  isExternal: false
  name: TokenProvider
  nameWithType: TokenProvider
  fullName: Microsoft.Azure.Relay.TokenProvider
- uid: Microsoft.Azure.Relay.HybridConnectionListener
  commentId: T:Microsoft.Azure.Relay.HybridConnectionListener
  isExternal: false
  name: HybridConnectionListener
  nameWithType: HybridConnectionListener
  fullName: Microsoft.Azure.Relay.HybridConnectionListener
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Azure.Relay.RelayConnectionStringBuilder.EntityPath
  commentId: P:Microsoft.Azure.Relay.RelayConnectionStringBuilder.EntityPath
- uid: Microsoft.Azure.Relay.IConnectionStatus.Connecting
  commentId: E:Microsoft.Azure.Relay.IConnectionStatus.Connecting
  parent: Microsoft.Azure.Relay.IConnectionStatus
  isExternal: false
  name: Connecting
  nameWithType: IConnectionStatus.Connecting
  fullName: Microsoft.Azure.Relay.IConnectionStatus.Connecting
- uid: System.EventHandler
  commentId: T:System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: Microsoft.Azure.Relay.IConnectionStatus.Online
  commentId: E:Microsoft.Azure.Relay.IConnectionStatus.Online
  parent: Microsoft.Azure.Relay.IConnectionStatus
  isExternal: false
  name: Online
  nameWithType: IConnectionStatus.Online
  fullName: Microsoft.Azure.Relay.IConnectionStatus.Online
- uid: Microsoft.Azure.Relay.IConnectionStatus.Offline
  commentId: E:Microsoft.Azure.Relay.IConnectionStatus.Offline
  parent: Microsoft.Azure.Relay.IConnectionStatus
  isExternal: false
  name: Offline
  nameWithType: IConnectionStatus.Offline
  fullName: Microsoft.Azure.Relay.IConnectionStatus.Offline
- uid: Microsoft.Azure.Relay.HybridConnectionListener.IsOnline*
  commentId: Overload:Microsoft.Azure.Relay.HybridConnectionListener.IsOnline
  isExternal: false
  name: IsOnline
  nameWithType: HybridConnectionListener.IsOnline
  fullName: Microsoft.Azure.Relay.HybridConnectionListener.IsOnline
- uid: Microsoft.Azure.Relay.IConnectionStatus.IsOnline
  commentId: P:Microsoft.Azure.Relay.IConnectionStatus.IsOnline
  parent: Microsoft.Azure.Relay.IConnectionStatus
  isExternal: false
  name: IsOnline
  nameWithType: IConnectionStatus.IsOnline
  fullName: Microsoft.Azure.Relay.IConnectionStatus.IsOnline
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: Microsoft.Azure.Relay.HybridConnectionListener.LastError*
  commentId: Overload:Microsoft.Azure.Relay.HybridConnectionListener.LastError
  isExternal: false
  name: LastError
  nameWithType: HybridConnectionListener.LastError
  fullName: Microsoft.Azure.Relay.HybridConnectionListener.LastError
- uid: Microsoft.Azure.Relay.IConnectionStatus.LastError
  commentId: P:Microsoft.Azure.Relay.IConnectionStatus.LastError
  parent: Microsoft.Azure.Relay.IConnectionStatus
  isExternal: false
  name: LastError
  nameWithType: IConnectionStatus.LastError
  fullName: Microsoft.Azure.Relay.IConnectionStatus.LastError
- uid: Microsoft.Azure.Relay.HybridConnectionListener.Address*
  commentId: Overload:Microsoft.Azure.Relay.HybridConnectionListener.Address
  isExternal: false
  name: Address
  nameWithType: HybridConnectionListener.Address
  fullName: Microsoft.Azure.Relay.HybridConnectionListener.Address
- uid: Microsoft.Azure.Relay.HybridConnectionListener.Proxy*
  commentId: Overload:Microsoft.Azure.Relay.HybridConnectionListener.Proxy
  isExternal: false
  name: Proxy
  nameWithType: HybridConnectionListener.Proxy
  fullName: Microsoft.Azure.Relay.HybridConnectionListener.Proxy
- uid: System.Net.IWebProxy
  commentId: T:System.Net.IWebProxy
  parent: System.Net
  isExternal: true
  name: IWebProxy
  nameWithType: IWebProxy
  fullName: System.Net.IWebProxy
- uid: System.Net
  commentId: N:System.Net
  isExternal: false
  name: System.Net
  nameWithType: System.Net
  fullName: System.Net
- uid: Microsoft.Azure.Relay.HybridConnectionListener.TokenProvider*
  commentId: Overload:Microsoft.Azure.Relay.HybridConnectionListener.TokenProvider
  isExternal: false
  name: TokenProvider
  nameWithType: HybridConnectionListener.TokenProvider
  fullName: Microsoft.Azure.Relay.HybridConnectionListener.TokenProvider
- uid: Microsoft.Azure.Relay.HybridConnectionListener.OpenAsync*
  commentId: Overload:Microsoft.Azure.Relay.HybridConnectionListener.OpenAsync
  isExternal: false
  name: OpenAsync
  nameWithType: HybridConnectionListener.OpenAsync
  fullName: Microsoft.Azure.Relay.HybridConnectionListener.OpenAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: Microsoft.Azure.Relay.HybridConnectionListener.CloseAsync*
  commentId: Overload:Microsoft.Azure.Relay.HybridConnectionListener.CloseAsync
  isExternal: false
  name: CloseAsync
  nameWithType: HybridConnectionListener.CloseAsync
  fullName: Microsoft.Azure.Relay.HybridConnectionListener.CloseAsync
- uid: Microsoft.Azure.Relay.HybridConnectionListener.AcceptConnectionAsync*
  commentId: Overload:Microsoft.Azure.Relay.HybridConnectionListener.AcceptConnectionAsync
  isExternal: false
  name: AcceptConnectionAsync
  nameWithType: HybridConnectionListener.AcceptConnectionAsync
  fullName: Microsoft.Azure.Relay.HybridConnectionListener.AcceptConnectionAsync
- uid: System.Threading.Tasks.Task{Microsoft.Azure.Relay.HybridConnectionStream}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.Relay.HybridConnectionStream}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<HybridConnectionStream>
  nameWithType: Task<HybridConnectionStream>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.Relay.HybridConnectionStream>
  nameWithType.vb: Task(Of HybridConnectionStream)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.Relay.HybridConnectionStream)
  name.vb: Task(Of HybridConnectionStream)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Relay.HybridConnectionStream
    name: HybridConnectionStream
    nameWithType: HybridConnectionStream
    fullName: Microsoft.Azure.Relay.HybridConnectionStream
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Relay.HybridConnectionStream
    name: HybridConnectionStream
    nameWithType: HybridConnectionStream
    fullName: Microsoft.Azure.Relay.HybridConnectionStream
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Relay.HybridConnectionListener.ToString*
  commentId: Overload:Microsoft.Azure.Relay.HybridConnectionListener.ToString
  isExternal: false
  name: ToString
  nameWithType: HybridConnectionListener.ToString
  fullName: Microsoft.Azure.Relay.HybridConnectionListener.ToString
- uid: Microsoft.Azure.Relay.HybridConnectionRuntimeInformation
  commentId: T:Microsoft.Azure.Relay.HybridConnectionRuntimeInformation
  isExternal: false
  name: HybridConnectionRuntimeInformation
  nameWithType: HybridConnectionRuntimeInformation
  fullName: Microsoft.Azure.Relay.HybridConnectionRuntimeInformation
- uid: Microsoft.Azure.Relay.HybridConnectionListener.GetRuntimeInformationAsync*
  commentId: Overload:Microsoft.Azure.Relay.HybridConnectionListener.GetRuntimeInformationAsync
  isExternal: false
  name: GetRuntimeInformationAsync
  nameWithType: HybridConnectionListener.GetRuntimeInformationAsync
  fullName: Microsoft.Azure.Relay.HybridConnectionListener.GetRuntimeInformationAsync
- uid: System.Threading.Tasks.Task{Microsoft.Azure.Relay.HybridConnectionRuntimeInformation}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.Relay.HybridConnectionRuntimeInformation}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<HybridConnectionRuntimeInformation>
  nameWithType: Task<HybridConnectionRuntimeInformation>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.Relay.HybridConnectionRuntimeInformation>
  nameWithType.vb: Task(Of HybridConnectionRuntimeInformation)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.Relay.HybridConnectionRuntimeInformation)
  name.vb: Task(Of HybridConnectionRuntimeInformation)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Relay.HybridConnectionRuntimeInformation
    name: HybridConnectionRuntimeInformation
    nameWithType: HybridConnectionRuntimeInformation
    fullName: Microsoft.Azure.Relay.HybridConnectionRuntimeInformation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Relay.HybridConnectionRuntimeInformation
    name: HybridConnectionRuntimeInformation
    nameWithType: HybridConnectionRuntimeInformation
    fullName: Microsoft.Azure.Relay.HybridConnectionRuntimeInformation
  - name: )
    nameWithType: )
    fullName: )
