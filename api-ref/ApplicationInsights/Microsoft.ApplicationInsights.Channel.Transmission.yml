### YamlMime:ManagedReference
items:
- uid: Microsoft.ApplicationInsights.Channel.Transmission
  commentId: T:Microsoft.ApplicationInsights.Channel.Transmission
  id: Transmission
  parent: Microsoft.ApplicationInsights.Channel
  children:
  - Microsoft.ApplicationInsights.Channel.Transmission.#ctor
  - Microsoft.ApplicationInsights.Channel.Transmission.#ctor(System.Uri,System.Byte[],System.String,System.String,System.TimeSpan)
  - Microsoft.ApplicationInsights.Channel.Transmission.#ctor(System.Uri,System.Collections.Generic.ICollection{Microsoft.ApplicationInsights.Channel.ITelemetry},System.TimeSpan)
  - Microsoft.ApplicationInsights.Channel.Transmission.Content
  - Microsoft.ApplicationInsights.Channel.Transmission.ContentEncoding
  - Microsoft.ApplicationInsights.Channel.Transmission.ContentType
  - Microsoft.ApplicationInsights.Channel.Transmission.CreateRequest(System.Uri)
  - Microsoft.ApplicationInsights.Channel.Transmission.EndpointAddress
  - Microsoft.ApplicationInsights.Channel.Transmission.Id
  - Microsoft.ApplicationInsights.Channel.Transmission.SendAsync
  - Microsoft.ApplicationInsights.Channel.Transmission.Split(System.Func{System.Int32,System.Int32})
  - Microsoft.ApplicationInsights.Channel.Transmission.TelemetryItems
  - Microsoft.ApplicationInsights.Channel.Transmission.Timeout
  langs:
  - csharp
  - vb
  name: Transmission
  nameWithType: Transmission
  fullName: Microsoft.ApplicationInsights.Channel.Transmission
  type: Class
  source:
    remote:
      path: src/Core/Managed/Shared/Channel/Transmission.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: Transmission
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Channel/Transmission.cs
    startLine: 22
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Channel
  summary: "\nImplements an asynchronous transmission of data to an HTTP POST endpoint.\n"
  example: []
  syntax:
    content: public class Transmission
    content.vb: Public Class Transmission
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.ApplicationInsights.Channel.Transmission.#ctor(System.Uri,System.Byte[],System.String,System.String,System.TimeSpan)
  commentId: M:Microsoft.ApplicationInsights.Channel.Transmission.#ctor(System.Uri,System.Byte[],System.String,System.String,System.TimeSpan)
  id: '#ctor(System.Uri,System.Byte[],System.String,System.String,System.TimeSpan)'
  parent: Microsoft.ApplicationInsights.Channel.Transmission
  langs:
  - csharp
  - vb
  name: Transmission(Uri, Byte[], String, String, TimeSpan)
  nameWithType: Transmission.Transmission(Uri, Byte[], String, String, TimeSpan)
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.Transmission(System.Uri, System.Byte[], System.String, System.String, System.TimeSpan)
  type: Constructor
  source:
    remote:
      path: src/Core/Managed/Shared/Channel/Transmission.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: .ctor
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Channel/Transmission.cs
    startLine: 36
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Channel
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.ApplicationInsights.Channel.Transmission\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public Transmission(Uri address, byte[] content, string contentType, string contentEncoding, TimeSpan timeout = null)
    content.vb: Public Sub New(address As Uri, content As Byte(), contentType As String, contentEncoding As String, timeout As TimeSpan = Nothing)
    parameters:
    - id: address
      type: System.Uri
    - id: content
      type: System.Byte[]
    - id: contentType
      type: System.String
    - id: contentEncoding
      type: System.String
    - id: timeout
      type: System.TimeSpan
  overload: Microsoft.ApplicationInsights.Channel.Transmission.#ctor*
  nameWithType.vb: Transmission.Transmission(Uri, Byte(), String, String, TimeSpan)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ApplicationInsights.Channel.Transmission.Transmission(System.Uri, System.Byte(), System.String, System.String, System.TimeSpan)
  name.vb: Transmission(Uri, Byte(), String, String, TimeSpan)
- uid: Microsoft.ApplicationInsights.Channel.Transmission.#ctor(System.Uri,System.Collections.Generic.ICollection{Microsoft.ApplicationInsights.Channel.ITelemetry},System.TimeSpan)
  commentId: M:Microsoft.ApplicationInsights.Channel.Transmission.#ctor(System.Uri,System.Collections.Generic.ICollection{Microsoft.ApplicationInsights.Channel.ITelemetry},System.TimeSpan)
  id: '#ctor(System.Uri,System.Collections.Generic.ICollection{Microsoft.ApplicationInsights.Channel.ITelemetry},System.TimeSpan)'
  parent: Microsoft.ApplicationInsights.Channel.Transmission
  langs:
  - csharp
  - vb
  name: Transmission(Uri, ICollection<ITelemetry>, TimeSpan)
  nameWithType: Transmission.Transmission(Uri, ICollection<ITelemetry>, TimeSpan)
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.Transmission(System.Uri, System.Collections.Generic.ICollection<Microsoft.ApplicationInsights.Channel.ITelemetry>, System.TimeSpan)
  type: Constructor
  source:
    remote:
      path: src/Core/Managed/Shared/Channel/Transmission.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: .ctor
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Channel/Transmission.cs
    startLine: 68
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Channel
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.ApplicationInsights.Channel.Transmission\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public Transmission(Uri address, ICollection<ITelemetry> telemetryItems, TimeSpan timeout = null)
    content.vb: Public Sub New(address As Uri, telemetryItems As ICollection(Of ITelemetry), timeout As TimeSpan = Nothing)
    parameters:
    - id: address
      type: System.Uri
    - id: telemetryItems
      type: System.Collections.Generic.ICollection{Microsoft.ApplicationInsights.Channel.ITelemetry}
    - id: timeout
      type: System.TimeSpan
  overload: Microsoft.ApplicationInsights.Channel.Transmission.#ctor*
  nameWithType.vb: Transmission.Transmission(Uri, ICollection(Of ITelemetry), TimeSpan)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ApplicationInsights.Channel.Transmission.Transmission(System.Uri, System.Collections.Generic.ICollection(Of Microsoft.ApplicationInsights.Channel.ITelemetry), System.TimeSpan)
  name.vb: Transmission(Uri, ICollection(Of ITelemetry), TimeSpan)
- uid: Microsoft.ApplicationInsights.Channel.Transmission.#ctor
  commentId: M:Microsoft.ApplicationInsights.Channel.Transmission.#ctor
  id: '#ctor'
  parent: Microsoft.ApplicationInsights.Channel.Transmission
  langs:
  - csharp
  - vb
  name: Transmission()
  nameWithType: Transmission.Transmission()
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.Transmission()
  type: Constructor
  source:
    remote:
      path: src/Core/Managed/Shared/Channel/Transmission.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: .ctor
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Channel/Transmission.cs
    startLine: 85
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Channel
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.ApplicationInsights.Channel.Transmission\" data-throw-if-not-resolved=\"false\"></xref> class. This overload is for Test purposes. \n"
  example: []
  syntax:
    content: protected Transmission()
    content.vb: Protected Sub New
  overload: Microsoft.ApplicationInsights.Channel.Transmission.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.ApplicationInsights.Channel.Transmission.EndpointAddress
  commentId: P:Microsoft.ApplicationInsights.Channel.Transmission.EndpointAddress
  id: EndpointAddress
  parent: Microsoft.ApplicationInsights.Channel.Transmission
  langs:
  - csharp
  - vb
  name: EndpointAddress
  nameWithType: Transmission.EndpointAddress
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.EndpointAddress
  type: Property
  source:
    remote:
      path: src/Core/Managed/Shared/Channel/Transmission.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: EndpointAddress
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Channel/Transmission.cs
    startLine: 92
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Channel
  summary: "\nGets the Address of the endpoint to which transmission will be sent.\n"
  example: []
  syntax:
    content: public Uri EndpointAddress { get; }
    content.vb: Public ReadOnly Property EndpointAddress As Uri
    parameters: []
    return:
      type: System.Uri
  overload: Microsoft.ApplicationInsights.Channel.Transmission.EndpointAddress*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ApplicationInsights.Channel.Transmission.Content
  commentId: P:Microsoft.ApplicationInsights.Channel.Transmission.Content
  id: Content
  parent: Microsoft.ApplicationInsights.Channel.Transmission
  langs:
  - csharp
  - vb
  name: Content
  nameWithType: Transmission.Content
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.Content
  type: Property
  source:
    remote:
      path: src/Core/Managed/Shared/Channel/Transmission.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: Content
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Channel/Transmission.cs
    startLine: 101
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Channel
  summary: "\nGets the content of the transmission.\n"
  example: []
  syntax:
    content: public byte[] Content { get; }
    content.vb: Public ReadOnly Property Content As Byte()
    parameters: []
    return:
      type: System.Byte[]
  overload: Microsoft.ApplicationInsights.Channel.Transmission.Content*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ApplicationInsights.Channel.Transmission.ContentType
  commentId: P:Microsoft.ApplicationInsights.Channel.Transmission.ContentType
  id: ContentType
  parent: Microsoft.ApplicationInsights.Channel.Transmission
  langs:
  - csharp
  - vb
  name: ContentType
  nameWithType: Transmission.ContentType
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.ContentType
  type: Property
  source:
    remote:
      path: src/Core/Managed/Shared/Channel/Transmission.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: ContentType
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Channel/Transmission.cs
    startLine: 110
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Channel
  summary: "\nGets the content's type of the transmission.\n"
  example: []
  syntax:
    content: public string ContentType { get; }
    content.vb: Public ReadOnly Property ContentType As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.ApplicationInsights.Channel.Transmission.ContentType*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ApplicationInsights.Channel.Transmission.ContentEncoding
  commentId: P:Microsoft.ApplicationInsights.Channel.Transmission.ContentEncoding
  id: ContentEncoding
  parent: Microsoft.ApplicationInsights.Channel.Transmission
  langs:
  - csharp
  - vb
  name: ContentEncoding
  nameWithType: Transmission.ContentEncoding
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.ContentEncoding
  type: Property
  source:
    remote:
      path: src/Core/Managed/Shared/Channel/Transmission.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: ContentEncoding
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Channel/Transmission.cs
    startLine: 119
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Channel
  summary: "\nGets the encoding method of the transmission.\n"
  example: []
  syntax:
    content: public string ContentEncoding { get; }
    content.vb: Public ReadOnly Property ContentEncoding As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.ApplicationInsights.Channel.Transmission.ContentEncoding*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ApplicationInsights.Channel.Transmission.Timeout
  commentId: P:Microsoft.ApplicationInsights.Channel.Transmission.Timeout
  id: Timeout
  parent: Microsoft.ApplicationInsights.Channel.Transmission
  langs:
  - csharp
  - vb
  name: Timeout
  nameWithType: Transmission.Timeout
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.Timeout
  type: Property
  source:
    remote:
      path: src/Core/Managed/Shared/Channel/Transmission.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: Timeout
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Channel/Transmission.cs
    startLine: 128
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Channel
  summary: "\nGets a timeout value for the transmission.\n"
  example: []
  syntax:
    content: public TimeSpan Timeout { get; }
    content.vb: Public ReadOnly Property Timeout As TimeSpan
    parameters: []
    return:
      type: System.TimeSpan
  overload: Microsoft.ApplicationInsights.Channel.Transmission.Timeout*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ApplicationInsights.Channel.Transmission.Id
  commentId: P:Microsoft.ApplicationInsights.Channel.Transmission.Id
  id: Id
  parent: Microsoft.ApplicationInsights.Channel.Transmission
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: Transmission.Id
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.Id
  type: Property
  source:
    remote:
      path: src/Core/Managed/Shared/Channel/Transmission.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: Id
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Channel/Transmission.cs
    startLine: 137
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Channel
  summary: "\nGets an id of the transmission.\n"
  example: []
  syntax:
    content: public string Id { get; }
    content.vb: Public ReadOnly Property Id As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.ApplicationInsights.Channel.Transmission.Id*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ApplicationInsights.Channel.Transmission.TelemetryItems
  commentId: P:Microsoft.ApplicationInsights.Channel.Transmission.TelemetryItems
  id: TelemetryItems
  parent: Microsoft.ApplicationInsights.Channel.Transmission
  langs:
  - csharp
  - vb
  name: TelemetryItems
  nameWithType: Transmission.TelemetryItems
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.TelemetryItems
  type: Property
  source:
    remote:
      path: src/Core/Managed/Shared/Channel/Transmission.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: TelemetryItems
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Channel/Transmission.cs
    startLine: 145
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Channel
  summary: "\nGets the number of telemetry items in the transmission.\n"
  example: []
  syntax:
    content: public ICollection<ITelemetry> TelemetryItems { get; }
    content.vb: Public ReadOnly Property TelemetryItems As ICollection(Of ITelemetry)
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{Microsoft.ApplicationInsights.Channel.ITelemetry}
  overload: Microsoft.ApplicationInsights.Channel.Transmission.TelemetryItems*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ApplicationInsights.Channel.Transmission.SendAsync
  commentId: M:Microsoft.ApplicationInsights.Channel.Transmission.SendAsync
  id: SendAsync
  parent: Microsoft.ApplicationInsights.Channel.Transmission
  langs:
  - csharp
  - vb
  name: SendAsync()
  nameWithType: Transmission.SendAsync()
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.SendAsync()
  type: Method
  source:
    remote:
      path: src/Core/Managed/Shared/Channel/Transmission.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: SendAsync
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Channel/Transmission.cs
    startLine: 155
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Channel
  summary: "\nExecutes the request that the current transmission represents.\n"
  example: []
  syntax:
    content: public virtual Task<HttpWebResponseWrapper> SendAsync()
    content.vb: Public Overridable Function SendAsync As Task(Of HttpWebResponseWrapper)
    return:
      type: System.Threading.Tasks.Task{Microsoft.ApplicationInsights.Extensibility.Implementation.HttpWebResponseWrapper}
      description: The task to await.
  overload: Microsoft.ApplicationInsights.Channel.Transmission.SendAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.ApplicationInsights.Channel.Transmission.Split(System.Func{System.Int32,System.Int32})
  commentId: M:Microsoft.ApplicationInsights.Channel.Transmission.Split(System.Func{System.Int32,System.Int32})
  id: Split(System.Func{System.Int32,System.Int32})
  parent: Microsoft.ApplicationInsights.Channel.Transmission
  langs:
  - csharp
  - vb
  name: Split(Func<Int32, Int32>)
  nameWithType: Transmission.Split(Func<Int32, Int32>)
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.Split(System.Func<System.Int32, System.Int32>)
  type: Method
  source:
    remote:
      path: src/Core/Managed/Shared/Channel/Transmission.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: Split
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Channel/Transmission.cs
    startLine: 243
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Channel
  summary: "\nSplits the Transmission object into two pieces using a method \nto determine the length of the first piece based off of the length of the transmission.\n"
  example: []
  syntax:
    content: public virtual Tuple<Transmission, Transmission> Split(Func<int, int> calculateLength)
    content.vb: Public Overridable Function Split(calculateLength As Func(Of Integer, Integer)) As Tuple(Of Transmission, Transmission)
    parameters:
    - id: calculateLength
      type: System.Func{System.Int32,System.Int32}
    return:
      type: System.Tuple{Microsoft.ApplicationInsights.Channel.Transmission,Microsoft.ApplicationInsights.Channel.Transmission}
      description: "\nA tuple with the first item being a Transmission object with n ITelemetry objects\nand the second item being a Transmission object with the remaining ITelemetry objects.\n"
  overload: Microsoft.ApplicationInsights.Channel.Transmission.Split*
  nameWithType.vb: Transmission.Split(Func(Of Int32, Int32))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.ApplicationInsights.Channel.Transmission.Split(System.Func(Of System.Int32, System.Int32))
  name.vb: Split(Func(Of Int32, Int32))
- uid: Microsoft.ApplicationInsights.Channel.Transmission.CreateRequest(System.Uri)
  commentId: M:Microsoft.ApplicationInsights.Channel.Transmission.CreateRequest(System.Uri)
  id: CreateRequest(System.Uri)
  parent: Microsoft.ApplicationInsights.Channel.Transmission
  langs:
  - csharp
  - vb
  name: CreateRequest(Uri)
  nameWithType: Transmission.CreateRequest(Uri)
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.CreateRequest(System.Uri)
  type: Method
  source:
    remote:
      path: src/Core/Managed/Shared/Channel/Transmission.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: CreateRequest
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Channel/Transmission.cs
    startLine: 374
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Channel
  summary: "\nCreates a post web request.  \n"
  example: []
  syntax:
    content: protected virtual WebRequest CreateRequest(Uri address)
    content.vb: Protected Overridable Function CreateRequest(address As Uri) As WebRequest
    parameters:
    - id: address
      type: System.Uri
      description: The Address in the web request.
    return:
      type: System.Net.WebRequest
      description: A web request pointing to the <code>Address</code>.
  overload: Microsoft.ApplicationInsights.Channel.Transmission.CreateRequest*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: Microsoft.ApplicationInsights.Channel
  commentId: N:Microsoft.ApplicationInsights.Channel
  isExternal: false
  name: Microsoft.ApplicationInsights.Channel
  nameWithType: Microsoft.ApplicationInsights.Channel
  fullName: Microsoft.ApplicationInsights.Channel
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.ApplicationInsights.Channel.Transmission
  commentId: T:Microsoft.ApplicationInsights.Channel.Transmission
  isExternal: false
  name: Transmission
  nameWithType: Transmission
  fullName: Microsoft.ApplicationInsights.Channel.Transmission
- uid: Microsoft.ApplicationInsights.Channel.Transmission.#ctor*
  commentId: Overload:Microsoft.ApplicationInsights.Channel.Transmission.#ctor
  isExternal: false
  name: Transmission
  nameWithType: Transmission.Transmission
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.Transmission
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Collections.Generic.ICollection{Microsoft.ApplicationInsights.Channel.ITelemetry}
  commentId: T:System.Collections.Generic.ICollection{Microsoft.ApplicationInsights.Channel.ITelemetry}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<ITelemetry>
  nameWithType: ICollection<ITelemetry>
  fullName: System.Collections.Generic.ICollection<Microsoft.ApplicationInsights.Channel.ITelemetry>
  nameWithType.vb: ICollection(Of ITelemetry)
  fullname.vb: System.Collections.Generic.ICollection(Of Microsoft.ApplicationInsights.Channel.ITelemetry)
  name.vb: ICollection(Of ITelemetry)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ApplicationInsights.Channel.ITelemetry
    name: ITelemetry
    nameWithType: ITelemetry
    fullName: Microsoft.ApplicationInsights.Channel.ITelemetry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ApplicationInsights.Channel.ITelemetry
    name: ITelemetry
    nameWithType: ITelemetry
    fullName: Microsoft.ApplicationInsights.Channel.ITelemetry
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullname.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.ApplicationInsights.Channel.Transmission.EndpointAddress*
  commentId: Overload:Microsoft.ApplicationInsights.Channel.Transmission.EndpointAddress
  isExternal: false
  name: EndpointAddress
  nameWithType: Transmission.EndpointAddress
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.EndpointAddress
- uid: Microsoft.ApplicationInsights.Channel.Transmission.Content*
  commentId: Overload:Microsoft.ApplicationInsights.Channel.Transmission.Content
  isExternal: false
  name: Content
  nameWithType: Transmission.Content
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.Content
- uid: Microsoft.ApplicationInsights.Channel.Transmission.ContentType*
  commentId: Overload:Microsoft.ApplicationInsights.Channel.Transmission.ContentType
  isExternal: false
  name: ContentType
  nameWithType: Transmission.ContentType
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.ContentType
- uid: Microsoft.ApplicationInsights.Channel.Transmission.ContentEncoding*
  commentId: Overload:Microsoft.ApplicationInsights.Channel.Transmission.ContentEncoding
  isExternal: false
  name: ContentEncoding
  nameWithType: Transmission.ContentEncoding
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.ContentEncoding
- uid: Microsoft.ApplicationInsights.Channel.Transmission.Timeout*
  commentId: Overload:Microsoft.ApplicationInsights.Channel.Transmission.Timeout
  isExternal: false
  name: Timeout
  nameWithType: Transmission.Timeout
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.Timeout
- uid: Microsoft.ApplicationInsights.Channel.Transmission.Id*
  commentId: Overload:Microsoft.ApplicationInsights.Channel.Transmission.Id
  isExternal: false
  name: Id
  nameWithType: Transmission.Id
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.Id
- uid: Microsoft.ApplicationInsights.Channel.Transmission.TelemetryItems*
  commentId: Overload:Microsoft.ApplicationInsights.Channel.Transmission.TelemetryItems
  isExternal: false
  name: TelemetryItems
  nameWithType: Transmission.TelemetryItems
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.TelemetryItems
- uid: Microsoft.ApplicationInsights.Channel.Transmission.SendAsync*
  commentId: Overload:Microsoft.ApplicationInsights.Channel.Transmission.SendAsync
  isExternal: false
  name: SendAsync
  nameWithType: Transmission.SendAsync
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.SendAsync
- uid: System.Threading.Tasks.Task{Microsoft.ApplicationInsights.Extensibility.Implementation.HttpWebResponseWrapper}
  commentId: T:System.Threading.Tasks.Task{Microsoft.ApplicationInsights.Extensibility.Implementation.HttpWebResponseWrapper}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<HttpWebResponseWrapper>
  nameWithType: Task<HttpWebResponseWrapper>
  fullName: System.Threading.Tasks.Task<Microsoft.ApplicationInsights.Extensibility.Implementation.HttpWebResponseWrapper>
  nameWithType.vb: Task(Of HttpWebResponseWrapper)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.ApplicationInsights.Extensibility.Implementation.HttpWebResponseWrapper)
  name.vb: Task(Of HttpWebResponseWrapper)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ApplicationInsights.Extensibility.Implementation.HttpWebResponseWrapper
    name: HttpWebResponseWrapper
    nameWithType: HttpWebResponseWrapper
    fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.HttpWebResponseWrapper
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ApplicationInsights.Extensibility.Implementation.HttpWebResponseWrapper
    name: HttpWebResponseWrapper
    nameWithType: HttpWebResponseWrapper
    fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.HttpWebResponseWrapper
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.ApplicationInsights.Channel.Transmission.Split*
  commentId: Overload:Microsoft.ApplicationInsights.Channel.Transmission.Split
  isExternal: false
  name: Split
  nameWithType: Transmission.Split
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.Split
- uid: System.Func{System.Int32,System.Int32}
  commentId: T:System.Func{System.Int32,System.Int32}
  parent: System
  definition: System.Func`2
  name: Func<Int32, Int32>
  nameWithType: Func<Int32, Int32>
  fullName: System.Func<System.Int32, System.Int32>
  nameWithType.vb: Func(Of Int32, Int32)
  fullname.vb: System.Func(Of System.Int32, System.Int32)
  name.vb: Func(Of Int32, Int32)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Tuple{Microsoft.ApplicationInsights.Channel.Transmission,Microsoft.ApplicationInsights.Channel.Transmission}
  commentId: T:System.Tuple{Microsoft.ApplicationInsights.Channel.Transmission,Microsoft.ApplicationInsights.Channel.Transmission}
  parent: System
  definition: System.Tuple`2
  name: Tuple<Transmission, Transmission>
  nameWithType: Tuple<Transmission, Transmission>
  fullName: System.Tuple<Microsoft.ApplicationInsights.Channel.Transmission, Microsoft.ApplicationInsights.Channel.Transmission>
  nameWithType.vb: Tuple(Of Transmission, Transmission)
  fullname.vb: System.Tuple(Of Microsoft.ApplicationInsights.Channel.Transmission, Microsoft.ApplicationInsights.Channel.Transmission)
  name.vb: Tuple(Of Transmission, Transmission)
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ApplicationInsights.Channel.Transmission
    name: Transmission
    nameWithType: Transmission
    fullName: Microsoft.ApplicationInsights.Channel.Transmission
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.ApplicationInsights.Channel.Transmission
    name: Transmission
    nameWithType: Transmission
    fullName: Microsoft.ApplicationInsights.Channel.Transmission
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ApplicationInsights.Channel.Transmission
    name: Transmission
    nameWithType: Transmission
    fullName: Microsoft.ApplicationInsights.Channel.Transmission
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.ApplicationInsights.Channel.Transmission
    name: Transmission
    nameWithType: Transmission
    fullName: Microsoft.ApplicationInsights.Channel.Transmission
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Tuple`2
  commentId: T:System.Tuple`2
  isExternal: true
  name: Tuple<T1, T2>
  nameWithType: Tuple<T1, T2>
  fullName: System.Tuple<T1, T2>
  nameWithType.vb: Tuple(Of T1, T2)
  fullname.vb: System.Tuple(Of T1, T2)
  name.vb: Tuple(Of T1, T2)
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ApplicationInsights.Channel.Transmission.CreateRequest*
  commentId: Overload:Microsoft.ApplicationInsights.Channel.Transmission.CreateRequest
  isExternal: false
  name: CreateRequest
  nameWithType: Transmission.CreateRequest
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.CreateRequest
- uid: System.Net.WebRequest
  commentId: T:System.Net.WebRequest
  parent: System.Net
  isExternal: true
  name: WebRequest
  nameWithType: WebRequest
  fullName: System.Net.WebRequest
- uid: System.Net
  commentId: N:System.Net
  isExternal: false
  name: System.Net
  nameWithType: System.Net
  fullName: System.Net
