### YamlMime:ManagedReference
items:
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext
  commentId: T:Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext
  id: DeviceContext
  parent: Microsoft.ApplicationInsights.Extensibility.Implementation
  children:
  - Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Id
  - Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Language
  - Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Model
  - Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.NetworkType
  - Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.OemName
  - Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.OperatingSystem
  - Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.ScreenResolution
  - Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Type
  langs:
  - csharp
  - vb
  name: DeviceContext
  nameWithType: DeviceContext
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext
  type: Class
  source:
    remote:
      path: src/Core/Managed/Shared/Extensibility/Implementation/DeviceContext.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: DeviceContext
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Extensibility/Implementation/DeviceContext.cs
    startLine: 9
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Extensibility.Implementation
  summary: "\nEncapsulates information about a device where an application is running.\n"
  example: []
  syntax:
    content: public sealed class DeviceContext
    content.vb: Public NotInheritable Class DeviceContext
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Type
  commentId: P:Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Type
  id: Type
  parent: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: DeviceContext.Type
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Type
  type: Property
  source:
    remote:
      path: src/Core/Managed/Shared/Extensibility/Implementation/DeviceContext.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: Type
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Extensibility/Implementation/DeviceContext.cs
    startLine: 23
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Extensibility.Implementation
  summary: "\nGets or sets the type for the current device.\n"
  example: []
  syntax:
    content: public string Type { get; set; }
    content.vb: Public Property Type As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Type*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Id
  commentId: P:Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Id
  id: Id
  parent: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: DeviceContext.Id
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Id
  type: Property
  source:
    remote:
      path: src/Core/Managed/Shared/Extensibility/Implementation/DeviceContext.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: Id
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Extensibility/Implementation/DeviceContext.cs
    startLine: 32
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Extensibility.Implementation
  summary: "\nGets or sets a device unique ID.\n"
  example: []
  syntax:
    content: public string Id { get; set; }
    content.vb: Public Property Id As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Id*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.OperatingSystem
  commentId: P:Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.OperatingSystem
  id: OperatingSystem
  parent: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext
  langs:
  - csharp
  - vb
  name: OperatingSystem
  nameWithType: DeviceContext.OperatingSystem
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.OperatingSystem
  type: Property
  source:
    remote:
      path: src/Core/Managed/Shared/Extensibility/Implementation/DeviceContext.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: OperatingSystem
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Extensibility/Implementation/DeviceContext.cs
    startLine: 41
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Extensibility.Implementation
  summary: "\nGets or sets the operating system name.\n"
  example: []
  syntax:
    content: public string OperatingSystem { get; set; }
    content.vb: Public Property OperatingSystem As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.OperatingSystem*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.OemName
  commentId: P:Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.OemName
  id: OemName
  parent: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext
  langs:
  - csharp
  - vb
  name: OemName
  nameWithType: DeviceContext.OemName
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.OemName
  type: Property
  source:
    remote:
      path: src/Core/Managed/Shared/Extensibility/Implementation/DeviceContext.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: OemName
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Extensibility/Implementation/DeviceContext.cs
    startLine: 50
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Extensibility.Implementation
  summary: "\nGets or sets the device OEM for the current device.\n"
  example: []
  syntax:
    content: public string OemName { get; set; }
    content.vb: Public Property OemName As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.OemName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Model
  commentId: P:Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Model
  id: Model
  parent: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext
  langs:
  - csharp
  - vb
  name: Model
  nameWithType: DeviceContext.Model
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Model
  type: Property
  source:
    remote:
      path: src/Core/Managed/Shared/Extensibility/Implementation/DeviceContext.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: Model
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Extensibility/Implementation/DeviceContext.cs
    startLine: 59
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Extensibility.Implementation
  summary: "\nGets or sets the device model for the current device.\n"
  example: []
  syntax:
    content: public string Model { get; set; }
    content.vb: Public Property Model As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Model*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.NetworkType
  commentId: P:Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.NetworkType
  id: NetworkType
  parent: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext
  langs:
  - csharp
  - vb
  name: NetworkType
  nameWithType: DeviceContext.NetworkType
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.NetworkType
  type: Property
  source:
    remote:
      path: src/Core/Managed/Shared/Extensibility/Implementation/DeviceContext.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: NetworkType
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Extensibility/Implementation/DeviceContext.cs
    startLine: 69
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Extensibility.Implementation
  summary: "\nGets or sets the <a href=\"http://www.iana.org/assignments/ianaiftype-mib/ianaiftype-mib\">IANA interface type</a> \nfor the internet connected network adapter.\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use custom properties.")]

      public string NetworkType { get; set; }
    content.vb: >-
      <Obsolete("Use custom properties.")>

      Public Property NetworkType As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.NetworkType*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use custom properties.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.ScreenResolution
  commentId: P:Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.ScreenResolution
  id: ScreenResolution
  parent: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext
  langs:
  - csharp
  - vb
  name: ScreenResolution
  nameWithType: DeviceContext.ScreenResolution
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.ScreenResolution
  type: Property
  source:
    remote:
      path: src/Core/Managed/Shared/Extensibility/Implementation/DeviceContext.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: ScreenResolution
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Extensibility/Implementation/DeviceContext.cs
    startLine: 79
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Extensibility.Implementation
  summary: "\nGets or sets the current application screen resolution.\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use custom properties.")]

      public string ScreenResolution { get; set; }
    content.vb: >-
      <Obsolete("Use custom properties.")>

      Public Property ScreenResolution As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.ScreenResolution*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use custom properties.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Language
  commentId: P:Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Language
  id: Language
  parent: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext
  langs:
  - csharp
  - vb
  name: Language
  nameWithType: DeviceContext.Language
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Language
  type: Property
  source:
    remote:
      path: src/Core/Managed/Shared/Extensibility/Implementation/DeviceContext.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: Language
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Extensibility/Implementation/DeviceContext.cs
    startLine: 89
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Extensibility.Implementation
  summary: "\nGets or sets the current display language of the operating system.\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use custom properties.")]

      public string Language { get; set; }
    content.vb: >-
      <Obsolete("Use custom properties.")>

      Public Property Language As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Language*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use custom properties.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation
  commentId: N:Microsoft.ApplicationInsights.Extensibility.Implementation
  isExternal: false
  name: Microsoft.ApplicationInsights.Extensibility.Implementation
  nameWithType: Microsoft.ApplicationInsights.Extensibility.Implementation
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Type*
  commentId: Overload:Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Type
  isExternal: false
  name: Type
  nameWithType: DeviceContext.Type
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Type
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Id*
  commentId: Overload:Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Id
  isExternal: false
  name: Id
  nameWithType: DeviceContext.Id
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Id
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.OperatingSystem*
  commentId: Overload:Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.OperatingSystem
  isExternal: false
  name: OperatingSystem
  nameWithType: DeviceContext.OperatingSystem
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.OperatingSystem
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.OemName*
  commentId: Overload:Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.OemName
  isExternal: false
  name: OemName
  nameWithType: DeviceContext.OemName
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.OemName
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Model*
  commentId: Overload:Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Model
  isExternal: false
  name: Model
  nameWithType: DeviceContext.Model
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Model
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.NetworkType*
  commentId: Overload:Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.NetworkType
  isExternal: false
  name: NetworkType
  nameWithType: DeviceContext.NetworkType
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.NetworkType
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.ScreenResolution*
  commentId: Overload:Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.ScreenResolution
  isExternal: false
  name: ScreenResolution
  nameWithType: DeviceContext.ScreenResolution
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.ScreenResolution
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Language*
  commentId: Overload:Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Language
  isExternal: false
  name: Language
  nameWithType: DeviceContext.Language
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.DeviceContext.Language
