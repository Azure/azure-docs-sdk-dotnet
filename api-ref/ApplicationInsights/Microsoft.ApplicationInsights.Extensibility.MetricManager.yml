### YamlMime:ManagedReference
items:
- uid: Microsoft.ApplicationInsights.Extensibility.MetricManager
  commentId: T:Microsoft.ApplicationInsights.Extensibility.MetricManager
  id: MetricManager
  parent: Microsoft.ApplicationInsights.Extensibility
  children:
  - Microsoft.ApplicationInsights.Extensibility.MetricManager.#ctor
  - Microsoft.ApplicationInsights.Extensibility.MetricManager.#ctor(Microsoft.ApplicationInsights.TelemetryClient)
  - Microsoft.ApplicationInsights.Extensibility.MetricManager.CreateMetric(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  - Microsoft.ApplicationInsights.Extensibility.MetricManager.Dispose
  - Microsoft.ApplicationInsights.Extensibility.MetricManager.Flush
  langs:
  - csharp
  - vb
  name: MetricManager
  nameWithType: MetricManager
  fullName: Microsoft.ApplicationInsights.Extensibility.MetricManager
  type: Class
  source:
    remote:
      path: src/Core/Managed/Shared/Extensibility/MetricManager.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: MetricManager
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Extensibility/MetricManager.cs
    startLine: 20
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Extensibility
  summary: "\nMetric factory and controller.\n"
  example: []
  syntax:
    content: 'public sealed class MetricManager : IDisposable'
    content.vb: >-
      Public NotInheritable Class MetricManager
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.ApplicationInsights.Extensibility.MetricManager.#ctor
  commentId: M:Microsoft.ApplicationInsights.Extensibility.MetricManager.#ctor
  id: '#ctor'
  parent: Microsoft.ApplicationInsights.Extensibility.MetricManager
  langs:
  - csharp
  - vb
  name: MetricManager()
  nameWithType: MetricManager.MetricManager()
  fullName: Microsoft.ApplicationInsights.Extensibility.MetricManager.MetricManager()
  type: Constructor
  source:
    remote:
      path: src/Core/Managed/Shared/Extensibility/MetricManager.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: .ctor
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Extensibility/MetricManager.cs
    startLine: 55
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Extensibility
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.ApplicationInsights.Extensibility.MetricManager\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public MetricManager()
    content.vb: Public Sub New
  overload: Microsoft.ApplicationInsights.Extensibility.MetricManager.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ApplicationInsights.Extensibility.MetricManager.#ctor(Microsoft.ApplicationInsights.TelemetryClient)
  commentId: M:Microsoft.ApplicationInsights.Extensibility.MetricManager.#ctor(Microsoft.ApplicationInsights.TelemetryClient)
  id: '#ctor(Microsoft.ApplicationInsights.TelemetryClient)'
  parent: Microsoft.ApplicationInsights.Extensibility.MetricManager
  langs:
  - csharp
  - vb
  name: MetricManager(TelemetryClient)
  nameWithType: MetricManager.MetricManager(TelemetryClient)
  fullName: Microsoft.ApplicationInsights.Extensibility.MetricManager.MetricManager(Microsoft.ApplicationInsights.TelemetryClient)
  type: Constructor
  source:
    remote:
      path: src/Core/Managed/Shared/Extensibility/MetricManager.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: .ctor
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Extensibility/MetricManager.cs
    startLine: 64
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Extensibility
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.ApplicationInsights.Extensibility.MetricManager\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public MetricManager(TelemetryClient client)
    content.vb: Public Sub New(client As TelemetryClient)
    parameters:
    - id: client
      type: Microsoft.ApplicationInsights.TelemetryClient
      description: Telemetry client to use to output aggregated metric data.
  overload: Microsoft.ApplicationInsights.Extensibility.MetricManager.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ApplicationInsights.Extensibility.MetricManager.CreateMetric(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  commentId: M:Microsoft.ApplicationInsights.Extensibility.MetricManager.CreateMetric(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  id: CreateMetric(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  parent: Microsoft.ApplicationInsights.Extensibility.MetricManager
  langs:
  - csharp
  - vb
  name: CreateMetric(String, IDictionary<String, String>)
  nameWithType: MetricManager.CreateMetric(String, IDictionary<String, String>)
  fullName: Microsoft.ApplicationInsights.Extensibility.MetricManager.CreateMetric(System.String, System.Collections.Generic.IDictionary<System.String, System.String>)
  type: Method
  source:
    remote:
      path: src/Core/Managed/Shared/Extensibility/MetricManager.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: CreateMetric
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Extensibility/MetricManager.cs
    startLine: 95
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Extensibility
  summary: "\nCreates metric.\n"
  example: []
  syntax:
    content: public Metric CreateMetric(string name, IDictionary<string, string> dimensions = null)
    content.vb: Public Function CreateMetric(name As String, dimensions As IDictionary(Of String, String) = Nothing) As Metric
    parameters:
    - id: name
      type: System.String
      description: Name of the metric.
    - id: dimensions
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: Optional dimensions.
    return:
      type: Microsoft.ApplicationInsights.Extensibility.Metric
      description: Metric instance.
  overload: Microsoft.ApplicationInsights.Extensibility.MetricManager.CreateMetric*
  nameWithType.vb: MetricManager.CreateMetric(String, IDictionary(Of String, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ApplicationInsights.Extensibility.MetricManager.CreateMetric(System.String, System.Collections.Generic.IDictionary(Of System.String, System.String))
  name.vb: CreateMetric(String, IDictionary(Of String, String))
- uid: Microsoft.ApplicationInsights.Extensibility.MetricManager.Flush
  commentId: M:Microsoft.ApplicationInsights.Extensibility.MetricManager.Flush
  id: Flush
  parent: Microsoft.ApplicationInsights.Extensibility.MetricManager
  langs:
  - csharp
  - vb
  name: Flush()
  nameWithType: MetricManager.Flush()
  fullName: Microsoft.ApplicationInsights.Extensibility.MetricManager.Flush()
  type: Method
  source:
    remote:
      path: src/Core/Managed/Shared/Extensibility/MetricManager.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: Flush
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Extensibility/MetricManager.cs
    startLine: 103
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Extensibility
  summary: "\nFlushes the in-memory aggregation buffers.\n"
  example: []
  syntax:
    content: public void Flush()
    content.vb: Public Sub Flush
  overload: Microsoft.ApplicationInsights.Extensibility.MetricManager.Flush*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ApplicationInsights.Extensibility.MetricManager.Dispose
  commentId: M:Microsoft.ApplicationInsights.Extensibility.MetricManager.Dispose
  id: Dispose
  parent: Microsoft.ApplicationInsights.Extensibility.MetricManager
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: MetricManager.Dispose()
  fullName: Microsoft.ApplicationInsights.Extensibility.MetricManager.Dispose()
  type: Method
  source:
    remote:
      path: src/Core/Managed/Shared/Extensibility/MetricManager.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: Dispose
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Extensibility/MetricManager.cs
    startLine: 119
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Extensibility
  summary: "\nDisposes the object.\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Microsoft.ApplicationInsights.Extensibility.MetricManager.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.ApplicationInsights.Extensibility
  commentId: N:Microsoft.ApplicationInsights.Extensibility
  isExternal: false
  name: Microsoft.ApplicationInsights.Extensibility
  nameWithType: Microsoft.ApplicationInsights.Extensibility
  fullName: Microsoft.ApplicationInsights.Extensibility
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.ApplicationInsights.Extensibility.MetricManager
  commentId: T:Microsoft.ApplicationInsights.Extensibility.MetricManager
  isExternal: false
  name: MetricManager
  nameWithType: MetricManager
  fullName: Microsoft.ApplicationInsights.Extensibility.MetricManager
- uid: Microsoft.ApplicationInsights.Extensibility.MetricManager.#ctor*
  commentId: Overload:Microsoft.ApplicationInsights.Extensibility.MetricManager.#ctor
  isExternal: false
  name: MetricManager
  nameWithType: MetricManager.MetricManager
  fullName: Microsoft.ApplicationInsights.Extensibility.MetricManager.MetricManager
- uid: Microsoft.ApplicationInsights.TelemetryClient
  commentId: T:Microsoft.ApplicationInsights.TelemetryClient
  parent: Microsoft.ApplicationInsights
  isExternal: false
  name: TelemetryClient
  nameWithType: TelemetryClient
  fullName: Microsoft.ApplicationInsights.TelemetryClient
- uid: Microsoft.ApplicationInsights
  commentId: N:Microsoft.ApplicationInsights
  isExternal: false
  name: Microsoft.ApplicationInsights
  nameWithType: Microsoft.ApplicationInsights
  fullName: Microsoft.ApplicationInsights
- uid: Microsoft.ApplicationInsights.Extensibility.MetricManager.CreateMetric*
  commentId: Overload:Microsoft.ApplicationInsights.Extensibility.MetricManager.CreateMetric
  isExternal: false
  name: CreateMetric
  nameWithType: MetricManager.CreateMetric
  fullName: Microsoft.ApplicationInsights.Extensibility.MetricManager.CreateMetric
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String>
  nameWithType: IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  nameWithType.vb: IDictionary(Of String, String)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ApplicationInsights.Extensibility.Metric
  commentId: T:Microsoft.ApplicationInsights.Extensibility.Metric
  parent: Microsoft.ApplicationInsights.Extensibility
  isExternal: false
  name: Metric
  nameWithType: Metric
  fullName: Microsoft.ApplicationInsights.Extensibility.Metric
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.ApplicationInsights.Extensibility.MetricManager.Flush*
  commentId: Overload:Microsoft.ApplicationInsights.Extensibility.MetricManager.Flush
  isExternal: false
  name: Flush
  nameWithType: MetricManager.Flush
  fullName: Microsoft.ApplicationInsights.Extensibility.MetricManager.Flush
- uid: Microsoft.ApplicationInsights.Extensibility.MetricManager.Dispose*
  commentId: Overload:Microsoft.ApplicationInsights.Extensibility.MetricManager.Dispose
  isExternal: false
  name: Dispose
  nameWithType: MetricManager.Dispose
  fullName: Microsoft.ApplicationInsights.Extensibility.MetricManager.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
