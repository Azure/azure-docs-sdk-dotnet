### YamlMime:ManagedReference
items:
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer
  commentId: T:Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer
  id: TaskTimer
  parent: Microsoft.ApplicationInsights.Extensibility.Implementation
  children:
  - Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Cancel
  - Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Delay
  - Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Dispose
  - Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.InfiniteTimeSpan
  - Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.IsStarted
  - Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Start(System.Func{System.Threading.Tasks.Task})
  langs:
  - csharp
  - vb
  name: TaskTimer
  nameWithType: TaskTimer
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer
  type: Class
  source:
    remote:
      path: src/Core/Managed/Shared/Extensibility/Implementation/TaskTimer.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: TaskTimer
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Extensibility/Implementation/TaskTimer.cs
    startLine: 19
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Extensibility.Implementation
  summary: "\nRuns a task after a certain delay and log any error.\n"
  example: []
  syntax:
    content: 'public class TaskTimer : IDisposable'
    content.vb: >-
      Public Class TaskTimer
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.InfiniteTimeSpan
  commentId: F:Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.InfiniteTimeSpan
  id: InfiniteTimeSpan
  parent: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer
  langs:
  - csharp
  - vb
  name: InfiniteTimeSpan
  nameWithType: TaskTimer.InfiniteTimeSpan
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.InfiniteTimeSpan
  type: Field
  source:
    remote:
      path: src/Core/Managed/Shared/Extensibility/Implementation/TaskTimer.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: InfiniteTimeSpan
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Extensibility/Implementation/TaskTimer.cs
    startLine: 24
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Extensibility.Implementation
  summary: "\nRepresents an infinite time span.\n"
  example: []
  syntax:
    content: public static readonly TimeSpan InfiniteTimeSpan
    content.vb: Public Shared ReadOnly InfiniteTimeSpan As TimeSpan
    return:
      type: System.TimeSpan
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Delay
  commentId: P:Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Delay
  id: Delay
  parent: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer
  langs:
  - csharp
  - vb
  name: Delay
  nameWithType: TaskTimer.Delay
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Delay
  type: Property
  source:
    remote:
      path: src/Core/Managed/Shared/Extensibility/Implementation/TaskTimer.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: Delay
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Extensibility/Implementation/TaskTimer.cs
    startLine: 32
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Extensibility.Implementation
  summary: "\nGets or sets the delay before the task starts. \n"
  example: []
  syntax:
    content: public TimeSpan Delay { get; set; }
    content.vb: Public Property Delay As TimeSpan
    parameters: []
    return:
      type: System.TimeSpan
  overload: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Delay*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.IsStarted
  commentId: P:Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.IsStarted
  id: IsStarted
  parent: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer
  langs:
  - csharp
  - vb
  name: IsStarted
  nameWithType: TaskTimer.IsStarted
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.IsStarted
  type: Property
  source:
    remote:
      path: src/Core/Managed/Shared/Extensibility/Implementation/TaskTimer.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: IsStarted
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Extensibility/Implementation/TaskTimer.cs
    startLine: 53
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Extensibility.Implementation
  summary: "\nGets a value indicating whether value that indicates if a task has already started.\n"
  example: []
  syntax:
    content: public bool IsStarted { get; }
    content.vb: Public ReadOnly Property IsStarted As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.IsStarted*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Start(System.Func{System.Threading.Tasks.Task})
  commentId: M:Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Start(System.Func{System.Threading.Tasks.Task})
  id: Start(System.Func{System.Threading.Tasks.Task})
  parent: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer
  langs:
  - csharp
  - vb
  name: Start(Func<Task>)
  nameWithType: TaskTimer.Start(Func<Task>)
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Start(System.Func<System.Threading.Tasks.Task>)
  type: Method
  source:
    remote:
      path: src/Core/Managed/Shared/Extensibility/Implementation/TaskTimer.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: Start
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Extensibility/Implementation/TaskTimer.cs
    startLine: 62
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Extensibility.Implementation
  summary: "\nStart the task.\n"
  example: []
  syntax:
    content: public void Start(Func<Task> elapsed)
    content.vb: Public Sub Start(elapsed As Func(Of Task))
    parameters:
    - id: elapsed
      type: System.Func{System.Threading.Tasks.Task}
      description: The task to run.
  overload: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Start*
  nameWithType.vb: TaskTimer.Start(Func(Of Task))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Start(System.Func(Of System.Threading.Tasks.Task))
  name.vb: Start(Func(Of Task))
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Cancel
  commentId: M:Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Cancel
  id: Cancel
  parent: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer
  langs:
  - csharp
  - vb
  name: Cancel()
  nameWithType: TaskTimer.Cancel()
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Cancel()
  type: Method
  source:
    remote:
      path: src/Core/Managed/Shared/Extensibility/Implementation/TaskTimer.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: Cancel
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Extensibility/Implementation/TaskTimer.cs
    startLine: 119
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Extensibility.Implementation
  summary: "\nCancels the current task.\n"
  example: []
  syntax:
    content: public void Cancel()
    content.vb: Public Sub Cancel
  overload: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Cancel*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Dispose
  commentId: M:Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Dispose
  id: Dispose
  parent: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: TaskTimer.Dispose()
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Dispose()
  type: Method
  source:
    remote:
      path: src/Core/Managed/Shared/Extensibility/Implementation/TaskTimer.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: Dispose
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Extensibility/Implementation/TaskTimer.cs
    startLine: 127
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Extensibility.Implementation
  summary: "\nReleases unmanaged and - optionally - managed resources.\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation
  commentId: N:Microsoft.ApplicationInsights.Extensibility.Implementation
  isExternal: false
  name: Microsoft.ApplicationInsights.Extensibility.Implementation
  nameWithType: Microsoft.ApplicationInsights.Extensibility.Implementation
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Delay*
  commentId: Overload:Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Delay
  isExternal: false
  name: Delay
  nameWithType: TaskTimer.Delay
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Delay
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.IsStarted*
  commentId: Overload:Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.IsStarted
  isExternal: false
  name: IsStarted
  nameWithType: TaskTimer.IsStarted
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.IsStarted
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Start*
  commentId: Overload:Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Start
  isExternal: false
  name: Start
  nameWithType: TaskTimer.Start
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Start
- uid: System.Func{System.Threading.Tasks.Task}
  commentId: T:System.Func{System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`1
  name: Func<Task>
  nameWithType: Func<Task>
  fullName: System.Func<System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of Task)
  fullname.vb: System.Func(Of System.Threading.Tasks.Task)
  name.vb: Func(Of Task)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullname.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Cancel*
  commentId: Overload:Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Cancel
  isExternal: false
  name: Cancel
  nameWithType: TaskTimer.Cancel
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Cancel
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Dispose*
  commentId: Overload:Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Dispose
  isExternal: false
  name: Dispose
  nameWithType: TaskTimer.Dispose
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
