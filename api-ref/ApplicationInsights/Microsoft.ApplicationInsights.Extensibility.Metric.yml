### YamlMime:ManagedReference
items:
- uid: Microsoft.ApplicationInsights.Extensibility.Metric
  commentId: T:Microsoft.ApplicationInsights.Extensibility.Metric
  id: Metric
  parent: Microsoft.ApplicationInsights.Extensibility
  children:
  - Microsoft.ApplicationInsights.Extensibility.Metric.Dimensions
  - Microsoft.ApplicationInsights.Extensibility.Metric.Equals(Microsoft.ApplicationInsights.Extensibility.Metric)
  - Microsoft.ApplicationInsights.Extensibility.Metric.Equals(System.Object)
  - Microsoft.ApplicationInsights.Extensibility.Metric.GetHashCode
  - Microsoft.ApplicationInsights.Extensibility.Metric.Name
  - Microsoft.ApplicationInsights.Extensibility.Metric.Track(System.Double)
  langs:
  - csharp
  - vb
  name: Metric
  nameWithType: Metric
  fullName: Microsoft.ApplicationInsights.Extensibility.Metric
  type: Class
  source:
    remote:
      path: src/Core/Managed/Shared/Extensibility/Metric.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: Metric
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Extensibility/Metric.cs
    startLine: 14
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Extensibility
  summary: "\nRepresents aggregator for a single time series of a given metric.\n"
  example: []
  syntax:
    content: 'public class Metric : IEquatable<Metric>'
    content.vb: >-
      Public Class Metric
          Implements IEquatable(Of Metric)
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{Microsoft.ApplicationInsights.Extensibility.Metric}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.ApplicationInsights.Extensibility.Metric.Name
  commentId: P:Microsoft.ApplicationInsights.Extensibility.Metric.Name
  id: Name
  parent: Microsoft.ApplicationInsights.Extensibility.Metric
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Metric.Name
  fullName: Microsoft.ApplicationInsights.Extensibility.Metric.Name
  type: Property
  source:
    remote:
      path: src/Core/Managed/Shared/Extensibility/Metric.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: Name
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Extensibility/Metric.cs
    startLine: 58
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Extensibility
  summary: "\nGets metric name.\n"
  example: []
  syntax:
    content: public string Name { get; }
    content.vb: Public ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.ApplicationInsights.Extensibility.Metric.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ApplicationInsights.Extensibility.Metric.Dimensions
  commentId: P:Microsoft.ApplicationInsights.Extensibility.Metric.Dimensions
  id: Dimensions
  parent: Microsoft.ApplicationInsights.Extensibility.Metric
  langs:
  - csharp
  - vb
  name: Dimensions
  nameWithType: Metric.Dimensions
  fullName: Microsoft.ApplicationInsights.Extensibility.Metric.Dimensions
  type: Property
  source:
    remote:
      path: src/Core/Managed/Shared/Extensibility/Metric.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: Dimensions
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Extensibility/Metric.cs
    startLine: 63
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Extensibility
  summary: "\nGets a set of metric dimensions and their values.\n"
  example: []
  syntax:
    content: public IDictionary<string, string> Dimensions { get; }
    content.vb: Public ReadOnly Property Dimensions As IDictionary(Of String, String)
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
  overload: Microsoft.ApplicationInsights.Extensibility.Metric.Dimensions*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ApplicationInsights.Extensibility.Metric.Track(System.Double)
  commentId: M:Microsoft.ApplicationInsights.Extensibility.Metric.Track(System.Double)
  id: Track(System.Double)
  parent: Microsoft.ApplicationInsights.Extensibility.Metric
  langs:
  - csharp
  - vb
  name: Track(Double)
  nameWithType: Metric.Track(Double)
  fullName: Microsoft.ApplicationInsights.Extensibility.Metric.Track(System.Double)
  type: Method
  source:
    remote:
      path: src/Core/Managed/Shared/Extensibility/Metric.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: Track
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Extensibility/Metric.cs
    startLine: 69
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Extensibility
  summary: "\nAdds a value to the time series.\n"
  example: []
  syntax:
    content: public void Track(double value)
    content.vb: Public Sub Track(value As Double)
    parameters:
    - id: value
      type: System.Double
      description: Metric value.
  overload: Microsoft.ApplicationInsights.Extensibility.Metric.Track*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ApplicationInsights.Extensibility.Metric.GetHashCode
  commentId: M:Microsoft.ApplicationInsights.Extensibility.Metric.GetHashCode
  id: GetHashCode
  parent: Microsoft.ApplicationInsights.Extensibility.Metric
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Metric.GetHashCode()
  fullName: Microsoft.ApplicationInsights.Extensibility.Metric.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Core/Managed/Shared/Extensibility/Metric.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: GetHashCode
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Extensibility/Metric.cs
    startLine: 81
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Extensibility
  summary: "\nReturns the hash code for this object.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
  overridden: System.Object.GetHashCode
  overload: Microsoft.ApplicationInsights.Extensibility.Metric.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.ApplicationInsights.Extensibility.Metric.Equals(Microsoft.ApplicationInsights.Extensibility.Metric)
  commentId: M:Microsoft.ApplicationInsights.Extensibility.Metric.Equals(Microsoft.ApplicationInsights.Extensibility.Metric)
  id: Equals(Microsoft.ApplicationInsights.Extensibility.Metric)
  parent: Microsoft.ApplicationInsights.Extensibility.Metric
  langs:
  - csharp
  - vb
  name: Equals(Metric)
  nameWithType: Metric.Equals(Metric)
  fullName: Microsoft.ApplicationInsights.Extensibility.Metric.Equals(Microsoft.ApplicationInsights.Extensibility.Metric)
  type: Method
  source:
    remote:
      path: src/Core/Managed/Shared/Extensibility/Metric.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: Equals
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Extensibility/Metric.cs
    startLine: 91
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Extensibility
  summary: "\nDetermines whether the specified object is equal to the current object.\n"
  example: []
  syntax:
    content: public bool Equals(Metric other)
    content.vb: Public Function Equals(other As Metric) As Boolean
    parameters:
    - id: other
      type: Microsoft.ApplicationInsights.Extensibility.Metric
      description: 'The object to compare with the current object. '
    return:
      type: System.Boolean
      description: True if the specified object is equal to the current object; otherwise, false.
  overload: Microsoft.ApplicationInsights.Extensibility.Metric.Equals*
  implements:
  - System.IEquatable{Microsoft.ApplicationInsights.Extensibility.Metric}.Equals(Microsoft.ApplicationInsights.Extensibility.Metric)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ApplicationInsights.Extensibility.Metric.Equals(System.Object)
  commentId: M:Microsoft.ApplicationInsights.Extensibility.Metric.Equals(System.Object)
  id: Equals(System.Object)
  parent: Microsoft.ApplicationInsights.Extensibility.Metric
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Metric.Equals(Object)
  fullName: Microsoft.ApplicationInsights.Extensibility.Metric.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Core/Managed/Shared/Extensibility/Metric.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: Equals
    path: src/ApplicationInsights-dotnet/src/Core/Managed/Shared/Extensibility/Metric.cs
    startLine: 106
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Extensibility
  summary: "\nDetermines whether the specified object is equal to the current object.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: 'The object to compare with the current object. '
    return:
      type: System.Boolean
      description: True if the specified object is equal to the current object; otherwise, false.
  overridden: System.Object.Equals(System.Object)
  overload: Microsoft.ApplicationInsights.Extensibility.Metric.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.ApplicationInsights.Extensibility
  commentId: N:Microsoft.ApplicationInsights.Extensibility
  isExternal: false
  name: Microsoft.ApplicationInsights.Extensibility
  nameWithType: Microsoft.ApplicationInsights.Extensibility
  fullName: Microsoft.ApplicationInsights.Extensibility
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IEquatable{Microsoft.ApplicationInsights.Extensibility.Metric}
  commentId: T:System.IEquatable{Microsoft.ApplicationInsights.Extensibility.Metric}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Metric>
  nameWithType: IEquatable<Metric>
  fullName: System.IEquatable<Microsoft.ApplicationInsights.Extensibility.Metric>
  nameWithType.vb: IEquatable(Of Metric)
  fullname.vb: System.IEquatable(Of Microsoft.ApplicationInsights.Extensibility.Metric)
  name.vb: IEquatable(Of Metric)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ApplicationInsights.Extensibility.Metric
    name: Metric
    nameWithType: Metric
    fullName: Microsoft.ApplicationInsights.Extensibility.Metric
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ApplicationInsights.Extensibility.Metric
    name: Metric
    nameWithType: Metric
    fullName: Microsoft.ApplicationInsights.Extensibility.Metric
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullname.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ApplicationInsights.Extensibility.Metric.Name*
  commentId: Overload:Microsoft.ApplicationInsights.Extensibility.Metric.Name
  isExternal: false
  name: Name
  nameWithType: Metric.Name
  fullName: Microsoft.ApplicationInsights.Extensibility.Metric.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.ApplicationInsights.Extensibility.Metric.Dimensions*
  commentId: Overload:Microsoft.ApplicationInsights.Extensibility.Metric.Dimensions
  isExternal: false
  name: Dimensions
  nameWithType: Metric.Dimensions
  fullName: Microsoft.ApplicationInsights.Extensibility.Metric.Dimensions
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String>
  nameWithType: IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  nameWithType.vb: IDictionary(Of String, String)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.ApplicationInsights.Extensibility.Metric.Track*
  commentId: Overload:Microsoft.ApplicationInsights.Extensibility.Metric.Track
  isExternal: false
  name: Track
  nameWithType: Metric.Track
  fullName: Microsoft.ApplicationInsights.Extensibility.Metric.Track
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ApplicationInsights.Extensibility.Metric.GetHashCode*
  commentId: Overload:Microsoft.ApplicationInsights.Extensibility.Metric.GetHashCode
  isExternal: false
  name: GetHashCode
  nameWithType: Metric.GetHashCode
  fullName: Microsoft.ApplicationInsights.Extensibility.Metric.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.ApplicationInsights.Extensibility.Metric.Equals*
  commentId: Overload:Microsoft.ApplicationInsights.Extensibility.Metric.Equals
  isExternal: false
  name: Equals
  nameWithType: Metric.Equals
  fullName: Microsoft.ApplicationInsights.Extensibility.Metric.Equals
- uid: System.IEquatable{Microsoft.ApplicationInsights.Extensibility.Metric}.Equals(Microsoft.ApplicationInsights.Extensibility.Metric)
  commentId: M:System.IEquatable{Microsoft.ApplicationInsights.Extensibility.Metric}.Equals(Microsoft.ApplicationInsights.Extensibility.Metric)
  parent: System.IEquatable{Microsoft.ApplicationInsights.Extensibility.Metric}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Metric)
  nameWithType: IEquatable<Metric>.Equals(Metric)
  fullName: System.IEquatable<Microsoft.ApplicationInsights.Extensibility.Metric>.Equals(Microsoft.ApplicationInsights.Extensibility.Metric)
  nameWithType.vb: IEquatable(Of Metric).Equals(Metric)
  fullname.vb: System.IEquatable(Of Microsoft.ApplicationInsights.Extensibility.Metric).Equals(Microsoft.ApplicationInsights.Extensibility.Metric)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Metric>.Equals
    fullName: System.IEquatable<Microsoft.ApplicationInsights.Extensibility.Metric>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ApplicationInsights.Extensibility.Metric
    name: Metric
    nameWithType: Metric
    fullName: Microsoft.ApplicationInsights.Extensibility.Metric
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Metric).Equals
    fullName: System.IEquatable(Of Microsoft.ApplicationInsights.Extensibility.Metric).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ApplicationInsights.Extensibility.Metric
    name: Metric
    nameWithType: Metric
    fullName: Microsoft.ApplicationInsights.Extensibility.Metric
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ApplicationInsights.Extensibility.Metric
  commentId: T:Microsoft.ApplicationInsights.Extensibility.Metric
  parent: Microsoft.ApplicationInsights.Extensibility
  isExternal: false
  name: Metric
  nameWithType: Metric
  fullName: Microsoft.ApplicationInsights.Extensibility.Metric
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
