### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting
  commentId: T:Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting
  id: DatabaseBackupSetting
  parent: Microsoft.Azure.Management.WebSites.Models
  children:
  - Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.#ctor
  - Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.#ctor(System.String,System.String,System.String,System.String)
  - Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.ConnectionString
  - Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.ConnectionStringName
  - Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.DatabaseType
  - Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.Name
  langs:
  - csharp
  - vb
  name: DatabaseBackupSetting
  nameWithType: DatabaseBackupSetting
  fullName: Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting
  type: Class
  source:
    remote:
      path: src/ResourceManagement/WebSite/Microsoft.Azure.Management.Websites/Generated/Models/DatabaseBackupSetting.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DatabaseBackupSetting
    path: src/azure-sdk-for-net/src/ResourceManagement/WebSite/Microsoft.Azure.Management.Websites/Generated/Models/DatabaseBackupSetting.cs
    startLine: 24
  assemblies:
  - Microsoft.Azure.Management.Websites
  namespace: Microsoft.Azure.Management.WebSites.Models
  summary: "\nNote: properties are serialized in JSON format and stored in DB.\nif new properties are added they might not be in the\nprevious data rows\nso please handle nulls\n"
  example: []
  syntax:
    content: public class DatabaseBackupSetting
    content.vb: Public Class DatabaseBackupSetting
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.#ctor
  commentId: M:Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.#ctor
  id: '#ctor'
  parent: Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting
  langs:
  - csharp
  - vb
  name: DatabaseBackupSetting()
  nameWithType: DatabaseBackupSetting.DatabaseBackupSetting()
  fullName: Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.DatabaseBackupSetting()
  type: Constructor
  source:
    remote:
      path: src/ResourceManagement/WebSite/Microsoft.Azure.Management.Websites/Generated/Models/DatabaseBackupSetting.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/ResourceManagement/WebSite/Microsoft.Azure.Management.Websites/Generated/Models/DatabaseBackupSetting.cs
    startLine: 29
  assemblies:
  - Microsoft.Azure.Management.Websites
  namespace: Microsoft.Azure.Management.WebSites.Models
  summary: "\nInitializes a new instance of the DatabaseBackupSetting class.\n"
  example: []
  syntax:
    content: public DatabaseBackupSetting()
    content.vb: Public Sub New
  overload: Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.#ctor(System.String,System.String,System.String,System.String)
  commentId: M:Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.#ctor(System.String,System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String,System.String)'
  parent: Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting
  langs:
  - csharp
  - vb
  name: DatabaseBackupSetting(String, String, String, String)
  nameWithType: DatabaseBackupSetting.DatabaseBackupSetting(String, String, String, String)
  fullName: Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.DatabaseBackupSetting(System.String, System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/ResourceManagement/WebSite/Microsoft.Azure.Management.Websites/Generated/Models/DatabaseBackupSetting.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/ResourceManagement/WebSite/Microsoft.Azure.Management.Websites/Generated/Models/DatabaseBackupSetting.cs
    startLine: 34
  assemblies:
  - Microsoft.Azure.Management.Websites
  namespace: Microsoft.Azure.Management.WebSites.Models
  summary: "\nInitializes a new instance of the DatabaseBackupSetting class.\n"
  example: []
  syntax:
    content: public DatabaseBackupSetting(string databaseType = null, string name = null, string connectionStringName = null, string connectionString = null)
    content.vb: Public Sub New(databaseType As String = Nothing, name As String = Nothing, connectionStringName As String = Nothing, connectionString As String = Nothing)
    parameters:
    - id: databaseType
      type: System.String
    - id: name
      type: System.String
    - id: connectionStringName
      type: System.String
    - id: connectionString
      type: System.String
  overload: Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.DatabaseType
  commentId: P:Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.DatabaseType
  id: DatabaseType
  parent: Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting
  langs:
  - csharp
  - vb
  name: DatabaseType
  nameWithType: DatabaseBackupSetting.DatabaseType
  fullName: Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.DatabaseType
  type: Property
  source:
    remote:
      path: src/ResourceManagement/WebSite/Microsoft.Azure.Management.Websites/Generated/Models/DatabaseBackupSetting.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DatabaseType
    path: src/azure-sdk-for-net/src/ResourceManagement/WebSite/Microsoft.Azure.Management.Websites/Generated/Models/DatabaseBackupSetting.cs
    startLine: 45
  assemblies:
  - Microsoft.Azure.Management.Websites
  namespace: Microsoft.Azure.Management.WebSites.Models
  summary: "\nSqlAzure / MySql\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "databaseType")]

      public string DatabaseType { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="databaseType")>

      Public Property DatabaseType As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.DatabaseType*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: databaseType
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.Name
  commentId: P:Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.Name
  id: Name
  parent: Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: DatabaseBackupSetting.Name
  fullName: Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.Name
  type: Property
  source:
    remote:
      path: src/ResourceManagement/WebSite/Microsoft.Azure.Management.Websites/Generated/Models/DatabaseBackupSetting.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Name
    path: src/azure-sdk-for-net/src/ResourceManagement/WebSite/Microsoft.Azure.Management.Websites/Generated/Models/DatabaseBackupSetting.cs
    startLine: 50
  assemblies:
  - Microsoft.Azure.Management.Websites
  namespace: Microsoft.Azure.Management.WebSites.Models
  summary: "\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "name")]

      public string Name { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="name")>

      Public Property Name As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.Name*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: name
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.ConnectionStringName
  commentId: P:Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.ConnectionStringName
  id: ConnectionStringName
  parent: Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting
  langs:
  - csharp
  - vb
  name: ConnectionStringName
  nameWithType: DatabaseBackupSetting.ConnectionStringName
  fullName: Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.ConnectionStringName
  type: Property
  source:
    remote:
      path: src/ResourceManagement/WebSite/Microsoft.Azure.Management.Websites/Generated/Models/DatabaseBackupSetting.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ConnectionStringName
    path: src/azure-sdk-for-net/src/ResourceManagement/WebSite/Microsoft.Azure.Management.Websites/Generated/Models/DatabaseBackupSetting.cs
    startLine: 59
  assemblies:
  - Microsoft.Azure.Management.Websites
  namespace: Microsoft.Azure.Management.WebSites.Models
  summary: "\nContains a connection string name that is linked to the\nSiteConfig.ConnectionStrings.\nThis is used during restore with overwrite connection\nstrings options.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "connectionStringName")]

      public string ConnectionStringName { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="connectionStringName")>

      Public Property ConnectionStringName As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.ConnectionStringName*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: connectionStringName
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.ConnectionString
  commentId: P:Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.ConnectionString
  id: ConnectionString
  parent: Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting
  langs:
  - csharp
  - vb
  name: ConnectionString
  nameWithType: DatabaseBackupSetting.ConnectionString
  fullName: Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.ConnectionString
  type: Property
  source:
    remote:
      path: src/ResourceManagement/WebSite/Microsoft.Azure.Management.Websites/Generated/Models/DatabaseBackupSetting.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ConnectionString
    path: src/azure-sdk-for-net/src/ResourceManagement/WebSite/Microsoft.Azure.Management.Websites/Generated/Models/DatabaseBackupSetting.cs
    startLine: 67
  assemblies:
  - Microsoft.Azure.Management.Websites
  namespace: Microsoft.Azure.Management.WebSites.Models
  summary: "\nContains a connection string to a database which is being backed\nup/restored. If the restore should happen to a new database, the\ndatabase name inside is the new one.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "connectionString")]

      public string ConnectionString { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="connectionString")>

      Public Property ConnectionString As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.ConnectionString*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: connectionString
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Azure.Management.WebSites.Models
  commentId: N:Microsoft.Azure.Management.WebSites.Models
  isExternal: false
  name: Microsoft.Azure.Management.WebSites.Models
  nameWithType: Microsoft.Azure.Management.WebSites.Models
  fullName: Microsoft.Azure.Management.WebSites.Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.#ctor*
  commentId: Overload:Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.#ctor
  isExternal: false
  name: DatabaseBackupSetting
  nameWithType: DatabaseBackupSetting.DatabaseBackupSetting
  fullName: Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.DatabaseBackupSetting
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.DatabaseType*
  commentId: Overload:Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.DatabaseType
  isExternal: false
  name: DatabaseType
  nameWithType: DatabaseBackupSetting.DatabaseType
  fullName: Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.DatabaseType
- uid: Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.Name*
  commentId: Overload:Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.Name
  isExternal: false
  name: Name
  nameWithType: DatabaseBackupSetting.Name
  fullName: Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.Name
- uid: Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.ConnectionStringName*
  commentId: Overload:Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.ConnectionStringName
  isExternal: false
  name: ConnectionStringName
  nameWithType: DatabaseBackupSetting.ConnectionStringName
  fullName: Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.ConnectionStringName
- uid: Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.ConnectionString*
  commentId: Overload:Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.ConnectionString
  isExternal: false
  name: ConnectionString
  nameWithType: DatabaseBackupSetting.ConnectionString
  fullName: Microsoft.Azure.Management.WebSites.Models.DatabaseBackupSetting.ConnectionString
