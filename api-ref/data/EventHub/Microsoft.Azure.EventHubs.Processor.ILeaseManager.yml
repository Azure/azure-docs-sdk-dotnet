### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.EventHubs.Processor.ILeaseManager
  commentId: T:Microsoft.Azure.EventHubs.Processor.ILeaseManager
  id: ILeaseManager
  parent: Microsoft.Azure.EventHubs.Processor
  children:
  - Microsoft.Azure.EventHubs.Processor.ILeaseManager.AcquireLeaseAsync(Microsoft.Azure.EventHubs.Processor.Lease)
  - Microsoft.Azure.EventHubs.Processor.ILeaseManager.CreateLeaseIfNotExistsAsync(System.String)
  - Microsoft.Azure.EventHubs.Processor.ILeaseManager.CreateLeaseStoreIfNotExistsAsync
  - Microsoft.Azure.EventHubs.Processor.ILeaseManager.DeleteLeaseAsync(Microsoft.Azure.EventHubs.Processor.Lease)
  - Microsoft.Azure.EventHubs.Processor.ILeaseManager.DeleteLeaseStoreAsync
  - Microsoft.Azure.EventHubs.Processor.ILeaseManager.GetAllLeases
  - Microsoft.Azure.EventHubs.Processor.ILeaseManager.GetLeaseAsync(System.String)
  - Microsoft.Azure.EventHubs.Processor.ILeaseManager.LeaseDuration
  - Microsoft.Azure.EventHubs.Processor.ILeaseManager.LeaseRenewInterval
  - Microsoft.Azure.EventHubs.Processor.ILeaseManager.LeaseStoreExistsAsync
  - Microsoft.Azure.EventHubs.Processor.ILeaseManager.ReleaseLeaseAsync(Microsoft.Azure.EventHubs.Processor.Lease)
  - Microsoft.Azure.EventHubs.Processor.ILeaseManager.RenewLeaseAsync(Microsoft.Azure.EventHubs.Processor.Lease)
  - Microsoft.Azure.EventHubs.Processor.ILeaseManager.UpdateLeaseAsync(Microsoft.Azure.EventHubs.Processor.Lease)
  langs:
  - csharp
  - vb
  name: ILeaseManager
  nameWithType: ILeaseManager
  fullName: Microsoft.Azure.EventHubs.Processor.ILeaseManager
  type: Interface
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/ILeaseManager.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: ILeaseManager
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/ILeaseManager.cs
    startLine: 20
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  summary: "\nIf you wish to have EventProcessorHost store leases somewhere other than Azure Storage,\nyou can write your own lease manager using this interface.  \n\n<p>The Azure Storage managers use the same storage for both lease and checkpoints, so both\ninterfaces are implemented by the same class. You are free to do the same thing if you have\na unified store for both types of data.</p>\n\n<p>This interface does not specify initialization methods because we have no way of knowing what\ninformation your implementation will require.</p>\n"
  example: []
  syntax:
    content: public interface ILeaseManager
    content.vb: Public Interface ILeaseManager
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.Azure.EventHubs.Processor.ILeaseManager.LeaseRenewInterval
  commentId: P:Microsoft.Azure.EventHubs.Processor.ILeaseManager.LeaseRenewInterval
  id: LeaseRenewInterval
  parent: Microsoft.Azure.EventHubs.Processor.ILeaseManager
  langs:
  - csharp
  - vb
  name: LeaseRenewInterval
  nameWithType: ILeaseManager.LeaseRenewInterval
  fullName: Microsoft.Azure.EventHubs.Processor.ILeaseManager.LeaseRenewInterval
  type: Property
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/ILeaseManager.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: LeaseRenewInterval
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/ILeaseManager.cs
    startLine: 29
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  summary: "\nAllows a lease manager implementation to specify to PartitionManager how often it should\nscan leases and renew them. In order to redistribute leases in a timely fashion after a host\nceases operating, we recommend a relatively short interval, such as ten seconds. Obviously it\nshould be less than half of the lease length, to prevent accidental expiration.\n"
  example: []
  syntax:
    content: TimeSpan LeaseRenewInterval { get; }
    content.vb: ReadOnly Property LeaseRenewInterval As TimeSpan
    parameters: []
    return:
      type: TimeSpan
      description: The sleep interval between scans
  overload: Microsoft.Azure.EventHubs.Processor.ILeaseManager.LeaseRenewInterval*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.Azure.EventHubs.Processor.ILeaseManager.LeaseDuration
  commentId: P:Microsoft.Azure.EventHubs.Processor.ILeaseManager.LeaseDuration
  id: LeaseDuration
  parent: Microsoft.Azure.EventHubs.Processor.ILeaseManager
  langs:
  - csharp
  - vb
  name: LeaseDuration
  nameWithType: ILeaseManager.LeaseDuration
  fullName: Microsoft.Azure.EventHubs.Processor.ILeaseManager.LeaseDuration
  type: Property
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/ILeaseManager.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: LeaseDuration
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/ILeaseManager.cs
    startLine: 35
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  summary: "\nMostly useful for testing.\n"
  example: []
  syntax:
    content: TimeSpan LeaseDuration { get; }
    content.vb: ReadOnly Property LeaseDuration As TimeSpan
    parameters: []
    return:
      type: TimeSpan
      description: Duration of a lease before it expires unless renewed.
  overload: Microsoft.Azure.EventHubs.Processor.ILeaseManager.LeaseDuration*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.Azure.EventHubs.Processor.ILeaseManager.LeaseStoreExistsAsync
  commentId: M:Microsoft.Azure.EventHubs.Processor.ILeaseManager.LeaseStoreExistsAsync
  id: LeaseStoreExistsAsync
  parent: Microsoft.Azure.EventHubs.Processor.ILeaseManager
  langs:
  - csharp
  - vb
  name: LeaseStoreExistsAsync()
  nameWithType: ILeaseManager.LeaseStoreExistsAsync()
  fullName: Microsoft.Azure.EventHubs.Processor.ILeaseManager.LeaseStoreExistsAsync()
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/ILeaseManager.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: LeaseStoreExistsAsync
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/ILeaseManager.cs
    startLine: 40
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  summary: "\nDoes the lease store exist?\n"
  example: []
  syntax:
    content: Task<bool> LeaseStoreExistsAsync()
    content.vb: Function LeaseStoreExistsAsync As Task(Of Boolean)
    return:
      type: Task{System.Boolean}
  overload: Microsoft.Azure.EventHubs.Processor.ILeaseManager.LeaseStoreExistsAsync*
- uid: Microsoft.Azure.EventHubs.Processor.ILeaseManager.CreateLeaseStoreIfNotExistsAsync
  commentId: M:Microsoft.Azure.EventHubs.Processor.ILeaseManager.CreateLeaseStoreIfNotExistsAsync
  id: CreateLeaseStoreIfNotExistsAsync
  parent: Microsoft.Azure.EventHubs.Processor.ILeaseManager
  langs:
  - csharp
  - vb
  name: CreateLeaseStoreIfNotExistsAsync()
  nameWithType: ILeaseManager.CreateLeaseStoreIfNotExistsAsync()
  fullName: Microsoft.Azure.EventHubs.Processor.ILeaseManager.CreateLeaseStoreIfNotExistsAsync()
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/ILeaseManager.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: CreateLeaseStoreIfNotExistsAsync
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/ILeaseManager.cs
    startLine: 46
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  summary: "\nCreate the lease store if it does not exist, do nothing if it does exist.\n"
  example: []
  syntax:
    content: Task<bool> CreateLeaseStoreIfNotExistsAsync()
    content.vb: Function CreateLeaseStoreIfNotExistsAsync As Task(Of Boolean)
    return:
      type: Task{System.Boolean}
      description: true if the lease store already exists or was created successfully, false if not
  overload: Microsoft.Azure.EventHubs.Processor.ILeaseManager.CreateLeaseStoreIfNotExistsAsync*
- uid: Microsoft.Azure.EventHubs.Processor.ILeaseManager.DeleteLeaseStoreAsync
  commentId: M:Microsoft.Azure.EventHubs.Processor.ILeaseManager.DeleteLeaseStoreAsync
  id: DeleteLeaseStoreAsync
  parent: Microsoft.Azure.EventHubs.Processor.ILeaseManager
  langs:
  - csharp
  - vb
  name: DeleteLeaseStoreAsync()
  nameWithType: ILeaseManager.DeleteLeaseStoreAsync()
  fullName: Microsoft.Azure.EventHubs.Processor.ILeaseManager.DeleteLeaseStoreAsync()
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/ILeaseManager.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: DeleteLeaseStoreAsync
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/ILeaseManager.cs
    startLine: 52
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  summary: "\nNot used by EventProcessorHost, but a convenient function to have for testing.\n"
  example: []
  syntax:
    content: Task<bool> DeleteLeaseStoreAsync()
    content.vb: Function DeleteLeaseStoreAsync As Task(Of Boolean)
    return:
      type: Task{System.Boolean}
      description: true if the lease store was deleted successfully, false if not
  overload: Microsoft.Azure.EventHubs.Processor.ILeaseManager.DeleteLeaseStoreAsync*
- uid: Microsoft.Azure.EventHubs.Processor.ILeaseManager.GetLeaseAsync(System.String)
  commentId: M:Microsoft.Azure.EventHubs.Processor.ILeaseManager.GetLeaseAsync(System.String)
  id: GetLeaseAsync(System.String)
  parent: Microsoft.Azure.EventHubs.Processor.ILeaseManager
  langs:
  - csharp
  - vb
  name: GetLeaseAsync(String)
  nameWithType: ILeaseManager.GetLeaseAsync(String)
  fullName: Microsoft.Azure.EventHubs.Processor.ILeaseManager.GetLeaseAsync(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/ILeaseManager.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: GetLeaseAsync
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/ILeaseManager.cs
    startLine: 60
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  summary: "\nReturn the lease info for the specified partition. Can return null if no lease has been\ncreated in the store for the specified partition.\n"
  example: []
  syntax:
    content: Task<Lease> GetLeaseAsync(string partitionId)
    content.vb: Function GetLeaseAsync(partitionId As String) As Task(Of Lease)
    parameters:
    - id: partitionId
      type: System.String
      description: id of partition to get lease for
    return:
      type: Task{Microsoft.Azure.EventHubs.Processor.Lease}
      description: lease info for the partition, or null
  overload: Microsoft.Azure.EventHubs.Processor.ILeaseManager.GetLeaseAsync*
- uid: Microsoft.Azure.EventHubs.Processor.ILeaseManager.GetAllLeases
  commentId: M:Microsoft.Azure.EventHubs.Processor.ILeaseManager.GetAllLeases
  id: GetAllLeases
  parent: Microsoft.Azure.EventHubs.Processor.ILeaseManager
  langs:
  - csharp
  - vb
  name: GetAllLeases()
  nameWithType: ILeaseManager.GetAllLeases()
  fullName: Microsoft.Azure.EventHubs.Processor.ILeaseManager.GetAllLeases()
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/ILeaseManager.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: GetAllLeases
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/ILeaseManager.cs
    startLine: 67
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  summary: "\nReturn the lease info for all partitions.\nA typical implementation could just call GetLeaseAsync() on all partitions.\n"
  example: []
  syntax:
    content: IEnumerable<Task<Lease>> GetAllLeases()
    content.vb: Function GetAllLeases As IEnumerable(Of Task(Of Lease))
    return:
      type: IEnumerable{Task{Microsoft.Azure.EventHubs.Processor.Lease}}
      description: list of lease info.
  overload: Microsoft.Azure.EventHubs.Processor.ILeaseManager.GetAllLeases*
- uid: Microsoft.Azure.EventHubs.Processor.ILeaseManager.CreateLeaseIfNotExistsAsync(System.String)
  commentId: M:Microsoft.Azure.EventHubs.Processor.ILeaseManager.CreateLeaseIfNotExistsAsync(System.String)
  id: CreateLeaseIfNotExistsAsync(System.String)
  parent: Microsoft.Azure.EventHubs.Processor.ILeaseManager
  langs:
  - csharp
  - vb
  name: CreateLeaseIfNotExistsAsync(String)
  nameWithType: ILeaseManager.CreateLeaseIfNotExistsAsync(String)
  fullName: Microsoft.Azure.EventHubs.Processor.ILeaseManager.CreateLeaseIfNotExistsAsync(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/ILeaseManager.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: CreateLeaseIfNotExistsAsync
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/ILeaseManager.cs
    startLine: 75
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  summary: "\nCreate in the store the lease info for the given partition, if it does not exist. Do nothing if it does exist\nin the store already. \n"
  example: []
  syntax:
    content: Task<Lease> CreateLeaseIfNotExistsAsync(string partitionId)
    content.vb: Function CreateLeaseIfNotExistsAsync(partitionId As String) As Task(Of Lease)
    parameters:
    - id: partitionId
      type: System.String
      description: id of partition to create lease info for
    return:
      type: Task{Microsoft.Azure.EventHubs.Processor.Lease}
      description: the existing or newly-created lease info for the partition
  overload: Microsoft.Azure.EventHubs.Processor.ILeaseManager.CreateLeaseIfNotExistsAsync*
- uid: Microsoft.Azure.EventHubs.Processor.ILeaseManager.DeleteLeaseAsync(Microsoft.Azure.EventHubs.Processor.Lease)
  commentId: M:Microsoft.Azure.EventHubs.Processor.ILeaseManager.DeleteLeaseAsync(Microsoft.Azure.EventHubs.Processor.Lease)
  id: DeleteLeaseAsync(Microsoft.Azure.EventHubs.Processor.Lease)
  parent: Microsoft.Azure.EventHubs.Processor.ILeaseManager
  langs:
  - csharp
  - vb
  name: DeleteLeaseAsync(Lease)
  nameWithType: ILeaseManager.DeleteLeaseAsync(Lease)
  fullName: Microsoft.Azure.EventHubs.Processor.ILeaseManager.DeleteLeaseAsync(Microsoft.Azure.EventHubs.Processor.Lease)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/ILeaseManager.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: DeleteLeaseAsync
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/ILeaseManager.cs
    startLine: 83
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  summary: "\nDelete the lease info for the given partition from the store. If there is no stored lease for the given partition,\nthat is treated as success.\n"
  example: []
  syntax:
    content: Task DeleteLeaseAsync(Lease lease)
    content.vb: Function DeleteLeaseAsync(lease As Lease) As Task
    parameters:
    - id: lease
      type: Microsoft.Azure.EventHubs.Processor.Lease
      description: Lease info for the desired partition as previously obtained from GetLeaseAsync()
    return:
      type: Task
      description: ''
  overload: Microsoft.Azure.EventHubs.Processor.ILeaseManager.DeleteLeaseAsync*
- uid: Microsoft.Azure.EventHubs.Processor.ILeaseManager.AcquireLeaseAsync(Microsoft.Azure.EventHubs.Processor.Lease)
  commentId: M:Microsoft.Azure.EventHubs.Processor.ILeaseManager.AcquireLeaseAsync(Microsoft.Azure.EventHubs.Processor.Lease)
  id: AcquireLeaseAsync(Microsoft.Azure.EventHubs.Processor.Lease)
  parent: Microsoft.Azure.EventHubs.Processor.ILeaseManager
  langs:
  - csharp
  - vb
  name: AcquireLeaseAsync(Lease)
  nameWithType: ILeaseManager.AcquireLeaseAsync(Lease)
  fullName: Microsoft.Azure.EventHubs.Processor.ILeaseManager.AcquireLeaseAsync(Microsoft.Azure.EventHubs.Processor.Lease)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/ILeaseManager.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: AcquireLeaseAsync
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/ILeaseManager.cs
    startLine: 93
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  summary: "\nAcquire the lease on the desired partition for this EventProcessorHost.\n\n<p>Note that it is legal to acquire a lease that is already owned by another host. Lease-stealing is how\npartitions are redistributed when additional hosts are started.</p>\n"
  example: []
  syntax:
    content: Task<bool> AcquireLeaseAsync(Lease lease)
    content.vb: Function AcquireLeaseAsync(lease As Lease) As Task(Of Boolean)
    parameters:
    - id: lease
      type: Microsoft.Azure.EventHubs.Processor.Lease
      description: Lease info for the desired partition as previously obtained from GetLeaseAsync()
    return:
      type: Task{System.Boolean}
      description: true if the lease was acquired successfully, false if not
  overload: Microsoft.Azure.EventHubs.Processor.ILeaseManager.AcquireLeaseAsync*
- uid: Microsoft.Azure.EventHubs.Processor.ILeaseManager.RenewLeaseAsync(Microsoft.Azure.EventHubs.Processor.Lease)
  commentId: M:Microsoft.Azure.EventHubs.Processor.ILeaseManager.RenewLeaseAsync(Microsoft.Azure.EventHubs.Processor.Lease)
  id: RenewLeaseAsync(Microsoft.Azure.EventHubs.Processor.Lease)
  parent: Microsoft.Azure.EventHubs.Processor.ILeaseManager
  langs:
  - csharp
  - vb
  name: RenewLeaseAsync(Lease)
  nameWithType: ILeaseManager.RenewLeaseAsync(Lease)
  fullName: Microsoft.Azure.EventHubs.Processor.ILeaseManager.RenewLeaseAsync(Microsoft.Azure.EventHubs.Processor.Lease)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/ILeaseManager.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: RenewLeaseAsync
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/ILeaseManager.cs
    startLine: 103
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  summary: "\nRenew a lease currently held by this host.\n\n<p>If the lease has been stolen, or expired, or released, it is not possible to renew it. You will have to call getLease()\nand then acquireLease() again.</p>\n"
  example: []
  syntax:
    content: Task<bool> RenewLeaseAsync(Lease lease)
    content.vb: Function RenewLeaseAsync(lease As Lease) As Task(Of Boolean)
    parameters:
    - id: lease
      type: Microsoft.Azure.EventHubs.Processor.Lease
      description: Lease to be renewed
    return:
      type: Task{System.Boolean}
      description: true if the lease was renewed successfully, false if not
  overload: Microsoft.Azure.EventHubs.Processor.ILeaseManager.RenewLeaseAsync*
- uid: Microsoft.Azure.EventHubs.Processor.ILeaseManager.ReleaseLeaseAsync(Microsoft.Azure.EventHubs.Processor.Lease)
  commentId: M:Microsoft.Azure.EventHubs.Processor.ILeaseManager.ReleaseLeaseAsync(Microsoft.Azure.EventHubs.Processor.Lease)
  id: ReleaseLeaseAsync(Microsoft.Azure.EventHubs.Processor.Lease)
  parent: Microsoft.Azure.EventHubs.Processor.ILeaseManager
  langs:
  - csharp
  - vb
  name: ReleaseLeaseAsync(Lease)
  nameWithType: ILeaseManager.ReleaseLeaseAsync(Lease)
  fullName: Microsoft.Azure.EventHubs.Processor.ILeaseManager.ReleaseLeaseAsync(Microsoft.Azure.EventHubs.Processor.Lease)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/ILeaseManager.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: ReleaseLeaseAsync
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/ILeaseManager.cs
    startLine: 111
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  summary: "\nGive up a lease currently held by this host.\n<p>If the lease has been stolen, or expired, releasing it is unnecessary, and will fail if attempted.</p>\n"
  example: []
  syntax:
    content: Task<bool> ReleaseLeaseAsync(Lease lease)
    content.vb: Function ReleaseLeaseAsync(lease As Lease) As Task(Of Boolean)
    parameters:
    - id: lease
      type: Microsoft.Azure.EventHubs.Processor.Lease
      description: Lease to be given up
    return:
      type: Task{System.Boolean}
      description: true if the lease was released successfully, false if not
  overload: Microsoft.Azure.EventHubs.Processor.ILeaseManager.ReleaseLeaseAsync*
- uid: Microsoft.Azure.EventHubs.Processor.ILeaseManager.UpdateLeaseAsync(Microsoft.Azure.EventHubs.Processor.Lease)
  commentId: M:Microsoft.Azure.EventHubs.Processor.ILeaseManager.UpdateLeaseAsync(Microsoft.Azure.EventHubs.Processor.Lease)
  id: UpdateLeaseAsync(Microsoft.Azure.EventHubs.Processor.Lease)
  parent: Microsoft.Azure.EventHubs.Processor.ILeaseManager
  langs:
  - csharp
  - vb
  name: UpdateLeaseAsync(Lease)
  nameWithType: ILeaseManager.UpdateLeaseAsync(Lease)
  fullName: Microsoft.Azure.EventHubs.Processor.ILeaseManager.UpdateLeaseAsync(Microsoft.Azure.EventHubs.Processor.Lease)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/ILeaseManager.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: UpdateLeaseAsync
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/ILeaseManager.cs
    startLine: 122
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  summary: "\nUpdate the store with the information in the provided lease.\n\n<p>It is necessary to currently hold a lease in order to update it. If the lease has been stolen, or expired, or\nreleased, it cannot be updated. Updating should renew the lease before performing the update to avoid lease\nexpiration during the process.</p>\n"
  example: []
  syntax:
    content: Task<bool> UpdateLeaseAsync(Lease lease)
    content.vb: Function UpdateLeaseAsync(lease As Lease) As Task(Of Boolean)
    parameters:
    - id: lease
      type: Microsoft.Azure.EventHubs.Processor.Lease
      description: New lease info to be stored
    return:
      type: Task{System.Boolean}
      description: true if the updated was performed successfully, false if not
  overload: Microsoft.Azure.EventHubs.Processor.ILeaseManager.UpdateLeaseAsync*
references:
- uid: Microsoft.Azure.EventHubs.Processor
  commentId: N:Microsoft.Azure.EventHubs.Processor
  isExternal: false
  name: Microsoft.Azure.EventHubs.Processor
  nameWithType: Microsoft.Azure.EventHubs.Processor
  fullName: Microsoft.Azure.EventHubs.Processor
- uid: Microsoft.Azure.EventHubs.Processor.ILeaseManager.LeaseRenewInterval*
  commentId: Overload:Microsoft.Azure.EventHubs.Processor.ILeaseManager.LeaseRenewInterval
  isExternal: false
  name: LeaseRenewInterval
  nameWithType: ILeaseManager.LeaseRenewInterval
  fullName: Microsoft.Azure.EventHubs.Processor.ILeaseManager.LeaseRenewInterval
- uid: TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: TimeSpan
- uid: Microsoft.Azure.EventHubs.Processor.ILeaseManager.LeaseDuration*
  commentId: Overload:Microsoft.Azure.EventHubs.Processor.ILeaseManager.LeaseDuration
  isExternal: false
  name: LeaseDuration
  nameWithType: ILeaseManager.LeaseDuration
  fullName: Microsoft.Azure.EventHubs.Processor.ILeaseManager.LeaseDuration
- uid: Microsoft.Azure.EventHubs.Processor.ILeaseManager.LeaseStoreExistsAsync*
  commentId: Overload:Microsoft.Azure.EventHubs.Processor.ILeaseManager.LeaseStoreExistsAsync
  isExternal: false
  name: LeaseStoreExistsAsync
  nameWithType: ILeaseManager.LeaseStoreExistsAsync
  fullName: Microsoft.Azure.EventHubs.Processor.ILeaseManager.LeaseStoreExistsAsync
- uid: Task{System.Boolean}
  commentId: '!:Task{System.Boolean}'
  definition: Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullname.vb: Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullname.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.EventHubs.Processor.ILeaseManager.CreateLeaseStoreIfNotExistsAsync*
  commentId: Overload:Microsoft.Azure.EventHubs.Processor.ILeaseManager.CreateLeaseStoreIfNotExistsAsync
  isExternal: false
  name: CreateLeaseStoreIfNotExistsAsync
  nameWithType: ILeaseManager.CreateLeaseStoreIfNotExistsAsync
  fullName: Microsoft.Azure.EventHubs.Processor.ILeaseManager.CreateLeaseStoreIfNotExistsAsync
- uid: Microsoft.Azure.EventHubs.Processor.ILeaseManager.DeleteLeaseStoreAsync*
  commentId: Overload:Microsoft.Azure.EventHubs.Processor.ILeaseManager.DeleteLeaseStoreAsync
  isExternal: false
  name: DeleteLeaseStoreAsync
  nameWithType: ILeaseManager.DeleteLeaseStoreAsync
  fullName: Microsoft.Azure.EventHubs.Processor.ILeaseManager.DeleteLeaseStoreAsync
- uid: Microsoft.Azure.EventHubs.Processor.ILeaseManager.GetLeaseAsync*
  commentId: Overload:Microsoft.Azure.EventHubs.Processor.ILeaseManager.GetLeaseAsync
  isExternal: false
  name: GetLeaseAsync
  nameWithType: ILeaseManager.GetLeaseAsync
  fullName: Microsoft.Azure.EventHubs.Processor.ILeaseManager.GetLeaseAsync
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Task{Microsoft.Azure.EventHubs.Processor.Lease}
  commentId: '!:Task{Microsoft.Azure.EventHubs.Processor.Lease}'
  definition: Task`1
  name: Task<Lease>
  nameWithType: Task<Lease>
  fullName: Task<Microsoft.Azure.EventHubs.Processor.Lease>
  nameWithType.vb: Task(Of Lease)
  fullname.vb: Task(Of Microsoft.Azure.EventHubs.Processor.Lease)
  name.vb: Task(Of Lease)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.EventHubs.Processor.Lease
    name: Lease
    nameWithType: Lease
    fullName: Microsoft.Azure.EventHubs.Processor.Lease
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.EventHubs.Processor.Lease
    name: Lease
    nameWithType: Lease
    fullName: Microsoft.Azure.EventHubs.Processor.Lease
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.EventHubs.Processor.ILeaseManager.GetAllLeases*
  commentId: Overload:Microsoft.Azure.EventHubs.Processor.ILeaseManager.GetAllLeases
  isExternal: false
  name: GetAllLeases
  nameWithType: ILeaseManager.GetAllLeases
  fullName: Microsoft.Azure.EventHubs.Processor.ILeaseManager.GetAllLeases
- uid: IEnumerable{Task{Microsoft.Azure.EventHubs.Processor.Lease}}
  commentId: '!:IEnumerable{Task{Microsoft.Azure.EventHubs.Processor.Lease}}'
  definition: IEnumerable`1
  name: IEnumerable<Task<Lease>>
  nameWithType: IEnumerable<Task<Lease>>
  fullName: IEnumerable<Task<Microsoft.Azure.EventHubs.Processor.Lease>>
  nameWithType.vb: IEnumerable(Of Task(Of Lease))
  fullname.vb: IEnumerable(Of Task(Of Microsoft.Azure.EventHubs.Processor.Lease))
  name.vb: IEnumerable(Of Task(Of Lease))
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.EventHubs.Processor.Lease
    name: Lease
    nameWithType: Lease
    fullName: Microsoft.Azure.EventHubs.Processor.Lease
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.EventHubs.Processor.Lease
    name: Lease
    nameWithType: Lease
    fullName: Microsoft.Azure.EventHubs.Processor.Lease
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullname.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.EventHubs.Processor.ILeaseManager.CreateLeaseIfNotExistsAsync*
  commentId: Overload:Microsoft.Azure.EventHubs.Processor.ILeaseManager.CreateLeaseIfNotExistsAsync
  isExternal: false
  name: CreateLeaseIfNotExistsAsync
  nameWithType: ILeaseManager.CreateLeaseIfNotExistsAsync
  fullName: Microsoft.Azure.EventHubs.Processor.ILeaseManager.CreateLeaseIfNotExistsAsync
- uid: Microsoft.Azure.EventHubs.Processor.ILeaseManager.DeleteLeaseAsync*
  commentId: Overload:Microsoft.Azure.EventHubs.Processor.ILeaseManager.DeleteLeaseAsync
  isExternal: false
  name: DeleteLeaseAsync
  nameWithType: ILeaseManager.DeleteLeaseAsync
  fullName: Microsoft.Azure.EventHubs.Processor.ILeaseManager.DeleteLeaseAsync
- uid: Microsoft.Azure.EventHubs.Processor.Lease
  commentId: T:Microsoft.Azure.EventHubs.Processor.Lease
  parent: Microsoft.Azure.EventHubs.Processor
  isExternal: false
  name: Lease
  nameWithType: Lease
  fullName: Microsoft.Azure.EventHubs.Processor.Lease
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Microsoft.Azure.EventHubs.Processor.ILeaseManager.AcquireLeaseAsync*
  commentId: Overload:Microsoft.Azure.EventHubs.Processor.ILeaseManager.AcquireLeaseAsync
  isExternal: false
  name: AcquireLeaseAsync
  nameWithType: ILeaseManager.AcquireLeaseAsync
  fullName: Microsoft.Azure.EventHubs.Processor.ILeaseManager.AcquireLeaseAsync
- uid: Microsoft.Azure.EventHubs.Processor.ILeaseManager.RenewLeaseAsync*
  commentId: Overload:Microsoft.Azure.EventHubs.Processor.ILeaseManager.RenewLeaseAsync
  isExternal: false
  name: RenewLeaseAsync
  nameWithType: ILeaseManager.RenewLeaseAsync
  fullName: Microsoft.Azure.EventHubs.Processor.ILeaseManager.RenewLeaseAsync
- uid: Microsoft.Azure.EventHubs.Processor.ILeaseManager.ReleaseLeaseAsync*
  commentId: Overload:Microsoft.Azure.EventHubs.Processor.ILeaseManager.ReleaseLeaseAsync
  isExternal: false
  name: ReleaseLeaseAsync
  nameWithType: ILeaseManager.ReleaseLeaseAsync
  fullName: Microsoft.Azure.EventHubs.Processor.ILeaseManager.ReleaseLeaseAsync
- uid: Microsoft.Azure.EventHubs.Processor.ILeaseManager.UpdateLeaseAsync*
  commentId: Overload:Microsoft.Azure.EventHubs.Processor.ILeaseManager.UpdateLeaseAsync
  isExternal: false
  name: UpdateLeaseAsync
  nameWithType: ILeaseManager.UpdateLeaseAsync
  fullName: Microsoft.Azure.EventHubs.Processor.ILeaseManager.UpdateLeaseAsync
