### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.EventHubs.PartitionReceiver
  commentId: T:Microsoft.Azure.EventHubs.PartitionReceiver
  id: PartitionReceiver
  parent: Microsoft.Azure.EventHubs
  children:
  - Microsoft.Azure.EventHubs.PartitionReceiver.#ctor(Microsoft.Azure.EventHubs.EventHubClient,System.String,System.String,System.String,System.Boolean,System.Nullable{DateTime},System.Nullable{System.Int64})
  - Microsoft.Azure.EventHubs.PartitionReceiver.CloseAsync
  - Microsoft.Azure.EventHubs.PartitionReceiver.ConsumerGroupName
  - Microsoft.Azure.EventHubs.PartitionReceiver.DefaultConsumerGroupName
  - Microsoft.Azure.EventHubs.PartitionReceiver.Epoch
  - Microsoft.Azure.EventHubs.PartitionReceiver.EventHubClient
  - Microsoft.Azure.EventHubs.PartitionReceiver.OffsetInclusive
  - Microsoft.Azure.EventHubs.PartitionReceiver.OnCloseAsync
  - Microsoft.Azure.EventHubs.PartitionReceiver.OnReceiveAsync(System.Int32,TimeSpan)
  - Microsoft.Azure.EventHubs.PartitionReceiver.OnSetReceiveHandler(Microsoft.Azure.EventHubs.IPartitionReceiveHandler)
  - Microsoft.Azure.EventHubs.PartitionReceiver.PartitionId
  - Microsoft.Azure.EventHubs.PartitionReceiver.PrefetchCount
  - Microsoft.Azure.EventHubs.PartitionReceiver.ReceiveAsync(System.Int32)
  - Microsoft.Azure.EventHubs.PartitionReceiver.ReceiveAsync(System.Int32,TimeSpan)
  - Microsoft.Azure.EventHubs.PartitionReceiver.SetReceiveHandler(Microsoft.Azure.EventHubs.IPartitionReceiveHandler)
  - Microsoft.Azure.EventHubs.PartitionReceiver.StartOffset
  - Microsoft.Azure.EventHubs.PartitionReceiver.StartOfStream
  - Microsoft.Azure.EventHubs.PartitionReceiver.StartTime
  langs:
  - csharp
  - vb
  name: PartitionReceiver
  nameWithType: PartitionReceiver
  fullName: Microsoft.Azure.EventHubs.PartitionReceiver
  type: Class
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: PartitionReceiver
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
    startLine: 22
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  summary: "\nThis is a logical representation of receiving from a EventHub partition.\n<p>\nA PartitionReceiver is tied to a ConsumerGroup + Partition combination. If you are creating an epoch based\nPartitionReceiver (i.e. PartitionReceiver.Epoch != 0) you cannot have more than one active receiver per\nConsumerGroup + Partition combo. You can have multiple receivers per ConsumerGroup + Partition combination with \nnon-epoch receivers.\n</p>\n"
  example: []
  syntax:
    content: 'public abstract class PartitionReceiver : ClientEntity'
    content.vb: >-
      Public MustInherit Class PartitionReceiver
          Inherits ClientEntity
  seealso:
  - linkId: Microsoft.Azure.EventHubs.EventHubClient.CreateReceiver(System.String,System.String,System.String)
    commentId: M:Microsoft.Azure.EventHubs.EventHubClient.CreateReceiver(System.String,System.String,System.String)
  - linkId: Microsoft.Azure.EventHubs.EventHubClient.CreateEpochReceiver(System.String,System.String,System.String,System.Int64)
    commentId: M:Microsoft.Azure.EventHubs.EventHubClient.CreateEpochReceiver(System.String,System.String,System.String,System.Int64)
  inheritance:
  - System.Object
  - Microsoft.Azure.EventHubs.ClientEntity
  inheritedMembers:
  - Microsoft.Azure.EventHubs.ClientEntity.ClientId
  - Microsoft.Azure.EventHubs.ClientEntity.RetryPolicy
  - Microsoft.Azure.EventHubs.ClientEntity.Close
  - Microsoft.Azure.EventHubs.ClientEntity.GetNextId
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.Azure.EventHubs.PartitionReceiver.StartOfStream
  commentId: F:Microsoft.Azure.EventHubs.PartitionReceiver.StartOfStream
  id: StartOfStream
  parent: Microsoft.Azure.EventHubs.PartitionReceiver
  langs:
  - csharp
  - vb
  name: StartOfStream
  nameWithType: PartitionReceiver.StartOfStream
  fullName: Microsoft.Azure.EventHubs.PartitionReceiver.StartOfStream
  type: Field
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: StartOfStream
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
    startLine: 27
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  summary: "\nThis is a constant defined to represent the start of a partition stream in EventHub.\n"
  example: []
  syntax:
    content: public static readonly string StartOfStream
    content.vb: Public Shared ReadOnly StartOfStream As String
    return:
      type: System.String
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Azure.EventHubs.PartitionReceiver.DefaultConsumerGroupName
  commentId: F:Microsoft.Azure.EventHubs.PartitionReceiver.DefaultConsumerGroupName
  id: DefaultConsumerGroupName
  parent: Microsoft.Azure.EventHubs.PartitionReceiver
  langs:
  - csharp
  - vb
  name: DefaultConsumerGroupName
  nameWithType: PartitionReceiver.DefaultConsumerGroupName
  fullName: Microsoft.Azure.EventHubs.PartitionReceiver.DefaultConsumerGroupName
  type: Field
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: DefaultConsumerGroupName
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
    startLine: 32
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  summary: "\nThe default consumer group name: $Default.\n"
  example: []
  syntax:
    content: public static readonly string DefaultConsumerGroupName
    content.vb: Public Shared ReadOnly DefaultConsumerGroupName As String
    return:
      type: System.String
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Azure.EventHubs.PartitionReceiver.#ctor(Microsoft.Azure.EventHubs.EventHubClient,System.String,System.String,System.String,System.Boolean,System.Nullable{DateTime},System.Nullable{System.Int64})
  commentId: M:Microsoft.Azure.EventHubs.PartitionReceiver.#ctor(Microsoft.Azure.EventHubs.EventHubClient,System.String,System.String,System.String,System.Boolean,System.Nullable{DateTime},System.Nullable{System.Int64})
  id: '#ctor(Microsoft.Azure.EventHubs.EventHubClient,System.String,System.String,System.String,System.Boolean,System.Nullable{DateTime},System.Nullable{System.Int64})'
  parent: Microsoft.Azure.EventHubs.PartitionReceiver
  langs:
  - csharp
  - vb
  name: PartitionReceiver(EventHubClient, String, String, String, Boolean, Nullable<DateTime>, Nullable<Int64>)
  nameWithType: PartitionReceiver.PartitionReceiver(EventHubClient, String, String, String, Boolean, Nullable<DateTime>, Nullable<Int64>)
  fullName: Microsoft.Azure.EventHubs.PartitionReceiver.PartitionReceiver(Microsoft.Azure.EventHubs.EventHubClient, System.String, System.String, System.String, System.Boolean, System.Nullable<DateTime>, System.Nullable<System.Int64>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: .ctor
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
    startLine: 40
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  syntax:
    content: protected PartitionReceiver(EventHubClient eventHubClient, string consumerGroupName, string partitionId, string startOffset, bool offsetInclusive, DateTime? startTime, long ? epoch)
    content.vb: Protected Sub New(eventHubClient As EventHubClient, consumerGroupName As String, partitionId As String, startOffset As String, offsetInclusive As Boolean, startTime As DateTime?, epoch As Long?)
    parameters:
    - id: eventHubClient
      type: Microsoft.Azure.EventHubs.EventHubClient
    - id: consumerGroupName
      type: System.String
    - id: partitionId
      type: System.String
    - id: startOffset
      type: System.String
    - id: offsetInclusive
      type: System.Boolean
    - id: startTime
      type: System.Nullable{DateTime}
    - id: epoch
      type: System.Nullable{System.Int64}
  overload: Microsoft.Azure.EventHubs.PartitionReceiver.#ctor*
  nameWithType.vb: PartitionReceiver.PartitionReceiver(EventHubClient, String, String, String, Boolean, Nullable(Of DateTime), Nullable(Of Int64))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.Azure.EventHubs.PartitionReceiver.PartitionReceiver(Microsoft.Azure.EventHubs.EventHubClient, System.String, System.String, System.String, System.Boolean, System.Nullable(Of DateTime), System.Nullable(Of System.Int64))
  name.vb: PartitionReceiver(EventHubClient, String, String, String, Boolean, Nullable(Of DateTime), Nullable(Of Int64))
- uid: Microsoft.Azure.EventHubs.PartitionReceiver.EventHubClient
  commentId: P:Microsoft.Azure.EventHubs.PartitionReceiver.EventHubClient
  id: EventHubClient
  parent: Microsoft.Azure.EventHubs.PartitionReceiver
  langs:
  - csharp
  - vb
  name: EventHubClient
  nameWithType: PartitionReceiver.EventHubClient
  fullName: Microsoft.Azure.EventHubs.PartitionReceiver.EventHubClient
  type: Property
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: EventHubClient
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
    startLine: 65
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  summary: "\nThe EventHubClient this PartitionReceiver was created from.\n"
  example: []
  syntax:
    content: public EventHubClient EventHubClient { get; }
    content.vb: Public ReadOnly Property EventHubClient As EventHubClient
    parameters: []
    return:
      type: Microsoft.Azure.EventHubs.EventHubClient
  overload: Microsoft.Azure.EventHubs.PartitionReceiver.EventHubClient*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.EventHubs.PartitionReceiver.ConsumerGroupName
  commentId: P:Microsoft.Azure.EventHubs.PartitionReceiver.ConsumerGroupName
  id: ConsumerGroupName
  parent: Microsoft.Azure.EventHubs.PartitionReceiver
  langs:
  - csharp
  - vb
  name: ConsumerGroupName
  nameWithType: PartitionReceiver.ConsumerGroupName
  fullName: Microsoft.Azure.EventHubs.PartitionReceiver.ConsumerGroupName
  type: Property
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: ConsumerGroupName
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
    startLine: 70
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  summary: "\nThe Consumer Group Name\n"
  example: []
  syntax:
    content: public string ConsumerGroupName { get; }
    content.vb: Public ReadOnly Property ConsumerGroupName As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.EventHubs.PartitionReceiver.ConsumerGroupName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.EventHubs.PartitionReceiver.PartitionId
  commentId: P:Microsoft.Azure.EventHubs.PartitionReceiver.PartitionId
  id: PartitionId
  parent: Microsoft.Azure.EventHubs.PartitionReceiver
  langs:
  - csharp
  - vb
  name: PartitionId
  nameWithType: PartitionReceiver.PartitionId
  fullName: Microsoft.Azure.EventHubs.PartitionReceiver.PartitionId
  type: Property
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: PartitionId
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
    startLine: 76
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  summary: "\nGet the EventHub partition identifier.\n"
  example: []
  syntax:
    content: public string PartitionId { get; }
    content.vb: Public ReadOnly Property PartitionId As String
    parameters: []
    return:
      type: System.String
      description: The identifier representing the partition from which this receiver is fetching data
  overload: Microsoft.Azure.EventHubs.PartitionReceiver.PartitionId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.EventHubs.PartitionReceiver.PrefetchCount
  commentId: P:Microsoft.Azure.EventHubs.PartitionReceiver.PrefetchCount
  id: PrefetchCount
  parent: Microsoft.Azure.EventHubs.PartitionReceiver
  langs:
  - csharp
  - vb
  name: PrefetchCount
  nameWithType: PartitionReceiver.PrefetchCount
  fullName: Microsoft.Azure.EventHubs.PartitionReceiver.PrefetchCount
  type: Property
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: PrefetchCount
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
    startLine: 82
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  summary: "\nGet Prefetch Count configured on the Receiver.\n"
  example: []
  syntax:
    content: public int PrefetchCount { get; set; }
    content.vb: Public Property PrefetchCount As Integer
    parameters: []
    return:
      type: System.Int32
      description: The upper limit of events this receiver will actively receive regardless of whether a receive operation is pending.
  overload: Microsoft.Azure.EventHubs.PartitionReceiver.PrefetchCount*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.EventHubs.PartitionReceiver.Epoch
  commentId: P:Microsoft.Azure.EventHubs.PartitionReceiver.Epoch
  id: Epoch
  parent: Microsoft.Azure.EventHubs.PartitionReceiver
  langs:
  - csharp
  - vb
  name: Epoch
  nameWithType: PartitionReceiver.Epoch
  fullName: Microsoft.Azure.EventHubs.PartitionReceiver.Epoch
  type: Property
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: Epoch
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
    startLine: 89
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  summary: "\nGet the epoch value that this receiver is currently using for partition ownership.\n<p>A value of null means this receiver is not an epoch-based receiver.</p>\n"
  example: []
  syntax:
    content: public long ? Epoch { get; }
    content.vb: Public ReadOnly Property Epoch As Long?
    parameters: []
    return:
      type: System.Nullable{System.Int64}
      description: the epoch value that this receiver is currently using for partition ownership.
  overload: Microsoft.Azure.EventHubs.PartitionReceiver.Epoch*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.EventHubs.PartitionReceiver.StartTime
  commentId: P:Microsoft.Azure.EventHubs.PartitionReceiver.StartTime
  id: StartTime
  parent: Microsoft.Azure.EventHubs.PartitionReceiver
  langs:
  - csharp
  - vb
  name: StartTime
  nameWithType: PartitionReceiver.StartTime
  fullName: Microsoft.Azure.EventHubs.PartitionReceiver.StartTime
  type: Property
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: StartTime
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
    startLine: 91
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  syntax:
    content: protected DateTime? StartTime { get; }
    content.vb: Protected ReadOnly Property StartTime As DateTime?
    parameters: []
    return:
      type: System.Nullable{DateTime}
  overload: Microsoft.Azure.EventHubs.PartitionReceiver.StartTime*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Microsoft.Azure.EventHubs.PartitionReceiver.OffsetInclusive
  commentId: P:Microsoft.Azure.EventHubs.PartitionReceiver.OffsetInclusive
  id: OffsetInclusive
  parent: Microsoft.Azure.EventHubs.PartitionReceiver
  langs:
  - csharp
  - vb
  name: OffsetInclusive
  nameWithType: PartitionReceiver.OffsetInclusive
  fullName: Microsoft.Azure.EventHubs.PartitionReceiver.OffsetInclusive
  type: Property
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: OffsetInclusive
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
    startLine: 93
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  syntax:
    content: protected bool OffsetInclusive { get; }
    content.vb: Protected ReadOnly Property OffsetInclusive As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.Azure.EventHubs.PartitionReceiver.OffsetInclusive*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Microsoft.Azure.EventHubs.PartitionReceiver.StartOffset
  commentId: P:Microsoft.Azure.EventHubs.PartitionReceiver.StartOffset
  id: StartOffset
  parent: Microsoft.Azure.EventHubs.PartitionReceiver
  langs:
  - csharp
  - vb
  name: StartOffset
  nameWithType: PartitionReceiver.StartOffset
  fullName: Microsoft.Azure.EventHubs.PartitionReceiver.StartOffset
  type: Property
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: StartOffset
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
    startLine: 95
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  syntax:
    content: protected string StartOffset { get; }
    content.vb: Protected ReadOnly Property StartOffset As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.EventHubs.PartitionReceiver.StartOffset*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Microsoft.Azure.EventHubs.PartitionReceiver.ReceiveAsync(System.Int32)
  commentId: M:Microsoft.Azure.EventHubs.PartitionReceiver.ReceiveAsync(System.Int32)
  id: ReceiveAsync(System.Int32)
  parent: Microsoft.Azure.EventHubs.PartitionReceiver
  langs:
  - csharp
  - vb
  name: ReceiveAsync(Int32)
  nameWithType: PartitionReceiver.ReceiveAsync(Int32)
  fullName: Microsoft.Azure.EventHubs.PartitionReceiver.ReceiveAsync(System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: ReceiveAsync
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
    startLine: 129
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  summary: "\nReceive a batch of <xref href=\"Microsoft.Azure.EventHubs.EventData\" data-throw-if-not-resolved=\"false\"></xref>'s from an EventHub partition\n"
  example:
  - "\nSample code:\n<pre><code>EventHubClient client = EventHubClient.Create(\"__connectionString__\");\nPartitionReceiver receiver = client.CreateReceiver(\"ConsumerGroup1\", \"1\");\nIEnumerable&lt;EventData&gt; receivedEvents = await receiver.ReceiveAsync(BatchSize);\n\nwhile (true)\n{\n    int batchSize = 0;\n    if (receivedEvents != null)\n    {\n        foreach (EventData receivedEvent in receivedEvents)\n        {\n            Console.WriteLine(\"Message Payload: {0}\", Encoding.UTF8.GetString(receivedEvent.Body));\n            Console.WriteLine(\"Offset: {0}, SeqNo: {1}, EnqueueTime: {2}\", \n                receivedEvent.SystemProperties.Offset, \n                receivedEvent.SystemProperties.SequenceNumber, \n                receivedEvent.SystemProperties.EnqueuedTime);\n            batchSize++;\n        }\n    }\n\n    Console.WriteLine(\"ReceivedBatch Size: {0}\", batchSize);\n    receivedEvents = await receiver.ReceiveAsync();\n}</code></pre>\n"
  syntax:
    content: public Task<IEnumerable<EventData>> ReceiveAsync(int maxMessageCount)
    content.vb: Public Function ReceiveAsync(maxMessageCount As Integer) As Task(Of IEnumerable(Of EventData))
    parameters:
    - id: maxMessageCount
      type: System.Int32
    return:
      type: Task{IEnumerable{Microsoft.Azure.EventHubs.EventData}}
      description: A Task that will yield a batch of <xref href="Microsoft.Azure.EventHubs.EventData" data-throw-if-not-resolved="false"></xref> from the partition on which this receiver is created. Returns 'null' if no EventData is present.
  overload: Microsoft.Azure.EventHubs.PartitionReceiver.ReceiveAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.EventHubs.PartitionReceiver.ReceiveAsync(System.Int32,TimeSpan)
  commentId: M:Microsoft.Azure.EventHubs.PartitionReceiver.ReceiveAsync(System.Int32,TimeSpan)
  id: ReceiveAsync(System.Int32,TimeSpan)
  parent: Microsoft.Azure.EventHubs.PartitionReceiver
  langs:
  - csharp
  - vb
  name: ReceiveAsync(Int32, TimeSpan)
  nameWithType: PartitionReceiver.ReceiveAsync(Int32, TimeSpan)
  fullName: Microsoft.Azure.EventHubs.PartitionReceiver.ReceiveAsync(System.Int32, TimeSpan)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: ReceiveAsync
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
    startLine: 138
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  summary: "\nReceive a batch of <xref href=\"Microsoft.Azure.EventHubs.EventData\" data-throw-if-not-resolved=\"false\"></xref>'s from an EventHub partition by allowing wait time on each individual call.\n"
  example: []
  syntax:
    content: public Task<IEnumerable<EventData>> ReceiveAsync(int maxMessageCount, TimeSpan waitTime)
    content.vb: Public Function ReceiveAsync(maxMessageCount As Integer, waitTime As TimeSpan) As Task(Of IEnumerable(Of EventData))
    parameters:
    - id: maxMessageCount
      type: System.Int32
    - id: waitTime
      type: TimeSpan
    return:
      type: Task{IEnumerable{Microsoft.Azure.EventHubs.EventData}}
      description: A Task that will yield a batch of <xref href="Microsoft.Azure.EventHubs.EventData" data-throw-if-not-resolved="false"></xref> from the partition on which this receiver is created. Returns 'null' if no EventData is present.
  overload: Microsoft.Azure.EventHubs.PartitionReceiver.ReceiveAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.EventHubs.PartitionReceiver.SetReceiveHandler(Microsoft.Azure.EventHubs.IPartitionReceiveHandler)
  commentId: M:Microsoft.Azure.EventHubs.PartitionReceiver.SetReceiveHandler(Microsoft.Azure.EventHubs.IPartitionReceiveHandler)
  id: SetReceiveHandler(Microsoft.Azure.EventHubs.IPartitionReceiveHandler)
  parent: Microsoft.Azure.EventHubs.PartitionReceiver
  langs:
  - csharp
  - vb
  name: SetReceiveHandler(IPartitionReceiveHandler)
  nameWithType: PartitionReceiver.SetReceiveHandler(IPartitionReceiveHandler)
  fullName: Microsoft.Azure.EventHubs.PartitionReceiver.SetReceiveHandler(Microsoft.Azure.EventHubs.IPartitionReceiveHandler)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: SetReceiveHandler
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
    startLine: 167
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  syntax:
    content: public void SetReceiveHandler(IPartitionReceiveHandler receiveHandler)
    content.vb: Public Sub SetReceiveHandler(receiveHandler As IPartitionReceiveHandler)
    parameters:
    - id: receiveHandler
      type: Microsoft.Azure.EventHubs.IPartitionReceiveHandler
  overload: Microsoft.Azure.EventHubs.PartitionReceiver.SetReceiveHandler*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.EventHubs.PartitionReceiver.CloseAsync
  commentId: M:Microsoft.Azure.EventHubs.PartitionReceiver.CloseAsync
  id: CloseAsync
  parent: Microsoft.Azure.EventHubs.PartitionReceiver
  langs:
  - csharp
  - vb
  name: CloseAsync()
  nameWithType: PartitionReceiver.CloseAsync()
  fullName: Microsoft.Azure.EventHubs.PartitionReceiver.CloseAsync()
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: CloseAsync
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
    startLine: 174
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  syntax:
    content: public override sealed Task CloseAsync()
    content.vb: Public NotOverridable Overrides Function CloseAsync As Task
    return:
      type: Task
  overridden: Microsoft.Azure.EventHubs.ClientEntity.CloseAsync
  overload: Microsoft.Azure.EventHubs.PartitionReceiver.CloseAsync*
  modifiers.csharp:
  - public
  - override
  - sealed
  modifiers.vb:
  - Public
  - Overrides
  - NotOverridable
- uid: Microsoft.Azure.EventHubs.PartitionReceiver.OnReceiveAsync(System.Int32,TimeSpan)
  commentId: M:Microsoft.Azure.EventHubs.PartitionReceiver.OnReceiveAsync(System.Int32,TimeSpan)
  id: OnReceiveAsync(System.Int32,TimeSpan)
  parent: Microsoft.Azure.EventHubs.PartitionReceiver
  langs:
  - csharp
  - vb
  name: OnReceiveAsync(Int32, TimeSpan)
  nameWithType: PartitionReceiver.OnReceiveAsync(Int32, TimeSpan)
  fullName: Microsoft.Azure.EventHubs.PartitionReceiver.OnReceiveAsync(System.Int32, TimeSpan)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: OnReceiveAsync
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
    startLine: 187
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  syntax:
    content: protected abstract Task<IList<EventData>> OnReceiveAsync(int maxMessageCount, TimeSpan waitTime)
    content.vb: Protected MustOverride Function OnReceiveAsync(maxMessageCount As Integer, waitTime As TimeSpan) As Task(Of IList(Of EventData))
    parameters:
    - id: maxMessageCount
      type: System.Int32
    - id: waitTime
      type: TimeSpan
    return:
      type: Task{IList{Microsoft.Azure.EventHubs.EventData}}
  overload: Microsoft.Azure.EventHubs.PartitionReceiver.OnReceiveAsync*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.Azure.EventHubs.PartitionReceiver.OnSetReceiveHandler(Microsoft.Azure.EventHubs.IPartitionReceiveHandler)
  commentId: M:Microsoft.Azure.EventHubs.PartitionReceiver.OnSetReceiveHandler(Microsoft.Azure.EventHubs.IPartitionReceiveHandler)
  id: OnSetReceiveHandler(Microsoft.Azure.EventHubs.IPartitionReceiveHandler)
  parent: Microsoft.Azure.EventHubs.PartitionReceiver
  langs:
  - csharp
  - vb
  name: OnSetReceiveHandler(IPartitionReceiveHandler)
  nameWithType: PartitionReceiver.OnSetReceiveHandler(IPartitionReceiveHandler)
  fullName: Microsoft.Azure.EventHubs.PartitionReceiver.OnSetReceiveHandler(Microsoft.Azure.EventHubs.IPartitionReceiveHandler)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: OnSetReceiveHandler
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
    startLine: 189
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  syntax:
    content: protected abstract void OnSetReceiveHandler(IPartitionReceiveHandler receiveHandler)
    content.vb: Protected MustOverride Sub OnSetReceiveHandler(receiveHandler As IPartitionReceiveHandler)
    parameters:
    - id: receiveHandler
      type: Microsoft.Azure.EventHubs.IPartitionReceiveHandler
  overload: Microsoft.Azure.EventHubs.PartitionReceiver.OnSetReceiveHandler*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.Azure.EventHubs.PartitionReceiver.OnCloseAsync
  commentId: M:Microsoft.Azure.EventHubs.PartitionReceiver.OnCloseAsync
  id: OnCloseAsync
  parent: Microsoft.Azure.EventHubs.PartitionReceiver
  langs:
  - csharp
  - vb
  name: OnCloseAsync()
  nameWithType: PartitionReceiver.OnCloseAsync()
  fullName: Microsoft.Azure.EventHubs.PartitionReceiver.OnCloseAsync()
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: OnCloseAsync
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/PartitionReceiver.cs
    startLine: 191
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  syntax:
    content: protected abstract Task OnCloseAsync()
    content.vb: Protected MustOverride Function OnCloseAsync As Task
    return:
      type: Task
  overload: Microsoft.Azure.EventHubs.PartitionReceiver.OnCloseAsync*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
references:
- uid: Microsoft.Azure.EventHubs.EventHubClient.CreateReceiver(System.String,System.String,System.String)
  commentId: M:Microsoft.Azure.EventHubs.EventHubClient.CreateReceiver(System.String,System.String,System.String)
- uid: Microsoft.Azure.EventHubs.EventHubClient.CreateEpochReceiver(System.String,System.String,System.String,System.Int64)
  commentId: M:Microsoft.Azure.EventHubs.EventHubClient.CreateEpochReceiver(System.String,System.String,System.String,System.Int64)
- uid: Microsoft.Azure.EventHubs
  commentId: N:Microsoft.Azure.EventHubs
  isExternal: false
  name: Microsoft.Azure.EventHubs
  nameWithType: Microsoft.Azure.EventHubs
  fullName: Microsoft.Azure.EventHubs
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Azure.EventHubs.ClientEntity
  commentId: T:Microsoft.Azure.EventHubs.ClientEntity
  parent: Microsoft.Azure.EventHubs
  isExternal: false
  name: ClientEntity
  nameWithType: ClientEntity
  fullName: Microsoft.Azure.EventHubs.ClientEntity
- uid: Microsoft.Azure.EventHubs.ClientEntity.ClientId
  commentId: P:Microsoft.Azure.EventHubs.ClientEntity.ClientId
  parent: Microsoft.Azure.EventHubs.ClientEntity
  isExternal: false
  name: ClientId
  nameWithType: ClientEntity.ClientId
  fullName: Microsoft.Azure.EventHubs.ClientEntity.ClientId
- uid: Microsoft.Azure.EventHubs.ClientEntity.RetryPolicy
  commentId: P:Microsoft.Azure.EventHubs.ClientEntity.RetryPolicy
  parent: Microsoft.Azure.EventHubs.ClientEntity
  isExternal: false
  name: RetryPolicy
  nameWithType: ClientEntity.RetryPolicy
  fullName: Microsoft.Azure.EventHubs.ClientEntity.RetryPolicy
- uid: Microsoft.Azure.EventHubs.ClientEntity.Close
  commentId: M:Microsoft.Azure.EventHubs.ClientEntity.Close
  parent: Microsoft.Azure.EventHubs.ClientEntity
  isExternal: false
  name: Close()
  nameWithType: ClientEntity.Close()
  fullName: Microsoft.Azure.EventHubs.ClientEntity.Close()
  spec.csharp:
  - uid: Microsoft.Azure.EventHubs.ClientEntity.Close
    name: Close
    nameWithType: ClientEntity.Close
    fullName: Microsoft.Azure.EventHubs.ClientEntity.Close
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.EventHubs.ClientEntity.Close
    name: Close
    nameWithType: ClientEntity.Close
    fullName: Microsoft.Azure.EventHubs.ClientEntity.Close
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.EventHubs.ClientEntity.GetNextId
  commentId: M:Microsoft.Azure.EventHubs.ClientEntity.GetNextId
  parent: Microsoft.Azure.EventHubs.ClientEntity
  isExternal: false
  name: GetNextId()
  nameWithType: ClientEntity.GetNextId()
  fullName: Microsoft.Azure.EventHubs.ClientEntity.GetNextId()
  spec.csharp:
  - uid: Microsoft.Azure.EventHubs.ClientEntity.GetNextId
    name: GetNextId
    nameWithType: ClientEntity.GetNextId
    fullName: Microsoft.Azure.EventHubs.ClientEntity.GetNextId
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.EventHubs.ClientEntity.GetNextId
    name: GetNextId
    nameWithType: ClientEntity.GetNextId
    fullName: Microsoft.Azure.EventHubs.ClientEntity.GetNextId
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Azure.EventHubs.PartitionReceiver.#ctor*
  commentId: Overload:Microsoft.Azure.EventHubs.PartitionReceiver.#ctor
  isExternal: false
  name: PartitionReceiver
  nameWithType: PartitionReceiver.PartitionReceiver
  fullName: Microsoft.Azure.EventHubs.PartitionReceiver.PartitionReceiver
- uid: Microsoft.Azure.EventHubs.EventHubClient
  commentId: T:Microsoft.Azure.EventHubs.EventHubClient
  parent: Microsoft.Azure.EventHubs
  isExternal: false
  name: EventHubClient
  nameWithType: EventHubClient
  fullName: Microsoft.Azure.EventHubs.EventHubClient
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Nullable{DateTime}
  commentId: '!:System.Nullable{DateTime}'
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullname.vb: System.Nullable(Of DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Int64}
  commentId: '!:System.Nullable{System.Int64}'
  definition: System.Nullable`1
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  nameWithType.vb: Nullable(Of Int64)
  fullname.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullname.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.EventHubs.PartitionReceiver.EventHubClient*
  commentId: Overload:Microsoft.Azure.EventHubs.PartitionReceiver.EventHubClient
  isExternal: false
  name: EventHubClient
  nameWithType: PartitionReceiver.EventHubClient
  fullName: Microsoft.Azure.EventHubs.PartitionReceiver.EventHubClient
- uid: Microsoft.Azure.EventHubs.PartitionReceiver.ConsumerGroupName*
  commentId: Overload:Microsoft.Azure.EventHubs.PartitionReceiver.ConsumerGroupName
  isExternal: false
  name: ConsumerGroupName
  nameWithType: PartitionReceiver.ConsumerGroupName
  fullName: Microsoft.Azure.EventHubs.PartitionReceiver.ConsumerGroupName
- uid: Microsoft.Azure.EventHubs.PartitionReceiver.PartitionId*
  commentId: Overload:Microsoft.Azure.EventHubs.PartitionReceiver.PartitionId
  isExternal: false
  name: PartitionId
  nameWithType: PartitionReceiver.PartitionId
  fullName: Microsoft.Azure.EventHubs.PartitionReceiver.PartitionId
- uid: Microsoft.Azure.EventHubs.PartitionReceiver.PrefetchCount*
  commentId: Overload:Microsoft.Azure.EventHubs.PartitionReceiver.PrefetchCount
  isExternal: false
  name: PrefetchCount
  nameWithType: PartitionReceiver.PrefetchCount
  fullName: Microsoft.Azure.EventHubs.PartitionReceiver.PrefetchCount
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Azure.EventHubs.PartitionReceiver.Epoch*
  commentId: Overload:Microsoft.Azure.EventHubs.PartitionReceiver.Epoch
  isExternal: false
  name: Epoch
  nameWithType: PartitionReceiver.Epoch
  fullName: Microsoft.Azure.EventHubs.PartitionReceiver.Epoch
- uid: Microsoft.Azure.EventHubs.PartitionReceiver.StartTime*
  commentId: Overload:Microsoft.Azure.EventHubs.PartitionReceiver.StartTime
  isExternal: false
  name: StartTime
  nameWithType: PartitionReceiver.StartTime
  fullName: Microsoft.Azure.EventHubs.PartitionReceiver.StartTime
- uid: Microsoft.Azure.EventHubs.PartitionReceiver.OffsetInclusive*
  commentId: Overload:Microsoft.Azure.EventHubs.PartitionReceiver.OffsetInclusive
  isExternal: false
  name: OffsetInclusive
  nameWithType: PartitionReceiver.OffsetInclusive
  fullName: Microsoft.Azure.EventHubs.PartitionReceiver.OffsetInclusive
- uid: Microsoft.Azure.EventHubs.PartitionReceiver.StartOffset*
  commentId: Overload:Microsoft.Azure.EventHubs.PartitionReceiver.StartOffset
  isExternal: false
  name: StartOffset
  nameWithType: PartitionReceiver.StartOffset
  fullName: Microsoft.Azure.EventHubs.PartitionReceiver.StartOffset
- uid: Microsoft.Azure.EventHubs.EventData
  commentId: T:Microsoft.Azure.EventHubs.EventData
  parent: Microsoft.Azure.EventHubs
  isExternal: false
  name: EventData
  nameWithType: EventData
  fullName: Microsoft.Azure.EventHubs.EventData
- uid: Microsoft.Azure.EventHubs.PartitionReceiver.ReceiveAsync*
  commentId: Overload:Microsoft.Azure.EventHubs.PartitionReceiver.ReceiveAsync
  isExternal: false
  name: ReceiveAsync
  nameWithType: PartitionReceiver.ReceiveAsync
  fullName: Microsoft.Azure.EventHubs.PartitionReceiver.ReceiveAsync
- uid: Task{IEnumerable{Microsoft.Azure.EventHubs.EventData}}
  commentId: '!:Task{IEnumerable{Microsoft.Azure.EventHubs.EventData}}'
  definition: Task`1
  name: Task<IEnumerable<EventData>>
  nameWithType: Task<IEnumerable<EventData>>
  fullName: Task<IEnumerable<Microsoft.Azure.EventHubs.EventData>>
  nameWithType.vb: Task(Of IEnumerable(Of EventData))
  fullname.vb: Task(Of IEnumerable(Of Microsoft.Azure.EventHubs.EventData))
  name.vb: Task(Of IEnumerable(Of EventData))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.EventHubs.EventData
    name: EventData
    nameWithType: EventData
    fullName: Microsoft.Azure.EventHubs.EventData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.EventHubs.EventData
    name: EventData
    nameWithType: EventData
    fullName: Microsoft.Azure.EventHubs.EventData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullname.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: TimeSpan
- uid: Microsoft.Azure.EventHubs.PartitionReceiver.SetReceiveHandler*
  commentId: Overload:Microsoft.Azure.EventHubs.PartitionReceiver.SetReceiveHandler
  isExternal: false
  name: SetReceiveHandler
  nameWithType: PartitionReceiver.SetReceiveHandler
  fullName: Microsoft.Azure.EventHubs.PartitionReceiver.SetReceiveHandler
- uid: Microsoft.Azure.EventHubs.IPartitionReceiveHandler
  commentId: T:Microsoft.Azure.EventHubs.IPartitionReceiveHandler
  parent: Microsoft.Azure.EventHubs
  isExternal: false
  name: IPartitionReceiveHandler
  nameWithType: IPartitionReceiveHandler
  fullName: Microsoft.Azure.EventHubs.IPartitionReceiveHandler
- uid: Microsoft.Azure.EventHubs.ClientEntity.CloseAsync
  commentId: M:Microsoft.Azure.EventHubs.ClientEntity.CloseAsync
  parent: Microsoft.Azure.EventHubs.ClientEntity
  isExternal: false
  name: CloseAsync()
  nameWithType: ClientEntity.CloseAsync()
  fullName: Microsoft.Azure.EventHubs.ClientEntity.CloseAsync()
  spec.csharp:
  - uid: Microsoft.Azure.EventHubs.ClientEntity.CloseAsync
    name: CloseAsync
    nameWithType: ClientEntity.CloseAsync
    fullName: Microsoft.Azure.EventHubs.ClientEntity.CloseAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.EventHubs.ClientEntity.CloseAsync
    name: CloseAsync
    nameWithType: ClientEntity.CloseAsync
    fullName: Microsoft.Azure.EventHubs.ClientEntity.CloseAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.EventHubs.PartitionReceiver.CloseAsync*
  commentId: Overload:Microsoft.Azure.EventHubs.PartitionReceiver.CloseAsync
  isExternal: false
  name: CloseAsync
  nameWithType: PartitionReceiver.CloseAsync
  fullName: Microsoft.Azure.EventHubs.PartitionReceiver.CloseAsync
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Microsoft.Azure.EventHubs.PartitionReceiver.OnReceiveAsync*
  commentId: Overload:Microsoft.Azure.EventHubs.PartitionReceiver.OnReceiveAsync
  isExternal: false
  name: OnReceiveAsync
  nameWithType: PartitionReceiver.OnReceiveAsync
  fullName: Microsoft.Azure.EventHubs.PartitionReceiver.OnReceiveAsync
- uid: Task{IList{Microsoft.Azure.EventHubs.EventData}}
  commentId: '!:Task{IList{Microsoft.Azure.EventHubs.EventData}}'
  definition: Task`1
  name: Task<IList<EventData>>
  nameWithType: Task<IList<EventData>>
  fullName: Task<IList<Microsoft.Azure.EventHubs.EventData>>
  nameWithType.vb: Task(Of IList(Of EventData))
  fullname.vb: Task(Of IList(Of Microsoft.Azure.EventHubs.EventData))
  name.vb: Task(Of IList(Of EventData))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.EventHubs.EventData
    name: EventData
    nameWithType: EventData
    fullName: Microsoft.Azure.EventHubs.EventData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.EventHubs.EventData
    name: EventData
    nameWithType: EventData
    fullName: Microsoft.Azure.EventHubs.EventData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.EventHubs.PartitionReceiver.OnSetReceiveHandler*
  commentId: Overload:Microsoft.Azure.EventHubs.PartitionReceiver.OnSetReceiveHandler
  isExternal: false
  name: OnSetReceiveHandler
  nameWithType: PartitionReceiver.OnSetReceiveHandler
  fullName: Microsoft.Azure.EventHubs.PartitionReceiver.OnSetReceiveHandler
- uid: Microsoft.Azure.EventHubs.PartitionReceiver.OnCloseAsync*
  commentId: Overload:Microsoft.Azure.EventHubs.PartitionReceiver.OnCloseAsync
  isExternal: false
  name: OnCloseAsync
  nameWithType: PartitionReceiver.OnCloseAsync
  fullName: Microsoft.Azure.EventHubs.PartitionReceiver.OnCloseAsync
