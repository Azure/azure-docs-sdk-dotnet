### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.EventHubs.AsyncLock
  commentId: T:Microsoft.Azure.EventHubs.AsyncLock
  id: AsyncLock
  parent: Microsoft.Azure.EventHubs
  children:
  - Microsoft.Azure.EventHubs.AsyncLock.#ctor
  - Microsoft.Azure.EventHubs.AsyncLock.Dispose
  - Microsoft.Azure.EventHubs.AsyncLock.LockAsync
  - Microsoft.Azure.EventHubs.AsyncLock.LockAsync(CancellationToken)
  langs:
  - csharp
  - vb
  name: AsyncLock
  nameWithType: AsyncLock
  fullName: Microsoft.Azure.EventHubs.AsyncLock
  type: Class
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/Primitives/AsyncLock.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: AsyncLock
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/Primitives/AsyncLock.cs
    startLine: 10
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  syntax:
    content: 'public class AsyncLock : IDisposable'
    content.vb: >-
      Public Class AsyncLock
          Inherits IDisposable
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.EventHubs.AsyncLock.#ctor
  commentId: M:Microsoft.Azure.EventHubs.AsyncLock.#ctor
  id: '#ctor'
  parent: Microsoft.Azure.EventHubs.AsyncLock
  langs:
  - csharp
  - vb
  name: AsyncLock()
  nameWithType: AsyncLock.AsyncLock()
  fullName: Microsoft.Azure.EventHubs.AsyncLock.AsyncLock()
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/Primitives/AsyncLock.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: .ctor
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/Primitives/AsyncLock.cs
    startLine: 16
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  syntax:
    content: public AsyncLock()
    content.vb: Public Sub New
  overload: Microsoft.Azure.EventHubs.AsyncLock.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.EventHubs.AsyncLock.LockAsync
  commentId: M:Microsoft.Azure.EventHubs.AsyncLock.LockAsync
  id: LockAsync
  parent: Microsoft.Azure.EventHubs.AsyncLock
  langs:
  - csharp
  - vb
  name: LockAsync()
  nameWithType: AsyncLock.LockAsync()
  fullName: Microsoft.Azure.EventHubs.AsyncLock.LockAsync()
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/Primitives/AsyncLock.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: LockAsync
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/Primitives/AsyncLock.cs
    startLine: 22
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  syntax:
    content: public Task<AsyncLock.LockRelease> LockAsync()
    content.vb: Public Function LockAsync As Task(Of AsyncLock.LockRelease)
    return:
      type: Task{Microsoft.Azure.EventHubs.AsyncLock.LockRelease}
  overload: Microsoft.Azure.EventHubs.AsyncLock.LockAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.EventHubs.AsyncLock.LockAsync(CancellationToken)
  commentId: M:Microsoft.Azure.EventHubs.AsyncLock.LockAsync(CancellationToken)
  id: LockAsync(CancellationToken)
  parent: Microsoft.Azure.EventHubs.AsyncLock
  langs:
  - csharp
  - vb
  name: LockAsync(CancellationToken)
  nameWithType: AsyncLock.LockAsync(CancellationToken)
  fullName: Microsoft.Azure.EventHubs.AsyncLock.LockAsync(CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/Primitives/AsyncLock.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: LockAsync
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/Primitives/AsyncLock.cs
    startLine: 27
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  syntax:
    content: public Task<AsyncLock.LockRelease> LockAsync(CancellationToken cancellationToken)
    content.vb: Public Function LockAsync(cancellationToken As CancellationToken) As Task(Of AsyncLock.LockRelease)
    parameters:
    - id: cancellationToken
      type: CancellationToken
    return:
      type: Task{Microsoft.Azure.EventHubs.AsyncLock.LockRelease}
  overload: Microsoft.Azure.EventHubs.AsyncLock.LockAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.EventHubs.AsyncLock.Dispose
  commentId: M:Microsoft.Azure.EventHubs.AsyncLock.Dispose
  id: Dispose
  parent: Microsoft.Azure.EventHubs.AsyncLock
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: AsyncLock.Dispose()
  fullName: Microsoft.Azure.EventHubs.AsyncLock.Dispose()
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/Primitives/AsyncLock.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: Dispose
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/Primitives/AsyncLock.cs
    startLine: 44
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Microsoft.Azure.EventHubs.AsyncLock.Dispose*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Azure.EventHubs
  commentId: N:Microsoft.Azure.EventHubs
  isExternal: false
  name: Microsoft.Azure.EventHubs
  nameWithType: Microsoft.Azure.EventHubs
  fullName: Microsoft.Azure.EventHubs
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Azure.EventHubs.AsyncLock.#ctor*
  commentId: Overload:Microsoft.Azure.EventHubs.AsyncLock.#ctor
  isExternal: false
  name: AsyncLock
  nameWithType: AsyncLock.AsyncLock
  fullName: Microsoft.Azure.EventHubs.AsyncLock.AsyncLock
- uid: Microsoft.Azure.EventHubs.AsyncLock.LockAsync*
  commentId: Overload:Microsoft.Azure.EventHubs.AsyncLock.LockAsync
  isExternal: false
  name: LockAsync
  nameWithType: AsyncLock.LockAsync
  fullName: Microsoft.Azure.EventHubs.AsyncLock.LockAsync
- uid: Task{Microsoft.Azure.EventHubs.AsyncLock.LockRelease}
  commentId: '!:Task{Microsoft.Azure.EventHubs.AsyncLock.LockRelease}'
  definition: Task`1
  name: Task<AsyncLock.LockRelease>
  nameWithType: Task<AsyncLock.LockRelease>
  fullName: Task<Microsoft.Azure.EventHubs.AsyncLock.LockRelease>
  nameWithType.vb: Task(Of AsyncLock.LockRelease)
  fullname.vb: Task(Of Microsoft.Azure.EventHubs.AsyncLock.LockRelease)
  name.vb: Task(Of AsyncLock.LockRelease)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.EventHubs.AsyncLock.LockRelease
    name: AsyncLock.LockRelease
    nameWithType: AsyncLock.LockRelease
    fullName: Microsoft.Azure.EventHubs.AsyncLock.LockRelease
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.EventHubs.AsyncLock.LockRelease
    name: AsyncLock.LockRelease
    nameWithType: AsyncLock.LockRelease
    fullName: Microsoft.Azure.EventHubs.AsyncLock.LockRelease
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullname.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: CancellationToken
  commentId: '!:CancellationToken'
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: CancellationToken
- uid: Microsoft.Azure.EventHubs.AsyncLock.Dispose*
  commentId: Overload:Microsoft.Azure.EventHubs.AsyncLock.Dispose
  isExternal: false
  name: Dispose
  nameWithType: AsyncLock.Dispose
  fullName: Microsoft.Azure.EventHubs.AsyncLock.Dispose
