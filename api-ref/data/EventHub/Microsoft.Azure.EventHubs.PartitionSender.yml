### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.EventHubs.PartitionSender
  commentId: T:Microsoft.Azure.EventHubs.PartitionSender
  id: PartitionSender
  parent: Microsoft.Azure.EventHubs
  children:
  - Microsoft.Azure.EventHubs.PartitionSender.CloseAsync
  - Microsoft.Azure.EventHubs.PartitionSender.EventHubClient
  - Microsoft.Azure.EventHubs.PartitionSender.PartitionId
  - Microsoft.Azure.EventHubs.PartitionSender.SendAsync(IEnumerable{Microsoft.Azure.EventHubs.EventData})
  - Microsoft.Azure.EventHubs.PartitionSender.SendAsync(Microsoft.Azure.EventHubs.EventData)
  langs:
  - csharp
  - vb
  name: PartitionSender
  nameWithType: PartitionSender
  fullName: Microsoft.Azure.EventHubs.PartitionSender
  type: Class
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/PartitionSender.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: PartitionSender
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/PartitionSender.cs
    startLine: 15
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  summary: "\nThis sender class is a logical representation of sending events to a specific EventHub partition. Do not use this class\nif you do not care about sending events to specific partitions, instead use <xref href=\"Microsoft.Azure.EventHubs.EventHubClient.SendAsync(Microsoft.Azure.EventHubs.EventData)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public sealed class PartitionSender : ClientEntity'
    content.vb: >-
      Public NotInheritable Class PartitionSender
          Inherits ClientEntity
  seealso:
  - linkId: Microsoft.Azure.EventHubs.EventHubClient.CreatePartitionSender(System.String)
    commentId: M:Microsoft.Azure.EventHubs.EventHubClient.CreatePartitionSender(System.String)
  inheritance:
  - System.Object
  - Microsoft.Azure.EventHubs.ClientEntity
  inheritedMembers:
  - Microsoft.Azure.EventHubs.ClientEntity.ClientId
  - Microsoft.Azure.EventHubs.ClientEntity.RetryPolicy
  - Microsoft.Azure.EventHubs.ClientEntity.Close
  - Microsoft.Azure.EventHubs.ClientEntity.GetNextId
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.Azure.EventHubs.PartitionSender.EventHubClient
  commentId: P:Microsoft.Azure.EventHubs.PartitionSender.EventHubClient
  id: EventHubClient
  parent: Microsoft.Azure.EventHubs.PartitionSender
  langs:
  - csharp
  - vb
  name: EventHubClient
  nameWithType: PartitionSender.EventHubClient
  fullName: Microsoft.Azure.EventHubs.PartitionSender.EventHubClient
  type: Property
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/PartitionSender.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: EventHubClient
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/PartitionSender.cs
    startLine: 26
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  syntax:
    content: public EventHubClient EventHubClient { get; }
    content.vb: Public ReadOnly Property EventHubClient As EventHubClient
    parameters: []
    return:
      type: Microsoft.Azure.EventHubs.EventHubClient
  overload: Microsoft.Azure.EventHubs.PartitionSender.EventHubClient*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.EventHubs.PartitionSender.PartitionId
  commentId: P:Microsoft.Azure.EventHubs.PartitionSender.PartitionId
  id: PartitionId
  parent: Microsoft.Azure.EventHubs.PartitionSender
  langs:
  - csharp
  - vb
  name: PartitionId
  nameWithType: PartitionSender.PartitionId
  fullName: Microsoft.Azure.EventHubs.PartitionSender.PartitionId
  type: Property
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/PartitionSender.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: PartitionId
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/PartitionSender.cs
    startLine: 28
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  syntax:
    content: public string PartitionId { get; }
    content.vb: Public ReadOnly Property PartitionId As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.EventHubs.PartitionSender.PartitionId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.EventHubs.PartitionSender.SendAsync(Microsoft.Azure.EventHubs.EventData)
  commentId: M:Microsoft.Azure.EventHubs.PartitionSender.SendAsync(Microsoft.Azure.EventHubs.EventData)
  id: SendAsync(Microsoft.Azure.EventHubs.EventData)
  parent: Microsoft.Azure.EventHubs.PartitionSender
  langs:
  - csharp
  - vb
  name: SendAsync(EventData)
  nameWithType: PartitionSender.SendAsync(EventData)
  fullName: Microsoft.Azure.EventHubs.PartitionSender.SendAsync(Microsoft.Azure.EventHubs.EventData)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/PartitionSender.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: SendAsync
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/PartitionSender.cs
    startLine: 49
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  summary: "\nSend <xref href=\"Microsoft.Azure.EventHubs.EventData\" data-throw-if-not-resolved=\"false\"></xref> to a specific EventHub partition. The target partition is pre-determined when this PartitionSender was created.\nThis send pattern emphasizes data correlation over general availability and latency.\n<p>There are 3 ways to send to EventHubs, each exposed as a method (along with its sendBatch overload):</p>\n<p>i.   <xref href=\"Microsoft.Azure.EventHubs.EventHubClient.SendAsync(Microsoft.Azure.EventHubs.EventData)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Azure.EventHubs.EventHubClient.SendAsync(IEnumerable%7bMicrosoft.Azure.EventHubs.EventData%7d)\" data-throw-if-not-resolved=\"false\"></xref></p>\n<p>ii.  <xref href=\"Microsoft.Azure.EventHubs.EventHubClient.SendAsync(Microsoft.Azure.EventHubs.EventData%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Azure.EventHubs.EventHubClient.SendAsync(IEnumerable%7bMicrosoft.Azure.EventHubs.EventData%7d%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref></p>\n<p>iii. <xref href=\"Microsoft.Azure.EventHubs.PartitionSender.SendAsync(Microsoft.Azure.EventHubs.EventData)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Azure.EventHubs.PartitionSender.SendAsync(IEnumerable%7bMicrosoft.Azure.EventHubs.EventData%7d)\" data-throw-if-not-resolved=\"false\"></xref></p>\nUse this type of send if:\n<p>a. The client wants to take direct control of distribution of data across partitions. In this case client is responsible for making sure there is at least one sender per event hub partition.</p>\n<p>b. User cannot use partition key as a mean to direct events to specific partition, yet there is a need for data correlation with partitioning scheme.</p>\n"
  example: []
  syntax:
    content: public Task SendAsync(EventData eventData)
    content.vb: Public Function SendAsync(eventData As EventData) As Task
    parameters:
    - id: eventData
      type: Microsoft.Azure.EventHubs.EventData
    return:
      type: Task
      description: A Task that completes when the send operations is done.
  overload: Microsoft.Azure.EventHubs.PartitionSender.SendAsync*
  exceptions:
  - type: Microsoft.Azure.EventHubs.EventHubsException
    commentId: T:Microsoft.Azure.EventHubs.EventHubsException
    description: Event Hubs service encountered problems during the operation.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.EventHubs.PartitionSender.SendAsync(IEnumerable{Microsoft.Azure.EventHubs.EventData})
  commentId: M:Microsoft.Azure.EventHubs.PartitionSender.SendAsync(IEnumerable{Microsoft.Azure.EventHubs.EventData})
  id: SendAsync(IEnumerable{Microsoft.Azure.EventHubs.EventData})
  parent: Microsoft.Azure.EventHubs.PartitionSender
  langs:
  - csharp
  - vb
  name: SendAsync(IEnumerable<EventData>)
  nameWithType: PartitionSender.SendAsync(IEnumerable<EventData>)
  fullName: Microsoft.Azure.EventHubs.PartitionSender.SendAsync(IEnumerable<Microsoft.Azure.EventHubs.EventData>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/PartitionSender.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: SendAsync
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/PartitionSender.cs
    startLine: 98
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  summary: "\nSend <xref href=\"Microsoft.Azure.EventHubs.EventData\" data-throw-if-not-resolved=\"false\"></xref> to a specific EventHub partition. The targeted partition is pre-determined when this PartitionSender was created.\n<p>\nThere are 3 ways to send to EventHubs, to understand this particular type of send refer to the overload <xref href=\"Microsoft.Azure.EventHubs.PartitionSender.SendAsync(Microsoft.Azure.EventHubs.EventData)\" data-throw-if-not-resolved=\"false\"></xref>, which is the same type of send and is used to send single <xref href=\"Microsoft.Azure.EventHubs.EventData\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\nSending a batch of <xref href=\"Microsoft.Azure.EventHubs.EventData\" data-throw-if-not-resolved=\"false\"></xref>'s is useful in the following cases:\n<p>i.    Efficient send - sending a batch of <xref href=\"Microsoft.Azure.EventHubs.EventData\" data-throw-if-not-resolved=\"false\"></xref> maximizes the overall throughput by optimally using the number of sessions created to EventHubs' service.</p>\n<p>ii.   Sending multiple <xref href=\"Microsoft.Azure.EventHubs.EventData\" data-throw-if-not-resolved=\"false\"></xref>'s in a Transaction. To acheive ACID properties, the Gateway Service will forward all <xref href=\"Microsoft.Azure.EventHubs.EventData\" data-throw-if-not-resolved=\"false\"></xref>'s in the batch to a single EventHub partition.</p>\n"
  example:
  - "\nSample code:\n<pre><code>EventHubClient client = EventHubClient.Create(\"__connectionString__\");\nPartitionSender senderToPartitionOne = client.CreatePartitionSender(\"1\");\n\nwhile (true)\n{\n    var events = new List&lt;EventData&gt;();\n    for (int count = 1; count &lt; 11; count++)\n    {\n        var payload = new PayloadEvent(count);\n        byte[] payloadBytes = Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(payload));\n        var sendEvent = new EventData(payloadBytes);\n        var applicationProperties = new Dictionary&lt;string, string&gt;();\n        applicationProperties[\"from\"] = \"csharpClient\";\n        sendEvent.Properties = applicationProperties;\n        events.Add(sendEvent);\n    }\n\n    await senderToPartitionOne.SendAsync(events);\n    Console.WriteLine(\"Sent Batch... Size: {0}\", events.Count);\n\n}</code></pre>\n"
  syntax:
    content: public Task SendAsync(IEnumerable<EventData> eventDatas)
    content.vb: Public Function SendAsync(eventDatas As IEnumerable(Of EventData)) As Task
    parameters:
    - id: eventDatas
      type: IEnumerable{Microsoft.Azure.EventHubs.EventData}
      description: batch of events to send to EventHub
    return:
      type: Task
      description: a Task that completes when the send operation is done.
  overload: Microsoft.Azure.EventHubs.PartitionSender.SendAsync*
  exceptions:
  - type: Microsoft.Azure.EventHubs.EventHubsException
    commentId: T:Microsoft.Azure.EventHubs.EventHubsException
    description: Event Hubs service encountered problems during the operation.
  nameWithType.vb: PartitionSender.SendAsync(IEnumerable(Of EventData))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.EventHubs.PartitionSender.SendAsync(IEnumerable(Of Microsoft.Azure.EventHubs.EventData))
  name.vb: SendAsync(IEnumerable(Of EventData))
- uid: Microsoft.Azure.EventHubs.PartitionSender.CloseAsync
  commentId: M:Microsoft.Azure.EventHubs.PartitionSender.CloseAsync
  id: CloseAsync
  parent: Microsoft.Azure.EventHubs.PartitionSender
  langs:
  - csharp
  - vb
  name: CloseAsync()
  nameWithType: PartitionSender.CloseAsync()
  fullName: Microsoft.Azure.EventHubs.PartitionSender.CloseAsync()
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/PartitionSender.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: CloseAsync
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/PartitionSender.cs
    startLine: 122
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  syntax:
    content: public override Task CloseAsync()
    content.vb: Public Overrides Function CloseAsync As Task
    return:
      type: Task
  overridden: Microsoft.Azure.EventHubs.ClientEntity.CloseAsync
  overload: Microsoft.Azure.EventHubs.PartitionSender.CloseAsync*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.Azure.EventHubs.EventHubClient.SendAsync(Microsoft.Azure.EventHubs.EventData)
  commentId: M:Microsoft.Azure.EventHubs.EventHubClient.SendAsync(Microsoft.Azure.EventHubs.EventData)
- uid: Microsoft.Azure.EventHubs.EventHubClient.CreatePartitionSender(System.String)
  commentId: M:Microsoft.Azure.EventHubs.EventHubClient.CreatePartitionSender(System.String)
- uid: Microsoft.Azure.EventHubs
  commentId: N:Microsoft.Azure.EventHubs
  isExternal: false
  name: Microsoft.Azure.EventHubs
  nameWithType: Microsoft.Azure.EventHubs
  fullName: Microsoft.Azure.EventHubs
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Azure.EventHubs.ClientEntity
  commentId: T:Microsoft.Azure.EventHubs.ClientEntity
  parent: Microsoft.Azure.EventHubs
  isExternal: false
  name: ClientEntity
  nameWithType: ClientEntity
  fullName: Microsoft.Azure.EventHubs.ClientEntity
- uid: Microsoft.Azure.EventHubs.ClientEntity.ClientId
  commentId: P:Microsoft.Azure.EventHubs.ClientEntity.ClientId
  parent: Microsoft.Azure.EventHubs.ClientEntity
  isExternal: false
  name: ClientId
  nameWithType: ClientEntity.ClientId
  fullName: Microsoft.Azure.EventHubs.ClientEntity.ClientId
- uid: Microsoft.Azure.EventHubs.ClientEntity.RetryPolicy
  commentId: P:Microsoft.Azure.EventHubs.ClientEntity.RetryPolicy
  parent: Microsoft.Azure.EventHubs.ClientEntity
  isExternal: false
  name: RetryPolicy
  nameWithType: ClientEntity.RetryPolicy
  fullName: Microsoft.Azure.EventHubs.ClientEntity.RetryPolicy
- uid: Microsoft.Azure.EventHubs.ClientEntity.Close
  commentId: M:Microsoft.Azure.EventHubs.ClientEntity.Close
  parent: Microsoft.Azure.EventHubs.ClientEntity
  isExternal: false
  name: Close()
  nameWithType: ClientEntity.Close()
  fullName: Microsoft.Azure.EventHubs.ClientEntity.Close()
  spec.csharp:
  - uid: Microsoft.Azure.EventHubs.ClientEntity.Close
    name: Close
    nameWithType: ClientEntity.Close
    fullName: Microsoft.Azure.EventHubs.ClientEntity.Close
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.EventHubs.ClientEntity.Close
    name: Close
    nameWithType: ClientEntity.Close
    fullName: Microsoft.Azure.EventHubs.ClientEntity.Close
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.EventHubs.ClientEntity.GetNextId
  commentId: M:Microsoft.Azure.EventHubs.ClientEntity.GetNextId
  parent: Microsoft.Azure.EventHubs.ClientEntity
  isExternal: false
  name: GetNextId()
  nameWithType: ClientEntity.GetNextId()
  fullName: Microsoft.Azure.EventHubs.ClientEntity.GetNextId()
  spec.csharp:
  - uid: Microsoft.Azure.EventHubs.ClientEntity.GetNextId
    name: GetNextId
    nameWithType: ClientEntity.GetNextId
    fullName: Microsoft.Azure.EventHubs.ClientEntity.GetNextId
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.EventHubs.ClientEntity.GetNextId
    name: GetNextId
    nameWithType: ClientEntity.GetNextId
    fullName: Microsoft.Azure.EventHubs.ClientEntity.GetNextId
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.EventHubs.PartitionSender.EventHubClient*
  commentId: Overload:Microsoft.Azure.EventHubs.PartitionSender.EventHubClient
  isExternal: false
  name: EventHubClient
  nameWithType: PartitionSender.EventHubClient
  fullName: Microsoft.Azure.EventHubs.PartitionSender.EventHubClient
- uid: Microsoft.Azure.EventHubs.EventHubClient
  commentId: T:Microsoft.Azure.EventHubs.EventHubClient
  parent: Microsoft.Azure.EventHubs
  isExternal: false
  name: EventHubClient
  nameWithType: EventHubClient
  fullName: Microsoft.Azure.EventHubs.EventHubClient
- uid: Microsoft.Azure.EventHubs.PartitionSender.PartitionId*
  commentId: Overload:Microsoft.Azure.EventHubs.PartitionSender.PartitionId
  isExternal: false
  name: PartitionId
  nameWithType: PartitionSender.PartitionId
  fullName: Microsoft.Azure.EventHubs.PartitionSender.PartitionId
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Azure.EventHubs.EventData
  commentId: T:Microsoft.Azure.EventHubs.EventData
  parent: Microsoft.Azure.EventHubs
  isExternal: false
  name: EventData
  nameWithType: EventData
  fullName: Microsoft.Azure.EventHubs.EventData
- uid: Microsoft.Azure.EventHubs.EventHubClient.SendAsync(IEnumerable{Microsoft.Azure.EventHubs.EventData})
  commentId: M:Microsoft.Azure.EventHubs.EventHubClient.SendAsync(IEnumerable{Microsoft.Azure.EventHubs.EventData})
- uid: Microsoft.Azure.EventHubs.EventHubClient.SendAsync(Microsoft.Azure.EventHubs.EventData,System.String)
  commentId: M:Microsoft.Azure.EventHubs.EventHubClient.SendAsync(Microsoft.Azure.EventHubs.EventData,System.String)
- uid: Microsoft.Azure.EventHubs.EventHubClient.SendAsync(IEnumerable{Microsoft.Azure.EventHubs.EventData},System.String)
  commentId: M:Microsoft.Azure.EventHubs.EventHubClient.SendAsync(IEnumerable{Microsoft.Azure.EventHubs.EventData},System.String)
- uid: Microsoft.Azure.EventHubs.PartitionSender.SendAsync(Microsoft.Azure.EventHubs.EventData)
  commentId: M:Microsoft.Azure.EventHubs.PartitionSender.SendAsync(Microsoft.Azure.EventHubs.EventData)
- uid: Microsoft.Azure.EventHubs.PartitionSender.SendAsync(IEnumerable{Microsoft.Azure.EventHubs.EventData})
  commentId: M:Microsoft.Azure.EventHubs.PartitionSender.SendAsync(IEnumerable{Microsoft.Azure.EventHubs.EventData})
- uid: Microsoft.Azure.EventHubs.PartitionSender.SendAsync*
  commentId: Overload:Microsoft.Azure.EventHubs.PartitionSender.SendAsync
  isExternal: false
  name: SendAsync
  nameWithType: PartitionSender.SendAsync
  fullName: Microsoft.Azure.EventHubs.PartitionSender.SendAsync
- uid: Microsoft.Azure.EventHubs.EventHubsException
  commentId: T:Microsoft.Azure.EventHubs.EventHubsException
  parent: Microsoft.Azure.EventHubs
  isExternal: false
  name: EventHubsException
  nameWithType: EventHubsException
  fullName: Microsoft.Azure.EventHubs.EventHubsException
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: IEnumerable{Microsoft.Azure.EventHubs.EventData}
  commentId: '!:IEnumerable{Microsoft.Azure.EventHubs.EventData}'
  definition: IEnumerable`1
  name: IEnumerable<EventData>
  nameWithType: IEnumerable<EventData>
  fullName: IEnumerable<Microsoft.Azure.EventHubs.EventData>
  nameWithType.vb: IEnumerable(Of EventData)
  fullname.vb: IEnumerable(Of Microsoft.Azure.EventHubs.EventData)
  name.vb: IEnumerable(Of EventData)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.EventHubs.EventData
    name: EventData
    nameWithType: EventData
    fullName: Microsoft.Azure.EventHubs.EventData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.EventHubs.EventData
    name: EventData
    nameWithType: EventData
    fullName: Microsoft.Azure.EventHubs.EventData
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullname.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.EventHubs.ClientEntity.CloseAsync
  commentId: M:Microsoft.Azure.EventHubs.ClientEntity.CloseAsync
  parent: Microsoft.Azure.EventHubs.ClientEntity
  isExternal: false
  name: CloseAsync()
  nameWithType: ClientEntity.CloseAsync()
  fullName: Microsoft.Azure.EventHubs.ClientEntity.CloseAsync()
  spec.csharp:
  - uid: Microsoft.Azure.EventHubs.ClientEntity.CloseAsync
    name: CloseAsync
    nameWithType: ClientEntity.CloseAsync
    fullName: Microsoft.Azure.EventHubs.ClientEntity.CloseAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.EventHubs.ClientEntity.CloseAsync
    name: CloseAsync
    nameWithType: ClientEntity.CloseAsync
    fullName: Microsoft.Azure.EventHubs.ClientEntity.CloseAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.EventHubs.PartitionSender.CloseAsync*
  commentId: Overload:Microsoft.Azure.EventHubs.PartitionSender.CloseAsync
  isExternal: false
  name: CloseAsync
  nameWithType: PartitionSender.CloseAsync
  fullName: Microsoft.Azure.EventHubs.PartitionSender.CloseAsync
