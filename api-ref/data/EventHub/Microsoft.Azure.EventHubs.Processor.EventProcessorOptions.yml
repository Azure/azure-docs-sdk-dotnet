### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions
  commentId: T:Microsoft.Azure.EventHubs.Processor.EventProcessorOptions
  id: EventProcessorOptions
  parent: Microsoft.Azure.EventHubs.Processor
  children:
  - Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.#ctor
  - Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.DefaultOptions
  - Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.InitialOffsetProvider
  - Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.InvokeProcessorAfterReceiveTimeout
  - Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.MaxBatchSize
  - Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.PrefetchCount
  - Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.ReceiveTimeout
  - Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.SetExceptionHandler(Action{Microsoft.Azure.EventHubs.Processor.ExceptionReceivedEventArgs})
  langs:
  - csharp
  - vb
  name: EventProcessorOptions
  nameWithType: EventProcessorOptions
  fullName: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions
  type: Class
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/EventProcessorOptions.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: EventProcessorOptions
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/EventProcessorOptions.cs
    startLine: 7
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  syntax:
    content: 'public sealed class EventProcessorOptions : object'
    content.vb: >-
      Public NotInheritable Class EventProcessorOptions
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.DefaultOptions
  commentId: P:Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.DefaultOptions
  id: DefaultOptions
  parent: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions
  langs:
  - csharp
  - vb
  name: DefaultOptions
  nameWithType: EventProcessorOptions.DefaultOptions
  fullName: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.DefaultOptions
  type: Property
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/EventProcessorOptions.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: DefaultOptions
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/EventProcessorOptions.cs
    startLine: 21
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  summary: "\nReturns an EventProcessorOptions instance with all options set to the default values.\nThe default values are:\n<p>MaxBatchSize: 10</p>\n<p>ReceiveTimeOut: 1 minute</p>\n<p>PrefetchCount: 300</p>\n<p>InitialOffsetProvider: uses the last offset checkpointed, or StartOfStream</p>\n<p>InvokeProcessorAfterReceiveTimeout: false</p>\n"
  example: []
  syntax:
    content: public static EventProcessorOptions DefaultOptions { get; }
    content.vb: Public Shared ReadOnly Property DefaultOptions As EventProcessorOptions
    parameters: []
    return:
      type: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions
      description: an EventProcessorOptions instance with all options set to the default values
  overload: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.DefaultOptions*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.#ctor
  commentId: M:Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.#ctor
  id: '#ctor'
  parent: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions
  langs:
  - csharp
  - vb
  name: EventProcessorOptions()
  nameWithType: EventProcessorOptions.EventProcessorOptions()
  fullName: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.EventProcessorOptions()
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/EventProcessorOptions.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: .ctor
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/EventProcessorOptions.cs
    startLine: 29
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  syntax:
    content: public EventProcessorOptions()
    content.vb: Public Sub New
  overload: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.SetExceptionHandler(Action{Microsoft.Azure.EventHubs.Processor.ExceptionReceivedEventArgs})
  commentId: M:Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.SetExceptionHandler(Action{Microsoft.Azure.EventHubs.Processor.ExceptionReceivedEventArgs})
  id: SetExceptionHandler(Action{Microsoft.Azure.EventHubs.Processor.ExceptionReceivedEventArgs})
  parent: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions
  langs:
  - csharp
  - vb
  name: SetExceptionHandler(Action<ExceptionReceivedEventArgs>)
  nameWithType: EventProcessorOptions.SetExceptionHandler(Action<ExceptionReceivedEventArgs>)
  fullName: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.SetExceptionHandler(Action<Microsoft.Azure.EventHubs.Processor.ExceptionReceivedEventArgs>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/EventProcessorOptions.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: SetExceptionHandler
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/EventProcessorOptions.cs
    startLine: 45
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  summary: "\nSets a handler which receives notification of general exceptions.\n<p>Exceptions which occur while processing events from a particular Event Hub partition are delivered\nto the onError method of the event processor for that partition. This handler is called on occasions\nwhen there is no event processor associated with the throwing activity, or the event processor could\nnot be created.</p>\n"
  example: []
  syntax:
    content: public void SetExceptionHandler(Action<ExceptionReceivedEventArgs> exceptionHandler)
    content.vb: Public Sub SetExceptionHandler(exceptionHandler As Action(Of ExceptionReceivedEventArgs))
    parameters:
    - id: exceptionHandler
      type: Action{Microsoft.Azure.EventHubs.Processor.ExceptionReceivedEventArgs}
      description: Handler which is called when an exception occurs. Set to null to stop handling.
  overload: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.SetExceptionHandler*
  nameWithType.vb: EventProcessorOptions.SetExceptionHandler(Action(Of ExceptionReceivedEventArgs))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.SetExceptionHandler(Action(Of Microsoft.Azure.EventHubs.Processor.ExceptionReceivedEventArgs))
  name.vb: SetExceptionHandler(Action(Of ExceptionReceivedEventArgs))
- uid: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.MaxBatchSize
  commentId: P:Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.MaxBatchSize
  id: MaxBatchSize
  parent: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions
  langs:
  - csharp
  - vb
  name: MaxBatchSize
  nameWithType: EventProcessorOptions.MaxBatchSize
  fullName: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.MaxBatchSize
  type: Property
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/EventProcessorOptions.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: MaxBatchSize
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/EventProcessorOptions.cs
    startLine: 53
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  summary: "\nReturns the maximum size of an event batch that IEventProcessor.ProcessEventsAsync will be called with\n"
  example: []
  syntax:
    content: public int MaxBatchSize { get; set; }
    content.vb: Public Property MaxBatchSize As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.MaxBatchSize*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.ReceiveTimeout
  commentId: P:Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.ReceiveTimeout
  id: ReceiveTimeout
  parent: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions
  langs:
  - csharp
  - vb
  name: ReceiveTimeout
  nameWithType: EventProcessorOptions.ReceiveTimeout
  fullName: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.ReceiveTimeout
  type: Property
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/EventProcessorOptions.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: ReceiveTimeout
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/EventProcessorOptions.cs
    startLine: 58
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  summary: "\nGets or sets the timeout length for receive operations.\n"
  example: []
  syntax:
    content: public TimeSpan ReceiveTimeout { get; set; }
    content.vb: Public Property ReceiveTimeout As TimeSpan
    parameters: []
    return:
      type: TimeSpan
  overload: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.ReceiveTimeout*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.PrefetchCount
  commentId: P:Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.PrefetchCount
  id: PrefetchCount
  parent: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions
  langs:
  - csharp
  - vb
  name: PrefetchCount
  nameWithType: EventProcessorOptions.PrefetchCount
  fullName: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.PrefetchCount
  type: Property
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/EventProcessorOptions.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: PrefetchCount
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/EventProcessorOptions.cs
    startLine: 64
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  summary: "\nGets or sets the current prefetch count for the underlying client.\nThe default is 300.\n"
  example: []
  syntax:
    content: public int PrefetchCount { get; set; }
    content.vb: Public Property PrefetchCount As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.PrefetchCount*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.InitialOffsetProvider
  commentId: P:Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.InitialOffsetProvider
  id: InitialOffsetProvider
  parent: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions
  langs:
  - csharp
  - vb
  name: InitialOffsetProvider
  nameWithType: EventProcessorOptions.InitialOffsetProvider
  fullName: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.InitialOffsetProvider
  type: Property
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/EventProcessorOptions.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: InitialOffsetProvider
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/EventProcessorOptions.cs
    startLine: 72
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  summary: "\nGet or sets the current function used to determine the initial offset at which to start receiving\nevents for a partition.\n<p>A null return indicates that it is using the internal provider, which uses the last checkpointed\noffset value (if present) or StartOfSTream (if not).</p>\n"
  example: []
  syntax:
    content: public Func<string, object> InitialOffsetProvider { get; set; }
    content.vb: Public Property InitialOffsetProvider As Func(Of String, Object)
    parameters: []
    return:
      type: Func{System.String,System.Object}
  overload: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.InitialOffsetProvider*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.InvokeProcessorAfterReceiveTimeout
  commentId: P:Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.InvokeProcessorAfterReceiveTimeout
  id: InvokeProcessorAfterReceiveTimeout
  parent: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions
  langs:
  - csharp
  - vb
  name: InvokeProcessorAfterReceiveTimeout
  nameWithType: EventProcessorOptions.InvokeProcessorAfterReceiveTimeout
  fullName: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.InvokeProcessorAfterReceiveTimeout
  type: Property
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/EventProcessorOptions.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: InvokeProcessorAfterReceiveTimeout
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/EventProcessorOptions.cs
    startLine: 78
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  summary: "\nReturns whether the EventProcessorHost will call IEventProcessor.OnEvents(null) when a receive\ntimeout occurs (true) or not (false).\n"
  example: []
  syntax:
    content: public bool InvokeProcessorAfterReceiveTimeout { get; set; }
    content.vb: Public Property InvokeProcessorAfterReceiveTimeout As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.InvokeProcessorAfterReceiveTimeout*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Azure.EventHubs.Processor
  commentId: N:Microsoft.Azure.EventHubs.Processor
  isExternal: false
  name: Microsoft.Azure.EventHubs.Processor
  nameWithType: Microsoft.Azure.EventHubs.Processor
  fullName: Microsoft.Azure.EventHubs.Processor
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.DefaultOptions*
  commentId: Overload:Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.DefaultOptions
  isExternal: false
  name: DefaultOptions
  nameWithType: EventProcessorOptions.DefaultOptions
  fullName: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.DefaultOptions
- uid: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions
  commentId: T:Microsoft.Azure.EventHubs.Processor.EventProcessorOptions
  parent: Microsoft.Azure.EventHubs.Processor
  isExternal: false
  name: EventProcessorOptions
  nameWithType: EventProcessorOptions
  fullName: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions
- uid: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.#ctor*
  commentId: Overload:Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.#ctor
  isExternal: false
  name: EventProcessorOptions
  nameWithType: EventProcessorOptions.EventProcessorOptions
  fullName: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.EventProcessorOptions
- uid: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.SetExceptionHandler*
  commentId: Overload:Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.SetExceptionHandler
  isExternal: false
  name: SetExceptionHandler
  nameWithType: EventProcessorOptions.SetExceptionHandler
  fullName: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.SetExceptionHandler
- uid: Action{Microsoft.Azure.EventHubs.Processor.ExceptionReceivedEventArgs}
  commentId: '!:Action{Microsoft.Azure.EventHubs.Processor.ExceptionReceivedEventArgs}'
  definition: Action`1
  name: Action<ExceptionReceivedEventArgs>
  nameWithType: Action<ExceptionReceivedEventArgs>
  fullName: Action<Microsoft.Azure.EventHubs.Processor.ExceptionReceivedEventArgs>
  nameWithType.vb: Action(Of ExceptionReceivedEventArgs)
  fullname.vb: Action(Of Microsoft.Azure.EventHubs.Processor.ExceptionReceivedEventArgs)
  name.vb: Action(Of ExceptionReceivedEventArgs)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.EventHubs.Processor.ExceptionReceivedEventArgs
    name: ExceptionReceivedEventArgs
    nameWithType: ExceptionReceivedEventArgs
    fullName: Microsoft.Azure.EventHubs.Processor.ExceptionReceivedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.EventHubs.Processor.ExceptionReceivedEventArgs
    name: ExceptionReceivedEventArgs
    nameWithType: ExceptionReceivedEventArgs
    fullName: Microsoft.Azure.EventHubs.Processor.ExceptionReceivedEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`1
  commentId: '!:Action`1'
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullname.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.MaxBatchSize*
  commentId: Overload:Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.MaxBatchSize
  isExternal: false
  name: MaxBatchSize
  nameWithType: EventProcessorOptions.MaxBatchSize
  fullName: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.MaxBatchSize
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.ReceiveTimeout*
  commentId: Overload:Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.ReceiveTimeout
  isExternal: false
  name: ReceiveTimeout
  nameWithType: EventProcessorOptions.ReceiveTimeout
  fullName: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.ReceiveTimeout
- uid: TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: TimeSpan
- uid: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.PrefetchCount*
  commentId: Overload:Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.PrefetchCount
  isExternal: false
  name: PrefetchCount
  nameWithType: EventProcessorOptions.PrefetchCount
  fullName: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.PrefetchCount
- uid: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.InitialOffsetProvider*
  commentId: Overload:Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.InitialOffsetProvider
  isExternal: false
  name: InitialOffsetProvider
  nameWithType: EventProcessorOptions.InitialOffsetProvider
  fullName: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.InitialOffsetProvider
- uid: Func{System.String,System.Object}
  commentId: '!:Func{System.String,System.Object}'
  definition: Func`2
  name: Func<String, Object>
  nameWithType: Func<String, Object>
  fullName: Func<System.String, System.Object>
  nameWithType.vb: Func(Of String, Object)
  fullname.vb: Func(Of System.String, System.Object)
  name.vb: Func(Of String, Object)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullname.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.InvokeProcessorAfterReceiveTimeout*
  commentId: Overload:Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.InvokeProcessorAfterReceiveTimeout
  isExternal: false
  name: InvokeProcessorAfterReceiveTimeout
  nameWithType: EventProcessorOptions.InvokeProcessorAfterReceiveTimeout
  fullName: Microsoft.Azure.EventHubs.Processor.EventProcessorOptions.InvokeProcessorAfterReceiveTimeout
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
