### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.EventHubs.EventData
  commentId: T:Microsoft.Azure.EventHubs.EventData
  id: EventData
  parent: Microsoft.Azure.EventHubs
  children:
  - Microsoft.Azure.EventHubs.EventData.#ctor(ArraySegment{System.Byte})
  - Microsoft.Azure.EventHubs.EventData.#ctor(System.Byte[])
  - Microsoft.Azure.EventHubs.EventData.Body
  - Microsoft.Azure.EventHubs.EventData.Properties
  - Microsoft.Azure.EventHubs.EventData.SystemProperties
  langs:
  - csharp
  - vb
  name: EventData
  nameWithType: EventData
  fullName: Microsoft.Azure.EventHubs.EventData
  type: Class
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/EventData.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: EventData
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/EventData.cs
    startLine: 12
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  summary: "\nThe data structure encapsulating the Event being sent-to and received-from EventHubs.\nEach EventHubs partition can be visualized as a Stream of EventData.\n"
  example: []
  syntax:
    content: 'public class EventData : object'
    content.vb: >-
      Public Class EventData
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.EventHubs.EventData.#ctor(System.Byte[])
  commentId: M:Microsoft.Azure.EventHubs.EventData.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: Microsoft.Azure.EventHubs.EventData
  langs:
  - csharp
  - vb
  name: EventData(Byte[])
  nameWithType: EventData.EventData(Byte[])
  fullName: Microsoft.Azure.EventHubs.EventData.EventData(System.Byte[])
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/EventData.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: .ctor
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/EventData.cs
    startLine: 30
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  summary: "\nConstruct EventData to send to EventHub.\nTypical pattern to create a Sending EventData is:\n<p>i. Serialize the sending ApplicationEvent to be sent to EventHubs into bytes.</p>\n<p>ii. If complex serialization logic is involved (for example: multiple types of data) - add a Hint using the <xref href=\"Microsoft.Azure.EventHubs.EventData.Properties\" data-throw-if-not-resolved=\"false\"></xref> for the Consumer.</p>\n"
  example:
  - >
    Sample Code:

    <pre><code>EventData eventData = new EventData(telemetryEventBytes);

    var applicationProperties = new Dictionary&lt;string, string&gt;();

    applicationProperties["eventType"] = "com.microsoft.azure.monitoring.EtlEvent";

    eventData.Properties(applicationProperties);

    await partitionSender.SendAsync(eventData);</code></pre>
  syntax:
    content: public EventData(byte[] array)
    content.vb: Public Sub New(array As Byte())
    parameters:
    - id: array
      type: System.Byte[]
      description: The actual payload of data in bytes to be sent to the EventHub.
  overload: Microsoft.Azure.EventHubs.EventData.#ctor*
  nameWithType.vb: EventData.EventData(Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.EventHubs.EventData.EventData(System.Byte())
  name.vb: EventData(Byte())
- uid: Microsoft.Azure.EventHubs.EventData.#ctor(ArraySegment{System.Byte})
  commentId: M:Microsoft.Azure.EventHubs.EventData.#ctor(ArraySegment{System.Byte})
  id: '#ctor(ArraySegment{System.Byte})'
  parent: Microsoft.Azure.EventHubs.EventData
  langs:
  - csharp
  - vb
  name: EventData(ArraySegment<Byte>)
  nameWithType: EventData.EventData(ArraySegment<Byte>)
  fullName: Microsoft.Azure.EventHubs.EventData.EventData(ArraySegment<System.Byte>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/EventData.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: .ctor
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/EventData.cs
    startLine: 51
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  summary: "\nConstruct EventData to send to EventHub.\nTypical pattern to create a Sending EventData is:\n<p>i.  Serialize the sending ApplicationEvent to be sent to EventHub into bytes.</p>\n<p>ii. If complex serialization logic is involved (for example: multiple types of data) - add a Hint using the <xref href=\"Microsoft.Azure.EventHubs.EventData.Properties\" data-throw-if-not-resolved=\"false\"></xref> for the Consumer.</p>\n"
  example:
  - >
    Sample Code:

    <pre><code>EventData eventData = new EventData(new ArraySegment&lt;byte&gt;(eventBytes, offset, count));

    var applicationProperties = new Dictionary&lt;string, string&gt;();

    applicationProperties["eventType"] = "com.microsoft.azure.monitoring.EtlEvent";

    eventData.Properties(applicationProperties);

    await partitionSender.SendAsync(eventData);</code></pre>
  syntax:
    content: public EventData(ArraySegment<byte> arraySegment)
    content.vb: Public Sub New(arraySegment As ArraySegment(Of Byte))
    parameters:
    - id: arraySegment
      type: ArraySegment{System.Byte}
      description: The payload bytes, offset and length to be sent to the EventHub.
  overload: Microsoft.Azure.EventHubs.EventData.#ctor*
  nameWithType.vb: EventData.EventData(ArraySegment(Of Byte))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.EventHubs.EventData.EventData(ArraySegment(Of System.Byte))
  name.vb: EventData(ArraySegment(Of Byte))
- uid: Microsoft.Azure.EventHubs.EventData.Body
  commentId: P:Microsoft.Azure.EventHubs.EventData.Body
  id: Body
  parent: Microsoft.Azure.EventHubs.EventData
  langs:
  - csharp
  - vb
  name: Body
  nameWithType: EventData.Body
  fullName: Microsoft.Azure.EventHubs.EventData.Body
  type: Property
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/EventData.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: Body
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/EventData.cs
    startLine: 60
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  summary: "\nGet the actual Payload/Data wrapped by EventData.\nThis is intended to be used after receiving EventData using <xref href=\"Microsoft.Azure.EventHubs.PartitionReceiver\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ArraySegment<byte> Body { get; }
    content.vb: Public ReadOnly Property Body As ArraySegment(Of Byte)
    parameters: []
    return:
      type: ArraySegment{System.Byte}
  overload: Microsoft.Azure.EventHubs.EventData.Body*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.EventHubs.EventData.Properties
  commentId: P:Microsoft.Azure.EventHubs.EventData.Properties
  id: Properties
  parent: Microsoft.Azure.EventHubs.EventData
  langs:
  - csharp
  - vb
  name: Properties
  nameWithType: EventData.Properties
  fullName: Microsoft.Azure.EventHubs.EventData.Properties
  type: Property
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/EventData.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: Properties
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/EventData.cs
    startLine: 68
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  summary: "\nApplication property bag\n"
  example: []
  syntax:
    content: public IDictionary<string, object> Properties { get; set; }
    content.vb: Public Property Properties As IDictionary(Of String, Object)
    parameters: []
    return:
      type: IDictionary{System.String,System.Object}
  overload: Microsoft.Azure.EventHubs.EventData.Properties*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.EventHubs.EventData.SystemProperties
  commentId: P:Microsoft.Azure.EventHubs.EventData.SystemProperties
  id: SystemProperties
  parent: Microsoft.Azure.EventHubs.EventData
  langs:
  - csharp
  - vb
  name: SystemProperties
  nameWithType: EventData.SystemProperties
  fullName: Microsoft.Azure.EventHubs.EventData.SystemProperties
  type: Property
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/EventData.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: SystemProperties
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/EventData.cs
    startLine: 77
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  summary: "\nSystemProperties that are populated by EventHubService.\nAs these are populated by Service, they are only present on a Received EventData.\n"
  example: []
  syntax:
    content: public EventData.SystemPropertiesCollection SystemProperties { get; }
    content.vb: Public ReadOnly Property SystemProperties As EventData.SystemPropertiesCollection
    parameters: []
    return:
      type: Microsoft.Azure.EventHubs.EventData.SystemPropertiesCollection
  overload: Microsoft.Azure.EventHubs.EventData.SystemProperties*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Microsoft.Azure.EventHubs
  commentId: N:Microsoft.Azure.EventHubs
  isExternal: false
  name: Microsoft.Azure.EventHubs
  nameWithType: Microsoft.Azure.EventHubs
  fullName: Microsoft.Azure.EventHubs
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Azure.EventHubs.EventData.Properties
  commentId: P:Microsoft.Azure.EventHubs.EventData.Properties
- uid: Microsoft.Azure.EventHubs.EventData.#ctor*
  commentId: Overload:Microsoft.Azure.EventHubs.EventData.#ctor
  isExternal: false
  name: EventData
  nameWithType: EventData.EventData
  fullName: Microsoft.Azure.EventHubs.EventData.EventData
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: ArraySegment{System.Byte}
  commentId: '!:ArraySegment{System.Byte}'
  definition: ArraySegment`1
  name: ArraySegment<Byte>
  nameWithType: ArraySegment<Byte>
  fullName: ArraySegment<System.Byte>
  nameWithType.vb: ArraySegment(Of Byte)
  fullname.vb: ArraySegment(Of System.Byte)
  name.vb: ArraySegment(Of Byte)
  spec.csharp:
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ArraySegment`1
  isExternal: true
  name: ArraySegment<>
  nameWithType: ArraySegment<>
  fullName: ArraySegment<>
  nameWithType.vb: ArraySegment(Of )
  fullname.vb: ArraySegment(Of )
  name.vb: ArraySegment(Of )
  spec.csharp:
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.EventHubs.PartitionReceiver
  commentId: T:Microsoft.Azure.EventHubs.PartitionReceiver
  parent: Microsoft.Azure.EventHubs
  isExternal: false
  name: PartitionReceiver
  nameWithType: PartitionReceiver
  fullName: Microsoft.Azure.EventHubs.PartitionReceiver
- uid: Microsoft.Azure.EventHubs.EventData.Body*
  commentId: Overload:Microsoft.Azure.EventHubs.EventData.Body
  isExternal: false
  name: Body
  nameWithType: EventData.Body
  fullName: Microsoft.Azure.EventHubs.EventData.Body
- uid: Microsoft.Azure.EventHubs.EventData.Properties*
  commentId: Overload:Microsoft.Azure.EventHubs.EventData.Properties
  isExternal: false
  name: Properties
  nameWithType: EventData.Properties
  fullName: Microsoft.Azure.EventHubs.EventData.Properties
- uid: IDictionary{System.String,System.Object}
  commentId: '!:IDictionary{System.String,System.Object}'
  definition: IDictionary`2
  name: IDictionary<String, Object>
  nameWithType: IDictionary<String, Object>
  fullName: IDictionary<System.String, System.Object>
  nameWithType.vb: IDictionary(Of String, Object)
  fullname.vb: IDictionary(Of System.String, System.Object)
  name.vb: IDictionary(Of String, Object)
  spec.csharp:
  - uid: IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IDictionary`2
  commentId: '!:IDictionary`2'
  isExternal: true
  name: IDictionary<, >
  nameWithType: IDictionary<, >
  fullName: IDictionary<, >
  nameWithType.vb: IDictionary(Of , )
  fullname.vb: IDictionary(Of , )
  name.vb: IDictionary(Of , )
  spec.csharp:
  - uid: IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.EventHubs.EventData.SystemProperties*
  commentId: Overload:Microsoft.Azure.EventHubs.EventData.SystemProperties
  isExternal: false
  name: SystemProperties
  nameWithType: EventData.SystemProperties
  fullName: Microsoft.Azure.EventHubs.EventData.SystemProperties
- uid: Microsoft.Azure.EventHubs.EventData.SystemPropertiesCollection
  commentId: T:Microsoft.Azure.EventHubs.EventData.SystemPropertiesCollection
  parent: Microsoft.Azure.EventHubs
  isExternal: false
  name: EventData.SystemPropertiesCollection
  nameWithType: EventData.SystemPropertiesCollection
  fullName: Microsoft.Azure.EventHubs.EventData.SystemPropertiesCollection
