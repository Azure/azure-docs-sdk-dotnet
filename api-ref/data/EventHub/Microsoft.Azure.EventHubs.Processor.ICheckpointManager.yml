### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.EventHubs.Processor.ICheckpointManager
  commentId: T:Microsoft.Azure.EventHubs.Processor.ICheckpointManager
  id: ICheckpointManager
  parent: Microsoft.Azure.EventHubs.Processor
  children:
  - Microsoft.Azure.EventHubs.Processor.ICheckpointManager.CheckpointStoreExistsAsync
  - Microsoft.Azure.EventHubs.Processor.ICheckpointManager.CreateCheckpointIfNotExistsAsync(System.String)
  - Microsoft.Azure.EventHubs.Processor.ICheckpointManager.CreateCheckpointStoreIfNotExistsAsync
  - Microsoft.Azure.EventHubs.Processor.ICheckpointManager.DeleteCheckpointAsync(System.String)
  - Microsoft.Azure.EventHubs.Processor.ICheckpointManager.GetCheckpointAsync(System.String)
  - Microsoft.Azure.EventHubs.Processor.ICheckpointManager.UpdateCheckpointAsync(Microsoft.Azure.EventHubs.Processor.Checkpoint)
  langs:
  - csharp
  - vb
  name: ICheckpointManager
  nameWithType: ICheckpointManager
  fullName: Microsoft.Azure.EventHubs.Processor.ICheckpointManager
  type: Interface
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/ICheckpointManager.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: ICheckpointManager
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/ICheckpointManager.cs
    startLine: 18
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  summary: "\nIf you wish to have EventProcessorHost store checkpoints somewhere other than Azure Storage,\nyou can write your own checkpoint manager using this interface.  \n\n<p>The Azure Storage managers use the same storage for both lease and checkpoints, so both\ninterfaces are implemented by the same class. You are free to do the same thing if you have\na unified store for both types of data.</p>\n\n<p>This interface does not specify initialization methods because we have no way of knowing what\ninformation your implementation will require.</p>\n"
  example: []
  syntax:
    content: public interface ICheckpointManager
    content.vb: Public Interface ICheckpointManager
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.Azure.EventHubs.Processor.ICheckpointManager.CheckpointStoreExistsAsync
  commentId: M:Microsoft.Azure.EventHubs.Processor.ICheckpointManager.CheckpointStoreExistsAsync
  id: CheckpointStoreExistsAsync
  parent: Microsoft.Azure.EventHubs.Processor.ICheckpointManager
  langs:
  - csharp
  - vb
  name: CheckpointStoreExistsAsync()
  nameWithType: ICheckpointManager.CheckpointStoreExistsAsync()
  fullName: Microsoft.Azure.EventHubs.Processor.ICheckpointManager.CheckpointStoreExistsAsync()
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/ICheckpointManager.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: CheckpointStoreExistsAsync
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/ICheckpointManager.cs
    startLine: 24
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  summary: "\nDoes the checkpoint store exist?\n"
  example: []
  syntax:
    content: Task<bool> CheckpointStoreExistsAsync()
    content.vb: Function CheckpointStoreExistsAsync As Task(Of Boolean)
    return:
      type: Task{System.Boolean}
      description: true if it exists, false if not
  overload: Microsoft.Azure.EventHubs.Processor.ICheckpointManager.CheckpointStoreExistsAsync*
- uid: Microsoft.Azure.EventHubs.Processor.ICheckpointManager.CreateCheckpointStoreIfNotExistsAsync
  commentId: M:Microsoft.Azure.EventHubs.Processor.ICheckpointManager.CreateCheckpointStoreIfNotExistsAsync
  id: CreateCheckpointStoreIfNotExistsAsync
  parent: Microsoft.Azure.EventHubs.Processor.ICheckpointManager
  langs:
  - csharp
  - vb
  name: CreateCheckpointStoreIfNotExistsAsync()
  nameWithType: ICheckpointManager.CreateCheckpointStoreIfNotExistsAsync()
  fullName: Microsoft.Azure.EventHubs.Processor.ICheckpointManager.CreateCheckpointStoreIfNotExistsAsync()
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/ICheckpointManager.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: CreateCheckpointStoreIfNotExistsAsync
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/ICheckpointManager.cs
    startLine: 30
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  summary: "\nCreate the checkpoint store if it doesn't exist. Do nothing if it does exist.\n"
  example: []
  syntax:
    content: Task<bool> CreateCheckpointStoreIfNotExistsAsync()
    content.vb: Function CreateCheckpointStoreIfNotExistsAsync As Task(Of Boolean)
    return:
      type: Task{System.Boolean}
      description: true if the checkpoint store already exists or was created OK, false if there was a failure
  overload: Microsoft.Azure.EventHubs.Processor.ICheckpointManager.CreateCheckpointStoreIfNotExistsAsync*
- uid: Microsoft.Azure.EventHubs.Processor.ICheckpointManager.GetCheckpointAsync(System.String)
  commentId: M:Microsoft.Azure.EventHubs.Processor.ICheckpointManager.GetCheckpointAsync(System.String)
  id: GetCheckpointAsync(System.String)
  parent: Microsoft.Azure.EventHubs.Processor.ICheckpointManager
  langs:
  - csharp
  - vb
  name: GetCheckpointAsync(String)
  nameWithType: ICheckpointManager.GetCheckpointAsync(String)
  fullName: Microsoft.Azure.EventHubs.Processor.ICheckpointManager.GetCheckpointAsync(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/ICheckpointManager.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: GetCheckpointAsync
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/ICheckpointManager.cs
    startLine: 38
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  summary: "\nGet the checkpoint data associated with the given partition. Could return null if no checkpoint has\nbeen created for that partition.\n"
  example: []
  syntax:
    content: Task<Checkpoint> GetCheckpointAsync(string partitionId)
    content.vb: Function GetCheckpointAsync(partitionId As String) As Task(Of Checkpoint)
    parameters:
    - id: partitionId
      type: System.String
      description: Id of partition to get checkpoint info for.
    return:
      type: Task{Microsoft.Azure.EventHubs.Processor.Checkpoint}
      description: Checkpoint info for the given partition, or null if none has been previously stored.
  overload: Microsoft.Azure.EventHubs.Processor.ICheckpointManager.GetCheckpointAsync*
- uid: Microsoft.Azure.EventHubs.Processor.ICheckpointManager.CreateCheckpointIfNotExistsAsync(System.String)
  commentId: M:Microsoft.Azure.EventHubs.Processor.ICheckpointManager.CreateCheckpointIfNotExistsAsync(System.String)
  id: CreateCheckpointIfNotExistsAsync(System.String)
  parent: Microsoft.Azure.EventHubs.Processor.ICheckpointManager
  langs:
  - csharp
  - vb
  name: CreateCheckpointIfNotExistsAsync(String)
  nameWithType: ICheckpointManager.CreateCheckpointIfNotExistsAsync(String)
  fullName: Microsoft.Azure.EventHubs.Processor.ICheckpointManager.CreateCheckpointIfNotExistsAsync(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/ICheckpointManager.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: CreateCheckpointIfNotExistsAsync
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/ICheckpointManager.cs
    startLine: 46
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  summary: "\nCreate the checkpoint for the given partition if it doesn't exist. Do nothing if it does exist.\nThe offset/sequenceNumber for a freshly-created checkpoint should be set to StartOfStream/0.\n"
  example: []
  syntax:
    content: Task<Checkpoint> CreateCheckpointIfNotExistsAsync(string partitionId)
    content.vb: Function CreateCheckpointIfNotExistsAsync(partitionId As String) As Task(Of Checkpoint)
    parameters:
    - id: partitionId
      type: System.String
      description: Id of partition to create the checkpoint for.
    return:
      type: Task{Microsoft.Azure.EventHubs.Processor.Checkpoint}
      description: The checkpoint for the given partition, whether newly created or already existing.
  overload: Microsoft.Azure.EventHubs.Processor.ICheckpointManager.CreateCheckpointIfNotExistsAsync*
- uid: Microsoft.Azure.EventHubs.Processor.ICheckpointManager.UpdateCheckpointAsync(Microsoft.Azure.EventHubs.Processor.Checkpoint)
  commentId: M:Microsoft.Azure.EventHubs.Processor.ICheckpointManager.UpdateCheckpointAsync(Microsoft.Azure.EventHubs.Processor.Checkpoint)
  id: UpdateCheckpointAsync(Microsoft.Azure.EventHubs.Processor.Checkpoint)
  parent: Microsoft.Azure.EventHubs.Processor.ICheckpointManager
  langs:
  - csharp
  - vb
  name: UpdateCheckpointAsync(Checkpoint)
  nameWithType: ICheckpointManager.UpdateCheckpointAsync(Checkpoint)
  fullName: Microsoft.Azure.EventHubs.Processor.ICheckpointManager.UpdateCheckpointAsync(Microsoft.Azure.EventHubs.Processor.Checkpoint)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/ICheckpointManager.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: UpdateCheckpointAsync
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/ICheckpointManager.cs
    startLine: 52
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  summary: "\nUpdate the checkpoint in the store with the offset/sequenceNumber in the provided checkpoint.\n"
  example: []
  syntax:
    content: Task UpdateCheckpointAsync(Checkpoint checkpoint)
    content.vb: Function UpdateCheckpointAsync(checkpoint As Checkpoint) As Task
    parameters:
    - id: checkpoint
      type: Microsoft.Azure.EventHubs.Processor.Checkpoint
      description: offset/sequeceNumber to update the store with.
    return:
      type: Task
  overload: Microsoft.Azure.EventHubs.Processor.ICheckpointManager.UpdateCheckpointAsync*
- uid: Microsoft.Azure.EventHubs.Processor.ICheckpointManager.DeleteCheckpointAsync(System.String)
  commentId: M:Microsoft.Azure.EventHubs.Processor.ICheckpointManager.DeleteCheckpointAsync(System.String)
  id: DeleteCheckpointAsync(System.String)
  parent: Microsoft.Azure.EventHubs.Processor.ICheckpointManager
  langs:
  - csharp
  - vb
  name: DeleteCheckpointAsync(String)
  nameWithType: ICheckpointManager.DeleteCheckpointAsync(String)
  fullName: Microsoft.Azure.EventHubs.Processor.ICheckpointManager.DeleteCheckpointAsync(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/ICheckpointManager.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: DeleteCheckpointAsync
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/ICheckpointManager.cs
    startLine: 60
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  summary: "\nDelete the stored checkpoint for the given partition. If there is no stored checkpoint for the\ngiven partition, that is treated as success.\n"
  example: []
  syntax:
    content: Task DeleteCheckpointAsync(string partitionId)
    content.vb: Function DeleteCheckpointAsync(partitionId As String) As Task
    parameters:
    - id: partitionId
      type: System.String
      description: id of partition to delete checkpoint from store
    return:
      type: Task
      description: ''
  overload: Microsoft.Azure.EventHubs.Processor.ICheckpointManager.DeleteCheckpointAsync*
references:
- uid: Microsoft.Azure.EventHubs.Processor
  commentId: N:Microsoft.Azure.EventHubs.Processor
  isExternal: false
  name: Microsoft.Azure.EventHubs.Processor
  nameWithType: Microsoft.Azure.EventHubs.Processor
  fullName: Microsoft.Azure.EventHubs.Processor
- uid: Microsoft.Azure.EventHubs.Processor.ICheckpointManager.CheckpointStoreExistsAsync*
  commentId: Overload:Microsoft.Azure.EventHubs.Processor.ICheckpointManager.CheckpointStoreExistsAsync
  isExternal: false
  name: CheckpointStoreExistsAsync
  nameWithType: ICheckpointManager.CheckpointStoreExistsAsync
  fullName: Microsoft.Azure.EventHubs.Processor.ICheckpointManager.CheckpointStoreExistsAsync
- uid: Task{System.Boolean}
  commentId: '!:Task{System.Boolean}'
  definition: Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullname.vb: Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullname.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.EventHubs.Processor.ICheckpointManager.CreateCheckpointStoreIfNotExistsAsync*
  commentId: Overload:Microsoft.Azure.EventHubs.Processor.ICheckpointManager.CreateCheckpointStoreIfNotExistsAsync
  isExternal: false
  name: CreateCheckpointStoreIfNotExistsAsync
  nameWithType: ICheckpointManager.CreateCheckpointStoreIfNotExistsAsync
  fullName: Microsoft.Azure.EventHubs.Processor.ICheckpointManager.CreateCheckpointStoreIfNotExistsAsync
- uid: Microsoft.Azure.EventHubs.Processor.ICheckpointManager.GetCheckpointAsync*
  commentId: Overload:Microsoft.Azure.EventHubs.Processor.ICheckpointManager.GetCheckpointAsync
  isExternal: false
  name: GetCheckpointAsync
  nameWithType: ICheckpointManager.GetCheckpointAsync
  fullName: Microsoft.Azure.EventHubs.Processor.ICheckpointManager.GetCheckpointAsync
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Task{Microsoft.Azure.EventHubs.Processor.Checkpoint}
  commentId: '!:Task{Microsoft.Azure.EventHubs.Processor.Checkpoint}'
  definition: Task`1
  name: Task<Checkpoint>
  nameWithType: Task<Checkpoint>
  fullName: Task<Microsoft.Azure.EventHubs.Processor.Checkpoint>
  nameWithType.vb: Task(Of Checkpoint)
  fullname.vb: Task(Of Microsoft.Azure.EventHubs.Processor.Checkpoint)
  name.vb: Task(Of Checkpoint)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.EventHubs.Processor.Checkpoint
    name: Checkpoint
    nameWithType: Checkpoint
    fullName: Microsoft.Azure.EventHubs.Processor.Checkpoint
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.EventHubs.Processor.Checkpoint
    name: Checkpoint
    nameWithType: Checkpoint
    fullName: Microsoft.Azure.EventHubs.Processor.Checkpoint
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.EventHubs.Processor.ICheckpointManager.CreateCheckpointIfNotExistsAsync*
  commentId: Overload:Microsoft.Azure.EventHubs.Processor.ICheckpointManager.CreateCheckpointIfNotExistsAsync
  isExternal: false
  name: CreateCheckpointIfNotExistsAsync
  nameWithType: ICheckpointManager.CreateCheckpointIfNotExistsAsync
  fullName: Microsoft.Azure.EventHubs.Processor.ICheckpointManager.CreateCheckpointIfNotExistsAsync
- uid: Microsoft.Azure.EventHubs.Processor.ICheckpointManager.UpdateCheckpointAsync*
  commentId: Overload:Microsoft.Azure.EventHubs.Processor.ICheckpointManager.UpdateCheckpointAsync
  isExternal: false
  name: UpdateCheckpointAsync
  nameWithType: ICheckpointManager.UpdateCheckpointAsync
  fullName: Microsoft.Azure.EventHubs.Processor.ICheckpointManager.UpdateCheckpointAsync
- uid: Microsoft.Azure.EventHubs.Processor.Checkpoint
  commentId: T:Microsoft.Azure.EventHubs.Processor.Checkpoint
  parent: Microsoft.Azure.EventHubs.Processor
  isExternal: false
  name: Checkpoint
  nameWithType: Checkpoint
  fullName: Microsoft.Azure.EventHubs.Processor.Checkpoint
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Microsoft.Azure.EventHubs.Processor.ICheckpointManager.DeleteCheckpointAsync*
  commentId: Overload:Microsoft.Azure.EventHubs.Processor.ICheckpointManager.DeleteCheckpointAsync
  isExternal: false
  name: DeleteCheckpointAsync
  nameWithType: ICheckpointManager.DeleteCheckpointAsync
  fullName: Microsoft.Azure.EventHubs.Processor.ICheckpointManager.DeleteCheckpointAsync
