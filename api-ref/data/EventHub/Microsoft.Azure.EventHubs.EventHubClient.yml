### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.EventHubs.EventHubClient
  commentId: T:Microsoft.Azure.EventHubs.EventHubClient
  id: EventHubClient
  parent: Microsoft.Azure.EventHubs
  children:
  - Microsoft.Azure.EventHubs.EventHubClient.CloseAsync
  - Microsoft.Azure.EventHubs.EventHubClient.CreateEpochReceiver(System.String,System.String,DateTime,System.Int64)
  - Microsoft.Azure.EventHubs.EventHubClient.CreateEpochReceiver(System.String,System.String,System.String,System.Boolean,System.Int64)
  - Microsoft.Azure.EventHubs.EventHubClient.CreateEpochReceiver(System.String,System.String,System.String,System.Int64)
  - Microsoft.Azure.EventHubs.EventHubClient.CreateFromConnectionString(System.String)
  - Microsoft.Azure.EventHubs.EventHubClient.CreatePartitionSender(System.String)
  - Microsoft.Azure.EventHubs.EventHubClient.CreateReceiver(System.String,System.String,DateTime)
  - Microsoft.Azure.EventHubs.EventHubClient.CreateReceiver(System.String,System.String,System.String)
  - Microsoft.Azure.EventHubs.EventHubClient.CreateReceiver(System.String,System.String,System.String,System.Boolean)
  - Microsoft.Azure.EventHubs.EventHubClient.EventHubName
  - Microsoft.Azure.EventHubs.EventHubClient.GetPartitionRuntimeInformationAsync(System.String)
  - Microsoft.Azure.EventHubs.EventHubClient.GetRuntimeInformationAsync
  - Microsoft.Azure.EventHubs.EventHubClient.OnCloseAsync
  - Microsoft.Azure.EventHubs.EventHubClient.OnCreateReceiver(System.String,System.String,System.String,System.Boolean,System.Nullable{DateTime},System.Nullable{System.Int64})
  - Microsoft.Azure.EventHubs.EventHubClient.OnGetPartitionRuntimeInformationAsync(System.String)
  - Microsoft.Azure.EventHubs.EventHubClient.OnGetRuntimeInformationAsync
  - Microsoft.Azure.EventHubs.EventHubClient.SendAsync(IEnumerable{Microsoft.Azure.EventHubs.EventData})
  - Microsoft.Azure.EventHubs.EventHubClient.SendAsync(IEnumerable{Microsoft.Azure.EventHubs.EventData},System.String)
  - Microsoft.Azure.EventHubs.EventHubClient.SendAsync(Microsoft.Azure.EventHubs.EventData)
  - Microsoft.Azure.EventHubs.EventHubClient.SendAsync(Microsoft.Azure.EventHubs.EventData,System.String)
  - Microsoft.Azure.EventHubs.EventHubClient.ThisLock
  langs:
  - csharp
  - vb
  name: EventHubClient
  nameWithType: EventHubClient
  fullName: Microsoft.Azure.EventHubs.EventHubClient
  type: Class
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/EventHubClient.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: EventHubClient
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/EventHubClient.cs
    startLine: 14
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  summary: "\nAnchor class - all EventHub client operations start here.\nSee <see cref=\"!:EventHubClient.Create(string)\"></see>\n"
  example: []
  syntax:
    content: 'public abstract class EventHubClient : ClientEntity'
    content.vb: >-
      Public MustInherit Class EventHubClient
          Inherits ClientEntity
  inheritance:
  - System.Object
  - Microsoft.Azure.EventHubs.ClientEntity
  inheritedMembers:
  - Microsoft.Azure.EventHubs.ClientEntity.ClientId
  - Microsoft.Azure.EventHubs.ClientEntity.RetryPolicy
  - Microsoft.Azure.EventHubs.ClientEntity.Close
  - Microsoft.Azure.EventHubs.ClientEntity.GetNextId
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.Azure.EventHubs.EventHubClient.EventHubName
  commentId: P:Microsoft.Azure.EventHubs.EventHubClient.EventHubName
  id: EventHubName
  parent: Microsoft.Azure.EventHubs.EventHubClient
  langs:
  - csharp
  - vb
  name: EventHubName
  nameWithType: EventHubClient.EventHubName
  fullName: Microsoft.Azure.EventHubs.EventHubClient.EventHubName
  type: Property
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/EventHubClient.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: EventHubName
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/EventHubClient.cs
    startLine: 26
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  syntax:
    content: public string EventHubName { get; }
    content.vb: Public ReadOnly Property EventHubName As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.EventHubs.EventHubClient.EventHubName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.EventHubs.EventHubClient.ThisLock
  commentId: P:Microsoft.Azure.EventHubs.EventHubClient.ThisLock
  id: ThisLock
  parent: Microsoft.Azure.EventHubs.EventHubClient
  langs:
  - csharp
  - vb
  name: ThisLock
  nameWithType: EventHubClient.ThisLock
  fullName: Microsoft.Azure.EventHubs.EventHubClient.ThisLock
  type: Property
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/EventHubClient.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: ThisLock
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/EventHubClient.cs
    startLine: 30
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  syntax:
    content: protected object ThisLock { get; }
    content.vb: Protected ReadOnly Property ThisLock As Object
    parameters: []
    return:
      type: System.Object
  overload: Microsoft.Azure.EventHubs.EventHubClient.ThisLock*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Microsoft.Azure.EventHubs.EventHubClient.CreateFromConnectionString(System.String)
  commentId: M:Microsoft.Azure.EventHubs.EventHubClient.CreateFromConnectionString(System.String)
  id: CreateFromConnectionString(System.String)
  parent: Microsoft.Azure.EventHubs.EventHubClient
  langs:
  - csharp
  - vb
  name: CreateFromConnectionString(String)
  nameWithType: EventHubClient.CreateFromConnectionString(String)
  fullName: Microsoft.Azure.EventHubs.EventHubClient.CreateFromConnectionString(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/EventHubClient.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: CreateFromConnectionString
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/EventHubClient.cs
    startLine: 51
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  syntax:
    content: public static EventHubClient CreateFromConnectionString(string connectionString)
    content.vb: Public Shared Function CreateFromConnectionString(connectionString As String) As EventHubClient
    parameters:
    - id: connectionString
      type: System.String
    return:
      type: Microsoft.Azure.EventHubs.EventHubClient
  overload: Microsoft.Azure.EventHubs.EventHubClient.CreateFromConnectionString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Azure.EventHubs.EventHubClient.CloseAsync
  commentId: M:Microsoft.Azure.EventHubs.EventHubClient.CloseAsync
  id: CloseAsync
  parent: Microsoft.Azure.EventHubs.EventHubClient
  langs:
  - csharp
  - vb
  name: CloseAsync()
  nameWithType: EventHubClient.CloseAsync()
  fullName: Microsoft.Azure.EventHubs.EventHubClient.CloseAsync()
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/EventHubClient.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: CloseAsync
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/EventHubClient.cs
    startLine: 75
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  syntax:
    content: public override sealed Task CloseAsync()
    content.vb: Public NotOverridable Overrides Function CloseAsync As Task
    return:
      type: Task
  overridden: Microsoft.Azure.EventHubs.ClientEntity.CloseAsync
  overload: Microsoft.Azure.EventHubs.EventHubClient.CloseAsync*
  modifiers.csharp:
  - public
  - override
  - sealed
  modifiers.vb:
  - Public
  - Overrides
  - NotOverridable
- uid: Microsoft.Azure.EventHubs.EventHubClient.SendAsync(Microsoft.Azure.EventHubs.EventData)
  commentId: M:Microsoft.Azure.EventHubs.EventHubClient.SendAsync(Microsoft.Azure.EventHubs.EventData)
  id: SendAsync(Microsoft.Azure.EventHubs.EventData)
  parent: Microsoft.Azure.EventHubs.EventHubClient
  langs:
  - csharp
  - vb
  name: SendAsync(EventData)
  nameWithType: EventHubClient.SendAsync(EventData)
  fullName: Microsoft.Azure.EventHubs.EventHubClient.SendAsync(Microsoft.Azure.EventHubs.EventData)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/EventHubClient.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: SendAsync
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/EventHubClient.cs
    startLine: 106
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  summary: "\nSend <xref href=\"Microsoft.Azure.EventHubs.EventData\" data-throw-if-not-resolved=\"false\"></xref> to EventHub. The sent EventData will land on any arbitrarily chosen EventHubs partition.\n<p>There are 3 ways to send to EventHubs, each exposed as a method (along with its sendBatch overload):</p>\n<p>i.    <xref href=\"Microsoft.Azure.EventHubs.EventHubClient.SendAsync(Microsoft.Azure.EventHubs.EventData)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Azure.EventHubs.EventHubClient.SendAsync(IEnumerable%7bMicrosoft.Azure.EventHubs.EventData%7d)\" data-throw-if-not-resolved=\"false\"></xref></p>\n<p>ii.   <xref href=\"Microsoft.Azure.EventHubs.EventHubClient.SendAsync(Microsoft.Azure.EventHubs.EventData%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Azure.EventHubs.EventHubClient.SendAsync(IEnumerable%7bMicrosoft.Azure.EventHubs.EventData%7d%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref></p>\n<p>iii.  <xref href=\"Microsoft.Azure.EventHubs.PartitionSender.SendAsync(Microsoft.Azure.EventHubs.EventData)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Azure.EventHubs.PartitionSender.SendAsync(IEnumerable%7bMicrosoft.Azure.EventHubs.EventData%7d)\" data-throw-if-not-resolved=\"false\"></xref></p>\nUse this method to send if:\n<p>a) the <xref href=\"Microsoft.Azure.EventHubs.EventHubClient.SendAsync(Microsoft.Azure.EventHubs.EventData)\" data-throw-if-not-resolved=\"false\"></xref> operation should be highly available and</p>\n<p>b) the data needs to be evenly distributed among all partitions; exception being, when a subset of partitions are unavailable</p>\n<xref href=\"Microsoft.Azure.EventHubs.EventHubClient.SendAsync(Microsoft.Azure.EventHubs.EventData)\" data-throw-if-not-resolved=\"false\"></xref> sends the <xref href=\"Microsoft.Azure.EventHubs.EventData\" data-throw-if-not-resolved=\"false\"></xref> to a Service Gateway, which in-turn will forward the EventData to one of the EventHub's partitions.\nHere's the message forwarding algorithm:\n<p>i.  Forward the EventDatas to EventHub partitions, by equally distributing the data among all partitions (ex: Round-robin the EventDatas to all EventHub partitions) </p>\n<p>ii. If one of the EventHub partitions is unavailable for a moment, the Service Gateway will automatically detect it and forward the message to another available partition - making the send operation highly-available.</p>\n"
  example: []
  syntax:
    content: public Task SendAsync(EventData eventData)
    content.vb: Public Function SendAsync(eventData As EventData) As Task
    parameters:
    - id: eventData
      type: Microsoft.Azure.EventHubs.EventData
      description: the <xref href="Microsoft.Azure.EventHubs.EventData" data-throw-if-not-resolved="false"></xref> to be sent.
    return:
      type: Task
      description: A Task that completes when the send operations is done.
  overload: Microsoft.Azure.EventHubs.EventHubClient.SendAsync*
  seealso:
  - linkId: Microsoft.Azure.EventHubs.EventHubClient.SendAsync(Microsoft.Azure.EventHubs.EventData,System.String)
    commentId: M:Microsoft.Azure.EventHubs.EventHubClient.SendAsync(Microsoft.Azure.EventHubs.EventData,System.String)
  - linkId: Microsoft.Azure.EventHubs.PartitionSender.SendAsync(Microsoft.Azure.EventHubs.EventData)
    commentId: M:Microsoft.Azure.EventHubs.PartitionSender.SendAsync(Microsoft.Azure.EventHubs.EventData)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.EventHubs.EventHubClient.SendAsync(IEnumerable{Microsoft.Azure.EventHubs.EventData})
  commentId: M:Microsoft.Azure.EventHubs.EventHubClient.SendAsync(IEnumerable{Microsoft.Azure.EventHubs.EventData})
  id: SendAsync(IEnumerable{Microsoft.Azure.EventHubs.EventData})
  parent: Microsoft.Azure.EventHubs.EventHubClient
  langs:
  - csharp
  - vb
  name: SendAsync(IEnumerable<EventData>)
  nameWithType: EventHubClient.SendAsync(IEnumerable<EventData>)
  fullName: Microsoft.Azure.EventHubs.EventHubClient.SendAsync(IEnumerable<Microsoft.Azure.EventHubs.EventData>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/EventHubClient.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: SendAsync
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/EventHubClient.cs
    startLine: 154
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  summary: "\nSend a batch of <xref href=\"Microsoft.Azure.EventHubs.EventData\" data-throw-if-not-resolved=\"false\"></xref> to EventHub. The sent EventData will land on any arbitrarily chosen EventHub partition.\nThis is the most recommended way to send to EventHub.\n\n<p>There are 3 ways to send to EventHubs, to understand this particular type of send refer to the overload <xref href=\"Microsoft.Azure.EventHubs.EventHubClient.SendAsync(Microsoft.Azure.EventHubs.EventData)\" data-throw-if-not-resolved=\"false\"></xref>, which is used to send single <xref href=\"Microsoft.Azure.EventHubs.EventData\" data-throw-if-not-resolved=\"false\"></xref>.\nUse this overload if you need to send a batch of <xref href=\"Microsoft.Azure.EventHubs.EventData\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n\nSending a batch of <xref href=\"Microsoft.Azure.EventHubs.EventData\" data-throw-if-not-resolved=\"false\"></xref>'s is useful in the following cases:\n<p>i.    Efficient send - sending a batch of <xref href=\"Microsoft.Azure.EventHubs.EventData\" data-throw-if-not-resolved=\"false\"></xref> maximizes the overall throughput by optimally using the number of sessions created to EventHub's service.</p>\n<p>ii.   Send multiple <xref href=\"Microsoft.Azure.EventHubs.EventData\" data-throw-if-not-resolved=\"false\"></xref>'s in a Transaction. To acheieve ACID properties, the Gateway Service will forward all <xref href=\"Microsoft.Azure.EventHubs.EventData\" data-throw-if-not-resolved=\"false\"></xref>'s in the batch to a single EventHub partition.</p>\n"
  example:
  - "\nSample code:\n<pre><code>var client = EventHubClient.Create(\"__connectionString__\");\nwhile (true)\n{\n    var events = new List&lt;EventData&gt;();\n    for (int count = 1; count &lt; 11; count++)\n    {\n        var payload = new PayloadEvent(count);\n        byte[] payloadBytes = Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(payload));\n        var sendEvent = new EventData(payloadBytes);\n        var applicationProperties = new Dictionary&lt;string, string&gt;();\n        applicationProperties[\"from\"] = \"csharpClient\";\n        sendEvent.Properties = applicationProperties;\n        events.Add(sendEvent);\n    }\n\n    await client.SendAsync(events);\n    Console.WriteLine(\"Sent Batch... Size: {0}\", events.Count);\n}</code></pre>\n"
  syntax:
    content: public Task SendAsync(IEnumerable<EventData> eventDatas)
    content.vb: Public Function SendAsync(eventDatas As IEnumerable(Of EventData)) As Task
    parameters:
    - id: eventDatas
      type: IEnumerable{Microsoft.Azure.EventHubs.EventData}
      description: A batch of events to send to EventHub
    return:
      type: Task
      description: A Task that completes when the send operations is done.
  overload: Microsoft.Azure.EventHubs.EventHubClient.SendAsync*
  seealso:
  - linkId: Microsoft.Azure.EventHubs.EventHubClient.SendAsync(Microsoft.Azure.EventHubs.EventData,System.String)
    commentId: M:Microsoft.Azure.EventHubs.EventHubClient.SendAsync(Microsoft.Azure.EventHubs.EventData,System.String)
  - linkId: Microsoft.Azure.EventHubs.PartitionSender.SendAsync(Microsoft.Azure.EventHubs.EventData)
    commentId: M:Microsoft.Azure.EventHubs.PartitionSender.SendAsync(Microsoft.Azure.EventHubs.EventData)
  nameWithType.vb: EventHubClient.SendAsync(IEnumerable(Of EventData))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.EventHubs.EventHubClient.SendAsync(IEnumerable(Of Microsoft.Azure.EventHubs.EventData))
  name.vb: SendAsync(IEnumerable(Of EventData))
- uid: Microsoft.Azure.EventHubs.EventHubClient.SendAsync(Microsoft.Azure.EventHubs.EventData,System.String)
  commentId: M:Microsoft.Azure.EventHubs.EventHubClient.SendAsync(Microsoft.Azure.EventHubs.EventData,System.String)
  id: SendAsync(Microsoft.Azure.EventHubs.EventData,System.String)
  parent: Microsoft.Azure.EventHubs.EventHubClient
  langs:
  - csharp
  - vb
  name: SendAsync(EventData, String)
  nameWithType: EventHubClient.SendAsync(EventData, String)
  fullName: Microsoft.Azure.EventHubs.EventHubClient.SendAsync(Microsoft.Azure.EventHubs.EventData, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/EventHubClient.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: SendAsync
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/EventHubClient.cs
    startLine: 178
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  summary: "\nSends an '<xref href=\"Microsoft.Azure.EventHubs.EventData\" data-throw-if-not-resolved=\"false\"></xref> with a partitionKey to EventHub. All <xref href=\"Microsoft.Azure.EventHubs.EventData\" data-throw-if-not-resolved=\"false\"></xref>'s with a partitionKey are guaranteed to land on the same partition.\nThis send pattern emphasize data correlation over general availability and latency.\n<p>There are 3 ways to send to EventHubs, each exposed as a method (along with its batched overload):</p>\n<p>i.   <xref href=\"Microsoft.Azure.EventHubs.EventHubClient.SendAsync(Microsoft.Azure.EventHubs.EventData)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Azure.EventHubs.EventHubClient.SendAsync(IEnumerable%7bMicrosoft.Azure.EventHubs.EventData%7d)\" data-throw-if-not-resolved=\"false\"></xref></p>\n<p>ii.  <xref href=\"Microsoft.Azure.EventHubs.EventHubClient.SendAsync(Microsoft.Azure.EventHubs.EventData%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Azure.EventHubs.EventHubClient.SendAsync(IEnumerable%7bMicrosoft.Azure.EventHubs.EventData%7d%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref></p>\n<p>iii. <xref href=\"Microsoft.Azure.EventHubs.PartitionSender.SendAsync(Microsoft.Azure.EventHubs.EventData)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Azure.EventHubs.PartitionSender.SendAsync(IEnumerable%7bMicrosoft.Azure.EventHubs.EventData%7d)\" data-throw-if-not-resolved=\"false\"></xref></p>\nUse this type of send if:\n<p>a)  There is a need for correlation of events based on Sender instance; The sender can generate a UniqueId and set it as partitionKey - which on the received Message can be used for correlation</p>\n<p>b) The client wants to take control of distribution of data across partitions.</p>\nMultiple PartitionKeys could be mapped to one Partition. EventHubs service uses a proprietary Hash algorithm to map the PartitionKey to a PartitionId.\nUsing this type of send (Sending using a specific partitionKey) could sometimes result in partitions which are not evenly distributed. \n"
  example: []
  syntax:
    content: public Task SendAsync(EventData eventData, string partitionKey)
    content.vb: Public Function SendAsync(eventData As EventData, partitionKey As String) As Task
    parameters:
    - id: eventData
      type: Microsoft.Azure.EventHubs.EventData
      description: the <xref href="Microsoft.Azure.EventHubs.EventData" data-throw-if-not-resolved="false"></xref> to be sent.
    - id: partitionKey
      type: System.String
      description: the partitionKey will be hashed to determine the partitionId to send the EventData to. On the Received message this can be accessed at <see cref="!:EventData.SystemProperties.PartitionKey"></see>.
    return:
      type: Task
      description: A Task that completes when the send operation is done.
  overload: Microsoft.Azure.EventHubs.EventHubClient.SendAsync*
  seealso:
  - linkId: Microsoft.Azure.EventHubs.EventHubClient.SendAsync(Microsoft.Azure.EventHubs.EventData)
    commentId: M:Microsoft.Azure.EventHubs.EventHubClient.SendAsync(Microsoft.Azure.EventHubs.EventData)
  - linkId: Microsoft.Azure.EventHubs.PartitionSender.SendAsync(Microsoft.Azure.EventHubs.EventData)
    commentId: M:Microsoft.Azure.EventHubs.PartitionSender.SendAsync(Microsoft.Azure.EventHubs.EventData)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.EventHubs.EventHubClient.SendAsync(IEnumerable{Microsoft.Azure.EventHubs.EventData},System.String)
  commentId: M:Microsoft.Azure.EventHubs.EventHubClient.SendAsync(IEnumerable{Microsoft.Azure.EventHubs.EventData},System.String)
  id: SendAsync(IEnumerable{Microsoft.Azure.EventHubs.EventData},System.String)
  parent: Microsoft.Azure.EventHubs.EventHubClient
  langs:
  - csharp
  - vb
  name: SendAsync(IEnumerable<EventData>, String)
  nameWithType: EventHubClient.SendAsync(IEnumerable<EventData>, String)
  fullName: Microsoft.Azure.EventHubs.EventHubClient.SendAsync(IEnumerable<Microsoft.Azure.EventHubs.EventData>, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/EventHubClient.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: SendAsync
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/EventHubClient.cs
    startLine: 204
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  summary: "\nSend a 'batch of <xref href=\"Microsoft.Azure.EventHubs.EventData\" data-throw-if-not-resolved=\"false\"></xref> with the same partitionKey' to EventHub. All <xref href=\"Microsoft.Azure.EventHubs.EventData\" data-throw-if-not-resolved=\"false\"></xref>'s with a partitionKey are guaranteed to land on the same partition.\nMultiple PartitionKey's will be mapped to one Partition.\n<p>\nThere are 3 ways to send to EventHubs, to understand this particular type of send refer to the overload <xref href=\"Microsoft.Azure.EventHubs.EventHubClient.SendAsync(Microsoft.Azure.EventHubs.EventData%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref>,\nwhich is the same type of send and is used to send single <xref href=\"Microsoft.Azure.EventHubs.EventData\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\nSending a batch of <xref href=\"Microsoft.Azure.EventHubs.EventData\" data-throw-if-not-resolved=\"false\"></xref>'s is useful in the following cases:\n<p>i.    Efficient send - sending a batch of <xref href=\"Microsoft.Azure.EventHubs.EventData\" data-throw-if-not-resolved=\"false\"></xref> maximizes the overall throughput by optimally using the number of sessions created to EventHubs service.</p>\n<p>ii.   Sending multiple events in One Transaction. This is the reason why all events sent in a batch needs to have same partitionKey (so that they are sent to one partition only).</p>\n"
  example: []
  syntax:
    content: public Task SendAsync(IEnumerable<EventData> eventDatas, string partitionKey)
    content.vb: Public Function SendAsync(eventDatas As IEnumerable(Of EventData), partitionKey As String) As Task
    parameters:
    - id: eventDatas
      type: IEnumerable{Microsoft.Azure.EventHubs.EventData}
      description: the batch of events to send to EventHub
    - id: partitionKey
      type: System.String
      description: the partitionKey will be hashed to determine the partitionId to send the EventData to. On the Received message this can be accessed at <see cref="!:EventData.SystemProperties.PartitionKey"></see>.
    return:
      type: Task
      description: A Task that completes when the send operation is done.
  overload: Microsoft.Azure.EventHubs.EventHubClient.SendAsync*
  seealso:
  - linkId: Microsoft.Azure.EventHubs.EventHubClient.SendAsync(Microsoft.Azure.EventHubs.EventData)
    commentId: M:Microsoft.Azure.EventHubs.EventHubClient.SendAsync(Microsoft.Azure.EventHubs.EventData)
  see:
  - linkId: Microsoft.Azure.EventHubs.PartitionSender.SendAsync(Microsoft.Azure.EventHubs.EventData)
    commentId: M:Microsoft.Azure.EventHubs.PartitionSender.SendAsync(Microsoft.Azure.EventHubs.EventData)
  nameWithType.vb: EventHubClient.SendAsync(IEnumerable(Of EventData), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.EventHubs.EventHubClient.SendAsync(IEnumerable(Of Microsoft.Azure.EventHubs.EventData), System.String)
  name.vb: SendAsync(IEnumerable(Of EventData), String)
- uid: Microsoft.Azure.EventHubs.EventHubClient.CreatePartitionSender(System.String)
  commentId: M:Microsoft.Azure.EventHubs.EventHubClient.CreatePartitionSender(System.String)
  id: CreatePartitionSender(System.String)
  parent: Microsoft.Azure.EventHubs.EventHubClient
  langs:
  - csharp
  - vb
  name: CreatePartitionSender(String)
  nameWithType: EventHubClient.CreatePartitionSender(String)
  fullName: Microsoft.Azure.EventHubs.EventHubClient.CreatePartitionSender(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/EventHubClient.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: CreatePartitionSender
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/EventHubClient.cs
    startLine: 235
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  summary: "\nCreate a <xref href=\"Microsoft.Azure.EventHubs.PartitionSender\" data-throw-if-not-resolved=\"false\"></xref> which can publish <xref href=\"Microsoft.Azure.EventHubs.EventData\" data-throw-if-not-resolved=\"false\"></xref>'s directly to a specific EventHub partition (sender type iii. in the below list).\n<p></p>\nThere are 3 patterns/ways to send to EventHubs:\n<p>i.   <xref href=\"Microsoft.Azure.EventHubs.EventHubClient.SendAsync(Microsoft.Azure.EventHubs.EventData)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Azure.EventHubs.EventHubClient.SendAsync(IEnumerable%7bMicrosoft.Azure.EventHubs.EventData%7d)\" data-throw-if-not-resolved=\"false\"></xref></p>\n<p>ii.  <xref href=\"Microsoft.Azure.EventHubs.EventHubClient.SendAsync(Microsoft.Azure.EventHubs.EventData%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Azure.EventHubs.EventHubClient.SendAsync(IEnumerable%7bMicrosoft.Azure.EventHubs.EventData%7d%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref></p>\n<p>iii. <xref href=\"Microsoft.Azure.EventHubs.PartitionSender.SendAsync(Microsoft.Azure.EventHubs.EventData)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.Azure.EventHubs.PartitionSender.SendAsync(IEnumerable%7bMicrosoft.Azure.EventHubs.EventData%7d)\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  example: []
  syntax:
    content: public PartitionSender CreatePartitionSender(string partitionId)
    content.vb: Public Function CreatePartitionSender(partitionId As String) As PartitionSender
    parameters:
    - id: partitionId
      type: System.String
      description: partitionId of EventHub to send the <xref href="Microsoft.Azure.EventHubs.EventData" data-throw-if-not-resolved="false"></xref>'s to.
    return:
      type: Microsoft.Azure.EventHubs.PartitionSender
      description: The created PartitionSender
  overload: Microsoft.Azure.EventHubs.EventHubClient.CreatePartitionSender*
  seealso:
  - linkId: Microsoft.Azure.EventHubs.PartitionSender
    commentId: T:Microsoft.Azure.EventHubs.PartitionSender
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.EventHubs.EventHubClient.CreateReceiver(System.String,System.String,System.String)
  commentId: M:Microsoft.Azure.EventHubs.EventHubClient.CreateReceiver(System.String,System.String,System.String)
  id: CreateReceiver(System.String,System.String,System.String)
  parent: Microsoft.Azure.EventHubs.EventHubClient
  langs:
  - csharp
  - vb
  name: CreateReceiver(String, String, String)
  nameWithType: EventHubClient.CreateReceiver(String, String, String)
  fullName: Microsoft.Azure.EventHubs.EventHubClient.CreateReceiver(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/EventHubClient.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: CreateReceiver
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/EventHubClient.cs
    startLine: 257
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  summary: "\nCreate a receiver for a specific EventHub partition from the specific consumer group.\n<p></p>\nNOTE: There can be a maximum number of receivers that can run in parallel per ConsumerGroup per Partition. \nThe limit is enforced by the Event Hub service - current limit is 5 receivers in parallel. Having multiple receivers \nreading from offsets that are far apart on the same consumer group / partition combo will have significant performance Impact. \n"
  example: []
  syntax:
    content: public PartitionReceiver CreateReceiver(string consumerGroupName, string partitionId, string startingOffset)
    content.vb: Public Function CreateReceiver(consumerGroupName As String, partitionId As String, startingOffset As String) As PartitionReceiver
    parameters:
    - id: consumerGroupName
      type: System.String
      description: the consumer group name that this receiver should be grouped under.
    - id: partitionId
      type: System.String
      description: the partition Id that the receiver belongs to. All data received will be from this partition only.
    - id: startingOffset
      type: System.String
      description: the offset to start receiving the events from. To receive from start of the stream use <xref href="Microsoft.Azure.EventHubs.PartitionReceiver.StartOfStream" data-throw-if-not-resolved="false"></xref>
    return:
      type: Microsoft.Azure.EventHubs.PartitionReceiver
      description: The created PartitionReceiver
  overload: Microsoft.Azure.EventHubs.EventHubClient.CreateReceiver*
  seealso:
  - linkId: Microsoft.Azure.EventHubs.PartitionReceiver
    commentId: T:Microsoft.Azure.EventHubs.PartitionReceiver
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.EventHubs.EventHubClient.CreateReceiver(System.String,System.String,System.String,System.Boolean)
  commentId: M:Microsoft.Azure.EventHubs.EventHubClient.CreateReceiver(System.String,System.String,System.String,System.Boolean)
  id: CreateReceiver(System.String,System.String,System.String,System.Boolean)
  parent: Microsoft.Azure.EventHubs.EventHubClient
  langs:
  - csharp
  - vb
  name: CreateReceiver(String, String, String, Boolean)
  nameWithType: EventHubClient.CreateReceiver(String, String, String, Boolean)
  fullName: Microsoft.Azure.EventHubs.EventHubClient.CreateReceiver(System.String, System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/EventHubClient.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: CreateReceiver
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/EventHubClient.cs
    startLine: 273
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  summary: "\nCreate the EventHub receiver with given partition id and start receiving from the specified starting offset.\nThe receiver is created for a specific EventHub Partition from the specific consumer group.\n"
  example: []
  syntax:
    content: public PartitionReceiver CreateReceiver(string consumerGroupName, string partitionId, string startOffset, bool offsetInclusive)
    content.vb: Public Function CreateReceiver(consumerGroupName As String, partitionId As String, startOffset As String, offsetInclusive As Boolean) As PartitionReceiver
    parameters:
    - id: consumerGroupName
      type: System.String
      description: the consumer group name that this receiver should be grouped under.
    - id: partitionId
      type: System.String
      description: the partition Id that the receiver belongs to. All data received will be from this partition only.
    - id: startOffset
      type: System.String
      description: 'the offset to start receiving the events from. To receive from start of the stream use: <xref href="Microsoft.Azure.EventHubs.PartitionReceiver.StartOfStream" data-throw-if-not-resolved="false"></xref>'
    - id: offsetInclusive
      type: System.Boolean
      description: >-
        if set to true, the startingOffset is treated as an inclusive offset - meaning the first event returned is the

        one that has the starting offset. Normally first event returned is the event after the starting offset.
    return:
      type: Microsoft.Azure.EventHubs.PartitionReceiver
      description: The created PartitionReceiver
  overload: Microsoft.Azure.EventHubs.EventHubClient.CreateReceiver*
  seealso:
  - linkId: Microsoft.Azure.EventHubs.PartitionReceiver
    commentId: T:Microsoft.Azure.EventHubs.PartitionReceiver
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.EventHubs.EventHubClient.CreateReceiver(System.String,System.String,DateTime)
  commentId: M:Microsoft.Azure.EventHubs.EventHubClient.CreateReceiver(System.String,System.String,DateTime)
  id: CreateReceiver(System.String,System.String,DateTime)
  parent: Microsoft.Azure.EventHubs.EventHubClient
  langs:
  - csharp
  - vb
  name: CreateReceiver(String, String, DateTime)
  nameWithType: EventHubClient.CreateReceiver(String, String, DateTime)
  fullName: Microsoft.Azure.EventHubs.EventHubClient.CreateReceiver(System.String, System.String, DateTime)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/EventHubClient.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: CreateReceiver
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/EventHubClient.cs
    startLine: 292
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  summary: "\nCreate the EventHub receiver with given partition id and start receiving from the specified starting offset.\nThe receiver is created for a specific EventHub Partition from the specific consumer group.\n"
  example: []
  syntax:
    content: public PartitionReceiver CreateReceiver(string consumerGroupName, string partitionId, DateTime startTime)
    content.vb: Public Function CreateReceiver(consumerGroupName As String, partitionId As String, startTime As DateTime) As PartitionReceiver
    parameters:
    - id: consumerGroupName
      type: System.String
      description: the consumer group name that this receiver should be grouped under.
    - id: partitionId
      type: System.String
      description: the partition Id that the receiver belongs to. All data received will be from this partition only.
    - id: startTime
      type: DateTime
      description: the DateTime instant that receive operations will start receive events from. Events received will have <see cref="!:EventData.SystemProperties.EnqueuedTime"></see> later than this Instant.
    return:
      type: Microsoft.Azure.EventHubs.PartitionReceiver
      description: The created PartitionReceiver
  overload: Microsoft.Azure.EventHubs.EventHubClient.CreateReceiver*
  seealso:
  - linkId: Microsoft.Azure.EventHubs.PartitionReceiver
    commentId: T:Microsoft.Azure.EventHubs.PartitionReceiver
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.EventHubs.EventHubClient.CreateEpochReceiver(System.String,System.String,System.String,System.Int64)
  commentId: M:Microsoft.Azure.EventHubs.EventHubClient.CreateEpochReceiver(System.String,System.String,System.String,System.Int64)
  id: CreateEpochReceiver(System.String,System.String,System.String,System.Int64)
  parent: Microsoft.Azure.EventHubs.EventHubClient
  langs:
  - csharp
  - vb
  name: CreateEpochReceiver(String, String, String, Int64)
  nameWithType: EventHubClient.CreateEpochReceiver(String, String, String, Int64)
  fullName: Microsoft.Azure.EventHubs.EventHubClient.CreateEpochReceiver(System.String, System.String, System.String, System.Int64)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/EventHubClient.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: CreateEpochReceiver
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/EventHubClient.cs
    startLine: 317
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  summary: "\nCreate a Epoch based EventHub receiver with given partition id and start receiving from the beginning of the partition stream.\nThe receiver is created for a specific EventHub Partition from the specific consumer group.\n<p></p>\nIt is important to pay attention to the following when creating epoch based receiver:\n<p></p>- Ownership enforcement: Once you created an epoch based receiver, you cannot create a non-epoch receiver to the same consumerGroup-Partition combo until all receivers to the combo are closed.\n<p></p>- Ownership stealing: If a receiver with higher epoch value is created for a consumerGroup-Partition combo, any older epoch receiver to that combo will be force closed.\n<p></p>- Any receiver closed due to lost of ownership to a consumerGroup-Partition combo will get ReceiverDisconnectedException for all operations from that receiver.\n"
  example: []
  syntax:
    content: public PartitionReceiver CreateEpochReceiver(string consumerGroupName, string partitionId, string startingOffset, long epoch)
    content.vb: Public Function CreateEpochReceiver(consumerGroupName As String, partitionId As String, startingOffset As String, epoch As Long) As PartitionReceiver
    parameters:
    - id: consumerGroupName
      type: System.String
      description: the consumer group name that this receiver should be grouped under.
    - id: partitionId
      type: System.String
      description: the partition Id that the receiver belongs to. All data received will be from this partition only.
    - id: startingOffset
      type: System.String
      description: the offset to start receiving the events from. To receive from start of the stream use <xref href="Microsoft.Azure.EventHubs.PartitionReceiver.StartOfStream" data-throw-if-not-resolved="false"></xref>
    - id: epoch
      type: System.Int64
      description: an unique identifier (epoch value) that the service uses, to enforce partition/lease ownership.
    return:
      type: Microsoft.Azure.EventHubs.PartitionReceiver
      description: The created PartitionReceiver
  overload: Microsoft.Azure.EventHubs.EventHubClient.CreateEpochReceiver*
  seealso:
  - linkId: Microsoft.Azure.EventHubs.PartitionReceiver
    commentId: T:Microsoft.Azure.EventHubs.PartitionReceiver
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.EventHubs.EventHubClient.CreateEpochReceiver(System.String,System.String,System.String,System.Boolean,System.Int64)
  commentId: M:Microsoft.Azure.EventHubs.EventHubClient.CreateEpochReceiver(System.String,System.String,System.String,System.Boolean,System.Int64)
  id: CreateEpochReceiver(System.String,System.String,System.String,System.Boolean,System.Int64)
  parent: Microsoft.Azure.EventHubs.EventHubClient
  langs:
  - csharp
  - vb
  name: CreateEpochReceiver(String, String, String, Boolean, Int64)
  nameWithType: EventHubClient.CreateEpochReceiver(String, String, String, Boolean, Int64)
  fullName: Microsoft.Azure.EventHubs.EventHubClient.CreateEpochReceiver(System.String, System.String, System.String, System.Boolean, System.Int64)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/EventHubClient.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: CreateEpochReceiver
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/EventHubClient.cs
    startLine: 338
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  summary: "\nCreate a Epoch based EventHub receiver with given partition id and start receiving from the beginning of the partition stream.\nThe receiver is created for a specific EventHub Partition from the specific consumer group.\n<p></p> \nIt is important to pay attention to the following when creating epoch based receiver:\n<p></p>- Ownership enforcement: Once you created an epoch based receiver, you cannot create a non-epoch receiver to the same consumerGroup-Partition combo until all receivers to the combo are closed.\n<p></p>- Ownership stealing: If a receiver with higher epoch value is created for a consumerGroup-Partition combo, any older epoch receiver to that combo will be force closed.\n<p></p>- Any receiver closed due to lost of ownership to a consumerGroup-Partition combo will get ReceiverDisconnectedException for all operations from that receiver.\n"
  example: []
  syntax:
    content: public PartitionReceiver CreateEpochReceiver(string consumerGroupName, string partitionId, string startingOffset, bool offsetInclusive, long epoch)
    content.vb: Public Function CreateEpochReceiver(consumerGroupName As String, partitionId As String, startingOffset As String, offsetInclusive As Boolean, epoch As Long) As PartitionReceiver
    parameters:
    - id: consumerGroupName
      type: System.String
      description: the consumer group name that this receiver should be grouped under.
    - id: partitionId
      type: System.String
      description: the partition Id that the receiver belongs to. All data received will be from this partition only.
    - id: startingOffset
      type: System.String
      description: the offset to start receiving the events from. To receive from start of the stream use <xref href="Microsoft.Azure.EventHubs.PartitionReceiver.StartOfStream" data-throw-if-not-resolved="false"></xref>
    - id: offsetInclusive
      type: System.Boolean
      description: if set to true, the startingOffset is treated as an inclusive offset - meaning the first event returned is the one that has the starting offset. Normally first event returned is the event after the starting offset.
    - id: epoch
      type: System.Int64
      description: 'an unique identifier (epoch value) that the service uses, to enforce partition/lease ownership. '
    return:
      type: Microsoft.Azure.EventHubs.PartitionReceiver
      description: The created PartitionReceiver
  overload: Microsoft.Azure.EventHubs.EventHubClient.CreateEpochReceiver*
  seealso:
  - linkId: Microsoft.Azure.EventHubs.PartitionReceiver
    commentId: T:Microsoft.Azure.EventHubs.PartitionReceiver
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.EventHubs.EventHubClient.CreateEpochReceiver(System.String,System.String,DateTime,System.Int64)
  commentId: M:Microsoft.Azure.EventHubs.EventHubClient.CreateEpochReceiver(System.String,System.String,DateTime,System.Int64)
  id: CreateEpochReceiver(System.String,System.String,DateTime,System.Int64)
  parent: Microsoft.Azure.EventHubs.EventHubClient
  langs:
  - csharp
  - vb
  name: CreateEpochReceiver(String, String, DateTime, Int64)
  nameWithType: EventHubClient.CreateEpochReceiver(String, String, DateTime, Int64)
  fullName: Microsoft.Azure.EventHubs.EventHubClient.CreateEpochReceiver(System.String, System.String, DateTime, System.Int64)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/EventHubClient.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: CreateEpochReceiver
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/EventHubClient.cs
    startLine: 366
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  summary: "\nCreate a Epoch based EventHub receiver with given partition id and start receiving from the beginning of the partition stream.\nThe receiver is created for a specific EventHub Partition from the specific consumer group.\n<p></p>It is important to pay attention to the following when creating epoch based receiver:\n<p></p>- Ownership enforcement: Once you created an epoch based receiver, you cannot create a non-epoch receiver to the same consumerGroup-Partition combo until all receivers to the combo are closed.\n<p></p>- Ownership stealing: If a receiver with higher epoch value is created for a consumerGroup-Partition combo, any older epoch receiver to that combo will be force closed.\n<p></p>- Any receiver closed due to lost of ownership to a consumerGroup-Partition combo will get ReceiverDisconnectedException for all operations from that receiver.\n"
  example: []
  syntax:
    content: public PartitionReceiver CreateEpochReceiver(string consumerGroupName, string partitionId, DateTime startTime, long epoch)
    content.vb: Public Function CreateEpochReceiver(consumerGroupName As String, partitionId As String, startTime As DateTime, epoch As Long) As PartitionReceiver
    parameters:
    - id: consumerGroupName
      type: System.String
      description: the consumer group name that this receiver should be grouped under.
    - id: partitionId
      type: System.String
      description: the partition Id that the receiver belongs to. All data received will be from this partition only.
    - id: startTime
      type: DateTime
      description: the date time instant that receive operations will start receive events from. Events received will have <see cref="!:EventData.SystemProperties.EnqueuedTime"></see> later than this instant.
    - id: epoch
      type: System.Int64
      description: a unique identifier (epoch value) that the service uses, to enforce partition/lease ownership.
    return:
      type: Microsoft.Azure.EventHubs.PartitionReceiver
      description: The created PartitionReceiver
  overload: Microsoft.Azure.EventHubs.EventHubClient.CreateEpochReceiver*
  seealso:
  - linkId: Microsoft.Azure.EventHubs.PartitionReceiver
    commentId: T:Microsoft.Azure.EventHubs.PartitionReceiver
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.EventHubs.EventHubClient.GetRuntimeInformationAsync
  commentId: M:Microsoft.Azure.EventHubs.EventHubClient.GetRuntimeInformationAsync
  id: GetRuntimeInformationAsync
  parent: Microsoft.Azure.EventHubs.EventHubClient
  langs:
  - csharp
  - vb
  name: GetRuntimeInformationAsync()
  nameWithType: EventHubClient.GetRuntimeInformationAsync()
  fullName: Microsoft.Azure.EventHubs.EventHubClient.GetRuntimeInformationAsync()
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/EventHubClient.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: GetRuntimeInformationAsync
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/EventHubClient.cs
    startLine: 383
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  summary: "\nRetrieves EventHub runtime information\n"
  example: []
  syntax:
    content: public Task<EventHubRuntimeInformation> GetRuntimeInformationAsync()
    content.vb: Public Function GetRuntimeInformationAsync As Task(Of EventHubRuntimeInformation)
    return:
      type: Task{Microsoft.Azure.EventHubs.EventHubRuntimeInformation}
  overload: Microsoft.Azure.EventHubs.EventHubClient.GetRuntimeInformationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.EventHubs.EventHubClient.GetPartitionRuntimeInformationAsync(System.String)
  commentId: M:Microsoft.Azure.EventHubs.EventHubClient.GetPartitionRuntimeInformationAsync(System.String)
  id: GetPartitionRuntimeInformationAsync(System.String)
  parent: Microsoft.Azure.EventHubs.EventHubClient
  langs:
  - csharp
  - vb
  name: GetPartitionRuntimeInformationAsync(String)
  nameWithType: EventHubClient.GetPartitionRuntimeInformationAsync(String)
  fullName: Microsoft.Azure.EventHubs.EventHubClient.GetPartitionRuntimeInformationAsync(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/EventHubClient.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: GetPartitionRuntimeInformationAsync
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/EventHubClient.cs
    startLine: 402
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  syntax:
    content: public Task<EventHubPartitionRuntimeInformation> GetPartitionRuntimeInformationAsync(string partitionId)
    content.vb: Public Function GetPartitionRuntimeInformationAsync(partitionId As String) As Task(Of EventHubPartitionRuntimeInformation)
    parameters:
    - id: partitionId
      type: System.String
    return:
      type: Task{Microsoft.Azure.EventHubs.EventHubPartitionRuntimeInformation}
  overload: Microsoft.Azure.EventHubs.EventHubClient.GetPartitionRuntimeInformationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.EventHubs.EventHubClient.OnCreateReceiver(System.String,System.String,System.String,System.Boolean,System.Nullable{DateTime},System.Nullable{System.Int64})
  commentId: M:Microsoft.Azure.EventHubs.EventHubClient.OnCreateReceiver(System.String,System.String,System.String,System.Boolean,System.Nullable{DateTime},System.Nullable{System.Int64})
  id: OnCreateReceiver(System.String,System.String,System.String,System.Boolean,System.Nullable{DateTime},System.Nullable{System.Int64})
  parent: Microsoft.Azure.EventHubs.EventHubClient
  langs:
  - csharp
  - vb
  name: OnCreateReceiver(String, String, String, Boolean, Nullable<DateTime>, Nullable<Int64>)
  nameWithType: EventHubClient.OnCreateReceiver(String, String, String, Boolean, Nullable<DateTime>, Nullable<Int64>)
  fullName: Microsoft.Azure.EventHubs.EventHubClient.OnCreateReceiver(System.String, System.String, System.String, System.Boolean, System.Nullable<DateTime>, System.Nullable<System.Int64>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/EventHubClient.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: OnCreateReceiver
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/EventHubClient.cs
    startLine: 433
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  syntax:
    content: protected abstract PartitionReceiver OnCreateReceiver(string consumerGroupName, string partitionId, string startOffset, bool offsetInclusive, DateTime? startTime, long ? epoch)
    content.vb: Protected MustOverride Function OnCreateReceiver(consumerGroupName As String, partitionId As String, startOffset As String, offsetInclusive As Boolean, startTime As DateTime?, epoch As Long?) As PartitionReceiver
    parameters:
    - id: consumerGroupName
      type: System.String
    - id: partitionId
      type: System.String
    - id: startOffset
      type: System.String
    - id: offsetInclusive
      type: System.Boolean
    - id: startTime
      type: System.Nullable{DateTime}
    - id: epoch
      type: System.Nullable{System.Int64}
    return:
      type: Microsoft.Azure.EventHubs.PartitionReceiver
  overload: Microsoft.Azure.EventHubs.EventHubClient.OnCreateReceiver*
  nameWithType.vb: EventHubClient.OnCreateReceiver(String, String, String, Boolean, Nullable(Of DateTime), Nullable(Of Int64))
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Microsoft.Azure.EventHubs.EventHubClient.OnCreateReceiver(System.String, System.String, System.String, System.Boolean, System.Nullable(Of DateTime), System.Nullable(Of System.Int64))
  name.vb: OnCreateReceiver(String, String, String, Boolean, Nullable(Of DateTime), Nullable(Of Int64))
- uid: Microsoft.Azure.EventHubs.EventHubClient.OnGetRuntimeInformationAsync
  commentId: M:Microsoft.Azure.EventHubs.EventHubClient.OnGetRuntimeInformationAsync
  id: OnGetRuntimeInformationAsync
  parent: Microsoft.Azure.EventHubs.EventHubClient
  langs:
  - csharp
  - vb
  name: OnGetRuntimeInformationAsync()
  nameWithType: EventHubClient.OnGetRuntimeInformationAsync()
  fullName: Microsoft.Azure.EventHubs.EventHubClient.OnGetRuntimeInformationAsync()
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/EventHubClient.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: OnGetRuntimeInformationAsync
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/EventHubClient.cs
    startLine: 435
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  syntax:
    content: protected abstract Task<EventHubRuntimeInformation> OnGetRuntimeInformationAsync()
    content.vb: Protected MustOverride Function OnGetRuntimeInformationAsync As Task(Of EventHubRuntimeInformation)
    return:
      type: Task{Microsoft.Azure.EventHubs.EventHubRuntimeInformation}
  overload: Microsoft.Azure.EventHubs.EventHubClient.OnGetRuntimeInformationAsync*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.Azure.EventHubs.EventHubClient.OnGetPartitionRuntimeInformationAsync(System.String)
  commentId: M:Microsoft.Azure.EventHubs.EventHubClient.OnGetPartitionRuntimeInformationAsync(System.String)
  id: OnGetPartitionRuntimeInformationAsync(System.String)
  parent: Microsoft.Azure.EventHubs.EventHubClient
  langs:
  - csharp
  - vb
  name: OnGetPartitionRuntimeInformationAsync(String)
  nameWithType: EventHubClient.OnGetPartitionRuntimeInformationAsync(String)
  fullName: Microsoft.Azure.EventHubs.EventHubClient.OnGetPartitionRuntimeInformationAsync(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/EventHubClient.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: OnGetPartitionRuntimeInformationAsync
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/EventHubClient.cs
    startLine: 437
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  syntax:
    content: protected abstract Task<EventHubPartitionRuntimeInformation> OnGetPartitionRuntimeInformationAsync(string partitionId)
    content.vb: Protected MustOverride Function OnGetPartitionRuntimeInformationAsync(partitionId As String) As Task(Of EventHubPartitionRuntimeInformation)
    parameters:
    - id: partitionId
      type: System.String
    return:
      type: Task{Microsoft.Azure.EventHubs.EventHubPartitionRuntimeInformation}
  overload: Microsoft.Azure.EventHubs.EventHubClient.OnGetPartitionRuntimeInformationAsync*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.Azure.EventHubs.EventHubClient.OnCloseAsync
  commentId: M:Microsoft.Azure.EventHubs.EventHubClient.OnCloseAsync
  id: OnCloseAsync
  parent: Microsoft.Azure.EventHubs.EventHubClient
  langs:
  - csharp
  - vb
  name: OnCloseAsync()
  nameWithType: EventHubClient.OnCloseAsync()
  fullName: Microsoft.Azure.EventHubs.EventHubClient.OnCloseAsync()
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs/EventHubClient.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: OnCloseAsync
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs/EventHubClient.cs
    startLine: 439
  assemblies:
  - Microsoft.Azure.EventHubs
  namespace: Microsoft.Azure.EventHubs
  syntax:
    content: protected abstract Task OnCloseAsync()
    content.vb: Protected MustOverride Function OnCloseAsync As Task
    return:
      type: Task
  overload: Microsoft.Azure.EventHubs.EventHubClient.OnCloseAsync*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
references:
- uid: Microsoft.Azure.EventHubs
  commentId: N:Microsoft.Azure.EventHubs
  isExternal: false
  name: Microsoft.Azure.EventHubs
  nameWithType: Microsoft.Azure.EventHubs
  fullName: Microsoft.Azure.EventHubs
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Azure.EventHubs.ClientEntity
  commentId: T:Microsoft.Azure.EventHubs.ClientEntity
  parent: Microsoft.Azure.EventHubs
  isExternal: false
  name: ClientEntity
  nameWithType: ClientEntity
  fullName: Microsoft.Azure.EventHubs.ClientEntity
- uid: Microsoft.Azure.EventHubs.ClientEntity.ClientId
  commentId: P:Microsoft.Azure.EventHubs.ClientEntity.ClientId
  parent: Microsoft.Azure.EventHubs.ClientEntity
  isExternal: false
  name: ClientId
  nameWithType: ClientEntity.ClientId
  fullName: Microsoft.Azure.EventHubs.ClientEntity.ClientId
- uid: Microsoft.Azure.EventHubs.ClientEntity.RetryPolicy
  commentId: P:Microsoft.Azure.EventHubs.ClientEntity.RetryPolicy
  parent: Microsoft.Azure.EventHubs.ClientEntity
  isExternal: false
  name: RetryPolicy
  nameWithType: ClientEntity.RetryPolicy
  fullName: Microsoft.Azure.EventHubs.ClientEntity.RetryPolicy
- uid: Microsoft.Azure.EventHubs.ClientEntity.Close
  commentId: M:Microsoft.Azure.EventHubs.ClientEntity.Close
  parent: Microsoft.Azure.EventHubs.ClientEntity
  isExternal: false
  name: Close()
  nameWithType: ClientEntity.Close()
  fullName: Microsoft.Azure.EventHubs.ClientEntity.Close()
  spec.csharp:
  - uid: Microsoft.Azure.EventHubs.ClientEntity.Close
    name: Close
    nameWithType: ClientEntity.Close
    fullName: Microsoft.Azure.EventHubs.ClientEntity.Close
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.EventHubs.ClientEntity.Close
    name: Close
    nameWithType: ClientEntity.Close
    fullName: Microsoft.Azure.EventHubs.ClientEntity.Close
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.EventHubs.ClientEntity.GetNextId
  commentId: M:Microsoft.Azure.EventHubs.ClientEntity.GetNextId
  parent: Microsoft.Azure.EventHubs.ClientEntity
  isExternal: false
  name: GetNextId()
  nameWithType: ClientEntity.GetNextId()
  fullName: Microsoft.Azure.EventHubs.ClientEntity.GetNextId()
  spec.csharp:
  - uid: Microsoft.Azure.EventHubs.ClientEntity.GetNextId
    name: GetNextId
    nameWithType: ClientEntity.GetNextId
    fullName: Microsoft.Azure.EventHubs.ClientEntity.GetNextId
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.EventHubs.ClientEntity.GetNextId
    name: GetNextId
    nameWithType: ClientEntity.GetNextId
    fullName: Microsoft.Azure.EventHubs.ClientEntity.GetNextId
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.EventHubs.EventHubClient.EventHubName*
  commentId: Overload:Microsoft.Azure.EventHubs.EventHubClient.EventHubName
  isExternal: false
  name: EventHubName
  nameWithType: EventHubClient.EventHubName
  fullName: Microsoft.Azure.EventHubs.EventHubClient.EventHubName
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Azure.EventHubs.EventHubClient.ThisLock*
  commentId: Overload:Microsoft.Azure.EventHubs.EventHubClient.ThisLock
  isExternal: false
  name: ThisLock
  nameWithType: EventHubClient.ThisLock
  fullName: Microsoft.Azure.EventHubs.EventHubClient.ThisLock
- uid: Microsoft.Azure.EventHubs.EventHubClient.CreateFromConnectionString*
  commentId: Overload:Microsoft.Azure.EventHubs.EventHubClient.CreateFromConnectionString
  isExternal: false
  name: CreateFromConnectionString
  nameWithType: EventHubClient.CreateFromConnectionString
  fullName: Microsoft.Azure.EventHubs.EventHubClient.CreateFromConnectionString
- uid: Microsoft.Azure.EventHubs.EventHubClient
  commentId: T:Microsoft.Azure.EventHubs.EventHubClient
  parent: Microsoft.Azure.EventHubs
  isExternal: false
  name: EventHubClient
  nameWithType: EventHubClient
  fullName: Microsoft.Azure.EventHubs.EventHubClient
- uid: Microsoft.Azure.EventHubs.ClientEntity.CloseAsync
  commentId: M:Microsoft.Azure.EventHubs.ClientEntity.CloseAsync
  parent: Microsoft.Azure.EventHubs.ClientEntity
  isExternal: false
  name: CloseAsync()
  nameWithType: ClientEntity.CloseAsync()
  fullName: Microsoft.Azure.EventHubs.ClientEntity.CloseAsync()
  spec.csharp:
  - uid: Microsoft.Azure.EventHubs.ClientEntity.CloseAsync
    name: CloseAsync
    nameWithType: ClientEntity.CloseAsync
    fullName: Microsoft.Azure.EventHubs.ClientEntity.CloseAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.EventHubs.ClientEntity.CloseAsync
    name: CloseAsync
    nameWithType: ClientEntity.CloseAsync
    fullName: Microsoft.Azure.EventHubs.ClientEntity.CloseAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.EventHubs.EventHubClient.CloseAsync*
  commentId: Overload:Microsoft.Azure.EventHubs.EventHubClient.CloseAsync
  isExternal: false
  name: CloseAsync
  nameWithType: EventHubClient.CloseAsync
  fullName: Microsoft.Azure.EventHubs.EventHubClient.CloseAsync
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Microsoft.Azure.EventHubs.EventData
  commentId: T:Microsoft.Azure.EventHubs.EventData
  parent: Microsoft.Azure.EventHubs
  isExternal: false
  name: EventData
  nameWithType: EventData
  fullName: Microsoft.Azure.EventHubs.EventData
- uid: Microsoft.Azure.EventHubs.EventHubClient.SendAsync(Microsoft.Azure.EventHubs.EventData)
  commentId: M:Microsoft.Azure.EventHubs.EventHubClient.SendAsync(Microsoft.Azure.EventHubs.EventData)
- uid: Microsoft.Azure.EventHubs.EventHubClient.SendAsync(IEnumerable{Microsoft.Azure.EventHubs.EventData})
  commentId: M:Microsoft.Azure.EventHubs.EventHubClient.SendAsync(IEnumerable{Microsoft.Azure.EventHubs.EventData})
- uid: Microsoft.Azure.EventHubs.EventHubClient.SendAsync(Microsoft.Azure.EventHubs.EventData,System.String)
  commentId: M:Microsoft.Azure.EventHubs.EventHubClient.SendAsync(Microsoft.Azure.EventHubs.EventData,System.String)
- uid: Microsoft.Azure.EventHubs.EventHubClient.SendAsync(IEnumerable{Microsoft.Azure.EventHubs.EventData},System.String)
  commentId: M:Microsoft.Azure.EventHubs.EventHubClient.SendAsync(IEnumerable{Microsoft.Azure.EventHubs.EventData},System.String)
- uid: Microsoft.Azure.EventHubs.PartitionSender.SendAsync(Microsoft.Azure.EventHubs.EventData)
  commentId: M:Microsoft.Azure.EventHubs.PartitionSender.SendAsync(Microsoft.Azure.EventHubs.EventData)
- uid: Microsoft.Azure.EventHubs.PartitionSender.SendAsync(IEnumerable{Microsoft.Azure.EventHubs.EventData})
  commentId: M:Microsoft.Azure.EventHubs.PartitionSender.SendAsync(IEnumerable{Microsoft.Azure.EventHubs.EventData})
- uid: Microsoft.Azure.EventHubs.EventHubClient.SendAsync*
  commentId: Overload:Microsoft.Azure.EventHubs.EventHubClient.SendAsync
  isExternal: false
  name: SendAsync
  nameWithType: EventHubClient.SendAsync
  fullName: Microsoft.Azure.EventHubs.EventHubClient.SendAsync
- uid: IEnumerable{Microsoft.Azure.EventHubs.EventData}
  commentId: '!:IEnumerable{Microsoft.Azure.EventHubs.EventData}'
  definition: IEnumerable`1
  name: IEnumerable<EventData>
  nameWithType: IEnumerable<EventData>
  fullName: IEnumerable<Microsoft.Azure.EventHubs.EventData>
  nameWithType.vb: IEnumerable(Of EventData)
  fullname.vb: IEnumerable(Of Microsoft.Azure.EventHubs.EventData)
  name.vb: IEnumerable(Of EventData)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.EventHubs.EventData
    name: EventData
    nameWithType: EventData
    fullName: Microsoft.Azure.EventHubs.EventData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.EventHubs.EventData
    name: EventData
    nameWithType: EventData
    fullName: Microsoft.Azure.EventHubs.EventData
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullname.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.EventHubs.PartitionSender
  commentId: T:Microsoft.Azure.EventHubs.PartitionSender
  parent: Microsoft.Azure.EventHubs
  isExternal: false
  name: PartitionSender
  nameWithType: PartitionSender
  fullName: Microsoft.Azure.EventHubs.PartitionSender
- uid: Microsoft.Azure.EventHubs.EventHubClient.CreatePartitionSender*
  commentId: Overload:Microsoft.Azure.EventHubs.EventHubClient.CreatePartitionSender
  isExternal: false
  name: CreatePartitionSender
  nameWithType: EventHubClient.CreatePartitionSender
  fullName: Microsoft.Azure.EventHubs.EventHubClient.CreatePartitionSender
- uid: Microsoft.Azure.EventHubs.PartitionReceiver.StartOfStream
  commentId: F:Microsoft.Azure.EventHubs.PartitionReceiver.StartOfStream
- uid: Microsoft.Azure.EventHubs.PartitionReceiver
  commentId: T:Microsoft.Azure.EventHubs.PartitionReceiver
  parent: Microsoft.Azure.EventHubs
  isExternal: false
  name: PartitionReceiver
  nameWithType: PartitionReceiver
  fullName: Microsoft.Azure.EventHubs.PartitionReceiver
- uid: Microsoft.Azure.EventHubs.EventHubClient.CreateReceiver*
  commentId: Overload:Microsoft.Azure.EventHubs.EventHubClient.CreateReceiver
  isExternal: false
  name: CreateReceiver
  nameWithType: EventHubClient.CreateReceiver
  fullName: Microsoft.Azure.EventHubs.EventHubClient.CreateReceiver
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: DateTime
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: DateTime
- uid: Microsoft.Azure.EventHubs.EventHubClient.CreateEpochReceiver*
  commentId: Overload:Microsoft.Azure.EventHubs.EventHubClient.CreateEpochReceiver
  isExternal: false
  name: CreateEpochReceiver
  nameWithType: EventHubClient.CreateEpochReceiver
  fullName: Microsoft.Azure.EventHubs.EventHubClient.CreateEpochReceiver
- uid: System.Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.Azure.EventHubs.EventHubClient.GetRuntimeInformationAsync*
  commentId: Overload:Microsoft.Azure.EventHubs.EventHubClient.GetRuntimeInformationAsync
  isExternal: false
  name: GetRuntimeInformationAsync
  nameWithType: EventHubClient.GetRuntimeInformationAsync
  fullName: Microsoft.Azure.EventHubs.EventHubClient.GetRuntimeInformationAsync
- uid: Task{Microsoft.Azure.EventHubs.EventHubRuntimeInformation}
  commentId: '!:Task{Microsoft.Azure.EventHubs.EventHubRuntimeInformation}'
  definition: Task`1
  name: Task<EventHubRuntimeInformation>
  nameWithType: Task<EventHubRuntimeInformation>
  fullName: Task<Microsoft.Azure.EventHubs.EventHubRuntimeInformation>
  nameWithType.vb: Task(Of EventHubRuntimeInformation)
  fullname.vb: Task(Of Microsoft.Azure.EventHubs.EventHubRuntimeInformation)
  name.vb: Task(Of EventHubRuntimeInformation)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.EventHubs.EventHubRuntimeInformation
    name: EventHubRuntimeInformation
    nameWithType: EventHubRuntimeInformation
    fullName: Microsoft.Azure.EventHubs.EventHubRuntimeInformation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.EventHubs.EventHubRuntimeInformation
    name: EventHubRuntimeInformation
    nameWithType: EventHubRuntimeInformation
    fullName: Microsoft.Azure.EventHubs.EventHubRuntimeInformation
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullname.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.EventHubs.EventHubClient.GetPartitionRuntimeInformationAsync*
  commentId: Overload:Microsoft.Azure.EventHubs.EventHubClient.GetPartitionRuntimeInformationAsync
  isExternal: false
  name: GetPartitionRuntimeInformationAsync
  nameWithType: EventHubClient.GetPartitionRuntimeInformationAsync
  fullName: Microsoft.Azure.EventHubs.EventHubClient.GetPartitionRuntimeInformationAsync
- uid: Task{Microsoft.Azure.EventHubs.EventHubPartitionRuntimeInformation}
  commentId: '!:Task{Microsoft.Azure.EventHubs.EventHubPartitionRuntimeInformation}'
  definition: Task`1
  name: Task<EventHubPartitionRuntimeInformation>
  nameWithType: Task<EventHubPartitionRuntimeInformation>
  fullName: Task<Microsoft.Azure.EventHubs.EventHubPartitionRuntimeInformation>
  nameWithType.vb: Task(Of EventHubPartitionRuntimeInformation)
  fullname.vb: Task(Of Microsoft.Azure.EventHubs.EventHubPartitionRuntimeInformation)
  name.vb: Task(Of EventHubPartitionRuntimeInformation)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.EventHubs.EventHubPartitionRuntimeInformation
    name: EventHubPartitionRuntimeInformation
    nameWithType: EventHubPartitionRuntimeInformation
    fullName: Microsoft.Azure.EventHubs.EventHubPartitionRuntimeInformation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.EventHubs.EventHubPartitionRuntimeInformation
    name: EventHubPartitionRuntimeInformation
    nameWithType: EventHubPartitionRuntimeInformation
    fullName: Microsoft.Azure.EventHubs.EventHubPartitionRuntimeInformation
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.EventHubs.EventHubClient.OnCreateReceiver*
  commentId: Overload:Microsoft.Azure.EventHubs.EventHubClient.OnCreateReceiver
  isExternal: false
  name: OnCreateReceiver
  nameWithType: EventHubClient.OnCreateReceiver
  fullName: Microsoft.Azure.EventHubs.EventHubClient.OnCreateReceiver
- uid: System.Nullable{DateTime}
  commentId: '!:System.Nullable{DateTime}'
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullname.vb: System.Nullable(Of DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Int64}
  commentId: '!:System.Nullable{System.Int64}'
  definition: System.Nullable`1
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  nameWithType.vb: Nullable(Of Int64)
  fullname.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullname.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.EventHubs.EventHubClient.OnGetRuntimeInformationAsync*
  commentId: Overload:Microsoft.Azure.EventHubs.EventHubClient.OnGetRuntimeInformationAsync
  isExternal: false
  name: OnGetRuntimeInformationAsync
  nameWithType: EventHubClient.OnGetRuntimeInformationAsync
  fullName: Microsoft.Azure.EventHubs.EventHubClient.OnGetRuntimeInformationAsync
- uid: Microsoft.Azure.EventHubs.EventHubClient.OnGetPartitionRuntimeInformationAsync*
  commentId: Overload:Microsoft.Azure.EventHubs.EventHubClient.OnGetPartitionRuntimeInformationAsync
  isExternal: false
  name: OnGetPartitionRuntimeInformationAsync
  nameWithType: EventHubClient.OnGetPartitionRuntimeInformationAsync
  fullName: Microsoft.Azure.EventHubs.EventHubClient.OnGetPartitionRuntimeInformationAsync
- uid: Microsoft.Azure.EventHubs.EventHubClient.OnCloseAsync*
  commentId: Overload:Microsoft.Azure.EventHubs.EventHubClient.OnCloseAsync
  isExternal: false
  name: OnCloseAsync
  nameWithType: EventHubClient.OnCloseAsync
  fullName: Microsoft.Azure.EventHubs.EventHubClient.OnCloseAsync
