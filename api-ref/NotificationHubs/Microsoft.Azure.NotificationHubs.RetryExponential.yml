### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.NotificationHubs.RetryExponential
  commentId: T:Microsoft.Azure.NotificationHubs.RetryExponential
  id: RetryExponential
  parent: Microsoft.Azure.NotificationHubs
  children:
  - Microsoft.Azure.NotificationHubs.RetryExponential.#ctor(System.TimeSpan,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Int32)
  - Microsoft.Azure.NotificationHubs.RetryExponential.Clone
  - Microsoft.Azure.NotificationHubs.RetryExponential.DeltaBackoff
  - Microsoft.Azure.NotificationHubs.RetryExponential.IsRetryableException(System.Exception)
  - Microsoft.Azure.NotificationHubs.RetryExponential.MaximumBackoff
  - Microsoft.Azure.NotificationHubs.RetryExponential.MaxRetryCount
  - Microsoft.Azure.NotificationHubs.RetryExponential.MinimalBackoff
  - Microsoft.Azure.NotificationHubs.RetryExponential.OnShouldRetry(System.TimeSpan,System.Int32,System.TimeSpan@)
  - Microsoft.Azure.NotificationHubs.RetryExponential.TerminationTimeBuffer
  langs:
  - csharp
  - vb
  name: RetryExponential
  nameWithType: RetryExponential
  fullName: Microsoft.Azure.NotificationHubs.RetryExponential
  type: Class
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/RetryExponential.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: RetryExponential
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/RetryExponential.cs
    startLine: 13
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nRepresents a retry policy that performs a specified number of retries, using a randomized exponential backoff scheme to determine the interval between retries.\n"
  example: []
  syntax:
    content: 'public sealed class RetryExponential : RetryPolicy'
    content.vb: >-
      Public NotInheritable Class RetryExponential
          Inherits RetryPolicy
  inheritance:
  - System.Object
  - Microsoft.Azure.NotificationHubs.RetryPolicy
  inheritedMembers:
  - Microsoft.Azure.NotificationHubs.RetryPolicy.NoRetry
  - Microsoft.Azure.NotificationHubs.RetryPolicy.Default
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.Azure.NotificationHubs.RetryExponential.#ctor(System.TimeSpan,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Int32)
  commentId: M:Microsoft.Azure.NotificationHubs.RetryExponential.#ctor(System.TimeSpan,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Int32)
  id: '#ctor(System.TimeSpan,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Int32)'
  parent: Microsoft.Azure.NotificationHubs.RetryExponential
  langs:
  - csharp
  - vb
  name: RetryExponential(TimeSpan, TimeSpan, TimeSpan, TimeSpan, Int32)
  nameWithType: RetryExponential.RetryExponential(TimeSpan, TimeSpan, TimeSpan, TimeSpan, Int32)
  fullName: Microsoft.Azure.NotificationHubs.RetryExponential.RetryExponential(System.TimeSpan, System.TimeSpan, System.TimeSpan, System.TimeSpan, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/RetryExponential.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: .ctor
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/RetryExponential.cs
    startLine: 24
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\na RetryExponential backoff policy that take account of Messaging scenario.\n"
  example: []
  syntax:
    content: public RetryExponential(TimeSpan minBackoff, TimeSpan maxBackoff, TimeSpan deltaBackoff, TimeSpan terminationTimeBuffer, int maxRetryCount)
    content.vb: Public Sub New(minBackoff As TimeSpan, maxBackoff As TimeSpan, deltaBackoff As TimeSpan, terminationTimeBuffer As TimeSpan, maxRetryCount As Integer)
    parameters:
    - id: minBackoff
      type: System.TimeSpan
      description: the minimum backoff timespan that we need to wait
    - id: maxBackoff
      type: System.TimeSpan
      description: the maximum backoff timespan that we are willing to wait
    - id: deltaBackoff
      type: System.TimeSpan
      description: the timespan that is used to get a randomized interval between min/max backoff
    - id: terminationTimeBuffer
      type: System.TimeSpan
      description: "the buffer, that if the diff of the calculated \nwait interval and the remaining operation timeout is less that this buffer, will terminate the retry."
    - id: maxRetryCount
      type: System.Int32
      description: the maximum allowed retry count
  overload: Microsoft.Azure.NotificationHubs.RetryExponential.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.RetryExponential.MinimalBackoff
  commentId: P:Microsoft.Azure.NotificationHubs.RetryExponential.MinimalBackoff
  id: MinimalBackoff
  parent: Microsoft.Azure.NotificationHubs.RetryExponential
  langs:
  - csharp
  - vb
  name: MinimalBackoff
  nameWithType: RetryExponential.MinimalBackoff
  fullName: Microsoft.Azure.NotificationHubs.RetryExponential.MinimalBackoff
  type: Property
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/RetryExponential.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: MinimalBackoff
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/RetryExponential.cs
    startLine: 46
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nThe minimum backoff timespan that we need to wait\n"
  example: []
  syntax:
    content: public TimeSpan MinimalBackoff { get; }
    content.vb: Public ReadOnly Property MinimalBackoff As TimeSpan
    parameters: []
    return:
      type: System.TimeSpan
  overload: Microsoft.Azure.NotificationHubs.RetryExponential.MinimalBackoff*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.NotificationHubs.RetryExponential.MaximumBackoff
  commentId: P:Microsoft.Azure.NotificationHubs.RetryExponential.MaximumBackoff
  id: MaximumBackoff
  parent: Microsoft.Azure.NotificationHubs.RetryExponential
  langs:
  - csharp
  - vb
  name: MaximumBackoff
  nameWithType: RetryExponential.MaximumBackoff
  fullName: Microsoft.Azure.NotificationHubs.RetryExponential.MaximumBackoff
  type: Property
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/RetryExponential.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: MaximumBackoff
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/RetryExponential.cs
    startLine: 51
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nThe maximum backoff timespan that we are willing to wait\n"
  example: []
  syntax:
    content: public TimeSpan MaximumBackoff { get; }
    content.vb: Public ReadOnly Property MaximumBackoff As TimeSpan
    parameters: []
    return:
      type: System.TimeSpan
  overload: Microsoft.Azure.NotificationHubs.RetryExponential.MaximumBackoff*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.NotificationHubs.RetryExponential.DeltaBackoff
  commentId: P:Microsoft.Azure.NotificationHubs.RetryExponential.DeltaBackoff
  id: DeltaBackoff
  parent: Microsoft.Azure.NotificationHubs.RetryExponential
  langs:
  - csharp
  - vb
  name: DeltaBackoff
  nameWithType: RetryExponential.DeltaBackoff
  fullName: Microsoft.Azure.NotificationHubs.RetryExponential.DeltaBackoff
  type: Property
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/RetryExponential.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: DeltaBackoff
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/RetryExponential.cs
    startLine: 56
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nThe timespan that is used to get a randomized interval between min/max backoff\n"
  example: []
  syntax:
    content: public TimeSpan DeltaBackoff { get; }
    content.vb: Public ReadOnly Property DeltaBackoff As TimeSpan
    parameters: []
    return:
      type: System.TimeSpan
  overload: Microsoft.Azure.NotificationHubs.RetryExponential.DeltaBackoff*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.NotificationHubs.RetryExponential.TerminationTimeBuffer
  commentId: P:Microsoft.Azure.NotificationHubs.RetryExponential.TerminationTimeBuffer
  id: TerminationTimeBuffer
  parent: Microsoft.Azure.NotificationHubs.RetryExponential
  langs:
  - csharp
  - vb
  name: TerminationTimeBuffer
  nameWithType: RetryExponential.TerminationTimeBuffer
  fullName: Microsoft.Azure.NotificationHubs.RetryExponential.TerminationTimeBuffer
  type: Property
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/RetryExponential.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: TerminationTimeBuffer
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/RetryExponential.cs
    startLine: 62
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nThe buffer, that if the diff of the calculated \nwait interval and the remaining operation timeout is less that this buffer, will terminate the retry.\n"
  example: []
  syntax:
    content: public TimeSpan TerminationTimeBuffer { get; }
    content.vb: Public ReadOnly Property TerminationTimeBuffer As TimeSpan
    parameters: []
    return:
      type: System.TimeSpan
  overload: Microsoft.Azure.NotificationHubs.RetryExponential.TerminationTimeBuffer*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.NotificationHubs.RetryExponential.MaxRetryCount
  commentId: P:Microsoft.Azure.NotificationHubs.RetryExponential.MaxRetryCount
  id: MaxRetryCount
  parent: Microsoft.Azure.NotificationHubs.RetryExponential
  langs:
  - csharp
  - vb
  name: MaxRetryCount
  nameWithType: RetryExponential.MaxRetryCount
  fullName: Microsoft.Azure.NotificationHubs.RetryExponential.MaxRetryCount
  type: Property
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/RetryExponential.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: MaxRetryCount
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/RetryExponential.cs
    startLine: 67
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nthe maximum allowed retry count\n"
  example: []
  syntax:
    content: public int MaxRetryCount { get; }
    content.vb: Public ReadOnly Property MaxRetryCount As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.Azure.NotificationHubs.RetryExponential.MaxRetryCount*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.NotificationHubs.RetryExponential.OnShouldRetry(System.TimeSpan,System.Int32,System.TimeSpan@)
  commentId: M:Microsoft.Azure.NotificationHubs.RetryExponential.OnShouldRetry(System.TimeSpan,System.Int32,System.TimeSpan@)
  id: OnShouldRetry(System.TimeSpan,System.Int32,System.TimeSpan@)
  parent: Microsoft.Azure.NotificationHubs.RetryExponential
  langs:
  - csharp
  - vb
  name: OnShouldRetry(TimeSpan, Int32, out TimeSpan)
  nameWithType: RetryExponential.OnShouldRetry(TimeSpan, Int32, out TimeSpan)
  fullName: Microsoft.Azure.NotificationHubs.RetryExponential.OnShouldRetry(System.TimeSpan, System.Int32, out System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/RetryExponential.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: OnShouldRetry
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/RetryExponential.cs
    startLine: 79
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nCalculate the retry interval for the retry policy.\n"
  example: []
  syntax:
    content: protected override bool OnShouldRetry(TimeSpan remainingTime, int currentRetryCount, out TimeSpan retryInterval)
    content.vb: Protected Overrides Function OnShouldRetry(remainingTime As TimeSpan, currentRetryCount As Integer, ByRef retryInterval As TimeSpan) As Boolean
    parameters:
    - id: remainingTime
      type: System.TimeSpan
      description: ''
    - id: currentRetryCount
      type: System.Int32
      description: ''
    - id: retryInterval
      type: System.TimeSpan
      description: ''
    return:
      type: System.Boolean
      description: "\nIf this method return true, retry will take place after\nthread idle for retryInteval amount of time.\n"
  overridden: Microsoft.Azure.NotificationHubs.RetryPolicy.OnShouldRetry(System.TimeSpan,System.Int32,System.TimeSpan@)
  overload: Microsoft.Azure.NotificationHubs.RetryExponential.OnShouldRetry*
  nameWithType.vb: RetryExponential.OnShouldRetry(TimeSpan, Int32, ByRef TimeSpan)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: Microsoft.Azure.NotificationHubs.RetryExponential.OnShouldRetry(System.TimeSpan, System.Int32, ByRef System.TimeSpan)
  name.vb: OnShouldRetry(TimeSpan, Int32, ByRef TimeSpan)
- uid: Microsoft.Azure.NotificationHubs.RetryExponential.Clone
  commentId: M:Microsoft.Azure.NotificationHubs.RetryExponential.Clone
  id: Clone
  parent: Microsoft.Azure.NotificationHubs.RetryExponential
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: RetryExponential.Clone()
  fullName: Microsoft.Azure.NotificationHubs.RetryExponential.Clone()
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/RetryExponential.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: Clone
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/RetryExponential.cs
    startLine: 119
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nCreates a new copy of this instance.\n"
  example: []
  syntax:
    content: public override RetryPolicy Clone()
    content.vb: Public Overrides Function Clone As RetryPolicy
    return:
      type: Microsoft.Azure.NotificationHubs.RetryPolicy
      description: "\nThe created new copy of this instance.\n"
  overridden: Microsoft.Azure.NotificationHubs.RetryPolicy.Clone
  overload: Microsoft.Azure.NotificationHubs.RetryExponential.Clone*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Azure.NotificationHubs.RetryExponential.IsRetryableException(System.Exception)
  commentId: M:Microsoft.Azure.NotificationHubs.RetryExponential.IsRetryableException(System.Exception)
  id: IsRetryableException(System.Exception)
  parent: Microsoft.Azure.NotificationHubs.RetryExponential
  langs:
  - csharp
  - vb
  name: IsRetryableException(Exception)
  nameWithType: RetryExponential.IsRetryableException(Exception)
  fullName: Microsoft.Azure.NotificationHubs.RetryExponential.IsRetryableException(System.Exception)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/RetryExponential.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: IsRetryableException
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/RetryExponential.cs
    startLine: 157
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nDetermine if the exception is ok to retry\n"
  example: []
  syntax:
    content: protected override bool IsRetryableException(Exception lastException)
    content.vb: Protected Overrides Function IsRetryableException(lastException As Exception) As Boolean
    parameters:
    - id: lastException
      type: System.Exception
      description: ''
    return:
      type: System.Boolean
      description: "\nif this return false, no retry will take place.\nOtherwise we will use the OnShouldRetry() to determine\nwhen to retry.\n"
  overridden: Microsoft.Azure.NotificationHubs.RetryPolicy.IsRetryableException(System.Exception)
  overload: Microsoft.Azure.NotificationHubs.RetryExponential.IsRetryableException*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: Microsoft.Azure.NotificationHubs
  commentId: N:Microsoft.Azure.NotificationHubs
  isExternal: false
  name: Microsoft.Azure.NotificationHubs
  nameWithType: Microsoft.Azure.NotificationHubs
  fullName: Microsoft.Azure.NotificationHubs
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Azure.NotificationHubs.RetryPolicy
  commentId: T:Microsoft.Azure.NotificationHubs.RetryPolicy
  parent: Microsoft.Azure.NotificationHubs
  isExternal: false
  name: RetryPolicy
  nameWithType: RetryPolicy
  fullName: Microsoft.Azure.NotificationHubs.RetryPolicy
- uid: Microsoft.Azure.NotificationHubs.RetryPolicy.NoRetry
  commentId: P:Microsoft.Azure.NotificationHubs.RetryPolicy.NoRetry
  parent: Microsoft.Azure.NotificationHubs.RetryPolicy
  isExternal: false
  name: NoRetry
  nameWithType: RetryPolicy.NoRetry
  fullName: Microsoft.Azure.NotificationHubs.RetryPolicy.NoRetry
- uid: Microsoft.Azure.NotificationHubs.RetryPolicy.Default
  commentId: P:Microsoft.Azure.NotificationHubs.RetryPolicy.Default
  parent: Microsoft.Azure.NotificationHubs.RetryPolicy
  isExternal: false
  name: Default
  nameWithType: RetryPolicy.Default
  fullName: Microsoft.Azure.NotificationHubs.RetryPolicy.Default
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.NotificationHubs.RetryExponential.#ctor*
  commentId: Overload:Microsoft.Azure.NotificationHubs.RetryExponential.#ctor
  isExternal: false
  name: RetryExponential
  nameWithType: RetryExponential.RetryExponential
  fullName: Microsoft.Azure.NotificationHubs.RetryExponential.RetryExponential
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Azure.NotificationHubs.RetryExponential.MinimalBackoff*
  commentId: Overload:Microsoft.Azure.NotificationHubs.RetryExponential.MinimalBackoff
  isExternal: false
  name: MinimalBackoff
  nameWithType: RetryExponential.MinimalBackoff
  fullName: Microsoft.Azure.NotificationHubs.RetryExponential.MinimalBackoff
- uid: Microsoft.Azure.NotificationHubs.RetryExponential.MaximumBackoff*
  commentId: Overload:Microsoft.Azure.NotificationHubs.RetryExponential.MaximumBackoff
  isExternal: false
  name: MaximumBackoff
  nameWithType: RetryExponential.MaximumBackoff
  fullName: Microsoft.Azure.NotificationHubs.RetryExponential.MaximumBackoff
- uid: Microsoft.Azure.NotificationHubs.RetryExponential.DeltaBackoff*
  commentId: Overload:Microsoft.Azure.NotificationHubs.RetryExponential.DeltaBackoff
  isExternal: false
  name: DeltaBackoff
  nameWithType: RetryExponential.DeltaBackoff
  fullName: Microsoft.Azure.NotificationHubs.RetryExponential.DeltaBackoff
- uid: Microsoft.Azure.NotificationHubs.RetryExponential.TerminationTimeBuffer*
  commentId: Overload:Microsoft.Azure.NotificationHubs.RetryExponential.TerminationTimeBuffer
  isExternal: false
  name: TerminationTimeBuffer
  nameWithType: RetryExponential.TerminationTimeBuffer
  fullName: Microsoft.Azure.NotificationHubs.RetryExponential.TerminationTimeBuffer
- uid: Microsoft.Azure.NotificationHubs.RetryExponential.MaxRetryCount*
  commentId: Overload:Microsoft.Azure.NotificationHubs.RetryExponential.MaxRetryCount
  isExternal: false
  name: MaxRetryCount
  nameWithType: RetryExponential.MaxRetryCount
  fullName: Microsoft.Azure.NotificationHubs.RetryExponential.MaxRetryCount
- uid: Microsoft.Azure.NotificationHubs.RetryPolicy.OnShouldRetry(System.TimeSpan,System.Int32,System.TimeSpan@)
  commentId: M:Microsoft.Azure.NotificationHubs.RetryPolicy.OnShouldRetry(System.TimeSpan,System.Int32,System.TimeSpan@)
  parent: Microsoft.Azure.NotificationHubs.RetryPolicy
  isExternal: true
  name: OnShouldRetry(TimeSpan, Int32, TimeSpan)
  nameWithType: RetryPolicy.OnShouldRetry(TimeSpan, Int32, TimeSpan)
  fullName: Microsoft.Azure.NotificationHubs.RetryPolicy.OnShouldRetry(System.TimeSpan, System.Int32, System.TimeSpan)
  spec.csharp:
  - uid: Microsoft.Azure.NotificationHubs.RetryPolicy.OnShouldRetry(System.TimeSpan,System.Int32,System.TimeSpan@)
    name: OnShouldRetry
    nameWithType: RetryPolicy.OnShouldRetry
    fullName: Microsoft.Azure.NotificationHubs.RetryPolicy.OnShouldRetry
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.NotificationHubs.RetryPolicy.OnShouldRetry(System.TimeSpan,System.Int32,System.TimeSpan@)
    name: OnShouldRetry
    nameWithType: RetryPolicy.OnShouldRetry
    fullName: Microsoft.Azure.NotificationHubs.RetryPolicy.OnShouldRetry
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.NotificationHubs.RetryExponential.OnShouldRetry*
  commentId: Overload:Microsoft.Azure.NotificationHubs.RetryExponential.OnShouldRetry
  isExternal: false
  name: OnShouldRetry
  nameWithType: RetryExponential.OnShouldRetry
  fullName: Microsoft.Azure.NotificationHubs.RetryExponential.OnShouldRetry
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Azure.NotificationHubs.RetryPolicy.Clone
  commentId: M:Microsoft.Azure.NotificationHubs.RetryPolicy.Clone
  parent: Microsoft.Azure.NotificationHubs.RetryPolicy
  isExternal: false
  name: Clone()
  nameWithType: RetryPolicy.Clone()
  fullName: Microsoft.Azure.NotificationHubs.RetryPolicy.Clone()
  spec.csharp:
  - uid: Microsoft.Azure.NotificationHubs.RetryPolicy.Clone
    name: Clone
    nameWithType: RetryPolicy.Clone
    fullName: Microsoft.Azure.NotificationHubs.RetryPolicy.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.NotificationHubs.RetryPolicy.Clone
    name: Clone
    nameWithType: RetryPolicy.Clone
    fullName: Microsoft.Azure.NotificationHubs.RetryPolicy.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.NotificationHubs.RetryExponential.Clone*
  commentId: Overload:Microsoft.Azure.NotificationHubs.RetryExponential.Clone
  isExternal: false
  name: Clone
  nameWithType: RetryExponential.Clone
  fullName: Microsoft.Azure.NotificationHubs.RetryExponential.Clone
- uid: Microsoft.Azure.NotificationHubs.RetryPolicy.IsRetryableException(System.Exception)
  commentId: M:Microsoft.Azure.NotificationHubs.RetryPolicy.IsRetryableException(System.Exception)
  parent: Microsoft.Azure.NotificationHubs.RetryPolicy
  isExternal: true
  name: IsRetryableException(Exception)
  nameWithType: RetryPolicy.IsRetryableException(Exception)
  fullName: Microsoft.Azure.NotificationHubs.RetryPolicy.IsRetryableException(System.Exception)
  spec.csharp:
  - uid: Microsoft.Azure.NotificationHubs.RetryPolicy.IsRetryableException(System.Exception)
    name: IsRetryableException
    nameWithType: RetryPolicy.IsRetryableException
    fullName: Microsoft.Azure.NotificationHubs.RetryPolicy.IsRetryableException
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.NotificationHubs.RetryPolicy.IsRetryableException(System.Exception)
    name: IsRetryableException
    nameWithType: RetryPolicy.IsRetryableException
    fullName: Microsoft.Azure.NotificationHubs.RetryPolicy.IsRetryableException
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.NotificationHubs.RetryExponential.IsRetryableException*
  commentId: Overload:Microsoft.Azure.NotificationHubs.RetryExponential.IsRetryableException
  isExternal: false
  name: IsRetryableException
  nameWithType: RetryExponential.IsRetryableException
  fullName: Microsoft.Azure.NotificationHubs.RetryExponential.IsRetryableException
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
