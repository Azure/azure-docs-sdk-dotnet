### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.NotificationHubs.RetryPolicy
  commentId: T:Microsoft.Azure.NotificationHubs.RetryPolicy
  id: RetryPolicy
  parent: Microsoft.Azure.NotificationHubs
  children:
  - Microsoft.Azure.NotificationHubs.RetryPolicy.Clone
  - Microsoft.Azure.NotificationHubs.RetryPolicy.Default
  - Microsoft.Azure.NotificationHubs.RetryPolicy.IsRetryableException(System.Exception)
  - Microsoft.Azure.NotificationHubs.RetryPolicy.NoRetry
  - Microsoft.Azure.NotificationHubs.RetryPolicy.OnShouldRetry(System.TimeSpan,System.Int32,System.TimeSpan@)
  langs:
  - csharp
  - vb
  name: RetryPolicy
  nameWithType: RetryPolicy
  fullName: Microsoft.Azure.NotificationHubs.RetryPolicy
  type: Class
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/RetryPolicy.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: RetryPolicy
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/RetryPolicy.cs
    startLine: 14
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nProvides the base implementation of the retry mechanism for unreliable actions and transient conditions.\n"
  example: []
  syntax:
    content: public abstract class RetryPolicy
    content.vb: Public MustInherit Class RetryPolicy
  inheritance:
  - System.Object
  derivedClasses:
  - Microsoft.Azure.NotificationHubs.NoRetry
  - Microsoft.Azure.NotificationHubs.RetryExponential
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.Azure.NotificationHubs.RetryPolicy.NoRetry
  commentId: P:Microsoft.Azure.NotificationHubs.RetryPolicy.NoRetry
  id: NoRetry
  parent: Microsoft.Azure.NotificationHubs.RetryPolicy
  langs:
  - csharp
  - vb
  name: NoRetry
  nameWithType: RetryPolicy.NoRetry
  fullName: Microsoft.Azure.NotificationHubs.RetryPolicy.NoRetry
  type: Property
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/RetryPolicy.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: NoRetry
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/RetryPolicy.cs
    startLine: 37
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nGets a retry policy that performs no retries.\n"
  example: []
  syntax:
    content: public static RetryPolicy NoRetry { get; }
    content.vb: Public Shared ReadOnly Property NoRetry As RetryPolicy
    parameters: []
    return:
      type: Microsoft.Azure.NotificationHubs.RetryPolicy
      description: "\nA retry policy that performs no retries.\n"
  overload: Microsoft.Azure.NotificationHubs.RetryPolicy.NoRetry*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Azure.NotificationHubs.RetryPolicy.Default
  commentId: P:Microsoft.Azure.NotificationHubs.RetryPolicy.Default
  id: Default
  parent: Microsoft.Azure.NotificationHubs.RetryPolicy
  langs:
  - csharp
  - vb
  name: Default
  nameWithType: RetryPolicy.Default
  fullName: Microsoft.Azure.NotificationHubs.RetryPolicy.Default
  type: Property
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/RetryPolicy.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: Default
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/RetryPolicy.cs
    startLine: 52
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nGets the default policy associated with the policy.\n"
  example: []
  syntax:
    content: public static RetryPolicy Default { get; }
    content.vb: Public Shared ReadOnly Property Default As RetryPolicy
    parameters: []
    return:
      type: Microsoft.Azure.NotificationHubs.RetryPolicy
      description: "\nThe default policy associated with the policy.\n"
  overload: Microsoft.Azure.NotificationHubs.RetryPolicy.Default*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Azure.NotificationHubs.RetryPolicy.Clone
  commentId: M:Microsoft.Azure.NotificationHubs.RetryPolicy.Clone
  id: Clone
  parent: Microsoft.Azure.NotificationHubs.RetryPolicy
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: RetryPolicy.Clone()
  fullName: Microsoft.Azure.NotificationHubs.RetryPolicy.Clone()
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/RetryPolicy.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: Clone
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/RetryPolicy.cs
    startLine: 123
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nCreates a new copy of <xref href=\"Microsoft.Azure.NotificationHubs.RetryPolicy\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public abstract RetryPolicy Clone()
    content.vb: Public MustOverride Function Clone As RetryPolicy
    return:
      type: Microsoft.Azure.NotificationHubs.RetryPolicy
      description: "\nA new copy of <xref href=\"Microsoft.Azure.NotificationHubs.RetryPolicy\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  overload: Microsoft.Azure.NotificationHubs.RetryPolicy.Clone*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Microsoft.Azure.NotificationHubs.RetryPolicy.OnShouldRetry(System.TimeSpan,System.Int32,System.TimeSpan@)
  commentId: M:Microsoft.Azure.NotificationHubs.RetryPolicy.OnShouldRetry(System.TimeSpan,System.Int32,System.TimeSpan@)
  id: OnShouldRetry(System.TimeSpan,System.Int32,System.TimeSpan@)
  parent: Microsoft.Azure.NotificationHubs.RetryPolicy
  langs:
  - csharp
  - vb
  name: OnShouldRetry(TimeSpan, Int32, out TimeSpan)
  nameWithType: RetryPolicy.OnShouldRetry(TimeSpan, Int32, out TimeSpan)
  fullName: Microsoft.Azure.NotificationHubs.RetryPolicy.OnShouldRetry(System.TimeSpan, System.Int32, out System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/RetryPolicy.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: OnShouldRetry
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/RetryPolicy.cs
    startLine: 183
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nCalculate the retry interval for the retry policy.\n"
  example: []
  syntax:
    content: protected abstract bool OnShouldRetry(TimeSpan remainingTime, int currentRetryCount, out TimeSpan retryInterval)
    content.vb: Protected MustOverride Function OnShouldRetry(remainingTime As TimeSpan, currentRetryCount As Integer, ByRef retryInterval As TimeSpan) As Boolean
    parameters:
    - id: remainingTime
      type: System.TimeSpan
      description: ''
    - id: currentRetryCount
      type: System.Int32
      description: ''
    - id: retryInterval
      type: System.TimeSpan
      description: ''
    return:
      type: System.Boolean
      description: >-
        If this method return true, retry will take place after

        thread idle for retryInteval amount of time.
  overload: Microsoft.Azure.NotificationHubs.RetryPolicy.OnShouldRetry*
  nameWithType.vb: RetryPolicy.OnShouldRetry(TimeSpan, Int32, ByRef TimeSpan)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Microsoft.Azure.NotificationHubs.RetryPolicy.OnShouldRetry(System.TimeSpan, System.Int32, ByRef System.TimeSpan)
  name.vb: OnShouldRetry(TimeSpan, Int32, ByRef TimeSpan)
- uid: Microsoft.Azure.NotificationHubs.RetryPolicy.IsRetryableException(System.Exception)
  commentId: M:Microsoft.Azure.NotificationHubs.RetryPolicy.IsRetryableException(System.Exception)
  id: IsRetryableException(System.Exception)
  parent: Microsoft.Azure.NotificationHubs.RetryPolicy
  langs:
  - csharp
  - vb
  name: IsRetryableException(Exception)
  nameWithType: RetryPolicy.IsRetryableException(Exception)
  fullName: Microsoft.Azure.NotificationHubs.RetryPolicy.IsRetryableException(System.Exception)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/RetryPolicy.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: IsRetryableException
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/RetryPolicy.cs
    startLine: 195
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nDetermine if the exception is ok to retry\n"
  example: []
  syntax:
    content: protected abstract bool IsRetryableException(Exception lastException)
    content.vb: Protected MustOverride Function IsRetryableException(lastException As Exception) As Boolean
    parameters:
    - id: lastException
      type: System.Exception
      description: ''
    return:
      type: System.Boolean
      description: >-
        if this return false, no retry will take place.

        Otherwise we will use the OnShouldRetry() to determine

        when to retry.
  overload: Microsoft.Azure.NotificationHubs.RetryPolicy.IsRetryableException*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
references:
- uid: Microsoft.Azure.NotificationHubs
  commentId: N:Microsoft.Azure.NotificationHubs
  isExternal: false
  name: Microsoft.Azure.NotificationHubs
  nameWithType: Microsoft.Azure.NotificationHubs
  fullName: Microsoft.Azure.NotificationHubs
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.NotificationHubs.RetryPolicy.NoRetry*
  commentId: Overload:Microsoft.Azure.NotificationHubs.RetryPolicy.NoRetry
  isExternal: false
  name: NoRetry
  nameWithType: RetryPolicy.NoRetry
  fullName: Microsoft.Azure.NotificationHubs.RetryPolicy.NoRetry
- uid: Microsoft.Azure.NotificationHubs.RetryPolicy
  commentId: T:Microsoft.Azure.NotificationHubs.RetryPolicy
  parent: Microsoft.Azure.NotificationHubs
  isExternal: false
  name: RetryPolicy
  nameWithType: RetryPolicy
  fullName: Microsoft.Azure.NotificationHubs.RetryPolicy
- uid: Microsoft.Azure.NotificationHubs.RetryPolicy.Default*
  commentId: Overload:Microsoft.Azure.NotificationHubs.RetryPolicy.Default
  isExternal: false
  name: Default
  nameWithType: RetryPolicy.Default
  fullName: Microsoft.Azure.NotificationHubs.RetryPolicy.Default
- uid: Microsoft.Azure.NotificationHubs.RetryPolicy.Clone*
  commentId: Overload:Microsoft.Azure.NotificationHubs.RetryPolicy.Clone
  isExternal: false
  name: Clone
  nameWithType: RetryPolicy.Clone
  fullName: Microsoft.Azure.NotificationHubs.RetryPolicy.Clone
- uid: Microsoft.Azure.NotificationHubs.RetryPolicy.OnShouldRetry*
  commentId: Overload:Microsoft.Azure.NotificationHubs.RetryPolicy.OnShouldRetry
  isExternal: false
  name: OnShouldRetry
  nameWithType: RetryPolicy.OnShouldRetry
  fullName: Microsoft.Azure.NotificationHubs.RetryPolicy.OnShouldRetry
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Azure.NotificationHubs.RetryPolicy.IsRetryableException*
  commentId: Overload:Microsoft.Azure.NotificationHubs.RetryPolicy.IsRetryableException
  isExternal: false
  name: IsRetryableException
  nameWithType: RetryPolicy.IsRetryableException
  fullName: Microsoft.Azure.NotificationHubs.RetryPolicy.IsRetryableException
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
