### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient
  commentId: T:Microsoft.Azure.NotificationHubs.NotificationHubClient
  id: NotificationHubClient
  parent: Microsoft.Azure.NotificationHubs
  children:
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.CancelNotificationAsync(System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAdmNativeRegistrationAsync(System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAdmNativeRegistrationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAdmTemplateRegistrationAsync(System.String,System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAdmTemplateRegistrationAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAppleNativeRegistrationAsync(System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAppleNativeRegistrationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAppleTemplateRegistrationAsync(System.String,System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAppleTemplateRegistrationAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateBaiduNativeRegistrationAsync(System.String,System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateBaiduNativeRegistrationAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateBaiduTemplateRegistrationAsync(System.String,System.String,System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateBaiduTemplateRegistrationAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateClientFromConnectionString(System.String,System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateClientFromConnectionString(System.String,System.String,System.Boolean)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateGcmNativeRegistrationAsync(System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateGcmNativeRegistrationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateGcmTemplateRegistrationAsync(System.String,System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateGcmTemplateRegistrationAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateMpnsNativeRegistrationAsync(System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateMpnsNativeRegistrationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateMpnsTemplateRegistrationAsync(System.String,System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateMpnsTemplateRegistrationAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateOrUpdateInstallation(Microsoft.Azure.NotificationHubs.Installation)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateOrUpdateInstallationAsync(Microsoft.Azure.NotificationHubs.Installation)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateOrUpdateRegistrationAsync``1(``0)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateRegistrationAsync``1(``0)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateRegistrationIdAsync
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateWindowsNativeRegistrationAsync(System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateWindowsNativeRegistrationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateWindowsTemplateRegistrationAsync(System.String,System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateWindowsTemplateRegistrationAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteInstallation(System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteInstallationAsync(System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteRegistrationAsync(Microsoft.Azure.NotificationHubs.RegistrationDescription)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteRegistrationAsync(System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteRegistrationAsync(System.String,System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteRegistrationsByChannelAsync(System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.EnableTestSend
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.GetAllRegistrationsAsync(System.Int32)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.GetAllRegistrationsAsync(System.String,System.Int32)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.GetBaseUri
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.GetFeedbackContainerUriAsync
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.GetInstallation(System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.GetInstallationAsync(System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.GetNotificationHubJobAsync(System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.GetNotificationHubJobsAsync
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.GetNotificationOutcomeDetailsAsync(System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.GetRegistrationAsync``1(System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.GetRegistrationsByChannelAsync(System.String,System.Int32)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.GetRegistrationsByChannelAsync(System.String,System.String,System.Int32)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.GetRegistrationsByTagAsync(System.String,System.Int32)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.GetRegistrationsByTagAsync(System.String,System.String,System.Int32)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.PatchInstallation(System.String,System.Collections.Generic.IList{Microsoft.Azure.NotificationHubs.PartialUpdateOperation})
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.PatchInstallationAsync(System.String,System.Collections.Generic.IList{Microsoft.Azure.NotificationHubs.PartialUpdateOperation})
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.RegistrationExistsAsync(System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.ScheduleNotificationAsync(Microsoft.Azure.NotificationHubs.Notification,System.DateTimeOffset)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.ScheduleNotificationAsync(Microsoft.Azure.NotificationHubs.Notification,System.DateTimeOffset,System.Collections.Generic.IEnumerable{System.String})
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.ScheduleNotificationAsync(Microsoft.Azure.NotificationHubs.Notification,System.DateTimeOffset,System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAdmNativeNotificationAsync(System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAdmNativeNotificationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAdmNativeNotificationAsync(System.String,System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAppleNativeNotificationAsync(System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAppleNativeNotificationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAppleNativeNotificationAsync(System.String,System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.SendBaiduNativeNotificationAsync(System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.SendBaiduNativeNotificationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.SendBaiduNativeNotificationAsync(System.String,System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.SendDirectNotificationAsync(Microsoft.Azure.NotificationHubs.Notification,System.Collections.Generic.IList{System.String})
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.SendDirectNotificationAsync(Microsoft.Azure.NotificationHubs.Notification,System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.SendGcmNativeNotificationAsync(System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.SendGcmNativeNotificationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.SendGcmNativeNotificationAsync(System.String,System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.SendMpnsNativeNotificationAsync(System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.SendMpnsNativeNotificationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.SendMpnsNativeNotificationAsync(System.String,System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.SendNotificationAsync(Microsoft.Azure.NotificationHubs.Notification)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.SendNotificationAsync(Microsoft.Azure.NotificationHubs.Notification,System.Collections.Generic.IEnumerable{System.String})
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.SendNotificationAsync(Microsoft.Azure.NotificationHubs.Notification,System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.SendTemplateNotificationAsync(System.Collections.Generic.IDictionary{System.String,System.String})
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.SendTemplateNotificationAsync(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{System.String})
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.SendTemplateNotificationAsync(System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.SendWindowsNativeNotificationAsync(System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.SendWindowsNativeNotificationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.SendWindowsNativeNotificationAsync(System.String,System.String)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.SubmitNotificationHubJobAsync(Microsoft.Azure.NotificationHubs.NotificationHubJob)
  - Microsoft.Azure.NotificationHubs.NotificationHubClient.UpdateRegistrationAsync``1(``0)
  langs:
  - csharp
  - vb
  name: NotificationHubClient
  nameWithType: NotificationHubClient
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient
  type: Class
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: NotificationHubClient
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 15
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nRepresents a notification hub client.\n"
  example: []
  syntax:
    content: public class NotificationHubClient
    content.vb: Public Class NotificationHubClient
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateClientFromConnectionString(System.String,System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateClientFromConnectionString(System.String,System.String)
  id: CreateClientFromConnectionString(System.String,System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: CreateClientFromConnectionString(String, String)
  nameWithType: NotificationHubClient.CreateClientFromConnectionString(String, String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateClientFromConnectionString(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: CreateClientFromConnectionString
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 46
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nCreates a client from connection string.\n"
  example: []
  syntax:
    content: public static NotificationHubClient CreateClientFromConnectionString(string connectionString, string notificationHubPath)
    content.vb: Public Shared Function CreateClientFromConnectionString(connectionString As String, notificationHubPath As String) As NotificationHubClient
    parameters:
    - id: connectionString
      type: System.String
      description: >-
        The connection string should have the Listen permission. <xref href="Microsoft.Azure.NotificationHubs.Messaging.AccessRights" data-throw-if-not-resolved="false"></xref> for

        information about the Listen permission.
    - id: notificationHubPath
      type: System.String
      description: >-
        The notification hub path. If the full path to the notification hub is

        https://yourNamespace.notificationhubs.windows.net/yourHub, then you would pass in "yourHub" for notificationPath.
    return:
      type: Microsoft.Azure.NotificationHubs.NotificationHubClient
      description: "\nThe created <xref href=\"Microsoft.Azure.NotificationHubs.NotificationHubClient\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateClientFromConnectionString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateClientFromConnectionString(System.String,System.String,System.Boolean)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateClientFromConnectionString(System.String,System.String,System.Boolean)
  id: CreateClientFromConnectionString(System.String,System.String,System.Boolean)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: CreateClientFromConnectionString(String, String, Boolean)
  nameWithType: NotificationHubClient.CreateClientFromConnectionString(String, String, Boolean)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateClientFromConnectionString(System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: CreateClientFromConnectionString
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 62
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nCreates a client from connection string.\n"
  example: []
  syntax:
    content: public static NotificationHubClient CreateClientFromConnectionString(string connectionString, string notificationHubPath, bool enableTestSend)
    content.vb: Public Shared Function CreateClientFromConnectionString(connectionString As String, notificationHubPath As String, enableTestSend As Boolean) As NotificationHubClient
    parameters:
    - id: connectionString
      type: System.String
      description: >-
        The connection string should have the Listen permission. <xref href="Microsoft.Azure.NotificationHubs.Messaging.AccessRights" data-throw-if-not-resolved="false"></xref> for

        information about the Listen permission.
    - id: notificationHubPath
      type: System.String
      description: >-
        The notification hub path. If the full path to the notification hub is

        https://yourNamespace.notificationhubs.windows.net/yourHub, then you would pass in "yourHub" for notificationPath.
    - id: enableTestSend
      type: System.Boolean
      description: Indicates if the NotificationHubClient should be used to send debug messages by setting <xref href="Microsoft.Azure.NotificationHubs.NotificationHubClient.EnableTestSend" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.Azure.NotificationHubs.NotificationHubClient
      description: "\nThe created <xref href=\"Microsoft.Azure.NotificationHubs.NotificationHubClient\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateClientFromConnectionString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.EnableTestSend
  commentId: P:Microsoft.Azure.NotificationHubs.NotificationHubClient.EnableTestSend
  id: EnableTestSend
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: EnableTestSend
  nameWithType: NotificationHubClient.EnableTestSend
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.EnableTestSend
  type: Property
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: EnableTestSend
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 79
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nGets or sets a value indicating whether the client enables a test send.\n"
  remarks: "\nWhen test send is enabled, the following occurs:\n<ul><li>All notifications only reach up to 10 devices for each send call.</li><li>The <strong>Send*</strong> methods return a list of the outcomes for all those notification deliveries. The possible outcomes are\nthe same as displayed in telemetry. Outcomes includes things like authentication errors, throttling errors, successful deliveries,\nand so on.</li></ul><p>This mode is for test purposes only, not for production, and is throttled.</p>\n"
  example: []
  syntax:
    content: public bool EnableTestSend { get; }
    content.vb: Public ReadOnly Property EnableTestSend As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the client enables a test send; otherwise, <code>false</code>.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.EnableTestSend*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendWindowsNativeNotificationAsync(System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.SendWindowsNativeNotificationAsync(System.String)
  id: SendWindowsNativeNotificationAsync(System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: SendWindowsNativeNotificationAsync(String)
  nameWithType: NotificationHubClient.SendWindowsNativeNotificationAsync(String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendWindowsNativeNotificationAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: SendWindowsNativeNotificationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 104
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously sends a Windows native notification. To specify headers for WNS, use the <xref href=\"Microsoft.Azure.NotificationHubs.NotificationHubClient.SendNotificationAsync(Microsoft.Azure.NotificationHubs.Notification)\" data-throw-if-not-resolved=\"false\"></xref> method.\n"
  example: []
  syntax:
    content: public Task<NotificationOutcome> SendWindowsNativeNotificationAsync(string windowsNativePayload)
    content.vb: Public Function SendWindowsNativeNotificationAsync(windowsNativePayload As String) As Task(Of NotificationOutcome)
    parameters:
    - id: windowsNativePayload
      type: System.String
      description: "The Windows native payload. This can be used to send any valid WNS notification, \nincluding Tile, Toast, and Badge values, as described in the WNS documentation."
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.NotificationOutcome}
      description: "\n<xref href=\"Microsoft.Azure.NotificationHubs.NotificationOutcome\" data-throw-if-not-resolved=\"false\"></xref> which describes the result of the Send operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendWindowsNativeNotificationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendWindowsNativeNotificationAsync(System.String,System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.SendWindowsNativeNotificationAsync(System.String,System.String)
  id: SendWindowsNativeNotificationAsync(System.String,System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: SendWindowsNativeNotificationAsync(String, String)
  nameWithType: NotificationHubClient.SendWindowsNativeNotificationAsync(String, String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendWindowsNativeNotificationAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: SendWindowsNativeNotificationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 117
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously sends a Windows native notification to a tag expression (a single tag \"tag\" is a valid tag expression). To specify headers for WNS, use the <xref href=\"Microsoft.Azure.NotificationHubs.NotificationHubClient.SendNotificationAsync(Microsoft.Azure.NotificationHubs.Notification)\" data-throw-if-not-resolved=\"false\"></xref> method.\n"
  example: []
  syntax:
    content: public Task<NotificationOutcome> SendWindowsNativeNotificationAsync(string windowsNativePayload, string tagExpression)
    content.vb: Public Function SendWindowsNativeNotificationAsync(windowsNativePayload As String, tagExpression As String) As Task(Of NotificationOutcome)
    parameters:
    - id: windowsNativePayload
      type: System.String
      description: The Windows native payload. This can be used to send any valid WNS notification, including Tile, Toast, and Badge values, as described in the WNS documentation.
    - id: tagExpression
      type: System.String
      description: 'A tag expression is any boolean expression constructed using the logical operators AND (&amp;&amp;), OR (||), NOT (!), and round parentheses. For example: (A || B) &amp;&amp; !C. If an expression uses only ORs, it can contain at most 20 tags. Other expressions are limited to 6 tags. Note that a single tag "A" is a valid expression.'
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.NotificationOutcome}
      description: "\n<xref href=\"Microsoft.Azure.NotificationHubs.NotificationOutcome\" data-throw-if-not-resolved=\"false\"></xref> which describes the result of the Send operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendWindowsNativeNotificationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendWindowsNativeNotificationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.SendWindowsNativeNotificationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  id: SendWindowsNativeNotificationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: SendWindowsNativeNotificationAsync(String, IEnumerable<String>)
  nameWithType: NotificationHubClient.SendWindowsNativeNotificationAsync(String, IEnumerable<String>)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendWindowsNativeNotificationAsync(System.String, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: SendWindowsNativeNotificationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 130
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously sends a Windows native notification to a non-empty set of tags (max 20). This is equivalent to a tag expression with boolean ORs (\"||\"). To specify headers for WNS, use the <xref href=\"Microsoft.Azure.NotificationHubs.NotificationHubClient.SendNotificationAsync(Microsoft.Azure.NotificationHubs.Notification)\" data-throw-if-not-resolved=\"false\"></xref> method.\n"
  example: []
  syntax:
    content: public Task<NotificationOutcome> SendWindowsNativeNotificationAsync(string windowsNativePayload, IEnumerable<string> tags)
    content.vb: Public Function SendWindowsNativeNotificationAsync(windowsNativePayload As String, tags As IEnumerable(Of String)) As Task(Of NotificationOutcome)
    parameters:
    - id: windowsNativePayload
      type: System.String
      description: The Windows native payload. This can be used to send any valid WNS notification, including Tile, Toast, and Badge values, as described in the WNS documentation.
    - id: tags
      type: System.Collections.Generic.IEnumerable{System.String}
      description: A non-empty set of tags (max 20 tags). Each string in the set can contain a single tag.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.NotificationOutcome}
      description: "\n<xref href=\"Microsoft.Azure.NotificationHubs.NotificationOutcome\" data-throw-if-not-resolved=\"false\"></xref> which describes the result of the Send operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendWindowsNativeNotificationAsync*
  nameWithType.vb: NotificationHubClient.SendWindowsNativeNotificationAsync(String, IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendWindowsNativeNotificationAsync(System.String, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: SendWindowsNativeNotificationAsync(String, IEnumerable(Of String))
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetNotificationHubJobAsync(System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.GetNotificationHubJobAsync(System.String)
  id: GetNotificationHubJobAsync(System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: GetNotificationHubJobAsync(String)
  nameWithType: NotificationHubClient.GetNotificationHubJobAsync(String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetNotificationHubJobAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: GetNotificationHubJobAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 157
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nGiven a jobId, returns the associated <xref href=\"Microsoft.Azure.NotificationHubs.NotificationHubJob\" data-throw-if-not-resolved=\"false\"></xref>. This method\nis used to get the status of the job to see if that job completed, failed, or is still in progress.\nThis API is only available for Standard namespaces.\n"
  example: []
  syntax:
    content: public Task<NotificationHubJob> GetNotificationHubJobAsync(string jobId)
    content.vb: Public Function GetNotificationHubJobAsync(jobId As String) As Task(Of NotificationHubJob)
    parameters:
    - id: jobId
      type: System.String
      description: The jobId is returned after creating a new job using <xref href="Microsoft.Azure.NotificationHubs.NotificationHubClient.SubmitNotificationHubJobAsync(Microsoft.Azure.NotificationHubs.NotificationHubJob)" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.NotificationHubJob}
      description: "\nThe current state of the <xref href=\"Microsoft.Azure.NotificationHubs.NotificationHubClient.SubmitNotificationHubJobAsync(Microsoft.Azure.NotificationHubs.NotificationHubJob)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetNotificationHubJobAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetNotificationHubJobsAsync
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.GetNotificationHubJobsAsync
  id: GetNotificationHubJobsAsync
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: GetNotificationHubJobsAsync()
  nameWithType: NotificationHubClient.GetNotificationHubJobsAsync()
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetNotificationHubJobsAsync()
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: GetNotificationHubJobsAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 170
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nReturns all known <xref href=\"Microsoft.Azure.NotificationHubs.NotificationHubJob\" data-throw-if-not-resolved=\"false\"></xref>s. This method\nis used to get the status of all job to see if those jobs completed, failed, or are still in progress.\nThis API is only available for Standard namespaces.\n"
  example: []
  syntax:
    content: public Task<IEnumerable<NotificationHubJob>> GetNotificationHubJobsAsync()
    content.vb: Public Function GetNotificationHubJobsAsync As Task(Of IEnumerable(Of NotificationHubJob))
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.Azure.NotificationHubs.NotificationHubJob}}
      description: "\nThe current state of the <xref href=\"Microsoft.Azure.NotificationHubs.NotificationHubJob\" data-throw-if-not-resolved=\"false\"></xref>s.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetNotificationHubJobsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SubmitNotificationHubJobAsync(Microsoft.Azure.NotificationHubs.NotificationHubJob)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.SubmitNotificationHubJobAsync(Microsoft.Azure.NotificationHubs.NotificationHubJob)
  id: SubmitNotificationHubJobAsync(Microsoft.Azure.NotificationHubs.NotificationHubJob)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: SubmitNotificationHubJobAsync(NotificationHubJob)
  nameWithType: NotificationHubClient.SubmitNotificationHubJobAsync(NotificationHubJob)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.SubmitNotificationHubJobAsync(Microsoft.Azure.NotificationHubs.NotificationHubJob)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: SubmitNotificationHubJobAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 184
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nCreates a <xref href=\"Microsoft.Azure.NotificationHubs.NotificationHubJob\" data-throw-if-not-resolved=\"false\"></xref>. This API is only\navailable for Standard namespaces.\n"
  example: []
  syntax:
    content: public Task<NotificationHubJob> SubmitNotificationHubJobAsync(NotificationHubJob job)
    content.vb: Public Function SubmitNotificationHubJobAsync(job As NotificationHubJob) As Task(Of NotificationHubJob)
    parameters:
    - id: job
      type: Microsoft.Azure.NotificationHubs.NotificationHubJob
      description: >-
        The <xref href="Microsoft.Azure.NotificationHubs.NotificationHubJob" data-throw-if-not-resolved="false"></xref> to

        export registrations, import registrations, or create registrations.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.NotificationHubJob}
      description: "\nThe submitted <xref href=\"Microsoft.Azure.NotificationHubs.NotificationHubJob\" data-throw-if-not-resolved=\"false\"></xref>s.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.SubmitNotificationHubJobAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAppleNativeNotificationAsync(System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAppleNativeNotificationAsync(System.String)
  id: SendAppleNativeNotificationAsync(System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: SendAppleNativeNotificationAsync(String)
  nameWithType: NotificationHubClient.SendAppleNativeNotificationAsync(String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAppleNativeNotificationAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: SendAppleNativeNotificationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 198
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nSends an Apple native notification. To specify an expiry, use the <xref href=\"Microsoft.Azure.NotificationHubs.NotificationHubClient.SendNotificationAsync(Microsoft.Azure.NotificationHubs.Notification)\" data-throw-if-not-resolved=\"false\"></xref> method.\n"
  example: []
  syntax:
    content: public Task<NotificationOutcome> SendAppleNativeNotificationAsync(string jsonPayload)
    content.vb: Public Function SendAppleNativeNotificationAsync(jsonPayload As String) As Task(Of NotificationOutcome)
    parameters:
    - id: jsonPayload
      type: System.String
      description: >-
        This is a valid Apple Push Notification Service (APNS) payload.

        Documentation on the APNS payload can be found

        <a href="https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ApplePushService.html">here</a>.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.NotificationOutcome}
      description: "\n<xref href=\"Microsoft.Azure.NotificationHubs.NotificationOutcome\" data-throw-if-not-resolved=\"false\"></xref> which describes the result of the Send operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAppleNativeNotificationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAppleNativeNotificationAsync(System.String,System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAppleNativeNotificationAsync(System.String,System.String)
  id: SendAppleNativeNotificationAsync(System.String,System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: SendAppleNativeNotificationAsync(String, String)
  nameWithType: NotificationHubClient.SendAppleNativeNotificationAsync(String, String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAppleNativeNotificationAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: SendAppleNativeNotificationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 213
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously sends an Apple native notification to a tag expression (a single tag \"tag\" is a valid tag expression). To specify an expiry, use the <xref href=\"Microsoft.Azure.NotificationHubs.NotificationHubClient.SendNotificationAsync(Microsoft.Azure.NotificationHubs.Notification)\" data-throw-if-not-resolved=\"false\"></xref> method.\n"
  example: []
  syntax:
    content: public Task<NotificationOutcome> SendAppleNativeNotificationAsync(string jsonPayload, string tagExpression)
    content.vb: Public Function SendAppleNativeNotificationAsync(jsonPayload As String, tagExpression As String) As Task(Of NotificationOutcome)
    parameters:
    - id: jsonPayload
      type: System.String
      description: >-
        This is a valid Apple Push Notification Service (APNS) payload.

        Documentation on the APNS payload can be found

        <a href="https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ApplePushService.html">here</a>.
    - id: tagExpression
      type: System.String
      description: 'A tag expression is any boolean expression constructed using the logical operators AND (&amp;&amp;), OR (||), NOT (!), and round parentheses. For example: (A || B) &amp;&amp; !C. If an expression uses only ORs, it can contain at most 20 tags. Other expressions are limited to 6 tags. Note that a single tag "A" is a valid expression.'
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.NotificationOutcome}
      description: "\n<xref href=\"Microsoft.Azure.NotificationHubs.NotificationOutcome\" data-throw-if-not-resolved=\"false\"></xref> which describes the result of the Send operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAppleNativeNotificationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAppleNativeNotificationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAppleNativeNotificationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  id: SendAppleNativeNotificationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: SendAppleNativeNotificationAsync(String, IEnumerable<String>)
  nameWithType: NotificationHubClient.SendAppleNativeNotificationAsync(String, IEnumerable<String>)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAppleNativeNotificationAsync(System.String, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: SendAppleNativeNotificationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 228
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously sends an Apple native notification to a non-empty set of tags (maximum 20). This is equivalent to a tagged expression with boolean ORs (\"||\"). To specify an expiry, use the <xref href=\"Microsoft.Azure.NotificationHubs.NotificationHubClient.SendNotificationAsync(Microsoft.Azure.NotificationHubs.Notification)\" data-throw-if-not-resolved=\"false\"></xref> method.\n"
  example: []
  syntax:
    content: public Task<NotificationOutcome> SendAppleNativeNotificationAsync(string jsonPayload, IEnumerable<string> tags)
    content.vb: Public Function SendAppleNativeNotificationAsync(jsonPayload As String, tags As IEnumerable(Of String)) As Task(Of NotificationOutcome)
    parameters:
    - id: jsonPayload
      type: System.String
      description: >-
        This is a valid Apple Push Notification Service (APNS) payload.

        Documentation on the APNS payload can be found

        <a href="https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ApplePushService.html">here</a>.
    - id: tags
      type: System.Collections.Generic.IEnumerable{System.String}
      description: A non-empty set of tags (maximum 20 tags). Each string in the set can contain a single tag.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.NotificationOutcome}
      description: "\n<xref href=\"Microsoft.Azure.NotificationHubs.NotificationOutcome\" data-throw-if-not-resolved=\"false\"></xref> which describes the result of the Send operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAppleNativeNotificationAsync*
  nameWithType.vb: NotificationHubClient.SendAppleNativeNotificationAsync(String, IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAppleNativeNotificationAsync(System.String, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: SendAppleNativeNotificationAsync(String, IEnumerable(Of String))
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendTemplateNotificationAsync(System.Collections.Generic.IDictionary{System.String,System.String})
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.SendTemplateNotificationAsync(System.Collections.Generic.IDictionary{System.String,System.String})
  id: SendTemplateNotificationAsync(System.Collections.Generic.IDictionary{System.String,System.String})
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: SendTemplateNotificationAsync(IDictionary<String, String>)
  nameWithType: NotificationHubClient.SendTemplateNotificationAsync(IDictionary<String, String>)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendTemplateNotificationAsync(System.Collections.Generic.IDictionary<System.String, System.String>)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: SendTemplateNotificationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 253
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nSends a template notification.\n"
  example: []
  syntax:
    content: public Task<NotificationOutcome> SendTemplateNotificationAsync(IDictionary<string, string> properties)
    content.vb: Public Function SendTemplateNotificationAsync(properties As IDictionary(Of String, String)) As Task(Of NotificationOutcome)
    parameters:
    - id: properties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: The properties to apply to the template.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.NotificationOutcome}
      description: "\n<xref href=\"Microsoft.Azure.NotificationHubs.NotificationOutcome\" data-throw-if-not-resolved=\"false\"></xref> which describes the result of the Send operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendTemplateNotificationAsync*
  nameWithType.vb: NotificationHubClient.SendTemplateNotificationAsync(IDictionary(Of String, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendTemplateNotificationAsync(System.Collections.Generic.IDictionary(Of System.String, System.String))
  name.vb: SendTemplateNotificationAsync(IDictionary(Of String, String))
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendTemplateNotificationAsync(System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.SendTemplateNotificationAsync(System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  id: SendTemplateNotificationAsync(System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: SendTemplateNotificationAsync(IDictionary<String, String>, String)
  nameWithType: NotificationHubClient.SendTemplateNotificationAsync(IDictionary<String, String>, String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendTemplateNotificationAsync(System.Collections.Generic.IDictionary<System.String, System.String>, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: SendTemplateNotificationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 266
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nSends a template notification to a tag expression (a single tag \"tag\" is a valid tag expression).\n"
  example: []
  syntax:
    content: public Task<NotificationOutcome> SendTemplateNotificationAsync(IDictionary<string, string> properties, string tagExpression)
    content.vb: Public Function SendTemplateNotificationAsync(properties As IDictionary(Of String, String), tagExpression As String) As Task(Of NotificationOutcome)
    parameters:
    - id: properties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: The properties to apply to the template.
    - id: tagExpression
      type: System.String
      description: 'A tag expression is any boolean expression constructed using the logical operators AND (&amp;&amp;), OR (||), NOT (!), and round parentheses. For example: (A || B) &amp;&amp; !C. If an expression uses only ORs, it can contain at most 20 tags. Other expressions are limited to 6 tags. Note that a single tag "A" is a valid expression.'
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.NotificationOutcome}
      description: "\n<xref href=\"Microsoft.Azure.NotificationHubs.NotificationOutcome\" data-throw-if-not-resolved=\"false\"></xref> which describes the result of the Send operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendTemplateNotificationAsync*
  nameWithType.vb: NotificationHubClient.SendTemplateNotificationAsync(IDictionary(Of String, String), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendTemplateNotificationAsync(System.Collections.Generic.IDictionary(Of System.String, System.String), System.String)
  name.vb: SendTemplateNotificationAsync(IDictionary(Of String, String), String)
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendTemplateNotificationAsync(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.SendTemplateNotificationAsync(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{System.String})
  id: SendTemplateNotificationAsync(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{System.String})
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: SendTemplateNotificationAsync(IDictionary<String, String>, IEnumerable<String>)
  nameWithType: NotificationHubClient.SendTemplateNotificationAsync(IDictionary<String, String>, IEnumerable<String>)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendTemplateNotificationAsync(System.Collections.Generic.IDictionary<System.String, System.String>, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: SendTemplateNotificationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 279
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nSends a template notification to a non-empty set of tags (maximum 20). This is equivalent to a tag expression with boolean ORs (\"||\").\n"
  example: []
  syntax:
    content: public Task<NotificationOutcome> SendTemplateNotificationAsync(IDictionary<string, string> properties, IEnumerable<string> tags)
    content.vb: Public Function SendTemplateNotificationAsync(properties As IDictionary(Of String, String), tags As IEnumerable(Of String)) As Task(Of NotificationOutcome)
    parameters:
    - id: properties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: The properties to apply to the template.
    - id: tags
      type: System.Collections.Generic.IEnumerable{System.String}
      description: A non-empty set of tags (maximum 20 tags). Each string in the set can contain a single tag.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.NotificationOutcome}
      description: "\n<xref href=\"Microsoft.Azure.NotificationHubs.NotificationOutcome\" data-throw-if-not-resolved=\"false\"></xref> which describes the result of the Send operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendTemplateNotificationAsync*
  nameWithType.vb: NotificationHubClient.SendTemplateNotificationAsync(IDictionary(Of String, String), IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendTemplateNotificationAsync(System.Collections.Generic.IDictionary(Of System.String, System.String), System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: SendTemplateNotificationAsync(IDictionary(Of String, String), IEnumerable(Of String))
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendGcmNativeNotificationAsync(System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.SendGcmNativeNotificationAsync(System.String)
  id: SendGcmNativeNotificationAsync(System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: SendGcmNativeNotificationAsync(String)
  nameWithType: NotificationHubClient.SendGcmNativeNotificationAsync(String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendGcmNativeNotificationAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: SendGcmNativeNotificationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 304
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nSends Google Cloud Messaging (GCM) native notification.\n"
  example: []
  syntax:
    content: public Task<NotificationOutcome> SendGcmNativeNotificationAsync(string jsonPayload)
    content.vb: Public Function SendGcmNativeNotificationAsync(jsonPayload As String) As Task(Of NotificationOutcome)
    parameters:
    - id: jsonPayload
      type: System.String
      description: The JSON payload. Documentation on proper formatting of a GCM message can be found <a href="https://developers.google.com/cloud-messaging/downstream#notifications_and_data_messages">here</a>.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.NotificationOutcome}
      description: "\n<xref href=\"Microsoft.Azure.NotificationHubs.NotificationOutcome\" data-throw-if-not-resolved=\"false\"></xref> which describes the result of the Send operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendGcmNativeNotificationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendGcmNativeNotificationAsync(System.String,System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.SendGcmNativeNotificationAsync(System.String,System.String)
  id: SendGcmNativeNotificationAsync(System.String,System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: SendGcmNativeNotificationAsync(String, String)
  nameWithType: NotificationHubClient.SendGcmNativeNotificationAsync(String, String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendGcmNativeNotificationAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: SendGcmNativeNotificationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 317
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nSends GCM native notification to a tag expression (a single tag \"tag\" is a valid tag expression).\n"
  example: []
  syntax:
    content: public Task<NotificationOutcome> SendGcmNativeNotificationAsync(string jsonPayload, string tagExpression)
    content.vb: Public Function SendGcmNativeNotificationAsync(jsonPayload As String, tagExpression As String) As Task(Of NotificationOutcome)
    parameters:
    - id: jsonPayload
      type: System.String
      description: The JSON payload. Documentation on proper formatting of a GCM message can be found <a href="https://developers.google.com/cloud-messaging/downstream#notifications_and_data_messages">here</a>.
    - id: tagExpression
      type: System.String
      description: 'A tag expression is any boolean expression constructed using the logical operators AND (&amp;&amp;), OR (||), NOT (!), and round parentheses. For example: (A || B) &amp;&amp; !C. If an expression uses only ORs, it can contain at most 20 tags. Other expressions are limited to 6 tags. Note that a single tag "A" is a valid expression.'
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.NotificationOutcome}
      description: "\n<xref href=\"Microsoft.Azure.NotificationHubs.NotificationOutcome\" data-throw-if-not-resolved=\"false\"></xref> which describes the result of the Send operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendGcmNativeNotificationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendGcmNativeNotificationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.SendGcmNativeNotificationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  id: SendGcmNativeNotificationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: SendGcmNativeNotificationAsync(String, IEnumerable<String>)
  nameWithType: NotificationHubClient.SendGcmNativeNotificationAsync(String, IEnumerable<String>)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendGcmNativeNotificationAsync(System.String, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: SendGcmNativeNotificationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 330
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nSends a GCM native notification to a non-empty set of tags (max 20). This is equivalent to a tag expression with boolean ORs (\"||\").\n"
  example: []
  syntax:
    content: public Task<NotificationOutcome> SendGcmNativeNotificationAsync(string jsonPayload, IEnumerable<string> tags)
    content.vb: Public Function SendGcmNativeNotificationAsync(jsonPayload As String, tags As IEnumerable(Of String)) As Task(Of NotificationOutcome)
    parameters:
    - id: jsonPayload
      type: System.String
      description: The JSON payload. Documentation on proper formatting of a GCM message can be found <a href="https://developers.google.com/cloud-messaging/downstream#notifications_and_data_messages">here</a>.
    - id: tags
      type: System.Collections.Generic.IEnumerable{System.String}
      description: A non-empty set of tags (maximum 20 tags). Each string in the set can contain a single tag.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.NotificationOutcome}
      description: "\n<xref href=\"Microsoft.Azure.NotificationHubs.NotificationOutcome\" data-throw-if-not-resolved=\"false\"></xref> which describes the result of the Send operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendGcmNativeNotificationAsync*
  nameWithType.vb: NotificationHubClient.SendGcmNativeNotificationAsync(String, IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendGcmNativeNotificationAsync(System.String, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: SendGcmNativeNotificationAsync(String, IEnumerable(Of String))
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendBaiduNativeNotificationAsync(System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.SendBaiduNativeNotificationAsync(System.String)
  id: SendBaiduNativeNotificationAsync(System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: SendBaiduNativeNotificationAsync(String)
  nameWithType: NotificationHubClient.SendBaiduNativeNotificationAsync(String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendBaiduNativeNotificationAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: SendBaiduNativeNotificationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 389
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nSends a Baidu native notification.\n"
  example: []
  syntax:
    content: public Task<NotificationOutcome> SendBaiduNativeNotificationAsync(string message)
    content.vb: Public Function SendBaiduNativeNotificationAsync(message As String) As Task(Of NotificationOutcome)
    parameters:
    - id: message
      type: System.String
      description: This is a json request. Baidu documents the format for the json <a href="http://push.baidu.com/doc/restapi/restapi">here</a>.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.NotificationOutcome}
      description: "\n<xref href=\"Microsoft.Azure.NotificationHubs.NotificationOutcome\" data-throw-if-not-resolved=\"false\"></xref> which describes the result of the Send operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendBaiduNativeNotificationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendBaiduNativeNotificationAsync(System.String,System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.SendBaiduNativeNotificationAsync(System.String,System.String)
  id: SendBaiduNativeNotificationAsync(System.String,System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: SendBaiduNativeNotificationAsync(String, String)
  nameWithType: NotificationHubClient.SendBaiduNativeNotificationAsync(String, String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendBaiduNativeNotificationAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: SendBaiduNativeNotificationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 402
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nSends Baidu native notification to a tag expression (a single tag \"tag\" is a valid tag expression).\n"
  example: []
  syntax:
    content: public Task<NotificationOutcome> SendBaiduNativeNotificationAsync(string message, string tagExpression)
    content.vb: Public Function SendBaiduNativeNotificationAsync(message As String, tagExpression As String) As Task(Of NotificationOutcome)
    parameters:
    - id: message
      type: System.String
      description: This is a json request. Baidu documents the format for the json <a href="http://push.baidu.com/doc/restapi/restapi">here</a>.
    - id: tagExpression
      type: System.String
      description: 'A tag expression is any boolean expression constructed using the logical operators AND (&amp;&amp;), OR (||), NOT (!), and round parentheses. For example: (A || B) &amp;&amp; !C. If an expression uses only ORs, it can contain at most 20 tags. Other expressions are limited to 6 tags. Note that a single tag "A" is a valid expression.'
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.NotificationOutcome}
      description: "\n<xref href=\"Microsoft.Azure.NotificationHubs.NotificationOutcome\" data-throw-if-not-resolved=\"false\"></xref> which describes the result of the Send operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendBaiduNativeNotificationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendBaiduNativeNotificationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.SendBaiduNativeNotificationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  id: SendBaiduNativeNotificationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: SendBaiduNativeNotificationAsync(String, IEnumerable<String>)
  nameWithType: NotificationHubClient.SendBaiduNativeNotificationAsync(String, IEnumerable<String>)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendBaiduNativeNotificationAsync(System.String, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: SendBaiduNativeNotificationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 415
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nSends Baidu native notification to a tag expression (a single tag \"tag\" is a valid tag expression).\n"
  example: []
  syntax:
    content: public Task<NotificationOutcome> SendBaiduNativeNotificationAsync(string message, IEnumerable<string> tags)
    content.vb: Public Function SendBaiduNativeNotificationAsync(message As String, tags As IEnumerable(Of String)) As Task(Of NotificationOutcome)
    parameters:
    - id: message
      type: System.String
      description: This is a json request. Baidu documents the format for the json <a href="http://push.baidu.com/doc/restapi/restapi">here</a>.
    - id: tags
      type: System.Collections.Generic.IEnumerable{System.String}
      description: A non-empty set of tags (maximum 20 tags). Each string in the set can contain a single tag.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.NotificationOutcome}
      description: "\n<xref href=\"Microsoft.Azure.NotificationHubs.NotificationOutcome\" data-throw-if-not-resolved=\"false\"></xref> which describes the result of the Send operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendBaiduNativeNotificationAsync*
  nameWithType.vb: NotificationHubClient.SendBaiduNativeNotificationAsync(String, IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendBaiduNativeNotificationAsync(System.String, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: SendBaiduNativeNotificationAsync(String, IEnumerable(Of String))
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAdmNativeNotificationAsync(System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAdmNativeNotificationAsync(System.String)
  id: SendAdmNativeNotificationAsync(System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: SendAdmNativeNotificationAsync(String)
  nameWithType: NotificationHubClient.SendAdmNativeNotificationAsync(String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAdmNativeNotificationAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: SendAdmNativeNotificationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 442
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nSends the Amazon Device Messaging (ADM) native notification.\n"
  example: []
  syntax:
    content: public Task<NotificationOutcome> SendAdmNativeNotificationAsync(string jsonPayload)
    content.vb: Public Function SendAdmNativeNotificationAsync(jsonPayload As String) As Task(Of NotificationOutcome)
    parameters:
    - id: jsonPayload
      type: System.String
      description: A valid, ADM JSON payload, described in detail <a href="https://developer.amazon.com/public/apis/engage/device-messaging/tech-docs/06-sending-a-message#Message Payloads and Uniqueness">here</a>.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.NotificationOutcome}
      description: "\n<xref href=\"Microsoft.Azure.NotificationHubs.NotificationOutcome\" data-throw-if-not-resolved=\"false\"></xref> which describes the result of the Send operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAdmNativeNotificationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAdmNativeNotificationAsync(System.String,System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAdmNativeNotificationAsync(System.String,System.String)
  id: SendAdmNativeNotificationAsync(System.String,System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: SendAdmNativeNotificationAsync(String, String)
  nameWithType: NotificationHubClient.SendAdmNativeNotificationAsync(String, String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAdmNativeNotificationAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: SendAdmNativeNotificationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 455
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nSends the Amazon Device Messaging (ADM) native notification.\n"
  example: []
  syntax:
    content: public Task<NotificationOutcome> SendAdmNativeNotificationAsync(string jsonPayload, string tagExpression)
    content.vb: Public Function SendAdmNativeNotificationAsync(jsonPayload As String, tagExpression As String) As Task(Of NotificationOutcome)
    parameters:
    - id: jsonPayload
      type: System.String
      description: A valid, ADM JSON payload, described in detail <a href="https://developer.amazon.com/public/apis/engage/device-messaging/tech-docs/06-sending-a-message#Message Payloads and Uniqueness">here</a>.
    - id: tagExpression
      type: System.String
      description: 'A tag expression is any boolean expression constructed using the logical operators AND (&amp;&amp;), OR (||), NOT (!), and round parentheses. For example: (A || B) &amp;&amp; !C. If an expression uses only ORs, it can contain at most 20 tags. Other expressions are limited to 6 tags. Note that a single tag "A" is a valid expression.'
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.NotificationOutcome}
      description: "\n<xref href=\"Microsoft.Azure.NotificationHubs.NotificationOutcome\" data-throw-if-not-resolved=\"false\"></xref> which describes the result of the Send operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAdmNativeNotificationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAdmNativeNotificationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAdmNativeNotificationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  id: SendAdmNativeNotificationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: SendAdmNativeNotificationAsync(String, IEnumerable<String>)
  nameWithType: NotificationHubClient.SendAdmNativeNotificationAsync(String, IEnumerable<String>)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAdmNativeNotificationAsync(System.String, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: SendAdmNativeNotificationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 468
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nSends the Amazon Device Messaging (ADM) native notification.\n"
  example: []
  syntax:
    content: public Task<NotificationOutcome> SendAdmNativeNotificationAsync(string jsonPayload, IEnumerable<string> tags)
    content.vb: Public Function SendAdmNativeNotificationAsync(jsonPayload As String, tags As IEnumerable(Of String)) As Task(Of NotificationOutcome)
    parameters:
    - id: jsonPayload
      type: System.String
      description: A valid, ADM JSON payload, described in detail <a href="https://developer.amazon.com/public/apis/engage/device-messaging/tech-docs/06-sending-a-message#Message Payloads and Uniqueness">here</a>.
    - id: tags
      type: System.Collections.Generic.IEnumerable{System.String}
      description: A non-empty set of tags (maximum 20 tags). Each string in the set can contain a single tag.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.NotificationOutcome}
      description: "\n<xref href=\"Microsoft.Azure.NotificationHubs.NotificationOutcome\" data-throw-if-not-resolved=\"false\"></xref> which describes the result of the Send operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAdmNativeNotificationAsync*
  nameWithType.vb: NotificationHubClient.SendAdmNativeNotificationAsync(String, IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAdmNativeNotificationAsync(System.String, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: SendAdmNativeNotificationAsync(String, IEnumerable(Of String))
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendMpnsNativeNotificationAsync(System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.SendMpnsNativeNotificationAsync(System.String)
  id: SendMpnsNativeNotificationAsync(System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: SendMpnsNativeNotificationAsync(String)
  nameWithType: NotificationHubClient.SendMpnsNativeNotificationAsync(String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendMpnsNativeNotificationAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: SendMpnsNativeNotificationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 493
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nSends a Microsoft Push Notification Service (MPNS) native notification. To specify headers for MPNS, use the <xref href=\"Microsoft.Azure.NotificationHubs.NotificationHubClient.SendNotificationAsync(Microsoft.Azure.NotificationHubs.Notification)\" data-throw-if-not-resolved=\"false\"></xref> method.\n"
  example: []
  syntax:
    content: public Task<NotificationOutcome> SendMpnsNativeNotificationAsync(string nativePayload)
    content.vb: Public Function SendMpnsNativeNotificationAsync(nativePayload As String) As Task(Of NotificationOutcome)
    parameters:
    - id: nativePayload
      type: System.String
      description: The native payload.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.NotificationOutcome}
      description: "\n<xref href=\"Microsoft.Azure.NotificationHubs.NotificationOutcome\" data-throw-if-not-resolved=\"false\"></xref> which describes the result of the Send operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendMpnsNativeNotificationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendMpnsNativeNotificationAsync(System.String,System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.SendMpnsNativeNotificationAsync(System.String,System.String)
  id: SendMpnsNativeNotificationAsync(System.String,System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: SendMpnsNativeNotificationAsync(String, String)
  nameWithType: NotificationHubClient.SendMpnsNativeNotificationAsync(String, String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendMpnsNativeNotificationAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: SendMpnsNativeNotificationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 506
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nSends a Microsoft Push Notification Service (MPNS) native notification to a tag expression (a single tag \"tag\" is a valid tag expression). To specify headers for MPNS, use the <xref href=\"Microsoft.Azure.NotificationHubs.NotificationHubClient.SendNotificationAsync(Microsoft.Azure.NotificationHubs.Notification)\" data-throw-if-not-resolved=\"false\"></xref> method.\n"
  example: []
  syntax:
    content: public Task<NotificationOutcome> SendMpnsNativeNotificationAsync(string nativePayload, string tagExpression)
    content.vb: Public Function SendMpnsNativeNotificationAsync(nativePayload As String, tagExpression As String) As Task(Of NotificationOutcome)
    parameters:
    - id: nativePayload
      type: System.String
      description: The native payload.
    - id: tagExpression
      type: System.String
      description: 'A tag expression is any boolean expression constructed using the logical operators AND (&amp;&amp;), OR (||), NOT (!), and round parentheses. For example: (A || B) &amp;&amp; !C. If an expression uses only ORs, it can contain at most 20 tags. Other expressions are limited to 6 tags. Note that a single tag "A" is a valid expression.'
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.NotificationOutcome}
      description: "\n<xref href=\"Microsoft.Azure.NotificationHubs.NotificationOutcome\" data-throw-if-not-resolved=\"false\"></xref> which describes the result of the Send operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendMpnsNativeNotificationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendMpnsNativeNotificationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.SendMpnsNativeNotificationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  id: SendMpnsNativeNotificationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: SendMpnsNativeNotificationAsync(String, IEnumerable<String>)
  nameWithType: NotificationHubClient.SendMpnsNativeNotificationAsync(String, IEnumerable<String>)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendMpnsNativeNotificationAsync(System.String, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: SendMpnsNativeNotificationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 519
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nSends a Microsoft Push Notification Service (MPNS) native notification to a non-empty set of tags (maximum 20). This is equivalent to a tag expression with boolean ORs (\"||\"). To specify headers for MPNS, use the <xref href=\"Microsoft.Azure.NotificationHubs.NotificationHubClient.SendNotificationAsync(Microsoft.Azure.NotificationHubs.Notification)\" data-throw-if-not-resolved=\"false\"></xref> method.\n"
  example: []
  syntax:
    content: public Task<NotificationOutcome> SendMpnsNativeNotificationAsync(string nativePayload, IEnumerable<string> tags)
    content.vb: Public Function SendMpnsNativeNotificationAsync(nativePayload As String, tags As IEnumerable(Of String)) As Task(Of NotificationOutcome)
    parameters:
    - id: nativePayload
      type: System.String
      description: The notification payload.
    - id: tags
      type: System.Collections.Generic.IEnumerable{System.String}
      description: A non-empty set of tags (maximum 20 tags). Each string in the set can contain a single tag.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.NotificationOutcome}
      description: "\n<xref href=\"Microsoft.Azure.NotificationHubs.NotificationOutcome\" data-throw-if-not-resolved=\"false\"></xref> which describes the result of the Send operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendMpnsNativeNotificationAsync*
  nameWithType.vb: NotificationHubClient.SendMpnsNativeNotificationAsync(String, IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendMpnsNativeNotificationAsync(System.String, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: SendMpnsNativeNotificationAsync(String, IEnumerable(Of String))
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendNotificationAsync(Microsoft.Azure.NotificationHubs.Notification)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.SendNotificationAsync(Microsoft.Azure.NotificationHubs.Notification)
  id: SendNotificationAsync(Microsoft.Azure.NotificationHubs.Notification)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: SendNotificationAsync(Notification)
  nameWithType: NotificationHubClient.SendNotificationAsync(Notification)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendNotificationAsync(Microsoft.Azure.NotificationHubs.Notification)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: SendNotificationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 540
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nSends a notification to a non-empty set of tags (max 20). This is equivalent to a tag expression with boolean ORs (\"||\").\n"
  example: []
  syntax:
    content: public Task<NotificationOutcome> SendNotificationAsync(Notification notification)
    content.vb: Public Function SendNotificationAsync(notification As Notification) As Task(Of NotificationOutcome)
    parameters:
    - id: notification
      type: Microsoft.Azure.NotificationHubs.Notification
      description: The notification to send.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.NotificationOutcome}
      description: "\n<xref href=\"Microsoft.Azure.NotificationHubs.NotificationOutcome\" data-throw-if-not-resolved=\"false\"></xref> which describes the result of the Send operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendNotificationAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: notification
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendNotificationAsync(Microsoft.Azure.NotificationHubs.Notification,System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.SendNotificationAsync(Microsoft.Azure.NotificationHubs.Notification,System.String)
  id: SendNotificationAsync(Microsoft.Azure.NotificationHubs.Notification,System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: SendNotificationAsync(Notification, String)
  nameWithType: NotificationHubClient.SendNotificationAsync(Notification, String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendNotificationAsync(Microsoft.Azure.NotificationHubs.Notification, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: SendNotificationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 560
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nSends a notification to a tag expression (a single tag \"tag\" is a valid tag expression).\n"
  example: []
  syntax:
    content: public Task<NotificationOutcome> SendNotificationAsync(Notification notification, string tagExpression)
    content.vb: Public Function SendNotificationAsync(notification As Notification, tagExpression As String) As Task(Of NotificationOutcome)
    parameters:
    - id: notification
      type: Microsoft.Azure.NotificationHubs.Notification
      description: The notification to send.
    - id: tagExpression
      type: System.String
      description: 'A tag expression is any boolean expression constructed using the logical operators AND (&amp;&amp;), OR (||), NOT (!), and round parentheses. For example: (A || B) &amp;&amp; !C. If an expression uses only ORs, it can contain at most 20 tags. Other expressions are limited to 6 tags. Note that a single tag "A" is a valid expression.'
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.NotificationOutcome}
      description: "\n<xref href=\"Microsoft.Azure.NotificationHubs.NotificationOutcome\" data-throw-if-not-resolved=\"false\"></xref> which describes the result of the Send operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendNotificationAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: notification
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: notification.Tag property should be null
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendNotificationAsync(Microsoft.Azure.NotificationHubs.Notification,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.SendNotificationAsync(Microsoft.Azure.NotificationHubs.Notification,System.Collections.Generic.IEnumerable{System.String})
  id: SendNotificationAsync(Microsoft.Azure.NotificationHubs.Notification,System.Collections.Generic.IEnumerable{System.String})
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: SendNotificationAsync(Notification, IEnumerable<String>)
  nameWithType: NotificationHubClient.SendNotificationAsync(Notification, IEnumerable<String>)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendNotificationAsync(Microsoft.Azure.NotificationHubs.Notification, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: SendNotificationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 591
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously sends a notification to a non-empty set of tags (max 20). This is equivalent to a tag expression with boolean ORs (\"||\").\n"
  example: []
  syntax:
    content: public Task<NotificationOutcome> SendNotificationAsync(Notification notification, IEnumerable<string> tags)
    content.vb: Public Function SendNotificationAsync(notification As Notification, tags As IEnumerable(Of String)) As Task(Of NotificationOutcome)
    parameters:
    - id: notification
      type: Microsoft.Azure.NotificationHubs.Notification
      description: The notification to send.
    - id: tags
      type: System.Collections.Generic.IEnumerable{System.String}
      description: A non-empty set of tags (max 20 tags). Each string in the set can contain a single tag.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.NotificationOutcome}
      description: "\n<xref href=\"Microsoft.Azure.NotificationHubs.NotificationOutcome\" data-throw-if-not-resolved=\"false\"></xref> which describes the result of the Send operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendNotificationAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThrown when notification or tag object is null\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nnotification.Tag property should not be null\nor\ntags argument should contain at least one tag\n"
  nameWithType.vb: NotificationHubClient.SendNotificationAsync(Notification, IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendNotificationAsync(Microsoft.Azure.NotificationHubs.Notification, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: SendNotificationAsync(Notification, IEnumerable(Of String))
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetNotificationOutcomeDetailsAsync(System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.GetNotificationOutcomeDetailsAsync(System.String)
  id: GetNotificationOutcomeDetailsAsync(System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: GetNotificationOutcomeDetailsAsync(String)
  nameWithType: NotificationHubClient.GetNotificationOutcomeDetailsAsync(String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetNotificationOutcomeDetailsAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: GetNotificationOutcomeDetailsAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 631
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nRetrieves the results of a Send* operation. This can retrieve intermediate results if the send is being processed\nor final results if the Send* has completed. This API can only be called for Standard namespaces.\n"
  example: []
  syntax:
    content: public Task<NotificationDetails> GetNotificationOutcomeDetailsAsync(string notificationId)
    content.vb: Public Function GetNotificationOutcomeDetailsAsync(notificationId As String) As Task(Of NotificationDetails)
    parameters:
    - id: notificationId
      type: System.String
      description: >-
        <xref href="Microsoft.Azure.NotificationHubs.NotificationOutcome.NotificationId" data-throw-if-not-resolved="false"></xref> which was returned
            when calling Send*.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.NotificationDetails}
      description: "\nThe result of the Send operation, as expressed by a <xref href=\"Microsoft.Azure.NotificationHubs.NotificationOutcome\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetNotificationOutcomeDetailsAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: notificationId
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetFeedbackContainerUriAsync
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.GetFeedbackContainerUriAsync
  id: GetFeedbackContainerUriAsync
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: GetFeedbackContainerUriAsync()
  nameWithType: NotificationHubClient.GetFeedbackContainerUriAsync()
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetFeedbackContainerUriAsync()
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: GetFeedbackContainerUriAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 645
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nGets the feedback container URI asynchronously.\n"
  example: []
  syntax:
    content: public Task<Uri> GetFeedbackContainerUriAsync()
    content.vb: Public Function GetFeedbackContainerUriAsync As Task(Of Uri)
    return:
      type: System.Threading.Tasks.Task{Uri}
      description: A task that represents the asynchronous operation.
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetFeedbackContainerUriAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateOrUpdateInstallation(Microsoft.Azure.NotificationHubs.Installation)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateOrUpdateInstallation(Microsoft.Azure.NotificationHubs.Installation)
  id: CreateOrUpdateInstallation(Microsoft.Azure.NotificationHubs.Installation)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: CreateOrUpdateInstallation(Installation)
  nameWithType: NotificationHubClient.CreateOrUpdateInstallation(Installation)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateOrUpdateInstallation(Microsoft.Azure.NotificationHubs.Installation)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: CreateOrUpdateInstallation
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 657
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nCreates or updates a device installation.\n"
  example: []
  syntax:
    content: public void CreateOrUpdateInstallation(Installation installation)
    content.vb: Public Sub CreateOrUpdateInstallation(installation As Installation)
    parameters:
    - id: installation
      type: Microsoft.Azure.NotificationHubs.Installation
      description: The device installation object.
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateOrUpdateInstallation*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateOrUpdateInstallationAsync(Microsoft.Azure.NotificationHubs.Installation)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateOrUpdateInstallationAsync(Microsoft.Azure.NotificationHubs.Installation)
  id: CreateOrUpdateInstallationAsync(Microsoft.Azure.NotificationHubs.Installation)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: CreateOrUpdateInstallationAsync(Installation)
  nameWithType: NotificationHubClient.CreateOrUpdateInstallationAsync(Installation)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateOrUpdateInstallationAsync(Microsoft.Azure.NotificationHubs.Installation)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: CreateOrUpdateInstallationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 669
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nCreates or updates a device installation asynchronously.\n"
  example: []
  syntax:
    content: public Task CreateOrUpdateInstallationAsync(Installation installation)
    content.vb: Public Function CreateOrUpdateInstallationAsync(installation As Installation) As Task
    parameters:
    - id: installation
      type: Microsoft.Azure.NotificationHubs.Installation
      description: The device installation object.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation.
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateOrUpdateInstallationAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when the installation object is null
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: InstallationId must be specified
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.PatchInstallation(System.String,System.Collections.Generic.IList{Microsoft.Azure.NotificationHubs.PartialUpdateOperation})
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.PatchInstallation(System.String,System.Collections.Generic.IList{Microsoft.Azure.NotificationHubs.PartialUpdateOperation})
  id: PatchInstallation(System.String,System.Collections.Generic.IList{Microsoft.Azure.NotificationHubs.PartialUpdateOperation})
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: PatchInstallation(String, IList<PartialUpdateOperation>)
  nameWithType: NotificationHubClient.PatchInstallation(String, IList<PartialUpdateOperation>)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.PatchInstallation(System.String, System.Collections.Generic.IList<Microsoft.Azure.NotificationHubs.PartialUpdateOperation>)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: PatchInstallation
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 689
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nPatches the installation.\n"
  example: []
  syntax:
    content: public void PatchInstallation(string installationId, IList<PartialUpdateOperation> operations)
    content.vb: Public Sub PatchInstallation(installationId As String, operations As IList(Of PartialUpdateOperation))
    parameters:
    - id: installationId
      type: System.String
      description: The installation identifier.
    - id: operations
      type: System.Collections.Generic.IList{Microsoft.Azure.NotificationHubs.PartialUpdateOperation}
      description: The collection of update operations.
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.PatchInstallation*
  nameWithType.vb: NotificationHubClient.PatchInstallation(String, IList(Of PartialUpdateOperation))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.NotificationHubs.NotificationHubClient.PatchInstallation(System.String, System.Collections.Generic.IList(Of Microsoft.Azure.NotificationHubs.PartialUpdateOperation))
  name.vb: PatchInstallation(String, IList(Of PartialUpdateOperation))
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.PatchInstallationAsync(System.String,System.Collections.Generic.IList{Microsoft.Azure.NotificationHubs.PartialUpdateOperation})
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.PatchInstallationAsync(System.String,System.Collections.Generic.IList{Microsoft.Azure.NotificationHubs.PartialUpdateOperation})
  id: PatchInstallationAsync(System.String,System.Collections.Generic.IList{Microsoft.Azure.NotificationHubs.PartialUpdateOperation})
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: PatchInstallationAsync(String, IList<PartialUpdateOperation>)
  nameWithType: NotificationHubClient.PatchInstallationAsync(String, IList<PartialUpdateOperation>)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.PatchInstallationAsync(System.String, System.Collections.Generic.IList<Microsoft.Azure.NotificationHubs.PartialUpdateOperation>)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: PatchInstallationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 704
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nPatches the installation asynchronously.\n"
  example: []
  syntax:
    content: public Task PatchInstallationAsync(string installationId, IList<PartialUpdateOperation> operations)
    content.vb: Public Function PatchInstallationAsync(installationId As String, operations As IList(Of PartialUpdateOperation)) As Task
    parameters:
    - id: installationId
      type: System.String
      description: The installation identifier.
    - id: operations
      type: System.Collections.Generic.IList{Microsoft.Azure.NotificationHubs.PartialUpdateOperation}
      description: The collection of update operations.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation.
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.PatchInstallationAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThrown when the installationId or operations object is null\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown when the operations list is empty
  nameWithType.vb: NotificationHubClient.PatchInstallationAsync(String, IList(Of PartialUpdateOperation))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.NotificationHubs.NotificationHubClient.PatchInstallationAsync(System.String, System.Collections.Generic.IList(Of Microsoft.Azure.NotificationHubs.PartialUpdateOperation))
  name.vb: PatchInstallationAsync(String, IList(Of PartialUpdateOperation))
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteInstallation(System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteInstallation(System.String)
  id: DeleteInstallation(System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: DeleteInstallation(String)
  nameWithType: NotificationHubClient.DeleteInstallation(String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteInstallation(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: DeleteInstallation
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 728
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nDeletes the installation.\n"
  example: []
  syntax:
    content: public void DeleteInstallation(string installationId)
    content.vb: Public Sub DeleteInstallation(installationId As String)
    parameters:
    - id: installationId
      type: System.String
      description: The installation identifier.
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteInstallation*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteInstallationAsync(System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteInstallationAsync(System.String)
  id: DeleteInstallationAsync(System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: DeleteInstallationAsync(String)
  nameWithType: NotificationHubClient.DeleteInstallationAsync(String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteInstallationAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: DeleteInstallationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 739
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nDeletes the installation asynchronously.\n"
  example: []
  syntax:
    content: public Task DeleteInstallationAsync(string installationId)
    content.vb: Public Function DeleteInstallationAsync(installationId As String) As Task
    parameters:
    - id: installationId
      type: System.String
      description: The installation identifier.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation.
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteInstallationAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when the installationId object is null
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetInstallation(System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.GetInstallation(System.String)
  id: GetInstallation(System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: GetInstallation(String)
  nameWithType: NotificationHubClient.GetInstallation(String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetInstallation(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: GetInstallation
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 754
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nGets a device installation object.\n"
  example: []
  syntax:
    content: public Installation GetInstallation(string installationId)
    content.vb: Public Function GetInstallation(installationId As String) As Installation
    parameters:
    - id: installationId
      type: System.String
      description: The installation identifier.
    return:
      type: Microsoft.Azure.NotificationHubs.Installation
      description: The device installation object
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetInstallation*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetInstallationAsync(System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.GetInstallationAsync(System.String)
  id: GetInstallationAsync(System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: GetInstallationAsync(String)
  nameWithType: NotificationHubClient.GetInstallationAsync(String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetInstallationAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: GetInstallationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 765
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nGets the installation asynchronously.\n"
  example: []
  syntax:
    content: public Task<Installation> GetInstallationAsync(string installationId)
    content.vb: Public Function GetInstallationAsync(installationId As String) As Task(Of Installation)
    parameters:
    - id: installationId
      type: System.String
      description: The installation identifier.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.Installation}
      description: A task that represents the asynchronous operation.
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetInstallationAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when the installationId object is null
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateRegistrationIdAsync
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateRegistrationIdAsync
  id: CreateRegistrationIdAsync
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: CreateRegistrationIdAsync()
  nameWithType: NotificationHubClient.CreateRegistrationIdAsync()
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateRegistrationIdAsync()
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: CreateRegistrationIdAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 785
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously creates a registration identifier.\n"
  example: []
  syntax:
    content: public Task<string> CreateRegistrationIdAsync()
    content.vb: Public Function CreateRegistrationIdAsync As Task(Of String)
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\nThe task object representing the asynchronous operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateRegistrationIdAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateWindowsNativeRegistrationAsync(System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateWindowsNativeRegistrationAsync(System.String)
  id: CreateWindowsNativeRegistrationAsync(System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: CreateWindowsNativeRegistrationAsync(String)
  nameWithType: NotificationHubClient.CreateWindowsNativeRegistrationAsync(String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateWindowsNativeRegistrationAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: CreateWindowsNativeRegistrationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 810
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously creates Windows native registration.\n"
  example: []
  syntax:
    content: public Task<WindowsRegistrationDescription> CreateWindowsNativeRegistrationAsync(string channelUri)
    content.vb: Public Function CreateWindowsNativeRegistrationAsync(channelUri As String) As Task(Of WindowsRegistrationDescription)
    parameters:
    - id: channelUri
      type: System.String
      description: The channel URI.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.WindowsRegistrationDescription}
      description: "\nThe task that completes the asynchronous operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateWindowsNativeRegistrationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateWindowsNativeRegistrationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateWindowsNativeRegistrationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  id: CreateWindowsNativeRegistrationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: CreateWindowsNativeRegistrationAsync(String, IEnumerable<String>)
  nameWithType: NotificationHubClient.CreateWindowsNativeRegistrationAsync(String, IEnumerable<String>)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateWindowsNativeRegistrationAsync(System.String, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: CreateWindowsNativeRegistrationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 823
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously creates Windows native registration.\n"
  example: []
  syntax:
    content: public Task<WindowsRegistrationDescription> CreateWindowsNativeRegistrationAsync(string channelUri, IEnumerable<string> tags)
    content.vb: Public Function CreateWindowsNativeRegistrationAsync(channelUri As String, tags As IEnumerable(Of String)) As Task(Of WindowsRegistrationDescription)
    parameters:
    - id: channelUri
      type: System.String
      description: The channel URI.
    - id: tags
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The tags.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.WindowsRegistrationDescription}
      description: "\nThe task that completes the asynchronous operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateWindowsNativeRegistrationAsync*
  nameWithType.vb: NotificationHubClient.CreateWindowsNativeRegistrationAsync(String, IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateWindowsNativeRegistrationAsync(System.String, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: CreateWindowsNativeRegistrationAsync(String, IEnumerable(Of String))
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateWindowsTemplateRegistrationAsync(System.String,System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateWindowsTemplateRegistrationAsync(System.String,System.String)
  id: CreateWindowsTemplateRegistrationAsync(System.String,System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: CreateWindowsTemplateRegistrationAsync(String, String)
  nameWithType: NotificationHubClient.CreateWindowsTemplateRegistrationAsync(String, String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateWindowsTemplateRegistrationAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: CreateWindowsTemplateRegistrationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 850
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously creates Windows template registration.\n"
  example: []
  syntax:
    content: public Task<WindowsTemplateRegistrationDescription> CreateWindowsTemplateRegistrationAsync(string channelUri, string xmlTemplate)
    content.vb: Public Function CreateWindowsTemplateRegistrationAsync(channelUri As String, xmlTemplate As String) As Task(Of WindowsTemplateRegistrationDescription)
    parameters:
    - id: channelUri
      type: System.String
      description: The channel URI.
    - id: xmlTemplate
      type: System.String
      description: The XML template.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.WindowsTemplateRegistrationDescription}
      description: "\nThe task that completes the asynchronous operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateWindowsTemplateRegistrationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateWindowsTemplateRegistrationAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateWindowsTemplateRegistrationAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})
  id: CreateWindowsTemplateRegistrationAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: CreateWindowsTemplateRegistrationAsync(String, String, IEnumerable<String>)
  nameWithType: NotificationHubClient.CreateWindowsTemplateRegistrationAsync(String, String, IEnumerable<String>)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateWindowsTemplateRegistrationAsync(System.String, System.String, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: CreateWindowsTemplateRegistrationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 864
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously creates Windows template registration.\n"
  example: []
  syntax:
    content: public Task<WindowsTemplateRegistrationDescription> CreateWindowsTemplateRegistrationAsync(string channelUri, string xmlTemplate, IEnumerable<string> tags)
    content.vb: Public Function CreateWindowsTemplateRegistrationAsync(channelUri As String, xmlTemplate As String, tags As IEnumerable(Of String)) As Task(Of WindowsTemplateRegistrationDescription)
    parameters:
    - id: channelUri
      type: System.String
      description: The channel URI.
    - id: xmlTemplate
      type: System.String
      description: The XML template.
    - id: tags
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The tags.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.WindowsTemplateRegistrationDescription}
      description: "\nThe task that completes the asynchronous operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateWindowsTemplateRegistrationAsync*
  nameWithType.vb: NotificationHubClient.CreateWindowsTemplateRegistrationAsync(String, String, IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateWindowsTemplateRegistrationAsync(System.String, System.String, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: CreateWindowsTemplateRegistrationAsync(String, String, IEnumerable(Of String))
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAppleNativeRegistrationAsync(System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAppleNativeRegistrationAsync(System.String)
  id: CreateAppleNativeRegistrationAsync(System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: CreateAppleNativeRegistrationAsync(String)
  nameWithType: NotificationHubClient.CreateAppleNativeRegistrationAsync(String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAppleNativeRegistrationAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: CreateAppleNativeRegistrationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 890
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously creates an Apple native registration.\n"
  example: []
  syntax:
    content: public Task<AppleRegistrationDescription> CreateAppleNativeRegistrationAsync(string deviceToken)
    content.vb: Public Function CreateAppleNativeRegistrationAsync(deviceToken As String) As Task(Of AppleRegistrationDescription)
    parameters:
    - id: deviceToken
      type: System.String
      description: The device token.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.AppleRegistrationDescription}
      description: "\nThe task that completes the asynchronous operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAppleNativeRegistrationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAppleNativeRegistrationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAppleNativeRegistrationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  id: CreateAppleNativeRegistrationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: CreateAppleNativeRegistrationAsync(String, IEnumerable<String>)
  nameWithType: NotificationHubClient.CreateAppleNativeRegistrationAsync(String, IEnumerable<String>)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAppleNativeRegistrationAsync(System.String, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: CreateAppleNativeRegistrationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 903
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously creates an Apple native registration.\n"
  example: []
  syntax:
    content: public Task<AppleRegistrationDescription> CreateAppleNativeRegistrationAsync(string deviceToken, IEnumerable<string> tags)
    content.vb: Public Function CreateAppleNativeRegistrationAsync(deviceToken As String, tags As IEnumerable(Of String)) As Task(Of AppleRegistrationDescription)
    parameters:
    - id: deviceToken
      type: System.String
      description: The device token.
    - id: tags
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The tags.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.AppleRegistrationDescription}
      description: "\nThe task that completes the asynchronous operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAppleNativeRegistrationAsync*
  nameWithType.vb: NotificationHubClient.CreateAppleNativeRegistrationAsync(String, IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAppleNativeRegistrationAsync(System.String, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: CreateAppleNativeRegistrationAsync(String, IEnumerable(Of String))
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAppleTemplateRegistrationAsync(System.String,System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAppleTemplateRegistrationAsync(System.String,System.String)
  id: CreateAppleTemplateRegistrationAsync(System.String,System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: CreateAppleTemplateRegistrationAsync(String, String)
  nameWithType: NotificationHubClient.CreateAppleTemplateRegistrationAsync(String, String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAppleTemplateRegistrationAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: CreateAppleTemplateRegistrationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 929
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously creates an Apple template registration. To specify additional properties at creation, use the <xref href=\"Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateRegistrationAsync%60%601(%60%600)\" data-throw-if-not-resolved=\"false\"></xref> method.\n"
  example: []
  syntax:
    content: public Task<AppleTemplateRegistrationDescription> CreateAppleTemplateRegistrationAsync(string deviceToken, string jsonPayload)
    content.vb: Public Function CreateAppleTemplateRegistrationAsync(deviceToken As String, jsonPayload As String) As Task(Of AppleTemplateRegistrationDescription)
    parameters:
    - id: deviceToken
      type: System.String
      description: The device token.
    - id: jsonPayload
      type: System.String
      description: The JSON payload.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.AppleTemplateRegistrationDescription}
      description: "\nThe task that completes the asynchronous operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAppleTemplateRegistrationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAppleTemplateRegistrationAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAppleTemplateRegistrationAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})
  id: CreateAppleTemplateRegistrationAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: CreateAppleTemplateRegistrationAsync(String, String, IEnumerable<String>)
  nameWithType: NotificationHubClient.CreateAppleTemplateRegistrationAsync(String, String, IEnumerable<String>)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAppleTemplateRegistrationAsync(System.String, System.String, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: CreateAppleTemplateRegistrationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 943
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously creates an Apple template registration. To specify additional properties at creation, use the <xref href=\"Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateRegistrationAsync%60%601(%60%600)\" data-throw-if-not-resolved=\"false\"></xref> method.\n"
  example: []
  syntax:
    content: public Task<AppleTemplateRegistrationDescription> CreateAppleTemplateRegistrationAsync(string deviceToken, string jsonPayload, IEnumerable<string> tags)
    content.vb: Public Function CreateAppleTemplateRegistrationAsync(deviceToken As String, jsonPayload As String, tags As IEnumerable(Of String)) As Task(Of AppleTemplateRegistrationDescription)
    parameters:
    - id: deviceToken
      type: System.String
      description: The device token.
    - id: jsonPayload
      type: System.String
      description: The JSON payload.
    - id: tags
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The tags.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.AppleTemplateRegistrationDescription}
      description: "\nThe task that completes the asynchronous operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAppleTemplateRegistrationAsync*
  nameWithType.vb: NotificationHubClient.CreateAppleTemplateRegistrationAsync(String, String, IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAppleTemplateRegistrationAsync(System.String, System.String, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: CreateAppleTemplateRegistrationAsync(String, String, IEnumerable(Of String))
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAdmNativeRegistrationAsync(System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAdmNativeRegistrationAsync(System.String)
  id: CreateAdmNativeRegistrationAsync(System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: CreateAdmNativeRegistrationAsync(String)
  nameWithType: NotificationHubClient.CreateAdmNativeRegistrationAsync(String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAdmNativeRegistrationAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: CreateAdmNativeRegistrationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 965
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously creates a native administrative registration.\n"
  example: []
  syntax:
    content: public Task<AdmRegistrationDescription> CreateAdmNativeRegistrationAsync(string admRegistrationId)
    content.vb: Public Function CreateAdmNativeRegistrationAsync(admRegistrationId As String) As Task(Of AdmRegistrationDescription)
    parameters:
    - id: admRegistrationId
      type: System.String
      description: The administrative registration identifier.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.AdmRegistrationDescription}
      description: "\nThe task object representing the asynchronous operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAdmNativeRegistrationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAdmNativeRegistrationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAdmNativeRegistrationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  id: CreateAdmNativeRegistrationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: CreateAdmNativeRegistrationAsync(String, IEnumerable<String>)
  nameWithType: NotificationHubClient.CreateAdmNativeRegistrationAsync(String, IEnumerable<String>)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAdmNativeRegistrationAsync(System.String, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: CreateAdmNativeRegistrationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 978
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously creates a native administrative registration.\n"
  example: []
  syntax:
    content: public Task<AdmRegistrationDescription> CreateAdmNativeRegistrationAsync(string admRegistrationId, IEnumerable<string> tags)
    content.vb: Public Function CreateAdmNativeRegistrationAsync(admRegistrationId As String, tags As IEnumerable(Of String)) As Task(Of AdmRegistrationDescription)
    parameters:
    - id: admRegistrationId
      type: System.String
      description: The administrative registration identifier.
    - id: tags
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The tags for the registration.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.AdmRegistrationDescription}
      description: "\nThe task object representing the asynchronous operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAdmNativeRegistrationAsync*
  nameWithType.vb: NotificationHubClient.CreateAdmNativeRegistrationAsync(String, IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAdmNativeRegistrationAsync(System.String, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: CreateAdmNativeRegistrationAsync(String, IEnumerable(Of String))
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAdmTemplateRegistrationAsync(System.String,System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAdmTemplateRegistrationAsync(System.String,System.String)
  id: CreateAdmTemplateRegistrationAsync(System.String,System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: CreateAdmTemplateRegistrationAsync(String, String)
  nameWithType: NotificationHubClient.CreateAdmTemplateRegistrationAsync(String, String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAdmTemplateRegistrationAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: CreateAdmTemplateRegistrationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 1001
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously creates an administrative template registration.\n"
  example: []
  syntax:
    content: public Task<AdmTemplateRegistrationDescription> CreateAdmTemplateRegistrationAsync(string admRegistrationId, string jsonPayload)
    content.vb: Public Function CreateAdmTemplateRegistrationAsync(admRegistrationId As String, jsonPayload As String) As Task(Of AdmTemplateRegistrationDescription)
    parameters:
    - id: admRegistrationId
      type: System.String
      description: The administrative registration identifier.
    - id: jsonPayload
      type: System.String
      description: The JSON payload.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.AdmTemplateRegistrationDescription}
      description: "\nThe task object representing the asynchronous operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAdmTemplateRegistrationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAdmTemplateRegistrationAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAdmTemplateRegistrationAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})
  id: CreateAdmTemplateRegistrationAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: CreateAdmTemplateRegistrationAsync(String, String, IEnumerable<String>)
  nameWithType: NotificationHubClient.CreateAdmTemplateRegistrationAsync(String, String, IEnumerable<String>)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAdmTemplateRegistrationAsync(System.String, System.String, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: CreateAdmTemplateRegistrationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 1015
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously creates an administrative template registration.\n"
  example: []
  syntax:
    content: public Task<AdmTemplateRegistrationDescription> CreateAdmTemplateRegistrationAsync(string admRegistrationId, string jsonPayload, IEnumerable<string> tags)
    content.vb: Public Function CreateAdmTemplateRegistrationAsync(admRegistrationId As String, jsonPayload As String, tags As IEnumerable(Of String)) As Task(Of AdmTemplateRegistrationDescription)
    parameters:
    - id: admRegistrationId
      type: System.String
      description: The administrative registration identifier.
    - id: jsonPayload
      type: System.String
      description: The JSON payload.
    - id: tags
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The tags.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.AdmTemplateRegistrationDescription}
      description: "\nThe task object representing the asynchronous operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAdmTemplateRegistrationAsync*
  nameWithType.vb: NotificationHubClient.CreateAdmTemplateRegistrationAsync(String, String, IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAdmTemplateRegistrationAsync(System.String, System.String, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: CreateAdmTemplateRegistrationAsync(String, String, IEnumerable(Of String))
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateGcmNativeRegistrationAsync(System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateGcmNativeRegistrationAsync(System.String)
  id: CreateGcmNativeRegistrationAsync(System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: CreateGcmNativeRegistrationAsync(String)
  nameWithType: NotificationHubClient.CreateGcmNativeRegistrationAsync(String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateGcmNativeRegistrationAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: CreateGcmNativeRegistrationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 1040
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously creates GCM native registration.\n"
  example: []
  syntax:
    content: public Task<GcmRegistrationDescription> CreateGcmNativeRegistrationAsync(string gcmRegistrationId)
    content.vb: Public Function CreateGcmNativeRegistrationAsync(gcmRegistrationId As String) As Task(Of GcmRegistrationDescription)
    parameters:
    - id: gcmRegistrationId
      type: System.String
      description: The GCM registration ID.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.GcmRegistrationDescription}
      description: "\nThe task that completes the asynchronous operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateGcmNativeRegistrationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateGcmNativeRegistrationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateGcmNativeRegistrationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  id: CreateGcmNativeRegistrationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: CreateGcmNativeRegistrationAsync(String, IEnumerable<String>)
  nameWithType: NotificationHubClient.CreateGcmNativeRegistrationAsync(String, IEnumerable<String>)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateGcmNativeRegistrationAsync(System.String, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: CreateGcmNativeRegistrationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 1053
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously creates GCM native registration.\n"
  example: []
  syntax:
    content: public Task<GcmRegistrationDescription> CreateGcmNativeRegistrationAsync(string gcmRegistrationId, IEnumerable<string> tags)
    content.vb: Public Function CreateGcmNativeRegistrationAsync(gcmRegistrationId As String, tags As IEnumerable(Of String)) As Task(Of GcmRegistrationDescription)
    parameters:
    - id: gcmRegistrationId
      type: System.String
      description: The GCM registration ID.
    - id: tags
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The tags.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.GcmRegistrationDescription}
      description: "\nThe task that completes the asynchronous operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateGcmNativeRegistrationAsync*
  nameWithType.vb: NotificationHubClient.CreateGcmNativeRegistrationAsync(String, IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateGcmNativeRegistrationAsync(System.String, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: CreateGcmNativeRegistrationAsync(String, IEnumerable(Of String))
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateGcmTemplateRegistrationAsync(System.String,System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateGcmTemplateRegistrationAsync(System.String,System.String)
  id: CreateGcmTemplateRegistrationAsync(System.String,System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: CreateGcmTemplateRegistrationAsync(String, String)
  nameWithType: NotificationHubClient.CreateGcmTemplateRegistrationAsync(String, String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateGcmTemplateRegistrationAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: CreateGcmTemplateRegistrationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 1079
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously creates GCM template registration.\n"
  example: []
  syntax:
    content: public Task<GcmTemplateRegistrationDescription> CreateGcmTemplateRegistrationAsync(string gcmRegistrationId, string jsonPayload)
    content.vb: Public Function CreateGcmTemplateRegistrationAsync(gcmRegistrationId As String, jsonPayload As String) As Task(Of GcmTemplateRegistrationDescription)
    parameters:
    - id: gcmRegistrationId
      type: System.String
      description: The GCM registration ID.
    - id: jsonPayload
      type: System.String
      description: The JSON payload.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.GcmTemplateRegistrationDescription}
      description: "\nThe task that completes the asynchronous operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateGcmTemplateRegistrationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateGcmTemplateRegistrationAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateGcmTemplateRegistrationAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})
  id: CreateGcmTemplateRegistrationAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: CreateGcmTemplateRegistrationAsync(String, String, IEnumerable<String>)
  nameWithType: NotificationHubClient.CreateGcmTemplateRegistrationAsync(String, String, IEnumerable<String>)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateGcmTemplateRegistrationAsync(System.String, System.String, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: CreateGcmTemplateRegistrationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 1093
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously creates GCM template registration.\n"
  example: []
  syntax:
    content: public Task<GcmTemplateRegistrationDescription> CreateGcmTemplateRegistrationAsync(string gcmRegistrationId, string jsonPayload, IEnumerable<string> tags)
    content.vb: Public Function CreateGcmTemplateRegistrationAsync(gcmRegistrationId As String, jsonPayload As String, tags As IEnumerable(Of String)) As Task(Of GcmTemplateRegistrationDescription)
    parameters:
    - id: gcmRegistrationId
      type: System.String
      description: The GCM registration ID.
    - id: jsonPayload
      type: System.String
      description: The JSON payload.
    - id: tags
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The tags.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.GcmTemplateRegistrationDescription}
      description: "\nThe task that completes the asynchronous operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateGcmTemplateRegistrationAsync*
  nameWithType.vb: NotificationHubClient.CreateGcmTemplateRegistrationAsync(String, String, IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateGcmTemplateRegistrationAsync(System.String, System.String, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: CreateGcmTemplateRegistrationAsync(String, String, IEnumerable(Of String))
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateBaiduNativeRegistrationAsync(System.String,System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateBaiduNativeRegistrationAsync(System.String,System.String)
  id: CreateBaiduNativeRegistrationAsync(System.String,System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: CreateBaiduNativeRegistrationAsync(String, String)
  nameWithType: NotificationHubClient.CreateBaiduNativeRegistrationAsync(String, String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateBaiduNativeRegistrationAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: CreateBaiduNativeRegistrationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 1160
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nCreates the baidu native registration asynchronously.\n"
  example: []
  syntax:
    content: public Task<BaiduRegistrationDescription> CreateBaiduNativeRegistrationAsync(string userId, string channelId)
    content.vb: Public Function CreateBaiduNativeRegistrationAsync(userId As String, channelId As String) As Task(Of BaiduRegistrationDescription)
    parameters:
    - id: userId
      type: System.String
      description: The user identifier.
    - id: channelId
      type: System.String
      description: The channel identifier.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.BaiduRegistrationDescription}
      description: A task that represents the asynchronous operation.
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateBaiduNativeRegistrationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateBaiduNativeRegistrationAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateBaiduNativeRegistrationAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})
  id: CreateBaiduNativeRegistrationAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: CreateBaiduNativeRegistrationAsync(String, String, IEnumerable<String>)
  nameWithType: NotificationHubClient.CreateBaiduNativeRegistrationAsync(String, String, IEnumerable<String>)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateBaiduNativeRegistrationAsync(System.String, System.String, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: CreateBaiduNativeRegistrationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 1172
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nCreates the baidu native registration asynchronously.\n"
  example: []
  syntax:
    content: public Task<BaiduRegistrationDescription> CreateBaiduNativeRegistrationAsync(string userId, string channelId, IEnumerable<string> tags)
    content.vb: Public Function CreateBaiduNativeRegistrationAsync(userId As String, channelId As String, tags As IEnumerable(Of String)) As Task(Of BaiduRegistrationDescription)
    parameters:
    - id: userId
      type: System.String
      description: The user identifier.
    - id: channelId
      type: System.String
      description: The channel identifier.
    - id: tags
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The tags.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.BaiduRegistrationDescription}
      description: A task that represents the asynchronous operation.
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateBaiduNativeRegistrationAsync*
  nameWithType.vb: NotificationHubClient.CreateBaiduNativeRegistrationAsync(String, String, IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateBaiduNativeRegistrationAsync(System.String, System.String, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: CreateBaiduNativeRegistrationAsync(String, String, IEnumerable(Of String))
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateBaiduTemplateRegistrationAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateBaiduTemplateRegistrationAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})
  id: CreateBaiduTemplateRegistrationAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: CreateBaiduTemplateRegistrationAsync(String, String, String, IEnumerable<String>)
  nameWithType: NotificationHubClient.CreateBaiduTemplateRegistrationAsync(String, String, String, IEnumerable<String>)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateBaiduTemplateRegistrationAsync(System.String, System.String, System.String, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: CreateBaiduTemplateRegistrationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 1200
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nCreates the baidu template registration asynchronously.\n"
  example: []
  syntax:
    content: public Task<BaiduTemplateRegistrationDescription> CreateBaiduTemplateRegistrationAsync(string userId, string channelId, string jsonPayload, IEnumerable<string> tags)
    content.vb: Public Function CreateBaiduTemplateRegistrationAsync(userId As String, channelId As String, jsonPayload As String, tags As IEnumerable(Of String)) As Task(Of BaiduTemplateRegistrationDescription)
    parameters:
    - id: userId
      type: System.String
      description: The user identifier.
    - id: channelId
      type: System.String
      description: The channel identifier.
    - id: jsonPayload
      type: System.String
      description: The json payload.
    - id: tags
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The tags.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.BaiduTemplateRegistrationDescription}
      description: A task that represents the asynchronous operation.
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateBaiduTemplateRegistrationAsync*
  nameWithType.vb: NotificationHubClient.CreateBaiduTemplateRegistrationAsync(String, String, String, IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateBaiduTemplateRegistrationAsync(System.String, System.String, System.String, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: CreateBaiduTemplateRegistrationAsync(String, String, String, IEnumerable(Of String))
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateBaiduTemplateRegistrationAsync(System.String,System.String,System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateBaiduTemplateRegistrationAsync(System.String,System.String,System.String)
  id: CreateBaiduTemplateRegistrationAsync(System.String,System.String,System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: CreateBaiduTemplateRegistrationAsync(String, String, String)
  nameWithType: NotificationHubClient.CreateBaiduTemplateRegistrationAsync(String, String, String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateBaiduTemplateRegistrationAsync(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: CreateBaiduTemplateRegistrationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 1213
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nCreates the baidu template registration asynchronously.\n"
  example: []
  syntax:
    content: public Task<BaiduTemplateRegistrationDescription> CreateBaiduTemplateRegistrationAsync(string userId, string channelId, string jsonPayload)
    content.vb: Public Function CreateBaiduTemplateRegistrationAsync(userId As String, channelId As String, jsonPayload As String) As Task(Of BaiduTemplateRegistrationDescription)
    parameters:
    - id: userId
      type: System.String
      description: The user identifier.
    - id: channelId
      type: System.String
      description: The channel identifier.
    - id: jsonPayload
      type: System.String
      description: The json payload.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.BaiduTemplateRegistrationDescription}
      description: A task that represents the asynchronous operation.
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateBaiduTemplateRegistrationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateMpnsNativeRegistrationAsync(System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateMpnsNativeRegistrationAsync(System.String)
  id: CreateMpnsNativeRegistrationAsync(System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: CreateMpnsNativeRegistrationAsync(String)
  nameWithType: NotificationHubClient.CreateMpnsNativeRegistrationAsync(String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateMpnsNativeRegistrationAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: CreateMpnsNativeRegistrationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 1256
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously creates MPNS native registration.\n"
  example: []
  syntax:
    content: public Task<MpnsRegistrationDescription> CreateMpnsNativeRegistrationAsync(string channelUri)
    content.vb: Public Function CreateMpnsNativeRegistrationAsync(channelUri As String) As Task(Of MpnsRegistrationDescription)
    parameters:
    - id: channelUri
      type: System.String
      description: The channel URI.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.MpnsRegistrationDescription}
      description: "\nThe task that completes the asynchronous operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateMpnsNativeRegistrationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateMpnsNativeRegistrationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateMpnsNativeRegistrationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  id: CreateMpnsNativeRegistrationAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: CreateMpnsNativeRegistrationAsync(String, IEnumerable<String>)
  nameWithType: NotificationHubClient.CreateMpnsNativeRegistrationAsync(String, IEnumerable<String>)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateMpnsNativeRegistrationAsync(System.String, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: CreateMpnsNativeRegistrationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 1269
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously creates MPNS native registration.\n"
  example: []
  syntax:
    content: public Task<MpnsRegistrationDescription> CreateMpnsNativeRegistrationAsync(string channelUri, IEnumerable<string> tags)
    content.vb: Public Function CreateMpnsNativeRegistrationAsync(channelUri As String, tags As IEnumerable(Of String)) As Task(Of MpnsRegistrationDescription)
    parameters:
    - id: channelUri
      type: System.String
      description: The channel URI.
    - id: tags
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The tags.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.MpnsRegistrationDescription}
      description: "\nThe task that completes the asynchronous operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateMpnsNativeRegistrationAsync*
  nameWithType.vb: NotificationHubClient.CreateMpnsNativeRegistrationAsync(String, IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateMpnsNativeRegistrationAsync(System.String, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: CreateMpnsNativeRegistrationAsync(String, IEnumerable(Of String))
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateMpnsTemplateRegistrationAsync(System.String,System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateMpnsTemplateRegistrationAsync(System.String,System.String)
  id: CreateMpnsTemplateRegistrationAsync(System.String,System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: CreateMpnsTemplateRegistrationAsync(String, String)
  nameWithType: NotificationHubClient.CreateMpnsTemplateRegistrationAsync(String, String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateMpnsTemplateRegistrationAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: CreateMpnsTemplateRegistrationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 1296
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously creates MPNS template registration. To specify additional properties at creation, use the <xref href=\"Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateRegistrationAsync%60%601(%60%600)\" data-throw-if-not-resolved=\"false\"></xref> method.\n"
  example: []
  syntax:
    content: public Task<MpnsTemplateRegistrationDescription> CreateMpnsTemplateRegistrationAsync(string channelUri, string xmlTemplate)
    content.vb: Public Function CreateMpnsTemplateRegistrationAsync(channelUri As String, xmlTemplate As String) As Task(Of MpnsTemplateRegistrationDescription)
    parameters:
    - id: channelUri
      type: System.String
      description: The channel URI.
    - id: xmlTemplate
      type: System.String
      description: The XML template.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.MpnsTemplateRegistrationDescription}
      description: "\nThe task that completes the asynchronous operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateMpnsTemplateRegistrationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateMpnsTemplateRegistrationAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateMpnsTemplateRegistrationAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})
  id: CreateMpnsTemplateRegistrationAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: CreateMpnsTemplateRegistrationAsync(String, String, IEnumerable<String>)
  nameWithType: NotificationHubClient.CreateMpnsTemplateRegistrationAsync(String, String, IEnumerable<String>)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateMpnsTemplateRegistrationAsync(System.String, System.String, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: CreateMpnsTemplateRegistrationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 1310
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously creates MPNS template registration. To specify additional properties at creation, use the <xref href=\"Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateRegistrationAsync%60%601(%60%600)\" data-throw-if-not-resolved=\"false\"></xref> method.\n"
  example: []
  syntax:
    content: public Task<MpnsTemplateRegistrationDescription> CreateMpnsTemplateRegistrationAsync(string channelUri, string xmlTemplate, IEnumerable<string> tags)
    content.vb: Public Function CreateMpnsTemplateRegistrationAsync(channelUri As String, xmlTemplate As String, tags As IEnumerable(Of String)) As Task(Of MpnsTemplateRegistrationDescription)
    parameters:
    - id: channelUri
      type: System.String
      description: The channel URI.
    - id: xmlTemplate
      type: System.String
      description: The XML template.
    - id: tags
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The tags.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.MpnsTemplateRegistrationDescription}
      description: "\nThe task that completes the asynchronous operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateMpnsTemplateRegistrationAsync*
  nameWithType.vb: NotificationHubClient.CreateMpnsTemplateRegistrationAsync(String, String, IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateMpnsTemplateRegistrationAsync(System.String, System.String, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: CreateMpnsTemplateRegistrationAsync(String, String, IEnumerable(Of String))
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateRegistrationAsync``1(``0)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateRegistrationAsync``1(``0)
  id: CreateRegistrationAsync``1(``0)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: CreateRegistrationAsync<T>(T)
  nameWithType: NotificationHubClient.CreateRegistrationAsync<T>(T)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateRegistrationAsync<T>(T)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: CreateRegistrationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 1337
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously creates a registration.\n"
  example: []
  syntax:
    content: 'public Task<T> CreateRegistrationAsync<T>(T registration)where T : RegistrationDescription'
    content.vb: Public Function CreateRegistrationAsync(Of T As RegistrationDescription)(registration As T) As Task(Of T)
    parameters:
    - id: registration
      type: '{T}'
      description: The registration to create.
    typeParameters:
    - id: T
      description: The type of registration.
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: "\nThe task that completes the asynchronous operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateRegistrationAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nNotificationHubPath in RegistrationDescription is not valid.\nor\nRegistrationId should be null or empty\n"
  nameWithType.vb: NotificationHubClient.CreateRegistrationAsync(Of T)(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateRegistrationAsync(Of T)(T)
  name.vb: CreateRegistrationAsync(Of T)(T)
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.UpdateRegistrationAsync``1(``0)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.UpdateRegistrationAsync``1(``0)
  id: UpdateRegistrationAsync``1(``0)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: UpdateRegistrationAsync<T>(T)
  nameWithType: NotificationHubClient.UpdateRegistrationAsync<T>(T)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.UpdateRegistrationAsync<T>(T)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: UpdateRegistrationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 1372
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously updates the registration.\n"
  example: []
  syntax:
    content: 'public Task<T> UpdateRegistrationAsync<T>(T registration)where T : RegistrationDescription'
    content.vb: Public Function UpdateRegistrationAsync(Of T As RegistrationDescription)(registration As T) As Task(Of T)
    parameters:
    - id: registration
      type: '{T}'
      description: The registration to update.
    typeParameters:
    - id: T
      description: The type of registration.
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: "\nA task that will complete when the update finishes.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.UpdateRegistrationAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThrown when RegistrationId or ETag object is null\n"
  nameWithType.vb: NotificationHubClient.UpdateRegistrationAsync(Of T)(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.NotificationHubs.NotificationHubClient.UpdateRegistrationAsync(Of T)(T)
  name.vb: UpdateRegistrationAsync(Of T)(T)
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateOrUpdateRegistrationAsync``1(``0)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateOrUpdateRegistrationAsync``1(``0)
  id: CreateOrUpdateRegistrationAsync``1(``0)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: CreateOrUpdateRegistrationAsync<T>(T)
  nameWithType: NotificationHubClient.CreateOrUpdateRegistrationAsync<T>(T)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateOrUpdateRegistrationAsync<T>(T)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: CreateOrUpdateRegistrationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 1396
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously creates or updates the client registration.\n"
  example: []
  syntax:
    content: 'public Task<T> CreateOrUpdateRegistrationAsync<T>(T registration)where T : RegistrationDescription'
    content.vb: Public Function CreateOrUpdateRegistrationAsync(Of T As RegistrationDescription)(registration As T) As Task(Of T)
    parameters:
    - id: registration
      type: '{T}'
      description: The registration to be created or updated.
    typeParameters:
    - id: T
      description: The type of registration.
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: "\nThe task object representing the asynchronous operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateOrUpdateRegistrationAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when RegistrationId object is null
  nameWithType.vb: NotificationHubClient.CreateOrUpdateRegistrationAsync(Of T)(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateOrUpdateRegistrationAsync(Of T)(T)
  name.vb: CreateOrUpdateRegistrationAsync(Of T)(T)
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetRegistrationAsync``1(System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.GetRegistrationAsync``1(System.String)
  id: GetRegistrationAsync``1(System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: GetRegistrationAsync<TRegistrationDescription>(String)
  nameWithType: NotificationHubClient.GetRegistrationAsync<TRegistrationDescription>(String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetRegistrationAsync<TRegistrationDescription>(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: GetRegistrationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 1423
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously retrieves a registration with a given ID. The type of the registration depends upon the specified TRegistrationDescription parameter.\n"
  example: []
  syntax:
    content: 'public Task<TRegistrationDescription> GetRegistrationAsync<TRegistrationDescription>(string registrationId)where TRegistrationDescription : RegistrationDescription'
    content.vb: Public Function GetRegistrationAsync(Of TRegistrationDescription As RegistrationDescription)(registrationId As String) As Task(Of TRegistrationDescription)
    parameters:
    - id: registrationId
      type: System.String
      description: The registration ID.
    typeParameters:
    - id: TRegistrationDescription
      description: The type of registration description.
    return:
      type: System.Threading.Tasks.Task{{TRegistrationDescription}}
      description: "\nThe task that completes the asynchronous operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetRegistrationAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when registrationId is null
  nameWithType.vb: NotificationHubClient.GetRegistrationAsync(Of TRegistrationDescription)(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetRegistrationAsync(Of TRegistrationDescription)(System.String)
  name.vb: GetRegistrationAsync(Of TRegistrationDescription)(String)
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetAllRegistrationsAsync(System.Int32)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.GetAllRegistrationsAsync(System.Int32)
  id: GetAllRegistrationsAsync(System.Int32)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: GetAllRegistrationsAsync(Int32)
  nameWithType: NotificationHubClient.GetAllRegistrationsAsync(Int32)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetAllRegistrationsAsync(System.Int32)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: GetAllRegistrationsAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 1456
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously retrieves all registrations in this notification hub.\n"
  example: []
  syntax:
    content: public Task<CollectionQueryResult<RegistrationDescription>> GetAllRegistrationsAsync(int top)
    content.vb: Public Function GetAllRegistrationsAsync(top As Integer) As Task(Of CollectionQueryResult(Of RegistrationDescription))
    parameters:
    - id: top
      type: System.Int32
      description: The location of the registration.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.CollectionQueryResult{Microsoft.Azure.NotificationHubs.RegistrationDescription}}
      description: "\nThe task that completes the asynchronous operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetAllRegistrationsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetAllRegistrationsAsync(System.String,System.Int32)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.GetAllRegistrationsAsync(System.String,System.Int32)
  id: GetAllRegistrationsAsync(System.String,System.Int32)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: GetAllRegistrationsAsync(String, Int32)
  nameWithType: NotificationHubClient.GetAllRegistrationsAsync(String, Int32)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetAllRegistrationsAsync(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: GetAllRegistrationsAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 1469
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously retrieves all registrations in this notification hub.\n"
  example: []
  syntax:
    content: public Task<CollectionQueryResult<RegistrationDescription>> GetAllRegistrationsAsync(string continuationToken, int top)
    content.vb: Public Function GetAllRegistrationsAsync(continuationToken As String, top As Integer) As Task(Of CollectionQueryResult(Of RegistrationDescription))
    parameters:
    - id: continuationToken
      type: System.String
      description: The continuation token.
    - id: top
      type: System.Int32
      description: The location of the registration.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.CollectionQueryResult{Microsoft.Azure.NotificationHubs.RegistrationDescription}}
      description: "\nThe task that completes the asynchronous operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetAllRegistrationsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetRegistrationsByChannelAsync(System.String,System.Int32)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.GetRegistrationsByChannelAsync(System.String,System.Int32)
  id: GetRegistrationsByChannelAsync(System.String,System.Int32)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: GetRegistrationsByChannelAsync(String, Int32)
  nameWithType: NotificationHubClient.GetRegistrationsByChannelAsync(String, Int32)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetRegistrationsByChannelAsync(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: GetRegistrationsByChannelAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 1495
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously gets the registrations by channel.\n"
  example: []
  syntax:
    content: public Task<CollectionQueryResult<RegistrationDescription>> GetRegistrationsByChannelAsync(string pnsHandle, int top)
    content.vb: Public Function GetRegistrationsByChannelAsync(pnsHandle As String, top As Integer) As Task(Of CollectionQueryResult(Of RegistrationDescription))
    parameters:
    - id: pnsHandle
      type: System.String
      description: The PNS handle.
    - id: top
      type: System.Int32
      description: The location of the registration.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.CollectionQueryResult{Microsoft.Azure.NotificationHubs.RegistrationDescription}}
      description: "\nThe task that completes the asynchronous operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetRegistrationsByChannelAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetRegistrationsByChannelAsync(System.String,System.String,System.Int32)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.GetRegistrationsByChannelAsync(System.String,System.String,System.Int32)
  id: GetRegistrationsByChannelAsync(System.String,System.String,System.Int32)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: GetRegistrationsByChannelAsync(String, String, Int32)
  nameWithType: NotificationHubClient.GetRegistrationsByChannelAsync(String, String, Int32)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetRegistrationsByChannelAsync(System.String, System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: GetRegistrationsByChannelAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 1510
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously gets the registrations by channel.\n"
  example: []
  syntax:
    content: public Task<CollectionQueryResult<RegistrationDescription>> GetRegistrationsByChannelAsync(string pnsHandle, string continuationToken, int top)
    content.vb: Public Function GetRegistrationsByChannelAsync(pnsHandle As String, continuationToken As String, top As Integer) As Task(Of CollectionQueryResult(Of RegistrationDescription))
    parameters:
    - id: pnsHandle
      type: System.String
      description: The PNS handle.
    - id: continuationToken
      type: System.String
      description: The continuation token.
    - id: top
      type: System.Int32
      description: The location of the registration.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.CollectionQueryResult{Microsoft.Azure.NotificationHubs.RegistrationDescription}}
      description: "\nThe task that completes the asynchronous operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetRegistrationsByChannelAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: pnsHandle
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteRegistrationAsync(Microsoft.Azure.NotificationHubs.RegistrationDescription)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteRegistrationAsync(Microsoft.Azure.NotificationHubs.RegistrationDescription)
  id: DeleteRegistrationAsync(Microsoft.Azure.NotificationHubs.RegistrationDescription)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: DeleteRegistrationAsync(RegistrationDescription)
  nameWithType: NotificationHubClient.DeleteRegistrationAsync(RegistrationDescription)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteRegistrationAsync(Microsoft.Azure.NotificationHubs.RegistrationDescription)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: DeleteRegistrationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 1538
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously deletes the registration.\n"
  example: []
  syntax:
    content: public Task DeleteRegistrationAsync(RegistrationDescription registration)
    content.vb: Public Function DeleteRegistrationAsync(registration As RegistrationDescription) As Task
    parameters:
    - id: registration
      type: Microsoft.Azure.NotificationHubs.RegistrationDescription
      description: The registration to delete.
    return:
      type: System.Threading.Tasks.Task
      description: "\nThe task that completes the asynchronous operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteRegistrationAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when registration object is null.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteRegistrationAsync(System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteRegistrationAsync(System.String)
  id: DeleteRegistrationAsync(System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: DeleteRegistrationAsync(String)
  nameWithType: NotificationHubClient.DeleteRegistrationAsync(String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteRegistrationAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: DeleteRegistrationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 1568
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously deletes the registration.\n"
  example: []
  syntax:
    content: public Task DeleteRegistrationAsync(string registrationId)
    content.vb: Public Function DeleteRegistrationAsync(registrationId As String) As Task
    parameters:
    - id: registrationId
      type: System.String
      description: The registration ID.
    return:
      type: System.Threading.Tasks.Task
      description: "\nThe task that completes the asynchronous operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteRegistrationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteRegistrationAsync(System.String,System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteRegistrationAsync(System.String,System.String)
  id: DeleteRegistrationAsync(System.String,System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: DeleteRegistrationAsync(String, String)
  nameWithType: NotificationHubClient.DeleteRegistrationAsync(String, String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteRegistrationAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: DeleteRegistrationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 1582
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously deletes the registration.\n"
  example: []
  syntax:
    content: public Task DeleteRegistrationAsync(string registrationId, string etag)
    content.vb: Public Function DeleteRegistrationAsync(registrationId As String, etag As String) As Task
    parameters:
    - id: registrationId
      type: System.String
      description: The registration ID.
    - id: etag
      type: System.String
      description: The entity tag.
    return:
      type: System.Threading.Tasks.Task
      description: "\nThe task that completes the asynchronous operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteRegistrationAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: registrationId
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteRegistrationsByChannelAsync(System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteRegistrationsByChannelAsync(System.String)
  id: DeleteRegistrationsByChannelAsync(System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: DeleteRegistrationsByChannelAsync(String)
  nameWithType: NotificationHubClient.DeleteRegistrationsByChannelAsync(String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteRegistrationsByChannelAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: DeleteRegistrationsByChannelAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 1608
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously deletes the registrations by channel.\n"
  example: []
  syntax:
    content: public Task DeleteRegistrationsByChannelAsync(string pnsHandle)
    content.vb: Public Function DeleteRegistrationsByChannelAsync(pnsHandle As String) As Task
    parameters:
    - id: pnsHandle
      type: System.String
      description: The PNS handle.
    return:
      type: System.Threading.Tasks.Task
      description: "\nThe task that completes the asynchronous operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteRegistrationsByChannelAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: pnsHandle
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.RegistrationExistsAsync(System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.RegistrationExistsAsync(System.String)
  id: RegistrationExistsAsync(System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: RegistrationExistsAsync(String)
  nameWithType: NotificationHubClient.RegistrationExistsAsync(String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.RegistrationExistsAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: RegistrationExistsAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 1633
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously indicates that the registration already exists.\n"
  example: []
  syntax:
    content: public Task<bool> RegistrationExistsAsync(string registrationId)
    content.vb: Public Function RegistrationExistsAsync(registrationId As String) As Task(Of Boolean)
    parameters:
    - id: registrationId
      type: System.String
      description: The registration ID.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nThe task that completes the asynchronous operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.RegistrationExistsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetRegistrationsByTagAsync(System.String,System.Int32)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.GetRegistrationsByTagAsync(System.String,System.Int32)
  id: GetRegistrationsByTagAsync(System.String,System.Int32)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: GetRegistrationsByTagAsync(String, Int32)
  nameWithType: NotificationHubClient.GetRegistrationsByTagAsync(String, Int32)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetRegistrationsByTagAsync(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: GetRegistrationsByTagAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 1651
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously gets the registrations by tag.\n"
  example: []
  syntax:
    content: public Task<CollectionQueryResult<RegistrationDescription>> GetRegistrationsByTagAsync(string tag, int top)
    content.vb: Public Function GetRegistrationsByTagAsync(tag As String, top As Integer) As Task(Of CollectionQueryResult(Of RegistrationDescription))
    parameters:
    - id: tag
      type: System.String
      description: The tag.
    - id: top
      type: System.Int32
      description: The location where to get the registrations.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.CollectionQueryResult{Microsoft.Azure.NotificationHubs.RegistrationDescription}}
      description: "\nThe task that completes the asynchronous operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetRegistrationsByTagAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetRegistrationsByTagAsync(System.String,System.String,System.Int32)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.GetRegistrationsByTagAsync(System.String,System.String,System.Int32)
  id: GetRegistrationsByTagAsync(System.String,System.String,System.Int32)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: GetRegistrationsByTagAsync(String, String, Int32)
  nameWithType: NotificationHubClient.GetRegistrationsByTagAsync(String, String, Int32)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetRegistrationsByTagAsync(System.String, System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: GetRegistrationsByTagAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 1674
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nAsynchronously gets the registrations by tag.\n"
  example: []
  syntax:
    content: public Task<CollectionQueryResult<RegistrationDescription>> GetRegistrationsByTagAsync(string tag, string continuationToken, int top)
    content.vb: Public Function GetRegistrationsByTagAsync(tag As String, continuationToken As String, top As Integer) As Task(Of CollectionQueryResult(Of RegistrationDescription))
    parameters:
    - id: tag
      type: System.String
      description: The tag.
    - id: continuationToken
      type: System.String
      description: The continuation token.
    - id: top
      type: System.Int32
      description: The location where to get the registrations.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.CollectionQueryResult{Microsoft.Azure.NotificationHubs.RegistrationDescription}}
      description: "\nThe task that completes the asynchronous operation.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetRegistrationsByTagAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when tag object is null
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.ScheduleNotificationAsync(Microsoft.Azure.NotificationHubs.Notification,System.DateTimeOffset)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.ScheduleNotificationAsync(Microsoft.Azure.NotificationHubs.Notification,System.DateTimeOffset)
  id: ScheduleNotificationAsync(Microsoft.Azure.NotificationHubs.Notification,System.DateTimeOffset)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: ScheduleNotificationAsync(Notification, DateTimeOffset)
  nameWithType: NotificationHubClient.ScheduleNotificationAsync(Notification, DateTimeOffset)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.ScheduleNotificationAsync(Microsoft.Azure.NotificationHubs.Notification, System.DateTimeOffset)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: ScheduleNotificationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 1719
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nSchedules the notification asynchronously.\n"
  example: []
  syntax:
    content: public Task<ScheduledNotification> ScheduleNotificationAsync(Notification notification, DateTimeOffset scheduledTime)
    content.vb: Public Function ScheduleNotificationAsync(notification As Notification, scheduledTime As DateTimeOffset) As Task(Of ScheduledNotification)
    parameters:
    - id: notification
      type: Microsoft.Azure.NotificationHubs.Notification
      description: The notification.
    - id: scheduledTime
      type: System.DateTimeOffset
      description: The scheduled time.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.ScheduledNotification}
      description: A task that represents the asynchronous operation.
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.ScheduleNotificationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.ScheduleNotificationAsync(Microsoft.Azure.NotificationHubs.Notification,System.DateTimeOffset,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.ScheduleNotificationAsync(Microsoft.Azure.NotificationHubs.Notification,System.DateTimeOffset,System.Collections.Generic.IEnumerable{System.String})
  id: ScheduleNotificationAsync(Microsoft.Azure.NotificationHubs.Notification,System.DateTimeOffset,System.Collections.Generic.IEnumerable{System.String})
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: ScheduleNotificationAsync(Notification, DateTimeOffset, IEnumerable<String>)
  nameWithType: NotificationHubClient.ScheduleNotificationAsync(Notification, DateTimeOffset, IEnumerable<String>)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.ScheduleNotificationAsync(Microsoft.Azure.NotificationHubs.Notification, System.DateTimeOffset, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: ScheduleNotificationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 1733
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nSchedules the notification asynchronously.\n"
  example: []
  syntax:
    content: public Task<ScheduledNotification> ScheduleNotificationAsync(Notification notification, DateTimeOffset scheduledTime, IEnumerable<string> tags)
    content.vb: Public Function ScheduleNotificationAsync(notification As Notification, scheduledTime As DateTimeOffset, tags As IEnumerable(Of String)) As Task(Of ScheduledNotification)
    parameters:
    - id: notification
      type: Microsoft.Azure.NotificationHubs.Notification
      description: The notification.
    - id: scheduledTime
      type: System.DateTimeOffset
      description: The scheduled time.
    - id: tags
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The tags.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.ScheduledNotification}
      description: A task that represents the asynchronous operation.
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.ScheduleNotificationAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when tags object is null
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: tags argument should contain at least one tag
  nameWithType.vb: NotificationHubClient.ScheduleNotificationAsync(Notification, DateTimeOffset, IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.NotificationHubs.NotificationHubClient.ScheduleNotificationAsync(Microsoft.Azure.NotificationHubs.Notification, System.DateTimeOffset, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: ScheduleNotificationAsync(Notification, DateTimeOffset, IEnumerable(Of String))
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.ScheduleNotificationAsync(Microsoft.Azure.NotificationHubs.Notification,System.DateTimeOffset,System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.ScheduleNotificationAsync(Microsoft.Azure.NotificationHubs.Notification,System.DateTimeOffset,System.String)
  id: ScheduleNotificationAsync(Microsoft.Azure.NotificationHubs.Notification,System.DateTimeOffset,System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: ScheduleNotificationAsync(Notification, DateTimeOffset, String)
  nameWithType: NotificationHubClient.ScheduleNotificationAsync(Notification, DateTimeOffset, String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.ScheduleNotificationAsync(Microsoft.Azure.NotificationHubs.Notification, System.DateTimeOffset, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: ScheduleNotificationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 1756
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nSchedules the notification asynchronously.\n"
  example: []
  syntax:
    content: public Task<ScheduledNotification> ScheduleNotificationAsync(Notification notification, DateTimeOffset scheduledTime, string tagExpression)
    content.vb: Public Function ScheduleNotificationAsync(notification As Notification, scheduledTime As DateTimeOffset, tagExpression As String) As Task(Of ScheduledNotification)
    parameters:
    - id: notification
      type: Microsoft.Azure.NotificationHubs.Notification
      description: The notification.
    - id: scheduledTime
      type: System.DateTimeOffset
      description: The scheduled time.
    - id: tagExpression
      type: System.String
      description: The tag expression.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.ScheduledNotification}
      description: A task that represents the asynchronous operation.
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.ScheduleNotificationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CancelNotificationAsync(System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.CancelNotificationAsync(System.String)
  id: CancelNotificationAsync(System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: CancelNotificationAsync(String)
  nameWithType: NotificationHubClient.CancelNotificationAsync(String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CancelNotificationAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: CancelNotificationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 1766
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nCancels the notification asynchronously.\n"
  example: []
  syntax:
    content: public Task CancelNotificationAsync(string scheduledNotificationId)
    content.vb: Public Function CancelNotificationAsync(scheduledNotificationId As String) As Task
    parameters:
    - id: scheduledNotificationId
      type: System.String
      description: The scheduled notification identifier.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation.
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.CancelNotificationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendDirectNotificationAsync(Microsoft.Azure.NotificationHubs.Notification,System.String)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.SendDirectNotificationAsync(Microsoft.Azure.NotificationHubs.Notification,System.String)
  id: SendDirectNotificationAsync(Microsoft.Azure.NotificationHubs.Notification,System.String)
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: SendDirectNotificationAsync(Notification, String)
  nameWithType: NotificationHubClient.SendDirectNotificationAsync(Notification, String)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendDirectNotificationAsync(Microsoft.Azure.NotificationHubs.Notification, System.String)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: SendDirectNotificationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 1787
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nSends a notification directly to a deviceHandle (a valid token as expressed by the Notification type).\nUsers of this API do not use Registrations or Installations. Instead, users of this API manage all devices\non their own and use Azure Notification Hub solely as a pass through service to communicate with\nthe various Push Notification Services.\n"
  example: []
  syntax:
    content: public Task<NotificationOutcome> SendDirectNotificationAsync(Notification notification, string deviceHandle)
    content.vb: Public Function SendDirectNotificationAsync(notification As Notification, deviceHandle As String) As Task(Of NotificationOutcome)
    parameters:
    - id: notification
      type: Microsoft.Azure.NotificationHubs.Notification
      description: A instance of a Notification, identifying which Push Notification Service to send to.
    - id: deviceHandle
      type: System.String
      description: A valid device identifier.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.NotificationOutcome}
      description: ''
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendDirectNotificationAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThrown when notification or deviceHandle object is null\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendDirectNotificationAsync(Microsoft.Azure.NotificationHubs.Notification,System.Collections.Generic.IList{System.String})
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.SendDirectNotificationAsync(Microsoft.Azure.NotificationHubs.Notification,System.Collections.Generic.IList{System.String})
  id: SendDirectNotificationAsync(Microsoft.Azure.NotificationHubs.Notification,System.Collections.Generic.IList{System.String})
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: SendDirectNotificationAsync(Notification, IList<String>)
  nameWithType: NotificationHubClient.SendDirectNotificationAsync(Notification, IList<String>)
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendDirectNotificationAsync(Microsoft.Azure.NotificationHubs.Notification, System.Collections.Generic.IList<System.String>)
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: SendDirectNotificationAsync
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 1814
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nSends a notification directly to all devices listed in deviceHandles (a valid tokens as expressed by the Notification type).\nUsers of this API do not use Registrations or Installations. Instead, users of this API manage all devices\non their own and use Azure Notification Hub solely as a pass through service to communicate with\nthe various Push Notification Services.\n"
  example: []
  syntax:
    content: public Task<NotificationOutcome> SendDirectNotificationAsync(Notification notification, IList<string> deviceHandles)
    content.vb: Public Function SendDirectNotificationAsync(notification As Notification, deviceHandles As IList(Of String)) As Task(Of NotificationOutcome)
    parameters:
    - id: notification
      type: Microsoft.Azure.NotificationHubs.Notification
      description: A instance of a Notification, identifying which Push Notification Service to send to.
    - id: deviceHandles
      type: System.Collections.Generic.IList{System.String}
      description: A list of valid device identifiers.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.NotificationOutcome}
      description: ''
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendDirectNotificationAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\nThrown when notification or deviceHandles object is null\n"
  nameWithType.vb: NotificationHubClient.SendDirectNotificationAsync(Notification, IList(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendDirectNotificationAsync(Microsoft.Azure.NotificationHubs.Notification, System.Collections.Generic.IList(Of System.String))
  name.vb: SendDirectNotificationAsync(Notification, IList(Of String))
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetBaseUri
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.GetBaseUri
  id: GetBaseUri
  parent: Microsoft.Azure.NotificationHubs.NotificationHubClient
  langs:
  - csharp
  - vb
  name: GetBaseUri()
  nameWithType: NotificationHubClient.GetBaseUri()
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetBaseUri()
  type: Method
  source:
    remote:
      path: src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
      branch: master
      repo: https://msazure.visualstudio.com/One/_git/AAPT-Mobile-Push
    id: GetBaseUri
    path: src/msazure-vso-notificationhubs/src/product/clients/Microsoft.Notifications/Notifications/NotificationHubClient.cs
    startLine: 1900
  assemblies:
  - Microsoft.Notifications
  namespace: Microsoft.Azure.NotificationHubs
  summary: "\nReturns the base URI for the notification hub client.\n"
  example: []
  syntax:
    content: public Uri GetBaseUri()
    content.vb: Public Function GetBaseUri As Uri
    return:
      type: Uri
      description: "\nThe base URI of the notification hub.\n"
  overload: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetBaseUri*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Azure.NotificationHubs
  commentId: N:Microsoft.Azure.NotificationHubs
  isExternal: false
  name: Microsoft.Azure.NotificationHubs
  nameWithType: Microsoft.Azure.NotificationHubs
  fullName: Microsoft.Azure.NotificationHubs
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.NotificationHubs.Messaging.AccessRights
  commentId: T:Microsoft.Azure.NotificationHubs.Messaging.AccessRights
  parent: Microsoft.Azure.NotificationHubs.Messaging
  isExternal: false
  name: AccessRights
  nameWithType: AccessRights
  fullName: Microsoft.Azure.NotificationHubs.Messaging.AccessRights
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient
  commentId: T:Microsoft.Azure.NotificationHubs.NotificationHubClient
  parent: Microsoft.Azure.NotificationHubs
  isExternal: false
  name: NotificationHubClient
  nameWithType: NotificationHubClient
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateClientFromConnectionString*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateClientFromConnectionString
  isExternal: false
  name: CreateClientFromConnectionString
  nameWithType: NotificationHubClient.CreateClientFromConnectionString
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateClientFromConnectionString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Azure.NotificationHubs.Messaging
  commentId: N:Microsoft.Azure.NotificationHubs.Messaging
  isExternal: false
  name: Microsoft.Azure.NotificationHubs.Messaging
  nameWithType: Microsoft.Azure.NotificationHubs.Messaging
  fullName: Microsoft.Azure.NotificationHubs.Messaging
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.EnableTestSend
  commentId: P:Microsoft.Azure.NotificationHubs.NotificationHubClient.EnableTestSend
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.EnableTestSend*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.EnableTestSend
  isExternal: false
  name: EnableTestSend
  nameWithType: NotificationHubClient.EnableTestSend
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.EnableTestSend
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendNotificationAsync(Microsoft.Azure.NotificationHubs.Notification)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.SendNotificationAsync(Microsoft.Azure.NotificationHubs.Notification)
- uid: Microsoft.Azure.NotificationHubs.NotificationOutcome
  commentId: T:Microsoft.Azure.NotificationHubs.NotificationOutcome
  isExternal: false
  name: NotificationOutcome
  nameWithType: NotificationOutcome
  fullName: Microsoft.Azure.NotificationHubs.NotificationOutcome
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendWindowsNativeNotificationAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.SendWindowsNativeNotificationAsync
  isExternal: false
  name: SendWindowsNativeNotificationAsync
  nameWithType: NotificationHubClient.SendWindowsNativeNotificationAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendWindowsNativeNotificationAsync
- uid: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.NotificationOutcome}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.NotificationOutcome}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<NotificationOutcome>
  nameWithType: Task<NotificationOutcome>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.NotificationHubs.NotificationOutcome>
  nameWithType.vb: Task(Of NotificationOutcome)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.NotificationHubs.NotificationOutcome)
  name.vb: Task(Of NotificationOutcome)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.NotificationHubs.NotificationOutcome
    name: NotificationOutcome
    nameWithType: NotificationOutcome
    fullName: Microsoft.Azure.NotificationHubs.NotificationOutcome
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.NotificationHubs.NotificationOutcome
    name: NotificationOutcome
    nameWithType: NotificationOutcome
    fullName: Microsoft.Azure.NotificationHubs.NotificationOutcome
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Azure.NotificationHubs.NotificationHubJob
  commentId: T:Microsoft.Azure.NotificationHubs.NotificationHubJob
  parent: Microsoft.Azure.NotificationHubs
  isExternal: false
  name: NotificationHubJob
  nameWithType: NotificationHubJob
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubJob
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SubmitNotificationHubJobAsync(Microsoft.Azure.NotificationHubs.NotificationHubJob)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.SubmitNotificationHubJobAsync(Microsoft.Azure.NotificationHubs.NotificationHubJob)
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetNotificationHubJobAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.GetNotificationHubJobAsync
  isExternal: false
  name: GetNotificationHubJobAsync
  nameWithType: NotificationHubClient.GetNotificationHubJobAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetNotificationHubJobAsync
- uid: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.NotificationHubJob}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.NotificationHubJob}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<NotificationHubJob>
  nameWithType: Task<NotificationHubJob>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.NotificationHubs.NotificationHubJob>
  nameWithType.vb: Task(Of NotificationHubJob)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.NotificationHubs.NotificationHubJob)
  name.vb: Task(Of NotificationHubJob)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.NotificationHubs.NotificationHubJob
    name: NotificationHubJob
    nameWithType: NotificationHubJob
    fullName: Microsoft.Azure.NotificationHubs.NotificationHubJob
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.NotificationHubs.NotificationHubJob
    name: NotificationHubJob
    nameWithType: NotificationHubJob
    fullName: Microsoft.Azure.NotificationHubs.NotificationHubJob
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetNotificationHubJobsAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.GetNotificationHubJobsAsync
  isExternal: false
  name: GetNotificationHubJobsAsync
  nameWithType: NotificationHubClient.GetNotificationHubJobsAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetNotificationHubJobsAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.Azure.NotificationHubs.NotificationHubJob}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.Azure.NotificationHubs.NotificationHubJob}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<NotificationHubJob>>
  nameWithType: Task<IEnumerable<NotificationHubJob>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Azure.NotificationHubs.NotificationHubJob>>
  nameWithType.vb: Task(Of IEnumerable(Of NotificationHubJob))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of Microsoft.Azure.NotificationHubs.NotificationHubJob))
  name.vb: Task(Of IEnumerable(Of NotificationHubJob))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.NotificationHubs.NotificationHubJob
    name: NotificationHubJob
    nameWithType: NotificationHubJob
    fullName: Microsoft.Azure.NotificationHubs.NotificationHubJob
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.NotificationHubs.NotificationHubJob
    name: NotificationHubJob
    nameWithType: NotificationHubJob
    fullName: Microsoft.Azure.NotificationHubs.NotificationHubJob
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SubmitNotificationHubJobAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.SubmitNotificationHubJobAsync
  isExternal: false
  name: SubmitNotificationHubJobAsync
  nameWithType: NotificationHubClient.SubmitNotificationHubJobAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.SubmitNotificationHubJobAsync
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAppleNativeNotificationAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAppleNativeNotificationAsync
  isExternal: false
  name: SendAppleNativeNotificationAsync
  nameWithType: NotificationHubClient.SendAppleNativeNotificationAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAppleNativeNotificationAsync
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendTemplateNotificationAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.SendTemplateNotificationAsync
  isExternal: false
  name: SendTemplateNotificationAsync
  nameWithType: NotificationHubClient.SendTemplateNotificationAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendTemplateNotificationAsync
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String>
  nameWithType: IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  nameWithType.vb: IDictionary(Of String, String)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendGcmNativeNotificationAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.SendGcmNativeNotificationAsync
  isExternal: false
  name: SendGcmNativeNotificationAsync
  nameWithType: NotificationHubClient.SendGcmNativeNotificationAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendGcmNativeNotificationAsync
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendBaiduNativeNotificationAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.SendBaiduNativeNotificationAsync
  isExternal: false
  name: SendBaiduNativeNotificationAsync
  nameWithType: NotificationHubClient.SendBaiduNativeNotificationAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendBaiduNativeNotificationAsync
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAdmNativeNotificationAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAdmNativeNotificationAsync
  isExternal: false
  name: SendAdmNativeNotificationAsync
  nameWithType: NotificationHubClient.SendAdmNativeNotificationAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendAdmNativeNotificationAsync
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendMpnsNativeNotificationAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.SendMpnsNativeNotificationAsync
  isExternal: false
  name: SendMpnsNativeNotificationAsync
  nameWithType: NotificationHubClient.SendMpnsNativeNotificationAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendMpnsNativeNotificationAsync
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendNotificationAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.SendNotificationAsync
  isExternal: false
  name: SendNotificationAsync
  nameWithType: NotificationHubClient.SendNotificationAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendNotificationAsync
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: Microsoft.Azure.NotificationHubs.Notification
  commentId: T:Microsoft.Azure.NotificationHubs.Notification
  parent: Microsoft.Azure.NotificationHubs
  isExternal: false
  name: Notification
  nameWithType: Notification
  fullName: Microsoft.Azure.NotificationHubs.Notification
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: Microsoft.Azure.NotificationHubs.NotificationOutcome.NotificationId
  commentId: P:Microsoft.Azure.NotificationHubs.NotificationOutcome.NotificationId
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetNotificationOutcomeDetailsAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.GetNotificationOutcomeDetailsAsync
  isExternal: false
  name: GetNotificationOutcomeDetailsAsync
  nameWithType: NotificationHubClient.GetNotificationOutcomeDetailsAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetNotificationOutcomeDetailsAsync
- uid: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.NotificationDetails}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.NotificationDetails}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<NotificationDetails>
  nameWithType: Task<NotificationDetails>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.NotificationHubs.NotificationDetails>
  nameWithType.vb: Task(Of NotificationDetails)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.NotificationHubs.NotificationDetails)
  name.vb: Task(Of NotificationDetails)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.NotificationHubs.NotificationDetails
    name: NotificationDetails
    nameWithType: NotificationDetails
    fullName: Microsoft.Azure.NotificationHubs.NotificationDetails
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.NotificationHubs.NotificationDetails
    name: NotificationDetails
    nameWithType: NotificationDetails
    fullName: Microsoft.Azure.NotificationHubs.NotificationDetails
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetFeedbackContainerUriAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.GetFeedbackContainerUriAsync
  isExternal: false
  name: GetFeedbackContainerUriAsync
  nameWithType: NotificationHubClient.GetFeedbackContainerUriAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetFeedbackContainerUriAsync
- uid: System.Threading.Tasks.Task{Uri}
  commentId: T:System.Threading.Tasks.Task{Uri}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Uri>
  nameWithType: Task<Uri>
  fullName: System.Threading.Tasks.Task<Uri>
  nameWithType.vb: Task(Of Uri)
  fullname.vb: System.Threading.Tasks.Task(Of Uri)
  name.vb: Task(Of Uri)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Uri
    name: Uri
    nameWithType: Uri
    fullName: Uri
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Uri
    name: Uri
    nameWithType: Uri
    fullName: Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateOrUpdateInstallation*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateOrUpdateInstallation
  isExternal: false
  name: CreateOrUpdateInstallation
  nameWithType: NotificationHubClient.CreateOrUpdateInstallation
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateOrUpdateInstallation
- uid: Microsoft.Azure.NotificationHubs.Installation
  commentId: T:Microsoft.Azure.NotificationHubs.Installation
  parent: Microsoft.Azure.NotificationHubs
  isExternal: false
  name: Installation
  nameWithType: Installation
  fullName: Microsoft.Azure.NotificationHubs.Installation
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateOrUpdateInstallationAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateOrUpdateInstallationAsync
  isExternal: false
  name: CreateOrUpdateInstallationAsync
  nameWithType: NotificationHubClient.CreateOrUpdateInstallationAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateOrUpdateInstallationAsync
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.PatchInstallation*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.PatchInstallation
  isExternal: false
  name: PatchInstallation
  nameWithType: NotificationHubClient.PatchInstallation
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.PatchInstallation
- uid: System.Collections.Generic.IList{Microsoft.Azure.NotificationHubs.PartialUpdateOperation}
  commentId: T:System.Collections.Generic.IList{Microsoft.Azure.NotificationHubs.PartialUpdateOperation}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<PartialUpdateOperation>
  nameWithType: IList<PartialUpdateOperation>
  fullName: System.Collections.Generic.IList<Microsoft.Azure.NotificationHubs.PartialUpdateOperation>
  nameWithType.vb: IList(Of PartialUpdateOperation)
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.Azure.NotificationHubs.PartialUpdateOperation)
  name.vb: IList(Of PartialUpdateOperation)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.NotificationHubs.PartialUpdateOperation
    name: PartialUpdateOperation
    nameWithType: PartialUpdateOperation
    fullName: Microsoft.Azure.NotificationHubs.PartialUpdateOperation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.NotificationHubs.PartialUpdateOperation
    name: PartialUpdateOperation
    nameWithType: PartialUpdateOperation
    fullName: Microsoft.Azure.NotificationHubs.PartialUpdateOperation
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.PatchInstallationAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.PatchInstallationAsync
  isExternal: false
  name: PatchInstallationAsync
  nameWithType: NotificationHubClient.PatchInstallationAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.PatchInstallationAsync
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteInstallation*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteInstallation
  isExternal: false
  name: DeleteInstallation
  nameWithType: NotificationHubClient.DeleteInstallation
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteInstallation
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteInstallationAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteInstallationAsync
  isExternal: false
  name: DeleteInstallationAsync
  nameWithType: NotificationHubClient.DeleteInstallationAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteInstallationAsync
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetInstallation*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.GetInstallation
  isExternal: false
  name: GetInstallation
  nameWithType: NotificationHubClient.GetInstallation
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetInstallation
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetInstallationAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.GetInstallationAsync
  isExternal: false
  name: GetInstallationAsync
  nameWithType: NotificationHubClient.GetInstallationAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetInstallationAsync
- uid: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.Installation}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.Installation}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Installation>
  nameWithType: Task<Installation>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.NotificationHubs.Installation>
  nameWithType.vb: Task(Of Installation)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.NotificationHubs.Installation)
  name.vb: Task(Of Installation)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.NotificationHubs.Installation
    name: Installation
    nameWithType: Installation
    fullName: Microsoft.Azure.NotificationHubs.Installation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.NotificationHubs.Installation
    name: Installation
    nameWithType: Installation
    fullName: Microsoft.Azure.NotificationHubs.Installation
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateRegistrationIdAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateRegistrationIdAsync
  isExternal: false
  name: CreateRegistrationIdAsync
  nameWithType: NotificationHubClient.CreateRegistrationIdAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateRegistrationIdAsync
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullname.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateWindowsNativeRegistrationAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateWindowsNativeRegistrationAsync
  isExternal: false
  name: CreateWindowsNativeRegistrationAsync
  nameWithType: NotificationHubClient.CreateWindowsNativeRegistrationAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateWindowsNativeRegistrationAsync
- uid: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.WindowsRegistrationDescription}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.WindowsRegistrationDescription}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<WindowsRegistrationDescription>
  nameWithType: Task<WindowsRegistrationDescription>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.NotificationHubs.WindowsRegistrationDescription>
  nameWithType.vb: Task(Of WindowsRegistrationDescription)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.NotificationHubs.WindowsRegistrationDescription)
  name.vb: Task(Of WindowsRegistrationDescription)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.NotificationHubs.WindowsRegistrationDescription
    name: WindowsRegistrationDescription
    nameWithType: WindowsRegistrationDescription
    fullName: Microsoft.Azure.NotificationHubs.WindowsRegistrationDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.NotificationHubs.WindowsRegistrationDescription
    name: WindowsRegistrationDescription
    nameWithType: WindowsRegistrationDescription
    fullName: Microsoft.Azure.NotificationHubs.WindowsRegistrationDescription
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateWindowsTemplateRegistrationAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateWindowsTemplateRegistrationAsync
  isExternal: false
  name: CreateWindowsTemplateRegistrationAsync
  nameWithType: NotificationHubClient.CreateWindowsTemplateRegistrationAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateWindowsTemplateRegistrationAsync
- uid: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.WindowsTemplateRegistrationDescription}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.WindowsTemplateRegistrationDescription}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<WindowsTemplateRegistrationDescription>
  nameWithType: Task<WindowsTemplateRegistrationDescription>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.NotificationHubs.WindowsTemplateRegistrationDescription>
  nameWithType.vb: Task(Of WindowsTemplateRegistrationDescription)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.NotificationHubs.WindowsTemplateRegistrationDescription)
  name.vb: Task(Of WindowsTemplateRegistrationDescription)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.NotificationHubs.WindowsTemplateRegistrationDescription
    name: WindowsTemplateRegistrationDescription
    nameWithType: WindowsTemplateRegistrationDescription
    fullName: Microsoft.Azure.NotificationHubs.WindowsTemplateRegistrationDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.NotificationHubs.WindowsTemplateRegistrationDescription
    name: WindowsTemplateRegistrationDescription
    nameWithType: WindowsTemplateRegistrationDescription
    fullName: Microsoft.Azure.NotificationHubs.WindowsTemplateRegistrationDescription
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAppleNativeRegistrationAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAppleNativeRegistrationAsync
  isExternal: false
  name: CreateAppleNativeRegistrationAsync
  nameWithType: NotificationHubClient.CreateAppleNativeRegistrationAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAppleNativeRegistrationAsync
- uid: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.AppleRegistrationDescription}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.AppleRegistrationDescription}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<AppleRegistrationDescription>
  nameWithType: Task<AppleRegistrationDescription>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.NotificationHubs.AppleRegistrationDescription>
  nameWithType.vb: Task(Of AppleRegistrationDescription)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.NotificationHubs.AppleRegistrationDescription)
  name.vb: Task(Of AppleRegistrationDescription)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.NotificationHubs.AppleRegistrationDescription
    name: AppleRegistrationDescription
    nameWithType: AppleRegistrationDescription
    fullName: Microsoft.Azure.NotificationHubs.AppleRegistrationDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.NotificationHubs.AppleRegistrationDescription
    name: AppleRegistrationDescription
    nameWithType: AppleRegistrationDescription
    fullName: Microsoft.Azure.NotificationHubs.AppleRegistrationDescription
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateRegistrationAsync``1(``0)
  commentId: M:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateRegistrationAsync``1(``0)
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAppleTemplateRegistrationAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAppleTemplateRegistrationAsync
  isExternal: false
  name: CreateAppleTemplateRegistrationAsync
  nameWithType: NotificationHubClient.CreateAppleTemplateRegistrationAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAppleTemplateRegistrationAsync
- uid: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.AppleTemplateRegistrationDescription}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.AppleTemplateRegistrationDescription}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<AppleTemplateRegistrationDescription>
  nameWithType: Task<AppleTemplateRegistrationDescription>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.NotificationHubs.AppleTemplateRegistrationDescription>
  nameWithType.vb: Task(Of AppleTemplateRegistrationDescription)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.NotificationHubs.AppleTemplateRegistrationDescription)
  name.vb: Task(Of AppleTemplateRegistrationDescription)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.NotificationHubs.AppleTemplateRegistrationDescription
    name: AppleTemplateRegistrationDescription
    nameWithType: AppleTemplateRegistrationDescription
    fullName: Microsoft.Azure.NotificationHubs.AppleTemplateRegistrationDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.NotificationHubs.AppleTemplateRegistrationDescription
    name: AppleTemplateRegistrationDescription
    nameWithType: AppleTemplateRegistrationDescription
    fullName: Microsoft.Azure.NotificationHubs.AppleTemplateRegistrationDescription
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAdmNativeRegistrationAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAdmNativeRegistrationAsync
  isExternal: false
  name: CreateAdmNativeRegistrationAsync
  nameWithType: NotificationHubClient.CreateAdmNativeRegistrationAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAdmNativeRegistrationAsync
- uid: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.AdmRegistrationDescription}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.AdmRegistrationDescription}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<AdmRegistrationDescription>
  nameWithType: Task<AdmRegistrationDescription>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.NotificationHubs.AdmRegistrationDescription>
  nameWithType.vb: Task(Of AdmRegistrationDescription)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.NotificationHubs.AdmRegistrationDescription)
  name.vb: Task(Of AdmRegistrationDescription)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.NotificationHubs.AdmRegistrationDescription
    name: AdmRegistrationDescription
    nameWithType: AdmRegistrationDescription
    fullName: Microsoft.Azure.NotificationHubs.AdmRegistrationDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.NotificationHubs.AdmRegistrationDescription
    name: AdmRegistrationDescription
    nameWithType: AdmRegistrationDescription
    fullName: Microsoft.Azure.NotificationHubs.AdmRegistrationDescription
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAdmTemplateRegistrationAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAdmTemplateRegistrationAsync
  isExternal: false
  name: CreateAdmTemplateRegistrationAsync
  nameWithType: NotificationHubClient.CreateAdmTemplateRegistrationAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateAdmTemplateRegistrationAsync
- uid: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.AdmTemplateRegistrationDescription}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.AdmTemplateRegistrationDescription}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<AdmTemplateRegistrationDescription>
  nameWithType: Task<AdmTemplateRegistrationDescription>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.NotificationHubs.AdmTemplateRegistrationDescription>
  nameWithType.vb: Task(Of AdmTemplateRegistrationDescription)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.NotificationHubs.AdmTemplateRegistrationDescription)
  name.vb: Task(Of AdmTemplateRegistrationDescription)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.NotificationHubs.AdmTemplateRegistrationDescription
    name: AdmTemplateRegistrationDescription
    nameWithType: AdmTemplateRegistrationDescription
    fullName: Microsoft.Azure.NotificationHubs.AdmTemplateRegistrationDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.NotificationHubs.AdmTemplateRegistrationDescription
    name: AdmTemplateRegistrationDescription
    nameWithType: AdmTemplateRegistrationDescription
    fullName: Microsoft.Azure.NotificationHubs.AdmTemplateRegistrationDescription
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateGcmNativeRegistrationAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateGcmNativeRegistrationAsync
  isExternal: false
  name: CreateGcmNativeRegistrationAsync
  nameWithType: NotificationHubClient.CreateGcmNativeRegistrationAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateGcmNativeRegistrationAsync
- uid: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.GcmRegistrationDescription}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.GcmRegistrationDescription}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<GcmRegistrationDescription>
  nameWithType: Task<GcmRegistrationDescription>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.NotificationHubs.GcmRegistrationDescription>
  nameWithType.vb: Task(Of GcmRegistrationDescription)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.NotificationHubs.GcmRegistrationDescription)
  name.vb: Task(Of GcmRegistrationDescription)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.NotificationHubs.GcmRegistrationDescription
    name: GcmRegistrationDescription
    nameWithType: GcmRegistrationDescription
    fullName: Microsoft.Azure.NotificationHubs.GcmRegistrationDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.NotificationHubs.GcmRegistrationDescription
    name: GcmRegistrationDescription
    nameWithType: GcmRegistrationDescription
    fullName: Microsoft.Azure.NotificationHubs.GcmRegistrationDescription
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateGcmTemplateRegistrationAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateGcmTemplateRegistrationAsync
  isExternal: false
  name: CreateGcmTemplateRegistrationAsync
  nameWithType: NotificationHubClient.CreateGcmTemplateRegistrationAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateGcmTemplateRegistrationAsync
- uid: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.GcmTemplateRegistrationDescription}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.GcmTemplateRegistrationDescription}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<GcmTemplateRegistrationDescription>
  nameWithType: Task<GcmTemplateRegistrationDescription>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.NotificationHubs.GcmTemplateRegistrationDescription>
  nameWithType.vb: Task(Of GcmTemplateRegistrationDescription)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.NotificationHubs.GcmTemplateRegistrationDescription)
  name.vb: Task(Of GcmTemplateRegistrationDescription)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.NotificationHubs.GcmTemplateRegistrationDescription
    name: GcmTemplateRegistrationDescription
    nameWithType: GcmTemplateRegistrationDescription
    fullName: Microsoft.Azure.NotificationHubs.GcmTemplateRegistrationDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.NotificationHubs.GcmTemplateRegistrationDescription
    name: GcmTemplateRegistrationDescription
    nameWithType: GcmTemplateRegistrationDescription
    fullName: Microsoft.Azure.NotificationHubs.GcmTemplateRegistrationDescription
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateBaiduNativeRegistrationAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateBaiduNativeRegistrationAsync
  isExternal: false
  name: CreateBaiduNativeRegistrationAsync
  nameWithType: NotificationHubClient.CreateBaiduNativeRegistrationAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateBaiduNativeRegistrationAsync
- uid: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.BaiduRegistrationDescription}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.BaiduRegistrationDescription}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<BaiduRegistrationDescription>
  nameWithType: Task<BaiduRegistrationDescription>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.NotificationHubs.BaiduRegistrationDescription>
  nameWithType.vb: Task(Of BaiduRegistrationDescription)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.NotificationHubs.BaiduRegistrationDescription)
  name.vb: Task(Of BaiduRegistrationDescription)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.NotificationHubs.BaiduRegistrationDescription
    name: BaiduRegistrationDescription
    nameWithType: BaiduRegistrationDescription
    fullName: Microsoft.Azure.NotificationHubs.BaiduRegistrationDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.NotificationHubs.BaiduRegistrationDescription
    name: BaiduRegistrationDescription
    nameWithType: BaiduRegistrationDescription
    fullName: Microsoft.Azure.NotificationHubs.BaiduRegistrationDescription
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateBaiduTemplateRegistrationAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateBaiduTemplateRegistrationAsync
  isExternal: false
  name: CreateBaiduTemplateRegistrationAsync
  nameWithType: NotificationHubClient.CreateBaiduTemplateRegistrationAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateBaiduTemplateRegistrationAsync
- uid: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.BaiduTemplateRegistrationDescription}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.BaiduTemplateRegistrationDescription}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<BaiduTemplateRegistrationDescription>
  nameWithType: Task<BaiduTemplateRegistrationDescription>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.NotificationHubs.BaiduTemplateRegistrationDescription>
  nameWithType.vb: Task(Of BaiduTemplateRegistrationDescription)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.NotificationHubs.BaiduTemplateRegistrationDescription)
  name.vb: Task(Of BaiduTemplateRegistrationDescription)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.NotificationHubs.BaiduTemplateRegistrationDescription
    name: BaiduTemplateRegistrationDescription
    nameWithType: BaiduTemplateRegistrationDescription
    fullName: Microsoft.Azure.NotificationHubs.BaiduTemplateRegistrationDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.NotificationHubs.BaiduTemplateRegistrationDescription
    name: BaiduTemplateRegistrationDescription
    nameWithType: BaiduTemplateRegistrationDescription
    fullName: Microsoft.Azure.NotificationHubs.BaiduTemplateRegistrationDescription
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateMpnsNativeRegistrationAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateMpnsNativeRegistrationAsync
  isExternal: false
  name: CreateMpnsNativeRegistrationAsync
  nameWithType: NotificationHubClient.CreateMpnsNativeRegistrationAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateMpnsNativeRegistrationAsync
- uid: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.MpnsRegistrationDescription}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.MpnsRegistrationDescription}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<MpnsRegistrationDescription>
  nameWithType: Task<MpnsRegistrationDescription>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.NotificationHubs.MpnsRegistrationDescription>
  nameWithType.vb: Task(Of MpnsRegistrationDescription)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.NotificationHubs.MpnsRegistrationDescription)
  name.vb: Task(Of MpnsRegistrationDescription)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.NotificationHubs.MpnsRegistrationDescription
    name: MpnsRegistrationDescription
    nameWithType: MpnsRegistrationDescription
    fullName: Microsoft.Azure.NotificationHubs.MpnsRegistrationDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.NotificationHubs.MpnsRegistrationDescription
    name: MpnsRegistrationDescription
    nameWithType: MpnsRegistrationDescription
    fullName: Microsoft.Azure.NotificationHubs.MpnsRegistrationDescription
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateMpnsTemplateRegistrationAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateMpnsTemplateRegistrationAsync
  isExternal: false
  name: CreateMpnsTemplateRegistrationAsync
  nameWithType: NotificationHubClient.CreateMpnsTemplateRegistrationAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateMpnsTemplateRegistrationAsync
- uid: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.MpnsTemplateRegistrationDescription}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.MpnsTemplateRegistrationDescription}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<MpnsTemplateRegistrationDescription>
  nameWithType: Task<MpnsTemplateRegistrationDescription>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.NotificationHubs.MpnsTemplateRegistrationDescription>
  nameWithType.vb: Task(Of MpnsTemplateRegistrationDescription)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.NotificationHubs.MpnsTemplateRegistrationDescription)
  name.vb: Task(Of MpnsTemplateRegistrationDescription)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.NotificationHubs.MpnsTemplateRegistrationDescription
    name: MpnsTemplateRegistrationDescription
    nameWithType: MpnsTemplateRegistrationDescription
    fullName: Microsoft.Azure.NotificationHubs.MpnsTemplateRegistrationDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.NotificationHubs.MpnsTemplateRegistrationDescription
    name: MpnsTemplateRegistrationDescription
    nameWithType: MpnsTemplateRegistrationDescription
    fullName: Microsoft.Azure.NotificationHubs.MpnsTemplateRegistrationDescription
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateRegistrationAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateRegistrationAsync
  isExternal: false
  name: CreateRegistrationAsync<T>
  nameWithType: NotificationHubClient.CreateRegistrationAsync<T>
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateRegistrationAsync<T>
  nameWithType.vb: NotificationHubClient.CreateRegistrationAsync(Of T)
  fullname.vb: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateRegistrationAsync(Of T)
  name.vb: CreateRegistrationAsync(Of T)
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullname.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.UpdateRegistrationAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.UpdateRegistrationAsync
  isExternal: false
  name: UpdateRegistrationAsync<T>
  nameWithType: NotificationHubClient.UpdateRegistrationAsync<T>
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.UpdateRegistrationAsync<T>
  nameWithType.vb: NotificationHubClient.UpdateRegistrationAsync(Of T)
  fullname.vb: Microsoft.Azure.NotificationHubs.NotificationHubClient.UpdateRegistrationAsync(Of T)
  name.vb: UpdateRegistrationAsync(Of T)
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateOrUpdateRegistrationAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateOrUpdateRegistrationAsync
  isExternal: false
  name: CreateOrUpdateRegistrationAsync<T>
  nameWithType: NotificationHubClient.CreateOrUpdateRegistrationAsync<T>
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateOrUpdateRegistrationAsync<T>
  nameWithType.vb: NotificationHubClient.CreateOrUpdateRegistrationAsync(Of T)
  fullname.vb: Microsoft.Azure.NotificationHubs.NotificationHubClient.CreateOrUpdateRegistrationAsync(Of T)
  name.vb: CreateOrUpdateRegistrationAsync(Of T)
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetRegistrationAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.GetRegistrationAsync
  isExternal: false
  name: GetRegistrationAsync<TRegistrationDescription>
  nameWithType: NotificationHubClient.GetRegistrationAsync<TRegistrationDescription>
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetRegistrationAsync<TRegistrationDescription>
  nameWithType.vb: NotificationHubClient.GetRegistrationAsync(Of TRegistrationDescription)
  fullname.vb: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetRegistrationAsync(Of TRegistrationDescription)
  name.vb: GetRegistrationAsync(Of TRegistrationDescription)
- uid: System.Threading.Tasks.Task{{TRegistrationDescription}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TRegistrationDescription>
  nameWithType: Task<TRegistrationDescription>
  fullName: System.Threading.Tasks.Task<TRegistrationDescription>
  nameWithType.vb: Task(Of TRegistrationDescription)
  fullname.vb: System.Threading.Tasks.Task(Of TRegistrationDescription)
  name.vb: Task(Of TRegistrationDescription)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRegistrationDescription
    nameWithType: TRegistrationDescription
    fullName: TRegistrationDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRegistrationDescription
    nameWithType: TRegistrationDescription
    fullName: TRegistrationDescription
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetAllRegistrationsAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.GetAllRegistrationsAsync
  isExternal: false
  name: GetAllRegistrationsAsync
  nameWithType: NotificationHubClient.GetAllRegistrationsAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetAllRegistrationsAsync
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.CollectionQueryResult{Microsoft.Azure.NotificationHubs.RegistrationDescription}}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.CollectionQueryResult{Microsoft.Azure.NotificationHubs.RegistrationDescription}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<CollectionQueryResult<RegistrationDescription>>
  nameWithType: Task<CollectionQueryResult<RegistrationDescription>>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.NotificationHubs.CollectionQueryResult<Microsoft.Azure.NotificationHubs.RegistrationDescription>>
  nameWithType.vb: Task(Of CollectionQueryResult(Of RegistrationDescription))
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.NotificationHubs.CollectionQueryResult(Of Microsoft.Azure.NotificationHubs.RegistrationDescription))
  name.vb: Task(Of CollectionQueryResult(Of RegistrationDescription))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.NotificationHubs.CollectionQueryResult`1
    name: CollectionQueryResult
    nameWithType: CollectionQueryResult
    fullName: Microsoft.Azure.NotificationHubs.CollectionQueryResult
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.NotificationHubs.RegistrationDescription
    name: RegistrationDescription
    nameWithType: RegistrationDescription
    fullName: Microsoft.Azure.NotificationHubs.RegistrationDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.NotificationHubs.CollectionQueryResult`1
    name: CollectionQueryResult
    nameWithType: CollectionQueryResult
    fullName: Microsoft.Azure.NotificationHubs.CollectionQueryResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.NotificationHubs.RegistrationDescription
    name: RegistrationDescription
    nameWithType: RegistrationDescription
    fullName: Microsoft.Azure.NotificationHubs.RegistrationDescription
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetRegistrationsByChannelAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.GetRegistrationsByChannelAsync
  isExternal: false
  name: GetRegistrationsByChannelAsync
  nameWithType: NotificationHubClient.GetRegistrationsByChannelAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetRegistrationsByChannelAsync
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteRegistrationAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteRegistrationAsync
  isExternal: false
  name: DeleteRegistrationAsync
  nameWithType: NotificationHubClient.DeleteRegistrationAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteRegistrationAsync
- uid: Microsoft.Azure.NotificationHubs.RegistrationDescription
  commentId: T:Microsoft.Azure.NotificationHubs.RegistrationDescription
  parent: Microsoft.Azure.NotificationHubs
  isExternal: false
  name: RegistrationDescription
  nameWithType: RegistrationDescription
  fullName: Microsoft.Azure.NotificationHubs.RegistrationDescription
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteRegistrationsByChannelAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteRegistrationsByChannelAsync
  isExternal: false
  name: DeleteRegistrationsByChannelAsync
  nameWithType: NotificationHubClient.DeleteRegistrationsByChannelAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.DeleteRegistrationsByChannelAsync
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.RegistrationExistsAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.RegistrationExistsAsync
  isExternal: false
  name: RegistrationExistsAsync
  nameWithType: NotificationHubClient.RegistrationExistsAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.RegistrationExistsAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullname.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetRegistrationsByTagAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.GetRegistrationsByTagAsync
  isExternal: false
  name: GetRegistrationsByTagAsync
  nameWithType: NotificationHubClient.GetRegistrationsByTagAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetRegistrationsByTagAsync
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.ScheduleNotificationAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.ScheduleNotificationAsync
  isExternal: false
  name: ScheduleNotificationAsync
  nameWithType: NotificationHubClient.ScheduleNotificationAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.ScheduleNotificationAsync
- uid: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
  parent: System
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.ScheduledNotification}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.NotificationHubs.ScheduledNotification}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ScheduledNotification>
  nameWithType: Task<ScheduledNotification>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.NotificationHubs.ScheduledNotification>
  nameWithType.vb: Task(Of ScheduledNotification)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.NotificationHubs.ScheduledNotification)
  name.vb: Task(Of ScheduledNotification)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.NotificationHubs.ScheduledNotification
    name: ScheduledNotification
    nameWithType: ScheduledNotification
    fullName: Microsoft.Azure.NotificationHubs.ScheduledNotification
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.NotificationHubs.ScheduledNotification
    name: ScheduledNotification
    nameWithType: ScheduledNotification
    fullName: Microsoft.Azure.NotificationHubs.ScheduledNotification
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.CancelNotificationAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.CancelNotificationAsync
  isExternal: false
  name: CancelNotificationAsync
  nameWithType: NotificationHubClient.CancelNotificationAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.CancelNotificationAsync
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendDirectNotificationAsync*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.SendDirectNotificationAsync
  isExternal: false
  name: SendDirectNotificationAsync
  nameWithType: NotificationHubClient.SendDirectNotificationAsync
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.SendDirectNotificationAsync
- uid: System.Collections.Generic.IList{System.String}
  commentId: T:System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  nameWithType.vb: IList(Of String)
  fullname.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetBaseUri*
  commentId: Overload:Microsoft.Azure.NotificationHubs.NotificationHubClient.GetBaseUri
  isExternal: false
  name: GetBaseUri
  nameWithType: NotificationHubClient.GetBaseUri
  fullName: Microsoft.Azure.NotificationHubs.NotificationHubClient.GetBaseUri
- uid: Uri
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: Uri
