### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter
  commentId: T:Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter
  id: DataLakeStoreFrontEndAdapter
  parent: Microsoft.Azure.Management.DataLake.StoreUploader
  children:
  - Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.#ctor(System.String,IDataLakeStoreFileSystemManagementClient)
  - Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.#ctor(System.String,IDataLakeStoreFileSystemManagementClient,System.Threading.CancellationToken)
  - Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.AppendToStream(System.String,System.Byte[],System.Int64,System.Int32)
  - Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.Concatenate(System.String,System.String[],System.Boolean)
  - Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.CreateStream(System.String,System.Boolean,System.Byte[],System.Int32)
  - Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.DeleteStream(System.String,System.Boolean,System.Boolean)
  - Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.GetStreamLength(System.String,System.Boolean)
  - Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.IsDirectory(System.String)
  - Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.ListDirectory(System.String,System.Boolean)
  - Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.ReadStream(System.String,System.Int64,System.Int64,System.Boolean)
  - Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.StreamExists(System.String,System.Boolean)
  langs:
  - csharp
  - vb
  name: DataLakeStoreFrontEndAdapter
  nameWithType: DataLakeStoreFrontEndAdapter
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter
  type: Class
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/DataLakeStoreFrontEndAdapter.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
      commit: 7cead20bae816484e8ea311f7200fe55ed5555f6
    id: DataLakeStoreFrontEndAdapter
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/DataLakeStoreFrontEndAdapter.cs
    startLine: 35
  assemblies:
  - Microsoft.Azure.Management.DataLake.StoreUploader
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader
  summary: "\nA front end adapter that communicates with the DataLake Store.\nThis is a syncrhonous call adapter, which has certain efficiency limitations.\nIn the future, new adapters that are created should consider implementing the methods\nasynchronously.\n"
  example: []
  syntax:
    content: 'public class DataLakeStoreFrontEndAdapter : IFrontEndAdapter'
    content.vb: >-
      Public Class DataLakeStoreFrontEndAdapter
          Implements IFrontEndAdapter
  inheritance:
  - System.Object
  implements:
  - Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.#ctor(System.String,IDataLakeStoreFileSystemManagementClient)
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.#ctor(System.String,IDataLakeStoreFileSystemManagementClient)
  id: '#ctor(System.String,IDataLakeStoreFileSystemManagementClient)'
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter
  langs:
  - csharp
  - vb
  name: DataLakeStoreFrontEndAdapter(String, IDataLakeStoreFileSystemManagementClient)
  nameWithType: DataLakeStoreFrontEndAdapter.DataLakeStoreFrontEndAdapter(String, IDataLakeStoreFileSystemManagementClient)
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.DataLakeStoreFrontEndAdapter(System.String, IDataLakeStoreFileSystemManagementClient)
  type: Constructor
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/DataLakeStoreFrontEndAdapter.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
      commit: 7cead20bae816484e8ea311f7200fe55ed5555f6
    id: .ctor
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/DataLakeStoreFrontEndAdapter.cs
    startLine: 56
  assemblies:
  - Microsoft.Azure.Management.DataLake.StoreUploader
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public DataLakeStoreFrontEndAdapter(string accountName, IDataLakeStoreFileSystemManagementClient client)
    content.vb: Public Sub New(accountName As String, client As IDataLakeStoreFileSystemManagementClient)
    parameters:
    - id: accountName
      type: System.String
      description: Name of the account.
    - id: client
      type: IDataLakeStoreFileSystemManagementClient
      description: The client.
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.#ctor(System.String,IDataLakeStoreFileSystemManagementClient,System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.#ctor(System.String,IDataLakeStoreFileSystemManagementClient,System.Threading.CancellationToken)
  id: '#ctor(System.String,IDataLakeStoreFileSystemManagementClient,System.Threading.CancellationToken)'
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter
  langs:
  - csharp
  - vb
  name: DataLakeStoreFrontEndAdapter(String, IDataLakeStoreFileSystemManagementClient, CancellationToken)
  nameWithType: DataLakeStoreFrontEndAdapter.DataLakeStoreFrontEndAdapter(String, IDataLakeStoreFileSystemManagementClient, CancellationToken)
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.DataLakeStoreFrontEndAdapter(System.String, IDataLakeStoreFileSystemManagementClient, System.Threading.CancellationToken)
  type: Constructor
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/DataLakeStoreFrontEndAdapter.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
      commit: 7cead20bae816484e8ea311f7200fe55ed5555f6
    id: .ctor
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/DataLakeStoreFrontEndAdapter.cs
    startLine: 68
  assemblies:
  - Microsoft.Azure.Management.DataLake.StoreUploader
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public DataLakeStoreFrontEndAdapter(string accountName, IDataLakeStoreFileSystemManagementClient client, CancellationToken token)
    content.vb: Public Sub New(accountName As String, client As IDataLakeStoreFileSystemManagementClient, token As CancellationToken)
    parameters:
    - id: accountName
      type: System.String
      description: Name of the account.
    - id: client
      type: IDataLakeStoreFileSystemManagementClient
      description: The client.
    - id: token
      type: System.Threading.CancellationToken
      description: The token.
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.CreateStream(System.String,System.Boolean,System.Byte[],System.Int32)
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.CreateStream(System.String,System.Boolean,System.Byte[],System.Int32)
  id: CreateStream(System.String,System.Boolean,System.Byte[],System.Int32)
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter
  langs:
  - csharp
  - vb
  name: CreateStream(String, Boolean, Byte[], Int32)
  nameWithType: DataLakeStoreFrontEndAdapter.CreateStream(String, Boolean, Byte[], Int32)
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.CreateStream(System.String, System.Boolean, System.Byte[], System.Int32)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/DataLakeStoreFrontEndAdapter.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
      commit: 7cead20bae816484e8ea311f7200fe55ed5555f6
    id: CreateStream
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/DataLakeStoreFrontEndAdapter.cs
    startLine: 87
  assemblies:
  - Microsoft.Azure.Management.DataLake.StoreUploader
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader
  summary: "\nCreates a new, empty stream at the given path.\n"
  example: []
  syntax:
    content: public void CreateStream(string streamPath, bool overwrite, byte[] data, int byteCount)
    content.vb: Public Sub CreateStream(streamPath As String, overwrite As Boolean, data As Byte(), byteCount As Integer)
    parameters:
    - id: streamPath
      type: System.String
      description: The relative path to the stream.
    - id: overwrite
      type: System.Boolean
      description: Whether to overwrite an existing stream.
    - id: data
      type: System.Byte[]
      description: The data.
    - id: byteCount
      type: System.Int32
      description: The byte count.
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.CreateStream*
  exceptions:
  - type: System.Threading.Tasks.TaskCanceledException
    commentId: T:System.Threading.Tasks.TaskCanceledException
  implements:
  - Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.CreateStream(System.String,System.Boolean,System.Byte[],System.Int32)
  nameWithType.vb: DataLakeStoreFrontEndAdapter.CreateStream(String, Boolean, Byte(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.CreateStream(System.String, System.Boolean, System.Byte(), System.Int32)
  name.vb: CreateStream(String, Boolean, Byte(), Int32)
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.DeleteStream(System.String,System.Boolean,System.Boolean)
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.DeleteStream(System.String,System.Boolean,System.Boolean)
  id: DeleteStream(System.String,System.Boolean,System.Boolean)
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter
  langs:
  - csharp
  - vb
  name: DeleteStream(String, Boolean, Boolean)
  nameWithType: DataLakeStoreFrontEndAdapter.DeleteStream(String, Boolean, Boolean)
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.DeleteStream(System.String, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/DataLakeStoreFrontEndAdapter.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
      commit: 7cead20bae816484e8ea311f7200fe55ed5555f6
    id: DeleteStream
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/DataLakeStoreFrontEndAdapter.cs
    startLine: 109
  assemblies:
  - Microsoft.Azure.Management.DataLake.StoreUploader
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader
  summary: "\nDeletes an existing stream at the given path.\n"
  example: []
  syntax:
    content: public void DeleteStream(string streamPath, bool recurse = false, bool isDownload = false)
    content.vb: Public Sub DeleteStream(streamPath As String, recurse As Boolean = False, isDownload As Boolean = False)
    parameters:
    - id: streamPath
      type: System.String
      description: The relative path to the stream.
    - id: recurse
      type: System.Boolean
      description: if set to <code>true</code> [recurse]. This is used for folder streams only.
    - id: isDownload
      type: System.Boolean
      description: if set to <code>true</code> [is download], meaning we will delete a stream on the local machine instead of on the server.
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.DeleteStream*
  exceptions:
  - type: System.Threading.Tasks.TaskCanceledException
    commentId: T:System.Threading.Tasks.TaskCanceledException
  implements:
  - Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.DeleteStream(System.String,System.Boolean,System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.AppendToStream(System.String,System.Byte[],System.Int64,System.Int32)
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.AppendToStream(System.String,System.Byte[],System.Int64,System.Int32)
  id: AppendToStream(System.String,System.Byte[],System.Int64,System.Int32)
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter
  langs:
  - csharp
  - vb
  name: AppendToStream(String, Byte[], Int64, Int32)
  nameWithType: DataLakeStoreFrontEndAdapter.AppendToStream(String, Byte[], Int64, Int32)
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.AppendToStream(System.String, System.Byte[], System.Int64, System.Int32)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/DataLakeStoreFrontEndAdapter.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
      commit: 7cead20bae816484e8ea311f7200fe55ed5555f6
    id: AppendToStream
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/DataLakeStoreFrontEndAdapter.cs
    startLine: 142
  assemblies:
  - Microsoft.Azure.Management.DataLake.StoreUploader
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader
  summary: "\nAppends to stream.\n"
  example: []
  syntax:
    content: public void AppendToStream(string streamPath, byte[] data, long offset, int byteCount)
    content.vb: Public Sub AppendToStream(streamPath As String, data As Byte(), offset As Long, byteCount As Integer)
    parameters:
    - id: streamPath
      type: System.String
      description: The stream path.
    - id: data
      type: System.Byte[]
      description: The data.
    - id: offset
      type: System.Int64
      description: The offset.
    - id: byteCount
      type: System.Int32
      description: The byte count.
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.AppendToStream*
  exceptions:
  - type: System.Threading.Tasks.TaskCanceledException
    commentId: T:System.Threading.Tasks.TaskCanceledException
  implements:
  - Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.AppendToStream(System.String,System.Byte[],System.Int64,System.Int32)
  nameWithType.vb: DataLakeStoreFrontEndAdapter.AppendToStream(String, Byte(), Int64, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.AppendToStream(System.String, System.Byte(), System.Int64, System.Int32)
  name.vb: AppendToStream(String, Byte(), Int64, Int32)
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.ReadStream(System.String,System.Int64,System.Int64,System.Boolean)
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.ReadStream(System.String,System.Int64,System.Int64,System.Boolean)
  id: ReadStream(System.String,System.Int64,System.Int64,System.Boolean)
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter
  langs:
  - csharp
  - vb
  name: ReadStream(String, Int64, Int64, Boolean)
  nameWithType: DataLakeStoreFrontEndAdapter.ReadStream(String, Int64, Int64, Boolean)
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.ReadStream(System.String, System.Int64, System.Int64, System.Boolean)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/DataLakeStoreFrontEndAdapter.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
      commit: 7cead20bae816484e8ea311f7200fe55ed5555f6
    id: ReadStream
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/DataLakeStoreFrontEndAdapter.cs
    startLine: 157
  assemblies:
  - Microsoft.Azure.Management.DataLake.StoreUploader
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader
  syntax:
    content: public Stream ReadStream(string streamPath, long offset, long length, bool isDownload = false)
    content.vb: Public Function ReadStream(streamPath As String, offset As Long, length As Long, isDownload As Boolean = False) As Stream
    parameters:
    - id: streamPath
      type: System.String
    - id: offset
      type: System.Int64
    - id: length
      type: System.Int64
    - id: isDownload
      type: System.Boolean
    return:
      type: System.IO.Stream
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.ReadStream*
  implements:
  - Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.ReadStream(System.String,System.Int64,System.Int64,System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.StreamExists(System.String,System.Boolean)
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.StreamExists(System.String,System.Boolean)
  id: StreamExists(System.String,System.Boolean)
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter
  langs:
  - csharp
  - vb
  name: StreamExists(String, Boolean)
  nameWithType: DataLakeStoreFrontEndAdapter.StreamExists(String, Boolean)
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.StreamExists(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/DataLakeStoreFrontEndAdapter.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
      commit: 7cead20bae816484e8ea311f7200fe55ed5555f6
    id: StreamExists
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/DataLakeStoreFrontEndAdapter.cs
    startLine: 194
  assemblies:
  - Microsoft.Azure.Management.DataLake.StoreUploader
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader
  summary: "\nDetermines if the stream with given path exists.\n"
  example: []
  syntax:
    content: public bool StreamExists(string streamPath, bool isDownload = false)
    content.vb: Public Function StreamExists(streamPath As String, isDownload As Boolean = False) As Boolean
    parameters:
    - id: streamPath
      type: System.String
      description: The relative path to the stream.
    - id: isDownload
      type: System.Boolean
      description: if set to <code>true</code> [is download], meaning we will test if the stream exists on the local machine instead of on the server.
    return:
      type: System.Boolean
      description: "\nTrue if the stream exists, false otherwise.\n"
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.StreamExists*
  exceptions:
  - type: System.Threading.Tasks.TaskCanceledException
    commentId: T:System.Threading.Tasks.TaskCanceledException
  implements:
  - Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.StreamExists(System.String,System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.GetStreamLength(System.String,System.Boolean)
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.GetStreamLength(System.String,System.Boolean)
  id: GetStreamLength(System.String,System.Boolean)
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter
  langs:
  - csharp
  - vb
  name: GetStreamLength(String, Boolean)
  nameWithType: DataLakeStoreFrontEndAdapter.GetStreamLength(String, Boolean)
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.GetStreamLength(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/DataLakeStoreFrontEndAdapter.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
      commit: 7cead20bae816484e8ea311f7200fe55ed5555f6
    id: GetStreamLength
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/DataLakeStoreFrontEndAdapter.cs
    startLine: 249
  assemblies:
  - Microsoft.Azure.Management.DataLake.StoreUploader
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader
  summary: "\nGets a value indicating the length of a stream, in bytes.\n"
  example: []
  syntax:
    content: public long GetStreamLength(string streamPath, bool isDownload = false)
    content.vb: Public Function GetStreamLength(streamPath As String, isDownload As Boolean = False) As Long
    parameters:
    - id: streamPath
      type: System.String
      description: The relative path to the stream.
    - id: isDownload
      type: System.Boolean
      description: if set to <code>true</code> [is download], meaning we will get the stream length on the local machine instead of on the server.
    return:
      type: System.Int64
      description: "\nThe length of the stream, in bytes.\n"
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.GetStreamLength*
  exceptions:
  - type: System.Threading.Tasks.TaskCanceledException
    commentId: T:System.Threading.Tasks.TaskCanceledException
  implements:
  - Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.GetStreamLength(System.String,System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.IsDirectory(System.String)
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.IsDirectory(System.String)
  id: IsDirectory(System.String)
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter
  langs:
  - csharp
  - vb
  name: IsDirectory(String)
  nameWithType: DataLakeStoreFrontEndAdapter.IsDirectory(String)
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.IsDirectory(System.String)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/DataLakeStoreFrontEndAdapter.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
      commit: 7cead20bae816484e8ea311f7200fe55ed5555f6
    id: IsDirectory
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/DataLakeStoreFrontEndAdapter.cs
    startLine: 280
  assemblies:
  - Microsoft.Azure.Management.DataLake.StoreUploader
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader
  summary: "\nDetermines if the stream with given path on the server is a directory or a terminating file.\nThis is used exclusively for download.\n"
  example: []
  syntax:
    content: public bool IsDirectory(string streamPath)
    content.vb: Public Function IsDirectory(streamPath As String) As Boolean
    parameters:
    - id: streamPath
      type: System.String
      description: The relative path to the stream.
    return:
      type: System.Boolean
      description: "\nTrue if the stream is a directory, false otherwise.\n"
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.IsDirectory*
  exceptions:
  - type: System.Threading.Tasks.TaskCanceledException
    commentId: T:System.Threading.Tasks.TaskCanceledException
  implements:
  - Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.IsDirectory(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.ListDirectory(System.String,System.Boolean)
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.ListDirectory(System.String,System.Boolean)
  id: ListDirectory(System.String,System.Boolean)
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter
  langs:
  - csharp
  - vb
  name: ListDirectory(String, Boolean)
  nameWithType: DataLakeStoreFrontEndAdapter.ListDirectory(String, Boolean)
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.ListDirectory(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/DataLakeStoreFrontEndAdapter.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
      commit: 7cead20bae816484e8ea311f7200fe55ed5555f6
    id: ListDirectory
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/DataLakeStoreFrontEndAdapter.cs
    startLine: 303
  assemblies:
  - Microsoft.Azure.Management.DataLake.StoreUploader
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader
  summary: "\nLists the Data Lake Store directory specified.\n"
  example: []
  syntax:
    content: public IDictionary<string, long> ListDirectory(string directoryPath, bool recursive)
    content.vb: Public Function ListDirectory(directoryPath As String, recursive As Boolean) As IDictionary(Of String, Long)
    parameters:
    - id: directoryPath
      type: System.String
      description: The directory path.
    - id: recursive
      type: System.Boolean
      description: if set to <code>true</code> [recursive].
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Int64}
      description: "\nThe list of string paths and their corresponding file sizes, in bytes.\n"
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.ListDirectory*
  implements:
  - Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.ListDirectory(System.String,System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.Concatenate(System.String,System.String[],System.Boolean)
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.Concatenate(System.String,System.String[],System.Boolean)
  id: Concatenate(System.String,System.String[],System.Boolean)
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter
  langs:
  - csharp
  - vb
  name: Concatenate(String, String[], Boolean)
  nameWithType: DataLakeStoreFrontEndAdapter.Concatenate(String, String[], Boolean)
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.Concatenate(System.String, System.String[], System.Boolean)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/DataLakeStoreFrontEndAdapter.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
      commit: 7cead20bae816484e8ea311f7200fe55ed5555f6
    id: Concatenate
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/DataLakeStoreFrontEndAdapter.cs
    startLine: 333
  assemblies:
  - Microsoft.Azure.Management.DataLake.StoreUploader
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader
  summary: "\nConcatenates the given input streams (in order) into the given target stream.\nAt the end of this operation, input streams will be deleted.\n"
  example: []
  syntax:
    content: public void Concatenate(string targetStreamPath, string[] inputStreamPaths, bool isDownload = false)
    content.vb: Public Sub Concatenate(targetStreamPath As String, inputStreamPaths As String(), isDownload As Boolean = False)
    parameters:
    - id: targetStreamPath
      type: System.String
      description: The relative path to the target stream.
    - id: inputStreamPaths
      type: System.String[]
      description: An ordered array of paths to the input streams.
    - id: isDownload
      type: System.Boolean
      description: if set to <code>true</code> [is download], meaning we will concatenate the streams on the local machine instead of on the server.
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.Concatenate*
  exceptions:
  - type: System.Threading.Tasks.TaskCanceledException
    commentId: T:System.Threading.Tasks.TaskCanceledException
  implements:
  - Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.Concatenate(System.String,System.String[],System.Boolean)
  nameWithType.vb: DataLakeStoreFrontEndAdapter.Concatenate(String, String(), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.Concatenate(System.String, System.String(), System.Boolean)
  name.vb: Concatenate(String, String(), Boolean)
references:
- uid: Microsoft.Azure.Management.DataLake.StoreUploader
  commentId: N:Microsoft.Azure.Management.DataLake.StoreUploader
  isExternal: false
  name: Microsoft.Azure.Management.DataLake.StoreUploader
  nameWithType: Microsoft.Azure.Management.DataLake.StoreUploader
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter
  commentId: T:Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter
  parent: Microsoft.Azure.Management.DataLake.StoreUploader
  isExternal: false
  name: IFrontEndAdapter
  nameWithType: IFrontEndAdapter
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter
  commentId: T:Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter
  isExternal: false
  name: DataLakeStoreFrontEndAdapter
  nameWithType: DataLakeStoreFrontEndAdapter
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.#ctor*
  commentId: Overload:Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.#ctor
  isExternal: false
  name: DataLakeStoreFrontEndAdapter
  nameWithType: DataLakeStoreFrontEndAdapter.DataLakeStoreFrontEndAdapter
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.DataLakeStoreFrontEndAdapter
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: IDataLakeStoreFileSystemManagementClient
  isExternal: true
  name: IDataLakeStoreFileSystemManagementClient
  nameWithType: IDataLakeStoreFileSystemManagementClient
  fullName: IDataLakeStoreFileSystemManagementClient
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.CreateStream*
  commentId: Overload:Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.CreateStream
  isExternal: false
  name: CreateStream
  nameWithType: DataLakeStoreFrontEndAdapter.CreateStream
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.CreateStream
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.CreateStream(System.String,System.Boolean,System.Byte[],System.Int32)
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.CreateStream(System.String,System.Boolean,System.Byte[],System.Int32)
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter
  isExternal: true
  name: CreateStream(String, Boolean, Byte[], Int32)
  nameWithType: IFrontEndAdapter.CreateStream(String, Boolean, Byte[], Int32)
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.CreateStream(System.String, System.Boolean, System.Byte[], System.Int32)
  nameWithType.vb: IFrontEndAdapter.CreateStream(String, Boolean, Byte(), Int32)
  fullname.vb: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.CreateStream(System.String, System.Boolean, System.Byte(), System.Int32)
  name.vb: CreateStream(String, Boolean, Byte(), Int32)
  spec.csharp:
  - uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.CreateStream(System.String,System.Boolean,System.Byte[],System.Int32)
    name: CreateStream
    nameWithType: IFrontEndAdapter.CreateStream
    fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.CreateStream
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.CreateStream(System.String,System.Boolean,System.Byte[],System.Int32)
    name: CreateStream
    nameWithType: IFrontEndAdapter.CreateStream
    fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.CreateStream
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.TaskCanceledException
  commentId: T:System.Threading.Tasks.TaskCanceledException
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.DeleteStream*
  commentId: Overload:Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.DeleteStream
  isExternal: false
  name: DeleteStream
  nameWithType: DataLakeStoreFrontEndAdapter.DeleteStream
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.DeleteStream
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.DeleteStream(System.String,System.Boolean,System.Boolean)
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.DeleteStream(System.String,System.Boolean,System.Boolean)
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter
  isExternal: true
  name: DeleteStream(String, Boolean, Boolean)
  nameWithType: IFrontEndAdapter.DeleteStream(String, Boolean, Boolean)
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.DeleteStream(System.String, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.DeleteStream(System.String,System.Boolean,System.Boolean)
    name: DeleteStream
    nameWithType: IFrontEndAdapter.DeleteStream
    fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.DeleteStream
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.DeleteStream(System.String,System.Boolean,System.Boolean)
    name: DeleteStream
    nameWithType: IFrontEndAdapter.DeleteStream
    fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.DeleteStream
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.AppendToStream*
  commentId: Overload:Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.AppendToStream
  isExternal: false
  name: AppendToStream
  nameWithType: DataLakeStoreFrontEndAdapter.AppendToStream
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.AppendToStream
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.AppendToStream(System.String,System.Byte[],System.Int64,System.Int32)
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.AppendToStream(System.String,System.Byte[],System.Int64,System.Int32)
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter
  isExternal: true
  name: AppendToStream(String, Byte[], Int64, Int32)
  nameWithType: IFrontEndAdapter.AppendToStream(String, Byte[], Int64, Int32)
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.AppendToStream(System.String, System.Byte[], System.Int64, System.Int32)
  nameWithType.vb: IFrontEndAdapter.AppendToStream(String, Byte(), Int64, Int32)
  fullname.vb: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.AppendToStream(System.String, System.Byte(), System.Int64, System.Int32)
  name.vb: AppendToStream(String, Byte(), Int64, Int32)
  spec.csharp:
  - uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.AppendToStream(System.String,System.Byte[],System.Int64,System.Int32)
    name: AppendToStream
    nameWithType: IFrontEndAdapter.AppendToStream
    fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.AppendToStream
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.AppendToStream(System.String,System.Byte[],System.Int64,System.Int32)
    name: AppendToStream
    nameWithType: IFrontEndAdapter.AppendToStream
    fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.AppendToStream
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.ReadStream*
  commentId: Overload:Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.ReadStream
  isExternal: false
  name: ReadStream
  nameWithType: DataLakeStoreFrontEndAdapter.ReadStream
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.ReadStream
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.ReadStream(System.String,System.Int64,System.Int64,System.Boolean)
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.ReadStream(System.String,System.Int64,System.Int64,System.Boolean)
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter
  isExternal: true
  name: ReadStream(String, Int64, Int64, Boolean)
  nameWithType: IFrontEndAdapter.ReadStream(String, Int64, Int64, Boolean)
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.ReadStream(System.String, System.Int64, System.Int64, System.Boolean)
  spec.csharp:
  - uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.ReadStream(System.String,System.Int64,System.Int64,System.Boolean)
    name: ReadStream
    nameWithType: IFrontEndAdapter.ReadStream
    fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.ReadStream
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.ReadStream(System.String,System.Int64,System.Int64,System.Boolean)
    name: ReadStream
    nameWithType: IFrontEndAdapter.ReadStream
    fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.ReadStream
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.StreamExists*
  commentId: Overload:Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.StreamExists
  isExternal: false
  name: StreamExists
  nameWithType: DataLakeStoreFrontEndAdapter.StreamExists
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.StreamExists
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.StreamExists(System.String,System.Boolean)
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.StreamExists(System.String,System.Boolean)
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter
  isExternal: true
  name: StreamExists(String, Boolean)
  nameWithType: IFrontEndAdapter.StreamExists(String, Boolean)
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.StreamExists(System.String, System.Boolean)
  spec.csharp:
  - uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.StreamExists(System.String,System.Boolean)
    name: StreamExists
    nameWithType: IFrontEndAdapter.StreamExists
    fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.StreamExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.StreamExists(System.String,System.Boolean)
    name: StreamExists
    nameWithType: IFrontEndAdapter.StreamExists
    fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.StreamExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.GetStreamLength*
  commentId: Overload:Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.GetStreamLength
  isExternal: false
  name: GetStreamLength
  nameWithType: DataLakeStoreFrontEndAdapter.GetStreamLength
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.GetStreamLength
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.GetStreamLength(System.String,System.Boolean)
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.GetStreamLength(System.String,System.Boolean)
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter
  isExternal: true
  name: GetStreamLength(String, Boolean)
  nameWithType: IFrontEndAdapter.GetStreamLength(String, Boolean)
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.GetStreamLength(System.String, System.Boolean)
  spec.csharp:
  - uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.GetStreamLength(System.String,System.Boolean)
    name: GetStreamLength
    nameWithType: IFrontEndAdapter.GetStreamLength
    fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.GetStreamLength
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.GetStreamLength(System.String,System.Boolean)
    name: GetStreamLength
    nameWithType: IFrontEndAdapter.GetStreamLength
    fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.GetStreamLength
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.IsDirectory*
  commentId: Overload:Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.IsDirectory
  isExternal: false
  name: IsDirectory
  nameWithType: DataLakeStoreFrontEndAdapter.IsDirectory
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.IsDirectory
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.IsDirectory(System.String)
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.IsDirectory(System.String)
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter
  isExternal: true
  name: IsDirectory(String)
  nameWithType: IFrontEndAdapter.IsDirectory(String)
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.IsDirectory(System.String)
  spec.csharp:
  - uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.IsDirectory(System.String)
    name: IsDirectory
    nameWithType: IFrontEndAdapter.IsDirectory
    fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.IsDirectory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.IsDirectory(System.String)
    name: IsDirectory
    nameWithType: IFrontEndAdapter.IsDirectory
    fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.IsDirectory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.ListDirectory*
  commentId: Overload:Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.ListDirectory
  isExternal: false
  name: ListDirectory
  nameWithType: DataLakeStoreFrontEndAdapter.ListDirectory
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.ListDirectory
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.ListDirectory(System.String,System.Boolean)
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.ListDirectory(System.String,System.Boolean)
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter
  isExternal: true
  name: ListDirectory(String, Boolean)
  nameWithType: IFrontEndAdapter.ListDirectory(String, Boolean)
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.ListDirectory(System.String, System.Boolean)
  spec.csharp:
  - uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.ListDirectory(System.String,System.Boolean)
    name: ListDirectory
    nameWithType: IFrontEndAdapter.ListDirectory
    fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.ListDirectory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.ListDirectory(System.String,System.Boolean)
    name: ListDirectory
    nameWithType: IFrontEndAdapter.ListDirectory
    fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.ListDirectory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.String,System.Int64}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Int64}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Int64>
  nameWithType: IDictionary<String, Int64>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Int64>
  nameWithType.vb: IDictionary(Of String, Int64)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.Int64)
  name.vb: IDictionary(Of String, Int64)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.Concatenate*
  commentId: Overload:Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.Concatenate
  isExternal: false
  name: Concatenate
  nameWithType: DataLakeStoreFrontEndAdapter.Concatenate
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.DataLakeStoreFrontEndAdapter.Concatenate
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.Concatenate(System.String,System.String[],System.Boolean)
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.Concatenate(System.String,System.String[],System.Boolean)
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter
  isExternal: true
  name: Concatenate(String, String[], Boolean)
  nameWithType: IFrontEndAdapter.Concatenate(String, String[], Boolean)
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.Concatenate(System.String, System.String[], System.Boolean)
  nameWithType.vb: IFrontEndAdapter.Concatenate(String, String(), Boolean)
  fullname.vb: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.Concatenate(System.String, System.String(), System.Boolean)
  name.vb: Concatenate(String, String(), Boolean)
  spec.csharp:
  - uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.Concatenate(System.String,System.String[],System.Boolean)
    name: Concatenate
    nameWithType: IFrontEndAdapter.Concatenate
    fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.Concatenate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.Concatenate(System.String,System.String[],System.Boolean)
    name: Concatenate
    nameWithType: IFrontEndAdapter.Concatenate
    fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.Concatenate
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
