### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata
  commentId: T:Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata
  id: UploadSegmentMetadata
  parent: Microsoft.Azure.Management.DataLake.StoreUploader
  children:
  - Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.CalculateSegmentCount(System.Int64)
  - Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.CalculateSegmentLength(System.Int64,System.Int32)
  - Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.Length
  - Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.Offset
  - Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.Path
  - Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.SegmentNumber
  - Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.Status
  langs:
  - csharp
  - vb
  name: UploadSegmentMetadata
  nameWithType: UploadSegmentMetadata
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata
  type: Class
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/UploadSegmentMetadata.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: UploadSegmentMetadata
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/UploadSegmentMetadata.cs
    startLine: 26
  assemblies:
  - Microsoft.Azure.Management.DataLake.StoreUploader
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader
  summary: "\nRepresents metadata for a particular file segment.\n"
  example: []
  syntax:
    content: >-
      [DataContract(Name = "Segment")]

      public class UploadSegmentMetadata
    content.vb: >-
      <DataContract(Name:="Segment")>

      Public Class UploadSegmentMetadata
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: Segment
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.CalculateSegmentLength(System.Int64,System.Int32)
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.CalculateSegmentLength(System.Int64,System.Int32)
  id: CalculateSegmentLength(System.Int64,System.Int32)
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata
  langs:
  - csharp
  - vb
  name: CalculateSegmentLength(Int64, Int32)
  nameWithType: UploadSegmentMetadata.CalculateSegmentLength(Int64, Int32)
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.CalculateSegmentLength(System.Int64, System.Int32)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/UploadSegmentMetadata.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CalculateSegmentLength
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/UploadSegmentMetadata.cs
    startLine: 67
  assemblies:
  - Microsoft.Azure.Management.DataLake.StoreUploader
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader
  summary: "\nCalculates the length of a typical (non-terminal) segment for a file of the given length that is split into the given number of segments.\n"
  example: []
  syntax:
    content: public static long CalculateSegmentLength(long fileLength, int segmentCount)
    content.vb: Public Shared Function CalculateSegmentLength(fileLength As Long, segmentCount As Integer) As Long
    parameters:
    - id: fileLength
      type: System.Int64
      description: The length of the file, in bytes.
    - id: segmentCount
      type: System.Int32
      description: The number of segments to split the file into.
    return:
      type: System.Int64
      description: ''
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.CalculateSegmentLength*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Number of segments must be a positive integer
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.CalculateSegmentCount(System.Int64)
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.CalculateSegmentCount(System.Int64)
  id: CalculateSegmentCount(System.Int64)
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata
  langs:
  - csharp
  - vb
  name: CalculateSegmentCount(Int64)
  nameWithType: UploadSegmentMetadata.CalculateSegmentCount(Int64)
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.CalculateSegmentCount(System.Int64)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/UploadSegmentMetadata.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CalculateSegmentCount
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/UploadSegmentMetadata.cs
    startLine: 187
  assemblies:
  - Microsoft.Azure.Management.DataLake.StoreUploader
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader
  summary: "\nCalculates the number of segments a file of the given length should be split into.\nThe method to calculate this is based on some empirical measurements that allows both the number of segments and the length of each segment to grow as the input file size grows.\nThey both grow on a logarithmic pattern as the file length increases.\nThe formula is roughly this:\n* Multiplier = Min(100, 50 * 2 ^ Log10(FileLengthInGB))\n* SegmentCount = Max(1, Multiplier * 2 ^ Log10(FileLengthInGB)\nEssentially we quadruple the number of segments for each tenfold increase in the file length, with certain caps. The formula is designed to support both small files and\nextremely large files (and not cause very small segment lengths or very large number of segments).\n"
  example: []
  syntax:
    content: public static int CalculateSegmentCount(long fileLength)
    content.vb: Public Shared Function CalculateSegmentCount(fileLength As Long) As Integer
    parameters:
    - id: fileLength
      type: System.Int64
      description: The length of the file, in bytes.
    return:
      type: System.Int32
      description: "\nThe number of segments to split the file into. Returns 0 if fileLength is 0.\n"
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.CalculateSegmentCount*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: File Length cannot be negative
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.SegmentNumber
  commentId: P:Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.SegmentNumber
  id: SegmentNumber
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata
  langs:
  - csharp
  - vb
  name: SegmentNumber
  nameWithType: UploadSegmentMetadata.SegmentNumber
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.SegmentNumber
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/UploadSegmentMetadata.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: SegmentNumber
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/UploadSegmentMetadata.cs
    startLine: 237
  assemblies:
  - Microsoft.Azure.Management.DataLake.StoreUploader
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader
  summary: "\nGets or sets a value indicating the number (sequence) of the segment in the file.\n"
  example: []
  syntax:
    content: >-
      [DataMember(Name = "Number")]

      public int SegmentNumber { get; set; }
    content.vb: >-
      <DataMember(Name:="Number")>

      Public Property SegmentNumber As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\nThe segment number.\n"
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.SegmentNumber*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: Number
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.Offset
  commentId: P:Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.Offset
  id: Offset
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata
  langs:
  - csharp
  - vb
  name: Offset
  nameWithType: UploadSegmentMetadata.Offset
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.Offset
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/UploadSegmentMetadata.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Offset
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/UploadSegmentMetadata.cs
    startLine: 246
  assemblies:
  - Microsoft.Azure.Management.DataLake.StoreUploader
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader
  summary: "\nGets or sets a value indicating the starting offset of the segment in the file.\n"
  example: []
  syntax:
    content: >-
      [DataMember(Name = "Offset")]

      public long Offset { get; set; }
    content.vb: >-
      <DataMember(Name:="Offset")>

      Public Property Offset As Long
    parameters: []
    return:
      type: System.Int64
      description: "\nThe offset.\n"
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.Offset*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: Offset
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.Length
  commentId: P:Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.Length
  id: Length
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: UploadSegmentMetadata.Length
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.Length
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/UploadSegmentMetadata.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Length
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/UploadSegmentMetadata.cs
    startLine: 255
  assemblies:
  - Microsoft.Azure.Management.DataLake.StoreUploader
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader
  summary: "\nGets or sets a value indicating the size of the segment (in bytes).\n"
  example: []
  syntax:
    content: >-
      [DataMember(Name = "Length")]

      public long Length { get; set; }
    content.vb: >-
      <DataMember(Name:="Length")>

      Public Property Length As Long
    parameters: []
    return:
      type: System.Int64
      description: "\nThe length.\n"
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.Length*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: Length
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.Status
  commentId: P:Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.Status
  id: Status
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata
  langs:
  - csharp
  - vb
  name: Status
  nameWithType: UploadSegmentMetadata.Status
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.Status
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/UploadSegmentMetadata.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Status
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/UploadSegmentMetadata.cs
    startLine: 264
  assemblies:
  - Microsoft.Azure.Management.DataLake.StoreUploader
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader
  summary: "\nGets or sets a value indicating the current upload status for this segment.\n"
  example: []
  syntax:
    content: >-
      [DataMember(Name = "Status")]

      public SegmentUploadStatus Status { get; set; }
    content.vb: >-
      <DataMember(Name:="Status")>

      Public Property Status As SegmentUploadStatus
    parameters: []
    return:
      type: Microsoft.Azure.Management.DataLake.StoreUploader.SegmentUploadStatus
      description: "\nThe status.\n"
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.Status*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: Status
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.Path
  commentId: P:Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.Path
  id: Path
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata
  langs:
  - csharp
  - vb
  name: Path
  nameWithType: UploadSegmentMetadata.Path
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.Path
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/UploadSegmentMetadata.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Path
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/UploadSegmentMetadata.cs
    startLine: 273
  assemblies:
  - Microsoft.Azure.Management.DataLake.StoreUploader
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader
  summary: "\nGets or sets a value indicating the stream path assigned to this segment.\n"
  example: []
  syntax:
    content: >-
      [DataMember(Name = "Path")]

      public string Path { get; set; }
    content.vb: >-
      <DataMember(Name:="Path")>

      Public Property Path As String
    parameters: []
    return:
      type: System.String
      description: "\nThe path.\n"
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.Path*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: Path
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Azure.Management.DataLake.StoreUploader
  commentId: N:Microsoft.Azure.Management.DataLake.StoreUploader
  isExternal: false
  name: Microsoft.Azure.Management.DataLake.StoreUploader
  nameWithType: Microsoft.Azure.Management.DataLake.StoreUploader
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.CalculateSegmentLength*
  commentId: Overload:Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.CalculateSegmentLength
  isExternal: false
  name: CalculateSegmentLength
  nameWithType: UploadSegmentMetadata.CalculateSegmentLength
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.CalculateSegmentLength
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.CalculateSegmentCount*
  commentId: Overload:Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.CalculateSegmentCount
  isExternal: false
  name: CalculateSegmentCount
  nameWithType: UploadSegmentMetadata.CalculateSegmentCount
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.CalculateSegmentCount
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.SegmentNumber*
  commentId: Overload:Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.SegmentNumber
  isExternal: false
  name: SegmentNumber
  nameWithType: UploadSegmentMetadata.SegmentNumber
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.SegmentNumber
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.Offset*
  commentId: Overload:Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.Offset
  isExternal: false
  name: Offset
  nameWithType: UploadSegmentMetadata.Offset
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.Offset
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.Length*
  commentId: Overload:Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.Length
  isExternal: false
  name: Length
  nameWithType: UploadSegmentMetadata.Length
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.Length
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.Status*
  commentId: Overload:Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.Status
  isExternal: false
  name: Status
  nameWithType: UploadSegmentMetadata.Status
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.Status
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.SegmentUploadStatus
  commentId: T:Microsoft.Azure.Management.DataLake.StoreUploader.SegmentUploadStatus
  parent: Microsoft.Azure.Management.DataLake.StoreUploader
  isExternal: false
  name: SegmentUploadStatus
  nameWithType: SegmentUploadStatus
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.SegmentUploadStatus
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.Path*
  commentId: Overload:Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.Path
  isExternal: false
  name: Path
  nameWithType: UploadSegmentMetadata.Path
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.UploadSegmentMetadata.Path
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
