### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter
  commentId: T:Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter
  id: IFrontEndAdapter
  parent: Microsoft.Azure.Management.DataLake.StoreUploader
  children:
  - Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.AppendToStream(System.String,System.Byte[],System.Int64,System.Int32)
  - Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.Concatenate(System.String,System.String[],System.Boolean)
  - Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.CreateStream(System.String,System.Boolean,System.Byte[],System.Int32)
  - Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.DeleteStream(System.String,System.Boolean,System.Boolean)
  - Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.GetStreamLength(System.String,System.Boolean)
  - Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.IsDirectory(System.String)
  - Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.ListDirectory(System.String,System.Boolean)
  - Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.ReadStream(System.String,System.Int64,System.Int64,System.Boolean)
  - Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.StreamExists(System.String,System.Boolean)
  langs:
  - csharp
  - vb
  name: IFrontEndAdapter
  nameWithType: IFrontEndAdapter
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter
  type: Interface
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/IFrontEndAdapter.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: IFrontEndAdapter
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/IFrontEndAdapter.cs
    startLine: 24
  assemblies:
  - Microsoft.Azure.Management.DataLake.StoreUploader
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader
  summary: "\nDefines operations that the DataLakeUploader needs from the FrontEnd in order to operate\n"
  example: []
  syntax:
    content: public interface IFrontEndAdapter
    content.vb: Public Interface IFrontEndAdapter
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.CreateStream(System.String,System.Boolean,System.Byte[],System.Int32)
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.CreateStream(System.String,System.Boolean,System.Byte[],System.Int32)
  id: CreateStream(System.String,System.Boolean,System.Byte[],System.Int32)
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter
  langs:
  - csharp
  - vb
  name: CreateStream(String, Boolean, Byte[], Int32)
  nameWithType: IFrontEndAdapter.CreateStream(String, Boolean, Byte[], Int32)
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.CreateStream(System.String, System.Boolean, System.Byte[], System.Int32)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/IFrontEndAdapter.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CreateStream
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/IFrontEndAdapter.cs
    startLine: 33
  assemblies:
  - Microsoft.Azure.Management.DataLake.StoreUploader
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader
  summary: "\nCreates a new, empty stream at the given path.\n"
  example: []
  syntax:
    content: void CreateStream(string streamPath, bool overwrite, byte[] data, int byteCount)
    content.vb: Sub CreateStream(streamPath As String, overwrite As Boolean, data As Byte(), byteCount As Integer)
    parameters:
    - id: streamPath
      type: System.String
      description: The relative path to the stream.
    - id: overwrite
      type: System.Boolean
      description: Whether to overwrite an existing stream.
    - id: data
      type: System.Byte[]
      description: The data.
    - id: byteCount
      type: System.Int32
      description: The byte count.
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.CreateStream*
  nameWithType.vb: IFrontEndAdapter.CreateStream(String, Boolean, Byte(), Int32)
  fullName.vb: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.CreateStream(System.String, System.Boolean, System.Byte(), System.Int32)
  name.vb: CreateStream(String, Boolean, Byte(), Int32)
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.DeleteStream(System.String,System.Boolean,System.Boolean)
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.DeleteStream(System.String,System.Boolean,System.Boolean)
  id: DeleteStream(System.String,System.Boolean,System.Boolean)
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter
  langs:
  - csharp
  - vb
  name: DeleteStream(String, Boolean, Boolean)
  nameWithType: IFrontEndAdapter.DeleteStream(String, Boolean, Boolean)
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.DeleteStream(System.String, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/IFrontEndAdapter.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DeleteStream
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/IFrontEndAdapter.cs
    startLine: 41
  assemblies:
  - Microsoft.Azure.Management.DataLake.StoreUploader
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader
  summary: "\nDeletes an existing stream at the given path.\n"
  example: []
  syntax:
    content: void DeleteStream(string streamPath, bool recurse = false, bool isDownload = false)
    content.vb: Sub DeleteStream(streamPath As String, recurse As Boolean = False, isDownload As Boolean = False)
    parameters:
    - id: streamPath
      type: System.String
      description: The relative path to the stream.
    - id: recurse
      type: System.Boolean
      description: if set to <code>true</code> [recurse]. This is used for folder streams only.
    - id: isDownload
      type: System.Boolean
      description: if set to <code>true</code> [is download], meaning we will delete a stream on the local machine instead of on the server.
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.DeleteStream*
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.AppendToStream(System.String,System.Byte[],System.Int64,System.Int32)
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.AppendToStream(System.String,System.Byte[],System.Int64,System.Int32)
  id: AppendToStream(System.String,System.Byte[],System.Int64,System.Int32)
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter
  langs:
  - csharp
  - vb
  name: AppendToStream(String, Byte[], Int64, Int32)
  nameWithType: IFrontEndAdapter.AppendToStream(String, Byte[], Int64, Int32)
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.AppendToStream(System.String, System.Byte[], System.Int64, System.Int32)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/IFrontEndAdapter.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: AppendToStream
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/IFrontEndAdapter.cs
    startLine: 51
  assemblies:
  - Microsoft.Azure.Management.DataLake.StoreUploader
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader
  summary: "\nAppends the given byte array to the end of a given stream.\n"
  example: []
  syntax:
    content: void AppendToStream(string streamPath, byte[] data, long offset, int length)
    content.vb: Sub AppendToStream(streamPath As String, data As Byte(), offset As Long, length As Integer)
    parameters:
    - id: streamPath
      type: System.String
      description: The relative path to the stream.
    - id: data
      type: System.Byte[]
      description: An array of bytes to be appended to the stream.
    - id: offset
      type: System.Int64
      description: The offset at which to append to the stream.
    - id: length
      type: System.Int32
      description: The number of bytes to append (starting at 0).
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.AppendToStream*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: If the data to be appended is null or empty.
  nameWithType.vb: IFrontEndAdapter.AppendToStream(String, Byte(), Int64, Int32)
  fullName.vb: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.AppendToStream(System.String, System.Byte(), System.Int64, System.Int32)
  name.vb: AppendToStream(String, Byte(), Int64, Int32)
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.ReadStream(System.String,System.Int64,System.Int64,System.Boolean)
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.ReadStream(System.String,System.Int64,System.Int64,System.Boolean)
  id: ReadStream(System.String,System.Int64,System.Int64,System.Boolean)
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter
  langs:
  - csharp
  - vb
  name: ReadStream(String, Int64, Int64, Boolean)
  nameWithType: IFrontEndAdapter.ReadStream(String, Int64, Int64, Boolean)
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.ReadStream(System.String, System.Int64, System.Int64, System.Boolean)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/IFrontEndAdapter.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ReadStream
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/IFrontEndAdapter.cs
    startLine: 62
  assemblies:
  - Microsoft.Azure.Management.DataLake.StoreUploader
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader
  summary: "\nOpens a stream for reading given the speficied stream path\n"
  example: []
  syntax:
    content: Stream ReadStream(string streamPath, long offset, long length, bool isDownload = false)
    content.vb: Function ReadStream(streamPath As String, offset As Long, length As Long, isDownload As Boolean = False) As Stream
    parameters:
    - id: streamPath
      type: System.String
      description: The relative path to the stream.
    - id: offset
      type: System.Int64
      description: The offset at which to append to the stream.
    - id: length
      type: System.Int64
      description: The number of bytes to append (starting at 0).
    - id: isDownload
      type: System.Boolean
      description: if set to <code>true</code> [is download], meaning we will open a stream on the server to read from, instead of the local machine.
    return:
      type: System.IO.Stream
      description: ''
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.ReadStream*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: If the data to be appended is null or empty.
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.StreamExists(System.String,System.Boolean)
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.StreamExists(System.String,System.Boolean)
  id: StreamExists(System.String,System.Boolean)
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter
  langs:
  - csharp
  - vb
  name: StreamExists(String, Boolean)
  nameWithType: IFrontEndAdapter.StreamExists(String, Boolean)
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.StreamExists(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/IFrontEndAdapter.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: StreamExists
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/IFrontEndAdapter.cs
    startLine: 70
  assemblies:
  - Microsoft.Azure.Management.DataLake.StoreUploader
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader
  summary: "\nDetermines if the stream with given path exists.\n"
  example: []
  syntax:
    content: bool StreamExists(string streamPath, bool isDownload = false)
    content.vb: Function StreamExists(streamPath As String, isDownload As Boolean = False) As Boolean
    parameters:
    - id: streamPath
      type: System.String
      description: The relative path to the stream.
    - id: isDownload
      type: System.Boolean
      description: if set to <code>true</code> [is download], meaning we will test if the stream exists on the local machine instead of on the server.
    return:
      type: System.Boolean
      description: True if the stream exists, false otherwise.
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.StreamExists*
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.IsDirectory(System.String)
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.IsDirectory(System.String)
  id: IsDirectory(System.String)
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter
  langs:
  - csharp
  - vb
  name: IsDirectory(String)
  nameWithType: IFrontEndAdapter.IsDirectory(String)
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.IsDirectory(System.String)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/IFrontEndAdapter.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: IsDirectory
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/IFrontEndAdapter.cs
    startLine: 78
  assemblies:
  - Microsoft.Azure.Management.DataLake.StoreUploader
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader
  summary: "\nDetermines if the stream with given path on the server is a directory or a terminating file.\nThis is used exclusively for download.\n"
  example: []
  syntax:
    content: bool IsDirectory(string streamPath)
    content.vb: Function IsDirectory(streamPath As String) As Boolean
    parameters:
    - id: streamPath
      type: System.String
      description: The relative path to the stream.
    return:
      type: System.Boolean
      description: True if the stream is a directory, false otherwise.
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.IsDirectory*
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.ListDirectory(System.String,System.Boolean)
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.ListDirectory(System.String,System.Boolean)
  id: ListDirectory(System.String,System.Boolean)
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter
  langs:
  - csharp
  - vb
  name: ListDirectory(String, Boolean)
  nameWithType: IFrontEndAdapter.ListDirectory(String, Boolean)
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.ListDirectory(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/IFrontEndAdapter.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ListDirectory
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/IFrontEndAdapter.cs
    startLine: 88
  assemblies:
  - Microsoft.Azure.Management.DataLake.StoreUploader
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader
  summary: "\nLists the Data Lake Store directory specified.\n"
  example: []
  syntax:
    content: IDictionary<string, long> ListDirectory(string directoryPath, bool recursive)
    content.vb: Function ListDirectory(directoryPath As String, recursive As Boolean) As IDictionary(Of String, Long)
    parameters:
    - id: directoryPath
      type: System.String
      description: The directory path.
    - id: recursive
      type: System.Boolean
      description: if set to <code>true</code> [recursive].
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Int64}
      description: "\nThe list of string paths and their corresponding file sizes, in bytes.\n"
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.ListDirectory*
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.GetStreamLength(System.String,System.Boolean)
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.GetStreamLength(System.String,System.Boolean)
  id: GetStreamLength(System.String,System.Boolean)
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter
  langs:
  - csharp
  - vb
  name: GetStreamLength(String, Boolean)
  nameWithType: IFrontEndAdapter.GetStreamLength(String, Boolean)
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.GetStreamLength(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/IFrontEndAdapter.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: GetStreamLength
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/IFrontEndAdapter.cs
    startLine: 96
  assemblies:
  - Microsoft.Azure.Management.DataLake.StoreUploader
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader
  summary: "\nGets a value indicating the length of a stream, in bytes.\n"
  example: []
  syntax:
    content: long GetStreamLength(string streamPath, bool isDownload = false)
    content.vb: Function GetStreamLength(streamPath As String, isDownload As Boolean = False) As Long
    parameters:
    - id: streamPath
      type: System.String
      description: The relative path to the stream.
    - id: isDownload
      type: System.Boolean
      description: if set to <code>true</code> [is download], meaning we will get the stream length on the local machine instead of on the server.
    return:
      type: System.Int64
      description: The length of the stream, in bytes.
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.GetStreamLength*
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.Concatenate(System.String,System.String[],System.Boolean)
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.Concatenate(System.String,System.String[],System.Boolean)
  id: Concatenate(System.String,System.String[],System.Boolean)
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter
  langs:
  - csharp
  - vb
  name: Concatenate(String, String[], Boolean)
  nameWithType: IFrontEndAdapter.Concatenate(String, String[], Boolean)
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.Concatenate(System.String, System.String[], System.Boolean)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/IFrontEndAdapter.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Concatenate
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/src/DataLakeStoreUploader/IFrontEndAdapter.cs
    startLine: 105
  assemblies:
  - Microsoft.Azure.Management.DataLake.StoreUploader
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader
  summary: "\nConcatenates the given input streams (in order) into the given target stream.\nAt the end of this operation, input streams will be deleted.\n"
  example: []
  syntax:
    content: void Concatenate(string targetStreamPath, string[] inputStreamPaths, bool isDownload = false)
    content.vb: Sub Concatenate(targetStreamPath As String, inputStreamPaths As String(), isDownload As Boolean = False)
    parameters:
    - id: targetStreamPath
      type: System.String
      description: The relative path to the target stream.
    - id: inputStreamPaths
      type: System.String[]
      description: An ordered array of paths to the input streams.
    - id: isDownload
      type: System.Boolean
      description: if set to <code>true</code> [is download], meaning we will concatenate the streams on the local machine instead of on the server.
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.Concatenate*
  nameWithType.vb: IFrontEndAdapter.Concatenate(String, String(), Boolean)
  fullName.vb: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.Concatenate(System.String, System.String(), System.Boolean)
  name.vb: Concatenate(String, String(), Boolean)
references:
- uid: Microsoft.Azure.Management.DataLake.StoreUploader
  commentId: N:Microsoft.Azure.Management.DataLake.StoreUploader
  isExternal: false
  name: Microsoft.Azure.Management.DataLake.StoreUploader
  nameWithType: Microsoft.Azure.Management.DataLake.StoreUploader
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.CreateStream*
  commentId: Overload:Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.CreateStream
  isExternal: false
  name: CreateStream
  nameWithType: IFrontEndAdapter.CreateStream
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.CreateStream
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.DeleteStream*
  commentId: Overload:Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.DeleteStream
  isExternal: false
  name: DeleteStream
  nameWithType: IFrontEndAdapter.DeleteStream
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.DeleteStream
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.AppendToStream*
  commentId: Overload:Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.AppendToStream
  isExternal: false
  name: AppendToStream
  nameWithType: IFrontEndAdapter.AppendToStream
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.AppendToStream
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.ReadStream*
  commentId: Overload:Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.ReadStream
  isExternal: false
  name: ReadStream
  nameWithType: IFrontEndAdapter.ReadStream
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.ReadStream
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.StreamExists*
  commentId: Overload:Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.StreamExists
  isExternal: false
  name: StreamExists
  nameWithType: IFrontEndAdapter.StreamExists
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.StreamExists
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.IsDirectory*
  commentId: Overload:Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.IsDirectory
  isExternal: false
  name: IsDirectory
  nameWithType: IFrontEndAdapter.IsDirectory
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.IsDirectory
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.ListDirectory*
  commentId: Overload:Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.ListDirectory
  isExternal: false
  name: ListDirectory
  nameWithType: IFrontEndAdapter.ListDirectory
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.ListDirectory
- uid: System.Collections.Generic.IDictionary{System.String,System.Int64}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Int64}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Int64>
  nameWithType: IDictionary<String, Int64>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Int64>
  nameWithType.vb: IDictionary(Of String, Int64)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.Int64)
  name.vb: IDictionary(Of String, Int64)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.GetStreamLength*
  commentId: Overload:Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.GetStreamLength
  isExternal: false
  name: GetStreamLength
  nameWithType: IFrontEndAdapter.GetStreamLength
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.GetStreamLength
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.Concatenate*
  commentId: Overload:Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.Concatenate
  isExternal: false
  name: Concatenate
  nameWithType: IFrontEndAdapter.Concatenate
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.IFrontEndAdapter.Concatenate
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
