### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests
  commentId: T:Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests
  id: SingleSegmentUploaderTests
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.Tests
  children:
  - Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.#ctor
  - Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.Dispose
  - Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_RetryBlock
  - Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_TargetStreamExists
  - Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadFileRange
  - Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadMultiBlockStream
  - Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadNonBinaryFile
  - Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadNonBinaryFileTooLargeRecord
  - Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadSingleBlockStream
  - Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_VerifyUploadStreamFails
  - Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.TestRetryBlock(System.Int32)
  langs:
  - csharp
  - vb
  name: SingleSegmentUploaderTests
  nameWithType: SingleSegmentUploaderTests
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests
  type: Class
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/tests/UnitTests/SingleSegmentUploaderTests.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: SingleSegmentUploaderTests
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/tests/UnitTests/SingleSegmentUploaderTests.cs
    startLine: 19
  assemblies:
  - DataLakeStoreUploader.Tests
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader.Tests
  syntax:
    content: 'public class SingleSegmentUploaderTests : IDisposable'
    content.vb: >-
      Public Class SingleSegmentUploaderTests
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.#ctor
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.#ctor
  id: '#ctor'
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests
  langs:
  - csharp
  - vb
  name: SingleSegmentUploaderTests()
  nameWithType: SingleSegmentUploaderTests.SingleSegmentUploaderTests()
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploaderTests()
  type: Constructor
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/tests/UnitTests/SingleSegmentUploaderTests.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/tests/UnitTests/SingleSegmentUploaderTests.cs
    startLine: 49
  assemblies:
  - DataLakeStoreUploader.Tests
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader.Tests
  syntax:
    content: public SingleSegmentUploaderTests()
    content.vb: Public Sub New
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.Dispose
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.Dispose
  id: Dispose
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: SingleSegmentUploaderTests.Dispose()
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.Dispose()
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/tests/UnitTests/SingleSegmentUploaderTests.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Dispose
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/tests/UnitTests/SingleSegmentUploaderTests.cs
    startLine: 58
  assemblies:
  - DataLakeStoreUploader.Tests
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader.Tests
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadSingleBlockStream
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadSingleBlockStream
  id: SingleSegmentUploader_UploadSingleBlockStream
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests
  langs:
  - csharp
  - vb
  name: SingleSegmentUploader_UploadSingleBlockStream()
  nameWithType: SingleSegmentUploaderTests.SingleSegmentUploader_UploadSingleBlockStream()
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadSingleBlockStream()
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/tests/UnitTests/SingleSegmentUploaderTests.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: SingleSegmentUploader_UploadSingleBlockStream
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/tests/UnitTests/SingleSegmentUploaderTests.cs
    startLine: 84
  assemblies:
  - DataLakeStoreUploader.Tests
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader.Tests
  summary: "\nTests a simple upload consisting of a single block (the file is small enough to be uploaded without splitting into smaller buffers)\n"
  example: []
  syntax:
    content: public void SingleSegmentUploader_UploadSingleBlockStream()
    content.vb: Public Sub SingleSegmentUploader_UploadSingleBlockStream
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadSingleBlockStream*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadMultiBlockStream
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadMultiBlockStream
  id: SingleSegmentUploader_UploadMultiBlockStream
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests
  langs:
  - csharp
  - vb
  name: SingleSegmentUploader_UploadMultiBlockStream()
  nameWithType: SingleSegmentUploaderTests.SingleSegmentUploader_UploadMultiBlockStream()
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadMultiBlockStream()
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/tests/UnitTests/SingleSegmentUploaderTests.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: SingleSegmentUploader_UploadMultiBlockStream
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/tests/UnitTests/SingleSegmentUploaderTests.cs
    startLine: 103
  assemblies:
  - DataLakeStoreUploader.Tests
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader.Tests
  summary: "\nTests an uploading consisting of a larger file, which will need to be uploaded in sequential buffers.\n"
  example: []
  syntax:
    content: public void SingleSegmentUploader_UploadMultiBlockStream()
    content.vb: Public Sub SingleSegmentUploader_UploadMultiBlockStream
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadMultiBlockStream*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadFileRange
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadFileRange
  id: SingleSegmentUploader_UploadFileRange
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests
  langs:
  - csharp
  - vb
  name: SingleSegmentUploader_UploadFileRange()
  nameWithType: SingleSegmentUploaderTests.SingleSegmentUploader_UploadFileRange()
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadFileRange()
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/tests/UnitTests/SingleSegmentUploaderTests.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: SingleSegmentUploader_UploadFileRange
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/tests/UnitTests/SingleSegmentUploaderTests.cs
    startLine: 122
  assemblies:
  - DataLakeStoreUploader.Tests
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader.Tests
  summary: "\nTests the case when only a part of the file is to be uploaded (i.e., all other cases feed in the entire file)\n"
  example: []
  syntax:
    content: public void SingleSegmentUploader_UploadFileRange()
    content.vb: Public Sub SingleSegmentUploader_UploadFileRange
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadFileRange*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_TargetStreamExists
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_TargetStreamExists
  id: SingleSegmentUploader_TargetStreamExists
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests
  langs:
  - csharp
  - vb
  name: SingleSegmentUploader_TargetStreamExists()
  nameWithType: SingleSegmentUploaderTests.SingleSegmentUploader_TargetStreamExists()
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_TargetStreamExists()
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/tests/UnitTests/SingleSegmentUploaderTests.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: SingleSegmentUploader_TargetStreamExists
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/tests/UnitTests/SingleSegmentUploaderTests.cs
    startLine: 145
  assemblies:
  - DataLakeStoreUploader.Tests
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader.Tests
  summary: "\nTests the case when an existing stream with the same name already exists on the server. That stream needs to be fully replaced with the new data.\n"
  example: []
  syntax:
    content: public void SingleSegmentUploader_TargetStreamExists()
    content.vb: Public Sub SingleSegmentUploader_TargetStreamExists
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_TargetStreamExists*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_VerifyUploadStreamFails
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_VerifyUploadStreamFails
  id: SingleSegmentUploader_VerifyUploadStreamFails
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests
  langs:
  - csharp
  - vb
  name: SingleSegmentUploader_VerifyUploadStreamFails()
  nameWithType: SingleSegmentUploaderTests.SingleSegmentUploader_VerifyUploadStreamFails()
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_VerifyUploadStreamFails()
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/tests/UnitTests/SingleSegmentUploaderTests.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: SingleSegmentUploader_VerifyUploadStreamFails
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/tests/UnitTests/SingleSegmentUploaderTests.cs
    startLine: 168
  assemblies:
  - DataLakeStoreUploader.Tests
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader.Tests
  summary: "\nTests the case when the upload did \"succeed\", but the server reports back a different stream length than expected.\n"
  example: []
  syntax:
    content: public void SingleSegmentUploader_VerifyUploadStreamFails()
    content.vb: Public Sub SingleSegmentUploader_VerifyUploadStreamFails
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_VerifyUploadStreamFails*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadNonBinaryFile
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadNonBinaryFile
  id: SingleSegmentUploader_UploadNonBinaryFile
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests
  langs:
  - csharp
  - vb
  name: SingleSegmentUploader_UploadNonBinaryFile()
  nameWithType: SingleSegmentUploaderTests.SingleSegmentUploader_UploadNonBinaryFile()
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadNonBinaryFile()
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/tests/UnitTests/SingleSegmentUploaderTests.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: SingleSegmentUploader_UploadNonBinaryFile
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/tests/UnitTests/SingleSegmentUploaderTests.cs
    startLine: 193
  assemblies:
  - DataLakeStoreUploader.Tests
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader.Tests
  summary: "\nTests the case when the SingleSegmentUploader should upload a non-binary file (i.e., split on record boundaries).\n"
  example: []
  syntax:
    content: public void SingleSegmentUploader_UploadNonBinaryFile()
    content.vb: Public Sub SingleSegmentUploader_UploadNonBinaryFile
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadNonBinaryFile*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadNonBinaryFileTooLargeRecord
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadNonBinaryFileTooLargeRecord
  id: SingleSegmentUploader_UploadNonBinaryFileTooLargeRecord
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests
  langs:
  - csharp
  - vb
  name: SingleSegmentUploader_UploadNonBinaryFileTooLargeRecord()
  nameWithType: SingleSegmentUploaderTests.SingleSegmentUploader_UploadNonBinaryFileTooLargeRecord()
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadNonBinaryFileTooLargeRecord()
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/tests/UnitTests/SingleSegmentUploaderTests.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: SingleSegmentUploader_UploadNonBinaryFileTooLargeRecord
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/tests/UnitTests/SingleSegmentUploaderTests.cs
    startLine: 227
  assemblies:
  - DataLakeStoreUploader.Tests
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader.Tests
  summary: "\nTests the case when the SingleSegmentUploader tries upload a non-binary file (i.e., split on record boundaries), but at least one record is larger than the max allowed size.\n"
  example: []
  syntax:
    content: public void SingleSegmentUploader_UploadNonBinaryFileTooLargeRecord()
    content.vb: Public Sub SingleSegmentUploader_UploadNonBinaryFileTooLargeRecord
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadNonBinaryFileTooLargeRecord*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_RetryBlock
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_RetryBlock
  id: SingleSegmentUploader_RetryBlock
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests
  langs:
  - csharp
  - vb
  name: SingleSegmentUploader_RetryBlock()
  nameWithType: SingleSegmentUploaderTests.SingleSegmentUploader_RetryBlock()
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_RetryBlock()
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/tests/UnitTests/SingleSegmentUploaderTests.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: SingleSegmentUploader_RetryBlock
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/tests/UnitTests/SingleSegmentUploaderTests.cs
    startLine: 243
  assemblies:
  - DataLakeStoreUploader.Tests
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader.Tests
  summary: "\nTests various scenarios where the upload will fail repeatedly; verifies that the uploader will retry a certain number of times before finally giving up\n"
  example: []
  syntax:
    content: public void SingleSegmentUploader_RetryBlock()
    content.vb: Public Sub SingleSegmentUploader_RetryBlock
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_RetryBlock*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.TestRetryBlock(System.Int32)
  commentId: M:Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.TestRetryBlock(System.Int32)
  id: TestRetryBlock(System.Int32)
  parent: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests
  langs:
  - csharp
  - vb
  name: TestRetryBlock(Int32)
  nameWithType: SingleSegmentUploaderTests.TestRetryBlock(Int32)
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.TestRetryBlock(System.Int32)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataLake.StoreUploader/tests/UnitTests/SingleSegmentUploaderTests.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: TestRetryBlock
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.StoreUploader/tests/UnitTests/SingleSegmentUploaderTests.cs
    startLine: 254
  assemblies:
  - DataLakeStoreUploader.Tests
  namespace: Microsoft.Azure.Management.DataLake.StoreUploader.Tests
  syntax:
    content: public void TestRetryBlock(int failCount)
    content.vb: Public Sub TestRetryBlock(failCount As Integer)
    parameters:
    - id: failCount
      type: System.Int32
  overload: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.TestRetryBlock*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.Tests
  commentId: N:Microsoft.Azure.Management.DataLake.StoreUploader.Tests
  isExternal: false
  name: Microsoft.Azure.Management.DataLake.StoreUploader.Tests
  nameWithType: Microsoft.Azure.Management.DataLake.StoreUploader.Tests
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.Tests
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.#ctor*
  commentId: Overload:Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.#ctor
  isExternal: false
  name: SingleSegmentUploaderTests
  nameWithType: SingleSegmentUploaderTests.SingleSegmentUploaderTests
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploaderTests
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.Dispose*
  commentId: Overload:Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.Dispose
  isExternal: false
  name: Dispose
  nameWithType: SingleSegmentUploaderTests.Dispose
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadSingleBlockStream*
  commentId: Overload:Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadSingleBlockStream
  isExternal: false
  name: SingleSegmentUploader_UploadSingleBlockStream
  nameWithType: SingleSegmentUploaderTests.SingleSegmentUploader_UploadSingleBlockStream
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadSingleBlockStream
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadMultiBlockStream*
  commentId: Overload:Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadMultiBlockStream
  isExternal: false
  name: SingleSegmentUploader_UploadMultiBlockStream
  nameWithType: SingleSegmentUploaderTests.SingleSegmentUploader_UploadMultiBlockStream
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadMultiBlockStream
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadFileRange*
  commentId: Overload:Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadFileRange
  isExternal: false
  name: SingleSegmentUploader_UploadFileRange
  nameWithType: SingleSegmentUploaderTests.SingleSegmentUploader_UploadFileRange
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadFileRange
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_TargetStreamExists*
  commentId: Overload:Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_TargetStreamExists
  isExternal: false
  name: SingleSegmentUploader_TargetStreamExists
  nameWithType: SingleSegmentUploaderTests.SingleSegmentUploader_TargetStreamExists
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_TargetStreamExists
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_VerifyUploadStreamFails*
  commentId: Overload:Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_VerifyUploadStreamFails
  isExternal: false
  name: SingleSegmentUploader_VerifyUploadStreamFails
  nameWithType: SingleSegmentUploaderTests.SingleSegmentUploader_VerifyUploadStreamFails
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_VerifyUploadStreamFails
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadNonBinaryFile*
  commentId: Overload:Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadNonBinaryFile
  isExternal: false
  name: SingleSegmentUploader_UploadNonBinaryFile
  nameWithType: SingleSegmentUploaderTests.SingleSegmentUploader_UploadNonBinaryFile
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadNonBinaryFile
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadNonBinaryFileTooLargeRecord*
  commentId: Overload:Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadNonBinaryFileTooLargeRecord
  isExternal: false
  name: SingleSegmentUploader_UploadNonBinaryFileTooLargeRecord
  nameWithType: SingleSegmentUploaderTests.SingleSegmentUploader_UploadNonBinaryFileTooLargeRecord
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_UploadNonBinaryFileTooLargeRecord
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_RetryBlock*
  commentId: Overload:Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_RetryBlock
  isExternal: false
  name: SingleSegmentUploader_RetryBlock
  nameWithType: SingleSegmentUploaderTests.SingleSegmentUploader_RetryBlock
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.SingleSegmentUploader_RetryBlock
- uid: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.TestRetryBlock*
  commentId: Overload:Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.TestRetryBlock
  isExternal: false
  name: TestRetryBlock
  nameWithType: SingleSegmentUploaderTests.TestRetryBlock
  fullName: Microsoft.Azure.Management.DataLake.StoreUploader.Tests.SingleSegmentUploaderTests.TestRetryBlock
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
