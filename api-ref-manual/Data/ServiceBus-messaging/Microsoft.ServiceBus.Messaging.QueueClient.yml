### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceBus.Messaging.QueueClient
  commentId: T:Microsoft.ServiceBus.Messaging.QueueClient
  id: QueueClient
  parent: Microsoft.ServiceBus.Messaging
  children:
  - Microsoft.ServiceBus.Messaging.QueueClient.Abandon(System.Guid)
  - Microsoft.ServiceBus.Messaging.QueueClient.Abandon(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  - Microsoft.ServiceBus.Messaging.QueueClient.AbandonAsync(System.Guid)
  - Microsoft.ServiceBus.Messaging.QueueClient.AbandonAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  - Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSession
  - Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSession(System.String)
  - Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSession(System.String,System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSession(System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSessionAsync
  - Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSessionAsync(System.String)
  - Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSessionAsync(System.String,System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSessionAsync(System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.QueueClient.CancelScheduledMessageAsync(System.Int64)
  - Microsoft.ServiceBus.Messaging.QueueClient.Complete(System.Guid)
  - Microsoft.ServiceBus.Messaging.QueueClient.CompleteAsync(System.Guid)
  - Microsoft.ServiceBus.Messaging.QueueClient.CompleteBatch(System.Collections.Generic.IEnumerable{System.Guid})
  - Microsoft.ServiceBus.Messaging.QueueClient.CompleteBatchAsync(System.Collections.Generic.IEnumerable{System.Guid})
  - Microsoft.ServiceBus.Messaging.QueueClient.Create(System.String)
  - Microsoft.ServiceBus.Messaging.QueueClient.Create(System.String,Microsoft.ServiceBus.Messaging.ReceiveMode)
  - Microsoft.ServiceBus.Messaging.QueueClient.CreateFromConnectionString(System.String)
  - Microsoft.ServiceBus.Messaging.QueueClient.CreateFromConnectionString(System.String,Microsoft.ServiceBus.Messaging.ReceiveMode)
  - Microsoft.ServiceBus.Messaging.QueueClient.CreateFromConnectionString(System.String,System.String)
  - Microsoft.ServiceBus.Messaging.QueueClient.CreateFromConnectionString(System.String,System.String,Microsoft.ServiceBus.Messaging.ReceiveMode)
  - Microsoft.ServiceBus.Messaging.QueueClient.DeadLetter(System.Guid)
  - Microsoft.ServiceBus.Messaging.QueueClient.DeadLetter(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  - Microsoft.ServiceBus.Messaging.QueueClient.DeadLetter(System.Guid,System.String,System.String)
  - Microsoft.ServiceBus.Messaging.QueueClient.DeadLetterAsync(System.Guid)
  - Microsoft.ServiceBus.Messaging.QueueClient.DeadLetterAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  - Microsoft.ServiceBus.Messaging.QueueClient.DeadLetterAsync(System.Guid,System.String,System.String)
  - Microsoft.ServiceBus.Messaging.QueueClient.Defer(System.Guid)
  - Microsoft.ServiceBus.Messaging.QueueClient.Defer(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  - Microsoft.ServiceBus.Messaging.QueueClient.DeferAsync(System.Guid)
  - Microsoft.ServiceBus.Messaging.QueueClient.DeferAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  - Microsoft.ServiceBus.Messaging.QueueClient.FormatDeadLetterPath(System.String)
  - Microsoft.ServiceBus.Messaging.QueueClient.FormatTransferDeadLetterPath(System.String)
  - Microsoft.ServiceBus.Messaging.QueueClient.GetMessageSessions
  - Microsoft.ServiceBus.Messaging.QueueClient.GetMessageSessions(System.DateTime)
  - Microsoft.ServiceBus.Messaging.QueueClient.GetMessageSessionsAsync
  - Microsoft.ServiceBus.Messaging.QueueClient.GetMessageSessionsAsync(System.DateTime)
  - Microsoft.ServiceBus.Messaging.QueueClient.MessagingFactory
  - Microsoft.ServiceBus.Messaging.QueueClient.Mode
  - Microsoft.ServiceBus.Messaging.QueueClient.OnAbort
  - Microsoft.ServiceBus.Messaging.QueueClient.OnBeginAcceptMessageSession(System.String,Microsoft.ServiceBus.Messaging.ReceiveMode,System.Int32,System.TimeSpan,System.TimeSpan,System.AsyncCallback,System.Object)
  - Microsoft.ServiceBus.Messaging.QueueClient.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  - Microsoft.ServiceBus.Messaging.QueueClient.OnBeginCreateReceiver(Microsoft.ServiceBus.Messaging.ReceiveMode,System.TimeSpan,System.AsyncCallback,System.Object)
  - Microsoft.ServiceBus.Messaging.QueueClient.OnBeginCreateReceiver(System.String,Microsoft.ServiceBus.Messaging.ReceiveMode,System.TimeSpan,System.AsyncCallback,System.Object)
  - Microsoft.ServiceBus.Messaging.QueueClient.OnBeginCreateSender(System.TimeSpan,System.AsyncCallback,System.Object)
  - Microsoft.ServiceBus.Messaging.QueueClient.OnBeginGetMessageSessions(System.DateTime,System.AsyncCallback,System.Object)
  - Microsoft.ServiceBus.Messaging.QueueClient.OnClose(System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.QueueClient.OnEndAcceptMessageSession(System.IAsyncResult)
  - Microsoft.ServiceBus.Messaging.QueueClient.OnEndClose(System.IAsyncResult)
  - Microsoft.ServiceBus.Messaging.QueueClient.OnEndCreateReceiver(System.IAsyncResult)
  - Microsoft.ServiceBus.Messaging.QueueClient.OnEndCreateSender(System.IAsyncResult)
  - Microsoft.ServiceBus.Messaging.QueueClient.OnEndGetMessageSessions(System.IAsyncResult)
  - Microsoft.ServiceBus.Messaging.QueueClient.OnMessage(System.Action{Microsoft.ServiceBus.Messaging.BrokeredMessage})
  - Microsoft.ServiceBus.Messaging.QueueClient.OnMessage(System.Action{Microsoft.ServiceBus.Messaging.BrokeredMessage},Microsoft.ServiceBus.Messaging.OnMessageOptions)
  - Microsoft.ServiceBus.Messaging.QueueClient.OnMessageAsync(System.Func{Microsoft.ServiceBus.Messaging.BrokeredMessage,System.Threading.Tasks.Task})
  - Microsoft.ServiceBus.Messaging.QueueClient.OnMessageAsync(System.Func{Microsoft.ServiceBus.Messaging.BrokeredMessage,System.Threading.Tasks.Task},Microsoft.ServiceBus.Messaging.OnMessageOptions)
  - Microsoft.ServiceBus.Messaging.QueueClient.Path
  - Microsoft.ServiceBus.Messaging.QueueClient.Peek
  - Microsoft.ServiceBus.Messaging.QueueClient.Peek(System.Int64)
  - Microsoft.ServiceBus.Messaging.QueueClient.PeekAsync
  - Microsoft.ServiceBus.Messaging.QueueClient.PeekAsync(System.Int64)
  - Microsoft.ServiceBus.Messaging.QueueClient.PeekBatch(System.Int32)
  - Microsoft.ServiceBus.Messaging.QueueClient.PeekBatch(System.Int64,System.Int32)
  - Microsoft.ServiceBus.Messaging.QueueClient.PeekBatchAsync(System.Int32)
  - Microsoft.ServiceBus.Messaging.QueueClient.PeekBatchAsync(System.Int64,System.Int32)
  - Microsoft.ServiceBus.Messaging.QueueClient.PrefetchCount
  - Microsoft.ServiceBus.Messaging.QueueClient.Receive
  - Microsoft.ServiceBus.Messaging.QueueClient.Receive(System.Int64)
  - Microsoft.ServiceBus.Messaging.QueueClient.Receive(System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.QueueClient.ReceiveAsync
  - Microsoft.ServiceBus.Messaging.QueueClient.ReceiveAsync(System.Int64)
  - Microsoft.ServiceBus.Messaging.QueueClient.ReceiveAsync(System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatch(System.Collections.Generic.IEnumerable{System.Int64})
  - Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatch(System.Int32)
  - Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatch(System.Int32,System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatchAsync(System.Collections.Generic.IEnumerable{System.Int64})
  - Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatchAsync(System.Int32)
  - Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatchAsync(System.Int32,System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandler(System.Type)
  - Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandler(System.Type,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  - Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerAsync(System.Type)
  - Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerAsync(System.Type,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  - Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerFactory(Microsoft.ServiceBus.Messaging.IMessageSessionAsyncHandlerFactory,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  - Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerFactory(Microsoft.ServiceBus.Messaging.IMessageSessionHandlerFactory,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  - Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerFactoryAsync(Microsoft.ServiceBus.Messaging.IMessageSessionAsyncHandlerFactory,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  - Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerFactoryAsync(Microsoft.ServiceBus.Messaging.IMessageSessionHandlerFactory,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  - Microsoft.ServiceBus.Messaging.QueueClient.RenewMessageLock(System.Guid)
  - Microsoft.ServiceBus.Messaging.QueueClient.RenewMessageLockAsync(System.Guid)
  - Microsoft.ServiceBus.Messaging.QueueClient.ScheduleMessageAsync(Microsoft.ServiceBus.Messaging.BrokeredMessage,System.DateTimeOffset)
  - Microsoft.ServiceBus.Messaging.QueueClient.Send(Microsoft.ServiceBus.Messaging.BrokeredMessage)
  - Microsoft.ServiceBus.Messaging.QueueClient.SendAsync(Microsoft.ServiceBus.Messaging.BrokeredMessage)
  - Microsoft.ServiceBus.Messaging.QueueClient.SendBatch(System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage})
  - Microsoft.ServiceBus.Messaging.QueueClient.SendBatchAsync(System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage})
  langs:
  - csharp
  - vb
  name: QueueClient
  nameWithType: QueueClient
  fullName: Microsoft.ServiceBus.Messaging.QueueClient
  type: Class
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: QueueClient
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 18
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Represents the queue client object.
  example: []
  syntax:
    content: 'public abstract class QueueClient : ClientEntity, ICloseable, IMessageSessionEntity, IMessageClientEntity, IMessageSender, IMessageReceiver, IMessageBrowser'
    content.vb: >-
      Public MustInherit Class QueueClient
          Inherits ClientEntity
          Implements ICloseable, IMessageSessionEntity, IMessageClientEntity, IMessageSender, IMessageReceiver, IMessageBrowser
  inheritance:
  - System.Object
  - Microsoft.ServiceBus.Messaging.ClientEntity
  inheritedMembers:
  - Microsoft.ServiceBus.Messaging.ClientEntity.RetryPolicy
  - Microsoft.ServiceBus.Messaging.ClientEntity.IsClosed
  - Microsoft.ServiceBus.Messaging.ClientEntity.ThisLock
  - Microsoft.ServiceBus.Messaging.ClientEntity.Abort
  - Microsoft.ServiceBus.Messaging.ClientEntity.Close
  - Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
  - Microsoft.ServiceBus.Messaging.ClientEntity.Fault
  - Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen(System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
  - Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
  - Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
  - Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
  - Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
  - Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
  - Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
  - Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
  - Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
  - Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen(System.IAsyncResult)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.ServiceBus.Messaging.QueueClient.Mode
  commentId: P:Microsoft.ServiceBus.Messaging.QueueClient.Mode
  id: Mode
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: Mode
  nameWithType: QueueClient.Mode
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.Mode
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Mode
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 47
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets the message receive mode when processing the received message.
  example: []
  syntax:
    content: public ReceiveMode Mode { get; }
    content.vb: Public ReadOnly Property Mode As ReceiveMode
    parameters: []
    return:
      type: Microsoft.ServiceBus.Messaging.ReceiveMode
      description: The message <xref href="Microsoft.ServiceBus.Messaging.ReceiveMode" data-throw-if-not-resolved="false"></xref> when processing the received message.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.Mode*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.QueueClient.PrefetchCount
  commentId: P:Microsoft.ServiceBus.Messaging.QueueClient.PrefetchCount
  id: PrefetchCount
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: PrefetchCount
  nameWithType: QueueClient.PrefetchCount
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.PrefetchCount
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: PrefetchCount
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 52
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets or sets the number of messages that the queue receiver can simultaneously request.
  remarks: 'Takes effect on the next receive call to the server. '
  example: []
  syntax:
    content: public int PrefetchCount { get; set; }
    content.vb: Public Property PrefetchCount As Integer
    parameters: []
    return:
      type: System.Int32
      description: The number of messages that the queue receiver can simultaneously request.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.PrefetchCount*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.Path
  commentId: P:Microsoft.ServiceBus.Messaging.QueueClient.Path
  id: Path
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: Path
  nameWithType: QueueClient.Path
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.Path
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Path
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 69
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets or sets the full path name of the queue.
  example: []
  syntax:
    content: public string Path { get; }
    content.vb: Public ReadOnly Property Path As String
    parameters: []
    return:
      type: System.String
      description: The queue path relative to the <xref href="Microsoft.ServiceBus.Messaging.MessagingFactory" data-throw-if-not-resolved="false"></xref> base address.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.Path*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.QueueClient.MessagingFactory
  commentId: P:Microsoft.ServiceBus.Messaging.QueueClient.MessagingFactory
  id: MessagingFactory
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: MessagingFactory
  nameWithType: QueueClient.MessagingFactory
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.MessagingFactory
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: MessagingFactory
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 73
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets or sets the messaging factory.
  example: []
  syntax:
    content: public MessagingFactory MessagingFactory { get; }
    content.vb: Public ReadOnly Property MessagingFactory As MessagingFactory
    parameters: []
    return:
      type: Microsoft.ServiceBus.Messaging.MessagingFactory
      description: The messaging factory.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.MessagingFactory*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.QueueClient.Create(System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.Create(System.String)
  id: Create(System.String)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: Create(String)
  nameWithType: QueueClient.Create(String)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.Create(System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Create
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 119
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Creates a new copy of <xref href="Microsoft.ServiceBus.Messaging.QueueClient" data-throw-if-not-resolved="false"></xref> with specified path.
  remarks: "This method will attempt to retrieve the connection string information\nfrom either app.config, or web.config files. User must supply the connection \nstring using the \"AppSettings\" section of the configuration. The format of the section\nis as follows:\n\n<pre><code><appSettings>\n<!-- Service Bus specific app setings for messaging connections -->\n<add key=\"Microsoft.ServiceBus.ConnectionString\" value=\"Endpoint=sb://[your namespace].servicebus.windows.net;SharedSecretIssuer=owner;SharedSecretValue=[your secret]\"></add>\n</appSettings></code></pre>\n"
  example: []
  syntax:
    content: public static QueueClient Create(string path)
    content.vb: Public Shared Function Create(path As String) As QueueClient
    parameters:
    - id: path
      type: System.String
      description: The path.
    return:
      type: Microsoft.ServiceBus.Messaging.QueueClient
      description: The created <xref href="Microsoft.ServiceBus.Messaging.QueueClient" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.ServiceBus.Messaging.QueueClient.CreateFromConnectionString(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.CreateFromConnectionString(System.String,System.String)
  id: CreateFromConnectionString(System.String,System.String)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: CreateFromConnectionString(String, String)
  nameWithType: QueueClient.CreateFromConnectionString(String, String)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.CreateFromConnectionString(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CreateFromConnectionString
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 134
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Creates a new copy of \n<xref href=\"Microsoft.ServiceBus.Messaging.QueueClient\" data-throw-if-not-resolved=\"false\"></xref> from a connection string with the specified queue path. Use this overload only when the connection string does not use the \n<xref href=\"Microsoft.ServiceBus.ServiceBusConnectionStringBuilder.EntityPath\" data-throw-if-not-resolved=\"false\"></xref> property."
  remarks: "This method should only be used with a connection string that has namespace level authentication because \nthe connection string supplied should not have entity level information associated with it."
  example: []
  syntax:
    content: public static QueueClient CreateFromConnectionString(string connectionString, string path)
    content.vb: Public Shared Function CreateFromConnectionString(connectionString As String, path As String) As QueueClient
    parameters:
    - id: connectionString
      type: System.String
      description: The connection string used.
    - id: path
      type: System.String
      description: The path to the queue.
    return:
      type: Microsoft.ServiceBus.Messaging.QueueClient
      description: The created <xref href="Microsoft.ServiceBus.Messaging.QueueClient" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.CreateFromConnectionString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown when the format of the <span class="paramref">connectionString</span> parameter is incorrect.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.ServiceBus.Messaging.QueueClient.CreateFromConnectionString(System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.CreateFromConnectionString(System.String)
  id: CreateFromConnectionString(System.String)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: CreateFromConnectionString(String)
  nameWithType: QueueClient.CreateFromConnectionString(String)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.CreateFromConnectionString(System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CreateFromConnectionString
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 161
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Creates a new instance of <xref href="Microsoft.ServiceBus.Messaging.QueueClient" data-throw-if-not-resolved="false"></xref> using the specified connection string.
  remarks: "This method expects the connection string supplied has entity level information such as the entity path and \nauthentication information supplied."
  example: []
  syntax:
    content: public static QueueClient CreateFromConnectionString(string connectionString)
    content.vb: Public Shared Function CreateFromConnectionString(connectionString As String) As QueueClient
    parameters:
    - id: connectionString
      type: System.String
      description: The connection string to use.
    return:
      type: Microsoft.ServiceBus.Messaging.QueueClient
      description: The newly created <xref href="Microsoft.ServiceBus.Messaging.QueueClient" data-throw-if-not-resolved="false"></xref> instance.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.CreateFromConnectionString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown when the format of the <span class="paramref">connectionString</span> parameter is incorrect.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.ServiceBus.Messaging.QueueClient.Create(System.String,Microsoft.ServiceBus.Messaging.ReceiveMode)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.Create(System.String,Microsoft.ServiceBus.Messaging.ReceiveMode)
  id: Create(System.String,Microsoft.ServiceBus.Messaging.ReceiveMode)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: Create(String, ReceiveMode)
  nameWithType: QueueClient.Create(String, ReceiveMode)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.Create(System.String, Microsoft.ServiceBus.Messaging.ReceiveMode)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Create
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 194
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Creates a new copy of <xref href="Microsoft.ServiceBus.Messaging.QueueClient" data-throw-if-not-resolved="false"></xref> with specified path and mode.
  remarks: "This method will attempt to retrieve the connection string information\nfrom either app.config, or web.config files. User must supply the connection \nstring using the \"AppSettings\" section of the configuration. The format of the section\nis as follows:\n\n<pre><code><appSettings>\n<!-- Service Bus specific app setings for messaging connections -->\n<add key=\"Microsoft.ServiceBus.ConnectionString\" value=\"Endpoint=sb://[your namespace].servicebus.windows.net;SharedSecretIssuer=owner;SharedSecretValue=[your secret]\"></add>\n</appSettings></code></pre>\n"
  example: []
  syntax:
    content: public static QueueClient Create(string path, ReceiveMode mode)
    content.vb: Public Shared Function Create(path As String, mode As ReceiveMode) As QueueClient
    parameters:
    - id: path
      type: System.String
      description: The path.
    - id: mode
      type: Microsoft.ServiceBus.Messaging.ReceiveMode
      description: The mode.
    return:
      type: Microsoft.ServiceBus.Messaging.QueueClient
      description: The created <xref href="Microsoft.ServiceBus.Messaging.QueueClient" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.ServiceBus.Messaging.QueueClient.CreateFromConnectionString(System.String,System.String,Microsoft.ServiceBus.Messaging.ReceiveMode)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.CreateFromConnectionString(System.String,System.String,Microsoft.ServiceBus.Messaging.ReceiveMode)
  id: CreateFromConnectionString(System.String,System.String,Microsoft.ServiceBus.Messaging.ReceiveMode)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: CreateFromConnectionString(String, String, ReceiveMode)
  nameWithType: QueueClient.CreateFromConnectionString(String, String, ReceiveMode)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.CreateFromConnectionString(System.String, System.String, Microsoft.ServiceBus.Messaging.ReceiveMode)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CreateFromConnectionString
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 210
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Creates a new instance of \n<xref href=\"Microsoft.ServiceBus.Messaging.QueueClient\" data-throw-if-not-resolved=\"false\"></xref> from a connection string with the specified path and mode. Use this overload only when the connection string does not use the \n<xref href=\"Microsoft.ServiceBus.ServiceBusConnectionStringBuilder.EntityPath\" data-throw-if-not-resolved=\"false\"></xref> property."
  remarks: "This method should only be used with a connection string that has namespace level authentication because \nthe connection string supplied should not have entity level information associated with it."
  example: []
  syntax:
    content: public static QueueClient CreateFromConnectionString(string connectionString, string path, ReceiveMode mode)
    content.vb: Public Shared Function CreateFromConnectionString(connectionString As String, path As String, mode As ReceiveMode) As QueueClient
    parameters:
    - id: connectionString
      type: System.String
      description: The connection string.
    - id: path
      type: System.String
      description: The path to the queue.
    - id: mode
      type: Microsoft.ServiceBus.Messaging.ReceiveMode
      description: The <xref href="Microsoft.ServiceBus.Messaging.ReceiveMode" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.ServiceBus.Messaging.QueueClient
      description: The created <xref href="Microsoft.ServiceBus.Messaging.QueueClient" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.CreateFromConnectionString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown when the format of the <span class="paramref">connectionString</span> parameter is incorrect.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.ServiceBus.Messaging.QueueClient.CreateFromConnectionString(System.String,Microsoft.ServiceBus.Messaging.ReceiveMode)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.CreateFromConnectionString(System.String,Microsoft.ServiceBus.Messaging.ReceiveMode)
  id: CreateFromConnectionString(System.String,Microsoft.ServiceBus.Messaging.ReceiveMode)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: CreateFromConnectionString(String, ReceiveMode)
  nameWithType: QueueClient.CreateFromConnectionString(String, ReceiveMode)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.CreateFromConnectionString(System.String, Microsoft.ServiceBus.Messaging.ReceiveMode)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CreateFromConnectionString
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 239
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Creates a new instance of \n<xref href=\"Microsoft.ServiceBus.Messaging.QueueClient\" data-throw-if-not-resolved=\"false\"></xref> using the specified connection string and receiving mode."
  remarks: "This method expects the connection string supplied has entity level information such as the entity path and \nauthentication information supplied."
  example: []
  syntax:
    content: public static QueueClient CreateFromConnectionString(string connectionString, ReceiveMode mode)
    content.vb: Public Shared Function CreateFromConnectionString(connectionString As String, mode As ReceiveMode) As QueueClient
    parameters:
    - id: connectionString
      type: System.String
      description: The connection string to use.
    - id: mode
      type: Microsoft.ServiceBus.Messaging.ReceiveMode
      description: The <xref href="Microsoft.ServiceBus.Messaging.ReceiveMode" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.ServiceBus.Messaging.QueueClient
      description: The newly created <xref href="Microsoft.ServiceBus.Messaging.QueueClient" data-throw-if-not-resolved="false"></xref> instance.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.CreateFromConnectionString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown when the format of the <span class="paramref">connectionString</span> parameter is incorrect.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.ServiceBus.Messaging.QueueClient.FormatDeadLetterPath(System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.FormatDeadLetterPath(System.String)
  id: FormatDeadLetterPath(System.String)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: FormatDeadLetterPath(String)
  nameWithType: QueueClient.FormatDeadLetterPath(String)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.FormatDeadLetterPath(System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: FormatDeadLetterPath
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 258
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Builds a format name from the specified dead letter queue path.
  example: []
  syntax:
    content: public static string FormatDeadLetterPath(string queuePath)
    content.vb: Public Shared Function FormatDeadLetterPath(queuePath As String) As String
    parameters:
    - id: queuePath
      type: System.String
      description: The path to the dead letter queue.
    return:
      type: System.String
      description: The <xref href="System.String" data-throw-if-not-resolved="false"></xref> resulted from building the format name for the specified dead letter queue path.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.FormatDeadLetterPath*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.ServiceBus.Messaging.QueueClient.FormatTransferDeadLetterPath(System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.FormatTransferDeadLetterPath(System.String)
  id: FormatTransferDeadLetterPath(System.String)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: FormatTransferDeadLetterPath(String)
  nameWithType: QueueClient.FormatTransferDeadLetterPath(String)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.FormatTransferDeadLetterPath(System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: FormatTransferDeadLetterPath
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 265
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: ''
  example: []
  syntax:
    content: public static string FormatTransferDeadLetterPath(string queuePath)
    content.vb: Public Shared Function FormatTransferDeadLetterPath(queuePath As String) As String
    parameters:
    - id: queuePath
      type: System.String
      description: ''
    return:
      type: System.String
  overload: Microsoft.ServiceBus.Messaging.QueueClient.FormatTransferDeadLetterPath*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.ServiceBus.Messaging.QueueClient.RenewMessageLock(System.Guid)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.RenewMessageLock(System.Guid)
  id: RenewMessageLock(System.Guid)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: RenewMessageLock(Guid)
  nameWithType: QueueClient.RenewMessageLock(Guid)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.RenewMessageLock(System.Guid)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: RenewMessageLock
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 272
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: ''
  example: []
  syntax:
    content: public DateTime RenewMessageLock(Guid lockToken)
    content.vb: Public Function RenewMessageLock(lockToken As Guid) As Date
    parameters:
    - id: lockToken
      type: System.Guid
      description: ''
    return:
      type: System.DateTime
  overload: Microsoft.ServiceBus.Messaging.QueueClient.RenewMessageLock*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.RenewMessageLockAsync(System.Guid)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.RenewMessageLockAsync(System.Guid)
  id: RenewMessageLockAsync(System.Guid)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: RenewMessageLockAsync(Guid)
  nameWithType: QueueClient.RenewMessageLockAsync(Guid)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.RenewMessageLockAsync(System.Guid)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: RenewMessageLockAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 281
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: ''
  example: []
  syntax:
    content: public Task<DateTime> RenewMessageLockAsync(Guid lockToken)
    content.vb: Public Function RenewMessageLockAsync(lockToken As Guid) As Task(Of Date)
    parameters:
    - id: lockToken
      type: System.Guid
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.DateTime}
  overload: Microsoft.ServiceBus.Messaging.QueueClient.RenewMessageLockAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandler(System.Type)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandler(System.Type)
  id: RegisterSessionHandler(System.Type)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: RegisterSessionHandler(Type)
  nameWithType: QueueClient.RegisterSessionHandler(Type)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandler(System.Type)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: RegisterSessionHandler
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 291
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Registers the session handler with specific type.
  example: []
  syntax:
    content: public void RegisterSessionHandler(Type handlerType)
    content.vb: Public Sub RegisterSessionHandler(handlerType As Type)
    parameters:
    - id: handlerType
      type: System.Type
      description: The handler type.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandler*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandler(System.Type,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandler(System.Type,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  id: RegisterSessionHandler(System.Type,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: RegisterSessionHandler(Type, SessionHandlerOptions)
  nameWithType: QueueClient.RegisterSessionHandler(Type, SessionHandlerOptions)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandler(System.Type, Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: RegisterSessionHandler
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 301
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Registers the session handler with specific type and handler options.
  example: []
  syntax:
    content: public void RegisterSessionHandler(Type handlerType, SessionHandlerOptions options)
    content.vb: Public Sub RegisterSessionHandler(handlerType As Type, options As SessionHandlerOptions)
    parameters:
    - id: handlerType
      type: System.Type
      description: The handler type.
    - id: options
      type: Microsoft.ServiceBus.Messaging.SessionHandlerOptions
      description: The session handler options.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandler*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerAsync(System.Type)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerAsync(System.Type)
  id: RegisterSessionHandlerAsync(System.Type)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: RegisterSessionHandlerAsync(Type)
  nameWithType: QueueClient.RegisterSessionHandlerAsync(Type)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerAsync(System.Type)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: RegisterSessionHandlerAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 311
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously registers the session handler with specific type.
  example: []
  syntax:
    content: public Task RegisterSessionHandlerAsync(Type handlerType)
    content.vb: Public Function RegisterSessionHandlerAsync(handlerType As Type) As Task
    parameters:
    - id: handlerType
      type: System.Type
      description: The handler type.
    return:
      type: System.Threading.Tasks.Task
      description: The task object representing the asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerAsync(System.Type,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerAsync(System.Type,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  id: RegisterSessionHandlerAsync(System.Type,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: RegisterSessionHandlerAsync(Type, SessionHandlerOptions)
  nameWithType: QueueClient.RegisterSessionHandlerAsync(Type, SessionHandlerOptions)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerAsync(System.Type, Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: RegisterSessionHandlerAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 322
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously registers the session handler with specific type and handler options.
  example: []
  syntax:
    content: public Task RegisterSessionHandlerAsync(Type handlerType, SessionHandlerOptions options)
    content.vb: Public Function RegisterSessionHandlerAsync(handlerType As Type, options As SessionHandlerOptions) As Task
    parameters:
    - id: handlerType
      type: System.Type
      description: The handler type.
    - id: options
      type: Microsoft.ServiceBus.Messaging.SessionHandlerOptions
      description: The session handler options.
    return:
      type: System.Threading.Tasks.Task
      description: The task object representing the asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerFactory(Microsoft.ServiceBus.Messaging.IMessageSessionHandlerFactory,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerFactory(Microsoft.ServiceBus.Messaging.IMessageSessionHandlerFactory,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  id: RegisterSessionHandlerFactory(Microsoft.ServiceBus.Messaging.IMessageSessionHandlerFactory,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: RegisterSessionHandlerFactory(IMessageSessionHandlerFactory, SessionHandlerOptions)
  nameWithType: QueueClient.RegisterSessionHandlerFactory(IMessageSessionHandlerFactory, SessionHandlerOptions)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerFactory(Microsoft.ServiceBus.Messaging.IMessageSessionHandlerFactory, Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: RegisterSessionHandlerFactory
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 332
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Registers a message session handler factory with specified options.
  example: []
  syntax:
    content: public void RegisterSessionHandlerFactory(IMessageSessionHandlerFactory factory, SessionHandlerOptions options)
    content.vb: Public Sub RegisterSessionHandlerFactory(factory As IMessageSessionHandlerFactory, options As SessionHandlerOptions)
    parameters:
    - id: factory
      type: Microsoft.ServiceBus.Messaging.IMessageSessionHandlerFactory
      description: The handler factory to be registered.
    - id: options
      type: Microsoft.ServiceBus.Messaging.SessionHandlerOptions
      description: The handler options.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerFactory*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerFactory(Microsoft.ServiceBus.Messaging.IMessageSessionAsyncHandlerFactory,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerFactory(Microsoft.ServiceBus.Messaging.IMessageSessionAsyncHandlerFactory,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  id: RegisterSessionHandlerFactory(Microsoft.ServiceBus.Messaging.IMessageSessionAsyncHandlerFactory,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: RegisterSessionHandlerFactory(IMessageSessionAsyncHandlerFactory, SessionHandlerOptions)
  nameWithType: QueueClient.RegisterSessionHandlerFactory(IMessageSessionAsyncHandlerFactory, SessionHandlerOptions)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerFactory(Microsoft.ServiceBus.Messaging.IMessageSessionAsyncHandlerFactory, Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: RegisterSessionHandlerFactory
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 342
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Registers a message session handler factory with specified options.
  example: []
  syntax:
    content: public void RegisterSessionHandlerFactory(IMessageSessionAsyncHandlerFactory factory, SessionHandlerOptions options)
    content.vb: Public Sub RegisterSessionHandlerFactory(factory As IMessageSessionAsyncHandlerFactory, options As SessionHandlerOptions)
    parameters:
    - id: factory
      type: Microsoft.ServiceBus.Messaging.IMessageSessionAsyncHandlerFactory
      description: The handler factory to be registered.
    - id: options
      type: Microsoft.ServiceBus.Messaging.SessionHandlerOptions
      description: The handler options.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerFactory*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerFactoryAsync(Microsoft.ServiceBus.Messaging.IMessageSessionHandlerFactory,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerFactoryAsync(Microsoft.ServiceBus.Messaging.IMessageSessionHandlerFactory,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  id: RegisterSessionHandlerFactoryAsync(Microsoft.ServiceBus.Messaging.IMessageSessionHandlerFactory,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: RegisterSessionHandlerFactoryAsync(IMessageSessionHandlerFactory, SessionHandlerOptions)
  nameWithType: QueueClient.RegisterSessionHandlerFactoryAsync(IMessageSessionHandlerFactory, SessionHandlerOptions)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerFactoryAsync(Microsoft.ServiceBus.Messaging.IMessageSessionHandlerFactory, Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: RegisterSessionHandlerFactoryAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 353
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously registers a message session handler factory.
  example: []
  syntax:
    content: public Task RegisterSessionHandlerFactoryAsync(IMessageSessionHandlerFactory factory, SessionHandlerOptions options)
    content.vb: Public Function RegisterSessionHandlerFactoryAsync(factory As IMessageSessionHandlerFactory, options As SessionHandlerOptions) As Task
    parameters:
    - id: factory
      type: Microsoft.ServiceBus.Messaging.IMessageSessionHandlerFactory
      description: The handler factory to be registered.
    - id: options
      type: Microsoft.ServiceBus.Messaging.SessionHandlerOptions
      description: The handler options.
    return:
      type: System.Threading.Tasks.Task
      description: The task object representing the asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerFactoryAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerFactoryAsync(Microsoft.ServiceBus.Messaging.IMessageSessionAsyncHandlerFactory,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerFactoryAsync(Microsoft.ServiceBus.Messaging.IMessageSessionAsyncHandlerFactory,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  id: RegisterSessionHandlerFactoryAsync(Microsoft.ServiceBus.Messaging.IMessageSessionAsyncHandlerFactory,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: RegisterSessionHandlerFactoryAsync(IMessageSessionAsyncHandlerFactory, SessionHandlerOptions)
  nameWithType: QueueClient.RegisterSessionHandlerFactoryAsync(IMessageSessionAsyncHandlerFactory, SessionHandlerOptions)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerFactoryAsync(Microsoft.ServiceBus.Messaging.IMessageSessionAsyncHandlerFactory, Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: RegisterSessionHandlerFactoryAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 364
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously registers a message session handler factory.
  example: []
  syntax:
    content: public Task RegisterSessionHandlerFactoryAsync(IMessageSessionAsyncHandlerFactory factory, SessionHandlerOptions options)
    content.vb: Public Function RegisterSessionHandlerFactoryAsync(factory As IMessageSessionAsyncHandlerFactory, options As SessionHandlerOptions) As Task
    parameters:
    - id: factory
      type: Microsoft.ServiceBus.Messaging.IMessageSessionAsyncHandlerFactory
      description: The handler factory to be registered.
    - id: options
      type: Microsoft.ServiceBus.Messaging.SessionHandlerOptions
      description: The handler options.
    return:
      type: System.Threading.Tasks.Task
      description: The task object representing the asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerFactoryAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.OnMessage(System.Action{Microsoft.ServiceBus.Messaging.BrokeredMessage})
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.OnMessage(System.Action{Microsoft.ServiceBus.Messaging.BrokeredMessage})
  id: OnMessage(System.Action{Microsoft.ServiceBus.Messaging.BrokeredMessage})
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: OnMessage(Action<BrokeredMessage>)
  nameWithType: QueueClient.OnMessage(Action<BrokeredMessage>)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.OnMessage(System.Action<Microsoft.ServiceBus.Messaging.BrokeredMessage>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnMessage
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 373
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Processes a message in an event-driven message pump.
  example: []
  syntax:
    content: public void OnMessage(Action<BrokeredMessage> callback)
    content.vb: Public Sub OnMessage(callback As Action(Of BrokeredMessage))
    parameters:
    - id: callback
      type: System.Action{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: The method to invoke when the operation is complete.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.OnMessage*
  nameWithType.vb: QueueClient.OnMessage(Action(Of BrokeredMessage))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.QueueClient.OnMessage(System.Action(Of Microsoft.ServiceBus.Messaging.BrokeredMessage))
  name.vb: OnMessage(Action(Of BrokeredMessage))
- uid: Microsoft.ServiceBus.Messaging.QueueClient.OnMessage(System.Action{Microsoft.ServiceBus.Messaging.BrokeredMessage},Microsoft.ServiceBus.Messaging.OnMessageOptions)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.OnMessage(System.Action{Microsoft.ServiceBus.Messaging.BrokeredMessage},Microsoft.ServiceBus.Messaging.OnMessageOptions)
  id: OnMessage(System.Action{Microsoft.ServiceBus.Messaging.BrokeredMessage},Microsoft.ServiceBus.Messaging.OnMessageOptions)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: OnMessage(Action<BrokeredMessage>, OnMessageOptions)
  nameWithType: QueueClient.OnMessage(Action<BrokeredMessage>, OnMessageOptions)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.OnMessage(System.Action<Microsoft.ServiceBus.Messaging.BrokeredMessage>, Microsoft.ServiceBus.Messaging.OnMessageOptions)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnMessage
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 384
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Processes a message in an event-driven message pump, with the given set of \n<xref href=\"Microsoft.ServiceBus.Messaging.OnMessageOptions\" data-throw-if-not-resolved=\"false\"></xref> options."
  example: []
  syntax:
    content: public void OnMessage(Action<BrokeredMessage> callback, OnMessageOptions onMessageOptions)
    content.vb: Public Sub OnMessage(callback As Action(Of BrokeredMessage), onMessageOptions As OnMessageOptions)
    parameters:
    - id: callback
      type: System.Action{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: The method to invoke when the operation is complete.
    - id: onMessageOptions
      type: Microsoft.ServiceBus.Messaging.OnMessageOptions
      description: "Specifies the \n<xref href=\"Microsoft.ServiceBus.Messaging.OnMessageOptions\" data-throw-if-not-resolved=\"false\"></xref> options with which to instantiate the message pump."
  overload: Microsoft.ServiceBus.Messaging.QueueClient.OnMessage*
  nameWithType.vb: QueueClient.OnMessage(Action(Of BrokeredMessage), OnMessageOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.QueueClient.OnMessage(System.Action(Of Microsoft.ServiceBus.Messaging.BrokeredMessage), Microsoft.ServiceBus.Messaging.OnMessageOptions)
  name.vb: OnMessage(Action(Of BrokeredMessage), OnMessageOptions)
- uid: Microsoft.ServiceBus.Messaging.QueueClient.OnMessageAsync(System.Func{Microsoft.ServiceBus.Messaging.BrokeredMessage,System.Threading.Tasks.Task})
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.OnMessageAsync(System.Func{Microsoft.ServiceBus.Messaging.BrokeredMessage,System.Threading.Tasks.Task})
  id: OnMessageAsync(System.Func{Microsoft.ServiceBus.Messaging.BrokeredMessage,System.Threading.Tasks.Task})
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: OnMessageAsync(Func<BrokeredMessage, Task>)
  nameWithType: QueueClient.OnMessageAsync(Func<BrokeredMessage, Task>)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.OnMessageAsync(System.Func<Microsoft.ServiceBus.Messaging.BrokeredMessage, System.Threading.Tasks.Task>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnMessageAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 394
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously processes a message.
  example: []
  syntax:
    content: public void OnMessageAsync(Func<BrokeredMessage, Task> callback)
    content.vb: Public Sub OnMessageAsync(callback As Func(Of BrokeredMessage, Task))
    parameters:
    - id: callback
      type: System.Func{Microsoft.ServiceBus.Messaging.BrokeredMessage,System.Threading.Tasks.Task}
      description: The method to invoke when the operation is complete.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.OnMessageAsync*
  nameWithType.vb: QueueClient.OnMessageAsync(Func(Of BrokeredMessage, Task))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.QueueClient.OnMessageAsync(System.Func(Of Microsoft.ServiceBus.Messaging.BrokeredMessage, System.Threading.Tasks.Task))
  name.vb: OnMessageAsync(Func(Of BrokeredMessage, Task))
- uid: Microsoft.ServiceBus.Messaging.QueueClient.OnMessageAsync(System.Func{Microsoft.ServiceBus.Messaging.BrokeredMessage,System.Threading.Tasks.Task},Microsoft.ServiceBus.Messaging.OnMessageOptions)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.OnMessageAsync(System.Func{Microsoft.ServiceBus.Messaging.BrokeredMessage,System.Threading.Tasks.Task},Microsoft.ServiceBus.Messaging.OnMessageOptions)
  id: OnMessageAsync(System.Func{Microsoft.ServiceBus.Messaging.BrokeredMessage,System.Threading.Tasks.Task},Microsoft.ServiceBus.Messaging.OnMessageOptions)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: OnMessageAsync(Func<BrokeredMessage, Task>, OnMessageOptions)
  nameWithType: QueueClient.OnMessageAsync(Func<BrokeredMessage, Task>, OnMessageOptions)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.OnMessageAsync(System.Func<Microsoft.ServiceBus.Messaging.BrokeredMessage, System.Threading.Tasks.Task>, Microsoft.ServiceBus.Messaging.OnMessageOptions)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnMessageAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 403
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously processes a message.
  example: []
  syntax:
    content: public void OnMessageAsync(Func<BrokeredMessage, Task> callback, OnMessageOptions onMessageOptions)
    content.vb: Public Sub OnMessageAsync(callback As Func(Of BrokeredMessage, Task), onMessageOptions As OnMessageOptions)
    parameters:
    - id: callback
      type: System.Func{Microsoft.ServiceBus.Messaging.BrokeredMessage,System.Threading.Tasks.Task}
      description: The method to invoke when the operation is complete.
    - id: onMessageOptions
      type: Microsoft.ServiceBus.Messaging.OnMessageOptions
      description: Calls a message option.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.OnMessageAsync*
  nameWithType.vb: QueueClient.OnMessageAsync(Func(Of BrokeredMessage, Task), OnMessageOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.QueueClient.OnMessageAsync(System.Func(Of Microsoft.ServiceBus.Messaging.BrokeredMessage, System.Threading.Tasks.Task), Microsoft.ServiceBus.Messaging.OnMessageOptions)
  name.vb: OnMessageAsync(Func(Of BrokeredMessage, Task), OnMessageOptions)
- uid: Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSession
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSession
  id: AcceptMessageSession
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: AcceptMessageSession()
  nameWithType: QueueClient.AcceptMessageSession()
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSession()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: AcceptMessageSession
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 546
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Accepts a message session that allows grouping of related messages for processing in a single transaction.
  example: []
  syntax:
    content: public MessageSession AcceptMessageSession()
    content.vb: Public Function AcceptMessageSession As MessageSession
    return:
      type: Microsoft.ServiceBus.Messaging.MessageSession
      description: "A \n<xref href=\"Microsoft.ServiceBus.Messaging.MessageSession\" data-throw-if-not-resolved=\"false\"></xref> that allows grouping of related messages for processing in a single transaction."
  overload: Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSession*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "Thrown if the operation exceeded the timeout value set by \n<xref href=\"Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref>."
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Thrown if the client is already closed, aborted, or disposed.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSession(System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSession(System.String)
  id: AcceptMessageSession(System.String)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: AcceptMessageSession(String)
  nameWithType: QueueClient.AcceptMessageSession(String)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSession(System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: AcceptMessageSession
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 560
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Accepts a message session that allows grouping of related messages \nfor processing in a single transaction using the given session identifier."
  example: []
  syntax:
    content: public MessageSession AcceptMessageSession(string sessionId)
    content.vb: Public Function AcceptMessageSession(sessionId As String) As MessageSession
    parameters:
    - id: sessionId
      type: System.String
      description: The session identifier of the message session.
    return:
      type: Microsoft.ServiceBus.Messaging.MessageSession
      description: "A \n<xref href=\"Microsoft.ServiceBus.Messaging.MessageSession\" data-throw-if-not-resolved=\"false\"></xref> that allows grouping of related messages for processing in a single transaction."
  overload: Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSession*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if sessionId is null, empty, or white spaces.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "Thrown if the operation exceeded the timeout value set by \n<xref href=\"Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref>."
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Thrown if the client is already closed, aborted, or disposed.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSession(System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSession(System.TimeSpan)
  id: AcceptMessageSession(System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: AcceptMessageSession(TimeSpan)
  nameWithType: QueueClient.AcceptMessageSession(TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSession(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: AcceptMessageSession
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 574
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Accepts a message session that allows grouping of related messages \nfor processing in a single transaction using the specified server wait time."
  example: []
  syntax:
    content: public MessageSession AcceptMessageSession(TimeSpan serverWaitTime)
    content.vb: Public Function AcceptMessageSession(serverWaitTime As TimeSpan) As MessageSession
    parameters:
    - id: serverWaitTime
      type: System.TimeSpan
      description: The time span the server waits for processing messages before it times out.
    return:
      type: Microsoft.ServiceBus.Messaging.MessageSession
      description: "A \n<xref href=\"Microsoft.ServiceBus.Messaging.MessageSession\" data-throw-if-not-resolved=\"false\"></xref> that allows grouping of related messages for processing in a single transaction."
  overload: Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSession*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown if <span class="paramref">serverWaitTime</span> is not a positive TimeSpan value.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "Thrown if the operation exceeded \nthe timeout value set by <span class=\"paramref\">serverWaitTime</span>."
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Thrown if the client is already closed, aborted, or disposed.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSession(System.String,System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSession(System.String,System.TimeSpan)
  id: AcceptMessageSession(System.String,System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: AcceptMessageSession(String, TimeSpan)
  nameWithType: QueueClient.AcceptMessageSession(String, TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSession(System.String, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: AcceptMessageSession
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 590
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Accepts a message session that allows grouping of related messages for \nprocessing in a single transaction using the given session identifier and wait time."
  example: []
  syntax:
    content: public MessageSession AcceptMessageSession(string sessionId, TimeSpan serverWaitTime)
    content.vb: Public Function AcceptMessageSession(sessionId As String, serverWaitTime As TimeSpan) As MessageSession
    parameters:
    - id: sessionId
      type: System.String
      description: The session identifier of the message session.
    - id: serverWaitTime
      type: System.TimeSpan
      description: The time span the server waits for processing messages before it times out.
    return:
      type: Microsoft.ServiceBus.Messaging.MessageSession
      description: "A \n<xref href=\"Microsoft.ServiceBus.Messaging.MessageSession\" data-throw-if-not-resolved=\"false\"></xref> that allows grouping of related messages for processing in a single transaction."
  overload: Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSession*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if sessionId is null, empty, or white spaces.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown if <span class="paramref">serverWaitTime</span> is not a positive TimeSpan value.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "Thrown if the operation exceeded the timeout value set by \n<xref href=\"Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref>."
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Thrown if the client is already closed, aborted, or disposed.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSessionAsync
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSessionAsync
  id: AcceptMessageSessionAsync
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: AcceptMessageSessionAsync()
  nameWithType: QueueClient.AcceptMessageSessionAsync()
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSessionAsync()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: AcceptMessageSessionAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 597
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously accepts a message session that allows grouping of related messages for processing in a single transaction.
  example: []
  syntax:
    content: public Task<MessageSession> AcceptMessageSessionAsync()
    content.vb: Public Function AcceptMessageSessionAsync As Task(Of MessageSession)
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.MessageSession}
      description: The result of an asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSessionAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSessionAsync(System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSessionAsync(System.String)
  id: AcceptMessageSessionAsync(System.String)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: AcceptMessageSessionAsync(String)
  nameWithType: QueueClient.AcceptMessageSessionAsync(String)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSessionAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: AcceptMessageSessionAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 612
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Asynchronously accepts a message session that allows grouping of related \nmessages for processing in a single transaction using the given session identifier."
  example: []
  syntax:
    content: public Task<MessageSession> AcceptMessageSessionAsync(string sessionId)
    content.vb: Public Function AcceptMessageSessionAsync(sessionId As String) As Task(Of MessageSession)
    parameters:
    - id: sessionId
      type: System.String
      description: The session identifier of the message session.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.MessageSession}
      description: The result of an asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSessionAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSessionAsync(System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSessionAsync(System.TimeSpan)
  id: AcceptMessageSessionAsync(System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: AcceptMessageSessionAsync(TimeSpan)
  nameWithType: QueueClient.AcceptMessageSessionAsync(TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSessionAsync(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: AcceptMessageSessionAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 632
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Asynchronously accepts a message session that allows grouping of related messages \nfor processing in a single transaction using the specified server wait time."
  example: []
  syntax:
    content: public Task<MessageSession> AcceptMessageSessionAsync(TimeSpan serverWaitTime)
    content.vb: Public Function AcceptMessageSessionAsync(serverWaitTime As TimeSpan) As Task(Of MessageSession)
    parameters:
    - id: serverWaitTime
      type: System.TimeSpan
      description: The time span the server waits for processing messages before it times out.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.MessageSession}
      description: The result of an asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSessionAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSessionAsync(System.String,System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSessionAsync(System.String,System.TimeSpan)
  id: AcceptMessageSessionAsync(System.String,System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: AcceptMessageSessionAsync(String, TimeSpan)
  nameWithType: QueueClient.AcceptMessageSessionAsync(String, TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSessionAsync(System.String, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: AcceptMessageSessionAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 648
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Asynchronously accepts a message session that allows grouping of related messages for \nprocessing in a single transaction using the given session identifier and wait time."
  example: []
  syntax:
    content: public Task<MessageSession> AcceptMessageSessionAsync(string sessionId, TimeSpan serverWaitTime)
    content.vb: Public Function AcceptMessageSessionAsync(sessionId As String, serverWaitTime As TimeSpan) As Task(Of MessageSession)
    parameters:
    - id: sessionId
      type: System.String
      description: The session identifier of the message session.
    - id: serverWaitTime
      type: System.TimeSpan
      description: The time span the server waits for processing messages before it times out.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.MessageSession}
      description: The result of an asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSessionAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.GetMessageSessions
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.GetMessageSessions
  id: GetMessageSessions
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: GetMessageSessions()
  nameWithType: QueueClient.GetMessageSessions()
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.GetMessageSessions()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: GetMessageSessions
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 719
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets the message sessions, enabling you to browse sessions on queues.
  example: []
  syntax:
    content: public IEnumerable<MessageSession> GetMessageSessions()
    content.vb: Public Function GetMessageSessions As IEnumerable(Of MessageSession)
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.MessageSession}
      description: The message session.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.GetMessageSessions*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.GetMessageSessions(System.DateTime)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.GetMessageSessions(System.DateTime)
  id: GetMessageSessions(System.DateTime)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: GetMessageSessions(DateTime)
  nameWithType: QueueClient.GetMessageSessions(DateTime)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.GetMessageSessions(System.DateTime)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: GetMessageSessions
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 727
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Retrieves all message sessions whose session state was updated since <span class="paramref">lastUpdatedTime</span>.
  example: []
  syntax:
    content: public IEnumerable<MessageSession> GetMessageSessions(DateTime lastUpdatedTime)
    content.vb: Public Function GetMessageSessions(lastUpdatedTime As Date) As IEnumerable(Of MessageSession)
    parameters:
    - id: lastUpdatedTime
      type: System.DateTime
      description: The time the session was last updated.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.MessageSession}
      description: The message sessions.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.GetMessageSessions*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.GetMessageSessionsAsync
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.GetMessageSessionsAsync
  id: GetMessageSessionsAsync
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: GetMessageSessionsAsync()
  nameWithType: QueueClient.GetMessageSessionsAsync()
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.GetMessageSessionsAsync()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: GetMessageSessionsAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 734
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously gets the message sessions, enabling you to browse sessions on queues.
  example: []
  syntax:
    content: public Task<IEnumerable<MessageSession>> GetMessageSessionsAsync()
    content.vb: Public Function GetMessageSessionsAsync As Task(Of IEnumerable(Of MessageSession))
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.MessageSession}}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.GetMessageSessionsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.GetMessageSessionsAsync(System.DateTime)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.GetMessageSessionsAsync(System.DateTime)
  id: GetMessageSessionsAsync(System.DateTime)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: GetMessageSessionsAsync(DateTime)
  nameWithType: QueueClient.GetMessageSessionsAsync(DateTime)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.GetMessageSessionsAsync(System.DateTime)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: GetMessageSessionsAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 744
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously retrieves all message sessions whose session state was updated since <span class="paramref">lastUpdatedTime</span>.
  example: []
  syntax:
    content: public Task<IEnumerable<MessageSession>> GetMessageSessionsAsync(DateTime lastUpdatedTime)
    content.vb: Public Function GetMessageSessionsAsync(lastUpdatedTime As Date) As Task(Of IEnumerable(Of MessageSession))
    parameters:
    - id: lastUpdatedTime
      type: System.DateTime
      description: The time the session was last updated.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.MessageSession}}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.GetMessageSessionsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.OnBeginCreateSender(System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.OnBeginCreateSender(System.TimeSpan,System.AsyncCallback,System.Object)
  id: OnBeginCreateSender(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: OnBeginCreateSender(TimeSpan, AsyncCallback, Object)
  nameWithType: QueueClient.OnBeginCreateSender(TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.OnBeginCreateSender(System.TimeSpan, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnBeginCreateSender
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 817
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes the begin create sender action.
  example: []
  syntax:
    content: protected abstract IAsyncResult OnBeginCreateSender(TimeSpan timeout, AsyncCallback callback, object state)
    content.vb: Protected MustOverride Function OnBeginCreateSender(timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: The maximum time before this operation times out.
    - id: callback
      type: System.AsyncCallback
      description: "An \n<xref href=\"System.AsyncCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate that references the method to invoke when the operation is complete."
    - id: state
      type: System.Object
      description: "A user-defined object that contains information about the receive operation. This object is passed to the \n<xref href=\"Microsoft.ServiceBus.Messaging.QueueClient.EndCreateSender(System.IAsyncResult)\" data-throw-if-not-resolved=\"false\"></xref> delegate when the operation is complete."
    return:
      type: System.IAsyncResult
      description: "An \n<xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> object that references the asynchronous parent method"
  overload: Microsoft.ServiceBus.Messaging.QueueClient.OnBeginCreateSender*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.ServiceBus.Messaging.QueueClient.OnEndCreateSender(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.OnEndCreateSender(System.IAsyncResult)
  id: OnEndCreateSender(System.IAsyncResult)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: OnEndCreateSender(IAsyncResult)
  nameWithType: QueueClient.OnEndCreateSender(IAsyncResult)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.OnEndCreateSender(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnEndCreateSender
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 823
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes the end create sender action.
  example: []
  syntax:
    content: protected abstract MessageSender OnEndCreateSender(IAsyncResult result)
    content.vb: Protected MustOverride Function OnEndCreateSender(result As IAsyncResult) As MessageSender
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "An \n<xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> object that references the asynchronous parent method."
    return:
      type: Microsoft.ServiceBus.Messaging.MessageSender
      description: A <xref href="Microsoft.ServiceBus.Messaging.MessageSender" data-throw-if-not-resolved="false"></xref> object.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.OnEndCreateSender*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.ServiceBus.Messaging.QueueClient.OnBeginCreateReceiver(Microsoft.ServiceBus.Messaging.ReceiveMode,System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.OnBeginCreateReceiver(Microsoft.ServiceBus.Messaging.ReceiveMode,System.TimeSpan,System.AsyncCallback,System.Object)
  id: OnBeginCreateReceiver(Microsoft.ServiceBus.Messaging.ReceiveMode,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: OnBeginCreateReceiver(ReceiveMode, TimeSpan, AsyncCallback, Object)
  nameWithType: QueueClient.OnBeginCreateReceiver(ReceiveMode, TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.OnBeginCreateReceiver(Microsoft.ServiceBus.Messaging.ReceiveMode, System.TimeSpan, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnBeginCreateReceiver
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 834
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes the begin create receiver action.
  example: []
  syntax:
    content: protected abstract IAsyncResult OnBeginCreateReceiver(ReceiveMode receiveMode, TimeSpan timeout, AsyncCallback callback, object state)
    content.vb: Protected MustOverride Function OnBeginCreateReceiver(receiveMode As ReceiveMode, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: receiveMode
      type: Microsoft.ServiceBus.Messaging.ReceiveMode
      description: The message <xref href="Microsoft.ServiceBus.Messaging.ReceiveMode" data-throw-if-not-resolved="false"></xref> receive mode.
    - id: timeout
      type: System.TimeSpan
      description: The maximum time before this operation times out.
    - id: callback
      type: System.AsyncCallback
      description: "An \n<xref href=\"System.AsyncCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate that references the method to invoke when the operation is complete."
    - id: state
      type: System.Object
      description: "A user-defined object that contains information about the receive operation. This object is passed to the \n<xref href=\"Microsoft.ServiceBus.Messaging.QueueClient.EndCreateReceiver(System.IAsyncResult)\" data-throw-if-not-resolved=\"false\"></xref> delegate when the operation is complete."
    return:
      type: System.IAsyncResult
      description: "An \n<xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> object that references the asynchronous parent method."
  overload: Microsoft.ServiceBus.Messaging.QueueClient.OnBeginCreateReceiver*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.ServiceBus.Messaging.QueueClient.OnBeginCreateReceiver(System.String,Microsoft.ServiceBus.Messaging.ReceiveMode,System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.OnBeginCreateReceiver(System.String,Microsoft.ServiceBus.Messaging.ReceiveMode,System.TimeSpan,System.AsyncCallback,System.Object)
  id: OnBeginCreateReceiver(System.String,Microsoft.ServiceBus.Messaging.ReceiveMode,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: OnBeginCreateReceiver(String, ReceiveMode, TimeSpan, AsyncCallback, Object)
  nameWithType: QueueClient.OnBeginCreateReceiver(String, ReceiveMode, TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.OnBeginCreateReceiver(System.String, Microsoft.ServiceBus.Messaging.ReceiveMode, System.TimeSpan, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnBeginCreateReceiver
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 846
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes the begin create receiver action.
  example: []
  syntax:
    content: protected abstract IAsyncResult OnBeginCreateReceiver(string subQueueName, ReceiveMode receiveMode, TimeSpan timeout, AsyncCallback callback, object state)
    content.vb: Protected MustOverride Function OnBeginCreateReceiver(subQueueName As String, receiveMode As ReceiveMode, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: subQueueName
      type: System.String
      description: Name of the sub-queue.
    - id: receiveMode
      type: Microsoft.ServiceBus.Messaging.ReceiveMode
      description: The message <xref href="Microsoft.ServiceBus.Messaging.ReceiveMode" data-throw-if-not-resolved="false"></xref> receive mode.
    - id: timeout
      type: System.TimeSpan
      description: The maximum time before this operation times out.
    - id: callback
      type: System.AsyncCallback
      description: "An \n<xref href=\"System.AsyncCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate that references the method to invoke when the operation is complete."
    - id: state
      type: System.Object
      description: "A user-defined object that contains information about the receive operation. This object is passed to the \n<xref href=\"Microsoft.ServiceBus.Messaging.QueueClient.EndCreateReceiver(System.IAsyncResult)\" data-throw-if-not-resolved=\"false\"></xref> delegate when the operation is complete."
    return:
      type: System.IAsyncResult
      description: "An \n<xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> object that references the asynchronous parent method."
  overload: Microsoft.ServiceBus.Messaging.QueueClient.OnBeginCreateReceiver*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.ServiceBus.Messaging.QueueClient.OnEndCreateReceiver(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.OnEndCreateReceiver(System.IAsyncResult)
  id: OnEndCreateReceiver(System.IAsyncResult)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: OnEndCreateReceiver(IAsyncResult)
  nameWithType: QueueClient.OnEndCreateReceiver(IAsyncResult)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.OnEndCreateReceiver(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnEndCreateReceiver
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 852
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes the end create receiver action.
  example: []
  syntax:
    content: protected abstract MessageReceiver OnEndCreateReceiver(IAsyncResult result)
    content.vb: Protected MustOverride Function OnEndCreateReceiver(result As IAsyncResult) As MessageReceiver
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "The result of the asynchronous \n<xref href=\"Microsoft.ServiceBus.Messaging.QueueClient.EndCreateReceiver(System.IAsyncResult)\" data-throw-if-not-resolved=\"false\"></xref> operation."
    return:
      type: Microsoft.ServiceBus.Messaging.MessageReceiver
      description: A <xref href="Microsoft.ServiceBus.Messaging.MessageReceiver" data-throw-if-not-resolved="false"></xref> object.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.OnEndCreateReceiver*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.ServiceBus.Messaging.QueueClient.OnBeginAcceptMessageSession(System.String,Microsoft.ServiceBus.Messaging.ReceiveMode,System.Int32,System.TimeSpan,System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.OnBeginAcceptMessageSession(System.String,Microsoft.ServiceBus.Messaging.ReceiveMode,System.Int32,System.TimeSpan,System.TimeSpan,System.AsyncCallback,System.Object)
  id: OnBeginAcceptMessageSession(System.String,Microsoft.ServiceBus.Messaging.ReceiveMode,System.Int32,System.TimeSpan,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: OnBeginAcceptMessageSession(String, ReceiveMode, Int32, TimeSpan, TimeSpan, AsyncCallback, Object)
  nameWithType: QueueClient.OnBeginAcceptMessageSession(String, ReceiveMode, Int32, TimeSpan, TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.OnBeginAcceptMessageSession(System.String, Microsoft.ServiceBus.Messaging.ReceiveMode, System.Int32, System.TimeSpan, System.TimeSpan, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnBeginAcceptMessageSession
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 875
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: ''
  example: []
  syntax:
    content: protected abstract IAsyncResult OnBeginAcceptMessageSession(string sessionId, ReceiveMode receiveMode, int prefetchCount, TimeSpan serverWaitTime, TimeSpan timeout, AsyncCallback callback, object state)
    content.vb: Protected MustOverride Function OnBeginAcceptMessageSession(sessionId As String, receiveMode As ReceiveMode, prefetchCount As Integer, serverWaitTime As TimeSpan, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: sessionId
      type: System.String
      description: ''
    - id: receiveMode
      type: Microsoft.ServiceBus.Messaging.ReceiveMode
      description: ''
    - id: prefetchCount
      type: System.Int32
      description: ''
    - id: serverWaitTime
      type: System.TimeSpan
      description: ''
    - id: timeout
      type: System.TimeSpan
      description: ''
    - id: callback
      type: System.AsyncCallback
      description: ''
    - id: state
      type: System.Object
      description: ''
    return:
      type: System.IAsyncResult
  overload: Microsoft.ServiceBus.Messaging.QueueClient.OnBeginAcceptMessageSession*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.ServiceBus.Messaging.QueueClient.OnEndAcceptMessageSession(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.OnEndAcceptMessageSession(System.IAsyncResult)
  id: OnEndAcceptMessageSession(System.IAsyncResult)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: OnEndAcceptMessageSession(IAsyncResult)
  nameWithType: QueueClient.OnEndAcceptMessageSession(IAsyncResult)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.OnEndAcceptMessageSession(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnEndAcceptMessageSession
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 882
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes upon calling the EndAcceptMessageSession operation.
  example: []
  syntax:
    content: protected abstract MessageSession OnEndAcceptMessageSession(IAsyncResult result)
    content.vb: Protected MustOverride Function OnEndAcceptMessageSession(result As IAsyncResult) As MessageSession
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "An \n<xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> that represents the status of the asynchronous accept message session operation."
    return:
      type: Microsoft.ServiceBus.Messaging.MessageSession
      description: "The \n<xref href=\"Microsoft.ServiceBus.Messaging.MessageSession\" data-throw-if-not-resolved=\"false\"></xref> that allows grouping of related messages for processing in a single transaction."
  overload: Microsoft.ServiceBus.Messaging.QueueClient.OnEndAcceptMessageSession*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.ServiceBus.Messaging.QueueClient.OnBeginGetMessageSessions(System.DateTime,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.OnBeginGetMessageSessions(System.DateTime,System.AsyncCallback,System.Object)
  id: OnBeginGetMessageSessions(System.DateTime,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: OnBeginGetMessageSessions(DateTime, AsyncCallback, Object)
  nameWithType: QueueClient.OnBeginGetMessageSessions(DateTime, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.OnBeginGetMessageSessions(System.DateTime, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnBeginGetMessageSessions
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 890
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes the BeginGetMessageSessions action.
  example: []
  syntax:
    content: protected abstract IAsyncResult OnBeginGetMessageSessions(DateTime lastUpdatedTime, AsyncCallback callback, object state)
    content.vb: Protected MustOverride Function OnBeginGetMessageSessions(lastUpdatedTime As Date, callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: lastUpdatedTime
      type: System.DateTime
      description: The date and time of the last update.
    - id: callback
      type: System.AsyncCallback
      description: "An \n<xref href=\"System.AsyncCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate that references the method to invoke when the operation is complete."
    - id: state
      type: System.Object
      description: A user-defined object that contains state information about the asynchronous operation.
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation to get the message sessions.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.OnBeginGetMessageSessions*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.ServiceBus.Messaging.QueueClient.OnEndGetMessageSessions(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.OnEndGetMessageSessions(System.IAsyncResult)
  id: OnEndGetMessageSessions(System.IAsyncResult)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: OnEndGetMessageSessions(IAsyncResult)
  nameWithType: QueueClient.OnEndGetMessageSessions(IAsyncResult)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.OnEndGetMessageSessions(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnEndGetMessageSessions
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 896
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes the end get message action.
  example: []
  syntax:
    content: protected abstract IEnumerable<MessageSession> OnEndGetMessageSessions(IAsyncResult result)
    content.vb: Protected MustOverride Function OnEndGetMessageSessions(result As IAsyncResult) As IEnumerable(Of MessageSession)
    parameters:
    - id: result
      type: System.IAsyncResult
      description: The result of the session.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.MessageSession}
      description: "The \n<xref href=\"Microsoft.ServiceBus.Messaging.MessageSession\" data-throw-if-not-resolved=\"false\"></xref> that allows grouping of related messages for processing in a single transaction."
  overload: Microsoft.ServiceBus.Messaging.QueueClient.OnEndGetMessageSessions*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.ServiceBus.Messaging.QueueClient.OnAbort
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.OnAbort
  id: OnAbort
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: OnAbort()
  nameWithType: QueueClient.OnAbort()
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.OnAbort()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnAbort
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 899
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes upon calling the Abort event.
  example: []
  syntax:
    content: protected override void OnAbort()
    content.vb: Protected Overrides Sub OnAbort
  overridden: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
  overload: Microsoft.ServiceBus.Messaging.QueueClient.OnAbort*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.ServiceBus.Messaging.QueueClient.OnClose(System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.OnClose(System.TimeSpan)
  id: OnClose(System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: OnClose(TimeSpan)
  nameWithType: QueueClient.OnClose(TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.OnClose(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnClose
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 907
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes upon calling the Close action.
  example: []
  syntax:
    content: protected override void OnClose(TimeSpan timeout)
    content.vb: Protected Overrides Sub OnClose(timeout As TimeSpan)
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: The maximum time before the close operation times out.
  overridden: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose(System.TimeSpan)
  overload: Microsoft.ServiceBus.Messaging.QueueClient.OnClose*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.ServiceBus.Messaging.QueueClient.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  id: OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: OnBeginClose(TimeSpan, AsyncCallback, Object)
  nameWithType: QueueClient.OnBeginClose(TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.OnBeginClose(System.TimeSpan, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnBeginClose
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 921
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes when the Close operation is called.
  example: []
  syntax:
    content: protected override IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state)
    content.vb: Protected Overrides Function OnBeginClose(timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: The maximum time before the close operation times out.
    - id: callback
      type: System.AsyncCallback
      description: "An \n<xref href=\"System.AsyncCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate that references the method to invoke when the operation is complete."
    - id: state
      type: System.Object
      description: "A user-defined object that contains information about the receive operation. \nThis object is passed to the EndClose delegate when the operation is complete."
    return:
      type: System.IAsyncResult
      description: "An \n<xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> object that references the asynchronous parent method."
  overridden: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  overload: Microsoft.ServiceBus.Messaging.QueueClient.OnBeginClose*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.ServiceBus.Messaging.QueueClient.OnEndClose(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.OnEndClose(System.IAsyncResult)
  id: OnEndClose(System.IAsyncResult)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: OnEndClose(IAsyncResult)
  nameWithType: QueueClient.OnEndClose(IAsyncResult)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.OnEndClose(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnEndClose
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 929
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes the end close action.
  example: []
  syntax:
    content: protected override void OnEndClose(IAsyncResult result)
    content.vb: Protected Overrides Sub OnEndClose(result As IAsyncResult)
    parameters:
    - id: result
      type: System.IAsyncResult
      description: The result of the asynchronous parent method.
  overridden: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose(System.IAsyncResult)
  overload: Microsoft.ServiceBus.Messaging.QueueClient.OnEndClose*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.ServiceBus.Messaging.QueueClient.Abandon(System.Guid)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.Abandon(System.Guid)
  id: Abandon(System.Guid)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: Abandon(Guid)
  nameWithType: QueueClient.Abandon(Guid)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.Abandon(System.Guid)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Abandon
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 948
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Discards the message and relinquishes the message lock ownership.
  remarks: "When the client fails to get the message from the queue/topic, this method should be called. \n         The Service Bus will increment the delivery count of the message. \n         The client now can either attempt to receive the message again or move it to the dead-letter queue."
  example: []
  syntax:
    content: public void Abandon(Guid lockToken)
    content.vb: Public Sub Abandon(lockToken As Guid)
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance to abandon.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.Abandon*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "Thrown if the operation exceeded the timeout value set by \n<xref href=\"Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref>."
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Thrown if the client entity has been closed or aborted.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.Abandon(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.Abandon(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: Abandon(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: Abandon(Guid, IDictionary<String, Object>)
  nameWithType: QueueClient.Abandon(Guid, IDictionary<String, Object>)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.Abandon(System.Guid, System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Abandon
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 960
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Discards the message and relinquishes the message lock ownership.
  remarks: "When the client fails to get the message from the queue/topic, this method should be called. \n         The Service Bus will increment the delivery count of the message. \n         The client now can either attempt to receive the message again or move it to the dead-letter queue."
  example: []
  syntax:
    content: public void Abandon(Guid lockToken, IDictionary<string, object> propertiesToModify)
    content.vb: Public Sub Abandon(lockToken As Guid, propertiesToModify As IDictionary(Of String, Object))
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance to abandon.
    - id: propertiesToModify
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: The properties of the message to modify.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.Abandon*
  nameWithType.vb: QueueClient.Abandon(Guid, IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.QueueClient.Abandon(System.Guid, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: Abandon(Guid, IDictionary(Of String, Object))
- uid: Microsoft.ServiceBus.Messaging.QueueClient.AbandonAsync(System.Guid)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.AbandonAsync(System.Guid)
  id: AbandonAsync(System.Guid)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: AbandonAsync(Guid)
  nameWithType: QueueClient.AbandonAsync(Guid)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.AbandonAsync(System.Guid)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: AbandonAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 969
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously discards the message and relinquishes the message lock ownership.
  example: []
  syntax:
    content: public Task AbandonAsync(Guid lockToken)
    content.vb: Public Function AbandonAsync(lockToken As Guid) As Task
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance to abandon.
    return:
      type: System.Threading.Tasks.Task
      description: The discarded message.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.AbandonAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.AbandonAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.AbandonAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: AbandonAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: AbandonAsync(Guid, IDictionary<String, Object>)
  nameWithType: QueueClient.AbandonAsync(Guid, IDictionary<String, Object>)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.AbandonAsync(System.Guid, System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: AbandonAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 979
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously discards the message and relinquishes the message lock ownership.
  example: []
  syntax:
    content: public Task AbandonAsync(Guid lockToken, IDictionary<string, object> propertiesToModify)
    content.vb: Public Function AbandonAsync(lockToken As Guid, propertiesToModify As IDictionary(Of String, Object)) As Task
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance to abandon.
    - id: propertiesToModify
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: The properties of the message to modify.
    return:
      type: System.Threading.Tasks.Task
      description: The discarded message.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.AbandonAsync*
  nameWithType.vb: QueueClient.AbandonAsync(Guid, IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.QueueClient.AbandonAsync(System.Guid, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: AbandonAsync(Guid, IDictionary(Of String, Object))
- uid: Microsoft.ServiceBus.Messaging.QueueClient.Complete(System.Guid)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.Complete(System.Guid)
  id: Complete(System.Guid)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: Complete(Guid)
  nameWithType: QueueClient.Complete(Guid)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.Complete(System.Guid)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Complete
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1015
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Completes processing of a message.
  remarks: >-
    This method is used as a handshake between the client and Service Bus for a guaranteed delivery of the message. If the
              client failed before calling this method, the message will be kept in the queue.
  example: []
  syntax:
    content: public void Complete(Guid lockToken)
    content.vb: Public Sub Complete(lockToken As Guid)
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.Complete*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "Thrown if the operation exceeded the timeout value set by \n<xref href=\"Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref>"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Thrown if the client entity has been closed or aborted.
  - type: Microsoft.ServiceBus.Messaging.MessageLockLostException
    commentId: T:Microsoft.ServiceBus.Messaging.MessageLockLostException
    description: "Thrown if the message represented by \nthe <span class=\"paramref\">lockToken</span> has lost the message lock."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.CompleteAsync(System.Guid)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.CompleteAsync(System.Guid)
  id: CompleteAsync(System.Guid)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: CompleteAsync(Guid)
  nameWithType: QueueClient.CompleteAsync(Guid)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.CompleteAsync(System.Guid)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CompleteAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1024
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously completes processing of a message.
  example: []
  syntax:
    content: public Task CompleteAsync(Guid lockToken)
    content.vb: Public Function CompleteAsync(lockToken As Guid) As Task
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance.
    return:
      type: System.Threading.Tasks.Task
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.CompleteAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.CompleteBatch(System.Collections.Generic.IEnumerable{System.Guid})
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.CompleteBatch(System.Collections.Generic.IEnumerable{System.Guid})
  id: CompleteBatch(System.Collections.Generic.IEnumerable{System.Guid})
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: CompleteBatch(IEnumerable<Guid>)
  nameWithType: QueueClient.CompleteBatch(IEnumerable<Guid>)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.CompleteBatch(System.Collections.Generic.IEnumerable<System.Guid>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CompleteBatch
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1034
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Completes processing of a message batch.
  remarks: >-
    This method is used as a handshake between the client and Service Bus for a guaranteed delivery of the message. If the
              client failed before calling this method, the message will be kept in the queue.
  example: []
  syntax:
    content: public void CompleteBatch(IEnumerable<Guid> lockTokens)
    content.vb: Public Sub CompleteBatch(lockTokens As IEnumerable(Of Guid))
    parameters:
    - id: lockTokens
      type: System.Collections.Generic.IEnumerable{System.Guid}
      description: The lock tokens associated with locked messages in the batch.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.CompleteBatch*
  nameWithType.vb: QueueClient.CompleteBatch(IEnumerable(Of Guid))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.QueueClient.CompleteBatch(System.Collections.Generic.IEnumerable(Of System.Guid))
  name.vb: CompleteBatch(IEnumerable(Of Guid))
- uid: Microsoft.ServiceBus.Messaging.QueueClient.CompleteBatchAsync(System.Collections.Generic.IEnumerable{System.Guid})
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.CompleteBatchAsync(System.Collections.Generic.IEnumerable{System.Guid})
  id: CompleteBatchAsync(System.Collections.Generic.IEnumerable{System.Guid})
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: CompleteBatchAsync(IEnumerable<Guid>)
  nameWithType: QueueClient.CompleteBatchAsync(IEnumerable<Guid>)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.CompleteBatchAsync(System.Collections.Generic.IEnumerable<System.Guid>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CompleteBatchAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1043
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously completes processing of a message batch.
  example: []
  syntax:
    content: public Task CompleteBatchAsync(IEnumerable<Guid> lockTokens)
    content.vb: Public Function CompleteBatchAsync(lockTokens As IEnumerable(Of Guid)) As Task
    parameters:
    - id: lockTokens
      type: System.Collections.Generic.IEnumerable{System.Guid}
      description: The lock tokens associated with locked messages in the batch.
    return:
      type: System.Threading.Tasks.Task
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.CompleteBatchAsync*
  nameWithType.vb: QueueClient.CompleteBatchAsync(IEnumerable(Of Guid))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.QueueClient.CompleteBatchAsync(System.Collections.Generic.IEnumerable(Of System.Guid))
  name.vb: CompleteBatchAsync(IEnumerable(Of Guid))
- uid: Microsoft.ServiceBus.Messaging.QueueClient.Defer(System.Guid)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.Defer(System.Guid)
  id: Defer(System.Guid)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: Defer(Guid)
  nameWithType: QueueClient.Defer(Guid)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.Defer(System.Guid)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Defer
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1099
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Suspends the processing of a message.
  remarks: 'Before deferring, you should set aside the message receipt for later retrieval. '
  example: []
  syntax:
    content: public void Defer(Guid lockToken)
    content.vb: Public Sub Defer(lockToken As Guid)
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.Defer*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "Thrown if the operation exceeded the timeout value set by \n<xref href=\"Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref>"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Thrown if the client entity has been closed or aborted.
  - type: Microsoft.ServiceBus.Messaging.MessageLockLostException
    commentId: T:Microsoft.ServiceBus.Messaging.MessageLockLostException
    description: "Thrown if the message represented by \nthe <span class=\"paramref\">lockToken</span> has lost the message lock."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.Defer(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.Defer(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: Defer(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: Defer(Guid, IDictionary<String, Object>)
  nameWithType: QueueClient.Defer(Guid, IDictionary<String, Object>)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.Defer(System.Guid, System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Defer
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1109
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Suspends the processing of a message.
  remarks: 'Before deferring, you should set aside the message receipt for later retrieval. '
  example: []
  syntax:
    content: public void Defer(Guid lockToken, IDictionary<string, object> propertiesToModify)
    content.vb: Public Sub Defer(lockToken As Guid, propertiesToModify As IDictionary(Of String, Object))
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance.
    - id: propertiesToModify
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: The properties of the message to modify.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.Defer*
  nameWithType.vb: QueueClient.Defer(Guid, IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.QueueClient.Defer(System.Guid, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: Defer(Guid, IDictionary(Of String, Object))
- uid: Microsoft.ServiceBus.Messaging.QueueClient.DeferAsync(System.Guid)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.DeferAsync(System.Guid)
  id: DeferAsync(System.Guid)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: DeferAsync(Guid)
  nameWithType: QueueClient.DeferAsync(Guid)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.DeferAsync(System.Guid)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: DeferAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1118
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously suspends the processing of a message.
  example: []
  syntax:
    content: public Task DeferAsync(Guid lockToken)
    content.vb: Public Function DeferAsync(lockToken As Guid) As Task
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance.
    return:
      type: System.Threading.Tasks.Task
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.DeferAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.DeferAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.DeferAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: DeferAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: DeferAsync(Guid, IDictionary<String, Object>)
  nameWithType: QueueClient.DeferAsync(Guid, IDictionary<String, Object>)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.DeferAsync(System.Guid, System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: DeferAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1128
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously suspends the processing of a message.
  example: []
  syntax:
    content: public Task DeferAsync(Guid lockToken, IDictionary<string, object> propertiesToModify)
    content.vb: Public Function DeferAsync(lockToken As Guid, propertiesToModify As IDictionary(Of String, Object)) As Task
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance.
    - id: propertiesToModify
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: The properties of the message to modify.
    return:
      type: System.Threading.Tasks.Task
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.DeferAsync*
  nameWithType.vb: QueueClient.DeferAsync(Guid, IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.QueueClient.DeferAsync(System.Guid, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: DeferAsync(Guid, IDictionary(Of String, Object))
- uid: Microsoft.ServiceBus.Messaging.QueueClient.DeadLetter(System.Guid)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.DeadLetter(System.Guid)
  id: DeadLetter(System.Guid)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: DeadLetter(Guid)
  nameWithType: QueueClient.DeadLetter(Guid)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.DeadLetter(System.Guid)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: DeadLetter
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1163
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Moves the undelivered message to the dead letter queue.
  example: []
  syntax:
    content: public void DeadLetter(Guid lockToken)
    content.vb: Public Sub DeadLetter(lockToken As Guid)
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.DeadLetter*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "Thrown if the operation exceeded the timeout value set by \n<xref href=\"Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref>"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Thrown if the client entity has been closed or aborted.
  - type: Microsoft.ServiceBus.Messaging.MessageLockLostException
    commentId: T:Microsoft.ServiceBus.Messaging.MessageLockLostException
    description: "Thrown if the message represented by \nthe <span class=\"paramref\">lockToken</span> has lost the message lock."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.DeadLetter(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.DeadLetter(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: DeadLetter(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: DeadLetter(Guid, IDictionary<String, Object>)
  nameWithType: QueueClient.DeadLetter(Guid, IDictionary<String, Object>)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.DeadLetter(System.Guid, System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: DeadLetter
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1172
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Moves the undelivered message to the dead letter queue.
  example: []
  syntax:
    content: public void DeadLetter(Guid lockToken, IDictionary<string, object> propertiesToModify)
    content.vb: Public Sub DeadLetter(lockToken As Guid, propertiesToModify As IDictionary(Of String, Object))
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance.
    - id: propertiesToModify
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: The properties of the message to modify.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.DeadLetter*
  nameWithType.vb: QueueClient.DeadLetter(Guid, IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.QueueClient.DeadLetter(System.Guid, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: DeadLetter(Guid, IDictionary(Of String, Object))
- uid: Microsoft.ServiceBus.Messaging.QueueClient.DeadLetter(System.Guid,System.String,System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.DeadLetter(System.Guid,System.String,System.String)
  id: DeadLetter(System.Guid,System.String,System.String)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: DeadLetter(Guid, String, String)
  nameWithType: QueueClient.DeadLetter(Guid, String, String)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.DeadLetter(System.Guid, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: DeadLetter
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1187
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Moves the undelivered message to the dead letter queue.
  example: []
  syntax:
    content: public void DeadLetter(Guid lockToken, string deadLetterReason, string deadLetterErrorDescription)
    content.vb: Public Sub DeadLetter(lockToken As Guid, deadLetterReason As String, deadLetterErrorDescription As String)
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance.
    - id: deadLetterReason
      type: System.String
      description: The reason for deadlettering the message.
    - id: deadLetterErrorDescription
      type: System.String
      description: The error description for deadlettering the message.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.DeadLetter*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "Thrown if the operation exceeded the timeout value set by \n<xref href=\"Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref>"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Thrown if the client entity has been closed or aborted.
  - type: Microsoft.ServiceBus.Messaging.MessageLockLostException
    commentId: T:Microsoft.ServiceBus.Messaging.MessageLockLostException
    description: "Thrown if the message represented by \nthe <span class=\"paramref\">lockToken</span> has lost the message lock."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.DeadLetterAsync(System.Guid)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.DeadLetterAsync(System.Guid)
  id: DeadLetterAsync(System.Guid)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: DeadLetterAsync(Guid)
  nameWithType: QueueClient.DeadLetterAsync(Guid)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.DeadLetterAsync(System.Guid)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: DeadLetterAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1196
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously moves the undelivered message to the dead letter queue.
  example: []
  syntax:
    content: public Task DeadLetterAsync(Guid lockToken)
    content.vb: Public Function DeadLetterAsync(lockToken As Guid) As Task
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance.
    return:
      type: System.Threading.Tasks.Task
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.DeadLetterAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.DeadLetterAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.DeadLetterAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: DeadLetterAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: DeadLetterAsync(Guid, IDictionary<String, Object>)
  nameWithType: QueueClient.DeadLetterAsync(Guid, IDictionary<String, Object>)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.DeadLetterAsync(System.Guid, System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: DeadLetterAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1206
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously moves the undelivered message to the dead letter queue.
  example: []
  syntax:
    content: public Task DeadLetterAsync(Guid lockToken, IDictionary<string, object> propertiesToModify)
    content.vb: Public Function DeadLetterAsync(lockToken As Guid, propertiesToModify As IDictionary(Of String, Object)) As Task
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance.
    - id: propertiesToModify
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: The properties of the message to modify.
    return:
      type: System.Threading.Tasks.Task
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.DeadLetterAsync*
  nameWithType.vb: QueueClient.DeadLetterAsync(Guid, IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.QueueClient.DeadLetterAsync(System.Guid, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: DeadLetterAsync(Guid, IDictionary(Of String, Object))
- uid: Microsoft.ServiceBus.Messaging.QueueClient.DeadLetterAsync(System.Guid,System.String,System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.DeadLetterAsync(System.Guid,System.String,System.String)
  id: DeadLetterAsync(System.Guid,System.String,System.String)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: DeadLetterAsync(Guid, String, String)
  nameWithType: QueueClient.DeadLetterAsync(Guid, String, String)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.DeadLetterAsync(System.Guid, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: DeadLetterAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1217
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously moves the undelivered message to the dead letter queue.
  example: []
  syntax:
    content: public Task DeadLetterAsync(Guid lockToken, string deadLetterReason, string deadLetterErrorDescription)
    content.vb: Public Function DeadLetterAsync(lockToken As Guid, deadLetterReason As String, deadLetterErrorDescription As String) As Task
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance.
    - id: deadLetterReason
      type: System.String
      description: The reason for deadlettering the message.
    - id: deadLetterErrorDescription
      type: System.String
      description: The error description for deadlettering the message.
    return:
      type: System.Threading.Tasks.Task
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.DeadLetterAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.Receive
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.Receive
  id: Receive
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: Receive()
  nameWithType: QueueClient.Receive()
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.Receive()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Receive
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1271
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Receives a message using the <xref href="Microsoft.ServiceBus.Messaging.QueueClient.InternalReceiver" data-throw-if-not-resolved="false"></xref>.
  remarks: "A Null can be return by this API if operation exceeded the timeout specified, \nor the operations succeeded but there are no more messages to be received."
  example: []
  syntax:
    content: public BrokeredMessage Receive()
    content.vb: Public Function Receive As BrokeredMessage
    return:
      type: Microsoft.ServiceBus.Messaging.BrokeredMessage
      description: "The \n<xref href=\"Microsoft.ServiceBus.Messaging.BrokeredMessage\" data-throw-if-not-resolved=\"false\"></xref> that represents the received message. If no message is available to be received, the method returns NULL, and you can retry the operation at a later time."
  overload: Microsoft.ServiceBus.Messaging.QueueClient.Receive*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Thrown if the client entity has been closed or aborted.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Thrown if the message receive operation times out.
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: Thrown if an I/O or security error occurs.
  - type: Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
    description: "Thrown if the messaging entity associated with \nthe operation does not exist or it has been deleted."
  - type: Microsoft.ServiceBus.Messaging.MessagingException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingException
    description: "Thrown if the user code has performed some unexpected operations, or \nthe Service Bus gateway is down. Check the exception message for the actual error."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.Receive(System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.Receive(System.TimeSpan)
  id: Receive(System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: Receive(TimeSpan)
  nameWithType: QueueClient.Receive(TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.Receive(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Receive
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1291
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Receives a message using the <xref href="Microsoft.ServiceBus.Messaging.QueueClient.InternalReceiver" data-throw-if-not-resolved="false"></xref>.
  remarks: "A Null can be return by this API if operation exceeded the timeout specified, \nor the operations succeeded but there are no more messages to be received."
  example: []
  syntax:
    content: public BrokeredMessage Receive(TimeSpan serverWaitTime)
    content.vb: Public Function Receive(serverWaitTime As TimeSpan) As BrokeredMessage
    parameters:
    - id: serverWaitTime
      type: System.TimeSpan
      description: The time span the server waits for receiving a message before it times out.
    return:
      type: Microsoft.ServiceBus.Messaging.BrokeredMessage
      description: "The \n<xref href=\"Microsoft.ServiceBus.Messaging.BrokeredMessage\" data-throw-if-not-resolved=\"false\"></xref> that represents the received message. If no message is available to be received, the method returns NULL, and you can retry the operation at a later time."
  overload: Microsoft.ServiceBus.Messaging.QueueClient.Receive*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown if the <span class="paramref">serverWaitTime</span> is negative.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Thrown if the message receive operation times out.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Thrown if the client entity has been closed or aborted.
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: Thrown if an I/O or security error occurs.
  - type: Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
    description: "Thrown if the messaging entity associated with \nthe operation does not exist or it has been deleted."
  - type: Microsoft.ServiceBus.Messaging.MessagingException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingException
    description: "Thrown if the user code has performed some unexpected operations, or \nthe Service Bus gateway is down. Check the exception message for the actual error."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.Receive(System.Int64)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.Receive(System.Int64)
  id: Receive(System.Int64)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: Receive(Int64)
  nameWithType: QueueClient.Receive(Int64)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.Receive(System.Int64)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Receive
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1304
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Receives a message using the <xref href="Microsoft.ServiceBus.Messaging.QueueClient.InternalReceiver" data-throw-if-not-resolved="false"></xref>.
  remarks: "A Null can be return by this API if operation exceeded the timeout specified, \nor the operations succeeded but the message with the requested sequenceNumber cannot be located."
  example: []
  syntax:
    content: public BrokeredMessage Receive(long sequenceNumber)
    content.vb: Public Function Receive(sequenceNumber As Long) As BrokeredMessage
    parameters:
    - id: sequenceNumber
      type: System.Int64
      description: 'The sequence number of the deferred message to receive. '
    return:
      type: Microsoft.ServiceBus.Messaging.BrokeredMessage
      description: "The \n<xref href=\"Microsoft.ServiceBus.Messaging.BrokeredMessage\" data-throw-if-not-resolved=\"false\"></xref> that represents the received message. If no message is available to be received, the method returns NULL, and you can retry the operation at a later time."
  overload: Microsoft.ServiceBus.Messaging.QueueClient.Receive*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Thrown if the client entity has been closed or aborted.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatch(System.Int32)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatch(System.Int32)
  id: ReceiveBatch(System.Int32)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: ReceiveBatch(Int32)
  nameWithType: QueueClient.ReceiveBatch(Int32)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatch(System.Int32)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ReceiveBatch
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1316
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Receives a message batch.
  remarks: "A Null can be return by this API if operation exceeded the timeout specified, \nor the operations succeeded but there are no more messages to be received."
  example: []
  syntax:
    content: public IEnumerable<BrokeredMessage> ReceiveBatch(int messageCount)
    content.vb: Public Function ReceiveBatch(messageCount As Integer) As IEnumerable(Of BrokeredMessage)
    parameters:
    - id: messageCount
      type: System.Int32
      description: "The number of messages to return in the batch. As this is an approximation, \nfewer or more messages than <span class=\"paramref\">messageCount</span> may be returned."
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: A message batch.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatch(System.Int32,System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatch(System.Int32,System.TimeSpan)
  id: ReceiveBatch(System.Int32,System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: ReceiveBatch(Int32, TimeSpan)
  nameWithType: QueueClient.ReceiveBatch(Int32, TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatch(System.Int32, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ReceiveBatch
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1329
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Receives a message batch.
  remarks: "A Null can be return by this API if operation exceeded the timeout specified, \nor the operations succeeded but there are no more messages to be received."
  example: []
  syntax:
    content: public IEnumerable<BrokeredMessage> ReceiveBatch(int messageCount, TimeSpan serverWaitTime)
    content.vb: Public Function ReceiveBatch(messageCount As Integer, serverWaitTime As TimeSpan) As IEnumerable(Of BrokeredMessage)
    parameters:
    - id: messageCount
      type: System.Int32
      description: "The number of messages to receive in a batch.As this is an approximation, \nfewer or more messages than <span class=\"paramref\">messageCount</span> may be returned."
    - id: serverWaitTime
      type: System.TimeSpan
      description: The time span that the server will wait for the message batch to arrive before it times out.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: A message batch.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatch(System.Collections.Generic.IEnumerable{System.Int64})
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatch(System.Collections.Generic.IEnumerable{System.Int64})
  id: ReceiveBatch(System.Collections.Generic.IEnumerable{System.Int64})
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: ReceiveBatch(IEnumerable<Int64>)
  nameWithType: QueueClient.ReceiveBatch(IEnumerable<Int64>)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatch(System.Collections.Generic.IEnumerable<System.Int64>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ReceiveBatch
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1340
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Receives a message batch.
  remarks: "A Null can be return by this API if operation exceeded the timeout specified, \nor the operations succeeded but the message with the requested sequenceNumber cannot be located."
  example: []
  syntax:
    content: public IEnumerable<BrokeredMessage> ReceiveBatch(IEnumerable<long> sequenceNumbers)
    content.vb: Public Function ReceiveBatch(sequenceNumbers As IEnumerable(Of Long)) As IEnumerable(Of BrokeredMessage)
    parameters:
    - id: sequenceNumbers
      type: System.Collections.Generic.IEnumerable{System.Int64}
      description: The sequence numbers associated with the messages in the batch.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: A message batch.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatch*
  nameWithType.vb: QueueClient.ReceiveBatch(IEnumerable(Of Int64))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatch(System.Collections.Generic.IEnumerable(Of System.Int64))
  name.vb: ReceiveBatch(IEnumerable(Of Int64))
- uid: Microsoft.ServiceBus.Messaging.QueueClient.ReceiveAsync
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.ReceiveAsync
  id: ReceiveAsync
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: ReceiveAsync()
  nameWithType: QueueClient.ReceiveAsync()
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.ReceiveAsync()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ReceiveAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1348
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously receives a message using the <xref href="Microsoft.ServiceBus.Messaging.QueueClient.InternalReceiver" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Task<BrokeredMessage> ReceiveAsync()
    content.vb: Public Function ReceiveAsync As Task(Of BrokeredMessage)
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.ReceiveAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.ReceiveAsync(System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.ReceiveAsync(System.TimeSpan)
  id: ReceiveAsync(System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: ReceiveAsync(TimeSpan)
  nameWithType: QueueClient.ReceiveAsync(TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.ReceiveAsync(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ReceiveAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1357
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously receives a message using the <xref href="Microsoft.ServiceBus.Messaging.QueueClient.InternalReceiver" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Task<BrokeredMessage> ReceiveAsync(TimeSpan serverWaitTime)
    content.vb: Public Function ReceiveAsync(serverWaitTime As TimeSpan) As Task(Of BrokeredMessage)
    parameters:
    - id: serverWaitTime
      type: System.TimeSpan
      description: The time span the server waits for receiving a message before it times out.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.ReceiveAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.ReceiveAsync(System.Int64)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.ReceiveAsync(System.Int64)
  id: ReceiveAsync(System.Int64)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: ReceiveAsync(Int64)
  nameWithType: QueueClient.ReceiveAsync(Int64)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.ReceiveAsync(System.Int64)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ReceiveAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1366
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously receives a message using the <xref href="Microsoft.ServiceBus.Messaging.QueueClient.InternalReceiver" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Task<BrokeredMessage> ReceiveAsync(long sequenceNumber)
    content.vb: Public Function ReceiveAsync(sequenceNumber As Long) As Task(Of BrokeredMessage)
    parameters:
    - id: sequenceNumber
      type: System.Int64
      description: The sequence number of the deferred message to receive.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.ReceiveAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatchAsync(System.Int32)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatchAsync(System.Int32)
  id: ReceiveBatchAsync(System.Int32)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: ReceiveBatchAsync(Int32)
  nameWithType: QueueClient.ReceiveBatchAsync(Int32)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatchAsync(System.Int32)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ReceiveBatchAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1376
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously receives a message batch.
  example: []
  syntax:
    content: public Task<IEnumerable<BrokeredMessage>> ReceiveBatchAsync(int messageCount)
    content.vb: Public Function ReceiveBatchAsync(messageCount As Integer) As Task(Of IEnumerable(Of BrokeredMessage))
    parameters:
    - id: messageCount
      type: System.Int32
      description: "The number of messages to return in the batch. As this is an approximation, \nfewer or more messages than <span class=\"paramref\">messageCount</span> may be returned."
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatchAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatchAsync(System.Int32,System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatchAsync(System.Int32,System.TimeSpan)
  id: ReceiveBatchAsync(System.Int32,System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: ReceiveBatchAsync(Int32, TimeSpan)
  nameWithType: QueueClient.ReceiveBatchAsync(Int32, TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatchAsync(System.Int32, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ReceiveBatchAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1387
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously receives a message batch.
  example: []
  syntax:
    content: public Task<IEnumerable<BrokeredMessage>> ReceiveBatchAsync(int messageCount, TimeSpan serverWaitTime)
    content.vb: Public Function ReceiveBatchAsync(messageCount As Integer, serverWaitTime As TimeSpan) As Task(Of IEnumerable(Of BrokeredMessage))
    parameters:
    - id: messageCount
      type: System.Int32
      description: "The number of messages to return in the batch. As this is an approximation, \nfewer or more messages than <span class=\"paramref\">messageCount</span> may be returned."
    - id: serverWaitTime
      type: System.TimeSpan
      description: The time span that the server will wait for the message batch to arrive before it times out.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatchAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatchAsync(System.Collections.Generic.IEnumerable{System.Int64})
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatchAsync(System.Collections.Generic.IEnumerable{System.Int64})
  id: ReceiveBatchAsync(System.Collections.Generic.IEnumerable{System.Int64})
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: ReceiveBatchAsync(IEnumerable<Int64>)
  nameWithType: QueueClient.ReceiveBatchAsync(IEnumerable<Int64>)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatchAsync(System.Collections.Generic.IEnumerable<System.Int64>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ReceiveBatchAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1396
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously receives a message batch.
  example: []
  syntax:
    content: public Task<IEnumerable<BrokeredMessage>> ReceiveBatchAsync(IEnumerable<long> sequenceNumbers)
    content.vb: Public Function ReceiveBatchAsync(sequenceNumbers As IEnumerable(Of Long)) As Task(Of IEnumerable(Of BrokeredMessage))
    parameters:
    - id: sequenceNumbers
      type: System.Collections.Generic.IEnumerable{System.Int64}
      description: The sequence numbers associated with the messages in the batch.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatchAsync*
  nameWithType.vb: QueueClient.ReceiveBatchAsync(IEnumerable(Of Int64))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatchAsync(System.Collections.Generic.IEnumerable(Of System.Int64))
  name.vb: ReceiveBatchAsync(IEnumerable(Of Int64))
- uid: Microsoft.ServiceBus.Messaging.QueueClient.Send(Microsoft.ServiceBus.Messaging.BrokeredMessage)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.Send(Microsoft.ServiceBus.Messaging.BrokeredMessage)
  id: Send(Microsoft.ServiceBus.Messaging.BrokeredMessage)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: Send(BrokeredMessage)
  nameWithType: QueueClient.Send(BrokeredMessage)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.Send(Microsoft.ServiceBus.Messaging.BrokeredMessage)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Send
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1495
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Sends a message using the <xref href="Microsoft.ServiceBus.Messaging.QueueClient.InternalSender" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public void Send(BrokeredMessage message)
    content.vb: Public Sub Send(message As BrokeredMessage)
    parameters:
    - id: message
      type: Microsoft.ServiceBus.Messaging.BrokeredMessage
      description: The message to send.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.Send*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "Thrown when operation times out. Timeout period is initialized through the \n<xref href=\"Microsoft.ServiceBus.Messaging.MessagingFactorySettings\" data-throw-if-not-resolved=\"false\"></xref> may need to increase the value of \n<xref href=\"Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref> to avoid this exception if timeout value is relatively low. "
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown when the <span class="paramref">message</span> is null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Thrown if the  <span class=\"paramref\">message</span> has already been sent by a QueueClient or \n<xref href=\"Microsoft.ServiceBus.Messaging.MessageSender\" data-throw-if-not-resolved=\"false\"></xref> once already."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Thrown if the topic/subscription pointed to does not support \nthe send operation. That is, Deadletter queue does not support send operations."
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Thrown if the client entity has been closed or aborted.
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: Thrown if there is an I/O or security error.
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "Thrown when an \nerror occurs during serialization or deserialization."
  - type: Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
    description: Thrown if the queue does not exist.
  - type: Microsoft.ServiceBus.Messaging.MessagingException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingException
    description: Thrown if there is a messaging error.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.SendAsync(Microsoft.ServiceBus.Messaging.BrokeredMessage)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.SendAsync(Microsoft.ServiceBus.Messaging.BrokeredMessage)
  id: SendAsync(Microsoft.ServiceBus.Messaging.BrokeredMessage)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: SendAsync(BrokeredMessage)
  nameWithType: QueueClient.SendAsync(BrokeredMessage)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.SendAsync(Microsoft.ServiceBus.Messaging.BrokeredMessage)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: SendAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1504
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously sends a message using the <xref href="Microsoft.ServiceBus.Messaging.QueueClient.InternalSender" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Task SendAsync(BrokeredMessage message)
    content.vb: Public Function SendAsync(message As BrokeredMessage) As Task
    parameters:
    - id: message
      type: Microsoft.ServiceBus.Messaging.BrokeredMessage
      description: The message to send.
    return:
      type: System.Threading.Tasks.Task
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.SendAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.SendBatch(System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage})
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.SendBatch(System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage})
  id: SendBatch(System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage})
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: SendBatch(IEnumerable<BrokeredMessage>)
  nameWithType: QueueClient.SendBatch(IEnumerable<BrokeredMessage>)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.SendBatch(System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.BrokeredMessage>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: SendBatch
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1512
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Sends a set of brokered messages (for batch processing).
  example: []
  syntax:
    content: public void SendBatch(IEnumerable<BrokeredMessage> messages)
    content.vb: Public Sub SendBatch(messages As IEnumerable(Of BrokeredMessage))
    parameters:
    - id: messages
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: The collection of brokered messages to send.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.SendBatch*
  nameWithType.vb: QueueClient.SendBatch(IEnumerable(Of BrokeredMessage))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.QueueClient.SendBatch(System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.BrokeredMessage))
  name.vb: SendBatch(IEnumerable(Of BrokeredMessage))
- uid: Microsoft.ServiceBus.Messaging.QueueClient.SendBatchAsync(System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage})
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.SendBatchAsync(System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage})
  id: SendBatchAsync(System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage})
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: SendBatchAsync(IEnumerable<BrokeredMessage>)
  nameWithType: QueueClient.SendBatchAsync(IEnumerable<BrokeredMessage>)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.SendBatchAsync(System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.BrokeredMessage>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: SendBatchAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1521
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously sends a set of brokered messages (for batch processing).
  example: []
  syntax:
    content: public Task SendBatchAsync(IEnumerable<BrokeredMessage> messages)
    content.vb: Public Function SendBatchAsync(messages As IEnumerable(Of BrokeredMessage)) As Task
    parameters:
    - id: messages
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: The collection of brokered messages to send.
    return:
      type: System.Threading.Tasks.Task
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.SendBatchAsync*
  nameWithType.vb: QueueClient.SendBatchAsync(IEnumerable(Of BrokeredMessage))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.QueueClient.SendBatchAsync(System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.BrokeredMessage))
  name.vb: SendBatchAsync(IEnumerable(Of BrokeredMessage))
- uid: Microsoft.ServiceBus.Messaging.QueueClient.Peek
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.Peek
  id: Peek
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: Peek()
  nameWithType: QueueClient.Peek()
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.Peek()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Peek
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1581
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Returns without removing the first message in the queue.
  remarks: "A Null can be return by this API if operation exceeded the timeout specified, \nor the operations succeeded but there are no more messages to be received."
  example: []
  syntax:
    content: public BrokeredMessage Peek()
    content.vb: Public Function Peek As BrokeredMessage
    return:
      type: Microsoft.ServiceBus.Messaging.BrokeredMessage
      description: A brokered message. Returns all properties and the message body.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.Peek*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.Peek(System.Int64)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.Peek(System.Int64)
  id: Peek(System.Int64)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: Peek(Int64)
  nameWithType: QueueClient.Peek(Int64)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.Peek(System.Int64)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Peek
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1592
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Returns without removing the first message in the queue.
  remarks: "A Null can be return by this API if operation exceeded the timeout specified, \nor the operations succeeded but there are no more messages to be received."
  example: []
  syntax:
    content: public BrokeredMessage Peek(long fromSequenceNumber)
    content.vb: Public Function Peek(fromSequenceNumber As Long) As BrokeredMessage
    parameters:
    - id: fromSequenceNumber
      type: System.Int64
      description: The starting point from which to browse a message.
    return:
      type: Microsoft.ServiceBus.Messaging.BrokeredMessage
      description: The brokered message.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.Peek*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.PeekAsync
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.PeekAsync
  id: PeekAsync
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: PeekAsync()
  nameWithType: QueueClient.PeekAsync()
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.PeekAsync()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: PeekAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1600
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously returns without removing the first message in the queue.
  example: []
  syntax:
    content: public Task<BrokeredMessage> PeekAsync()
    content.vb: Public Function PeekAsync As Task(Of BrokeredMessage)
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.PeekAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.PeekAsync(System.Int64)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.PeekAsync(System.Int64)
  id: PeekAsync(System.Int64)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: PeekAsync(Int64)
  nameWithType: QueueClient.PeekAsync(Int64)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.PeekAsync(System.Int64)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: PeekAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1609
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously returns without removing the first message in the queue.
  example: []
  syntax:
    content: public Task<BrokeredMessage> PeekAsync(long fromSequenceNumber)
    content.vb: Public Function PeekAsync(fromSequenceNumber As Long) As Task(Of BrokeredMessage)
    parameters:
    - id: fromSequenceNumber
      type: System.Int64
      description: The sequence number from where to peek a message.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.PeekAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.PeekBatch(System.Int32)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.PeekBatch(System.Int32)
  id: PeekBatch(System.Int32)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: PeekBatch(Int32)
  nameWithType: QueueClient.PeekBatch(Int32)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.PeekBatch(System.Int32)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: PeekBatch
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1620
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Peeks a batch of messages.
  remarks: "A Null can be return by this API if operation exceeded the timeout specified, \nor the operations succeeded but there are no more messages to be received."
  example: []
  syntax:
    content: public IEnumerable<BrokeredMessage> PeekBatch(int messageCount)
    content.vb: Public Function PeekBatch(messageCount As Integer) As IEnumerable(Of BrokeredMessage)
    parameters:
    - id: messageCount
      type: System.Int32
      description: The number of messages.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: A batch of messages peeked. Returns all properties and the message body.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.PeekBatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.PeekBatch(System.Int64,System.Int32)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.PeekBatch(System.Int64,System.Int32)
  id: PeekBatch(System.Int64,System.Int32)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: PeekBatch(Int64, Int32)
  nameWithType: QueueClient.PeekBatch(Int64, Int32)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.PeekBatch(System.Int64, System.Int32)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: PeekBatch
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1630
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Peeks a batch of messages.
  example: []
  syntax:
    content: public IEnumerable<BrokeredMessage> PeekBatch(long fromSequenceNumber, int messageCount)
    content.vb: Public Function PeekBatch(fromSequenceNumber As Long, messageCount As Integer) As IEnumerable(Of BrokeredMessage)
    parameters:
    - id: fromSequenceNumber
      type: System.Int64
      description: The starting point from which to browse a batch of messages.
    - id: messageCount
      type: System.Int32
      description: The number of messages.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: A batch of messages peeked.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.PeekBatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.PeekBatchAsync(System.Int32)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.PeekBatchAsync(System.Int32)
  id: PeekBatchAsync(System.Int32)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: PeekBatchAsync(Int32)
  nameWithType: QueueClient.PeekBatchAsync(Int32)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.PeekBatchAsync(System.Int32)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: PeekBatchAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1639
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously peeks a batch of message.
  example: []
  syntax:
    content: public Task<IEnumerable<BrokeredMessage>> PeekBatchAsync(int messageCount)
    content.vb: Public Function PeekBatchAsync(messageCount As Integer) As Task(Of IEnumerable(Of BrokeredMessage))
    parameters:
    - id: messageCount
      type: System.Int32
      description: The number of message.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.PeekBatchAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.PeekBatchAsync(System.Int64,System.Int32)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.PeekBatchAsync(System.Int64,System.Int32)
  id: PeekBatchAsync(System.Int64,System.Int32)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: PeekBatchAsync(Int64, Int32)
  nameWithType: QueueClient.PeekBatchAsync(Int64, Int32)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.PeekBatchAsync(System.Int64, System.Int32)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: PeekBatchAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1649
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously peeks a batch of message.
  example: []
  syntax:
    content: public Task<IEnumerable<BrokeredMessage>> PeekBatchAsync(long fromSequenceNumber, int messageCount)
    content.vb: Public Function PeekBatchAsync(fromSequenceNumber As Long, messageCount As Integer) As Task(Of IEnumerable(Of BrokeredMessage))
    parameters:
    - id: fromSequenceNumber
      type: System.Int64
      description: The sequence number from where to peek a batch of message.
    - id: messageCount
      type: System.Int32
      description: The number of message.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.PeekBatchAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.ScheduleMessageAsync(Microsoft.ServiceBus.Messaging.BrokeredMessage,System.DateTimeOffset)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.ScheduleMessageAsync(Microsoft.ServiceBus.Messaging.BrokeredMessage,System.DateTimeOffset)
  id: ScheduleMessageAsync(Microsoft.ServiceBus.Messaging.BrokeredMessage,System.DateTimeOffset)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: ScheduleMessageAsync(BrokeredMessage, DateTimeOffset)
  nameWithType: QueueClient.ScheduleMessageAsync(BrokeredMessage, DateTimeOffset)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.ScheduleMessageAsync(Microsoft.ServiceBus.Messaging.BrokeredMessage, System.DateTimeOffset)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ScheduleMessageAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1710
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "\nSends a scheduled message\n"
  example: []
  syntax:
    content: public Task<long> ScheduleMessageAsync(BrokeredMessage message, DateTimeOffset scheduleEnqueueTimeUtc)
    content.vb: Public Function ScheduleMessageAsync(message As BrokeredMessage, scheduleEnqueueTimeUtc As DateTimeOffset) As Task(Of Long)
    parameters:
    - id: message
      type: Microsoft.ServiceBus.Messaging.BrokeredMessage
      description: Message to be scheduled
    - id: scheduleEnqueueTimeUtc
      type: System.DateTimeOffset
      description: Time of enqueue
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: Sequence number that is needed for cancelling.
  overload: Microsoft.ServiceBus.Messaging.QueueClient.ScheduleMessageAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.QueueClient.CancelScheduledMessageAsync(System.Int64)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.CancelScheduledMessageAsync(System.Int64)
  id: CancelScheduledMessageAsync(System.Int64)
  parent: Microsoft.ServiceBus.Messaging.QueueClient
  langs:
  - csharp
  - vb
  name: CancelScheduledMessageAsync(Int64)
  nameWithType: QueueClient.CancelScheduledMessageAsync(Int64)
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.CancelScheduledMessageAsync(System.Int64)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CancelScheduledMessageAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/QueueClient.cs
    startLine: 1721
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "\nCancels a scheduled message\n"
  example: []
  syntax:
    content: public Task CancelScheduledMessageAsync(long sequenceNumber)
    content.vb: Public Function CancelScheduledMessageAsync(sequenceNumber As Long) As Task
    parameters:
    - id: sequenceNumber
      type: System.Int64
      description: Returned on scheduling a message.
    return:
      type: System.Threading.Tasks.Task
      description: ''
  overload: Microsoft.ServiceBus.Messaging.QueueClient.CancelScheduledMessageAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.ServiceBus.Messaging
  commentId: N:Microsoft.ServiceBus.Messaging
  isExternal: false
  name: Microsoft.ServiceBus.Messaging
  nameWithType: Microsoft.ServiceBus.Messaging
  fullName: Microsoft.ServiceBus.Messaging
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.ServiceBus.Messaging.ClientEntity
  commentId: T:Microsoft.ServiceBus.Messaging.ClientEntity
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: ClientEntity
  nameWithType: ClientEntity
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.RetryPolicy
  commentId: P:Microsoft.ServiceBus.Messaging.ClientEntity.RetryPolicy
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: RetryPolicy
  nameWithType: ClientEntity.RetryPolicy
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.RetryPolicy
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.IsClosed
  commentId: P:Microsoft.ServiceBus.Messaging.ClientEntity.IsClosed
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: IsClosed
  nameWithType: ClientEntity.IsClosed
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.IsClosed
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThisLock
  commentId: P:Microsoft.ServiceBus.Messaging.ClientEntity.ThisLock
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: ThisLock
  nameWithType: ClientEntity.ThisLock
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThisLock
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.Abort
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.Abort
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: Abort()
  nameWithType: ClientEntity.Abort()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Abort()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.Abort
    name: Abort
    nameWithType: ClientEntity.Abort
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Abort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.Abort
    name: Abort
    nameWithType: ClientEntity.Abort
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Abort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.Close
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.Close
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: Close()
  nameWithType: ClientEntity.Close()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Close()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.Close
    name: Close
    nameWithType: ClientEntity.Close
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Close
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.Close
    name: Close
    nameWithType: ClientEntity.Close
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Close
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: CloseAsync()
  nameWithType: ClientEntity.CloseAsync()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
    name: CloseAsync
    nameWithType: ClientEntity.CloseAsync
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
    name: CloseAsync
    nameWithType: ClientEntity.CloseAsync
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.Fault
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.Fault
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: Fault()
  nameWithType: ClientEntity.Fault()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Fault()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.Fault
    name: Fault
    nameWithType: ClientEntity.Fault
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Fault
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.Fault
    name: Fault
    nameWithType: ClientEntity.Fault
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Fault
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen(System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen(System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: true
  name: OnOpen(TimeSpan)
  nameWithType: ClientEntity.OnOpen(TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen(System.TimeSpan)
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen(System.TimeSpan)
    name: OnOpen
    nameWithType: ClientEntity.OnOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen(System.TimeSpan)
    name: OnOpen
    nameWithType: ClientEntity.OnOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: ThrowIfClosed()
  nameWithType: ClientEntity.ThrowIfClosed()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
    name: ThrowIfClosed
    nameWithType: ClientEntity.ThrowIfClosed
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
    name: ThrowIfClosed
    nameWithType: ClientEntity.ThrowIfClosed
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: ThrowIfDisposed()
  nameWithType: ClientEntity.ThrowIfDisposed()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
    name: ThrowIfDisposed
    nameWithType: ClientEntity.ThrowIfDisposed
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
    name: ThrowIfDisposed
    nameWithType: ClientEntity.ThrowIfDisposed
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: ThrowIfDisposedOrNotOpen()
  nameWithType: ClientEntity.ThrowIfDisposedOrNotOpen()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
    name: ThrowIfDisposedOrNotOpen
    nameWithType: ClientEntity.ThrowIfDisposedOrNotOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
    name: ThrowIfDisposedOrNotOpen
    nameWithType: ClientEntity.ThrowIfDisposedOrNotOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: ThrowIfFaulted()
  nameWithType: ClientEntity.ThrowIfFaulted()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
    name: ThrowIfFaulted
    nameWithType: ClientEntity.ThrowIfFaulted
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
    name: ThrowIfFaulted
    nameWithType: ClientEntity.ThrowIfFaulted
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: ThrowIfDisposedOrImmutable()
  nameWithType: ClientEntity.ThrowIfDisposedOrImmutable()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
    name: ThrowIfDisposedOrImmutable
    nameWithType: ClientEntity.ThrowIfDisposedOrImmutable
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
    name: ThrowIfDisposedOrImmutable
    nameWithType: ClientEntity.ThrowIfDisposedOrImmutable
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: OnOpened()
  nameWithType: ClientEntity.OnOpened()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
    name: OnOpened
    nameWithType: ClientEntity.OnOpened
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
    name: OnOpened
    nameWithType: ClientEntity.OnOpened
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: OnClosed()
  nameWithType: ClientEntity.OnClosed()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
    name: OnClosed
    nameWithType: ClientEntity.OnClosed
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
    name: OnClosed
    nameWithType: ClientEntity.OnClosed
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: OnFaulted()
  nameWithType: ClientEntity.OnFaulted()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
    name: OnFaulted
    nameWithType: ClientEntity.OnFaulted
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
    name: OnFaulted
    nameWithType: ClientEntity.OnFaulted
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: true
  name: OnBeginOpen(TimeSpan, AsyncCallback, Object)
  nameWithType: ClientEntity.OnBeginOpen(TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen(System.TimeSpan, System.AsyncCallback, System.Object)
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
    name: OnBeginOpen
    nameWithType: ClientEntity.OnBeginOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
    name: OnBeginOpen
    nameWithType: ClientEntity.OnBeginOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen(System.IAsyncResult)
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: true
  name: OnEndOpen(IAsyncResult)
  nameWithType: ClientEntity.OnEndOpen(IAsyncResult)
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen(System.IAsyncResult)
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen(System.IAsyncResult)
    name: OnEndOpen
    nameWithType: ClientEntity.OnEndOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen(System.IAsyncResult)
    name: OnEndOpen
    nameWithType: ClientEntity.OnEndOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.ServiceBus.Messaging.ReceiveMode
  commentId: T:Microsoft.ServiceBus.Messaging.ReceiveMode
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: ReceiveMode
  nameWithType: ReceiveMode
  fullName: Microsoft.ServiceBus.Messaging.ReceiveMode
- uid: Microsoft.ServiceBus.Messaging.QueueClient.Mode*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.Mode
  isExternal: false
  name: Mode
  nameWithType: QueueClient.Mode
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.Mode
- uid: Microsoft.ServiceBus.Messaging.QueueClient.PrefetchCount*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.PrefetchCount
  isExternal: false
  name: PrefetchCount
  nameWithType: QueueClient.PrefetchCount
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.PrefetchCount
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.ServiceBus.Messaging.MessagingFactory
  commentId: T:Microsoft.ServiceBus.Messaging.MessagingFactory
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: MessagingFactory
  nameWithType: MessagingFactory
  fullName: Microsoft.ServiceBus.Messaging.MessagingFactory
- uid: Microsoft.ServiceBus.Messaging.QueueClient.Path*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.Path
  isExternal: false
  name: Path
  nameWithType: QueueClient.Path
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.Path
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.ServiceBus.Messaging.QueueClient.MessagingFactory*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.MessagingFactory
  isExternal: false
  name: MessagingFactory
  nameWithType: QueueClient.MessagingFactory
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.MessagingFactory
- uid: Microsoft.ServiceBus.Messaging.QueueClient
  commentId: T:Microsoft.ServiceBus.Messaging.QueueClient
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: QueueClient
  nameWithType: QueueClient
  fullName: Microsoft.ServiceBus.Messaging.QueueClient
- uid: Microsoft.ServiceBus.Messaging.QueueClient.Create*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.Create
  isExternal: false
  name: Create
  nameWithType: QueueClient.Create
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.Create
- uid: Microsoft.ServiceBus.ServiceBusConnectionStringBuilder.EntityPath
  commentId: P:Microsoft.ServiceBus.ServiceBusConnectionStringBuilder.EntityPath
- uid: Microsoft.ServiceBus.Messaging.QueueClient.CreateFromConnectionString*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.CreateFromConnectionString
  isExternal: false
  name: CreateFromConnectionString
  nameWithType: QueueClient.CreateFromConnectionString
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.CreateFromConnectionString
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: Microsoft.ServiceBus.Messaging.QueueClient.FormatDeadLetterPath*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.FormatDeadLetterPath
  isExternal: false
  name: FormatDeadLetterPath
  nameWithType: QueueClient.FormatDeadLetterPath
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.FormatDeadLetterPath
- uid: Microsoft.ServiceBus.Messaging.QueueClient.FormatTransferDeadLetterPath*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.FormatTransferDeadLetterPath
  isExternal: false
  name: FormatTransferDeadLetterPath
  nameWithType: QueueClient.FormatTransferDeadLetterPath
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.FormatTransferDeadLetterPath
- uid: Microsoft.ServiceBus.Messaging.QueueClient.RenewMessageLock*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.RenewMessageLock
  isExternal: false
  name: RenewMessageLock
  nameWithType: QueueClient.RenewMessageLock
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.RenewMessageLock
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: Microsoft.ServiceBus.Messaging.QueueClient.RenewMessageLockAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.RenewMessageLockAsync
  isExternal: false
  name: RenewMessageLockAsync
  nameWithType: QueueClient.RenewMessageLockAsync
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.RenewMessageLockAsync
- uid: System.Threading.Tasks.Task{System.DateTime}
  commentId: T:System.Threading.Tasks.Task{System.DateTime}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<DateTime>
  nameWithType: Task<DateTime>
  fullName: System.Threading.Tasks.Task<System.DateTime>
  nameWithType.vb: Task(Of DateTime)
  fullname.vb: System.Threading.Tasks.Task(Of System.DateTime)
  name.vb: Task(Of DateTime)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandler*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandler
  isExternal: false
  name: RegisterSessionHandler
  nameWithType: QueueClient.RegisterSessionHandler
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandler
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Microsoft.ServiceBus.Messaging.SessionHandlerOptions
  commentId: T:Microsoft.ServiceBus.Messaging.SessionHandlerOptions
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: SessionHandlerOptions
  nameWithType: SessionHandlerOptions
  fullName: Microsoft.ServiceBus.Messaging.SessionHandlerOptions
- uid: Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerAsync
  isExternal: false
  name: RegisterSessionHandlerAsync
  nameWithType: QueueClient.RegisterSessionHandlerAsync
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerFactory*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerFactory
  isExternal: false
  name: RegisterSessionHandlerFactory
  nameWithType: QueueClient.RegisterSessionHandlerFactory
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerFactory
- uid: Microsoft.ServiceBus.Messaging.IMessageSessionHandlerFactory
  commentId: T:Microsoft.ServiceBus.Messaging.IMessageSessionHandlerFactory
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: IMessageSessionHandlerFactory
  nameWithType: IMessageSessionHandlerFactory
  fullName: Microsoft.ServiceBus.Messaging.IMessageSessionHandlerFactory
- uid: Microsoft.ServiceBus.Messaging.IMessageSessionAsyncHandlerFactory
  commentId: T:Microsoft.ServiceBus.Messaging.IMessageSessionAsyncHandlerFactory
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: IMessageSessionAsyncHandlerFactory
  nameWithType: IMessageSessionAsyncHandlerFactory
  fullName: Microsoft.ServiceBus.Messaging.IMessageSessionAsyncHandlerFactory
- uid: Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerFactoryAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerFactoryAsync
  isExternal: false
  name: RegisterSessionHandlerFactoryAsync
  nameWithType: QueueClient.RegisterSessionHandlerFactoryAsync
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.RegisterSessionHandlerFactoryAsync
- uid: Microsoft.ServiceBus.Messaging.QueueClient.OnMessage*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.OnMessage
  isExternal: false
  name: OnMessage
  nameWithType: QueueClient.OnMessage
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.OnMessage
- uid: System.Action{Microsoft.ServiceBus.Messaging.BrokeredMessage}
  commentId: T:System.Action{Microsoft.ServiceBus.Messaging.BrokeredMessage}
  parent: System
  definition: System.Action`1
  name: Action<BrokeredMessage>
  nameWithType: Action<BrokeredMessage>
  fullName: System.Action<Microsoft.ServiceBus.Messaging.BrokeredMessage>
  nameWithType.vb: Action(Of BrokeredMessage)
  fullname.vb: System.Action(Of Microsoft.ServiceBus.Messaging.BrokeredMessage)
  name.vb: Action(Of BrokeredMessage)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.BrokeredMessage
    name: BrokeredMessage
    nameWithType: BrokeredMessage
    fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.BrokeredMessage
    name: BrokeredMessage
    nameWithType: BrokeredMessage
    fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullname.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.OnMessageOptions
  commentId: T:Microsoft.ServiceBus.Messaging.OnMessageOptions
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: OnMessageOptions
  nameWithType: OnMessageOptions
  fullName: Microsoft.ServiceBus.Messaging.OnMessageOptions
- uid: Microsoft.ServiceBus.Messaging.QueueClient.OnMessageAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.OnMessageAsync
  isExternal: false
  name: OnMessageAsync
  nameWithType: QueueClient.OnMessageAsync
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.OnMessageAsync
- uid: System.Func{Microsoft.ServiceBus.Messaging.BrokeredMessage,System.Threading.Tasks.Task}
  commentId: T:System.Func{Microsoft.ServiceBus.Messaging.BrokeredMessage,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`2
  name: Func<BrokeredMessage, Task>
  nameWithType: Func<BrokeredMessage, Task>
  fullName: System.Func<Microsoft.ServiceBus.Messaging.BrokeredMessage, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of BrokeredMessage, Task)
  fullname.vb: System.Func(Of Microsoft.ServiceBus.Messaging.BrokeredMessage, System.Threading.Tasks.Task)
  name.vb: Func(Of BrokeredMessage, Task)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.BrokeredMessage
    name: BrokeredMessage
    nameWithType: BrokeredMessage
    fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.BrokeredMessage
    name: BrokeredMessage
    nameWithType: BrokeredMessage
    fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.MessageSession
  commentId: T:Microsoft.ServiceBus.Messaging.MessageSession
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: MessageSession
  nameWithType: MessageSession
  fullName: Microsoft.ServiceBus.Messaging.MessageSession
- uid: Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout
  commentId: P:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout
- uid: Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSession*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSession
  isExternal: false
  name: AcceptMessageSession
  nameWithType: QueueClient.AcceptMessageSession
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSession
- uid: System.TimeoutException
  commentId: T:System.TimeoutException
- uid: System.OperationCanceledException
  commentId: T:System.OperationCanceledException
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSessionAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSessionAsync
  isExternal: false
  name: AcceptMessageSessionAsync
  nameWithType: QueueClient.AcceptMessageSessionAsync
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSessionAsync
- uid: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.MessageSession}
  commentId: T:System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.MessageSession}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<MessageSession>
  nameWithType: Task<MessageSession>
  fullName: System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.MessageSession>
  nameWithType.vb: Task(Of MessageSession)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.ServiceBus.Messaging.MessageSession)
  name.vb: Task(Of MessageSession)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.MessageSession
    name: MessageSession
    nameWithType: MessageSession
    fullName: Microsoft.ServiceBus.Messaging.MessageSession
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.MessageSession
    name: MessageSession
    nameWithType: MessageSession
    fullName: Microsoft.ServiceBus.Messaging.MessageSession
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.QueueClient.GetMessageSessions*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.GetMessageSessions
  isExternal: false
  name: GetMessageSessions
  nameWithType: QueueClient.GetMessageSessions
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.GetMessageSessions
- uid: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.MessageSession}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.MessageSession}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<MessageSession>
  nameWithType: IEnumerable<MessageSession>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.MessageSession>
  nameWithType.vb: IEnumerable(Of MessageSession)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.MessageSession)
  name.vb: IEnumerable(Of MessageSession)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.MessageSession
    name: MessageSession
    nameWithType: MessageSession
    fullName: Microsoft.ServiceBus.Messaging.MessageSession
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.MessageSession
    name: MessageSession
    nameWithType: MessageSession
    fullName: Microsoft.ServiceBus.Messaging.MessageSession
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.ServiceBus.Messaging.QueueClient.GetMessageSessionsAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.GetMessageSessionsAsync
  isExternal: false
  name: GetMessageSessionsAsync
  nameWithType: QueueClient.GetMessageSessionsAsync
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.GetMessageSessionsAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.MessageSession}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.MessageSession}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<MessageSession>>
  nameWithType: Task<IEnumerable<MessageSession>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.MessageSession>>
  nameWithType.vb: Task(Of IEnumerable(Of MessageSession))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.MessageSession))
  name.vb: Task(Of IEnumerable(Of MessageSession))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.MessageSession
    name: MessageSession
    nameWithType: MessageSession
    fullName: Microsoft.ServiceBus.Messaging.MessageSession
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.MessageSession
    name: MessageSession
    nameWithType: MessageSession
    fullName: Microsoft.ServiceBus.Messaging.MessageSession
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.AsyncCallback
  commentId: T:System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: Microsoft.ServiceBus.Messaging.QueueClient.EndCreateSender(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.EndCreateSender(System.IAsyncResult)
- uid: System.IAsyncResult
  commentId: T:System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: Microsoft.ServiceBus.Messaging.QueueClient.OnBeginCreateSender*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.OnBeginCreateSender
  isExternal: false
  name: OnBeginCreateSender
  nameWithType: QueueClient.OnBeginCreateSender
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.OnBeginCreateSender
- uid: Microsoft.ServiceBus.Messaging.MessageSender
  commentId: T:Microsoft.ServiceBus.Messaging.MessageSender
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: MessageSender
  nameWithType: MessageSender
  fullName: Microsoft.ServiceBus.Messaging.MessageSender
- uid: Microsoft.ServiceBus.Messaging.QueueClient.OnEndCreateSender*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.OnEndCreateSender
  isExternal: false
  name: OnEndCreateSender
  nameWithType: QueueClient.OnEndCreateSender
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.OnEndCreateSender
- uid: Microsoft.ServiceBus.Messaging.QueueClient.EndCreateReceiver(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.QueueClient.EndCreateReceiver(System.IAsyncResult)
- uid: Microsoft.ServiceBus.Messaging.QueueClient.OnBeginCreateReceiver*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.OnBeginCreateReceiver
  isExternal: false
  name: OnBeginCreateReceiver
  nameWithType: QueueClient.OnBeginCreateReceiver
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.OnBeginCreateReceiver
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver
  commentId: T:Microsoft.ServiceBus.Messaging.MessageReceiver
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: MessageReceiver
  nameWithType: MessageReceiver
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver
- uid: Microsoft.ServiceBus.Messaging.QueueClient.OnEndCreateReceiver*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.OnEndCreateReceiver
  isExternal: false
  name: OnEndCreateReceiver
  nameWithType: QueueClient.OnEndCreateReceiver
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.OnEndCreateReceiver
- uid: Microsoft.ServiceBus.Messaging.QueueClient.OnBeginAcceptMessageSession*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.OnBeginAcceptMessageSession
  isExternal: false
  name: OnBeginAcceptMessageSession
  nameWithType: QueueClient.OnBeginAcceptMessageSession
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.OnBeginAcceptMessageSession
- uid: Microsoft.ServiceBus.Messaging.QueueClient.OnEndAcceptMessageSession*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.OnEndAcceptMessageSession
  isExternal: false
  name: OnEndAcceptMessageSession
  nameWithType: QueueClient.OnEndAcceptMessageSession
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.OnEndAcceptMessageSession
- uid: Microsoft.ServiceBus.Messaging.QueueClient.OnBeginGetMessageSessions*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.OnBeginGetMessageSessions
  isExternal: false
  name: OnBeginGetMessageSessions
  nameWithType: QueueClient.OnBeginGetMessageSessions
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.OnBeginGetMessageSessions
- uid: Microsoft.ServiceBus.Messaging.QueueClient.OnEndGetMessageSessions*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.OnEndGetMessageSessions
  isExternal: false
  name: OnEndGetMessageSessions
  nameWithType: QueueClient.OnEndGetMessageSessions
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.OnEndGetMessageSessions
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: OnAbort()
  nameWithType: ClientEntity.OnAbort()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
    name: OnAbort
    nameWithType: ClientEntity.OnAbort
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
    name: OnAbort
    nameWithType: ClientEntity.OnAbort
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.QueueClient.OnAbort*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.OnAbort
  isExternal: false
  name: OnAbort
  nameWithType: QueueClient.OnAbort
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.OnAbort
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose(System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnClose(System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: true
  name: OnClose(TimeSpan)
  nameWithType: ClientEntity.OnClose(TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose(System.TimeSpan)
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose(System.TimeSpan)
    name: OnClose
    nameWithType: ClientEntity.OnClose
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose(System.TimeSpan)
    name: OnClose
    nameWithType: ClientEntity.OnClose
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.QueueClient.OnClose*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.OnClose
  isExternal: false
  name: OnClose
  nameWithType: QueueClient.OnClose
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.OnClose
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: true
  name: OnBeginClose(TimeSpan, AsyncCallback, Object)
  nameWithType: ClientEntity.OnBeginClose(TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose(System.TimeSpan, System.AsyncCallback, System.Object)
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
    name: OnBeginClose
    nameWithType: ClientEntity.OnBeginClose
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
    name: OnBeginClose
    nameWithType: ClientEntity.OnBeginClose
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.QueueClient.OnBeginClose*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.OnBeginClose
  isExternal: false
  name: OnBeginClose
  nameWithType: QueueClient.OnBeginClose
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.OnBeginClose
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose(System.IAsyncResult)
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: true
  name: OnEndClose(IAsyncResult)
  nameWithType: ClientEntity.OnEndClose(IAsyncResult)
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose(System.IAsyncResult)
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose(System.IAsyncResult)
    name: OnEndClose
    nameWithType: ClientEntity.OnEndClose
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose(System.IAsyncResult)
    name: OnEndClose
    nameWithType: ClientEntity.OnEndClose
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.QueueClient.OnEndClose*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.OnEndClose
  isExternal: false
  name: OnEndClose
  nameWithType: QueueClient.OnEndClose
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.OnEndClose
- uid: Microsoft.ServiceBus.Messaging.QueueClient.Abandon*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.Abandon
  isExternal: false
  name: Abandon
  nameWithType: QueueClient.Abandon
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.Abandon
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Object>
  nameWithType: IDictionary<String, Object>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>
  nameWithType.vb: IDictionary(Of String, Object)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object)
  name.vb: IDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.QueueClient.AbandonAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.AbandonAsync
  isExternal: false
  name: AbandonAsync
  nameWithType: QueueClient.AbandonAsync
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.AbandonAsync
- uid: Microsoft.ServiceBus.Messaging.QueueClient.Complete*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.Complete
  isExternal: false
  name: Complete
  nameWithType: QueueClient.Complete
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.Complete
- uid: Microsoft.ServiceBus.Messaging.MessageLockLostException
  commentId: T:Microsoft.ServiceBus.Messaging.MessageLockLostException
  isExternal: false
  name: MessageLockLostException
  nameWithType: MessageLockLostException
  fullName: Microsoft.ServiceBus.Messaging.MessageLockLostException
- uid: Microsoft.ServiceBus.Messaging.QueueClient.CompleteAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.CompleteAsync
  isExternal: false
  name: CompleteAsync
  nameWithType: QueueClient.CompleteAsync
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.CompleteAsync
- uid: Microsoft.ServiceBus.Messaging.QueueClient.CompleteBatch*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.CompleteBatch
  isExternal: false
  name: CompleteBatch
  nameWithType: QueueClient.CompleteBatch
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.CompleteBatch
- uid: System.Collections.Generic.IEnumerable{System.Guid}
  commentId: T:System.Collections.Generic.IEnumerable{System.Guid}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Guid>
  nameWithType: IEnumerable<Guid>
  fullName: System.Collections.Generic.IEnumerable<System.Guid>
  nameWithType.vb: IEnumerable(Of Guid)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Guid)
  name.vb: IEnumerable(Of Guid)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.QueueClient.CompleteBatchAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.CompleteBatchAsync
  isExternal: false
  name: CompleteBatchAsync
  nameWithType: QueueClient.CompleteBatchAsync
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.CompleteBatchAsync
- uid: Microsoft.ServiceBus.Messaging.QueueClient.Defer*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.Defer
  isExternal: false
  name: Defer
  nameWithType: QueueClient.Defer
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.Defer
- uid: Microsoft.ServiceBus.Messaging.QueueClient.DeferAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.DeferAsync
  isExternal: false
  name: DeferAsync
  nameWithType: QueueClient.DeferAsync
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.DeferAsync
- uid: Microsoft.ServiceBus.Messaging.QueueClient.DeadLetter*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.DeadLetter
  isExternal: false
  name: DeadLetter
  nameWithType: QueueClient.DeadLetter
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.DeadLetter
- uid: Microsoft.ServiceBus.Messaging.QueueClient.DeadLetterAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.DeadLetterAsync
  isExternal: false
  name: DeadLetterAsync
  nameWithType: QueueClient.DeadLetterAsync
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.DeadLetterAsync
- uid: Microsoft.ServiceBus.Messaging.QueueClient.InternalReceiver
  commentId: P:Microsoft.ServiceBus.Messaging.QueueClient.InternalReceiver
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage
  commentId: T:Microsoft.ServiceBus.Messaging.BrokeredMessage
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: BrokeredMessage
  nameWithType: BrokeredMessage
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage
- uid: Microsoft.ServiceBus.Messaging.QueueClient.Receive*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.Receive
  isExternal: false
  name: Receive
  nameWithType: QueueClient.Receive
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.Receive
- uid: System.UnauthorizedAccessException
  commentId: T:System.UnauthorizedAccessException
- uid: Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
  commentId: T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
  isExternal: false
  name: MessagingEntityNotFoundException
  nameWithType: MessagingEntityNotFoundException
  fullName: Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
- uid: Microsoft.ServiceBus.Messaging.MessagingException
  commentId: T:Microsoft.ServiceBus.Messaging.MessagingException
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: MessagingException
  nameWithType: MessagingException
  fullName: Microsoft.ServiceBus.Messaging.MessagingException
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatch*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatch
  isExternal: false
  name: ReceiveBatch
  nameWithType: QueueClient.ReceiveBatch
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatch
- uid: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<BrokeredMessage>
  nameWithType: IEnumerable<BrokeredMessage>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.BrokeredMessage>
  nameWithType.vb: IEnumerable(Of BrokeredMessage)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.BrokeredMessage)
  name.vb: IEnumerable(Of BrokeredMessage)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.BrokeredMessage
    name: BrokeredMessage
    nameWithType: BrokeredMessage
    fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.BrokeredMessage
    name: BrokeredMessage
    nameWithType: BrokeredMessage
    fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Int64}
  commentId: T:System.Collections.Generic.IEnumerable{System.Int64}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Int64>
  nameWithType: IEnumerable<Int64>
  fullName: System.Collections.Generic.IEnumerable<System.Int64>
  nameWithType.vb: IEnumerable(Of Int64)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Int64)
  name.vb: IEnumerable(Of Int64)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.QueueClient.ReceiveAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.ReceiveAsync
  isExternal: false
  name: ReceiveAsync
  nameWithType: QueueClient.ReceiveAsync
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.ReceiveAsync
- uid: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.BrokeredMessage}
  commentId: T:System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.BrokeredMessage}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<BrokeredMessage>
  nameWithType: Task<BrokeredMessage>
  fullName: System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.BrokeredMessage>
  nameWithType.vb: Task(Of BrokeredMessage)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.ServiceBus.Messaging.BrokeredMessage)
  name.vb: Task(Of BrokeredMessage)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.BrokeredMessage
    name: BrokeredMessage
    nameWithType: BrokeredMessage
    fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.BrokeredMessage
    name: BrokeredMessage
    nameWithType: BrokeredMessage
    fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatchAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatchAsync
  isExternal: false
  name: ReceiveBatchAsync
  nameWithType: QueueClient.ReceiveBatchAsync
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.ReceiveBatchAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<BrokeredMessage>>
  nameWithType: Task<IEnumerable<BrokeredMessage>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.BrokeredMessage>>
  nameWithType.vb: Task(Of IEnumerable(Of BrokeredMessage))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.BrokeredMessage))
  name.vb: Task(Of IEnumerable(Of BrokeredMessage))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.BrokeredMessage
    name: BrokeredMessage
    nameWithType: BrokeredMessage
    fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.BrokeredMessage
    name: BrokeredMessage
    nameWithType: BrokeredMessage
    fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.QueueClient.InternalSender
  commentId: P:Microsoft.ServiceBus.Messaging.QueueClient.InternalSender
- uid: Microsoft.ServiceBus.Messaging.MessagingFactorySettings
  commentId: T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: MessagingFactorySettings
  nameWithType: MessagingFactorySettings
  fullName: Microsoft.ServiceBus.Messaging.MessagingFactorySettings
- uid: Microsoft.ServiceBus.Messaging.QueueClient.Send*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.Send
  isExternal: false
  name: Send
  nameWithType: QueueClient.Send
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.Send
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
- uid: System.Runtime.Serialization.SerializationException
  commentId: T:System.Runtime.Serialization.SerializationException
- uid: Microsoft.ServiceBus.Messaging.QueueClient.SendAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.SendAsync
  isExternal: false
  name: SendAsync
  nameWithType: QueueClient.SendAsync
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.SendAsync
- uid: Microsoft.ServiceBus.Messaging.QueueClient.SendBatch*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.SendBatch
  isExternal: false
  name: SendBatch
  nameWithType: QueueClient.SendBatch
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.SendBatch
- uid: Microsoft.ServiceBus.Messaging.QueueClient.SendBatchAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.SendBatchAsync
  isExternal: false
  name: SendBatchAsync
  nameWithType: QueueClient.SendBatchAsync
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.SendBatchAsync
- uid: Microsoft.ServiceBus.Messaging.QueueClient.Peek*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.Peek
  isExternal: false
  name: Peek
  nameWithType: QueueClient.Peek
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.Peek
- uid: Microsoft.ServiceBus.Messaging.QueueClient.PeekAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.PeekAsync
  isExternal: false
  name: PeekAsync
  nameWithType: QueueClient.PeekAsync
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.PeekAsync
- uid: Microsoft.ServiceBus.Messaging.QueueClient.PeekBatch*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.PeekBatch
  isExternal: false
  name: PeekBatch
  nameWithType: QueueClient.PeekBatch
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.PeekBatch
- uid: Microsoft.ServiceBus.Messaging.QueueClient.PeekBatchAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.PeekBatchAsync
  isExternal: false
  name: PeekBatchAsync
  nameWithType: QueueClient.PeekBatchAsync
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.PeekBatchAsync
- uid: Microsoft.ServiceBus.Messaging.QueueClient.ScheduleMessageAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.ScheduleMessageAsync
  isExternal: false
  name: ScheduleMessageAsync
  nameWithType: QueueClient.ScheduleMessageAsync
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.ScheduleMessageAsync
- uid: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
  parent: System
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: System.Threading.Tasks.Task{System.Int64}
  commentId: T:System.Threading.Tasks.Task{System.Int64}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int64>
  nameWithType: Task<Int64>
  fullName: System.Threading.Tasks.Task<System.Int64>
  nameWithType.vb: Task(Of Int64)
  fullname.vb: System.Threading.Tasks.Task(Of System.Int64)
  name.vb: Task(Of Int64)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.QueueClient.CancelScheduledMessageAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.QueueClient.CancelScheduledMessageAsync
  isExternal: false
  name: CancelScheduledMessageAsync
  nameWithType: QueueClient.CancelScheduledMessageAsync
  fullName: Microsoft.ServiceBus.Messaging.QueueClient.CancelScheduledMessageAsync
