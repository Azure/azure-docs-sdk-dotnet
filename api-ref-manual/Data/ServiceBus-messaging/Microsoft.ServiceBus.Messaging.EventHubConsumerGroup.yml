### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  commentId: T:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  id: EventHubConsumerGroup
  parent: Microsoft.ServiceBus.Messaging
  children:
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String)
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.DateTime)
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.DateTime,System.Int64)
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.Int64)
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.String)
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.String,System.Boolean)
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.String,System.Boolean,System.Int64)
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.String,System.Int64)
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync(System.String)
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync(System.String,System.DateTime)
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync(System.String,System.DateTime,System.Int64)
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync(System.String,System.Int64)
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync(System.String,System.String)
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync(System.String,System.String,System.Boolean)
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync(System.String,System.String,System.Boolean,System.Int64)
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync(System.String,System.String,System.Int64)
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.DefaultGroupName
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.EndOfStream
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.EventHubPath
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.EventProcessorLifeCycleManagerFaulted
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.GroupName
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnAbort
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnClose(System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnEndClose(System.IAsyncResult)
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnEndOpen(System.IAsyncResult)
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.PrefetchCount
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.PrefetchSizeInBytes
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessor``1(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager)
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessor``1(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager,Microsoft.ServiceBus.Messaging.EventProcessorOptions)
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorAsync``1(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager)
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorAsync``1(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager,Microsoft.ServiceBus.Messaging.EventProcessorOptions)
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorFactory(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager,Microsoft.ServiceBus.Messaging.IEventProcessorFactory)
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorFactory(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager,Microsoft.ServiceBus.Messaging.IEventProcessorFactory,Microsoft.ServiceBus.Messaging.EventProcessorOptions)
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorFactoryAsync(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager,Microsoft.ServiceBus.Messaging.IEventProcessorFactory)
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorFactoryAsync(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager,Microsoft.ServiceBus.Messaging.IEventProcessorFactory,Microsoft.ServiceBus.Messaging.EventProcessorOptions)
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.StartOfStream
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.UnregisterProcessor(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.CloseReason)
  - Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.UnregisterProcessorAsync(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.CloseReason)
  langs:
  - csharp
  - vb
  name: EventHubConsumerGroup
  nameWithType: EventHubConsumerGroup
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  type: Class
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: EventHubConsumerGroup
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 17
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Represents the consumer group within an Event Hub. This class creates receivers for a specific consumer \ngroup within an Event Hub. This can be the default consumer group or another user-created consumer group."
  example: []
  syntax:
    content: 'public sealed class EventHubConsumerGroup : ClientEntity, IMessageClientEntity, ICloseable'
    content.vb: >-
      Public NotInheritable Class EventHubConsumerGroup
          Inherits ClientEntity
          Implements IMessageClientEntity, ICloseable
  inheritance:
  - System.Object
  - Microsoft.ServiceBus.Messaging.ClientEntity
  inheritedMembers:
  - Microsoft.ServiceBus.Messaging.ClientEntity.RetryPolicy
  - Microsoft.ServiceBus.Messaging.ClientEntity.IsClosed
  - Microsoft.ServiceBus.Messaging.ClientEntity.ThisLock
  - Microsoft.ServiceBus.Messaging.ClientEntity.Abort
  - Microsoft.ServiceBus.Messaging.ClientEntity.Close
  - Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
  - Microsoft.ServiceBus.Messaging.ClientEntity.Fault
  - Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen(System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
  - Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
  - Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
  - Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
  - Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
  - Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
  - Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
  - Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.DefaultGroupName
  commentId: F:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.DefaultGroupName
  id: DefaultGroupName
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: DefaultGroupName
  nameWithType: EventHubConsumerGroup.DefaultGroupName
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.DefaultGroupName
  type: Field
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: DefaultGroupName
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 23
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "\nThe name of the default ConsumerGroup that is pre-created when creating EventHub.\n"
  example: []
  syntax:
    content: public const string DefaultGroupName = "$Default"
    content.vb: Public Const DefaultGroupName As String = "$Default"
    return:
      type: System.String
  seealso:
  - linkId: Microsoft.ServiceBus.Messaging.EventHubClient.GetDefaultConsumerGroup
    commentId: M:Microsoft.ServiceBus.Messaging.EventHubClient.GetDefaultConsumerGroup
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.StartOfStream
  commentId: F:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.StartOfStream
  id: StartOfStream
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: StartOfStream
  nameWithType: EventHubConsumerGroup.StartOfStream
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.StartOfStream
  type: Field
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: StartOfStream
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 45
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "\nThe constant that denotes the start of a stream. This can be used as an offset argument in receiver creation.\n"
  example: []
  syntax:
    content: public const string StartOfStream = "-1"
    content.vb: Public Const StartOfStream As String = "-1"
    return:
      type: System.String
  seealso:
  - linkId: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.String)
    commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.String)
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.EndOfStream
  commentId: F:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.EndOfStream
  id: EndOfStream
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: EndOfStream
  nameWithType: EventHubConsumerGroup.EndOfStream
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.EndOfStream
  type: Field
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: EndOfStream
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 68
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "\nThe constant that denotes the end of a stream. This can be used as an offset argument in receiver creation to \nstart receiving from the latest event, instead of a specific point in time/offset value.\n"
  example: []
  syntax:
    content: public const string EndOfStream = "@latest"
    content.vb: Public Const EndOfStream As String = "@latest"
    return:
      type: System.String
  seealso:
  - linkId: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.String)
    commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.String)
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.EventProcessorLifeCycleManagerFaulted
  commentId: E:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.EventProcessorLifeCycleManagerFaulted
  id: EventProcessorLifeCycleManagerFaulted
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: EventProcessorLifeCycleManagerFaulted
  nameWithType: EventHubConsumerGroup.EventProcessorLifeCycleManagerFaulted
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.EventProcessorLifeCycleManagerFaulted
  type: Event
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: EventProcessorLifeCycleManagerFaulted
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 70
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  syntax:
    content: public event EventHandler<EventProcessorFaultedEventArgs> EventProcessorLifeCycleManagerFaulted
    content.vb: Public Event EventProcessorLifeCycleManagerFaulted As EventHandler(Of EventProcessorFaultedEventArgs)
    return:
      type: System.EventHandler{Microsoft.ServiceBus.Messaging.EventProcessorFaultedEventArgs}
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.PrefetchCount
  commentId: P:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.PrefetchCount
  id: PrefetchCount
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: PrefetchCount
  nameWithType: EventHubConsumerGroup.PrefetchCount
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.PrefetchCount
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: PrefetchCount
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 118
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Gets or sets the number of events that any receive operation will actively cache. By default, this value is inherited from \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubClient\" data-throw-if-not-resolved=\"false\"></xref>. The default value is 10,000."
  remarks: "Any <xref href=\"Microsoft.ServiceBus.Messaging.EventHubReceiver\" data-throw-if-not-resolved=\"false\"></xref> created from this instance will inherit this value by default.\nChanges to this value will not be propagate to already created receiver, but will be used by \nnew <xref href=\"Microsoft.ServiceBus.Messaging.EventHubReceiver\" data-throw-if-not-resolved=\"false\"></xref> created after the change. Also setting this property to non-zero will\nset <xref href=\"Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.PrefetchSizeInBytes\" data-throw-if-not-resolved=\"false\"></xref> to null.\nNote that setting the count too low will affect the effective performance of the event hub receive call."
  example: []
  syntax:
    content: public int PrefetchCount { get; set; }
    content.vb: Public Property PrefetchCount As Integer
    parameters: []
    return:
      type: System.Int32
      description: The number of events that the receiver can cache.
  overload: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.PrefetchCount*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown if the value is less than the minimum required value of 10.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.PrefetchSizeInBytes
  commentId: P:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.PrefetchSizeInBytes
  id: PrefetchSizeInBytes
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: PrefetchSizeInBytes
  nameWithType: EventHubConsumerGroup.PrefetchSizeInBytes
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.PrefetchSizeInBytes
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: PrefetchSizeInBytes
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 147
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Gets or sets the maximum size (in bytes) in total that any receive operation will actively cache. The size of each event data is determined by the \n<xref href=\"Microsoft.ServiceBus.Messaging.EventData.SerializedSizeInBytes\" data-throw-if-not-resolved=\"false\"></xref> property."
  remarks: "The size limit is not an absolute limit. the size might go over by at least \none event data worth of size. Any <xref href=\"Microsoft.ServiceBus.Messaging.EventHubReceiver\" data-throw-if-not-resolved=\"false\"></xref> created from this instance will inherit this value by default.\nChanges to this value will not be propagate to already created receiver, but will be used by \nnew <xref href=\"Microsoft.ServiceBus.Messaging.EventHubReceiver\" data-throw-if-not-resolved=\"false\"></xref> created after the change. \nAlso, setting this property to non-null value will\nset <xref href=\"Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.PrefetchCount\" data-throw-if-not-resolved=\"false\"></xref> to zero.\nNote that setting the size too low will affect the effective performance of the Event Hub receive call."
  example: []
  syntax:
    content: public long ? PrefetchSizeInBytes { get; set; }
    content.vb: Public Property PrefetchSizeInBytes As Long?
    parameters: []
    return:
      type: System.Nullable{System.Int64}
      description: Returns <xref href="System.Int64" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.PrefetchSizeInBytes*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown when the size value is less than the minimum required value of 260K bytes.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.EventHubPath
  commentId: P:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.EventHubPath
  id: EventHubPath
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: EventHubPath
  nameWithType: EventHubConsumerGroup.EventHubPath
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.EventHubPath
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: EventHubPath
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 167
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets the event hub path.
  example: []
  syntax:
    content: public string EventHubPath { get; }
    content.vb: Public ReadOnly Property EventHubPath As String
    parameters: []
    return:
      type: System.String
      description: The event hub path
  overload: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.EventHubPath*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.GroupName
  commentId: P:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.GroupName
  id: GroupName
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: GroupName
  nameWithType: EventHubConsumerGroup.GroupName
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.GroupName
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: GroupName
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 171
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets the name of the consumer group.
  example: []
  syntax:
    content: public string GroupName { get; }
    content.vb: Public ReadOnly Property GroupName As String
    parameters: []
    return:
      type: System.String
      description: The name of the consumer group.
  overload: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.GroupName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessor``1(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessor``1(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager)
  id: RegisterProcessor``1(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager)
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: RegisterProcessor<T>(Lease, ICheckpointManager)
  nameWithType: EventHubConsumerGroup.RegisterProcessor<T>(Lease, ICheckpointManager)
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessor<T>(Microsoft.ServiceBus.Messaging.Lease, Microsoft.ServiceBus.Messaging.ICheckpointManager)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: RegisterProcessor
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 196
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Registers an implementation of \n<xref href=\"Microsoft.ServiceBus.Messaging.IEventProcessor\" data-throw-if-not-resolved=\"false\"></xref> in order to start consuming events from Event Hubs for the specified \n<xref href=\"Microsoft.ServiceBus.Messaging.Lease.PartitionId\" data-throw-if-not-resolved=\"false\"></xref> starting from \n<xref href=\"Microsoft.ServiceBus.Messaging.Lease.Offset\" data-throw-if-not-resolved=\"false\"></xref>. Use this overload to create an event processor that checkpoints the message offset using a custom implementation of \n<xref href=\"Microsoft.ServiceBus.Messaging.ICheckpointManager\" data-throw-if-not-resolved=\"false\"></xref>."
  remarks: "To perform more advanced <xref href=\"Microsoft.ServiceBus.Messaging.IEventProcessor\" data-throw-if-not-resolved=\"false\"></xref> creation, implement an <xref href=\"Microsoft.ServiceBus.Messaging.IEventProcessorFactory\" data-throw-if-not-resolved=\"false\"></xref> \nclass which allows you to control how event processors are created."
  example: []
  syntax:
    content: 'public void RegisterProcessor<T>(Lease lease, ICheckpointManager checkpointManager)where T : IEventProcessor'
    content.vb: Public Sub RegisterProcessor(Of T As IEventProcessor)(lease As Lease, checkpointManager As ICheckpointManager)
    parameters:
    - id: lease
      type: Microsoft.ServiceBus.Messaging.Lease
      description: Partition information.
    - id: checkpointManager
      type: Microsoft.ServiceBus.Messaging.ICheckpointManager
      description: "Checkpoints the offset for the specified partition when \n<xref href=\"Microsoft.ServiceBus.Messaging.PartitionContext.CheckpointAsync(Microsoft.ServiceBus.Messaging.EventData)\" data-throw-if-not-resolved=\"false\"></xref> is called."
    typeParameters:
    - id: T
      description: Implementation of <xref href="Microsoft.ServiceBus.Messaging.IEventProcessor" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessor*
  nameWithType.vb: EventHubConsumerGroup.RegisterProcessor(Of T)(Lease, ICheckpointManager)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessor(Of T)(Microsoft.ServiceBus.Messaging.Lease, Microsoft.ServiceBus.Messaging.ICheckpointManager)
  name.vb: RegisterProcessor(Of T)(Lease, ICheckpointManager)
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessor``1(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager,Microsoft.ServiceBus.Messaging.EventProcessorOptions)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessor``1(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager,Microsoft.ServiceBus.Messaging.EventProcessorOptions)
  id: RegisterProcessor``1(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager,Microsoft.ServiceBus.Messaging.EventProcessorOptions)
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: RegisterProcessor<T>(Lease, ICheckpointManager, EventProcessorOptions)
  nameWithType: EventHubConsumerGroup.RegisterProcessor<T>(Lease, ICheckpointManager, EventProcessorOptions)
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessor<T>(Microsoft.ServiceBus.Messaging.Lease, Microsoft.ServiceBus.Messaging.ICheckpointManager, Microsoft.ServiceBus.Messaging.EventProcessorOptions)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: RegisterProcessor
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 213
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Registers an implementation of \n<xref href=\"Microsoft.ServiceBus.Messaging.IEventProcessor\" data-throw-if-not-resolved=\"false\"></xref> in order to start consuming events from Event Hubs for the specified \n<xref href=\"Microsoft.ServiceBus.Messaging.Lease.PartitionId\" data-throw-if-not-resolved=\"false\"></xref> starting from \n<xref href=\"Microsoft.ServiceBus.Messaging.Lease.Offset\" data-throw-if-not-resolved=\"false\"></xref>. Use this overload to create an event processor that checkpoints the message offset using a custom implementation of \n<xref href=\"Microsoft.ServiceBus.Messaging.ICheckpointManager\" data-throw-if-not-resolved=\"false\"></xref>."
  remarks: "To perform more advanced <xref href=\"Microsoft.ServiceBus.Messaging.IEventProcessor\" data-throw-if-not-resolved=\"false\"></xref> creation, implement an <xref href=\"Microsoft.ServiceBus.Messaging.IEventProcessorFactory\" data-throw-if-not-resolved=\"false\"></xref> \nclass which allows you to control how event processors are created."
  example: []
  syntax:
    content: 'public void RegisterProcessor<T>(Lease lease, ICheckpointManager checkpointManager, EventProcessorOptions processorOptions)where T : IEventProcessor'
    content.vb: Public Sub RegisterProcessor(Of T As IEventProcessor)(lease As Lease, checkpointManager As ICheckpointManager, processorOptions As EventProcessorOptions)
    parameters:
    - id: lease
      type: Microsoft.ServiceBus.Messaging.Lease
      description: Partition information.
    - id: checkpointManager
      type: Microsoft.ServiceBus.Messaging.ICheckpointManager
      description: "Checkpoints the offset for the specified partition when \n<xref href=\"Microsoft.ServiceBus.Messaging.PartitionContext.CheckpointAsync(Microsoft.ServiceBus.Messaging.EventData)\" data-throw-if-not-resolved=\"false\"></xref> is called."
    - id: processorOptions
      type: Microsoft.ServiceBus.Messaging.EventProcessorOptions
      description: An <xref href="Microsoft.ServiceBus.Messaging.EventProcessorOptions" data-throw-if-not-resolved="false"></xref> object.
    typeParameters:
    - id: T
      description: Implementation of <xref href="Microsoft.ServiceBus.Messaging.IEventProcessor" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessor*
  nameWithType.vb: EventHubConsumerGroup.RegisterProcessor(Of T)(Lease, ICheckpointManager, EventProcessorOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessor(Of T)(Microsoft.ServiceBus.Messaging.Lease, Microsoft.ServiceBus.Messaging.ICheckpointManager, Microsoft.ServiceBus.Messaging.EventProcessorOptions)
  name.vb: RegisterProcessor(Of T)(Lease, ICheckpointManager, EventProcessorOptions)
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorAsync``1(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorAsync``1(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager)
  id: RegisterProcessorAsync``1(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager)
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: RegisterProcessorAsync<T>(Lease, ICheckpointManager)
  nameWithType: EventHubConsumerGroup.RegisterProcessorAsync<T>(Lease, ICheckpointManager)
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorAsync<T>(Microsoft.ServiceBus.Messaging.Lease, Microsoft.ServiceBus.Messaging.ICheckpointManager)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: RegisterProcessorAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 225
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Asynchronous version of \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessor%60%601(Microsoft.ServiceBus.Messaging.Lease%2cMicrosoft.ServiceBus.Messaging.ICheckpointManager)\" data-throw-if-not-resolved=\"false\"></xref>."
  example: []
  syntax:
    content: 'public Task RegisterProcessorAsync<T>(Lease lease, ICheckpointManager checkpointManager)where T : IEventProcessor'
    content.vb: Public Function RegisterProcessorAsync(Of T As IEventProcessor)(lease As Lease, checkpointManager As ICheckpointManager) As Task
    parameters:
    - id: lease
      type: Microsoft.ServiceBus.Messaging.Lease
      description: Partition information.
    - id: checkpointManager
      type: Microsoft.ServiceBus.Messaging.ICheckpointManager
      description: "Checkpoints the offset for the specified partition when \n<xref href=\"Microsoft.ServiceBus.Messaging.PartitionContext.CheckpointAsync(Microsoft.ServiceBus.Messaging.EventData)\" data-throw-if-not-resolved=\"false\"></xref> is called."
    typeParameters:
    - id: T
      description: Implementation of <xref href="Microsoft.ServiceBus.Messaging.IEventProcessor" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: A task instance that represents the asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorAsync*
  nameWithType.vb: EventHubConsumerGroup.RegisterProcessorAsync(Of T)(Lease, ICheckpointManager)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorAsync(Of T)(Microsoft.ServiceBus.Messaging.Lease, Microsoft.ServiceBus.Messaging.ICheckpointManager)
  name.vb: RegisterProcessorAsync(Of T)(Lease, ICheckpointManager)
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorAsync``1(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager,Microsoft.ServiceBus.Messaging.EventProcessorOptions)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorAsync``1(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager,Microsoft.ServiceBus.Messaging.EventProcessorOptions)
  id: RegisterProcessorAsync``1(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager,Microsoft.ServiceBus.Messaging.EventProcessorOptions)
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: RegisterProcessorAsync<T>(Lease, ICheckpointManager, EventProcessorOptions)
  nameWithType: EventHubConsumerGroup.RegisterProcessorAsync<T>(Lease, ICheckpointManager, EventProcessorOptions)
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorAsync<T>(Microsoft.ServiceBus.Messaging.Lease, Microsoft.ServiceBus.Messaging.ICheckpointManager, Microsoft.ServiceBus.Messaging.EventProcessorOptions)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: RegisterProcessorAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 240
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Asynchronous version of \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessor%60%601(Microsoft.ServiceBus.Messaging.Lease%2cMicrosoft.ServiceBus.Messaging.ICheckpointManager%2cMicrosoft.ServiceBus.Messaging.EventProcessorOptions)\" data-throw-if-not-resolved=\"false\"></xref>."
  remarks: "To perform more advanced <xref href=\"Microsoft.ServiceBus.Messaging.IEventProcessor\" data-throw-if-not-resolved=\"false\"></xref> creation, implement an <xref href=\"Microsoft.ServiceBus.Messaging.IEventProcessorFactory\" data-throw-if-not-resolved=\"false\"></xref> \nclass which allows you to control how event processors are created."
  example: []
  syntax:
    content: 'public Task RegisterProcessorAsync<T>(Lease lease, ICheckpointManager checkpointManager, EventProcessorOptions processorOptions)where T : IEventProcessor'
    content.vb: Public Function RegisterProcessorAsync(Of T As IEventProcessor)(lease As Lease, checkpointManager As ICheckpointManager, processorOptions As EventProcessorOptions) As Task
    parameters:
    - id: lease
      type: Microsoft.ServiceBus.Messaging.Lease
      description: Partition information.
    - id: checkpointManager
      type: Microsoft.ServiceBus.Messaging.ICheckpointManager
      description: "Checkpoints the offset for the specified partition when \n<xref href=\"Microsoft.ServiceBus.Messaging.PartitionContext.CheckpointAsync(Microsoft.ServiceBus.Messaging.EventData)\" data-throw-if-not-resolved=\"false\"></xref> is called."
    - id: processorOptions
      type: Microsoft.ServiceBus.Messaging.EventProcessorOptions
      description: An <xref href="Microsoft.ServiceBus.Messaging.EventProcessorOptions" data-throw-if-not-resolved="false"></xref> object.
    typeParameters:
    - id: T
      description: Implementation of <xref href="Microsoft.ServiceBus.Messaging.IEventProcessor" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: Returns <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorAsync*
  nameWithType.vb: EventHubConsumerGroup.RegisterProcessorAsync(Of T)(Lease, ICheckpointManager, EventProcessorOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorAsync(Of T)(Microsoft.ServiceBus.Messaging.Lease, Microsoft.ServiceBus.Messaging.ICheckpointManager, Microsoft.ServiceBus.Messaging.EventProcessorOptions)
  name.vb: RegisterProcessorAsync(Of T)(Lease, ICheckpointManager, EventProcessorOptions)
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorFactory(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager,Microsoft.ServiceBus.Messaging.IEventProcessorFactory)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorFactory(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager,Microsoft.ServiceBus.Messaging.IEventProcessorFactory)
  id: RegisterProcessorFactory(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager,Microsoft.ServiceBus.Messaging.IEventProcessorFactory)
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: RegisterProcessorFactory(Lease, ICheckpointManager, IEventProcessorFactory)
  nameWithType: EventHubConsumerGroup.RegisterProcessorFactory(Lease, ICheckpointManager, IEventProcessorFactory)
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorFactory(Microsoft.ServiceBus.Messaging.Lease, Microsoft.ServiceBus.Messaging.ICheckpointManager, Microsoft.ServiceBus.Messaging.IEventProcessorFactory)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: RegisterProcessorFactory
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 273
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Registers the \n<xref href=\"Microsoft.ServiceBus.Messaging.IEventProcessorFactory\" data-throw-if-not-resolved=\"false\"></xref> object used to create an instance of \n<xref href=\"Microsoft.ServiceBus.Messaging.IEventProcessor\" data-throw-if-not-resolved=\"false\"></xref> in order to start consuming events for the partition specified by \n<xref href=\"Microsoft.ServiceBus.Messaging.Lease.PartitionId\" data-throw-if-not-resolved=\"false\"></xref>, starting from \n<xref href=\"Microsoft.ServiceBus.Messaging.Lease.Offset\" data-throw-if-not-resolved=\"false\"></xref>. Use this overload to create an event processor that checkpoints the message offset using a custom implementation of \n<xref href=\"Microsoft.ServiceBus.Messaging.ICheckpointManager\" data-throw-if-not-resolved=\"false\"></xref>."
  example: []
  syntax:
    content: public void RegisterProcessorFactory(Lease lease, ICheckpointManager checkpointManager, IEventProcessorFactory eventProcessorFactory)
    content.vb: Public Sub RegisterProcessorFactory(lease As Lease, checkpointManager As ICheckpointManager, eventProcessorFactory As IEventProcessorFactory)
    parameters:
    - id: lease
      type: Microsoft.ServiceBus.Messaging.Lease
      description: Partition information.
    - id: checkpointManager
      type: Microsoft.ServiceBus.Messaging.ICheckpointManager
      description: "Checkpoints the offset for the specified partition when \n<xref href=\"Microsoft.ServiceBus.Messaging.PartitionContext.CheckpointAsync(Microsoft.ServiceBus.Messaging.EventData)\" data-throw-if-not-resolved=\"false\"></xref> is called."
    - id: eventProcessorFactory
      type: Microsoft.ServiceBus.Messaging.IEventProcessorFactory
      description: Factory to create an instance of <xref href="Microsoft.ServiceBus.Messaging.IEventProcessor" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorFactory*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorFactory(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager,Microsoft.ServiceBus.Messaging.IEventProcessorFactory,Microsoft.ServiceBus.Messaging.EventProcessorOptions)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorFactory(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager,Microsoft.ServiceBus.Messaging.IEventProcessorFactory,Microsoft.ServiceBus.Messaging.EventProcessorOptions)
  id: RegisterProcessorFactory(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager,Microsoft.ServiceBus.Messaging.IEventProcessorFactory,Microsoft.ServiceBus.Messaging.EventProcessorOptions)
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: RegisterProcessorFactory(Lease, ICheckpointManager, IEventProcessorFactory, EventProcessorOptions)
  nameWithType: EventHubConsumerGroup.RegisterProcessorFactory(Lease, ICheckpointManager, IEventProcessorFactory, EventProcessorOptions)
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorFactory(Microsoft.ServiceBus.Messaging.Lease, Microsoft.ServiceBus.Messaging.ICheckpointManager, Microsoft.ServiceBus.Messaging.IEventProcessorFactory, Microsoft.ServiceBus.Messaging.EventProcessorOptions)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: RegisterProcessorFactory
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 309
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Registers the \n<xref href=\"Microsoft.ServiceBus.Messaging.IEventProcessorFactory\" data-throw-if-not-resolved=\"false\"></xref> object used to create an instance of \n<xref href=\"Microsoft.ServiceBus.Messaging.IEventProcessor\" data-throw-if-not-resolved=\"false\"></xref> in order to start consuming events for the partition specified by \n<xref href=\"Microsoft.ServiceBus.Messaging.Lease.PartitionId\" data-throw-if-not-resolved=\"false\"></xref>, starting from \n<xref href=\"Microsoft.ServiceBus.Messaging.Lease.Offset\" data-throw-if-not-resolved=\"false\"></xref>. Use this overload to create an event processor that checkpoints the message offset using a custom implementation of \n<xref href=\"Microsoft.ServiceBus.Messaging.ICheckpointManager\" data-throw-if-not-resolved=\"false\"></xref>."
  example: []
  syntax:
    content: public void RegisterProcessorFactory(Lease lease, ICheckpointManager checkpointManager, IEventProcessorFactory eventProcessorFactory, EventProcessorOptions processorOptions)
    content.vb: Public Sub RegisterProcessorFactory(lease As Lease, checkpointManager As ICheckpointManager, eventProcessorFactory As IEventProcessorFactory, processorOptions As EventProcessorOptions)
    parameters:
    - id: lease
      type: Microsoft.ServiceBus.Messaging.Lease
      description: Partition information.
    - id: checkpointManager
      type: Microsoft.ServiceBus.Messaging.ICheckpointManager
      description: "Checkpoints the offset for the specified partition when \n<xref href=\"Microsoft.ServiceBus.Messaging.PartitionContext.CheckpointAsync(Microsoft.ServiceBus.Messaging.EventData)\" data-throw-if-not-resolved=\"false\"></xref> is called."
    - id: eventProcessorFactory
      type: Microsoft.ServiceBus.Messaging.IEventProcessorFactory
      description: Factory to create an instance of <xref href="Microsoft.ServiceBus.Messaging.IEventProcessor" data-throw-if-not-resolved="false"></xref>.
    - id: processorOptions
      type: Microsoft.ServiceBus.Messaging.EventProcessorOptions
      description: An <xref href="Microsoft.ServiceBus.Messaging.EventProcessorOptions" data-throw-if-not-resolved="false"></xref> object.
  overload: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorFactory*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorFactoryAsync(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager,Microsoft.ServiceBus.Messaging.IEventProcessorFactory)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorFactoryAsync(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager,Microsoft.ServiceBus.Messaging.IEventProcessorFactory)
  id: RegisterProcessorFactoryAsync(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager,Microsoft.ServiceBus.Messaging.IEventProcessorFactory)
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: RegisterProcessorFactoryAsync(Lease, ICheckpointManager, IEventProcessorFactory)
  nameWithType: EventHubConsumerGroup.RegisterProcessorFactoryAsync(Lease, ICheckpointManager, IEventProcessorFactory)
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorFactoryAsync(Microsoft.ServiceBus.Messaging.Lease, Microsoft.ServiceBus.Messaging.ICheckpointManager, Microsoft.ServiceBus.Messaging.IEventProcessorFactory)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: RegisterProcessorFactoryAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 341
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Asynchronous version of \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorFactory(Microsoft.ServiceBus.Messaging.Lease%2cMicrosoft.ServiceBus.Messaging.ICheckpointManager%2cMicrosoft.ServiceBus.Messaging.IEventProcessorFactory)\" data-throw-if-not-resolved=\"false\"></xref>."
  example: []
  syntax:
    content: public Task RegisterProcessorFactoryAsync(Lease lease, ICheckpointManager checkpointManager, IEventProcessorFactory eventProcessorFactory)
    content.vb: Public Function RegisterProcessorFactoryAsync(lease As Lease, checkpointManager As ICheckpointManager, eventProcessorFactory As IEventProcessorFactory) As Task
    parameters:
    - id: lease
      type: Microsoft.ServiceBus.Messaging.Lease
      description: Partition information.
    - id: checkpointManager
      type: Microsoft.ServiceBus.Messaging.ICheckpointManager
      description: "Checkpoints the offset for the specified partition when \n<xref href=\"Microsoft.ServiceBus.Messaging.PartitionContext.CheckpointAsync(Microsoft.ServiceBus.Messaging.EventData)\" data-throw-if-not-resolved=\"false\"></xref> is called."
    - id: eventProcessorFactory
      type: Microsoft.ServiceBus.Messaging.IEventProcessorFactory
      description: Factory to create an instance of <xref href="Microsoft.ServiceBus.Messaging.IEventProcessor" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: A task instance that represents the asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorFactoryAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorFactoryAsync(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager,Microsoft.ServiceBus.Messaging.IEventProcessorFactory,Microsoft.ServiceBus.Messaging.EventProcessorOptions)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorFactoryAsync(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager,Microsoft.ServiceBus.Messaging.IEventProcessorFactory,Microsoft.ServiceBus.Messaging.EventProcessorOptions)
  id: RegisterProcessorFactoryAsync(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager,Microsoft.ServiceBus.Messaging.IEventProcessorFactory,Microsoft.ServiceBus.Messaging.EventProcessorOptions)
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: RegisterProcessorFactoryAsync(Lease, ICheckpointManager, IEventProcessorFactory, EventProcessorOptions)
  nameWithType: EventHubConsumerGroup.RegisterProcessorFactoryAsync(Lease, ICheckpointManager, IEventProcessorFactory, EventProcessorOptions)
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorFactoryAsync(Microsoft.ServiceBus.Messaging.Lease, Microsoft.ServiceBus.Messaging.ICheckpointManager, Microsoft.ServiceBus.Messaging.IEventProcessorFactory, Microsoft.ServiceBus.Messaging.EventProcessorOptions)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: RegisterProcessorFactoryAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 371
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Asynchronous version of \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorFactory(Microsoft.ServiceBus.Messaging.Lease%2cMicrosoft.ServiceBus.Messaging.ICheckpointManager%2cMicrosoft.ServiceBus.Messaging.IEventProcessorFactory%2cMicrosoft.ServiceBus.Messaging.EventProcessorOptions)\" data-throw-if-not-resolved=\"false\"></xref>."
  example: []
  syntax:
    content: public Task RegisterProcessorFactoryAsync(Lease lease, ICheckpointManager checkpointManager, IEventProcessorFactory eventProcessorFactory, EventProcessorOptions processorOptions)
    content.vb: Public Function RegisterProcessorFactoryAsync(lease As Lease, checkpointManager As ICheckpointManager, eventProcessorFactory As IEventProcessorFactory, processorOptions As EventProcessorOptions) As Task
    parameters:
    - id: lease
      type: Microsoft.ServiceBus.Messaging.Lease
      description: Partition information.
    - id: checkpointManager
      type: Microsoft.ServiceBus.Messaging.ICheckpointManager
      description: "Checkpoints the offset for the specified partition when \n<xref href=\"Microsoft.ServiceBus.Messaging.PartitionContext.CheckpointAsync(Microsoft.ServiceBus.Messaging.EventData)\" data-throw-if-not-resolved=\"false\"></xref> is called."
    - id: eventProcessorFactory
      type: Microsoft.ServiceBus.Messaging.IEventProcessorFactory
      description: Factory to create an instance of <xref href="Microsoft.ServiceBus.Messaging.IEventProcessor" data-throw-if-not-resolved="false"></xref>.
    - id: processorOptions
      type: Microsoft.ServiceBus.Messaging.EventProcessorOptions
      description: An <xref href="Microsoft.ServiceBus.Messaging.EventProcessorOptions" data-throw-if-not-resolved="false"></xref> object.
    return:
      type: System.Threading.Tasks.Task
      description: Returns <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorFactoryAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.UnregisterProcessor(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.CloseReason)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.UnregisterProcessor(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.CloseReason)
  id: UnregisterProcessor(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.CloseReason)
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: UnregisterProcessor(Lease, CloseReason)
  nameWithType: EventHubConsumerGroup.UnregisterProcessor(Lease, CloseReason)
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.UnregisterProcessor(Microsoft.ServiceBus.Messaging.Lease, Microsoft.ServiceBus.Messaging.CloseReason)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: UnregisterProcessor
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 418
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Unregisters \n<xref href=\"Microsoft.ServiceBus.Messaging.IEventProcessor\" data-throw-if-not-resolved=\"false\"></xref> for the partition specified by \n<xref href=\"Microsoft.ServiceBus.Messaging.Lease.PartitionId\" data-throw-if-not-resolved=\"false\"></xref>. This results in \n<xref href=\"Microsoft.ServiceBus.Messaging.IEventProcessor.CloseAsync(Microsoft.ServiceBus.Messaging.PartitionContext%2cMicrosoft.ServiceBus.Messaging.CloseReason)\" data-throw-if-not-resolved=\"false\"></xref> being called on the underlying event processor."
  example: []
  syntax:
    content: public void UnregisterProcessor(Lease lease, CloseReason reason)
    content.vb: Public Sub UnregisterProcessor(lease As Lease, reason As CloseReason)
    parameters:
    - id: lease
      type: Microsoft.ServiceBus.Messaging.Lease
      description: Partition information.
    - id: reason
      type: Microsoft.ServiceBus.Messaging.CloseReason
      description: "Reason for which \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.UnregisterProcessor(Microsoft.ServiceBus.Messaging.Lease%2cMicrosoft.ServiceBus.Messaging.CloseReason)\" data-throw-if-not-resolved=\"false\"></xref> was called."
  overload: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.UnregisterProcessor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.UnregisterProcessorAsync(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.CloseReason)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.UnregisterProcessorAsync(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.CloseReason)
  id: UnregisterProcessorAsync(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.CloseReason)
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: UnregisterProcessorAsync(Lease, CloseReason)
  nameWithType: EventHubConsumerGroup.UnregisterProcessorAsync(Lease, CloseReason)
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.UnregisterProcessorAsync(Microsoft.ServiceBus.Messaging.Lease, Microsoft.ServiceBus.Messaging.CloseReason)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: UnregisterProcessorAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 434
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Asynchronous version of \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.UnregisterProcessor(Microsoft.ServiceBus.Messaging.Lease%2cMicrosoft.ServiceBus.Messaging.CloseReason)\" data-throw-if-not-resolved=\"false\"></xref>."
  example: []
  syntax:
    content: public Task UnregisterProcessorAsync(Lease lease, CloseReason reason)
    content.vb: Public Function UnregisterProcessorAsync(lease As Lease, reason As CloseReason) As Task
    parameters:
    - id: lease
      type: Microsoft.ServiceBus.Messaging.Lease
      description: Partition information.
    - id: reason
      type: Microsoft.ServiceBus.Messaging.CloseReason
      description: "Reason that \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.UnregisterProcessorAsync(Microsoft.ServiceBus.Messaging.Lease%2cMicrosoft.ServiceBus.Messaging.CloseReason)\" data-throw-if-not-resolved=\"false\"></xref> was called."
    return:
      type: System.Threading.Tasks.Task
      description: A task instance that represents the asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.UnregisterProcessorAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.Int64)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.Int64)
  id: CreateReceiver(System.String,System.Int64)
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: CreateReceiver(String, Int64)
  nameWithType: EventHubConsumerGroup.CreateReceiver(String, Int64)
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String, System.Int64)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CreateReceiver
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 460
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Creates a new Event Hubs receiver in the specified partition, and the specified epoch value. You \ncan use the created receiver to receive events for one Event Hubs partition, specified by <span class=\"paramref\">partitionId</span>."
  remarks: "If the <xref href=\"Microsoft.ServiceBus.Messaging.EventHubConsumerGroup\" data-throw-if-not-resolved=\"false\"></xref> has checkpoint enabled, then the\nreceiver will get next message from the checkpoint offset. If checkpoint is disabled, \nthen receiver will get message from the start of the event stream, as determined by the \nmessage retention policy of the event hub."
  example: []
  syntax:
    content: public EventHubReceiver CreateReceiver(string partitionId, long epoch)
    content.vb: Public Function CreateReceiver(partitionId As String, epoch As Long) As EventHubReceiver
    parameters:
    - id: partitionId
      type: System.String
      description: The ID of the partition.
    - id: epoch
      type: System.Int64
      description: The epoch value. The service uses this value to enforce partition/lease ownership.
    return:
      type: Microsoft.ServiceBus.Messaging.EventHubReceiver
      description: Returns the <xref href="Microsoft.ServiceBus.Messaging.EventHubReceiver" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver*
  exceptions:
  - type: Microsoft.ServiceBus.Messaging.MessagingException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingException
    description: Thrown if the service encounters a transient error.
  - type: Microsoft.ServiceBus.Messaging.MessagingCommunicationException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingCommunicationException
    description: "Thrown if the client \nhas a problem connecting to the service."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Thrown if <span class=\"paramref\">partitionId</span> is not within the expected range, as determined by the \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubDescription.PartitionCount\" data-throw-if-not-resolved=\"false\"></xref> property."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String)
  id: CreateReceiver(System.String)
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: CreateReceiver(String)
  nameWithType: EventHubConsumerGroup.CreateReceiver(String)
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CreateReceiver
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 486
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Creates a new Event Hubs receiver in the specified partition. You can use the \ncreated receiver to receive events for one Event Hubs partition, specified by <span class=\"paramref\">partitionId</span>."
  remarks: "If the <xref href=\"Microsoft.ServiceBus.Messaging.EventHubConsumerGroup\" data-throw-if-not-resolved=\"false\"></xref> has checkpoint enabled, \nthis overload will always throw InvalidOperationException because checkpoint\nenabled ConsumerGroup requires epoch to work (please use the overload that \nsupply epoch as input argument). If checkpoint is disabled, \nthen receiver will get message from the start of the event stream, as determined by the \nmessage retention policy of the Event Hub."
  example: []
  syntax:
    content: public EventHubReceiver CreateReceiver(string partitionId)
    content.vb: Public Function CreateReceiver(partitionId As String) As EventHubReceiver
    parameters:
    - id: partitionId
      type: System.String
      description: The ID of the partition.
    return:
      type: Microsoft.ServiceBus.Messaging.EventHubReceiver
      description: "Returns the \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubReceiver\" data-throw-if-not-resolved=\"false\"></xref> object that is tied to the given Event Hubs partition."
  overload: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver*
  exceptions:
  - type: Microsoft.ServiceBus.Messaging.MessagingException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingException
    description: Thrown if the service encounters a transient error.
  - type: Microsoft.ServiceBus.Messaging.MessagingCommunicationException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingCommunicationException
    description: "Thrown if the client \nhas a problem connecting to the service."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Thrown if <span class=\"paramref\">partitionId</span> is not within the expected range, as determined by the \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubDescription.PartitionCount\" data-throw-if-not-resolved=\"false\"></xref> property."
  - type: System.ServiceModel.QuotaExceededException
    commentId: T:System.ServiceModel.QuotaExceededException
    description: "Thrown if the number of receivers currently connected to the partition specified \nby <span class=\"paramref\">partitionId</span> has exceeded the maximum allowed quota set by the service."
  - type: Microsoft.ServiceBus.Messaging.ReceiverDisconnectedException
    commentId: T:Microsoft.ServiceBus.Messaging.ReceiverDisconnectedException
    description: "Thrown if there is currently a receiver connected to the \npartition as specified by <span class=\"paramref\">partitionId</span>."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.String)
  id: CreateReceiver(System.String,System.String)
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: CreateReceiver(String, String)
  nameWithType: EventHubConsumerGroup.CreateReceiver(String, String)
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CreateReceiver
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 518
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Creates a new Event Hubs receiver in the specified partition, at the specified starting offset. You \ncan use the created receiver to receive events for one Event Hubs partition, specified by <span class=\"paramref\">partitionId</span>."
  example: []
  syntax:
    content: public EventHubReceiver CreateReceiver(string partitionId, string startingOffset)
    content.vb: Public Function CreateReceiver(partitionId As String, startingOffset As String) As EventHubReceiver
    parameters:
    - id: partitionId
      type: System.String
      description: The ID of the partition.
    - id: startingOffset
      type: System.String
      description: The starting offset at which to start receiving messages.
    return:
      type: Microsoft.ServiceBus.Messaging.EventHubReceiver
      description: Returns the <xref href="Microsoft.ServiceBus.Messaging.EventHubReceiver" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Thrown if <span class=\"paramref\">partitionId</span> is not within the expected range, as determined by the \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubDescription.PartitionCount\" data-throw-if-not-resolved=\"false\"></xref> property."
  - type: System.ServiceModel.QuotaExceededException
    commentId: T:System.ServiceModel.QuotaExceededException
    description: "Thrown if the number of receivers currently connected to the partition specified \nby <span class=\"paramref\">partitionId</span> has exceeded the maximum allowed quota set by the service."
  - type: Microsoft.ServiceBus.Messaging.ReceiverDisconnectedException
    commentId: T:Microsoft.ServiceBus.Messaging.ReceiverDisconnectedException
    description: "Thrown if there is currently a receiver connected to the \npartition as specified by <span class=\"paramref\">partitionId</span>, with an <span class=\"paramref\">startingOffset</span> specified."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.String,System.Boolean)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.String,System.Boolean)
  id: CreateReceiver(System.String,System.String,System.Boolean)
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: CreateReceiver(String, String, Boolean)
  nameWithType: EventHubConsumerGroup.CreateReceiver(String, String, Boolean)
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CreateReceiver
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 550
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Creates a new Event Hubs receiver in the specified partition, at the specified starting offset. You \ncan use the created receiver to receive events for one Event Hubs partition, specified by <span class=\"paramref\">partitionId</span>."
  example: []
  syntax:
    content: public EventHubReceiver CreateReceiver(string partitionId, string startingOffset, bool offsetInclusive)
    content.vb: Public Function CreateReceiver(partitionId As String, startingOffset As String, offsetInclusive As Boolean) As EventHubReceiver
    parameters:
    - id: partitionId
      type: System.String
      description: The ID of the partition.
    - id: startingOffset
      type: System.String
      description: The starting offset at which to start receiving messages.
    - id: offsetInclusive
      type: System.Boolean
      description: "A Boolean value that indicates whether <span class=\"paramref\">startingOffset</span> is treated as an inclusive offset, meaning that the first \nevent returned is the event that contains the starting offset. Normally, the first event returned is the event after the starting offset."
    return:
      type: Microsoft.ServiceBus.Messaging.EventHubReceiver
      description: Returns <xref href="Microsoft.ServiceBus.Messaging.EventHubReceiver" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.String,System.Int64)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.String,System.Int64)
  id: CreateReceiver(System.String,System.String,System.Int64)
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: CreateReceiver(String, String, Int64)
  nameWithType: EventHubConsumerGroup.CreateReceiver(String, String, Int64)
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String, System.String, System.Int64)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CreateReceiver
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 567
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Creates a new Event Hubs receiver in the specified partition, at the specified starting offset.
  example: []
  syntax:
    content: public EventHubReceiver CreateReceiver(string partitionId, string startingOffset, long epoch)
    content.vb: Public Function CreateReceiver(partitionId As String, startingOffset As String, epoch As Long) As EventHubReceiver
    parameters:
    - id: partitionId
      type: System.String
      description: The ID of the partition.
    - id: startingOffset
      type: System.String
      description: "The starting offset at which to start receiving messages. To specify the start of the stream, see \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.StartOfStream\" data-throw-if-not-resolved=\"false\"></xref>."
    - id: epoch
      type: System.Int64
      description: The epoch value. The service uses this value to enforce partition/lease ownership.
    return:
      type: Microsoft.ServiceBus.Messaging.EventHubReceiver
      description: Returns the <xref href="Microsoft.ServiceBus.Messaging.EventHubReceiver" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver*
  exceptions:
  - type: Microsoft.ServiceBus.Messaging.MessagingException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingException
    description: Thrown if the service encounters a transient error.
  - type: Microsoft.ServiceBus.Messaging.MessagingCommunicationException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingCommunicationException
    description: "Thrown if the client \nhas a problem connecting to the service."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Thrown if <span class=\"paramref\">partitionId</span> is not within the expected range, as determined by the \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubDescription.PartitionCount\" data-throw-if-not-resolved=\"false\"></xref> property."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.String,System.Boolean,System.Int64)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.String,System.Boolean,System.Int64)
  id: CreateReceiver(System.String,System.String,System.Boolean,System.Int64)
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: CreateReceiver(String, String, Boolean, Int64)
  nameWithType: EventHubConsumerGroup.CreateReceiver(String, String, Boolean, Int64)
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String, System.String, System.Boolean, System.Int64)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CreateReceiver
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 580
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Creates a new Event Hubs receiver in the specified partition, at the specified starting offset. You \ncan use the created receiver to receive events for one Event Hubs partition, specified by <span class=\"paramref\">partitionId</span>."
  example: []
  syntax:
    content: public EventHubReceiver CreateReceiver(string partitionId, string startingOffset, bool offsetInclusive, long epoch)
    content.vb: Public Function CreateReceiver(partitionId As String, startingOffset As String, offsetInclusive As Boolean, epoch As Long) As EventHubReceiver
    parameters:
    - id: partitionId
      type: System.String
      description: The ID of the partition.
    - id: startingOffset
      type: System.String
      description: The starting offset at which to start receiving messages.
    - id: offsetInclusive
      type: System.Boolean
      description: "A Boolean value that indicates whether <span class=\"paramref\">startingOffset</span> is treated as an inclusive offset, meaning that the first \nevent returned is the event that contains the starting offset. Normally, the first event returned is the event after the starting offset."
    - id: epoch
      type: System.Int64
      description: The epoch value. The service uses this value to enforce partition/lease ownership.
    return:
      type: Microsoft.ServiceBus.Messaging.EventHubReceiver
      description: Returns <xref href="Microsoft.ServiceBus.Messaging.EventHubReceiver" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.DateTime)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.DateTime)
  id: CreateReceiver(System.String,System.DateTime)
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: CreateReceiver(String, DateTime)
  nameWithType: EventHubConsumerGroup.CreateReceiver(String, DateTime)
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String, System.DateTime)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CreateReceiver
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 605
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Creates a new Event Hubs receiver in the specified partition, starting at the specified date and time. \nYou can use the created receiver to receive events for one Event Hubs partition, specified by <span class=\"paramref\">partitionId</span>."
  remarks: "Service only uses this <span class=\"paramref\">startingDateTimeUtc</span> as an approximation when \ndetermining next event to deliver.\n\nKeep in mind that there can be clock skew between client time and service time, so user application \nshould be designed to handle duplication in event delivery."
  example: []
  syntax:
    content: public EventHubReceiver CreateReceiver(string partitionId, DateTime startingDateTimeUtc)
    content.vb: Public Function CreateReceiver(partitionId As String, startingDateTimeUtc As Date) As EventHubReceiver
    parameters:
    - id: partitionId
      type: System.String
      description: The ID of the partition.
    - id: startingDateTimeUtc
      type: System.DateTime
      description: The starting UTC time for receiving messages.
    return:
      type: Microsoft.ServiceBus.Messaging.EventHubReceiver
      description: Returns the <xref href="Microsoft.ServiceBus.Messaging.EventHubReceiver" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver*
  exceptions:
  - type: Microsoft.ServiceBus.Messaging.MessagingException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingException
    description: Thrown if the service encounters a transient error.
  - type: Microsoft.ServiceBus.Messaging.MessagingCommunicationException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingCommunicationException
    description: "Thrown if the client \nhas a problem connecting to the service."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Thrown if <span class=\"paramref\">partitionId</span> is not within the expected range, as determined by the \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubDescription.PartitionCount\" data-throw-if-not-resolved=\"false\"></xref> property."
  - type: System.ServiceModel.QuotaExceededException
    commentId: T:System.ServiceModel.QuotaExceededException
    description: "Thrown if the number of receivers currently connected to the partition specified \nby <span class=\"paramref\">partitionId</span> has exceeded the maximum allowed quota set by the service."
  - type: Microsoft.ServiceBus.Messaging.ReceiverDisconnectedException
    commentId: T:Microsoft.ServiceBus.Messaging.ReceiverDisconnectedException
    description: "Thrown if there is currently a receiver connected to the \npartition as specified by <span class=\"paramref\">partitionId</span>, with an <span class=\"paramref\">startingDateTimeUtc</span> specified."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.DateTime,System.Int64)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.DateTime,System.Int64)
  id: CreateReceiver(System.String,System.DateTime,System.Int64)
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: CreateReceiver(String, DateTime, Int64)
  nameWithType: EventHubConsumerGroup.CreateReceiver(String, DateTime, Int64)
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String, System.DateTime, System.Int64)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CreateReceiver
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 627
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Creates a new Event Hubs receiver in the specified partition, starting at the specified date and time. \nYou can use the created receiver to receive events for one Event Hubs partition, specified by <span class=\"paramref\">partitionId</span>."
  remarks: "Service only uses this <span class=\"paramref\">startingDateTimeUtc</span> as an approximation when \ndetermining next event to deliver.\n\nKeep in mind that there can be clock skew between client time and service time, so user application \nshould be designed to handle duplication in event delivery."
  example: []
  syntax:
    content: public EventHubReceiver CreateReceiver(string partitionId, DateTime startingDateTimeUtc, long epoch)
    content.vb: Public Function CreateReceiver(partitionId As String, startingDateTimeUtc As Date, epoch As Long) As EventHubReceiver
    parameters:
    - id: partitionId
      type: System.String
      description: The ID of the partition.
    - id: startingDateTimeUtc
      type: System.DateTime
      description: The starting UTC time for receiving messages.
    - id: epoch
      type: System.Int64
      description: The epoch value. The service uses this value to enforce partition/lease ownership.
    return:
      type: Microsoft.ServiceBus.Messaging.EventHubReceiver
      description: Returns the <xref href="Microsoft.ServiceBus.Messaging.EventHubReceiver" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver*
  exceptions:
  - type: Microsoft.ServiceBus.Messaging.MessagingException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingException
    description: Thrown if the service encounters a transient error.
  - type: Microsoft.ServiceBus.Messaging.MessagingCommunicationException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingCommunicationException
    description: "Thrown if the client \nhas a problem connecting to the service."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Thrown if <span class=\"paramref\">partitionId</span> is not within the expected range, as determined by the \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubDescription.PartitionCount\" data-throw-if-not-resolved=\"false\"></xref> property."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync(System.String,System.Int64)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync(System.String,System.Int64)
  id: CreateReceiverAsync(System.String,System.Int64)
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: CreateReceiverAsync(String, Int64)
  nameWithType: EventHubConsumerGroup.CreateReceiverAsync(String, Int64)
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync(System.String, System.Int64)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CreateReceiverAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 642
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Asynchronous version of \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String%2cSystem.Int64)\" data-throw-if-not-resolved=\"false\"></xref>."
  remarks: "If the <xref href=\"Microsoft.ServiceBus.Messaging.EventHubConsumerGroup\" data-throw-if-not-resolved=\"false\"></xref> has checkpoint enabled, then the\nreceiver will get next message from the checkpoint offset. If checkpoint is disabled, \nthen receiver will get message from the start of the event stream, as determined by the \nmessage retention policy of the Event Hub."
  example: []
  syntax:
    content: public Task<EventHubReceiver> CreateReceiverAsync(string partitionId, long epoch)
    content.vb: Public Function CreateReceiverAsync(partitionId As String, epoch As Long) As Task(Of EventHubReceiver)
    parameters:
    - id: partitionId
      type: System.String
      description: The ID of the partition.
    - id: epoch
      type: System.Int64
      description: The epoch value. The service uses this value to enforce partition/lease ownership.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.EventHubReceiver}
      description: Returns <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync(System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync(System.String)
  id: CreateReceiverAsync(System.String)
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: CreateReceiverAsync(String)
  nameWithType: EventHubConsumerGroup.CreateReceiverAsync(String)
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CreateReceiverAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 659
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronous version of <xref href="Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String)" data-throw-if-not-resolved="false"></xref>.
  remarks: "If the <xref href=\"Microsoft.ServiceBus.Messaging.EventHubConsumerGroup\" data-throw-if-not-resolved=\"false\"></xref> has checkpoint enabled, \nthis overload will always throw InvalidOperationException because checkpoint\nenabled ConsumerGroup requires epoch to work (please use the overload that \nsupply epoch as input argument). If checkpoint is disabled, \nthen receiver will get message from the start of the event stream, as determined by the \nmessage retention policy of the Event Hub."
  example: []
  syntax:
    content: public Task<EventHubReceiver> CreateReceiverAsync(string partitionId)
    content.vb: Public Function CreateReceiverAsync(partitionId As String) As Task(Of EventHubReceiver)
    parameters:
    - id: partitionId
      type: System.String
      description: The ID of the partition.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.EventHubReceiver}
      description: Returns <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync(System.String,System.String)
  id: CreateReceiverAsync(System.String,System.String)
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: CreateReceiverAsync(String, String)
  nameWithType: EventHubConsumerGroup.CreateReceiverAsync(String, String)
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CreateReceiverAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 672
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Asynchronous version of \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref>."
  example: []
  syntax:
    content: public Task<EventHubReceiver> CreateReceiverAsync(string partitionId, string startingOffset)
    content.vb: Public Function CreateReceiverAsync(partitionId As String, startingOffset As String) As Task(Of EventHubReceiver)
    parameters:
    - id: partitionId
      type: System.String
      description: The ID of the partition.
    - id: startingOffset
      type: System.String
      description: The starting offset at which to start receiving messages.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.EventHubReceiver}
      description: Returns <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync(System.String,System.String,System.Boolean)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync(System.String,System.String,System.Boolean)
  id: CreateReceiverAsync(System.String,System.String,System.Boolean)
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: CreateReceiverAsync(String, String, Boolean)
  nameWithType: EventHubConsumerGroup.CreateReceiverAsync(String, String, Boolean)
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync(System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CreateReceiverAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 704
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Asynchronous version of \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String%2cSystem.String%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>."
  example: []
  syntax:
    content: public Task<EventHubReceiver> CreateReceiverAsync(string partitionId, string startingOffset, bool offsetInclusive)
    content.vb: Public Function CreateReceiverAsync(partitionId As String, startingOffset As String, offsetInclusive As Boolean) As Task(Of EventHubReceiver)
    parameters:
    - id: partitionId
      type: System.String
      description: The ID of the partition.
    - id: startingOffset
      type: System.String
      description: The starting offset at which to start receiving messages.
    - id: offsetInclusive
      type: System.Boolean
      description: "A Boolean value that indicates whether <span class=\"paramref\">startingOffset</span> is treated as an inclusive offset, meaning that the first \nevent returned is the event that contains the starting offset. Normally, the first event returned is the event after the starting offset."
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.EventHubReceiver}
      description: Returns <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync(System.String,System.DateTime)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync(System.String,System.DateTime)
  id: CreateReceiverAsync(System.String,System.DateTime)
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: CreateReceiverAsync(String, DateTime)
  nameWithType: EventHubConsumerGroup.CreateReceiverAsync(String, DateTime)
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync(System.String, System.DateTime)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CreateReceiverAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 722
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Asynchronous version of \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String%2cSystem.DateTime)\" data-throw-if-not-resolved=\"false\"></xref>."
  remarks: "Service only use this <span class=\"paramref\">startingDateTimeUtc</span> as an approximation when \ndetermining next event to deliver.\n\nKeep in mind that there can be clock skew between client time and service time, so user application \nshould be designed to handle duplication in event delivery."
  example: []
  syntax:
    content: public Task<EventHubReceiver> CreateReceiverAsync(string partitionId, DateTime startingDateTimeUtc)
    content.vb: Public Function CreateReceiverAsync(partitionId As String, startingDateTimeUtc As Date) As Task(Of EventHubReceiver)
    parameters:
    - id: partitionId
      type: System.String
      description: The ID of the partition.
    - id: startingDateTimeUtc
      type: System.DateTime
      description: The starting UTC time for receiving messages.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.EventHubReceiver}
      description: Returns <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync(System.String,System.String,System.Int64)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync(System.String,System.String,System.Int64)
  id: CreateReceiverAsync(System.String,System.String,System.Int64)
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: CreateReceiverAsync(String, String, Int64)
  nameWithType: EventHubConsumerGroup.CreateReceiverAsync(String, String, Int64)
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync(System.String, System.String, System.Int64)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CreateReceiverAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 737
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Asynchronous version of \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String%2cSystem.String%2cSystem.Int64)\" data-throw-if-not-resolved=\"false\"></xref>."
  example: []
  syntax:
    content: public Task<EventHubReceiver> CreateReceiverAsync(string partitionId, string startingOffset, long epoch)
    content.vb: Public Function CreateReceiverAsync(partitionId As String, startingOffset As String, epoch As Long) As Task(Of EventHubReceiver)
    parameters:
    - id: partitionId
      type: System.String
      description: The ID of the partition.
    - id: startingOffset
      type: System.String
      description: "The starting offset at which to start receiving messages. To specify the start of the stream, see \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.StartOfStream\" data-throw-if-not-resolved=\"false\"></xref>."
    - id: epoch
      type: System.Int64
      description: The epoch value. The service uses this value to enforce partition/lease ownership.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.EventHubReceiver}
      description: Returns <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync(System.String,System.String,System.Boolean,System.Int64)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync(System.String,System.String,System.Boolean,System.Int64)
  id: CreateReceiverAsync(System.String,System.String,System.Boolean,System.Int64)
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: CreateReceiverAsync(String, String, Boolean, Int64)
  nameWithType: EventHubConsumerGroup.CreateReceiverAsync(String, String, Boolean, Int64)
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync(System.String, System.String, System.Boolean, System.Int64)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CreateReceiverAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 750
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Asynchronous version of \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String%2cSystem.String%2cSystem.Boolean%2cSystem.Int64)\" data-throw-if-not-resolved=\"false\"></xref>."
  example: []
  syntax:
    content: public Task<EventHubReceiver> CreateReceiverAsync(string partitionId, string startingOffset, bool offsetInclusive, long epoch)
    content.vb: Public Function CreateReceiverAsync(partitionId As String, startingOffset As String, offsetInclusive As Boolean, epoch As Long) As Task(Of EventHubReceiver)
    parameters:
    - id: partitionId
      type: System.String
      description: The ID of the partition.
    - id: startingOffset
      type: System.String
      description: The starting offset at which to start receiving messages.
    - id: offsetInclusive
      type: System.Boolean
      description: "A Boolean value that indicates whether <span class=\"paramref\">startingOffset</span> is treated as an inclusive offset, meaning that the first \nevent returned is the event that contains the starting offset. Normally, the first event returned is the event after the starting offset."
    - id: epoch
      type: System.Int64
      description: The epoch value. The service uses this value to enforce partition/lease ownership.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.EventHubReceiver}
      description: Returns <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync(System.String,System.DateTime,System.Int64)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync(System.String,System.DateTime,System.Int64)
  id: CreateReceiverAsync(System.String,System.DateTime,System.Int64)
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: CreateReceiverAsync(String, DateTime, Int64)
  nameWithType: EventHubConsumerGroup.CreateReceiverAsync(String, DateTime, Int64)
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync(System.String, System.DateTime, System.Int64)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CreateReceiverAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 769
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Asynchronous version of \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String%2cSystem.DateTime%2cSystem.Int64)\" data-throw-if-not-resolved=\"false\"></xref>."
  remarks: "Service only uses this <span class=\"paramref\">startingDateTimeUtc</span> as an approximation when \ndetermining next event to deliver.\n\nKeep in mind that there can be clock skew between client time and service time, so user application \nshould be designed to handle duplication in event delivery."
  example: []
  syntax:
    content: public Task<EventHubReceiver> CreateReceiverAsync(string partitionId, DateTime startingDateTimeUtc, long epoch)
    content.vb: Public Function CreateReceiverAsync(partitionId As String, startingDateTimeUtc As Date, epoch As Long) As Task(Of EventHubReceiver)
    parameters:
    - id: partitionId
      type: System.String
      description: The ID of the partition.
    - id: startingDateTimeUtc
      type: System.DateTime
      description: The starting UTC time for receiving messages.
    - id: epoch
      type: System.Int64
      description: The epoch value. The service uses this value to enforce partition/lease ownership.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.EventHubReceiver}
      description: Returns <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnAbort
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnAbort
  id: OnAbort
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: OnAbort()
  nameWithType: EventHubConsumerGroup.OnAbort()
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnAbort()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnAbort
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 777
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  syntax:
    content: protected override void OnAbort()
    content.vb: Protected Overrides Sub OnAbort
  overridden: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
  overload: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnAbort*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnClose(System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnClose(System.TimeSpan)
  id: OnClose(System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: OnClose(TimeSpan)
  nameWithType: EventHubConsumerGroup.OnClose(TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnClose(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnClose
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 783
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  syntax:
    content: protected override void OnClose(TimeSpan timeout)
    content.vb: Protected Overrides Sub OnClose(timeout As TimeSpan)
    parameters:
    - id: timeout
      type: System.TimeSpan
  overridden: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose(System.TimeSpan)
  overload: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnClose*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  id: OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: OnBeginClose(TimeSpan, AsyncCallback, Object)
  nameWithType: EventHubConsumerGroup.OnBeginClose(TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnBeginClose(System.TimeSpan, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnBeginClose
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 789
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  syntax:
    content: protected override IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state)
    content.vb: Protected Overrides Function OnBeginClose(timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: timeout
      type: System.TimeSpan
    - id: callback
      type: System.AsyncCallback
    - id: state
      type: System.Object
    return:
      type: System.IAsyncResult
  overridden: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  overload: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnBeginClose*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnEndClose(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnEndClose(System.IAsyncResult)
  id: OnEndClose(System.IAsyncResult)
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: OnEndClose(IAsyncResult)
  nameWithType: EventHubConsumerGroup.OnEndClose(IAsyncResult)
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnEndClose(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnEndClose
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 795
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  syntax:
    content: protected override void OnEndClose(IAsyncResult result)
    content.vb: Protected Overrides Sub OnEndClose(result As IAsyncResult)
    parameters:
    - id: result
      type: System.IAsyncResult
  overridden: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose(System.IAsyncResult)
  overload: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnEndClose*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
  id: OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: OnBeginOpen(TimeSpan, AsyncCallback, Object)
  nameWithType: EventHubConsumerGroup.OnBeginOpen(TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnBeginOpen(System.TimeSpan, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnBeginOpen
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 800
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  syntax:
    content: protected override IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
    content.vb: Protected Overrides Function OnBeginOpen(timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: timeout
      type: System.TimeSpan
    - id: callback
      type: System.AsyncCallback
    - id: state
      type: System.Object
    return:
      type: System.IAsyncResult
  overridden: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
  overload: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnBeginOpen*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnEndOpen(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnEndOpen(System.IAsyncResult)
  id: OnEndOpen(System.IAsyncResult)
  parent: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  langs:
  - csharp
  - vb
  name: OnEndOpen(IAsyncResult)
  nameWithType: EventHubConsumerGroup.OnEndOpen(IAsyncResult)
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnEndOpen(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnEndOpen
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubConsumerGroup.cs
    startLine: 805
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  syntax:
    content: protected override void OnEndOpen(IAsyncResult result)
    content.vb: Protected Overrides Sub OnEndOpen(result As IAsyncResult)
    parameters:
    - id: result
      type: System.IAsyncResult
  overridden: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen(System.IAsyncResult)
  overload: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnEndOpen*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: Microsoft.ServiceBus.Messaging
  commentId: N:Microsoft.ServiceBus.Messaging
  isExternal: false
  name: Microsoft.ServiceBus.Messaging
  nameWithType: Microsoft.ServiceBus.Messaging
  fullName: Microsoft.ServiceBus.Messaging
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.ServiceBus.Messaging.ClientEntity
  commentId: T:Microsoft.ServiceBus.Messaging.ClientEntity
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: ClientEntity
  nameWithType: ClientEntity
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.RetryPolicy
  commentId: P:Microsoft.ServiceBus.Messaging.ClientEntity.RetryPolicy
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: RetryPolicy
  nameWithType: ClientEntity.RetryPolicy
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.RetryPolicy
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.IsClosed
  commentId: P:Microsoft.ServiceBus.Messaging.ClientEntity.IsClosed
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: IsClosed
  nameWithType: ClientEntity.IsClosed
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.IsClosed
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThisLock
  commentId: P:Microsoft.ServiceBus.Messaging.ClientEntity.ThisLock
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: ThisLock
  nameWithType: ClientEntity.ThisLock
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThisLock
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.Abort
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.Abort
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: Abort()
  nameWithType: ClientEntity.Abort()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Abort()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.Abort
    name: Abort
    nameWithType: ClientEntity.Abort
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Abort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.Abort
    name: Abort
    nameWithType: ClientEntity.Abort
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Abort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.Close
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.Close
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: Close()
  nameWithType: ClientEntity.Close()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Close()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.Close
    name: Close
    nameWithType: ClientEntity.Close
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Close
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.Close
    name: Close
    nameWithType: ClientEntity.Close
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Close
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: CloseAsync()
  nameWithType: ClientEntity.CloseAsync()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
    name: CloseAsync
    nameWithType: ClientEntity.CloseAsync
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
    name: CloseAsync
    nameWithType: ClientEntity.CloseAsync
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.Fault
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.Fault
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: Fault()
  nameWithType: ClientEntity.Fault()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Fault()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.Fault
    name: Fault
    nameWithType: ClientEntity.Fault
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Fault
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.Fault
    name: Fault
    nameWithType: ClientEntity.Fault
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Fault
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen(System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen(System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: true
  name: OnOpen(TimeSpan)
  nameWithType: ClientEntity.OnOpen(TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen(System.TimeSpan)
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen(System.TimeSpan)
    name: OnOpen
    nameWithType: ClientEntity.OnOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen(System.TimeSpan)
    name: OnOpen
    nameWithType: ClientEntity.OnOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: ThrowIfClosed()
  nameWithType: ClientEntity.ThrowIfClosed()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
    name: ThrowIfClosed
    nameWithType: ClientEntity.ThrowIfClosed
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
    name: ThrowIfClosed
    nameWithType: ClientEntity.ThrowIfClosed
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: ThrowIfDisposed()
  nameWithType: ClientEntity.ThrowIfDisposed()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
    name: ThrowIfDisposed
    nameWithType: ClientEntity.ThrowIfDisposed
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
    name: ThrowIfDisposed
    nameWithType: ClientEntity.ThrowIfDisposed
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: ThrowIfDisposedOrNotOpen()
  nameWithType: ClientEntity.ThrowIfDisposedOrNotOpen()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
    name: ThrowIfDisposedOrNotOpen
    nameWithType: ClientEntity.ThrowIfDisposedOrNotOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
    name: ThrowIfDisposedOrNotOpen
    nameWithType: ClientEntity.ThrowIfDisposedOrNotOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: ThrowIfFaulted()
  nameWithType: ClientEntity.ThrowIfFaulted()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
    name: ThrowIfFaulted
    nameWithType: ClientEntity.ThrowIfFaulted
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
    name: ThrowIfFaulted
    nameWithType: ClientEntity.ThrowIfFaulted
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: ThrowIfDisposedOrImmutable()
  nameWithType: ClientEntity.ThrowIfDisposedOrImmutable()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
    name: ThrowIfDisposedOrImmutable
    nameWithType: ClientEntity.ThrowIfDisposedOrImmutable
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
    name: ThrowIfDisposedOrImmutable
    nameWithType: ClientEntity.ThrowIfDisposedOrImmutable
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: OnOpened()
  nameWithType: ClientEntity.OnOpened()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
    name: OnOpened
    nameWithType: ClientEntity.OnOpened
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
    name: OnOpened
    nameWithType: ClientEntity.OnOpened
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: OnClosed()
  nameWithType: ClientEntity.OnClosed()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
    name: OnClosed
    nameWithType: ClientEntity.OnClosed
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
    name: OnClosed
    nameWithType: ClientEntity.OnClosed
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: OnFaulted()
  nameWithType: ClientEntity.OnFaulted()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
    name: OnFaulted
    nameWithType: ClientEntity.OnFaulted
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
    name: OnFaulted
    nameWithType: ClientEntity.OnFaulted
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.GetDefaultConsumerGroup
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubClient.GetDefaultConsumerGroup
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.String)
- uid: System.EventHandler{Microsoft.ServiceBus.Messaging.EventProcessorFaultedEventArgs}
  commentId: T:System.EventHandler{Microsoft.ServiceBus.Messaging.EventProcessorFaultedEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<EventProcessorFaultedEventArgs>
  nameWithType: EventHandler<EventProcessorFaultedEventArgs>
  fullName: System.EventHandler<Microsoft.ServiceBus.Messaging.EventProcessorFaultedEventArgs>
  nameWithType.vb: EventHandler(Of EventProcessorFaultedEventArgs)
  fullname.vb: System.EventHandler(Of Microsoft.ServiceBus.Messaging.EventProcessorFaultedEventArgs)
  name.vb: EventHandler(Of EventProcessorFaultedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.EventProcessorFaultedEventArgs
    name: EventProcessorFaultedEventArgs
    nameWithType: EventProcessorFaultedEventArgs
    fullName: Microsoft.ServiceBus.Messaging.EventProcessorFaultedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.EventProcessorFaultedEventArgs
    name: EventProcessorFaultedEventArgs
    nameWithType: EventProcessorFaultedEventArgs
    fullName: Microsoft.ServiceBus.Messaging.EventProcessorFaultedEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullname.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.EventHubClient
  commentId: T:Microsoft.ServiceBus.Messaging.EventHubClient
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: EventHubClient
  nameWithType: EventHubClient
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver
  commentId: T:Microsoft.ServiceBus.Messaging.EventHubReceiver
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: EventHubReceiver
  nameWithType: EventHubReceiver
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.PrefetchSizeInBytes
  commentId: P:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.PrefetchSizeInBytes
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.PrefetchCount*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.PrefetchCount
  isExternal: false
  name: PrefetchCount
  nameWithType: EventHubConsumerGroup.PrefetchCount
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.PrefetchCount
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.ServiceBus.Messaging.EventData.SerializedSizeInBytes
  commentId: P:Microsoft.ServiceBus.Messaging.EventData.SerializedSizeInBytes
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.PrefetchCount
  commentId: P:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.PrefetchCount
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.PrefetchSizeInBytes*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.PrefetchSizeInBytes
  isExternal: false
  name: PrefetchSizeInBytes
  nameWithType: EventHubConsumerGroup.PrefetchSizeInBytes
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.PrefetchSizeInBytes
- uid: System.Nullable{System.Int64}
  commentId: T:System.Nullable{System.Int64}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  nameWithType.vb: Nullable(Of Int64)
  fullname.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.EventHubPath*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.EventHubPath
  isExternal: false
  name: EventHubPath
  nameWithType: EventHubConsumerGroup.EventHubPath
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.EventHubPath
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.GroupName*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.GroupName
  isExternal: false
  name: GroupName
  nameWithType: EventHubConsumerGroup.GroupName
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.GroupName
- uid: Microsoft.ServiceBus.Messaging.IEventProcessor
  commentId: T:Microsoft.ServiceBus.Messaging.IEventProcessor
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: IEventProcessor
  nameWithType: IEventProcessor
  fullName: Microsoft.ServiceBus.Messaging.IEventProcessor
- uid: Microsoft.ServiceBus.Messaging.Lease.PartitionId
  commentId: P:Microsoft.ServiceBus.Messaging.Lease.PartitionId
- uid: Microsoft.ServiceBus.Messaging.Lease.Offset
  commentId: P:Microsoft.ServiceBus.Messaging.Lease.Offset
- uid: Microsoft.ServiceBus.Messaging.ICheckpointManager
  commentId: T:Microsoft.ServiceBus.Messaging.ICheckpointManager
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: ICheckpointManager
  nameWithType: ICheckpointManager
  fullName: Microsoft.ServiceBus.Messaging.ICheckpointManager
- uid: Microsoft.ServiceBus.Messaging.PartitionContext.CheckpointAsync(Microsoft.ServiceBus.Messaging.EventData)
  commentId: M:Microsoft.ServiceBus.Messaging.PartitionContext.CheckpointAsync(Microsoft.ServiceBus.Messaging.EventData)
- uid: Microsoft.ServiceBus.Messaging.IEventProcessorFactory
  commentId: T:Microsoft.ServiceBus.Messaging.IEventProcessorFactory
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: IEventProcessorFactory
  nameWithType: IEventProcessorFactory
  fullName: Microsoft.ServiceBus.Messaging.IEventProcessorFactory
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessor*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessor
  isExternal: false
  name: RegisterProcessor<T>
  nameWithType: EventHubConsumerGroup.RegisterProcessor<T>
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessor<T>
  nameWithType.vb: EventHubConsumerGroup.RegisterProcessor(Of T)
  fullname.vb: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessor(Of T)
  name.vb: RegisterProcessor(Of T)
- uid: Microsoft.ServiceBus.Messaging.Lease
  commentId: T:Microsoft.ServiceBus.Messaging.Lease
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: Lease
  nameWithType: Lease
  fullName: Microsoft.ServiceBus.Messaging.Lease
- uid: Microsoft.ServiceBus.Messaging.EventProcessorOptions
  commentId: T:Microsoft.ServiceBus.Messaging.EventProcessorOptions
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: EventProcessorOptions
  nameWithType: EventProcessorOptions
  fullName: Microsoft.ServiceBus.Messaging.EventProcessorOptions
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessor``1(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessor``1(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager)
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorAsync
  isExternal: false
  name: RegisterProcessorAsync<T>
  nameWithType: EventHubConsumerGroup.RegisterProcessorAsync<T>
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorAsync<T>
  nameWithType.vb: EventHubConsumerGroup.RegisterProcessorAsync(Of T)
  fullname.vb: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorAsync(Of T)
  name.vb: RegisterProcessorAsync(Of T)
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessor``1(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager,Microsoft.ServiceBus.Messaging.EventProcessorOptions)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessor``1(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager,Microsoft.ServiceBus.Messaging.EventProcessorOptions)
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorFactory*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorFactory
  isExternal: false
  name: RegisterProcessorFactory
  nameWithType: EventHubConsumerGroup.RegisterProcessorFactory
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorFactory
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorFactory(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager,Microsoft.ServiceBus.Messaging.IEventProcessorFactory)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorFactory(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager,Microsoft.ServiceBus.Messaging.IEventProcessorFactory)
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorFactoryAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorFactoryAsync
  isExternal: false
  name: RegisterProcessorFactoryAsync
  nameWithType: EventHubConsumerGroup.RegisterProcessorFactoryAsync
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorFactoryAsync
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorFactory(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager,Microsoft.ServiceBus.Messaging.IEventProcessorFactory,Microsoft.ServiceBus.Messaging.EventProcessorOptions)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.RegisterProcessorFactory(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.ICheckpointManager,Microsoft.ServiceBus.Messaging.IEventProcessorFactory,Microsoft.ServiceBus.Messaging.EventProcessorOptions)
- uid: Microsoft.ServiceBus.Messaging.IEventProcessor.CloseAsync(Microsoft.ServiceBus.Messaging.PartitionContext,Microsoft.ServiceBus.Messaging.CloseReason)
  commentId: M:Microsoft.ServiceBus.Messaging.IEventProcessor.CloseAsync(Microsoft.ServiceBus.Messaging.PartitionContext,Microsoft.ServiceBus.Messaging.CloseReason)
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.UnregisterProcessor(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.CloseReason)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.UnregisterProcessor(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.CloseReason)
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.UnregisterProcessor*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.UnregisterProcessor
  isExternal: false
  name: UnregisterProcessor
  nameWithType: EventHubConsumerGroup.UnregisterProcessor
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.UnregisterProcessor
- uid: Microsoft.ServiceBus.Messaging.CloseReason
  commentId: T:Microsoft.ServiceBus.Messaging.CloseReason
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: CloseReason
  nameWithType: CloseReason
  fullName: Microsoft.ServiceBus.Messaging.CloseReason
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.UnregisterProcessorAsync(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.CloseReason)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.UnregisterProcessorAsync(Microsoft.ServiceBus.Messaging.Lease,Microsoft.ServiceBus.Messaging.CloseReason)
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.UnregisterProcessorAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.UnregisterProcessorAsync
  isExternal: false
  name: UnregisterProcessorAsync
  nameWithType: EventHubConsumerGroup.UnregisterProcessorAsync
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.UnregisterProcessorAsync
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  commentId: T:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: EventHubConsumerGroup
  nameWithType: EventHubConsumerGroup
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
- uid: Microsoft.ServiceBus.Messaging.EventHubDescription.PartitionCount
  commentId: P:Microsoft.ServiceBus.Messaging.EventHubDescription.PartitionCount
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver
  isExternal: false
  name: CreateReceiver
  nameWithType: EventHubConsumerGroup.CreateReceiver
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver
- uid: Microsoft.ServiceBus.Messaging.MessagingException
  commentId: T:Microsoft.ServiceBus.Messaging.MessagingException
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: MessagingException
  nameWithType: MessagingException
  fullName: Microsoft.ServiceBus.Messaging.MessagingException
- uid: Microsoft.ServiceBus.Messaging.MessagingCommunicationException
  commentId: T:Microsoft.ServiceBus.Messaging.MessagingCommunicationException
  isExternal: false
  name: MessagingCommunicationException
  nameWithType: MessagingCommunicationException
  fullName: Microsoft.ServiceBus.Messaging.MessagingCommunicationException
- uid: System.ServiceModel.QuotaExceededException
  commentId: T:System.ServiceModel.QuotaExceededException
- uid: Microsoft.ServiceBus.Messaging.ReceiverDisconnectedException
  commentId: T:Microsoft.ServiceBus.Messaging.ReceiverDisconnectedException
  isExternal: false
  name: ReceiverDisconnectedException
  nameWithType: ReceiverDisconnectedException
  fullName: Microsoft.ServiceBus.Messaging.ReceiverDisconnectedException
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.StartOfStream
  commentId: F:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.StartOfStream
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.Int64)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.Int64)
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync
  isExternal: false
  name: CreateReceiverAsync
  nameWithType: EventHubConsumerGroup.CreateReceiverAsync
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiverAsync
- uid: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.EventHubReceiver}
  commentId: T:System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.EventHubReceiver}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<EventHubReceiver>
  nameWithType: Task<EventHubReceiver>
  fullName: System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.EventHubReceiver>
  nameWithType.vb: Task(Of EventHubReceiver)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.ServiceBus.Messaging.EventHubReceiver)
  name.vb: Task(Of EventHubReceiver)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.EventHubReceiver
    name: EventHubReceiver
    nameWithType: EventHubReceiver
    fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.EventHubReceiver
    name: EventHubReceiver
    nameWithType: EventHubReceiver
    fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String)
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.String,System.Boolean)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.String,System.Boolean)
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.DateTime)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.DateTime)
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.String,System.Int64)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.String,System.Int64)
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.String,System.Boolean,System.Int64)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.String,System.Boolean,System.Int64)
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.DateTime,System.Int64)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.CreateReceiver(System.String,System.DateTime,System.Int64)
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: OnAbort()
  nameWithType: ClientEntity.OnAbort()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
    name: OnAbort
    nameWithType: ClientEntity.OnAbort
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
    name: OnAbort
    nameWithType: ClientEntity.OnAbort
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnAbort*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnAbort
  isExternal: false
  name: OnAbort
  nameWithType: EventHubConsumerGroup.OnAbort
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnAbort
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose(System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnClose(System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: true
  name: OnClose(TimeSpan)
  nameWithType: ClientEntity.OnClose(TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose(System.TimeSpan)
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose(System.TimeSpan)
    name: OnClose
    nameWithType: ClientEntity.OnClose
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose(System.TimeSpan)
    name: OnClose
    nameWithType: ClientEntity.OnClose
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnClose*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnClose
  isExternal: false
  name: OnClose
  nameWithType: EventHubConsumerGroup.OnClose
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnClose
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: true
  name: OnBeginClose(TimeSpan, AsyncCallback, Object)
  nameWithType: ClientEntity.OnBeginClose(TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose(System.TimeSpan, System.AsyncCallback, System.Object)
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
    name: OnBeginClose
    nameWithType: ClientEntity.OnBeginClose
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
    name: OnBeginClose
    nameWithType: ClientEntity.OnBeginClose
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnBeginClose*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnBeginClose
  isExternal: false
  name: OnBeginClose
  nameWithType: EventHubConsumerGroup.OnBeginClose
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnBeginClose
- uid: System.AsyncCallback
  commentId: T:System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.IAsyncResult
  commentId: T:System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose(System.IAsyncResult)
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: true
  name: OnEndClose(IAsyncResult)
  nameWithType: ClientEntity.OnEndClose(IAsyncResult)
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose(System.IAsyncResult)
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose(System.IAsyncResult)
    name: OnEndClose
    nameWithType: ClientEntity.OnEndClose
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose(System.IAsyncResult)
    name: OnEndClose
    nameWithType: ClientEntity.OnEndClose
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnEndClose*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnEndClose
  isExternal: false
  name: OnEndClose
  nameWithType: EventHubConsumerGroup.OnEndClose
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnEndClose
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: true
  name: OnBeginOpen(TimeSpan, AsyncCallback, Object)
  nameWithType: ClientEntity.OnBeginOpen(TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen(System.TimeSpan, System.AsyncCallback, System.Object)
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
    name: OnBeginOpen
    nameWithType: ClientEntity.OnBeginOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
    name: OnBeginOpen
    nameWithType: ClientEntity.OnBeginOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnBeginOpen*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnBeginOpen
  isExternal: false
  name: OnBeginOpen
  nameWithType: EventHubConsumerGroup.OnBeginOpen
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnBeginOpen
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen(System.IAsyncResult)
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: true
  name: OnEndOpen(IAsyncResult)
  nameWithType: ClientEntity.OnEndOpen(IAsyncResult)
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen(System.IAsyncResult)
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen(System.IAsyncResult)
    name: OnEndOpen
    nameWithType: ClientEntity.OnEndOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen(System.IAsyncResult)
    name: OnEndOpen
    nameWithType: ClientEntity.OnEndOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnEndOpen*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnEndOpen
  isExternal: false
  name: OnEndOpen
  nameWithType: EventHubConsumerGroup.OnEndOpen
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup.OnEndOpen
