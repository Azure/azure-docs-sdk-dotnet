### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceBus.Messaging.EventData
  commentId: T:Microsoft.ServiceBus.Messaging.EventData
  id: EventData
  parent: Microsoft.ServiceBus.Messaging
  children:
  - Microsoft.ServiceBus.Messaging.EventData.#ctor
  - Microsoft.ServiceBus.Messaging.EventData.#ctor(System.Byte[])
  - Microsoft.ServiceBus.Messaging.EventData.#ctor(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  - Microsoft.ServiceBus.Messaging.EventData.#ctor(System.IO.Stream)
  - Microsoft.ServiceBus.Messaging.EventData.#ctor(System.Object,System.Runtime.Serialization.XmlObjectSerializer)
  - Microsoft.ServiceBus.Messaging.EventData.Clone
  - Microsoft.ServiceBus.Messaging.EventData.Dispose
  - Microsoft.ServiceBus.Messaging.EventData.EnqueuedTimeUtc
  - Microsoft.ServiceBus.Messaging.EventData.GetBodyStream
  - Microsoft.ServiceBus.Messaging.EventData.GetBytes
  - Microsoft.ServiceBus.Messaging.EventData.Offset
  - Microsoft.ServiceBus.Messaging.EventData.PartitionKey
  - Microsoft.ServiceBus.Messaging.EventData.Properties
  - Microsoft.ServiceBus.Messaging.EventData.SequenceNumber
  - Microsoft.ServiceBus.Messaging.EventData.SerializedSizeInBytes
  - Microsoft.ServiceBus.Messaging.EventData.SystemProperties
  langs:
  - csharp
  - vb
  name: EventData
  nameWithType: EventData
  fullName: Microsoft.ServiceBus.Messaging.EventData
  type: Class
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventData.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: EventData
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventData.cs
    startLine: 16
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Represents the event sent and received from an Event Hubs stream. It contains the body of the event, a user-defined property bag, and various metadata \ndescribing the event, such as its offset in the partition and its number in the stream sequence. Partitions are filled with a sequence of event data."
  example: []
  syntax:
    content: 'public sealed class EventData : IDisposable, IReadOnlyIndicator'
    content.vb: >-
      Public NotInheritable Class EventData
          Implements IDisposable, IReadOnlyIndicator
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.ServiceBus.Messaging.EventData.#ctor
  commentId: M:Microsoft.ServiceBus.Messaging.EventData.#ctor
  id: '#ctor'
  parent: Microsoft.ServiceBus.Messaging.EventData
  langs:
  - csharp
  - vb
  name: EventData()
  nameWithType: EventData.EventData()
  fullName: Microsoft.ServiceBus.Messaging.EventData.EventData()
  type: Constructor
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventData.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: .ctor
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventData.cs
    startLine: 27
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Initializes a new instance of the <xref href="Microsoft.ServiceBus.Messaging.EventData" data-throw-if-not-resolved="false"></xref> class.
  example: []
  syntax:
    content: public EventData()
    content.vb: Public Sub New
  overload: Microsoft.ServiceBus.Messaging.EventData.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventData.#ctor(System.IO.Stream)
  commentId: M:Microsoft.ServiceBus.Messaging.EventData.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: Microsoft.ServiceBus.Messaging.EventData
  langs:
  - csharp
  - vb
  name: EventData(Stream)
  nameWithType: EventData.EventData(Stream)
  fullName: Microsoft.ServiceBus.Messaging.EventData.EventData(System.IO.Stream)
  type: Constructor
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventData.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: .ctor
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventData.cs
    startLine: 39
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Initializes a new instance of the \n<xref href=\"Microsoft.ServiceBus.Messaging.EventData\" data-throw-if-not-resolved=\"false\"></xref> class that uses the argument stream as the body stream."
  remarks: User is expected to own the disposing of the stream when using this constructor.
  example: []
  syntax:
    content: public EventData(Stream stream)
    content.vb: Public Sub New(stream As Stream)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: A stream which is used as the body stream.
  overload: Microsoft.ServiceBus.Messaging.EventData.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventData.#ctor(System.Byte[])
  commentId: M:Microsoft.ServiceBus.Messaging.EventData.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: Microsoft.ServiceBus.Messaging.EventData
  langs:
  - csharp
  - vb
  name: EventData(Byte[])
  nameWithType: EventData.EventData(Byte[])
  fullName: Microsoft.ServiceBus.Messaging.EventData.EventData(System.Byte[])
  type: Constructor
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventData.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: .ctor
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventData.cs
    startLine: 59
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Initializes a new instance of the \n<xref href=\"Microsoft.ServiceBus.Messaging.EventData\" data-throw-if-not-resolved=\"false\"></xref> class that uses the specified byte array as the body."
  remarks: "You should treat the input byte array as immutable when\nsending EventData. \n\nWhen sending the data as well as any cloning operation, \nService Bus will access the byte array by reference \nrather that by deep copy of the byte array. Also disposing\nthe EventData instance will only de-reference the association\nwith the array. The user is responsible for the lifecycle of the\nbyte-array itself."
  example: []
  syntax:
    content: public EventData(byte[] byteArray)
    content.vb: Public Sub New(byteArray As Byte())
    parameters:
    - id: byteArray
      type: System.Byte[]
      description: The event data byte array which is used to form the body stream.
  overload: Microsoft.ServiceBus.Messaging.EventData.#ctor*
  nameWithType.vb: EventData.EventData(Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.EventData.EventData(System.Byte())
  name.vb: EventData(Byte())
- uid: Microsoft.ServiceBus.Messaging.EventData.#ctor(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  commentId: M:Microsoft.ServiceBus.Messaging.EventData.#ctor(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  id: '#ctor(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})'
  parent: Microsoft.ServiceBus.Messaging.EventData
  langs:
  - csharp
  - vb
  name: EventData(IList<ArraySegment<Byte>>)
  nameWithType: EventData.EventData(IList<ArraySegment<Byte>>)
  fullName: Microsoft.ServiceBus.Messaging.EventData.EventData(System.Collections.Generic.IList<System.ArraySegment<System.Byte>>)
  type: Constructor
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventData.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: .ctor
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventData.cs
    startLine: 87
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Initializes a new instance of the \n<xref href=\"Microsoft.ServiceBus.Messaging.EventData\" data-throw-if-not-resolved=\"false\"></xref> class that uses the specified list of byte array segments as the body."
  remarks: "Typically user will use IList&lt;ArraySegment&lt;byte&gt;&gt;\nwhen using there own buffer pool for scenarios that require efficient usage\nof memory.\n\nWhen sending the data as well as any cloning operation, \nService Bus will access the array segments by reference \nrather that by deep copy of the bytes. \n\nDisposing the EventData instance will only de-reference the association\nwith the list. User is responsible for the life cycle of the\narray segments themselves."
  example: []
  syntax:
    content: public EventData(IList<ArraySegment<byte>> arraySegments)
    content.vb: Public Sub New(arraySegments As IList(Of ArraySegment(Of Byte)))
    parameters:
    - id: arraySegments
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: "An IList of array segments to be \nsent as the body of the <xref href=\"Microsoft.ServiceBus.Messaging.EventData\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  overload: Microsoft.ServiceBus.Messaging.EventData.#ctor*
  nameWithType.vb: EventData.EventData(IList(Of ArraySegment(Of Byte)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.EventData.EventData(System.Collections.Generic.IList(Of System.ArraySegment(Of System.Byte)))
  name.vb: EventData(IList(Of ArraySegment(Of Byte)))
- uid: Microsoft.ServiceBus.Messaging.EventData.#ctor(System.Object,System.Runtime.Serialization.XmlObjectSerializer)
  commentId: M:Microsoft.ServiceBus.Messaging.EventData.#ctor(System.Object,System.Runtime.Serialization.XmlObjectSerializer)
  id: '#ctor(System.Object,System.Runtime.Serialization.XmlObjectSerializer)'
  parent: Microsoft.ServiceBus.Messaging.EventData
  langs:
  - csharp
  - vb
  name: EventData(Object, XmlObjectSerializer)
  nameWithType: EventData.EventData(Object, XmlObjectSerializer)
  fullName: Microsoft.ServiceBus.Messaging.EventData.EventData(System.Object, System.Runtime.Serialization.XmlObjectSerializer)
  type: Constructor
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventData.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: .ctor
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventData.cs
    startLine: 104
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "\nConstructor which takes the input content and serializer to create\nthe body stream.\n"
  remarks: >-
    If content is a stream and seriazlier is null, then it is equate to use

    <xref href="Microsoft.ServiceBus.Messaging.EventData.%23ctor(System.IO.Stream)" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public EventData(object content, XmlObjectSerializer serializer)
    content.vb: Public Sub New(content As Object, serializer As XmlObjectSerializer)
    parameters:
    - id: content
      type: System.Object
      description: .Net object
    - id: serializer
      type: System.Runtime.Serialization.XmlObjectSerializer
      description: the serializer used to serialize <span class="paramref">content</span>
  overload: Microsoft.ServiceBus.Messaging.EventData.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventData.SerializedSizeInBytes
  commentId: P:Microsoft.ServiceBus.Messaging.EventData.SerializedSizeInBytes
  id: SerializedSizeInBytes
  parent: Microsoft.ServiceBus.Messaging.EventData
  langs:
  - csharp
  - vb
  name: SerializedSizeInBytes
  nameWithType: EventData.SerializedSizeInBytes
  fullName: Microsoft.ServiceBus.Messaging.EventData.SerializedSizeInBytes
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventData.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: SerializedSizeInBytes
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventData.cs
    startLine: 161
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: ''
  example: []
  syntax:
    content: public long SerializedSizeInBytes { get; }
    content.vb: Public ReadOnly Property SerializedSizeInBytes As Long
    parameters: []
    return:
      type: System.Int64
  overload: Microsoft.ServiceBus.Messaging.EventData.SerializedSizeInBytes*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.EventData.Offset
  commentId: P:Microsoft.ServiceBus.Messaging.EventData.Offset
  id: Offset
  parent: Microsoft.ServiceBus.Messaging.EventData
  langs:
  - csharp
  - vb
  name: Offset
  nameWithType: EventData.Offset
  fullName: Microsoft.ServiceBus.Messaging.EventData.Offset
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventData.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Offset
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventData.cs
    startLine: 183
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Gets the offset of the data relative to the Event Hub partition stream. The offset is a marker or \nidentifier for an event within the Event Hubs stream. The identifier is unique within a partition of the Event Hubs stream."
  example: []
  syntax:
    content: public string Offset { get; }
    content.vb: Public ReadOnly Property Offset As String
    parameters: []
    return:
      type: System.String
      description: The read offset of the event data.
  overload: Microsoft.ServiceBus.Messaging.EventData.Offset*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.EventData.PartitionKey
  commentId: P:Microsoft.ServiceBus.Messaging.EventData.PartitionKey
  id: PartitionKey
  parent: Microsoft.ServiceBus.Messaging.EventData
  langs:
  - csharp
  - vb
  name: PartitionKey
  nameWithType: EventData.PartitionKey
  fullName: Microsoft.ServiceBus.Messaging.EventData.PartitionKey
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventData.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: PartitionKey
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventData.cs
    startLine: 198
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets or sets the key that is used to determine to which partition to send event data.
  example: []
  syntax:
    content: public string PartitionKey { get; set; }
    content.vb: Public Property PartitionKey As String
    parameters: []
    return:
      type: System.String
      description: A partition key for the partition to which event data should be sent.
  overload: Microsoft.ServiceBus.Messaging.EventData.PartitionKey*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventData.SequenceNumber
  commentId: P:Microsoft.ServiceBus.Messaging.EventData.SequenceNumber
  id: SequenceNumber
  parent: Microsoft.ServiceBus.Messaging.EventData
  langs:
  - csharp
  - vb
  name: SequenceNumber
  nameWithType: EventData.SequenceNumber
  fullName: Microsoft.ServiceBus.Messaging.EventData.SequenceNumber
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventData.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: SequenceNumber
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventData.cs
    startLine: 213
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets the logical sequence number of the event within the partition stream of the Event Hub.
  example: []
  syntax:
    content: public long SequenceNumber { get; }
    content.vb: Public ReadOnly Property SequenceNumber As Long
    parameters: []
    return:
      type: System.Int64
      description: The logical sequence number of the event.
  overload: Microsoft.ServiceBus.Messaging.EventData.SequenceNumber*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.EventData.EnqueuedTimeUtc
  commentId: P:Microsoft.ServiceBus.Messaging.EventData.EnqueuedTimeUtc
  id: EnqueuedTimeUtc
  parent: Microsoft.ServiceBus.Messaging.EventData
  langs:
  - csharp
  - vb
  name: EnqueuedTimeUtc
  nameWithType: EventData.EnqueuedTimeUtc
  fullName: Microsoft.ServiceBus.Messaging.EventData.EnqueuedTimeUtc
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventData.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: EnqueuedTimeUtc
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventData.cs
    startLine: 228
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets or sets the date and time of the sent time in UTC.
  example: []
  syntax:
    content: public DateTime EnqueuedTimeUtc { get; }
    content.vb: Public ReadOnly Property EnqueuedTimeUtc As Date
    parameters: []
    return:
      type: System.DateTime
      description: The enqueue time in UTC. This value represents the actual time of enqueuing the event data.
  overload: Microsoft.ServiceBus.Messaging.EventData.EnqueuedTimeUtc*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.EventData.Properties
  commentId: P:Microsoft.ServiceBus.Messaging.EventData.Properties
  id: Properties
  parent: Microsoft.ServiceBus.Messaging.EventData
  langs:
  - csharp
  - vb
  name: Properties
  nameWithType: EventData.Properties
  fullName: Microsoft.ServiceBus.Messaging.EventData.Properties
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventData.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Properties
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventData.cs
    startLine: 243
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets the user properties of the event data that the user explicitly added during send operations.
  example: []
  syntax:
    content: public IDictionary<string, object> Properties { get; }
    content.vb: Public ReadOnly Property Properties As IDictionary(Of String, Object)
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: The user properties of the event data.
  overload: Microsoft.ServiceBus.Messaging.EventData.Properties*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.EventData.SystemProperties
  commentId: P:Microsoft.ServiceBus.Messaging.EventData.SystemProperties
  id: SystemProperties
  parent: Microsoft.ServiceBus.Messaging.EventData
  langs:
  - csharp
  - vb
  name: SystemProperties
  nameWithType: EventData.SystemProperties
  fullName: Microsoft.ServiceBus.Messaging.EventData.SystemProperties
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventData.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: SystemProperties
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventData.cs
    startLine: 247
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets or sets the system properties, including the event data.
  example: []
  syntax:
    content: public IDictionary<string, object> SystemProperties { get; }
    content.vb: Public ReadOnly Property SystemProperties As IDictionary(Of String, Object)
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: The system properties, including the event data.
  overload: Microsoft.ServiceBus.Messaging.EventData.SystemProperties*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.EventData.Clone
  commentId: M:Microsoft.ServiceBus.Messaging.EventData.Clone
  id: Clone
  parent: Microsoft.ServiceBus.Messaging.EventData
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: EventData.Clone()
  fullName: Microsoft.ServiceBus.Messaging.EventData.Clone()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventData.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Clone
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventData.cs
    startLine: 311
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Makes a deep copy of this event data.
  example: []
  syntax:
    content: public EventData Clone()
    content.vb: Public Function Clone As EventData
    return:
      type: Microsoft.ServiceBus.Messaging.EventData
      description: A copy of this event data.
  overload: Microsoft.ServiceBus.Messaging.EventData.Clone*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventData.Dispose
  commentId: M:Microsoft.ServiceBus.Messaging.EventData.Dispose
  id: Dispose
  parent: Microsoft.ServiceBus.Messaging.EventData
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: EventData.Dispose()
  fullName: Microsoft.ServiceBus.Messaging.EventData.Dispose()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventData.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Dispose
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventData.cs
    startLine: 343
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Microsoft.ServiceBus.Messaging.EventData.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventData.GetBodyStream
  commentId: M:Microsoft.ServiceBus.Messaging.EventData.GetBodyStream
  id: GetBodyStream
  parent: Microsoft.ServiceBus.Messaging.EventData
  langs:
  - csharp
  - vb
  name: GetBodyStream()
  nameWithType: EventData.GetBodyStream()
  fullName: Microsoft.ServiceBus.Messaging.EventData.GetBodyStream()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventData.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: GetBodyStream
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventData.cs
    startLine: 351
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets or sets the underlying stream to the event data body.
  remarks: This method can only be called once and afterwards method will throw <xref href="System.InvalidOperationException" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Stream GetBodyStream()
    content.vb: Public Function GetBodyStream As Stream
    return:
      type: System.IO.Stream
      description: The underlying stream to the event data body.
  overload: Microsoft.ServiceBus.Messaging.EventData.GetBodyStream*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventData.GetBytes
  commentId: M:Microsoft.ServiceBus.Messaging.EventData.GetBytes
  id: GetBytes
  parent: Microsoft.ServiceBus.Messaging.EventData
  langs:
  - csharp
  - vb
  name: GetBytes()
  nameWithType: EventData.GetBytes()
  fullName: Microsoft.ServiceBus.Messaging.EventData.GetBytes()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventData.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: GetBytes
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventData.cs
    startLine: 365
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets the event data bytes.
  example: []
  syntax:
    content: public byte[] GetBytes()
    content.vb: Public Function GetBytes As Byte()
    return:
      type: System.Byte[]
      description: The event data bytes.
  overload: Microsoft.ServiceBus.Messaging.EventData.GetBytes*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.ServiceBus.Messaging
  commentId: N:Microsoft.ServiceBus.Messaging
  isExternal: false
  name: Microsoft.ServiceBus.Messaging
  nameWithType: Microsoft.ServiceBus.Messaging
  fullName: Microsoft.ServiceBus.Messaging
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.ServiceBus.Messaging.EventData
  commentId: T:Microsoft.ServiceBus.Messaging.EventData
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: EventData
  nameWithType: EventData
  fullName: Microsoft.ServiceBus.Messaging.EventData
- uid: Microsoft.ServiceBus.Messaging.EventData.#ctor*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventData.#ctor
  isExternal: false
  name: EventData
  nameWithType: EventData.EventData
  fullName: Microsoft.ServiceBus.Messaging.EventData.EventData
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
  commentId: T:System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<ArraySegment<Byte>>
  nameWithType: IList<ArraySegment<Byte>>
  fullName: System.Collections.Generic.IList<System.ArraySegment<System.Byte>>
  nameWithType.vb: IList(Of ArraySegment(Of Byte))
  fullname.vb: System.Collections.Generic.IList(Of System.ArraySegment(Of System.Byte))
  name.vb: IList(Of ArraySegment(Of Byte))
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.ServiceBus.Messaging.EventData.#ctor(System.IO.Stream)
  commentId: M:Microsoft.ServiceBus.Messaging.EventData.#ctor(System.IO.Stream)
- uid: System.Runtime.Serialization.XmlObjectSerializer
  commentId: T:System.Runtime.Serialization.XmlObjectSerializer
  parent: System.Runtime.Serialization
  isExternal: true
  name: XmlObjectSerializer
  nameWithType: XmlObjectSerializer
  fullName: System.Runtime.Serialization.XmlObjectSerializer
- uid: System.Runtime.Serialization
  commentId: N:System.Runtime.Serialization
  isExternal: false
  name: System.Runtime.Serialization
  nameWithType: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
- uid: Microsoft.ServiceBus.Messaging.EventData.SerializedSizeInBytes*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventData.SerializedSizeInBytes
  isExternal: false
  name: SerializedSizeInBytes
  nameWithType: EventData.SerializedSizeInBytes
  fullName: Microsoft.ServiceBus.Messaging.EventData.SerializedSizeInBytes
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.ServiceBus.Messaging.EventData.Offset*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventData.Offset
  isExternal: false
  name: Offset
  nameWithType: EventData.Offset
  fullName: Microsoft.ServiceBus.Messaging.EventData.Offset
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.ServiceBus.Messaging.EventData.PartitionKey*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventData.PartitionKey
  isExternal: false
  name: PartitionKey
  nameWithType: EventData.PartitionKey
  fullName: Microsoft.ServiceBus.Messaging.EventData.PartitionKey
- uid: Microsoft.ServiceBus.Messaging.EventData.SequenceNumber*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventData.SequenceNumber
  isExternal: false
  name: SequenceNumber
  nameWithType: EventData.SequenceNumber
  fullName: Microsoft.ServiceBus.Messaging.EventData.SequenceNumber
- uid: Microsoft.ServiceBus.Messaging.EventData.EnqueuedTimeUtc*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventData.EnqueuedTimeUtc
  isExternal: false
  name: EnqueuedTimeUtc
  nameWithType: EventData.EnqueuedTimeUtc
  fullName: Microsoft.ServiceBus.Messaging.EventData.EnqueuedTimeUtc
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: Microsoft.ServiceBus.Messaging.EventData.Properties*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventData.Properties
  isExternal: false
  name: Properties
  nameWithType: EventData.Properties
  fullName: Microsoft.ServiceBus.Messaging.EventData.Properties
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Object>
  nameWithType: IDictionary<String, Object>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>
  nameWithType.vb: IDictionary(Of String, Object)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object)
  name.vb: IDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.EventData.SystemProperties*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventData.SystemProperties
  isExternal: false
  name: SystemProperties
  nameWithType: EventData.SystemProperties
  fullName: Microsoft.ServiceBus.Messaging.EventData.SystemProperties
- uid: Microsoft.ServiceBus.Messaging.EventData.Clone*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventData.Clone
  isExternal: false
  name: Clone
  nameWithType: EventData.Clone
  fullName: Microsoft.ServiceBus.Messaging.EventData.Clone
- uid: Microsoft.ServiceBus.Messaging.EventData.Dispose*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventData.Dispose
  isExternal: false
  name: Dispose
  nameWithType: EventData.Dispose
  fullName: Microsoft.ServiceBus.Messaging.EventData.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
- uid: Microsoft.ServiceBus.Messaging.EventData.GetBodyStream*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventData.GetBodyStream
  isExternal: false
  name: GetBodyStream
  nameWithType: EventData.GetBodyStream
  fullName: Microsoft.ServiceBus.Messaging.EventData.GetBodyStream
- uid: Microsoft.ServiceBus.Messaging.EventData.GetBytes*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventData.GetBytes
  isExternal: false
  name: GetBytes
  nameWithType: EventData.GetBytes
  fullName: Microsoft.ServiceBus.Messaging.EventData.GetBytes
