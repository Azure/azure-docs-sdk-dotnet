### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage
  commentId: T:Microsoft.ServiceBus.Messaging.BrokeredMessage
  id: BrokeredMessage
  parent: Microsoft.ServiceBus.Messaging
  children:
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.#ctor
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.#ctor(System.IO.Stream)
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.#ctor(System.IO.Stream,System.Boolean)
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.#ctor(System.Object)
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.#ctor(System.Object,System.Runtime.Serialization.XmlObjectSerializer)
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.Abandon
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.Abandon(System.Collections.Generic.IDictionary{System.String,System.Object})
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.AbandonAsync
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.AbandonAsync(System.Collections.Generic.IDictionary{System.String,System.Object})
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.Clone
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.Complete
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.CompleteAsync
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.ContentType
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.CorrelationId
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetter
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetter(System.Collections.Generic.IDictionary{System.String,System.Object})
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetter(System.String,System.String)
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetterAsync
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetterAsync(System.Collections.Generic.IDictionary{System.String,System.Object})
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetterAsync(System.String,System.String)
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetterSource
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.Defer
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.Defer(System.Collections.Generic.IDictionary{System.String,System.Object})
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.DeferAsync
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.DeferAsync(System.Collections.Generic.IDictionary{System.String,System.Object})
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.DeliveryCount
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.Dispose
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.EnqueuedSequenceNumber
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.EnqueuedTimeUtc
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.ExpiresAtUtc
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.ForcePersistence
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.GetBody``1
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.GetBody``1(System.Runtime.Serialization.XmlObjectSerializer)
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.IsBodyConsumed
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.Label
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.LockedUntilUtc
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.LockToken
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.MessageId
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.PartitionKey
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.Properties
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.RenewLock
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.RenewLockAsync
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.ReplyTo
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.ReplyToSessionId
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.ScheduledEnqueueTimeUtc
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.SequenceNumber
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.SessionId
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.Size
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.State
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.System#Xml#Serialization#IXmlSerializable#GetSchema
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.TimeToLive
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.To
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.ToString
  - Microsoft.ServiceBus.Messaging.BrokeredMessage.ViaPartitionKey
  langs:
  - csharp
  - vb
  name: BrokeredMessage
  nameWithType: BrokeredMessage
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage
  type: Class
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: BrokeredMessage
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 21
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Represents the unit of communication between Service Bus clients.
  example: []
  syntax:
    content: 'public sealed class BrokeredMessage : IXmlSerializable, IDisposable'
    content.vb: >-
      Public NotInheritable Class BrokeredMessage
          Implements IXmlSerializable, IDisposable
  inheritance:
  - System.Object
  implements:
  - System.Xml.Serialization.IXmlSerializable
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.#ctor
  commentId: M:Microsoft.ServiceBus.Messaging.BrokeredMessage.#ctor
  id: '#ctor'
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: BrokeredMessage()
  nameWithType: BrokeredMessage.BrokeredMessage()
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.BrokeredMessage()
  type: Constructor
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: .ctor
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 264
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Initializes a new instance of the <xref href="Microsoft.ServiceBus.Messaging.BrokeredMessage" data-throw-if-not-resolved="false"></xref> class.
  example: []
  syntax:
    content: public BrokeredMessage()
    content.vb: Public Sub New
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.#ctor(System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.BrokeredMessage.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: BrokeredMessage(Object)
  nameWithType: BrokeredMessage.BrokeredMessage(Object)
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.BrokeredMessage(System.Object)
  type: Constructor
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: .ctor
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 273
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Initializes a new instance of the \n<xref href=\"Microsoft.ServiceBus.Messaging.BrokeredMessage\" data-throw-if-not-resolved=\"false\"></xref> class from a given object by using DataContractSerializer with a binary XmlDictionaryWriter."
  remarks: A default <xref href="Microsoft.ServiceBus.Messaging.DataContractBinarySerializer" data-throw-if-not-resolved="false"></xref> is used for serializing the object.
  example: []
  syntax:
    content: public BrokeredMessage(object serializableObject)
    content.vb: Public Sub New(serializableObject As Object)
    parameters:
    - id: serializableObject
      type: System.Object
      description: The object to be serialized into the message body.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.#ctor(System.Object,System.Runtime.Serialization.XmlObjectSerializer)
  commentId: M:Microsoft.ServiceBus.Messaging.BrokeredMessage.#ctor(System.Object,System.Runtime.Serialization.XmlObjectSerializer)
  id: '#ctor(System.Object,System.Runtime.Serialization.XmlObjectSerializer)'
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: BrokeredMessage(Object, XmlObjectSerializer)
  nameWithType: BrokeredMessage.BrokeredMessage(Object, XmlObjectSerializer)
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.BrokeredMessage(System.Object, System.Runtime.Serialization.XmlObjectSerializer)
  type: Constructor
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: .ctor
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 287
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: 'Constructor that creates a BrokeredMessage from a given object using the provided XmlObjectSerializer '
  remarks: "You should be aware of the exceptions that their provided Serializer can throw and take appropriate\nactions. Please refer to <a href=\"http://msdn.microsoft.com/en-us/library/ms574055.aspx\"></a> for \na possible list of exceptions and their cause. "
  example: []
  syntax:
    content: public BrokeredMessage(object serializableObject, XmlObjectSerializer serializer)
    content.vb: Public Sub New(serializableObject As Object, serializer As XmlObjectSerializer)
    parameters:
    - id: serializableObject
      type: System.Object
      description: 'The serializable object. '
    - id: serializer
      type: System.Runtime.Serialization.XmlObjectSerializer
      description: 'The serializer object. '
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Thrown when null serializer is passed to the method \nwith a non-null serializableObject"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.#ctor(System.IO.Stream)
  commentId: M:Microsoft.ServiceBus.Messaging.BrokeredMessage.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: BrokeredMessage(Stream)
  nameWithType: BrokeredMessage.BrokeredMessage(Stream)
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.BrokeredMessage(System.IO.Stream)
  type: Constructor
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: .ctor
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 308
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Initializes a new instance of the <xref href="Microsoft.ServiceBus.Messaging.BrokeredMessage" data-throw-if-not-resolved="false"></xref> class.
  example: []
  syntax:
    content: public BrokeredMessage(Stream messageBodyStream)
    content.vb: Public Sub New(messageBodyStream As Stream)
    parameters:
    - id: messageBodyStream
      type: System.IO.Stream
      description: The message body stream.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.#ctor(System.IO.Stream,System.Boolean)
  commentId: M:Microsoft.ServiceBus.Messaging.BrokeredMessage.#ctor(System.IO.Stream,System.Boolean)
  id: '#ctor(System.IO.Stream,System.Boolean)'
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: BrokeredMessage(Stream, Boolean)
  nameWithType: BrokeredMessage.BrokeredMessage(Stream, Boolean)
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.BrokeredMessage(System.IO.Stream, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: .ctor
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 318
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Initializes a new instance of the \n<xref href=\"Microsoft.ServiceBus.Messaging.BrokeredMessage\" data-throw-if-not-resolved=\"false\"></xref> class using the supplied stream as its body."
  example: []
  syntax:
    content: public BrokeredMessage(Stream messageBodyStream, bool ownsStream)
    content.vb: Public Sub New(messageBodyStream As Stream, ownsStream As Boolean)
    parameters:
    - id: messageBodyStream
      type: System.IO.Stream
      description: The message body stream.
    - id: ownsStream
      type: System.Boolean
      description: "true to indicate that the stream will be closed when the message is \nclosed; false to indicate that the stream will not be closed when the message is closed."
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.CorrelationId
  commentId: P:Microsoft.ServiceBus.Messaging.BrokeredMessage.CorrelationId
  id: CorrelationId
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: CorrelationId
  nameWithType: BrokeredMessage.CorrelationId
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.CorrelationId
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CorrelationId
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 562
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets or sets the identifier of the correlation.
  example: []
  syntax:
    content: public string CorrelationId { get; set; }
    content.vb: Public Property CorrelationId As String
    parameters: []
    return:
      type: System.String
      description: The identifier of the correlation.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.CorrelationId*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if the message is in disposed state.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.SessionId
  commentId: P:Microsoft.ServiceBus.Messaging.BrokeredMessage.SessionId
  id: SessionId
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: SessionId
  nameWithType: BrokeredMessage.SessionId
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.SessionId
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: SessionId
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 590
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets or sets the identifier of the session.
  example: []
  syntax:
    content: public string SessionId { get; set; }
    content.vb: Public Property SessionId As String
    parameters: []
    return:
      type: System.String
      description: The identifier of the session.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.SessionId*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if the message is in disposed state.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.ReplyToSessionId
  commentId: P:Microsoft.ServiceBus.Messaging.BrokeredMessage.ReplyToSessionId
  id: ReplyToSessionId
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: ReplyToSessionId
  nameWithType: BrokeredMessage.ReplyToSessionId
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.ReplyToSessionId
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ReplyToSessionId
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 654
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets or sets the session identifier to reply to.
  example: []
  syntax:
    content: public string ReplyToSessionId { get; set; }
    content.vb: Public Property ReplyToSessionId As String
    parameters: []
    return:
      type: System.String
      description: The session identifier to reply to.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.ReplyToSessionId*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if the message is in disposed state.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeliveryCount
  commentId: P:Microsoft.ServiceBus.Messaging.BrokeredMessage.DeliveryCount
  id: DeliveryCount
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: DeliveryCount
  nameWithType: BrokeredMessage.DeliveryCount
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeliveryCount
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: DeliveryCount
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 683
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets the number of deliveries.
  example: []
  syntax:
    content: public int DeliveryCount { get; }
    content.vb: Public ReadOnly Property DeliveryCount As Integer
    parameters: []
    return:
      type: System.Int32
      description: The number of deliveries.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeliveryCount*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if the message is in disposed state.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if the message has not been delivered by ServiceBus.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetterSource
  commentId: P:Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetterSource
  id: DeadLetterSource
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: DeadLetterSource
  nameWithType: BrokeredMessage.DeadLetterSource
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetterSource
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: DeadLetterSource
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 703
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: ''
  example: []
  syntax:
    content: public string DeadLetterSource { get; }
    content.vb: Public ReadOnly Property DeadLetterSource As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetterSource*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.ExpiresAtUtc
  commentId: P:Microsoft.ServiceBus.Messaging.BrokeredMessage.ExpiresAtUtc
  id: ExpiresAtUtc
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: ExpiresAtUtc
  nameWithType: BrokeredMessage.ExpiresAtUtc
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.ExpiresAtUtc
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ExpiresAtUtc
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 737
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets the date and time in UTC at which the message is set to expire.
  example: []
  syntax:
    content: public DateTime ExpiresAtUtc { get; }
    content.vb: Public ReadOnly Property ExpiresAtUtc As Date
    parameters: []
    return:
      type: System.DateTime
      description: The message expiration time in UTC.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.ExpiresAtUtc*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if the message is in disposed state.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: If the message has not been delivered by ServerBus.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.LockedUntilUtc
  commentId: P:Microsoft.ServiceBus.Messaging.BrokeredMessage.LockedUntilUtc
  id: LockedUntilUtc
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: LockedUntilUtc
  nameWithType: BrokeredMessage.LockedUntilUtc
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.LockedUntilUtc
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: LockedUntilUtc
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 772
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets the date and time in UTC until which the message will be locked in the queue/subscription.
  example: []
  syntax:
    content: public DateTime LockedUntilUtc { get; }
    content.vb: Public ReadOnly Property LockedUntilUtc As Date
    parameters: []
    return:
      type: System.DateTime
      description: The date and time until which the message will be locked in the queue/subscription.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.LockedUntilUtc*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if the message is in disposed state.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if the message was not received from the ServiceBus.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.LockToken
  commentId: P:Microsoft.ServiceBus.Messaging.BrokeredMessage.LockToken
  id: LockToken
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: LockToken
  nameWithType: BrokeredMessage.LockToken
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.LockToken
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: LockToken
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 798
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets the lock token assigned by Service Bus to this message.
  example: []
  syntax:
    content: public Guid LockToken { get; }
    content.vb: Public ReadOnly Property LockToken As Guid
    parameters: []
    return:
      type: System.Guid
      description: The lock token assigned by Service Bus to this message.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.LockToken*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if the message is in disposed state.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if the message was not received from the ServiceBus.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.MessageId
  commentId: P:Microsoft.ServiceBus.Messaging.BrokeredMessage.MessageId
  id: MessageId
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: MessageId
  nameWithType: BrokeredMessage.MessageId
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.MessageId
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: MessageId
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 832
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Gets or sets the identifier of the message. This is a \nuser-defined value that Service Bus can use to identify duplicate messages, if enabled."
  example: []
  syntax:
    content: public string MessageId { get; set; }
    content.vb: Public Property MessageId As String
    parameters: []
    return:
      type: System.String
      description: The identifier of the message.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.MessageId*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if the message is in a disposed state.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if the message identifier is null or exceeds 128 characters in length.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.ContentType
  commentId: P:Microsoft.ServiceBus.Messaging.BrokeredMessage.ContentType
  id: ContentType
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: ContentType
  nameWithType: BrokeredMessage.ContentType
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.ContentType
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ContentType
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 881
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets or sets the type of the content.
  example: []
  syntax:
    content: public string ContentType { get; set; }
    content.vb: Public Property ContentType As String
    parameters: []
    return:
      type: System.String
      description: "The type of the content of the message body. This is a \ncontent type identifier utilized by the sender and receiver for application specific logic."
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.ContentType*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if the message is in disposed state.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.PartitionKey
  commentId: P:Microsoft.ServiceBus.Messaging.BrokeredMessage.PartitionKey
  id: PartitionKey
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: PartitionKey
  nameWithType: BrokeredMessage.PartitionKey
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.PartitionKey
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: PartitionKey
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 907
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets or sets a partition key for sending a transactional message to a queue or topic that is not session-aware.
  example: []
  syntax:
    content: public string PartitionKey { get; set; }
    content.vb: Public Property PartitionKey As String
    parameters: []
    return:
      type: System.String
      description: The partition key for sending a transactional message.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.PartitionKey*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.ViaPartitionKey
  commentId: P:Microsoft.ServiceBus.Messaging.BrokeredMessage.ViaPartitionKey
  id: ViaPartitionKey
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: ViaPartitionKey
  nameWithType: BrokeredMessage.ViaPartitionKey
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.ViaPartitionKey
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ViaPartitionKey
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 931
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets or sets a partition key value when a transaction is to be used to send messages via a transfer queue.
  example: []
  syntax:
    content: public string ViaPartitionKey { get; set; }
    content.vb: Public Property ViaPartitionKey As String
    parameters: []
    return:
      type: System.String
      description: The partition key value when a transaction is to be used to send messages via a transfer queue.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.ViaPartitionKey*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.Label
  commentId: P:Microsoft.ServiceBus.Messaging.BrokeredMessage.Label
  id: Label
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: Label
  nameWithType: BrokeredMessage.Label
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.Label
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Label
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 991
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets or sets the application specific label.
  example: []
  syntax:
    content: public string Label { get; set; }
    content.vb: Public Property Label As String
    parameters: []
    return:
      type: System.String
      description: The application specific label.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.Label*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if the message is in disposed state.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.Properties
  commentId: P:Microsoft.ServiceBus.Messaging.BrokeredMessage.Properties
  id: Properties
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: Properties
  nameWithType: BrokeredMessage.Properties
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.Properties
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Properties
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 1052
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets the application specific message properties.
  remarks: >-
    The size of each property object within the Properties bag cannot exceed 32 kilobytes.

    The collective size of the Properties bag cannot exceed 64 kilobytes.
  example: []
  syntax:
    content: public IDictionary<string, object> Properties { get; }
    content.vb: Public ReadOnly Property Properties As IDictionary(Of String, Object)
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: The application specific message properties.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.Properties*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if the message is in disposed state.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.ReplyTo
  commentId: P:Microsoft.ServiceBus.Messaging.BrokeredMessage.ReplyTo
  id: ReplyTo
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: ReplyTo
  nameWithType: BrokeredMessage.ReplyTo
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.ReplyTo
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ReplyTo
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 1065
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets or sets the address of the queue to reply to.
  example: []
  syntax:
    content: public string ReplyTo { get; set; }
    content.vb: Public Property ReplyTo As String
    parameters: []
    return:
      type: System.String
      description: The reply to queue address.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.ReplyTo*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if the message is in disposed state.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.EnqueuedTimeUtc
  commentId: P:Microsoft.ServiceBus.Messaging.BrokeredMessage.EnqueuedTimeUtc
  id: EnqueuedTimeUtc
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: EnqueuedTimeUtc
  nameWithType: BrokeredMessage.EnqueuedTimeUtc
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.EnqueuedTimeUtc
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: EnqueuedTimeUtc
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 1092
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets or sets the date and time of the sent time in UTC.
  example: []
  syntax:
    content: public DateTime EnqueuedTimeUtc { get; }
    content.vb: Public ReadOnly Property EnqueuedTimeUtc As Date
    parameters: []
    return:
      type: System.DateTime
      description: The enqueue time in UTC. This value represents the actual time of enqueuing the message.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.EnqueuedTimeUtc*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if the message is in disposed state.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.ScheduledEnqueueTimeUtc
  commentId: P:Microsoft.ServiceBus.Messaging.BrokeredMessage.ScheduledEnqueueTimeUtc
  id: ScheduledEnqueueTimeUtc
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: ScheduledEnqueueTimeUtc
  nameWithType: BrokeredMessage.ScheduledEnqueueTimeUtc
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.ScheduledEnqueueTimeUtc
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ScheduledEnqueueTimeUtc
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 1119
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Gets or sets the date and time in UTC at which the message will be enqueued. This \nproperty returns the time in UTC; when setting the property, the supplied DateTime value must also be in UTC."
  remarks: >-
    Message enquing time does not mean that the message will be sent at the same time. It will get enqueued, but the actual sending time

    depends on the queue's workload and its state. <xref href="Microsoft.ServiceBus.Messaging.BrokeredMessage.EnqueuedTimeUtc" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public DateTime ScheduledEnqueueTimeUtc { get; set; }
    content.vb: Public Property ScheduledEnqueueTimeUtc As Date
    parameters: []
    return:
      type: System.DateTime
      description: "The scheduled enqueue time in UTC. This value is for delayed message sending. \nIt is utilized to delay messages sending to a specific time in the future."
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.ScheduledEnqueueTimeUtc*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if the message is in disposed state.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown if the passed in value is DateTime.MaxValue.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.SequenceNumber
  commentId: P:Microsoft.ServiceBus.Messaging.BrokeredMessage.SequenceNumber
  id: SequenceNumber
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: SequenceNumber
  nameWithType: BrokeredMessage.SequenceNumber
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.SequenceNumber
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: SequenceNumber
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 1146
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets the unique number assigned to a message by the Service Bus.
  example: []
  syntax:
    content: public long SequenceNumber { get; }
    content.vb: Public ReadOnly Property SequenceNumber As Long
    parameters: []
    return:
      type: System.Int64
      description: The unique number assigned to a message by the Service Bus.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.SequenceNumber*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if the message is in disposed state.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown if the message was not received from the message server.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.EnqueuedSequenceNumber
  commentId: P:Microsoft.ServiceBus.Messaging.BrokeredMessage.EnqueuedSequenceNumber
  id: EnqueuedSequenceNumber
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: EnqueuedSequenceNumber
  nameWithType: BrokeredMessage.EnqueuedSequenceNumber
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.EnqueuedSequenceNumber
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: EnqueuedSequenceNumber
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 1167
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets or sets the enqueued sequence number of the message.
  example: []
  syntax:
    content: public long EnqueuedSequenceNumber { get; }
    content.vb: Public ReadOnly Property EnqueuedSequenceNumber As Long
    parameters: []
    return:
      type: System.Int64
      description: The enqueued sequence number of the message.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.EnqueuedSequenceNumber*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.Size
  commentId: P:Microsoft.ServiceBus.Messaging.BrokeredMessage.Size
  id: Size
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: Size
  nameWithType: BrokeredMessage.Size
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.Size
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Size
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 1196
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets the size of the message in bytes.
  remarks: >-
    The value of Size is only accurate after the BrokeredMessage instance is

    sent or received.
  example: []
  syntax:
    content: public long Size { get; }
    content.vb: Public ReadOnly Property Size As Long
    parameters: []
    return:
      type: System.Int64
      description: The message size in bytes.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.Size*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if the message is in disposed state.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.State
  commentId: P:Microsoft.ServiceBus.Messaging.BrokeredMessage.State
  id: State
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: State
  nameWithType: BrokeredMessage.State
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.State
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: State
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 1248
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets or sets the state of the message.
  example: []
  syntax:
    content: public MessageState State { get; }
    content.vb: Public ReadOnly Property State As MessageState
    parameters: []
    return:
      type: Microsoft.ServiceBus.Messaging.MessageState
      description: The state of the message.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.State*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.TimeToLive
  commentId: P:Microsoft.ServiceBus.Messaging.BrokeredMessage.TimeToLive
  id: TimeToLive
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: TimeToLive
  nameWithType: BrokeredMessage.TimeToLive
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.TimeToLive
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: TimeToLive
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 1277
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Gets or sets the message’s time to live value. This is the duration after which the message expires, starting from when the message is sent to the Service Bus. Messages older than their TimeToLive value will expire and no longer be retained in the message store. Subscribers will be unable to receive expired messages.TimeToLive is the maximum lifetime that a message can receive, but its value cannot exceed the entity specified the \n<xref href=\"Microsoft.ServiceBus.Messaging.QueueDescription.DefaultMessageTimeToLive\" data-throw-if-not-resolved=\"false\"></xref> value on the destination queue or subscription. If a lower TimeToLive value is specified, it will be applied to the individual message. However, a larger value specified on the message will be overridden by the entity’s DefaultMessageTimeToLive value."
  remarks: >-
    If the TTL set on a message by the sender exceeds the destination's TTL, then the message's TTL will be overwritten by the later one.

    See <xref href="Microsoft.ServiceBus.Messaging.QueueDescription.DefaultMessageTimeToLive" data-throw-if-not-resolved="false"></xref>, <xref href="Microsoft.ServiceBus.Messaging.TopicDescription.DefaultMessageTimeToLive" data-throw-if-not-resolved="false"></xref> and <xref href="Microsoft.ServiceBus.Messaging.SubscriptionDescription.DefaultMessageTimeToLive" data-throw-if-not-resolved="false"></xref>

    to learn more about how to control message TTL at an entity level.
  example: []
  syntax:
    content: public TimeSpan TimeToLive { get; set; }
    content.vb: Public Property TimeToLive As TimeSpan
    parameters: []
    return:
      type: System.TimeSpan
      description: The message’s time to live value.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.TimeToLive*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if the message is in disposed state.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown if the passed in value is less than or equal to TimeSpan.Zero.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.To
  commentId: P:Microsoft.ServiceBus.Messaging.BrokeredMessage.To
  id: To
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: To
  nameWithType: BrokeredMessage.To
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.To
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: To
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 1306
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets or sets the send to address.
  example: []
  syntax:
    content: public string To { get; set; }
    content.vb: Public Property To As String
    parameters: []
    return:
      type: System.String
      description: The send to address.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.To*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: Thrown if the message is in disposed state.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.IsBodyConsumed
  commentId: P:Microsoft.ServiceBus.Messaging.BrokeredMessage.IsBodyConsumed
  id: IsBodyConsumed
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: IsBodyConsumed
  nameWithType: BrokeredMessage.IsBodyConsumed
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.IsBodyConsumed
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: IsBodyConsumed
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 1332
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Specifies whether the message has been consumed.
  example: []
  syntax:
    content: public bool IsBodyConsumed { get; }
    content.vb: Public ReadOnly Property IsBodyConsumed As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the message has been consumed; otherwise, false.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.IsBodyConsumed*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.ForcePersistence
  commentId: P:Microsoft.ServiceBus.Messaging.BrokeredMessage.ForcePersistence
  id: ForcePersistence
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: ForcePersistence
  nameWithType: BrokeredMessage.ForcePersistence
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.ForcePersistence
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ForcePersistence
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 1351
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Gets or sets a value that indicates whether the message is to be persisted to the database immediately, instead of being \nheld in memory for a short time. This property is ignored if the message is sent to a non-express queue or topic."
  example: []
  syntax:
    content: public bool ForcePersistence { get; set; }
    content.vb: Public Property ForcePersistence As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "true if the message is to be persisted to the database \nimmediately, instead of being held in memory for a short time; otherwise, false."
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.ForcePersistence*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.GetBody``1
  commentId: M:Microsoft.ServiceBus.Messaging.BrokeredMessage.GetBody``1
  id: GetBody``1
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: GetBody<T>()
  nameWithType: BrokeredMessage.GetBody<T>()
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.GetBody<T>()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: GetBody
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 1944
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Deserializes the brokered message body into an object of the specified type by using the \n<xref href=\"System.Runtime.Serialization.DataContractSerializer\" data-throw-if-not-resolved=\"false\"></xref> with a binary \n<xref href=\"System.Xml.XmlDictionaryReader\" data-throw-if-not-resolved=\"false\"></xref>."
  example: []
  syntax:
    content: public T GetBody<T>()
    content.vb: Public Function GetBody(Of T) As T
    typeParameters:
    - id: T
      description: The type to which the message body will be deserialized.
    return:
      type: '{T}'
      description: The deserialized object or graph.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.GetBody*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: If the message is in disposed state or the message body stream is already disposed.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "If the message contains a null body stream or the \nbody stream contains no data or the message body has already been consumed."
  nameWithType.vb: BrokeredMessage.GetBody(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.BrokeredMessage.GetBody(Of T)()
  name.vb: GetBody(Of T)()
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.GetBody``1(System.Runtime.Serialization.XmlObjectSerializer)
  commentId: M:Microsoft.ServiceBus.Messaging.BrokeredMessage.GetBody``1(System.Runtime.Serialization.XmlObjectSerializer)
  id: GetBody``1(System.Runtime.Serialization.XmlObjectSerializer)
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: GetBody<T>(XmlObjectSerializer)
  nameWithType: BrokeredMessage.GetBody<T>(XmlObjectSerializer)
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.GetBody<T>(System.Runtime.Serialization.XmlObjectSerializer)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: GetBody
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 1971
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Deserializes the BrokeredMessage body into an object of the specified type using \nDataContractSerializer with a Binary XmlObjectSerializer. "
  example: []
  syntax:
    content: public T GetBody<T>(XmlObjectSerializer serializer)
    content.vb: Public Function GetBody(Of T)(serializer As XmlObjectSerializer) As T
    parameters:
    - id: serializer
      type: System.Runtime.Serialization.XmlObjectSerializer
      description: 'The serializer object. '
    typeParameters:
    - id: T
      description: 'Generic type parameter. '
    return:
      type: '{T}'
      description: The deserialized object/graph
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.GetBody*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: 'Thrown if the message is in disposed state. '
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: 'Thrown when invoked with a Null serializer object. '
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Thrown if the message contains a Null body stream, contains no data, \nor if the stream has been read once (through any GetBody() calls). "
  nameWithType.vb: BrokeredMessage.GetBody(Of T)(XmlObjectSerializer)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.BrokeredMessage.GetBody(Of T)(System.Runtime.Serialization.XmlObjectSerializer)
  name.vb: GetBody(Of T)(XmlObjectSerializer)
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.Abandon
  commentId: M:Microsoft.ServiceBus.Messaging.BrokeredMessage.Abandon
  id: Abandon
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: Abandon()
  nameWithType: BrokeredMessage.Abandon()
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.Abandon()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Abandon
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 2035
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Abandons the lock on a peek-locked message.
  remarks: This operation should only be exercised on a message received in peek-lock mode.
  example: []
  syntax:
    content: public void Abandon()
    content.vb: Public Sub Abandon
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.Abandon*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Thrown when the message is in the disposed state or \nthe receiver with which the message was received is in disposed state."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Thrown when invoked on a message that has not been received from the \nmessage server or invoked on a message that has not been received in peek-lock mode."
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "Thrown when operation times out. The timeout period is initialized through the \n<xref href=\"Microsoft.ServiceBus.Messaging.MessagingFactorySettings\" data-throw-if-not-resolved=\"false\"></xref>. You may need to increase the value of \n<xref href=\"Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref> to avoid this exception if the timeout value is relatively low."
  - type: Microsoft.ServiceBus.Messaging.MessagingCommunicationException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingCommunicationException
    description: "Thrown when the queue or subscription that receives \nthe message is no longer present in the message server."
  - type: Microsoft.ServiceBus.Messaging.ServerBusyException
    commentId: T:Microsoft.ServiceBus.Messaging.ServerBusyException
    description: "When service bus service is \nbusy and is unable process the request."
  - type: Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
    description: "When messaging entity the \nmessage was received from has been deleted."
  - type: Microsoft.ServiceBus.Messaging.MessageLockLostException
    commentId: T:Microsoft.ServiceBus.Messaging.MessageLockLostException
    description: "When the lock associated with this message \nwas lost or the lock token was not found."
  - type: Microsoft.ServiceBus.Messaging.SessionLockLostException
    commentId: T:Microsoft.ServiceBus.Messaging.SessionLockLostException
    description: "When this message was received from a \nSession and the lock associated with the session was lost."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "When the security token provided by the \nTokenProvider does not contain the claims to perform this operation."
  - type: System.ServiceModel.QuotaExceededException
    commentId: T:System.ServiceModel.QuotaExceededException
    description: "When the number of concurrent connections \nto an entity exceed the maximum allowed value."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.Abandon(System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Microsoft.ServiceBus.Messaging.BrokeredMessage.Abandon(System.Collections.Generic.IDictionary{System.String,System.Object})
  id: Abandon(System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: Abandon(IDictionary<String, Object>)
  nameWithType: BrokeredMessage.Abandon(IDictionary<String, Object>)
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.Abandon(System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Abandon
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 2058
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Abandons the lock on a peek-locked message.
  remarks: This operation should only be exercised on a message received in peek-lock mode.
  example: []
  syntax:
    content: public void Abandon(IDictionary<string, object> propertiesToModify)
    content.vb: Public Sub Abandon(propertiesToModify As IDictionary(Of String, Object))
    parameters:
    - id: propertiesToModify
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: The key-value pair collection of properties to modify.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.Abandon*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: >-
      Thrown when

      <ul><li></li><li></li></ul>
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >-
      Thrown when

      <ul><li></li><li></li></ul>
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: >-
      Thrown when operation times out. Timeout period is initialized through the <xref href="Microsoft.ServiceBus.Messaging.MessagingFactorySettings" data-throw-if-not-resolved="false"></xref>. You
                                      may need to increase the value of <xref href="Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" data-throw-if-not-resolved="false"></xref> to avoid this exception if timeout value
                                      is relatively low.
      <xref href="Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" data-throw-if-not-resolved="false"></xref>
  - type: System.ServiceModel.CommunicationException
    commentId: T:System.ServiceModel.CommunicationException
    description: Thrown when the queue or subscription that the message was received from is no longer present in the message server.
  nameWithType.vb: BrokeredMessage.Abandon(IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.BrokeredMessage.Abandon(System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: Abandon(IDictionary(Of String, Object))
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.AbandonAsync
  commentId: M:Microsoft.ServiceBus.Messaging.BrokeredMessage.AbandonAsync
  id: AbandonAsync
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: AbandonAsync()
  nameWithType: BrokeredMessage.AbandonAsync()
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.AbandonAsync()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: AbandonAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 2066
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously abandons the lock on a peek-locked message.
  example: []
  syntax:
    content: public Task AbandonAsync()
    content.vb: Public Function AbandonAsync As Task
    return:
      type: System.Threading.Tasks.Task
      description: The asynchronous result of the operation.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.AbandonAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.AbandonAsync(System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Microsoft.ServiceBus.Messaging.BrokeredMessage.AbandonAsync(System.Collections.Generic.IDictionary{System.String,System.Object})
  id: AbandonAsync(System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: AbandonAsync(IDictionary<String, Object>)
  nameWithType: BrokeredMessage.AbandonAsync(IDictionary<String, Object>)
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.AbandonAsync(System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: AbandonAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 2076
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously abandons the lock on a peek-locked message.
  example: []
  syntax:
    content: public Task AbandonAsync(IDictionary<string, object> propertiesToModify)
    content.vb: Public Function AbandonAsync(propertiesToModify As IDictionary(Of String, Object)) As Task
    parameters:
    - id: propertiesToModify
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: The key-value pair collection of properties to modify.
    return:
      type: System.Threading.Tasks.Task
      description: The asynchronous result of the operation.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.AbandonAsync*
  nameWithType.vb: BrokeredMessage.AbandonAsync(IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.BrokeredMessage.AbandonAsync(System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: AbandonAsync(IDictionary(Of String, Object))
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.RenewLock
  commentId: M:Microsoft.ServiceBus.Messaging.BrokeredMessage.RenewLock
  id: RenewLock
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: RenewLock()
  nameWithType: BrokeredMessage.RenewLock()
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.RenewLock()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: RenewLock
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 2154
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Renews the lock on a message.
  example: []
  syntax:
    content: public void RenewLock()
    content.vb: Public Sub RenewLock
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.RenewLock*
  exceptions:
  - type: Microsoft.ServiceBus.Messaging.MessagingException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingException
    description: "If \n<xref href=\"Microsoft.ServiceBus.Messaging.MessagingException.IsTransient\" data-throw-if-not-resolved=\"false\"></xref> is true, you can retry the operation immediately."
  - type: Microsoft.ServiceBus.Messaging.MessagingCommunicationException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingCommunicationException
    description: You can retry the operation immediately.
  - type: Microsoft.ServiceBus.Messaging.MessageLockLostException
    commentId: T:Microsoft.ServiceBus.Messaging.MessageLockLostException
    description: "Thrown if you have called \n<xref href=\"Microsoft.ServiceBus.Messaging.BrokeredMessage.RenewLock\" data-throw-if-not-resolved=\"false\"></xref> too late. In a session, this is never thrown."
  - type: Microsoft.ServiceBus.Messaging.SessionLockLostException
    commentId: T:Microsoft.ServiceBus.Messaging.SessionLockLostException
    description: "Thrown instead of \n<xref href=\"Microsoft.ServiceBus.Messaging.MessageLockLostException\" data-throw-if-not-resolved=\"false\"></xref> if the message is from a \n<xref href=\"Microsoft.ServiceBus.Messaging.MessageSession\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.RenewLockAsync
  commentId: M:Microsoft.ServiceBus.Messaging.BrokeredMessage.RenewLockAsync
  id: RenewLockAsync
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: RenewLockAsync()
  nameWithType: BrokeredMessage.RenewLockAsync()
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.RenewLockAsync()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: RenewLockAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 2163
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously renews the lock on a message.
  example: []
  syntax:
    content: public Task RenewLockAsync()
    content.vb: Public Function RenewLockAsync As Task
    return:
      type: System.Threading.Tasks.Task
      description: The asynchronous result of the operation.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.RenewLockAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.Complete
  commentId: M:Microsoft.ServiceBus.Messaging.BrokeredMessage.Complete
  id: Complete
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: Complete()
  nameWithType: BrokeredMessage.Complete()
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.Complete()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Complete
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 2220
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Completes the receive operation of a message and indicates that the message should be marked as processed and deleted.
  remarks: >-
    This method is used as a handshake between the receiver and Service Bus for a guaranteed delivery of the message. If the

    receiver failed before calling this method, the message will be kept in the queue.
  example: []
  syntax:
    content: public void Complete()
    content.vb: Public Sub Complete
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.Complete*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Thrown when the message is in disposed state or \nthe receiver with which the message was received is in disposed state."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Thrown when invoked on a message that has not been received from the \nmessage server or invoked on a message that has not been received in peek-lock mode."
  - type: Microsoft.ServiceBus.Messaging.MessagingCommunicationException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingCommunicationException
    description: "Thrown when the queue or subscription that receives \nthe message is no longer present in the message server."
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "Thrown when the operation times out. The timeout period is initialized through the \n<xref href=\"Microsoft.ServiceBus.Messaging.MessagingFactorySettings\" data-throw-if-not-resolved=\"false\"></xref>. You may need to increase the value of \n<xref href=\"Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref> to avoid this exception if the timeout value is relatively low."
  - type: Microsoft.ServiceBus.Messaging.MessageLockLostException
    commentId: T:Microsoft.ServiceBus.Messaging.MessageLockLostException
    description: "Thrown if the lock on the message has expired. LockDuration is an entity-wide setting and can be initialized through \n<xref href=\"Microsoft.ServiceBus.Messaging.QueueDescription.LockDuration\" data-throw-if-not-resolved=\"false\"></xref> and \n<xref href=\"Microsoft.ServiceBus.Messaging.SubscriptionDescription.LockDuration\" data-throw-if-not-resolved=\"false\"></xref> for queues and subscriptions respectively."
  - type: Microsoft.ServiceBus.Messaging.SessionLockLostException
    commentId: T:Microsoft.ServiceBus.Messaging.SessionLockLostException
    description: "Thrown if the lock on the session has expired. The session lock duration is the same as the message LockDuration and is an entity-wide setting. It can be initialized through \n<xref href=\"Microsoft.ServiceBus.Messaging.QueueDescription.LockDuration\" data-throw-if-not-resolved=\"false\"></xref> and \n<xref href=\"Microsoft.ServiceBus.Messaging.SubscriptionDescription.LockDuration\" data-throw-if-not-resolved=\"false\"></xref> for queues and subscriptions respectively."
  - type: Microsoft.ServiceBus.Messaging.ServerBusyException
    commentId: T:Microsoft.ServiceBus.Messaging.ServerBusyException
    description: "When service bus service is \nbusy and is unable process the request."
  - type: Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
    description: "When messaging entity the \nmessage was received from has been deleted."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "When the security token provided by the \nTokenProvider does not contain the claims to perform this operation."
  - type: System.ServiceModel.QuotaExceededException
    commentId: T:System.ServiceModel.QuotaExceededException
    description: "When the number of concurrent connections \nto an entity exceed the maximum allowed value."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.CompleteAsync
  commentId: M:Microsoft.ServiceBus.Messaging.BrokeredMessage.CompleteAsync
  id: CompleteAsync
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: CompleteAsync()
  nameWithType: BrokeredMessage.CompleteAsync()
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.CompleteAsync()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CompleteAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 2233
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Asynchronously completes the receive operation of a message and \nindicates that the message should be marked as processed and deleted."
  example: []
  syntax:
    content: public Task CompleteAsync()
    content.vb: Public Function CompleteAsync As Task
    return:
      type: System.Threading.Tasks.Task
      description: The asynchronous result of the operation.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.CompleteAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.Defer
  commentId: M:Microsoft.ServiceBus.Messaging.BrokeredMessage.Defer
  id: Defer
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: Defer()
  nameWithType: BrokeredMessage.Defer()
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.Defer()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Defer
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 2313
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Indicates that the receiver wants to defer the processing for this message.
  remarks: 'Before deferring the message, user MUST set aside the message receipt for later retrieval. '
  example: []
  syntax:
    content: public void Defer()
    content.vb: Public Sub Defer
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.Defer*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Thrown when the message is in the disposed state or \nthe receiver with which the message was received is in the disposed state."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Thrown when invoked on a message that has not been received from the \nmessage server or invoked on a message that has not been received in peek-lock mode."
  - type: Microsoft.ServiceBus.Messaging.MessagingCommunicationException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingCommunicationException
    description: "Thrown when the queue or subscription that receives \nthe message is no longer present in the message server."
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "Thrown when the operation times out. The timeout period is initialized through the \n<xref href=\"Microsoft.ServiceBus.Messaging.MessagingFactorySettings\" data-throw-if-not-resolved=\"false\"></xref>. You may need to increase the value of \n<xref href=\"Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref> to avoid this exception if the timeout value is relatively low."
  - type: Microsoft.ServiceBus.Messaging.MessageLockLostException
    commentId: T:Microsoft.ServiceBus.Messaging.MessageLockLostException
    description: "Thrown if the lock on the message has expired. LockDuration is an entity-wide setting and can be initialized through \n<xref href=\"Microsoft.ServiceBus.Messaging.QueueDescription.LockDuration\" data-throw-if-not-resolved=\"false\"></xref> and \n<xref href=\"Microsoft.ServiceBus.Messaging.SubscriptionDescription.LockDuration\" data-throw-if-not-resolved=\"false\"></xref> for queues and subscriptions respectively."
  - type: Microsoft.ServiceBus.Messaging.SessionLockLostException
    commentId: T:Microsoft.ServiceBus.Messaging.SessionLockLostException
    description: "Thrown if the lock on the session has expired. The session lock duration is the same as the message LockDuration and is an entity-wide setting. It can be initialized through \n<xref href=\"Microsoft.ServiceBus.Messaging.QueueDescription.LockDuration\" data-throw-if-not-resolved=\"false\"></xref> and \n<xref href=\"Microsoft.ServiceBus.Messaging.SubscriptionDescription.LockDuration\" data-throw-if-not-resolved=\"false\"></xref> for queues and subscriptions respectively."
  - type: Microsoft.ServiceBus.Messaging.ServerBusyException
    commentId: T:Microsoft.ServiceBus.Messaging.ServerBusyException
    description: "When service bus service is \nbusy and is unable process the request."
  - type: Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
    description: "When messaging entity the \nmessage was received from has been deleted."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "When the security token provided by the \nTokenProvider does not contain the claims to perform this operation."
  - type: System.ServiceModel.QuotaExceededException
    commentId: T:System.ServiceModel.QuotaExceededException
    description: "When the number of concurrent connections \nto an entity exceed the maximum allowed value."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.Defer(System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Microsoft.ServiceBus.Messaging.BrokeredMessage.Defer(System.Collections.Generic.IDictionary{System.String,System.Object})
  id: Defer(System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: Defer(IDictionary<String, Object>)
  nameWithType: BrokeredMessage.Defer(IDictionary<String, Object>)
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.Defer(System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Defer
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 2322
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Indicates that the receiver wants to defer the processing for this message.
  remarks: 'Before deferring the message, user MUST set aside the message receipt for later retrieval. '
  example: []
  syntax:
    content: public void Defer(IDictionary<string, object> propertiesToModify)
    content.vb: Public Sub Defer(propertiesToModify As IDictionary(Of String, Object))
    parameters:
    - id: propertiesToModify
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: The key-value pair collection of properties to modify.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.Defer*
  nameWithType.vb: BrokeredMessage.Defer(IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.BrokeredMessage.Defer(System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: Defer(IDictionary(Of String, Object))
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeferAsync
  commentId: M:Microsoft.ServiceBus.Messaging.BrokeredMessage.DeferAsync
  id: DeferAsync
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: DeferAsync()
  nameWithType: BrokeredMessage.DeferAsync()
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeferAsync()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: DeferAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 2330
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously indicates that the receiver wants to defer the processing for this message.
  example: []
  syntax:
    content: public Task DeferAsync()
    content.vb: Public Function DeferAsync As Task
    return:
      type: System.Threading.Tasks.Task
      description: The asynchronous result of the operation.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeferAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeferAsync(System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Microsoft.ServiceBus.Messaging.BrokeredMessage.DeferAsync(System.Collections.Generic.IDictionary{System.String,System.Object})
  id: DeferAsync(System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: DeferAsync(IDictionary<String, Object>)
  nameWithType: BrokeredMessage.DeferAsync(IDictionary<String, Object>)
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeferAsync(System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: DeferAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 2340
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously indicates that the receiver wants to defer the processing for this message.
  example: []
  syntax:
    content: public Task DeferAsync(IDictionary<string, object> propertiesToModify)
    content.vb: Public Function DeferAsync(propertiesToModify As IDictionary(Of String, Object)) As Task
    parameters:
    - id: propertiesToModify
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: The key-value pair collection of properties to modify.
    return:
      type: System.Threading.Tasks.Task
      description: The asynchronous result of the operation.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeferAsync*
  nameWithType.vb: BrokeredMessage.DeferAsync(IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeferAsync(System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: DeferAsync(IDictionary(Of String, Object))
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetter(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetter(System.String,System.String)
  id: DeadLetter(System.String,System.String)
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: DeadLetter(String, String)
  nameWithType: BrokeredMessage.DeadLetter(String, String)
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetter(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: DeadLetter
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 2435
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Moves the message to the dead letter queue.
  example: []
  syntax:
    content: public void DeadLetter(string deadLetterReason, string deadLetterErrorDescription)
    content.vb: Public Sub DeadLetter(deadLetterReason As String, deadLetterErrorDescription As String)
    parameters:
    - id: deadLetterReason
      type: System.String
      description: The reason for deadlettering the message.
    - id: deadLetterErrorDescription
      type: System.String
      description: The description information for deadlettering the message.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetter*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Thrown when the message is in disposed state or \nthe receiver with which the message was received is in disposed state."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Thrown when invoked on a message that has not been received from the \nmessage server or invoked on a message that has not been received in peek-lock mode."
  - type: System.ServiceModel.CommunicationException
    commentId: T:System.ServiceModel.CommunicationException
    description: "Thrown when the queue or subscription that receives \nthe message is no longer present in the message server."
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "Thrown when operation times out. Timeout period is initialized through the \n<xref href=\"Microsoft.ServiceBus.Messaging.MessagingFactorySettings\" data-throw-if-not-resolved=\"false\"></xref>. You may need to increase the value of \n<xref href=\"Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref> to avoid this exception if timeout value is relatively low."
  - type: Microsoft.ServiceBus.Messaging.MessageLockLostException
    commentId: T:Microsoft.ServiceBus.Messaging.MessageLockLostException
    description: "Thrown if the lock on the message has expired. LockDuration is an entity-wide setting and can be initialized through \n<xref href=\"Microsoft.ServiceBus.Messaging.QueueDescription.LockDuration\" data-throw-if-not-resolved=\"false\"></xref> and \n<xref href=\"Microsoft.ServiceBus.Messaging.SubscriptionDescription.LockDuration\" data-throw-if-not-resolved=\"false\"></xref> for Queues and Subscriptions respectively."
  - type: Microsoft.ServiceBus.Messaging.SessionLockLostException
    commentId: T:Microsoft.ServiceBus.Messaging.SessionLockLostException
    description: "Thrown if the lock on the session has expired. Session lock duration is the same as message LockDuration and is an entity-wide setting. It can be initialized through \n<xref href=\"Microsoft.ServiceBus.Messaging.QueueDescription.LockDuration\" data-throw-if-not-resolved=\"false\"></xref> and \n<xref href=\"Microsoft.ServiceBus.Messaging.SubscriptionDescription.LockDuration\" data-throw-if-not-resolved=\"false\"></xref> for Queues and Subscriptions respectively."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetterAsync
  commentId: M:Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetterAsync
  id: DeadLetterAsync
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: DeadLetterAsync()
  nameWithType: BrokeredMessage.DeadLetterAsync()
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetterAsync()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: DeadLetterAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 2443
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously moves the message to the dead letter queue.
  example: []
  syntax:
    content: public Task DeadLetterAsync()
    content.vb: Public Function DeadLetterAsync As Task
    return:
      type: System.Threading.Tasks.Task
      description: The asynchronous result of the operation.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetterAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetterAsync(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetterAsync(System.String,System.String)
  id: DeadLetterAsync(System.String,System.String)
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: DeadLetterAsync(String, String)
  nameWithType: BrokeredMessage.DeadLetterAsync(String, String)
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetterAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: DeadLetterAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 2454
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously moves the message to the dead letter queue.
  example: []
  syntax:
    content: public Task DeadLetterAsync(string deadLetterReason, string deadLetterErrorDescription)
    content.vb: Public Function DeadLetterAsync(deadLetterReason As String, deadLetterErrorDescription As String) As Task
    parameters:
    - id: deadLetterReason
      type: System.String
      description: The reason for deadlettering the message.
    - id: deadLetterErrorDescription
      type: System.String
      description: The description information for deadlettering the message.
    return:
      type: System.Threading.Tasks.Task
      description: The asynchronous result of the operation.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetterAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetterAsync(System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetterAsync(System.Collections.Generic.IDictionary{System.String,System.Object})
  id: DeadLetterAsync(System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: DeadLetterAsync(IDictionary<String, Object>)
  nameWithType: BrokeredMessage.DeadLetterAsync(IDictionary<String, Object>)
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetterAsync(System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: DeadLetterAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 2464
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously moves the message to the dead letter queue.
  example: []
  syntax:
    content: public Task DeadLetterAsync(IDictionary<string, object> propertiesToModify)
    content.vb: Public Function DeadLetterAsync(propertiesToModify As IDictionary(Of String, Object)) As Task
    parameters:
    - id: propertiesToModify
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: The key-value pair collection of properties to modify.
    return:
      type: System.Threading.Tasks.Task
      description: The asynchronous result of the operation.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetterAsync*
  nameWithType.vb: BrokeredMessage.DeadLetterAsync(IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetterAsync(System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: DeadLetterAsync(IDictionary(Of String, Object))
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetter(System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetter(System.Collections.Generic.IDictionary{System.String,System.Object})
  id: DeadLetter(System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: DeadLetter(IDictionary<String, Object>)
  nameWithType: BrokeredMessage.DeadLetter(IDictionary<String, Object>)
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetter(System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: DeadLetter
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 2473
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Moves the message to the dead letter queue.
  example: []
  syntax:
    content: public void DeadLetter(IDictionary<string, object> propertiesToModify)
    content.vb: Public Sub DeadLetter(propertiesToModify As IDictionary(Of String, Object))
    parameters:
    - id: propertiesToModify
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: The key-value pair collection of properties to modify.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetter*
  nameWithType.vb: BrokeredMessage.DeadLetter(IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetter(System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: DeadLetter(IDictionary(Of String, Object))
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetter
  commentId: M:Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetter
  id: DeadLetter
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: DeadLetter()
  nameWithType: BrokeredMessage.DeadLetter()
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetter()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: DeadLetter
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 2484
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Moves the message to the dead letter queue.
  example: []
  syntax:
    content: public void DeadLetter()
    content.vb: Public Sub DeadLetter
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetter*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Thrown when the message is in disposed state or \nthe receiver with which the message was received is in disposed state."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Thrown when invoked on a message that has not been received from the \nmessage server or invoked on a message that has not been received in peek-lock mode."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.Dispose
  commentId: M:Microsoft.ServiceBus.Messaging.BrokeredMessage.Dispose
  id: Dispose
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: BrokeredMessage.Dispose()
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.Dispose()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Dispose
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 2574
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.ToString
  commentId: M:Microsoft.ServiceBus.Messaging.BrokeredMessage.ToString
  id: ToString
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: BrokeredMessage.ToString()
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.ToString()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ToString
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 2581
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Returns a string that represents the current message.
  example: []
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: The string representation of the current message.
  overridden: System.Object.ToString
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.System#Xml#Serialization#IXmlSerializable#GetSchema
  commentId: M:Microsoft.ServiceBus.Messaging.BrokeredMessage.System#Xml#Serialization#IXmlSerializable#GetSchema
  id: System#Xml#Serialization#IXmlSerializable#GetSchema
  isEii: true
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: IXmlSerializable.GetSchema()
  nameWithType: BrokeredMessage.IXmlSerializable.GetSchema()
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.System.Xml.Serialization.IXmlSerializable.GetSchema()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: System.Xml.Serialization.IXmlSerializable.GetSchema
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 2638
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing \nin Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the XmlSchemaProviderAttribute to the class."
  example: []
  syntax:
    content: XmlSchema IXmlSerializable.GetSchema()
    content.vb: Function System.Xml.Serialization.IXmlSerializable.GetSchema As XmlSchema Implements IXmlSerializable.GetSchema
    return:
      type: System.Xml.Schema.XmlSchema
      description: "An XmlSchema that describes the XML representation of the object that \nis produced by the WriteXml method and consumed by the ReadXml method."
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.System#Xml#Serialization#IXmlSerializable#GetSchema*
  implements:
  - System.Xml.Serialization.IXmlSerializable.GetSchema
  nameWithType.vb: BrokeredMessage.System.Xml.Serialization.IXmlSerializable.GetSchema()
  name.vb: System.Xml.Serialization.IXmlSerializable.GetSchema()
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  commentId: M:Microsoft.ServiceBus.Messaging.BrokeredMessage.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  id: System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)
  isEii: true
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: IXmlSerializable.ReadXml(XmlReader)
  nameWithType: BrokeredMessage.IXmlSerializable.ReadXml(XmlReader)
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: System.Xml.Serialization.IXmlSerializable.ReadXml
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 2646
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Generates an object from its XML representation. This method is reserved for internal use \nand should not be used directly or indirectly (for example, using a serializer or a formatter)."
  example: []
  syntax:
    content: void IXmlSerializable.ReadXml(XmlReader reader)
    content.vb: Sub System.Xml.Serialization.IXmlSerializable.ReadXml(reader As XmlReader) Implements IXmlSerializable.ReadXml
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: The XmlReader stream from which the object is deserialized.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.System#Xml#Serialization#IXmlSerializable#ReadXml*
  implements:
  - System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  nameWithType.vb: BrokeredMessage.System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
  name.vb: System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader)
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  commentId: M:Microsoft.ServiceBus.Messaging.BrokeredMessage.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  id: System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)
  isEii: true
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: IXmlSerializable.WriteXml(XmlWriter)
  nameWithType: BrokeredMessage.IXmlSerializable.WriteXml(XmlWriter)
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: System.Xml.Serialization.IXmlSerializable.WriteXml
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 2662
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Converts an object into its XML representation. This method is reserved for internal use \nand should not be used directly or indirectly (e.g. using a serializer or a formatter)."
  example: []
  syntax:
    content: void IXmlSerializable.WriteXml(XmlWriter writer)
    content.vb: Sub System.Xml.Serialization.IXmlSerializable.WriteXml(writer As XmlWriter) Implements IXmlSerializable.WriteXml
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: The XmlWriter stream to which the object is serialized.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.System#Xml#Serialization#IXmlSerializable#WriteXml*
  implements:
  - System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  nameWithType.vb: BrokeredMessage.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
  name.vb: System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter)
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.Clone
  commentId: M:Microsoft.ServiceBus.Messaging.BrokeredMessage.Clone
  id: Clone
  parent: Microsoft.ServiceBus.Messaging.BrokeredMessage
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: BrokeredMessage.Clone()
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.Clone()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Clone
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/BrokeredMessage.cs
    startLine: 2676
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Clones a message, so that it is possible to send a clone of a message as a new message.
  example: []
  syntax:
    content: public BrokeredMessage Clone()
    content.vb: Public Function Clone As BrokeredMessage
    return:
      type: Microsoft.ServiceBus.Messaging.BrokeredMessage
      description: The <xref href="Microsoft.ServiceBus.Messaging.BrokeredMessage" data-throw-if-not-resolved="false"></xref> that contains the cloned message.
  overload: Microsoft.ServiceBus.Messaging.BrokeredMessage.Clone*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.ServiceBus.Messaging
  commentId: N:Microsoft.ServiceBus.Messaging
  isExternal: false
  name: Microsoft.ServiceBus.Messaging
  nameWithType: Microsoft.ServiceBus.Messaging
  fullName: Microsoft.ServiceBus.Messaging
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Xml.Serialization.IXmlSerializable
  commentId: T:System.Xml.Serialization.IXmlSerializable
  parent: System.Xml.Serialization
  isExternal: true
  name: IXmlSerializable
  nameWithType: IXmlSerializable
  fullName: System.Xml.Serialization.IXmlSerializable
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Xml.Serialization
  commentId: N:System.Xml.Serialization
  isExternal: false
  name: System.Xml.Serialization
  nameWithType: System.Xml.Serialization
  fullName: System.Xml.Serialization
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage
  commentId: T:Microsoft.ServiceBus.Messaging.BrokeredMessage
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: BrokeredMessage
  nameWithType: BrokeredMessage
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.#ctor*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.#ctor
  isExternal: false
  name: BrokeredMessage
  nameWithType: BrokeredMessage.BrokeredMessage
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.BrokeredMessage
- uid: Microsoft.ServiceBus.Messaging.DataContractBinarySerializer
  commentId: T:Microsoft.ServiceBus.Messaging.DataContractBinarySerializer
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.Runtime.Serialization.XmlObjectSerializer
  commentId: T:System.Runtime.Serialization.XmlObjectSerializer
  parent: System.Runtime.Serialization
  isExternal: true
  name: XmlObjectSerializer
  nameWithType: XmlObjectSerializer
  fullName: System.Runtime.Serialization.XmlObjectSerializer
- uid: System.Runtime.Serialization
  commentId: N:System.Runtime.Serialization
  isExternal: false
  name: System.Runtime.Serialization
  nameWithType: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.CorrelationId*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.CorrelationId
  isExternal: false
  name: CorrelationId
  nameWithType: BrokeredMessage.CorrelationId
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.CorrelationId
- uid: System.ObjectDisposedException
  commentId: T:System.ObjectDisposedException
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.SessionId*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.SessionId
  isExternal: false
  name: SessionId
  nameWithType: BrokeredMessage.SessionId
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.SessionId
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.ReplyToSessionId*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.ReplyToSessionId
  isExternal: false
  name: ReplyToSessionId
  nameWithType: BrokeredMessage.ReplyToSessionId
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.ReplyToSessionId
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeliveryCount*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.DeliveryCount
  isExternal: false
  name: DeliveryCount
  nameWithType: BrokeredMessage.DeliveryCount
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeliveryCount
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetterSource*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetterSource
  isExternal: false
  name: DeadLetterSource
  nameWithType: BrokeredMessage.DeadLetterSource
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetterSource
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.ExpiresAtUtc*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.ExpiresAtUtc
  isExternal: false
  name: ExpiresAtUtc
  nameWithType: BrokeredMessage.ExpiresAtUtc
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.ExpiresAtUtc
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.LockedUntilUtc*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.LockedUntilUtc
  isExternal: false
  name: LockedUntilUtc
  nameWithType: BrokeredMessage.LockedUntilUtc
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.LockedUntilUtc
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.LockToken*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.LockToken
  isExternal: false
  name: LockToken
  nameWithType: BrokeredMessage.LockToken
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.LockToken
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.MessageId*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.MessageId
  isExternal: false
  name: MessageId
  nameWithType: BrokeredMessage.MessageId
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.MessageId
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.ContentType*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.ContentType
  isExternal: false
  name: ContentType
  nameWithType: BrokeredMessage.ContentType
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.ContentType
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.PartitionKey*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.PartitionKey
  isExternal: false
  name: PartitionKey
  nameWithType: BrokeredMessage.PartitionKey
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.PartitionKey
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.ViaPartitionKey*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.ViaPartitionKey
  isExternal: false
  name: ViaPartitionKey
  nameWithType: BrokeredMessage.ViaPartitionKey
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.ViaPartitionKey
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.Label*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.Label
  isExternal: false
  name: Label
  nameWithType: BrokeredMessage.Label
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.Label
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.Properties*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.Properties
  isExternal: false
  name: Properties
  nameWithType: BrokeredMessage.Properties
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.Properties
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Object>
  nameWithType: IDictionary<String, Object>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>
  nameWithType.vb: IDictionary(Of String, Object)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object)
  name.vb: IDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.ReplyTo*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.ReplyTo
  isExternal: false
  name: ReplyTo
  nameWithType: BrokeredMessage.ReplyTo
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.ReplyTo
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.EnqueuedTimeUtc*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.EnqueuedTimeUtc
  isExternal: false
  name: EnqueuedTimeUtc
  nameWithType: BrokeredMessage.EnqueuedTimeUtc
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.EnqueuedTimeUtc
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.EnqueuedTimeUtc
  commentId: P:Microsoft.ServiceBus.Messaging.BrokeredMessage.EnqueuedTimeUtc
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.ScheduledEnqueueTimeUtc*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.ScheduledEnqueueTimeUtc
  isExternal: false
  name: ScheduledEnqueueTimeUtc
  nameWithType: BrokeredMessage.ScheduledEnqueueTimeUtc
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.ScheduledEnqueueTimeUtc
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.SequenceNumber*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.SequenceNumber
  isExternal: false
  name: SequenceNumber
  nameWithType: BrokeredMessage.SequenceNumber
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.SequenceNumber
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.EnqueuedSequenceNumber*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.EnqueuedSequenceNumber
  isExternal: false
  name: EnqueuedSequenceNumber
  nameWithType: BrokeredMessage.EnqueuedSequenceNumber
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.EnqueuedSequenceNumber
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.Size*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.Size
  isExternal: false
  name: Size
  nameWithType: BrokeredMessage.Size
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.Size
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.State*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.State
  isExternal: false
  name: State
  nameWithType: BrokeredMessage.State
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.State
- uid: Microsoft.ServiceBus.Messaging.MessageState
  commentId: T:Microsoft.ServiceBus.Messaging.MessageState
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: MessageState
  nameWithType: MessageState
  fullName: Microsoft.ServiceBus.Messaging.MessageState
- uid: Microsoft.ServiceBus.Messaging.QueueDescription.DefaultMessageTimeToLive
  commentId: P:Microsoft.ServiceBus.Messaging.QueueDescription.DefaultMessageTimeToLive
- uid: Microsoft.ServiceBus.Messaging.TopicDescription.DefaultMessageTimeToLive
  commentId: P:Microsoft.ServiceBus.Messaging.TopicDescription.DefaultMessageTimeToLive
- uid: Microsoft.ServiceBus.Messaging.SubscriptionDescription.DefaultMessageTimeToLive
  commentId: P:Microsoft.ServiceBus.Messaging.SubscriptionDescription.DefaultMessageTimeToLive
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.TimeToLive*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.TimeToLive
  isExternal: false
  name: TimeToLive
  nameWithType: BrokeredMessage.TimeToLive
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.TimeToLive
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.To*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.To
  isExternal: false
  name: To
  nameWithType: BrokeredMessage.To
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.To
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.IsBodyConsumed*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.IsBodyConsumed
  isExternal: false
  name: IsBodyConsumed
  nameWithType: BrokeredMessage.IsBodyConsumed
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.IsBodyConsumed
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.ForcePersistence*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.ForcePersistence
  isExternal: false
  name: ForcePersistence
  nameWithType: BrokeredMessage.ForcePersistence
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.ForcePersistence
- uid: System.Runtime.Serialization.DataContractSerializer
  commentId: T:System.Runtime.Serialization.DataContractSerializer
  parent: System.Runtime.Serialization
  isExternal: true
  name: DataContractSerializer
  nameWithType: DataContractSerializer
  fullName: System.Runtime.Serialization.DataContractSerializer
- uid: System.Xml.XmlDictionaryReader
  commentId: T:System.Xml.XmlDictionaryReader
  parent: System.Xml
  isExternal: true
  name: XmlDictionaryReader
  nameWithType: XmlDictionaryReader
  fullName: System.Xml.XmlDictionaryReader
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.GetBody*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.GetBody
  isExternal: false
  name: GetBody<T>
  nameWithType: BrokeredMessage.GetBody<T>
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.GetBody<T>
  nameWithType.vb: BrokeredMessage.GetBody(Of T)
  fullname.vb: Microsoft.ServiceBus.Messaging.BrokeredMessage.GetBody(Of T)
  name.vb: GetBody(Of T)
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: false
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: Microsoft.ServiceBus.Messaging.MessagingFactorySettings
  commentId: T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: MessagingFactorySettings
  nameWithType: MessagingFactorySettings
  fullName: Microsoft.ServiceBus.Messaging.MessagingFactorySettings
- uid: Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout
  commentId: P:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.Abandon*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.Abandon
  isExternal: false
  name: Abandon
  nameWithType: BrokeredMessage.Abandon
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.Abandon
- uid: System.TimeoutException
  commentId: T:System.TimeoutException
- uid: Microsoft.ServiceBus.Messaging.MessagingCommunicationException
  commentId: T:Microsoft.ServiceBus.Messaging.MessagingCommunicationException
  isExternal: false
  name: MessagingCommunicationException
  nameWithType: MessagingCommunicationException
  fullName: Microsoft.ServiceBus.Messaging.MessagingCommunicationException
- uid: Microsoft.ServiceBus.Messaging.ServerBusyException
  commentId: T:Microsoft.ServiceBus.Messaging.ServerBusyException
  isExternal: false
  name: ServerBusyException
  nameWithType: ServerBusyException
  fullName: Microsoft.ServiceBus.Messaging.ServerBusyException
- uid: Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
  commentId: T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
  isExternal: false
  name: MessagingEntityNotFoundException
  nameWithType: MessagingEntityNotFoundException
  fullName: Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
- uid: Microsoft.ServiceBus.Messaging.MessageLockLostException
  commentId: T:Microsoft.ServiceBus.Messaging.MessageLockLostException
  isExternal: false
  name: MessageLockLostException
  nameWithType: MessageLockLostException
  fullName: Microsoft.ServiceBus.Messaging.MessageLockLostException
- uid: Microsoft.ServiceBus.Messaging.SessionLockLostException
  commentId: T:Microsoft.ServiceBus.Messaging.SessionLockLostException
  isExternal: false
  name: SessionLockLostException
  nameWithType: SessionLockLostException
  fullName: Microsoft.ServiceBus.Messaging.SessionLockLostException
- uid: System.UnauthorizedAccessException
  commentId: T:System.UnauthorizedAccessException
- uid: System.ServiceModel.QuotaExceededException
  commentId: T:System.ServiceModel.QuotaExceededException
- uid: System.ServiceModel.CommunicationException
  commentId: T:System.ServiceModel.CommunicationException
  parent: System.ServiceModel
  isExternal: true
  name: CommunicationException
  nameWithType: CommunicationException
  fullName: System.ServiceModel.CommunicationException
- uid: System.ServiceModel
  commentId: N:System.ServiceModel
  isExternal: false
  name: System.ServiceModel
  nameWithType: System.ServiceModel
  fullName: System.ServiceModel
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.AbandonAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.AbandonAsync
  isExternal: false
  name: AbandonAsync
  nameWithType: BrokeredMessage.AbandonAsync
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.AbandonAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.ServiceBus.Messaging.MessagingException.IsTransient
  commentId: P:Microsoft.ServiceBus.Messaging.MessagingException.IsTransient
  parent: Microsoft.ServiceBus.Messaging.MessagingException
  isExternal: false
  name: IsTransient
  nameWithType: MessagingException.IsTransient
  fullName: Microsoft.ServiceBus.Messaging.MessagingException.IsTransient
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.RenewLock
  commentId: M:Microsoft.ServiceBus.Messaging.BrokeredMessage.RenewLock
- uid: Microsoft.ServiceBus.Messaging.MessageSession
  commentId: T:Microsoft.ServiceBus.Messaging.MessageSession
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: MessageSession
  nameWithType: MessageSession
  fullName: Microsoft.ServiceBus.Messaging.MessageSession
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.RenewLock*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.RenewLock
  isExternal: false
  name: RenewLock
  nameWithType: BrokeredMessage.RenewLock
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.RenewLock
- uid: Microsoft.ServiceBus.Messaging.MessagingException
  commentId: T:Microsoft.ServiceBus.Messaging.MessagingException
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: MessagingException
  nameWithType: MessagingException
  fullName: Microsoft.ServiceBus.Messaging.MessagingException
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.RenewLockAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.RenewLockAsync
  isExternal: false
  name: RenewLockAsync
  nameWithType: BrokeredMessage.RenewLockAsync
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.RenewLockAsync
- uid: Microsoft.ServiceBus.Messaging.QueueDescription.LockDuration
  commentId: P:Microsoft.ServiceBus.Messaging.QueueDescription.LockDuration
- uid: Microsoft.ServiceBus.Messaging.SubscriptionDescription.LockDuration
  commentId: P:Microsoft.ServiceBus.Messaging.SubscriptionDescription.LockDuration
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.Complete*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.Complete
  isExternal: false
  name: Complete
  nameWithType: BrokeredMessage.Complete
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.Complete
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.CompleteAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.CompleteAsync
  isExternal: false
  name: CompleteAsync
  nameWithType: BrokeredMessage.CompleteAsync
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.CompleteAsync
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.Defer*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.Defer
  isExternal: false
  name: Defer
  nameWithType: BrokeredMessage.Defer
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.Defer
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeferAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.DeferAsync
  isExternal: false
  name: DeferAsync
  nameWithType: BrokeredMessage.DeferAsync
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeferAsync
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetter*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetter
  isExternal: false
  name: DeadLetter
  nameWithType: BrokeredMessage.DeadLetter
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetter
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetterAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetterAsync
  isExternal: false
  name: DeadLetterAsync
  nameWithType: BrokeredMessage.DeadLetterAsync
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetterAsync
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.Dispose*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.Dispose
  isExternal: false
  name: Dispose
  nameWithType: BrokeredMessage.Dispose
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.ToString*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.ToString
  isExternal: false
  name: ToString
  nameWithType: BrokeredMessage.ToString
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.ToString
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.System#Xml#Serialization#IXmlSerializable#GetSchema*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.System#Xml#Serialization#IXmlSerializable#GetSchema
  isExternal: false
  name: IXmlSerializable.GetSchema
  nameWithType: BrokeredMessage.IXmlSerializable.GetSchema
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.System.Xml.Serialization.IXmlSerializable.GetSchema
  nameWithType.vb: BrokeredMessage.System.Xml.Serialization.IXmlSerializable.GetSchema
  name.vb: System.Xml.Serialization.IXmlSerializable.GetSchema
- uid: System.Xml.Serialization.IXmlSerializable.GetSchema
  commentId: M:System.Xml.Serialization.IXmlSerializable.GetSchema
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: GetSchema()
  nameWithType: IXmlSerializable.GetSchema()
  fullName: System.Xml.Serialization.IXmlSerializable.GetSchema()
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.GetSchema
    name: GetSchema
    nameWithType: IXmlSerializable.GetSchema
    fullName: System.Xml.Serialization.IXmlSerializable.GetSchema
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.GetSchema
    name: GetSchema
    nameWithType: IXmlSerializable.GetSchema
    fullName: System.Xml.Serialization.IXmlSerializable.GetSchema
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.Schema.XmlSchema
  commentId: T:System.Xml.Schema.XmlSchema
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchema
  nameWithType: XmlSchema
  fullName: System.Xml.Schema.XmlSchema
- uid: System.Xml.Schema
  commentId: N:System.Xml.Schema
  isExternal: false
  name: System.Xml.Schema
  nameWithType: System.Xml.Schema
  fullName: System.Xml.Schema
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.System#Xml#Serialization#IXmlSerializable#ReadXml*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.System#Xml#Serialization#IXmlSerializable#ReadXml
  isExternal: false
  name: IXmlSerializable.ReadXml
  nameWithType: BrokeredMessage.IXmlSerializable.ReadXml
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.System.Xml.Serialization.IXmlSerializable.ReadXml
  nameWithType.vb: BrokeredMessage.System.Xml.Serialization.IXmlSerializable.ReadXml
  name.vb: System.Xml.Serialization.IXmlSerializable.ReadXml
- uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  commentId: M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: ReadXml(XmlReader)
  nameWithType: IXmlSerializable.ReadXml(XmlReader)
  fullName: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    nameWithType: IXmlSerializable.ReadXml
    fullName: System.Xml.Serialization.IXmlSerializable.ReadXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)
    name: ReadXml
    nameWithType: IXmlSerializable.ReadXml
    fullName: System.Xml.Serialization.IXmlSerializable.ReadXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlReader
  commentId: T:System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.System#Xml#Serialization#IXmlSerializable#WriteXml*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.System#Xml#Serialization#IXmlSerializable#WriteXml
  isExternal: false
  name: IXmlSerializable.WriteXml
  nameWithType: BrokeredMessage.IXmlSerializable.WriteXml
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.System.Xml.Serialization.IXmlSerializable.WriteXml
  nameWithType.vb: BrokeredMessage.System.Xml.Serialization.IXmlSerializable.WriteXml
  name.vb: System.Xml.Serialization.IXmlSerializable.WriteXml
- uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  commentId: M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  parent: System.Xml.Serialization.IXmlSerializable
  isExternal: true
  name: WriteXml(XmlWriter)
  nameWithType: IXmlSerializable.WriteXml(XmlWriter)
  fullName: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
  spec.csharp:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: IXmlSerializable.WriteXml
    fullName: System.Xml.Serialization.IXmlSerializable.WriteXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)
    name: WriteXml
    nameWithType: IXmlSerializable.WriteXml
    fullName: System.Xml.Serialization.IXmlSerializable.WriteXml
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlWriter
  commentId: T:System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage.Clone*
  commentId: Overload:Microsoft.ServiceBus.Messaging.BrokeredMessage.Clone
  isExternal: false
  name: Clone
  nameWithType: BrokeredMessage.Clone
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage.Clone
