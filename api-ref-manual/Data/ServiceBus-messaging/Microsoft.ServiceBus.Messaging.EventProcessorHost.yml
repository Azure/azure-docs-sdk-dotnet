### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceBus.Messaging.EventProcessorHost
  commentId: T:Microsoft.ServiceBus.Messaging.EventProcessorHost
  id: EventProcessorHost
  parent: Microsoft.ServiceBus.Messaging
  children:
  - Microsoft.ServiceBus.Messaging.EventProcessorHost.#ctor(System.String,System.String,System.String,System.Func{Microsoft.ServiceBus.Messaging.EventProcessorOptions,Microsoft.ServiceBus.Messaging.MessagingFactory},System.Func{Microsoft.WindowsAzure.Storage.Blob.CloudBlobClient})
  - Microsoft.ServiceBus.Messaging.EventProcessorHost.#ctor(System.String,System.String,System.String,System.Func{Microsoft.ServiceBus.Messaging.EventProcessorOptions,Microsoft.ServiceBus.Messaging.MessagingFactory},System.Func{Microsoft.WindowsAzure.Storage.Blob.CloudBlobClient},System.String,System.String)
  - Microsoft.ServiceBus.Messaging.EventProcessorHost.#ctor(System.String,System.String,System.String,System.String)
  - Microsoft.ServiceBus.Messaging.EventProcessorHost.#ctor(System.String,System.String,System.String,System.String,System.String)
  - Microsoft.ServiceBus.Messaging.EventProcessorHost.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)
  - Microsoft.ServiceBus.Messaging.EventProcessorHost.HostName
  - Microsoft.ServiceBus.Messaging.EventProcessorHost.PartitionManagerOptions
  - Microsoft.ServiceBus.Messaging.EventProcessorHost.RegisterEventProcessorAsync``1
  - Microsoft.ServiceBus.Messaging.EventProcessorHost.RegisterEventProcessorAsync``1(Microsoft.ServiceBus.Messaging.EventProcessorOptions)
  - Microsoft.ServiceBus.Messaging.EventProcessorHost.RegisterEventProcessorFactoryAsync(Microsoft.ServiceBus.Messaging.IEventProcessorFactory)
  - Microsoft.ServiceBus.Messaging.EventProcessorHost.RegisterEventProcessorFactoryAsync(Microsoft.ServiceBus.Messaging.IEventProcessorFactory,Microsoft.ServiceBus.Messaging.EventProcessorOptions)
  - Microsoft.ServiceBus.Messaging.EventProcessorHost.ResetAllConnections
  - Microsoft.ServiceBus.Messaging.EventProcessorHost.ResetConnection(System.String)
  - Microsoft.ServiceBus.Messaging.EventProcessorHost.UnregisterEventProcessorAsync
  langs:
  - csharp
  - vb
  name: EventProcessorHost
  nameWithType: EventProcessorHost
  fullName: Microsoft.ServiceBus.Messaging.EventProcessorHost
  type: Class
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging.EventProcessorHost/EventProcessorHost.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: EventProcessorHost
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging.EventProcessorHost/EventProcessorHost.cs
    startLine: 26
  assemblies:
  - Microsoft.ServiceBus.Messaging.EventProcessorHost
  namespace: Microsoft.ServiceBus.Messaging
  summary: "\nA very simple host for processing EventHub messages.  It takes care of distributing EventHub partitions among EventProcessorHost\ninstances.  It creates an Azure Block Blob for each partition in EventHub and use these blobs for managing lease for a partition.\nEvery EventProcessorHost instance is performing the following two tasks:\n1) Renew Leases: It keeps track of leases currently owned by the host and continuously keeps on renewing the leases.\n2) Acquire Leases: Each instance continuously polls all the lease blobs to check if there are any leases it should acquire \nfor the system to get into balanced state.\nClient application needs to implement <xref href=\"Microsoft.ServiceBus.Messaging.IEventProcessor\" data-throw-if-not-resolved=\"false\"></xref> and register processor implementation with EventProcessorHost.\n"
  example: []
  syntax:
    content: 'public class EventProcessorHost : IPartitionObserver<BlobLease>'
    content.vb: >-
      Public Class EventProcessorHost
          Implements IPartitionObserver(Of BlobLease)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.ServiceBus.Messaging.EventProcessorHost.HostName
  commentId: P:Microsoft.ServiceBus.Messaging.EventProcessorHost.HostName
  id: HostName
  parent: Microsoft.ServiceBus.Messaging.EventProcessorHost
  langs:
  - csharp
  - vb
  name: HostName
  nameWithType: EventProcessorHost.HostName
  fullName: Microsoft.ServiceBus.Messaging.EventProcessorHost.HostName
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging.EventProcessorHost/EventProcessorHost.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: HostName
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging.EventProcessorHost/EventProcessorHost.cs
    startLine: 44
  assemblies:
  - Microsoft.ServiceBus.Messaging.EventProcessorHost
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets the host name, which is a unique name for the <xref href="Microsoft.ServiceBus.Messaging.EventProcessorHost" data-throw-if-not-resolved="false"></xref> instance.
  example: []
  syntax:
    content: public string HostName { get; }
    content.vb: Public ReadOnly Property HostName As String
    parameters: []
    return:
      type: System.String
      description: The host name.
  overload: Microsoft.ServiceBus.Messaging.EventProcessorHost.HostName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.EventProcessorHost.PartitionManagerOptions
  commentId: P:Microsoft.ServiceBus.Messaging.EventProcessorHost.PartitionManagerOptions
  id: PartitionManagerOptions
  parent: Microsoft.ServiceBus.Messaging.EventProcessorHost
  langs:
  - csharp
  - vb
  name: PartitionManagerOptions
  nameWithType: EventProcessorHost.PartitionManagerOptions
  fullName: Microsoft.ServiceBus.Messaging.EventProcessorHost.PartitionManagerOptions
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging.EventProcessorHost/EventProcessorHost.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: PartitionManagerOptions
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging.EventProcessorHost/EventProcessorHost.cs
    startLine: 50
  assemblies:
  - Microsoft.ServiceBus.Messaging.EventProcessorHost
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Gets or sets the \n<xref href=\"Microsoft.ServiceBus.Messaging.PartitionManagerOptions\" data-throw-if-not-resolved=\"false\"></xref> instance used by the \n<xref href=\"Microsoft.ServiceBus.Messaging.EventProcessorHost\" data-throw-if-not-resolved=\"false\"></xref> object."
  example: []
  syntax:
    content: public PartitionManagerOptions PartitionManagerOptions { get; set; }
    content.vb: Public Property PartitionManagerOptions As PartitionManagerOptions
    parameters: []
    return:
      type: Microsoft.ServiceBus.Messaging.PartitionManagerOptions
      description: The <xref href="Microsoft.ServiceBus.Messaging.PartitionManagerOptions" data-throw-if-not-resolved="false"></xref> instance.
  overload: Microsoft.ServiceBus.Messaging.EventProcessorHost.PartitionManagerOptions*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventProcessorHost.#ctor(System.String,System.String,System.String,System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.EventProcessorHost.#ctor(System.String,System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String,System.String)'
  parent: Microsoft.ServiceBus.Messaging.EventProcessorHost
  langs:
  - csharp
  - vb
  name: EventProcessorHost(String, String, String, String)
  nameWithType: EventProcessorHost.EventProcessorHost(String, String, String, String)
  fullName: Microsoft.ServiceBus.Messaging.EventProcessorHost.EventProcessorHost(System.String, System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging.EventProcessorHost/EventProcessorHost.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: .ctor
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging.EventProcessorHost/EventProcessorHost.cs
    startLine: 66
  assemblies:
  - Microsoft.ServiceBus.Messaging.EventProcessorHost
  namespace: Microsoft.ServiceBus.Messaging
  summary: "\nCreates new instance of EventProcessorHost.\n"
  example: []
  syntax:
    content: public EventProcessorHost(string eventHubPath, string consumerGroupName, string eventHubConnectionString, string storageConnectionString)
    content.vb: Public Sub New(eventHubPath As String, consumerGroupName As String, eventHubConnectionString As String, storageConnectionString As String)
    parameters:
    - id: eventHubPath
      type: System.String
      description: Event Hub path to start receiving messages from.
    - id: consumerGroupName
      type: System.String
      description: Name of Event Hub consumer group to start receiving messages from.
    - id: eventHubConnectionString
      type: System.String
      description: Connection string for Event Hub.
    - id: storageConnectionString
      type: System.String
      description: Connection string of Azure Blob storage account to use for partition distribution.
  overload: Microsoft.ServiceBus.Messaging.EventProcessorHost.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventProcessorHost.#ctor(System.String,System.String,System.String,System.String,System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.EventProcessorHost.#ctor(System.String,System.String,System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String,System.String,System.String)'
  parent: Microsoft.ServiceBus.Messaging.EventProcessorHost
  langs:
  - csharp
  - vb
  name: EventProcessorHost(String, String, String, String, String)
  nameWithType: EventProcessorHost.EventProcessorHost(String, String, String, String, String)
  fullName: Microsoft.ServiceBus.Messaging.EventProcessorHost.EventProcessorHost(System.String, System.String, System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging.EventProcessorHost/EventProcessorHost.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: .ctor
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging.EventProcessorHost/EventProcessorHost.cs
    startLine: 78
  assemblies:
  - Microsoft.ServiceBus.Messaging.EventProcessorHost
  namespace: Microsoft.ServiceBus.Messaging
  summary: Initializes a new instance of the <xref href="Microsoft.ServiceBus.Messaging.EventProcessorHost" data-throw-if-not-resolved="false"></xref> class.
  example: []
  syntax:
    content: public EventProcessorHost(string hostName, string eventHubPath, string consumerGroupName, string eventHubConnectionString, string storageConnectionString)
    content.vb: Public Sub New(hostName As String, eventHubPath As String, consumerGroupName As String, eventHubConnectionString As String, storageConnectionString As String)
    parameters:
    - id: hostName
      type: System.String
      description: "The name of the \n<xref href=\"Microsoft.ServiceBus.Messaging.EventProcessorHost\" data-throw-if-not-resolved=\"false\"></xref> instance. This name must be unique for each instance of the host."
    - id: eventHubPath
      type: System.String
      description: The path to the Event Hub from which to start receiving event data.
    - id: consumerGroupName
      type: System.String
      description: The name of the Event Hubs consumer group from which to start receiving event data.
    - id: eventHubConnectionString
      type: System.String
      description: The connection string for the Event Hub.
    - id: storageConnectionString
      type: System.String
      description: The connection string for the Azure Blob storage account to use for partition distribution.
  overload: Microsoft.ServiceBus.Messaging.EventProcessorHost.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventProcessorHost.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.EventProcessorHost.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)'
  parent: Microsoft.ServiceBus.Messaging.EventProcessorHost
  langs:
  - csharp
  - vb
  name: EventProcessorHost(String, String, String, String, String, String, String)
  nameWithType: EventProcessorHost.EventProcessorHost(String, String, String, String, String, String, String)
  fullName: Microsoft.ServiceBus.Messaging.EventProcessorHost.EventProcessorHost(System.String, System.String, System.String, System.String, System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging.EventProcessorHost/EventProcessorHost.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: .ctor
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging.EventProcessorHost/EventProcessorHost.cs
    startLine: 93
  assemblies:
  - Microsoft.ServiceBus.Messaging.EventProcessorHost
  namespace: Microsoft.ServiceBus.Messaging
  summary: Initializes a new instance of the <xref href="Microsoft.ServiceBus.Messaging.EventProcessorHost" data-throw-if-not-resolved="false"></xref> class.
  example: []
  syntax:
    content: public EventProcessorHost(string hostName, string eventHubPath, string consumerGroupName, string eventHubConnectionString, string storageConnectionString, string leaseContainerName, string leaseBlobPrefix = null)
    content.vb: Public Sub New(hostName As String, eventHubPath As String, consumerGroupName As String, eventHubConnectionString As String, storageConnectionString As String, leaseContainerName As String, leaseBlobPrefix As String = Nothing)
    parameters:
    - id: hostName
      type: System.String
      description: "The name of the \n<xref href=\"Microsoft.ServiceBus.Messaging.EventProcessorHost\" data-throw-if-not-resolved=\"false\"></xref> instance. This name must be unique for each instance of the host."
    - id: eventHubPath
      type: System.String
      description: The path to the Event Hub from which to start receiving event data.
    - id: consumerGroupName
      type: System.String
      description: The name of the Event Hubs consumer group from which to start receiving event data.
    - id: eventHubConnectionString
      type: System.String
      description: The connection string for the Event Hub.
    - id: storageConnectionString
      type: System.String
      description: The connection string for the Azure Blob storage account to use for partition distribution.
    - id: leaseContainerName
      type: System.String
      description: "The name of the Azure Blob container in which all lease blobs are created. If this \nparameter is not supplied, then the Event Hubs path is used as the name of the Azure Blob container."
    - id: leaseBlobPrefix
      type: System.String
      description: The prefix of lease blob files.
  overload: Microsoft.ServiceBus.Messaging.EventProcessorHost.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventProcessorHost.#ctor(System.String,System.String,System.String,System.Func{Microsoft.ServiceBus.Messaging.EventProcessorOptions,Microsoft.ServiceBus.Messaging.MessagingFactory},System.Func{Microsoft.WindowsAzure.Storage.Blob.CloudBlobClient})
  commentId: M:Microsoft.ServiceBus.Messaging.EventProcessorHost.#ctor(System.String,System.String,System.String,System.Func{Microsoft.ServiceBus.Messaging.EventProcessorOptions,Microsoft.ServiceBus.Messaging.MessagingFactory},System.Func{Microsoft.WindowsAzure.Storage.Blob.CloudBlobClient})
  id: '#ctor(System.String,System.String,System.String,System.Func{Microsoft.ServiceBus.Messaging.EventProcessorOptions,Microsoft.ServiceBus.Messaging.MessagingFactory},System.Func{Microsoft.WindowsAzure.Storage.Blob.CloudBlobClient})'
  parent: Microsoft.ServiceBus.Messaging.EventProcessorHost
  langs:
  - csharp
  - vb
  name: EventProcessorHost(String, String, String, Func<EventProcessorOptions, MessagingFactory>, Func<CloudBlobClient>)
  nameWithType: EventProcessorHost.EventProcessorHost(String, String, String, Func<EventProcessorOptions, MessagingFactory>, Func<CloudBlobClient>)
  fullName: Microsoft.ServiceBus.Messaging.EventProcessorHost.EventProcessorHost(System.String, System.String, System.String, System.Func<Microsoft.ServiceBus.Messaging.EventProcessorOptions, Microsoft.ServiceBus.Messaging.MessagingFactory>, System.Func<Microsoft.WindowsAzure.Storage.Blob.CloudBlobClient>)
  type: Constructor
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging.EventProcessorHost/EventProcessorHost.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: .ctor
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging.EventProcessorHost/EventProcessorHost.cs
    startLine: 111
  assemblies:
  - Microsoft.ServiceBus.Messaging.EventProcessorHost
  namespace: Microsoft.ServiceBus.Messaging
  summary: "\nCreates new instance of EventProcessorHost.\n"
  example: []
  syntax:
    content: public EventProcessorHost(string hostName, string eventHubPath, string consumerGroupName, Func<EventProcessorOptions, MessagingFactory> eventHubClientFactory, Func<CloudBlobClient> storageClientFactory)
    content.vb: Public Sub New(hostName As String, eventHubPath As String, consumerGroupName As String, eventHubClientFactory As Func(Of EventProcessorOptions, MessagingFactory), storageClientFactory As Func(Of CloudBlobClient))
    parameters:
    - id: hostName
      type: System.String
      description: Name for EventProcessorHost instance.  This must be unique for each instance of the host.
    - id: eventHubPath
      type: System.String
      description: EventHub path to start receiving messages from.
    - id: consumerGroupName
      type: System.String
      description: Name of EventHub consumer group to start receiving messages from.
    - id: eventHubClientFactory
      type: System.Func{Microsoft.ServiceBus.Messaging.EventProcessorOptions,Microsoft.ServiceBus.Messaging.MessagingFactory}
      description: >-
        Factory to initialize <xref href="Microsoft.ServiceBus.Messaging.MessagingFactory" data-throw-if-not-resolved="false"></xref> to be used by EventProcessorHost for creating <xref href="Microsoft.ServiceBus.Messaging.EventHubClient" data-throw-if-not-resolved="false"></xref>

        and eventually <xref href="Microsoft.ServiceBus.Messaging.EventHubReceiver" data-throw-if-not-resolved="false"></xref>.  EventProcessorHost maintains a pool of these <xref href="Microsoft.ServiceBus.Messaging.MessagingFactory" data-throw-if-not-resolved="false"></xref> objects and will use provided factory whenever

        a new instance needs to be created based on <xref href="Microsoft.ServiceBus.Messaging.PartitionManagerOptions.MaxReceiveClients" data-throw-if-not-resolved="false"></xref> option.
    - id: storageClientFactory
      type: System.Func{Microsoft.WindowsAzure.Storage.Blob.CloudBlobClient}
      description: "Factory to initialize <xref href=\"Microsoft.ServiceBus.Messaging.EventProcessorHost.CloudBlobClient\" data-throw-if-not-resolved=\"false\"></xref> which is used by EventProcessorHost for lease management and partition \ndistribution among available hosts."
  overload: Microsoft.ServiceBus.Messaging.EventProcessorHost.#ctor*
  nameWithType.vb: EventProcessorHost.EventProcessorHost(String, String, String, Func(Of EventProcessorOptions, MessagingFactory), Func(Of CloudBlobClient))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.EventProcessorHost.EventProcessorHost(System.String, System.String, System.String, System.Func(Of Microsoft.ServiceBus.Messaging.EventProcessorOptions, Microsoft.ServiceBus.Messaging.MessagingFactory), System.Func(Of Microsoft.WindowsAzure.Storage.Blob.CloudBlobClient))
  name.vb: EventProcessorHost(String, String, String, Func(Of EventProcessorOptions, MessagingFactory), Func(Of CloudBlobClient))
- uid: Microsoft.ServiceBus.Messaging.EventProcessorHost.#ctor(System.String,System.String,System.String,System.Func{Microsoft.ServiceBus.Messaging.EventProcessorOptions,Microsoft.ServiceBus.Messaging.MessagingFactory},System.Func{Microsoft.WindowsAzure.Storage.Blob.CloudBlobClient},System.String,System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.EventProcessorHost.#ctor(System.String,System.String,System.String,System.Func{Microsoft.ServiceBus.Messaging.EventProcessorOptions,Microsoft.ServiceBus.Messaging.MessagingFactory},System.Func{Microsoft.WindowsAzure.Storage.Blob.CloudBlobClient},System.String,System.String)
  id: '#ctor(System.String,System.String,System.String,System.Func{Microsoft.ServiceBus.Messaging.EventProcessorOptions,Microsoft.ServiceBus.Messaging.MessagingFactory},System.Func{Microsoft.WindowsAzure.Storage.Blob.CloudBlobClient},System.String,System.String)'
  parent: Microsoft.ServiceBus.Messaging.EventProcessorHost
  langs:
  - csharp
  - vb
  name: EventProcessorHost(String, String, String, Func<EventProcessorOptions, MessagingFactory>, Func<CloudBlobClient>, String, String)
  nameWithType: EventProcessorHost.EventProcessorHost(String, String, String, Func<EventProcessorOptions, MessagingFactory>, Func<CloudBlobClient>, String, String)
  fullName: Microsoft.ServiceBus.Messaging.EventProcessorHost.EventProcessorHost(System.String, System.String, System.String, System.Func<Microsoft.ServiceBus.Messaging.EventProcessorOptions, Microsoft.ServiceBus.Messaging.MessagingFactory>, System.Func<Microsoft.WindowsAzure.Storage.Blob.CloudBlobClient>, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging.EventProcessorHost/EventProcessorHost.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: .ctor
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging.EventProcessorHost/EventProcessorHost.cs
    startLine: 131
  assemblies:
  - Microsoft.ServiceBus.Messaging.EventProcessorHost
  namespace: Microsoft.ServiceBus.Messaging
  summary: "\nCreates new instance of EventProcessorHost.\n"
  example: []
  syntax:
    content: public EventProcessorHost(string hostName, string eventHubPath, string consumerGroupName, Func<EventProcessorOptions, MessagingFactory> eventHubClientFactory, Func<CloudBlobClient> storageClientFactory, string leaseContainerName, string leaseBlobPrefix = null)
    content.vb: Public Sub New(hostName As String, eventHubPath As String, consumerGroupName As String, eventHubClientFactory As Func(Of EventProcessorOptions, MessagingFactory), storageClientFactory As Func(Of CloudBlobClient), leaseContainerName As String, leaseBlobPrefix As String = Nothing)
    parameters:
    - id: hostName
      type: System.String
      description: Name for EventProcessorHost instance.  This must be unique for each instance of the host.
    - id: eventHubPath
      type: System.String
      description: EventHub path to start receiving messages from.
    - id: consumerGroupName
      type: System.String
      description: Name of EventHub consumer group to start receiving messages from.
    - id: eventHubClientFactory
      type: System.Func{Microsoft.ServiceBus.Messaging.EventProcessorOptions,Microsoft.ServiceBus.Messaging.MessagingFactory}
      description: >-
        Factory to initialize <xref href="Microsoft.ServiceBus.Messaging.MessagingFactory" data-throw-if-not-resolved="false"></xref> to be used by EventProcessorHost for creating <xref href="Microsoft.ServiceBus.Messaging.EventHubClient" data-throw-if-not-resolved="false"></xref>

        and eventually <xref href="Microsoft.ServiceBus.Messaging.EventHubReceiver" data-throw-if-not-resolved="false"></xref>.  EventProcessorHost maintains a pool of these <xref href="Microsoft.ServiceBus.Messaging.MessagingFactory" data-throw-if-not-resolved="false"></xref> objects and will use provided factory whenever

        a new instance needs to be created based on <xref href="Microsoft.ServiceBus.Messaging.PartitionManagerOptions.MaxReceiveClients" data-throw-if-not-resolved="false"></xref> option.
    - id: storageClientFactory
      type: System.Func{Microsoft.WindowsAzure.Storage.Blob.CloudBlobClient}
      description: "Factory to initialize <xref href=\"Microsoft.ServiceBus.Messaging.EventProcessorHost.CloudBlobClient\" data-throw-if-not-resolved=\"false\"></xref> which is used by EventProcessorHost for lease management and partition \ndistribution among available hosts."
    - id: leaseContainerName
      type: System.String
      description: "Name of Azure Blob container where all lease blobs are created.  If this is not passed in then EventHub path \nis used as the name of Azure Blob container."
    - id: leaseBlobPrefix
      type: System.String
      description: The prefix of lease blob files.
  overload: Microsoft.ServiceBus.Messaging.EventProcessorHost.#ctor*
  nameWithType.vb: EventProcessorHost.EventProcessorHost(String, String, String, Func(Of EventProcessorOptions, MessagingFactory), Func(Of CloudBlobClient), String, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.EventProcessorHost.EventProcessorHost(System.String, System.String, System.String, System.Func(Of Microsoft.ServiceBus.Messaging.EventProcessorOptions, Microsoft.ServiceBus.Messaging.MessagingFactory), System.Func(Of Microsoft.WindowsAzure.Storage.Blob.CloudBlobClient), System.String, System.String)
  name.vb: EventProcessorHost(String, String, String, Func(Of EventProcessorOptions, MessagingFactory), Func(Of CloudBlobClient), String, String)
- uid: Microsoft.ServiceBus.Messaging.EventProcessorHost.RegisterEventProcessorAsync``1
  commentId: M:Microsoft.ServiceBus.Messaging.EventProcessorHost.RegisterEventProcessorAsync``1
  id: RegisterEventProcessorAsync``1
  parent: Microsoft.ServiceBus.Messaging.EventProcessorHost
  langs:
  - csharp
  - vb
  name: RegisterEventProcessorAsync<T>()
  nameWithType: EventProcessorHost.RegisterEventProcessorAsync<T>()
  fullName: Microsoft.ServiceBus.Messaging.EventProcessorHost.RegisterEventProcessorAsync<T>()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging.EventProcessorHost/EventProcessorHost.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: RegisterEventProcessorAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging.EventProcessorHost/EventProcessorHost.cs
    startLine: 153
  assemblies:
  - Microsoft.ServiceBus.Messaging.EventProcessorHost
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Asynchronously registers the \n<xref href=\"Microsoft.ServiceBus.Messaging.IEventProcessor\" data-throw-if-not-resolved=\"false\"></xref> interface implementation with the host using the \n<xref href=\"Microsoft.ServiceBus.Messaging.DefaultEventProcessorFactory%601\" data-throw-if-not-resolved=\"false\"></xref> factory. This method also starts the host and enables it to start participating in the partition distribution process."
  example: []
  syntax:
    content: 'public Task RegisterEventProcessorAsync<T>()where T : IEventProcessor'
    content.vb: Public Function RegisterEventProcessorAsync(Of T As IEventProcessor) As Task
    typeParameters:
    - id: T
      description: Implementation of your application-specific <xref href="Microsoft.ServiceBus.Messaging.IEventProcessor" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: A task indicating that the <xref href="Microsoft.ServiceBus.Messaging.EventProcessorHost" data-throw-if-not-resolved="false"></xref> instance has started.
  overload: Microsoft.ServiceBus.Messaging.EventProcessorHost.RegisterEventProcessorAsync*
  nameWithType.vb: EventProcessorHost.RegisterEventProcessorAsync(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.EventProcessorHost.RegisterEventProcessorAsync(Of T)()
  name.vb: RegisterEventProcessorAsync(Of T)()
- uid: Microsoft.ServiceBus.Messaging.EventProcessorHost.RegisterEventProcessorAsync``1(Microsoft.ServiceBus.Messaging.EventProcessorOptions)
  commentId: M:Microsoft.ServiceBus.Messaging.EventProcessorHost.RegisterEventProcessorAsync``1(Microsoft.ServiceBus.Messaging.EventProcessorOptions)
  id: RegisterEventProcessorAsync``1(Microsoft.ServiceBus.Messaging.EventProcessorOptions)
  parent: Microsoft.ServiceBus.Messaging.EventProcessorHost
  langs:
  - csharp
  - vb
  name: RegisterEventProcessorAsync<T>(EventProcessorOptions)
  nameWithType: EventProcessorHost.RegisterEventProcessorAsync<T>(EventProcessorOptions)
  fullName: Microsoft.ServiceBus.Messaging.EventProcessorHost.RegisterEventProcessorAsync<T>(Microsoft.ServiceBus.Messaging.EventProcessorOptions)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging.EventProcessorHost/EventProcessorHost.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: RegisterEventProcessorAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging.EventProcessorHost/EventProcessorHost.cs
    startLine: 166
  assemblies:
  - Microsoft.ServiceBus.Messaging.EventProcessorHost
  namespace: Microsoft.ServiceBus.Messaging
  summary: "\nThis registers <xref href=\"Microsoft.ServiceBus.Messaging.IEventProcessor\" data-throw-if-not-resolved=\"false\"></xref> implementation with the host using <xref href=\"Microsoft.ServiceBus.Messaging.DefaultEventProcessorFactory%601\" data-throw-if-not-resolved=\"false\"></xref>.  \nThis also starts the host and causes it to start participating in the partition distribution process.\n"
  example: []
  syntax:
    content: 'public Task RegisterEventProcessorAsync<T>(EventProcessorOptions processorOptions)where T : IEventProcessor'
    content.vb: Public Function RegisterEventProcessorAsync(Of T As IEventProcessor)(processorOptions As EventProcessorOptions) As Task
    parameters:
    - id: processorOptions
      type: Microsoft.ServiceBus.Messaging.EventProcessorOptions
      description: "<xref href=\"Microsoft.ServiceBus.Messaging.EventProcessorOptions\" data-throw-if-not-resolved=\"false\"></xref> to control various aspects of message pump created when ownership \n    is acquired for a particular partition of EventHub."
    typeParameters:
    - id: T
      description: Implementation of your application specific <xref href="Microsoft.ServiceBus.Messaging.IEventProcessor" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: A task to indicate EventProcessorHost instance is started.
  overload: Microsoft.ServiceBus.Messaging.EventProcessorHost.RegisterEventProcessorAsync*
  nameWithType.vb: EventProcessorHost.RegisterEventProcessorAsync(Of T)(EventProcessorOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.EventProcessorHost.RegisterEventProcessorAsync(Of T)(Microsoft.ServiceBus.Messaging.EventProcessorOptions)
  name.vb: RegisterEventProcessorAsync(Of T)(EventProcessorOptions)
- uid: Microsoft.ServiceBus.Messaging.EventProcessorHost.RegisterEventProcessorFactoryAsync(Microsoft.ServiceBus.Messaging.IEventProcessorFactory)
  commentId: M:Microsoft.ServiceBus.Messaging.EventProcessorHost.RegisterEventProcessorFactoryAsync(Microsoft.ServiceBus.Messaging.IEventProcessorFactory)
  id: RegisterEventProcessorFactoryAsync(Microsoft.ServiceBus.Messaging.IEventProcessorFactory)
  parent: Microsoft.ServiceBus.Messaging.EventProcessorHost
  langs:
  - csharp
  - vb
  name: RegisterEventProcessorFactoryAsync(IEventProcessorFactory)
  nameWithType: EventProcessorHost.RegisterEventProcessorFactoryAsync(IEventProcessorFactory)
  fullName: Microsoft.ServiceBus.Messaging.EventProcessorHost.RegisterEventProcessorFactoryAsync(Microsoft.ServiceBus.Messaging.IEventProcessorFactory)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging.EventProcessorHost/EventProcessorHost.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: RegisterEventProcessorFactoryAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging.EventProcessorHost/EventProcessorHost.cs
    startLine: 179
  assemblies:
  - Microsoft.ServiceBus.Messaging.EventProcessorHost
  namespace: Microsoft.ServiceBus.Messaging
  summary: "\nThis registers <xref href=\"Microsoft.ServiceBus.Messaging.IEventProcessorFactory\" data-throw-if-not-resolved=\"false\"></xref> implementation with the host which is used to create an instance of \n<xref href=\"Microsoft.ServiceBus.Messaging.IEventProcessor\" data-throw-if-not-resolved=\"false\"></xref> when it takes ownership of a partition.  This also starts the host and causes it to start participating \nin the partition distribution process.\n"
  example: []
  syntax:
    content: public Task RegisterEventProcessorFactoryAsync(IEventProcessorFactory factory)
    content.vb: Public Function RegisterEventProcessorFactoryAsync(factory As IEventProcessorFactory) As Task
    parameters:
    - id: factory
      type: Microsoft.ServiceBus.Messaging.IEventProcessorFactory
      description: Instance of <xref href="Microsoft.ServiceBus.Messaging.IEventProcessorFactory" data-throw-if-not-resolved="false"></xref> implementation.
    return:
      type: System.Threading.Tasks.Task
      description: A task to indicate EventProcessorHost instance is started.
  overload: Microsoft.ServiceBus.Messaging.EventProcessorHost.RegisterEventProcessorFactoryAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventProcessorHost.RegisterEventProcessorFactoryAsync(Microsoft.ServiceBus.Messaging.IEventProcessorFactory,Microsoft.ServiceBus.Messaging.EventProcessorOptions)
  commentId: M:Microsoft.ServiceBus.Messaging.EventProcessorHost.RegisterEventProcessorFactoryAsync(Microsoft.ServiceBus.Messaging.IEventProcessorFactory,Microsoft.ServiceBus.Messaging.EventProcessorOptions)
  id: RegisterEventProcessorFactoryAsync(Microsoft.ServiceBus.Messaging.IEventProcessorFactory,Microsoft.ServiceBus.Messaging.EventProcessorOptions)
  parent: Microsoft.ServiceBus.Messaging.EventProcessorHost
  langs:
  - csharp
  - vb
  name: RegisterEventProcessorFactoryAsync(IEventProcessorFactory, EventProcessorOptions)
  nameWithType: EventProcessorHost.RegisterEventProcessorFactoryAsync(IEventProcessorFactory, EventProcessorOptions)
  fullName: Microsoft.ServiceBus.Messaging.EventProcessorHost.RegisterEventProcessorFactoryAsync(Microsoft.ServiceBus.Messaging.IEventProcessorFactory, Microsoft.ServiceBus.Messaging.EventProcessorOptions)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging.EventProcessorHost/EventProcessorHost.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: RegisterEventProcessorFactoryAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging.EventProcessorHost/EventProcessorHost.cs
    startLine: 193
  assemblies:
  - Microsoft.ServiceBus.Messaging.EventProcessorHost
  namespace: Microsoft.ServiceBus.Messaging
  summary: "\nThis registers <xref href=\"Microsoft.ServiceBus.Messaging.IEventProcessorFactory\" data-throw-if-not-resolved=\"false\"></xref> implementation with the host which is used to create an instance of \n<xref href=\"Microsoft.ServiceBus.Messaging.IEventProcessor\" data-throw-if-not-resolved=\"false\"></xref> when it takes ownership of a partition.  This also starts the host and causes it to start participating \nin the partition distribution process.\n"
  example: []
  syntax:
    content: public Task RegisterEventProcessorFactoryAsync(IEventProcessorFactory factory, EventProcessorOptions processorOptions)
    content.vb: Public Function RegisterEventProcessorFactoryAsync(factory As IEventProcessorFactory, processorOptions As EventProcessorOptions) As Task
    parameters:
    - id: factory
      type: Microsoft.ServiceBus.Messaging.IEventProcessorFactory
      description: Instance of <xref href="Microsoft.ServiceBus.Messaging.IEventProcessorFactory" data-throw-if-not-resolved="false"></xref> implementation.
    - id: processorOptions
      type: Microsoft.ServiceBus.Messaging.EventProcessorOptions
      description: "<xref href=\"Microsoft.ServiceBus.Messaging.EventProcessorOptions\" data-throw-if-not-resolved=\"false\"></xref> to control various aspects of message pump created when ownership \n    is acquired for a particular partition of EventHub."
    return:
      type: System.Threading.Tasks.Task
      description: A task to indicate EventProcessorHost instance is started.
  overload: Microsoft.ServiceBus.Messaging.EventProcessorHost.RegisterEventProcessorFactoryAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventProcessorHost.UnregisterEventProcessorAsync
  commentId: M:Microsoft.ServiceBus.Messaging.EventProcessorHost.UnregisterEventProcessorAsync
  id: UnregisterEventProcessorAsync
  parent: Microsoft.ServiceBus.Messaging.EventProcessorHost
  langs:
  - csharp
  - vb
  name: UnregisterEventProcessorAsync()
  nameWithType: EventProcessorHost.UnregisterEventProcessorAsync()
  fullName: Microsoft.ServiceBus.Messaging.EventProcessorHost.UnregisterEventProcessorAsync()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging.EventProcessorHost/EventProcessorHost.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: UnregisterEventProcessorAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging.EventProcessorHost/EventProcessorHost.cs
    startLine: 206
  assemblies:
  - Microsoft.ServiceBus.Messaging.EventProcessorHost
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Asynchronously shuts down the \n<xref href=\"Microsoft.ServiceBus.Messaging.EventProcessorHost\" data-throw-if-not-resolved=\"false\"></xref> instance. This method maintains the leases on all partitions currently held, and enables each \n<xref href=\"Microsoft.ServiceBus.Messaging.IEventProcessor\" data-throw-if-not-resolved=\"false\"></xref> instance to shut down cleanly by invoking the \n<xref href=\"Microsoft.ServiceBus.Messaging.IEventProcessor.CloseAsync(Microsoft.ServiceBus.Messaging.PartitionContext%2cMicrosoft.ServiceBus.Messaging.CloseReason)\" data-throw-if-not-resolved=\"false\"></xref> method with a \n<xref href=\"Microsoft.ServiceBus.Messaging.CloseReason.Shutdown\" data-throw-if-not-resolved=\"false\"></xref> object."
  example: []
  syntax:
    content: public Task UnregisterEventProcessorAsync()
    content.vb: Public Function UnregisterEventProcessorAsync As Task
    return:
      type: System.Threading.Tasks.Task
      description: A task that indicates the <xref href="Microsoft.ServiceBus.Messaging.EventProcessorHost" data-throw-if-not-resolved="false"></xref> instance has stopped.
  overload: Microsoft.ServiceBus.Messaging.EventProcessorHost.UnregisterEventProcessorAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventProcessorHost.ResetConnection(System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.EventProcessorHost.ResetConnection(System.String)
  id: ResetConnection(System.String)
  parent: Microsoft.ServiceBus.Messaging.EventProcessorHost
  langs:
  - csharp
  - vb
  name: ResetConnection(String)
  nameWithType: EventProcessorHost.ResetConnection(String)
  fullName: Microsoft.ServiceBus.Messaging.EventProcessorHost.ResetConnection(System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging.EventProcessorHost/EventProcessorHost.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ResetConnection
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging.EventProcessorHost/EventProcessorHost.cs
    startLine: 214
  assemblies:
  - Microsoft.ServiceBus.Messaging.EventProcessorHost
  namespace: Microsoft.ServiceBus.Messaging
  summary: ''
  example: []
  syntax:
    content: public void ResetConnection(string partitionId)
    content.vb: Public Sub ResetConnection(partitionId As String)
    parameters:
    - id: partitionId
      type: System.String
      description: ''
  overload: Microsoft.ServiceBus.Messaging.EventProcessorHost.ResetConnection*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventProcessorHost.ResetAllConnections
  commentId: M:Microsoft.ServiceBus.Messaging.EventProcessorHost.ResetAllConnections
  id: ResetAllConnections
  parent: Microsoft.ServiceBus.Messaging.EventProcessorHost
  langs:
  - csharp
  - vb
  name: ResetAllConnections()
  nameWithType: EventProcessorHost.ResetAllConnections()
  fullName: Microsoft.ServiceBus.Messaging.EventProcessorHost.ResetAllConnections()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging.EventProcessorHost/EventProcessorHost.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ResetAllConnections
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging.EventProcessorHost/EventProcessorHost.cs
    startLine: 246
  assemblies:
  - Microsoft.ServiceBus.Messaging.EventProcessorHost
  namespace: Microsoft.ServiceBus.Messaging
  summary: "\nReset all Event Hubs receiver connections used by this instance of EventProcessorHost.\n"
  example: []
  syntax:
    content: public void ResetAllConnections()
    content.vb: Public Sub ResetAllConnections
  overload: Microsoft.ServiceBus.Messaging.EventProcessorHost.ResetAllConnections*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.ServiceBus.Messaging.IEventProcessor
  commentId: T:Microsoft.ServiceBus.Messaging.IEventProcessor
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: IEventProcessor
  nameWithType: IEventProcessor
  fullName: Microsoft.ServiceBus.Messaging.IEventProcessor
- uid: Microsoft.ServiceBus.Messaging
  commentId: N:Microsoft.ServiceBus.Messaging
  isExternal: false
  name: Microsoft.ServiceBus.Messaging
  nameWithType: Microsoft.ServiceBus.Messaging
  fullName: Microsoft.ServiceBus.Messaging
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.ServiceBus.Messaging.EventProcessorHost
  commentId: T:Microsoft.ServiceBus.Messaging.EventProcessorHost
  isExternal: false
  name: EventProcessorHost
  nameWithType: EventProcessorHost
  fullName: Microsoft.ServiceBus.Messaging.EventProcessorHost
- uid: Microsoft.ServiceBus.Messaging.EventProcessorHost.HostName*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventProcessorHost.HostName
  isExternal: false
  name: HostName
  nameWithType: EventProcessorHost.HostName
  fullName: Microsoft.ServiceBus.Messaging.EventProcessorHost.HostName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.ServiceBus.Messaging.PartitionManagerOptions
  commentId: T:Microsoft.ServiceBus.Messaging.PartitionManagerOptions
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: PartitionManagerOptions
  nameWithType: PartitionManagerOptions
  fullName: Microsoft.ServiceBus.Messaging.PartitionManagerOptions
- uid: Microsoft.ServiceBus.Messaging.EventProcessorHost.PartitionManagerOptions*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventProcessorHost.PartitionManagerOptions
  isExternal: false
  name: PartitionManagerOptions
  nameWithType: EventProcessorHost.PartitionManagerOptions
  fullName: Microsoft.ServiceBus.Messaging.EventProcessorHost.PartitionManagerOptions
- uid: Microsoft.ServiceBus.Messaging.EventProcessorHost.#ctor*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventProcessorHost.#ctor
  isExternal: false
  name: EventProcessorHost
  nameWithType: EventProcessorHost.EventProcessorHost
  fullName: Microsoft.ServiceBus.Messaging.EventProcessorHost.EventProcessorHost
- uid: Microsoft.ServiceBus.Messaging.MessagingFactory
  commentId: T:Microsoft.ServiceBus.Messaging.MessagingFactory
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: MessagingFactory
  nameWithType: MessagingFactory
  fullName: Microsoft.ServiceBus.Messaging.MessagingFactory
- uid: Microsoft.ServiceBus.Messaging.EventHubClient
  commentId: T:Microsoft.ServiceBus.Messaging.EventHubClient
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: EventHubClient
  nameWithType: EventHubClient
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver
  commentId: T:Microsoft.ServiceBus.Messaging.EventHubReceiver
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: EventHubReceiver
  nameWithType: EventHubReceiver
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver
- uid: Microsoft.ServiceBus.Messaging.PartitionManagerOptions.MaxReceiveClients
  commentId: P:Microsoft.ServiceBus.Messaging.PartitionManagerOptions.MaxReceiveClients
- uid: Microsoft.ServiceBus.Messaging.EventProcessorHost.CloudBlobClient
  commentId: P:Microsoft.ServiceBus.Messaging.EventProcessorHost.CloudBlobClient
- uid: System.Func{Microsoft.ServiceBus.Messaging.EventProcessorOptions,Microsoft.ServiceBus.Messaging.MessagingFactory}
  commentId: T:System.Func{Microsoft.ServiceBus.Messaging.EventProcessorOptions,Microsoft.ServiceBus.Messaging.MessagingFactory}
  parent: System
  definition: System.Func`2
  name: Func<EventProcessorOptions, MessagingFactory>
  nameWithType: Func<EventProcessorOptions, MessagingFactory>
  fullName: System.Func<Microsoft.ServiceBus.Messaging.EventProcessorOptions, Microsoft.ServiceBus.Messaging.MessagingFactory>
  nameWithType.vb: Func(Of EventProcessorOptions, MessagingFactory)
  fullname.vb: System.Func(Of Microsoft.ServiceBus.Messaging.EventProcessorOptions, Microsoft.ServiceBus.Messaging.MessagingFactory)
  name.vb: Func(Of EventProcessorOptions, MessagingFactory)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.EventProcessorOptions
    name: EventProcessorOptions
    nameWithType: EventProcessorOptions
    fullName: Microsoft.ServiceBus.Messaging.EventProcessorOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.ServiceBus.Messaging.MessagingFactory
    name: MessagingFactory
    nameWithType: MessagingFactory
    fullName: Microsoft.ServiceBus.Messaging.MessagingFactory
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.EventProcessorOptions
    name: EventProcessorOptions
    nameWithType: EventProcessorOptions
    fullName: Microsoft.ServiceBus.Messaging.EventProcessorOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.ServiceBus.Messaging.MessagingFactory
    name: MessagingFactory
    nameWithType: MessagingFactory
    fullName: Microsoft.ServiceBus.Messaging.MessagingFactory
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{Microsoft.WindowsAzure.Storage.Blob.CloudBlobClient}
  commentId: T:System.Func{Microsoft.WindowsAzure.Storage.Blob.CloudBlobClient}
  parent: System
  definition: System.Func`1
  name: Func<CloudBlobClient>
  nameWithType: Func<CloudBlobClient>
  fullName: System.Func<Microsoft.WindowsAzure.Storage.Blob.CloudBlobClient>
  nameWithType.vb: Func(Of CloudBlobClient)
  fullname.vb: System.Func(Of Microsoft.WindowsAzure.Storage.Blob.CloudBlobClient)
  name.vb: Func(Of CloudBlobClient)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.WindowsAzure.Storage.Blob.CloudBlobClient
    name: CloudBlobClient
    nameWithType: CloudBlobClient
    fullName: Microsoft.WindowsAzure.Storage.Blob.CloudBlobClient
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.WindowsAzure.Storage.Blob.CloudBlobClient
    name: CloudBlobClient
    nameWithType: CloudBlobClient
    fullName: Microsoft.WindowsAzure.Storage.Blob.CloudBlobClient
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullname.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.DefaultEventProcessorFactory`1
  commentId: T:Microsoft.ServiceBus.Messaging.DefaultEventProcessorFactory`1
  isExternal: false
  name: DefaultEventProcessorFactory<T>
  nameWithType: DefaultEventProcessorFactory<T>
  fullName: Microsoft.ServiceBus.Messaging.DefaultEventProcessorFactory<T>
  nameWithType.vb: DefaultEventProcessorFactory(Of T)
  fullname.vb: Microsoft.ServiceBus.Messaging.DefaultEventProcessorFactory(Of T)
  name.vb: DefaultEventProcessorFactory(Of T)
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.DefaultEventProcessorFactory`1
    name: DefaultEventProcessorFactory
    nameWithType: DefaultEventProcessorFactory
    fullName: Microsoft.ServiceBus.Messaging.DefaultEventProcessorFactory
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.DefaultEventProcessorFactory`1
    name: DefaultEventProcessorFactory
    nameWithType: DefaultEventProcessorFactory
    fullName: Microsoft.ServiceBus.Messaging.DefaultEventProcessorFactory
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.EventProcessorHost.RegisterEventProcessorAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventProcessorHost.RegisterEventProcessorAsync
  isExternal: false
  name: RegisterEventProcessorAsync<T>
  nameWithType: EventProcessorHost.RegisterEventProcessorAsync<T>
  fullName: Microsoft.ServiceBus.Messaging.EventProcessorHost.RegisterEventProcessorAsync<T>
  nameWithType.vb: EventProcessorHost.RegisterEventProcessorAsync(Of T)
  fullname.vb: Microsoft.ServiceBus.Messaging.EventProcessorHost.RegisterEventProcessorAsync(Of T)
  name.vb: RegisterEventProcessorAsync(Of T)
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.ServiceBus.Messaging.EventProcessorOptions
  commentId: T:Microsoft.ServiceBus.Messaging.EventProcessorOptions
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: EventProcessorOptions
  nameWithType: EventProcessorOptions
  fullName: Microsoft.ServiceBus.Messaging.EventProcessorOptions
- uid: Microsoft.ServiceBus.Messaging.IEventProcessorFactory
  commentId: T:Microsoft.ServiceBus.Messaging.IEventProcessorFactory
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: IEventProcessorFactory
  nameWithType: IEventProcessorFactory
  fullName: Microsoft.ServiceBus.Messaging.IEventProcessorFactory
- uid: Microsoft.ServiceBus.Messaging.EventProcessorHost.RegisterEventProcessorFactoryAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventProcessorHost.RegisterEventProcessorFactoryAsync
  isExternal: false
  name: RegisterEventProcessorFactoryAsync
  nameWithType: EventProcessorHost.RegisterEventProcessorFactoryAsync
  fullName: Microsoft.ServiceBus.Messaging.EventProcessorHost.RegisterEventProcessorFactoryAsync
- uid: Microsoft.ServiceBus.Messaging.IEventProcessor.CloseAsync(Microsoft.ServiceBus.Messaging.PartitionContext,Microsoft.ServiceBus.Messaging.CloseReason)
  commentId: M:Microsoft.ServiceBus.Messaging.IEventProcessor.CloseAsync(Microsoft.ServiceBus.Messaging.PartitionContext,Microsoft.ServiceBus.Messaging.CloseReason)
- uid: Microsoft.ServiceBus.Messaging.CloseReason.Shutdown
  commentId: F:Microsoft.ServiceBus.Messaging.CloseReason.Shutdown
- uid: Microsoft.ServiceBus.Messaging.EventProcessorHost.UnregisterEventProcessorAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventProcessorHost.UnregisterEventProcessorAsync
  isExternal: false
  name: UnregisterEventProcessorAsync
  nameWithType: EventProcessorHost.UnregisterEventProcessorAsync
  fullName: Microsoft.ServiceBus.Messaging.EventProcessorHost.UnregisterEventProcessorAsync
- uid: Microsoft.ServiceBus.Messaging.EventProcessorHost.ResetConnection*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventProcessorHost.ResetConnection
  isExternal: false
  name: ResetConnection
  nameWithType: EventProcessorHost.ResetConnection
  fullName: Microsoft.ServiceBus.Messaging.EventProcessorHost.ResetConnection
- uid: Microsoft.ServiceBus.Messaging.EventProcessorHost.ResetAllConnections*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventProcessorHost.ResetAllConnections
  isExternal: false
  name: ResetAllConnections
  nameWithType: EventProcessorHost.ResetAllConnections
  fullName: Microsoft.ServiceBus.Messaging.EventProcessorHost.ResetAllConnections
