### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient
  commentId: T:Microsoft.ServiceBus.Messaging.SubscriptionClient
  id: SubscriptionClient
  parent: Microsoft.ServiceBus.Messaging
  children:
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.Abandon(System.Guid)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.Abandon(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.AbandonAsync(System.Guid)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.AbandonAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSession
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSession(System.String)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSession(System.String,System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSession(System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSessionAsync
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSessionAsync(System.String)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSessionAsync(System.String,System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSessionAsync(System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.AddRule(Microsoft.ServiceBus.Messaging.RuleDescription)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.AddRule(System.String,Microsoft.ServiceBus.Messaging.Filter)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.AddRuleAsync(Microsoft.ServiceBus.Messaging.RuleDescription)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.AddRuleAsync(System.String,Microsoft.ServiceBus.Messaging.Filter)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.Complete(System.Guid)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.CompleteAsync(System.Guid)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.CompleteBatch(System.Collections.Generic.IEnumerable{System.Guid})
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.CompleteBatchAsync(System.Collections.Generic.IEnumerable{System.Guid})
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.Create(System.String,System.String)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.Create(System.String,System.String,Microsoft.ServiceBus.Messaging.ReceiveMode)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.CreateFromConnectionString(System.String,System.String,System.String)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.CreateFromConnectionString(System.String,System.String,System.String,Microsoft.ServiceBus.Messaging.ReceiveMode)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetter(System.Guid)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetter(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetter(System.Guid,System.String,System.String)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetterAsync(System.Guid)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetterAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetterAsync(System.Guid,System.String,System.String)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.Defer(System.Guid)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.Defer(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.DeferAsync(System.Guid)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.DeferAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.FormatDeadLetterPath(System.String,System.String)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.FormatSubscriptionPath(System.String,System.String)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.GetMessageSessions
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.GetMessageSessions(System.DateTime)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.GetMessageSessionsAsync
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.GetMessageSessionsAsync(System.DateTime)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.MessagingFactory
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.Mode
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.Name
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.OnAbort
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginAcceptMessageSession(System.String,Microsoft.ServiceBus.Messaging.ReceiveMode,System.TimeSpan,System.TimeSpan,System.AsyncCallback,System.Object)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginAddRule(Microsoft.ServiceBus.Messaging.RuleDescription,System.TimeSpan,System.AsyncCallback,System.Object)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginCreateReceiver(Microsoft.ServiceBus.Messaging.ReceiveMode,System.TimeSpan,System.AsyncCallback,System.Object)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginCreateReceiver(System.String,System.String,Microsoft.ServiceBus.Messaging.ReceiveMode,System.TimeSpan,System.AsyncCallback,System.Object)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginGetMessageSessions(System.DateTime,System.AsyncCallback,System.Object)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginRemoveRule(System.String,System.TimeSpan,System.AsyncCallback,System.Object)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginRemoveRulesByTag(System.String,System.TimeSpan,System.AsyncCallback,System.Object)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.OnClose(System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndAcceptMessageSession(System.IAsyncResult)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndAddRule(System.IAsyncResult)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndClose(System.IAsyncResult)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndCreateReceiver(System.IAsyncResult)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndGetMessageSessions(System.IAsyncResult)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndRemoveRule(System.IAsyncResult)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndRemoveRules(System.IAsyncResult)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.OnMessage(System.Action{Microsoft.ServiceBus.Messaging.BrokeredMessage})
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.OnMessage(System.Action{Microsoft.ServiceBus.Messaging.BrokeredMessage},Microsoft.ServiceBus.Messaging.OnMessageOptions)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.OnMessageAsync(System.Func{Microsoft.ServiceBus.Messaging.BrokeredMessage,System.Threading.Tasks.Task})
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.OnMessageAsync(System.Func{Microsoft.ServiceBus.Messaging.BrokeredMessage,System.Threading.Tasks.Task},Microsoft.ServiceBus.Messaging.OnMessageOptions)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.Peek
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.Peek(System.Int64)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekAsync
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekAsync(System.Int64)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekBatch(System.Int32)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekBatch(System.Int64,System.Int32)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekBatchAsync(System.Int32)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekBatchAsync(System.Int64,System.Int32)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.PrefetchCount
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.Receive
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.Receive(System.Int64)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.Receive(System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveAsync
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveAsync(System.Int64)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveAsync(System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatch(System.Collections.Generic.IEnumerable{System.Int64})
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatch(System.Int32)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatch(System.Int32,System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatchAsync(System.Collections.Generic.IEnumerable{System.Int64})
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatchAsync(System.Int32)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatchAsync(System.Int32,System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandler(System.Type)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandler(System.Type,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerAsync(System.Type)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerAsync(System.Type,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerFactory(Microsoft.ServiceBus.Messaging.IMessageSessionAsyncHandlerFactory,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerFactory(Microsoft.ServiceBus.Messaging.IMessageSessionHandlerFactory,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerFactoryAsync(Microsoft.ServiceBus.Messaging.IMessageSessionAsyncHandlerFactory,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerFactoryAsync(Microsoft.ServiceBus.Messaging.IMessageSessionHandlerFactory,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.RemoveRule(System.String)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.RemoveRuleAsync(System.String)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.RenewMessageLock(System.Guid)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.RenewMessageLockAsync(System.Guid)
  - Microsoft.ServiceBus.Messaging.SubscriptionClient.TopicPath
  langs:
  - csharp
  - vb
  name: SubscriptionClient
  nameWithType: SubscriptionClient
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient
  type: Class
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: SubscriptionClient
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 30
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Represents the anchor class used in run-time operations related to a topic subscription.
  example:
  - "\n<pre><code>// Create subscription client\nSubscriptionClient mySubscriptionClient = \nfactory.CreateSubscriptionClient(mySubscription);\n\n// Receive messages\nfor (int count = 0; count &lt; MsgCount; count++)\n{\n    var message = mySubscriptionClient.Receive();\n    message.Complete();\n}</code></pre>\n"
  syntax:
    content: 'public abstract class SubscriptionClient : ClientEntity, ICloseable, IMessageSessionEntity, IMessageClientEntity, IMessageReceiver, IMessageBrowser'
    content.vb: >-
      Public MustInherit Class SubscriptionClient
          Inherits ClientEntity
          Implements ICloseable, IMessageSessionEntity, IMessageClientEntity, IMessageReceiver, IMessageBrowser
  inheritance:
  - System.Object
  - Microsoft.ServiceBus.Messaging.ClientEntity
  inheritedMembers:
  - Microsoft.ServiceBus.Messaging.ClientEntity.RetryPolicy
  - Microsoft.ServiceBus.Messaging.ClientEntity.IsClosed
  - Microsoft.ServiceBus.Messaging.ClientEntity.ThisLock
  - Microsoft.ServiceBus.Messaging.ClientEntity.Abort
  - Microsoft.ServiceBus.Messaging.ClientEntity.Close
  - Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
  - Microsoft.ServiceBus.Messaging.ClientEntity.Fault
  - Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen(System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
  - Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
  - Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
  - Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
  - Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
  - Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
  - Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
  - Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
  - Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
  - Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen(System.IAsyncResult)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.TopicPath
  commentId: P:Microsoft.ServiceBus.Messaging.SubscriptionClient.TopicPath
  id: TopicPath
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: TopicPath
  nameWithType: SubscriptionClient.TopicPath
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.TopicPath
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: TopicPath
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 80
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets the full pathname of the topic.
  example: []
  syntax:
    content: public string TopicPath { get; }
    content.vb: Public ReadOnly Property TopicPath As String
    parameters: []
    return:
      type: System.String
      description: The full pathname of the topic.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.TopicPath*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.Name
  commentId: P:Microsoft.ServiceBus.Messaging.SubscriptionClient.Name
  id: Name
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: SubscriptionClient.Name
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.Name
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Name
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 84
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets the name of the subscription.
  example: []
  syntax:
    content: public string Name { get; }
    content.vb: Public ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: The name of the subscription.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.MessagingFactory
  commentId: P:Microsoft.ServiceBus.Messaging.SubscriptionClient.MessagingFactory
  id: MessagingFactory
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: MessagingFactory
  nameWithType: SubscriptionClient.MessagingFactory
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.MessagingFactory
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: MessagingFactory
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 88
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets the messaging factory used to create this subscription client.
  example: []
  syntax:
    content: public MessagingFactory MessagingFactory { get; }
    content.vb: Public ReadOnly Property MessagingFactory As MessagingFactory
    parameters: []
    return:
      type: Microsoft.ServiceBus.Messaging.MessagingFactory
      description: The messaging factory used to create this subscription client.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.MessagingFactory*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.Create(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.Create(System.String,System.String)
  id: Create(System.String,System.String)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: Create(String, String)
  nameWithType: SubscriptionClient.Create(String, String)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.Create(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Create
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 119
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Creates a new copy of <xref href="Microsoft.ServiceBus.Messaging.SubscriptionClient" data-throw-if-not-resolved="false"></xref> with specified name and topic path.
  example: []
  syntax:
    content: public static SubscriptionClient Create(string topicPath, string name)
    content.vb: Public Shared Function Create(topicPath As String, name As String) As SubscriptionClient
    parameters:
    - id: topicPath
      type: System.String
      description: The full pathname of the topic.
    - id: name
      type: System.String
      description: The name of the subscription.
    return:
      type: Microsoft.ServiceBus.Messaging.SubscriptionClient
      description: A new copy of <xref href="Microsoft.ServiceBus.Messaging.SubscriptionClient" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.CreateFromConnectionString(System.String,System.String,System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.CreateFromConnectionString(System.String,System.String,System.String)
  id: CreateFromConnectionString(System.String,System.String,System.String)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: CreateFromConnectionString(String, String, String)
  nameWithType: SubscriptionClient.CreateFromConnectionString(String, String, String)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.CreateFromConnectionString(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CreateFromConnectionString
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 131
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Creates a new copy of \n<xref href=\"Microsoft.ServiceBus.Messaging.SubscriptionClient\" data-throw-if-not-resolved=\"false\"></xref> from a connection string with specified topic path and name."
  example: []
  syntax:
    content: public static SubscriptionClient CreateFromConnectionString(string connectionString, string topicPath, string name)
    content.vb: Public Shared Function CreateFromConnectionString(connectionString As String, topicPath As String, name As String) As SubscriptionClient
    parameters:
    - id: connectionString
      type: System.String
      description: The connection string.
    - id: topicPath
      type: System.String
      description: The full pathname of the topic.
    - id: name
      type: System.String
      description: The name of the subscription.
    return:
      type: Microsoft.ServiceBus.Messaging.SubscriptionClient
      description: A new copy of <xref href="Microsoft.ServiceBus.Messaging.SubscriptionClient" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.CreateFromConnectionString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.Create(System.String,System.String,Microsoft.ServiceBus.Messaging.ReceiveMode)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.Create(System.String,System.String,Microsoft.ServiceBus.Messaging.ReceiveMode)
  id: Create(System.String,System.String,Microsoft.ServiceBus.Messaging.ReceiveMode)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: Create(String, String, ReceiveMode)
  nameWithType: SubscriptionClient.Create(String, String, ReceiveMode)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.Create(System.String, System.String, Microsoft.ServiceBus.Messaging.ReceiveMode)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Create
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 143
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Creates a new copy of \n<xref href=\"Microsoft.ServiceBus.Messaging.SubscriptionClient\" data-throw-if-not-resolved=\"false\"></xref> with specified name, topic path and mode."
  example: []
  syntax:
    content: public static SubscriptionClient Create(string topicPath, string name, ReceiveMode mode)
    content.vb: Public Shared Function Create(topicPath As String, name As String, mode As ReceiveMode) As SubscriptionClient
    parameters:
    - id: topicPath
      type: System.String
      description: The full pathname of the topic.
    - id: name
      type: System.String
      description: The name of the subscription.
    - id: mode
      type: Microsoft.ServiceBus.Messaging.ReceiveMode
      description: The message receive mode.
    return:
      type: Microsoft.ServiceBus.Messaging.SubscriptionClient
      description: A new copy of <xref href="Microsoft.ServiceBus.Messaging.SubscriptionClient" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.CreateFromConnectionString(System.String,System.String,System.String,Microsoft.ServiceBus.Messaging.ReceiveMode)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.CreateFromConnectionString(System.String,System.String,System.String,Microsoft.ServiceBus.Messaging.ReceiveMode)
  id: CreateFromConnectionString(System.String,System.String,System.String,Microsoft.ServiceBus.Messaging.ReceiveMode)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: CreateFromConnectionString(String, String, String, ReceiveMode)
  nameWithType: SubscriptionClient.CreateFromConnectionString(String, String, String, ReceiveMode)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.CreateFromConnectionString(System.String, System.String, System.String, Microsoft.ServiceBus.Messaging.ReceiveMode)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CreateFromConnectionString
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 156
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Creates a new copy of \n<xref href=\"Microsoft.ServiceBus.Messaging.SubscriptionClient\" data-throw-if-not-resolved=\"false\"></xref> from a connection string with specified topic path, name and mode."
  example: []
  syntax:
    content: public static SubscriptionClient CreateFromConnectionString(string connectionString, string topicPath, string name, ReceiveMode mode)
    content.vb: Public Shared Function CreateFromConnectionString(connectionString As String, topicPath As String, name As String, mode As ReceiveMode) As SubscriptionClient
    parameters:
    - id: connectionString
      type: System.String
      description: The connection string.
    - id: topicPath
      type: System.String
      description: The full pathname of the topic.
    - id: name
      type: System.String
      description: The name of the subscription.
    - id: mode
      type: Microsoft.ServiceBus.Messaging.ReceiveMode
      description: The message receive mode.
    return:
      type: Microsoft.ServiceBus.Messaging.SubscriptionClient
      description: A new copy of <xref href="Microsoft.ServiceBus.Messaging.SubscriptionClient" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.CreateFromConnectionString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.FormatSubscriptionPath(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.FormatSubscriptionPath(System.String,System.String)
  id: FormatSubscriptionPath(System.String,System.String)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: FormatSubscriptionPath(String, String)
  nameWithType: SubscriptionClient.FormatSubscriptionPath(String, String)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.FormatSubscriptionPath(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: FormatSubscriptionPath
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 167
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Builds a format name subscription path using the specified topic path and subscription name.
  example: []
  syntax:
    content: public static string FormatSubscriptionPath(string topicPath, string subscriptionName)
    content.vb: Public Shared Function FormatSubscriptionPath(topicPath As String, subscriptionName As String) As String
    parameters:
    - id: topicPath
      type: System.String
      description: The full pathname of the topic.
    - id: subscriptionName
      type: System.String
      description: The name of the subscription.
    return:
      type: System.String
      description: "The \n<xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> resulted from building the format name subscription path using the specified topic path and subscription name."
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.FormatSubscriptionPath*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.FormatDeadLetterPath(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.FormatDeadLetterPath(System.String,System.String)
  id: FormatDeadLetterPath(System.String,System.String)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: FormatDeadLetterPath(String, String)
  nameWithType: SubscriptionClient.FormatDeadLetterPath(String, String)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.FormatDeadLetterPath(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: FormatDeadLetterPath
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 177
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Builds a format name deadletter path using the specified topic path and subscription name.
  example: []
  syntax:
    content: public static string FormatDeadLetterPath(string topicPath, string subscriptionName)
    content.vb: Public Shared Function FormatDeadLetterPath(topicPath As String, subscriptionName As String) As String
    parameters:
    - id: topicPath
      type: System.String
      description: The full pathname of the topic.
    - id: subscriptionName
      type: System.String
      description: The name of the subscription.
    return:
      type: System.String
      description: "The \n<xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> resulted from building the format name deadletter path using the specified topic path and subscription name."
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.FormatDeadLetterPath*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.RenewMessageLock(System.Guid)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.RenewMessageLock(System.Guid)
  id: RenewMessageLock(System.Guid)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: RenewMessageLock(Guid)
  nameWithType: SubscriptionClient.RenewMessageLock(Guid)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.RenewMessageLock(System.Guid)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: RenewMessageLock
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 184
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: ''
  example: []
  syntax:
    content: public DateTime RenewMessageLock(Guid lockToken)
    content.vb: Public Function RenewMessageLock(lockToken As Guid) As Date
    parameters:
    - id: lockToken
      type: System.Guid
      description: ''
    return:
      type: System.DateTime
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.RenewMessageLock*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.RenewMessageLockAsync(System.Guid)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.RenewMessageLockAsync(System.Guid)
  id: RenewMessageLockAsync(System.Guid)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: RenewMessageLockAsync(Guid)
  nameWithType: SubscriptionClient.RenewMessageLockAsync(Guid)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.RenewMessageLockAsync(System.Guid)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: RenewMessageLockAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 193
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: ''
  example: []
  syntax:
    content: public Task<DateTime> RenewMessageLockAsync(Guid lockToken)
    content.vb: Public Function RenewMessageLockAsync(lockToken As Guid) As Task(Of Date)
    parameters:
    - id: lockToken
      type: System.Guid
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.DateTime}
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.RenewMessageLockAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandler(System.Type)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandler(System.Type)
  id: RegisterSessionHandler(System.Type)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: RegisterSessionHandler(Type)
  nameWithType: SubscriptionClient.RegisterSessionHandler(Type)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandler(System.Type)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: RegisterSessionHandler
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 203
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Registers the handler for the client session.
  example: []
  syntax:
    content: public void RegisterSessionHandler(Type handlerType)
    content.vb: Public Sub RegisterSessionHandler(handlerType As Type)
    parameters:
    - id: handlerType
      type: System.Type
      description: The type of the handler.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandler*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandler(System.Type,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandler(System.Type,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  id: RegisterSessionHandler(System.Type,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: RegisterSessionHandler(Type, SessionHandlerOptions)
  nameWithType: SubscriptionClient.RegisterSessionHandler(Type, SessionHandlerOptions)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandler(System.Type, Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: RegisterSessionHandler
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 213
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Registers the handler for the client session.
  example: []
  syntax:
    content: public void RegisterSessionHandler(Type handlerType, SessionHandlerOptions options)
    content.vb: Public Sub RegisterSessionHandler(handlerType As Type, options As SessionHandlerOptions)
    parameters:
    - id: handlerType
      type: System.Type
      description: The type of the handler.
    - id: options
      type: Microsoft.ServiceBus.Messaging.SessionHandlerOptions
      description: The session handler options.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandler*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerAsync(System.Type)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerAsync(System.Type)
  id: RegisterSessionHandlerAsync(System.Type)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: RegisterSessionHandlerAsync(Type)
  nameWithType: SubscriptionClient.RegisterSessionHandlerAsync(Type)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerAsync(System.Type)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: RegisterSessionHandlerAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 223
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously registers the handler for the client session.
  example: []
  syntax:
    content: public Task RegisterSessionHandlerAsync(Type handlerType)
    content.vb: Public Function RegisterSessionHandlerAsync(handlerType As Type) As Task
    parameters:
    - id: handlerType
      type: System.Type
      description: The type of the handler.
    return:
      type: System.Threading.Tasks.Task
      description: The task object representing the asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerAsync(System.Type,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerAsync(System.Type,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  id: RegisterSessionHandlerAsync(System.Type,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: RegisterSessionHandlerAsync(Type, SessionHandlerOptions)
  nameWithType: SubscriptionClient.RegisterSessionHandlerAsync(Type, SessionHandlerOptions)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerAsync(System.Type, Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: RegisterSessionHandlerAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 234
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously registers the handler for the client session.
  example: []
  syntax:
    content: public Task RegisterSessionHandlerAsync(Type handlerType, SessionHandlerOptions options)
    content.vb: Public Function RegisterSessionHandlerAsync(handlerType As Type, options As SessionHandlerOptions) As Task
    parameters:
    - id: handlerType
      type: System.Type
      description: The type of the handler.
    - id: options
      type: Microsoft.ServiceBus.Messaging.SessionHandlerOptions
      description: The session handler options.
    return:
      type: System.Threading.Tasks.Task
      description: The task object representing the asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerFactory(Microsoft.ServiceBus.Messaging.IMessageSessionHandlerFactory,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerFactory(Microsoft.ServiceBus.Messaging.IMessageSessionHandlerFactory,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  id: RegisterSessionHandlerFactory(Microsoft.ServiceBus.Messaging.IMessageSessionHandlerFactory,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: RegisterSessionHandlerFactory(IMessageSessionHandlerFactory, SessionHandlerOptions)
  nameWithType: SubscriptionClient.RegisterSessionHandlerFactory(IMessageSessionHandlerFactory, SessionHandlerOptions)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerFactory(Microsoft.ServiceBus.Messaging.IMessageSessionHandlerFactory, Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: RegisterSessionHandlerFactory
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 244
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Registers the handler factory for the client session.
  example: []
  syntax:
    content: public void RegisterSessionHandlerFactory(IMessageSessionHandlerFactory factory, SessionHandlerOptions options)
    content.vb: Public Sub RegisterSessionHandlerFactory(factory As IMessageSessionHandlerFactory, options As SessionHandlerOptions)
    parameters:
    - id: factory
      type: Microsoft.ServiceBus.Messaging.IMessageSessionHandlerFactory
      description: The interface for the handler factory associated with the message session.
    - id: options
      type: Microsoft.ServiceBus.Messaging.SessionHandlerOptions
      description: The session handler options.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerFactory*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerFactory(Microsoft.ServiceBus.Messaging.IMessageSessionAsyncHandlerFactory,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerFactory(Microsoft.ServiceBus.Messaging.IMessageSessionAsyncHandlerFactory,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  id: RegisterSessionHandlerFactory(Microsoft.ServiceBus.Messaging.IMessageSessionAsyncHandlerFactory,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: RegisterSessionHandlerFactory(IMessageSessionAsyncHandlerFactory, SessionHandlerOptions)
  nameWithType: SubscriptionClient.RegisterSessionHandlerFactory(IMessageSessionAsyncHandlerFactory, SessionHandlerOptions)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerFactory(Microsoft.ServiceBus.Messaging.IMessageSessionAsyncHandlerFactory, Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: RegisterSessionHandlerFactory
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 254
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Registers the handler factory for the client session.
  example: []
  syntax:
    content: public void RegisterSessionHandlerFactory(IMessageSessionAsyncHandlerFactory factory, SessionHandlerOptions options)
    content.vb: Public Sub RegisterSessionHandlerFactory(factory As IMessageSessionAsyncHandlerFactory, options As SessionHandlerOptions)
    parameters:
    - id: factory
      type: Microsoft.ServiceBus.Messaging.IMessageSessionAsyncHandlerFactory
      description: The interface for the handler factory associated with the message session.
    - id: options
      type: Microsoft.ServiceBus.Messaging.SessionHandlerOptions
      description: The session handler options.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerFactory*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerFactoryAsync(Microsoft.ServiceBus.Messaging.IMessageSessionHandlerFactory,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerFactoryAsync(Microsoft.ServiceBus.Messaging.IMessageSessionHandlerFactory,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  id: RegisterSessionHandlerFactoryAsync(Microsoft.ServiceBus.Messaging.IMessageSessionHandlerFactory,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: RegisterSessionHandlerFactoryAsync(IMessageSessionHandlerFactory, SessionHandlerOptions)
  nameWithType: SubscriptionClient.RegisterSessionHandlerFactoryAsync(IMessageSessionHandlerFactory, SessionHandlerOptions)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerFactoryAsync(Microsoft.ServiceBus.Messaging.IMessageSessionHandlerFactory, Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: RegisterSessionHandlerFactoryAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 265
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously registers the handler factory for the client session.
  example: []
  syntax:
    content: public Task RegisterSessionHandlerFactoryAsync(IMessageSessionHandlerFactory factory, SessionHandlerOptions options)
    content.vb: Public Function RegisterSessionHandlerFactoryAsync(factory As IMessageSessionHandlerFactory, options As SessionHandlerOptions) As Task
    parameters:
    - id: factory
      type: Microsoft.ServiceBus.Messaging.IMessageSessionHandlerFactory
      description: The interface for the handler factory associated with the message session.
    - id: options
      type: Microsoft.ServiceBus.Messaging.SessionHandlerOptions
      description: The session handler options.
    return:
      type: System.Threading.Tasks.Task
      description: The task object representing the asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerFactoryAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerFactoryAsync(Microsoft.ServiceBus.Messaging.IMessageSessionAsyncHandlerFactory,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerFactoryAsync(Microsoft.ServiceBus.Messaging.IMessageSessionAsyncHandlerFactory,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  id: RegisterSessionHandlerFactoryAsync(Microsoft.ServiceBus.Messaging.IMessageSessionAsyncHandlerFactory,Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: RegisterSessionHandlerFactoryAsync(IMessageSessionAsyncHandlerFactory, SessionHandlerOptions)
  nameWithType: SubscriptionClient.RegisterSessionHandlerFactoryAsync(IMessageSessionAsyncHandlerFactory, SessionHandlerOptions)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerFactoryAsync(Microsoft.ServiceBus.Messaging.IMessageSessionAsyncHandlerFactory, Microsoft.ServiceBus.Messaging.SessionHandlerOptions)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: RegisterSessionHandlerFactoryAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 276
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously registers the handler factory for the client session.
  example: []
  syntax:
    content: public Task RegisterSessionHandlerFactoryAsync(IMessageSessionAsyncHandlerFactory factory, SessionHandlerOptions options)
    content.vb: Public Function RegisterSessionHandlerFactoryAsync(factory As IMessageSessionAsyncHandlerFactory, options As SessionHandlerOptions) As Task
    parameters:
    - id: factory
      type: Microsoft.ServiceBus.Messaging.IMessageSessionAsyncHandlerFactory
      description: The interface for the handler factory associated with the message session.
    - id: options
      type: Microsoft.ServiceBus.Messaging.SessionHandlerOptions
      description: The session handler options.
    return:
      type: System.Threading.Tasks.Task
      description: The task object representing the asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerFactoryAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnMessage(System.Action{Microsoft.ServiceBus.Messaging.BrokeredMessage})
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnMessage(System.Action{Microsoft.ServiceBus.Messaging.BrokeredMessage})
  id: OnMessage(System.Action{Microsoft.ServiceBus.Messaging.BrokeredMessage})
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: OnMessage(Action<BrokeredMessage>)
  nameWithType: SubscriptionClient.OnMessage(Action<BrokeredMessage>)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnMessage(System.Action<Microsoft.ServiceBus.Messaging.BrokeredMessage>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnMessage
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 285
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Processes a message in an event-driven message pump.
  example: []
  syntax:
    content: public void OnMessage(Action<BrokeredMessage> callback)
    content.vb: Public Sub OnMessage(callback As Action(Of BrokeredMessage))
    parameters:
    - id: callback
      type: System.Action{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: The method to invoke when the operation is complete.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnMessage*
  nameWithType.vb: SubscriptionClient.OnMessage(Action(Of BrokeredMessage))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnMessage(System.Action(Of Microsoft.ServiceBus.Messaging.BrokeredMessage))
  name.vb: OnMessage(Action(Of BrokeredMessage))
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnMessage(System.Action{Microsoft.ServiceBus.Messaging.BrokeredMessage},Microsoft.ServiceBus.Messaging.OnMessageOptions)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnMessage(System.Action{Microsoft.ServiceBus.Messaging.BrokeredMessage},Microsoft.ServiceBus.Messaging.OnMessageOptions)
  id: OnMessage(System.Action{Microsoft.ServiceBus.Messaging.BrokeredMessage},Microsoft.ServiceBus.Messaging.OnMessageOptions)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: OnMessage(Action<BrokeredMessage>, OnMessageOptions)
  nameWithType: SubscriptionClient.OnMessage(Action<BrokeredMessage>, OnMessageOptions)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnMessage(System.Action<Microsoft.ServiceBus.Messaging.BrokeredMessage>, Microsoft.ServiceBus.Messaging.OnMessageOptions)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnMessage
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 296
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Processes a message in an event-driven message pump, with the given set of \n<xref href=\"Microsoft.ServiceBus.Messaging.OnMessageOptions\" data-throw-if-not-resolved=\"false\"></xref> options."
  example: []
  syntax:
    content: public void OnMessage(Action<BrokeredMessage> callback, OnMessageOptions onMessageOptions)
    content.vb: Public Sub OnMessage(callback As Action(Of BrokeredMessage), onMessageOptions As OnMessageOptions)
    parameters:
    - id: callback
      type: System.Action{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: The method to invoke when the operation is complete.
    - id: onMessageOptions
      type: Microsoft.ServiceBus.Messaging.OnMessageOptions
      description: "Specifies the \n<xref href=\"Microsoft.ServiceBus.Messaging.OnMessageOptions\" data-throw-if-not-resolved=\"false\"></xref> options with which to instantiate the message pump."
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnMessage*
  nameWithType.vb: SubscriptionClient.OnMessage(Action(Of BrokeredMessage), OnMessageOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnMessage(System.Action(Of Microsoft.ServiceBus.Messaging.BrokeredMessage), Microsoft.ServiceBus.Messaging.OnMessageOptions)
  name.vb: OnMessage(Action(Of BrokeredMessage), OnMessageOptions)
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnMessageAsync(System.Func{Microsoft.ServiceBus.Messaging.BrokeredMessage,System.Threading.Tasks.Task})
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnMessageAsync(System.Func{Microsoft.ServiceBus.Messaging.BrokeredMessage,System.Threading.Tasks.Task})
  id: OnMessageAsync(System.Func{Microsoft.ServiceBus.Messaging.BrokeredMessage,System.Threading.Tasks.Task})
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: OnMessageAsync(Func<BrokeredMessage, Task>)
  nameWithType: SubscriptionClient.OnMessageAsync(Func<BrokeredMessage, Task>)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnMessageAsync(System.Func<Microsoft.ServiceBus.Messaging.BrokeredMessage, System.Threading.Tasks.Task>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnMessageAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 306
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously processes a message.
  example: []
  syntax:
    content: public void OnMessageAsync(Func<BrokeredMessage, Task> callback)
    content.vb: Public Sub OnMessageAsync(callback As Func(Of BrokeredMessage, Task))
    parameters:
    - id: callback
      type: System.Func{Microsoft.ServiceBus.Messaging.BrokeredMessage,System.Threading.Tasks.Task}
      description: The asynchronous method to invoke when the operation is complete.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnMessageAsync*
  nameWithType.vb: SubscriptionClient.OnMessageAsync(Func(Of BrokeredMessage, Task))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnMessageAsync(System.Func(Of Microsoft.ServiceBus.Messaging.BrokeredMessage, System.Threading.Tasks.Task))
  name.vb: OnMessageAsync(Func(Of BrokeredMessage, Task))
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnMessageAsync(System.Func{Microsoft.ServiceBus.Messaging.BrokeredMessage,System.Threading.Tasks.Task},Microsoft.ServiceBus.Messaging.OnMessageOptions)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnMessageAsync(System.Func{Microsoft.ServiceBus.Messaging.BrokeredMessage,System.Threading.Tasks.Task},Microsoft.ServiceBus.Messaging.OnMessageOptions)
  id: OnMessageAsync(System.Func{Microsoft.ServiceBus.Messaging.BrokeredMessage,System.Threading.Tasks.Task},Microsoft.ServiceBus.Messaging.OnMessageOptions)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: OnMessageAsync(Func<BrokeredMessage, Task>, OnMessageOptions)
  nameWithType: SubscriptionClient.OnMessageAsync(Func<BrokeredMessage, Task>, OnMessageOptions)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnMessageAsync(System.Func<Microsoft.ServiceBus.Messaging.BrokeredMessage, System.Threading.Tasks.Task>, Microsoft.ServiceBus.Messaging.OnMessageOptions)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnMessageAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 315
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously processes a message.
  example: []
  syntax:
    content: public void OnMessageAsync(Func<BrokeredMessage, Task> callback, OnMessageOptions onMessageOptions)
    content.vb: Public Sub OnMessageAsync(callback As Func(Of BrokeredMessage, Task), onMessageOptions As OnMessageOptions)
    parameters:
    - id: callback
      type: System.Func{Microsoft.ServiceBus.Messaging.BrokeredMessage,System.Threading.Tasks.Task}
      description: The asynchronous method to invoke when the operation is complete.
    - id: onMessageOptions
      type: Microsoft.ServiceBus.Messaging.OnMessageOptions
      description: The options associated with the message.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnMessageAsync*
  nameWithType.vb: SubscriptionClient.OnMessageAsync(Func(Of BrokeredMessage, Task), OnMessageOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnMessageAsync(System.Func(Of Microsoft.ServiceBus.Messaging.BrokeredMessage, System.Threading.Tasks.Task), Microsoft.ServiceBus.Messaging.OnMessageOptions)
  name.vb: OnMessageAsync(Func(Of BrokeredMessage, Task), OnMessageOptions)
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSession
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSession
  id: AcceptMessageSession
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: AcceptMessageSession()
  nameWithType: SubscriptionClient.AcceptMessageSession()
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSession()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: AcceptMessageSession
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 414
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Accepts a message session that allows grouping of related messages for processing in a single transaction.
  example: []
  syntax:
    content: public MessageSession AcceptMessageSession()
    content.vb: Public Function AcceptMessageSession As MessageSession
    return:
      type: Microsoft.ServiceBus.Messaging.MessageSession
      description: "A \n<xref href=\"Microsoft.ServiceBus.Messaging.MessageSession\" data-throw-if-not-resolved=\"false\"></xref> that allows grouping of related messages for processing in a single transaction."
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSession*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSession(System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSession(System.String)
  id: AcceptMessageSession(System.String)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: AcceptMessageSession(String)
  nameWithType: SubscriptionClient.AcceptMessageSession(String)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSession(System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: AcceptMessageSession
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 428
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Accepts a message session that allows grouping of related messages \nfor processing in a single transaction using the given session identifier."
  example: []
  syntax:
    content: public MessageSession AcceptMessageSession(string sessionId)
    content.vb: Public Function AcceptMessageSession(sessionId As String) As MessageSession
    parameters:
    - id: sessionId
      type: System.String
      description: The session identifier of the message session.
    return:
      type: Microsoft.ServiceBus.Messaging.MessageSession
      description: "A \n<xref href=\"Microsoft.ServiceBus.Messaging.MessageSession\" data-throw-if-not-resolved=\"false\"></xref> that allows grouping of related messages for processing in a single transaction."
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSession*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if sessionId is null, empty, or white spaces.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "Thrown if the operation exceeded the timeout value set by \n<xref href=\"Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref>."
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Thrown if the client is already closed, aborted, or disposed.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSession(System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSession(System.TimeSpan)
  id: AcceptMessageSession(System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: AcceptMessageSession(TimeSpan)
  nameWithType: SubscriptionClient.AcceptMessageSession(TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSession(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: AcceptMessageSession
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 441
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Accepts a message session that allows grouping of related messages \nfor processing in a single transaction using the specified server wait time."
  example: []
  syntax:
    content: public MessageSession AcceptMessageSession(TimeSpan serverWaitTime)
    content.vb: Public Function AcceptMessageSession(serverWaitTime As TimeSpan) As MessageSession
    parameters:
    - id: serverWaitTime
      type: System.TimeSpan
      description: The time span the server waits for processing messages before it times out.
    return:
      type: Microsoft.ServiceBus.Messaging.MessageSession
      description: "A \n<xref href=\"Microsoft.ServiceBus.Messaging.MessageSession\" data-throw-if-not-resolved=\"false\"></xref> that allows grouping of related messages for processing in a single transaction."
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSession*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown if serverWaitTime is not a positive TimeSpan value.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Thrown if the operation exceeded the timeout value set by <span class="paramref">serverWaitTime</span>.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Thrown if the client is already closed, aborted, or disposed.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSession(System.String,System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSession(System.String,System.TimeSpan)
  id: AcceptMessageSession(System.String,System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: AcceptMessageSession(String, TimeSpan)
  nameWithType: SubscriptionClient.AcceptMessageSession(String, TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSession(System.String, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: AcceptMessageSession
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 456
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Accepts a message session that allows grouping of related messages for \nprocessing in a single transaction using the given session identifier and wait time."
  example: []
  syntax:
    content: public MessageSession AcceptMessageSession(string sessionId, TimeSpan serverWaitTime)
    content.vb: Public Function AcceptMessageSession(sessionId As String, serverWaitTime As TimeSpan) As MessageSession
    parameters:
    - id: sessionId
      type: System.String
      description: The session identifier of the message session.
    - id: serverWaitTime
      type: System.TimeSpan
      description: The time span the server waits for processing messages before it times out.
    return:
      type: Microsoft.ServiceBus.Messaging.MessageSession
      description: "A \n<xref href=\"Microsoft.ServiceBus.Messaging.MessageSession\" data-throw-if-not-resolved=\"false\"></xref> that allows grouping of related messages for processing in a single transaction."
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSession*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if sessionId is null, empty, or white spaces.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown if serverWaitTime is not a positive TimeSpan value.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Thrown if the operation exceeded the timeout value set by <span class="paramref">serverWaitTime</span>.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Thrown if the client is already closed, aborted, or disposed.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSessionAsync
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSessionAsync
  id: AcceptMessageSessionAsync
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: AcceptMessageSessionAsync()
  nameWithType: SubscriptionClient.AcceptMessageSessionAsync()
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSessionAsync()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: AcceptMessageSessionAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 464
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Asynchronously accepts a message session that allows grouping of related messages \nfor processing in a single transaction using the specified server wait time."
  example: []
  syntax:
    content: public Task<MessageSession> AcceptMessageSessionAsync()
    content.vb: Public Function AcceptMessageSessionAsync As Task(Of MessageSession)
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.MessageSession}
      description: A task instance that represents the asynchronous accept message session operation.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSessionAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSessionAsync(System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSessionAsync(System.String)
  id: AcceptMessageSessionAsync(System.String)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: AcceptMessageSessionAsync(String)
  nameWithType: SubscriptionClient.AcceptMessageSessionAsync(String)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSessionAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: AcceptMessageSessionAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 479
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Asynchronously accepts a message session that allows grouping of related messages \nfor processing in a single transaction using the specified server wait time."
  example: []
  syntax:
    content: public Task<MessageSession> AcceptMessageSessionAsync(string sessionId)
    content.vb: Public Function AcceptMessageSessionAsync(sessionId As String) As Task(Of MessageSession)
    parameters:
    - id: sessionId
      type: System.String
      description: The session identifier of the message session.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.MessageSession}
      description: A task instance that represents the asynchronous accept message session operation.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSessionAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSessionAsync(System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSessionAsync(System.TimeSpan)
  id: AcceptMessageSessionAsync(System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: AcceptMessageSessionAsync(TimeSpan)
  nameWithType: SubscriptionClient.AcceptMessageSessionAsync(TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSessionAsync(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: AcceptMessageSessionAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 499
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Asynchronously accepts a message session that allows grouping of related messages \nfor processing in a single transaction using the specified server wait time."
  example: []
  syntax:
    content: public Task<MessageSession> AcceptMessageSessionAsync(TimeSpan serverWaitTime)
    content.vb: Public Function AcceptMessageSessionAsync(serverWaitTime As TimeSpan) As Task(Of MessageSession)
    parameters:
    - id: serverWaitTime
      type: System.TimeSpan
      description: The time span the server waits for processing messages before it times out.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.MessageSession}
      description: A task instance that represents the asynchronous accept message session operation.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSessionAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSessionAsync(System.String,System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSessionAsync(System.String,System.TimeSpan)
  id: AcceptMessageSessionAsync(System.String,System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: AcceptMessageSessionAsync(String, TimeSpan)
  nameWithType: SubscriptionClient.AcceptMessageSessionAsync(String, TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSessionAsync(System.String, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: AcceptMessageSessionAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 515
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Asynchronously accepts a message session that allows grouping of related messages \nfor processing in a single transaction using the specified server wait time."
  example: []
  syntax:
    content: public Task<MessageSession> AcceptMessageSessionAsync(string sessionId, TimeSpan serverWaitTime)
    content.vb: Public Function AcceptMessageSessionAsync(sessionId As String, serverWaitTime As TimeSpan) As Task(Of MessageSession)
    parameters:
    - id: sessionId
      type: System.String
      description: The session identifier of the message session.
    - id: serverWaitTime
      type: System.TimeSpan
      description: The time span the server waits for processing messages before it times out.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.MessageSession}
      description: A task instance that represents the asynchronous accept message session operation.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSessionAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.GetMessageSessions
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.GetMessageSessions
  id: GetMessageSessions
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: GetMessageSessions()
  nameWithType: SubscriptionClient.GetMessageSessions()
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.GetMessageSessions()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: GetMessageSessions
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 586
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets a message session that allows grouping of related messages for processing in a single transaction.
  example: []
  syntax:
    content: public IEnumerable<MessageSession> GetMessageSessions()
    content.vb: Public Function GetMessageSessions As IEnumerable(Of MessageSession)
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.MessageSession}
      description: A message session that allows grouping of related messages for processing in a single transaction.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.GetMessageSessions*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.GetMessageSessions(System.DateTime)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.GetMessageSessions(System.DateTime)
  id: GetMessageSessions(System.DateTime)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: GetMessageSessions(DateTime)
  nameWithType: SubscriptionClient.GetMessageSessions(DateTime)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.GetMessageSessions(System.DateTime)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: GetMessageSessions
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 594
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Retrieves all message sessions whose session state was updated since <span class="paramref">lastUpdatedTime</span>.
  example: []
  syntax:
    content: public IEnumerable<MessageSession> GetMessageSessions(DateTime lastUpdatedTime)
    content.vb: Public Function GetMessageSessions(lastUpdatedTime As Date) As IEnumerable(Of MessageSession)
    parameters:
    - id: lastUpdatedTime
      type: System.DateTime
      description: The time the session was last updated.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.MessageSession}
      description: A message session that allows grouping of related messages for processing in a single transaction.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.GetMessageSessions*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.GetMessageSessionsAsync
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.GetMessageSessionsAsync
  id: GetMessageSessionsAsync
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: GetMessageSessionsAsync()
  nameWithType: SubscriptionClient.GetMessageSessionsAsync()
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.GetMessageSessionsAsync()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: GetMessageSessionsAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 601
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously gets a message session that allows grouping of related messages for processing in a single transaction.
  example: []
  syntax:
    content: public Task<IEnumerable<MessageSession>> GetMessageSessionsAsync()
    content.vb: Public Function GetMessageSessionsAsync As Task(Of IEnumerable(Of MessageSession))
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.MessageSession}}
      description: A task instance that represents the asynchronous get message sessions operation.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.GetMessageSessionsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.GetMessageSessionsAsync(System.DateTime)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.GetMessageSessionsAsync(System.DateTime)
  id: GetMessageSessionsAsync(System.DateTime)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: GetMessageSessionsAsync(DateTime)
  nameWithType: SubscriptionClient.GetMessageSessionsAsync(DateTime)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.GetMessageSessionsAsync(System.DateTime)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: GetMessageSessionsAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 611
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously gets a message session that allows grouping of related messages for processing in a single transaction.
  example: []
  syntax:
    content: public Task<IEnumerable<MessageSession>> GetMessageSessionsAsync(DateTime lastUpdatedTime)
    content.vb: Public Function GetMessageSessionsAsync(lastUpdatedTime As Date) As Task(Of IEnumerable(Of MessageSession))
    parameters:
    - id: lastUpdatedTime
      type: System.DateTime
      description: The time the session was last updated.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.MessageSession}}
      description: A task instance that represents the asynchronous get message sessions operation.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.GetMessageSessionsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.AddRule(Microsoft.ServiceBus.Messaging.RuleDescription)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.AddRule(Microsoft.ServiceBus.Messaging.RuleDescription)
  id: AddRule(Microsoft.ServiceBus.Messaging.RuleDescription)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: AddRule(RuleDescription)
  nameWithType: SubscriptionClient.AddRule(RuleDescription)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.AddRule(Microsoft.ServiceBus.Messaging.RuleDescription)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: AddRule
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 690
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Adds a new rule to the <xref href="Microsoft.ServiceBus.Messaging.SubscriptionDescription" data-throw-if-not-resolved="false"></xref> using the specified rule description.
  example: []
  syntax:
    content: public void AddRule(RuleDescription description)
    content.vb: Public Sub AddRule(description As RuleDescription)
    parameters:
    - id: description
      type: Microsoft.ServiceBus.Messaging.RuleDescription
      description: The rule description that provides metadata of the rule to add.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.AddRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <span class="paramref">description</span> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Thrown if <span class=\"paramref\">description.Name.Name</span> is null, \nwhite space empty or not in the right format."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Thrown if <span class=\"paramref\">description.Name.Name</span> \nlength has exceeded the limit of 50 characters."
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "Thrown if the operation exceeded the timeout value set by \n<xref href=\"Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref>."
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Thrown if the client entity has been closed or aborted.
  - type: Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException
    description: "Thrown if the rule with the same name \nas <span class=\"paramref\">description.Name.Name</span> already existed for this subscription. "
  - type: Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException
    description: "Thrown when an attempt is made to add another \nrule with same name as one that has already been added."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.AddRule(System.String,Microsoft.ServiceBus.Messaging.Filter)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.AddRule(System.String,Microsoft.ServiceBus.Messaging.Filter)
  id: AddRule(System.String,Microsoft.ServiceBus.Messaging.Filter)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: AddRule(String, Filter)
  nameWithType: SubscriptionClient.AddRule(String, Filter)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.AddRule(System.String, Microsoft.ServiceBus.Messaging.Filter)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: AddRule
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 710
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Adds a rule to the current subscription with the specified name and filter expression.
  example: []
  syntax:
    content: public void AddRule(string ruleName, Filter filter)
    content.vb: Public Sub AddRule(ruleName As String, filter As Filter)
    parameters:
    - id: ruleName
      type: System.String
      description: The name of the rule to add.
    - id: filter
      type: Microsoft.ServiceBus.Messaging.Filter
      description: The filter expression against which messages will be matched.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.AddRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <span class="paramref">filter</span> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Thrown if <span class=\"paramref\">ruleName</span> is null, \nwhite space empty or not in the right format."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Thrown if <span class=\"paramref\">ruleName</span> \nlength has exceeded the limit of 50 characters."
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "Thrown if the operation exceeded the timeout value set via \n<xref href=\"Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref>."
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Thrown if the client entity has been closed or aborted.
  - type: Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException
    description: "Thrown if the rule with the same \nname as <span class=\"paramref\">ruleName</span> already existed for this subscription."
  - type: Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException
    description: "Thrown when an attempt is made to add another \nrule with same name as one that has already been added."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.AddRuleAsync(System.String,Microsoft.ServiceBus.Messaging.Filter)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.AddRuleAsync(System.String,Microsoft.ServiceBus.Messaging.Filter)
  id: AddRuleAsync(System.String,Microsoft.ServiceBus.Messaging.Filter)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: AddRuleAsync(String, Filter)
  nameWithType: SubscriptionClient.AddRuleAsync(String, Filter)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.AddRuleAsync(System.String, Microsoft.ServiceBus.Messaging.Filter)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: AddRuleAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 722
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously adds a rule to the current subscription with the specified name and filter expression.
  example: []
  syntax:
    content: public Task AddRuleAsync(string ruleName, Filter filter)
    content.vb: Public Function AddRuleAsync(ruleName As String, filter As Filter) As Task
    parameters:
    - id: ruleName
      type: System.String
      description: The name of the rule to add.
    - id: filter
      type: Microsoft.ServiceBus.Messaging.Filter
      description: The filter expression against which messages will be matched.
    return:
      type: System.Threading.Tasks.Task
      description: A task instance that represents the asynchronous add rule operation.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.AddRuleAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.AddRuleAsync(Microsoft.ServiceBus.Messaging.RuleDescription)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.AddRuleAsync(Microsoft.ServiceBus.Messaging.RuleDescription)
  id: AddRuleAsync(Microsoft.ServiceBus.Messaging.RuleDescription)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: AddRuleAsync(RuleDescription)
  nameWithType: SubscriptionClient.AddRuleAsync(RuleDescription)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.AddRuleAsync(Microsoft.ServiceBus.Messaging.RuleDescription)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: AddRuleAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 733
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Asynchronously adds a new rule to the \n<xref href=\"Microsoft.ServiceBus.Messaging.SubscriptionDescription\" data-throw-if-not-resolved=\"false\"></xref> using the specified rule description."
  example: []
  syntax:
    content: public Task AddRuleAsync(RuleDescription description)
    content.vb: Public Function AddRuleAsync(description As RuleDescription) As Task
    parameters:
    - id: description
      type: Microsoft.ServiceBus.Messaging.RuleDescription
      description: The rule description that provides metadata of the rule to add.
    return:
      type: System.Threading.Tasks.Task
      description: A task instance that represents the asynchronous add rule operation.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.AddRuleAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.RemoveRule(System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.RemoveRule(System.String)
  id: RemoveRule(System.String)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: RemoveRule(String)
  nameWithType: SubscriptionClient.RemoveRule(String)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.RemoveRule(System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: RemoveRule
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 796
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Removes the rule described by <span class="paramref">ruleName</span>.
  example: []
  syntax:
    content: public void RemoveRule(string ruleName)
    content.vb: Public Sub RemoveRule(ruleName As String)
    parameters:
    - id: ruleName
      type: System.String
      description: The name of the rule.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.RemoveRule*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Thrown if <span class=\"paramref\">ruleName</span> is null, \nwhite space empty or not in the right format."
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Thrown if the operation exceeded the timeout value set via the OperationTimeout Property.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Thrown if the client entity has been closed or aborted.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.RemoveRuleAsync(System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.RemoveRuleAsync(System.String)
  id: RemoveRuleAsync(System.String)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: RemoveRuleAsync(String)
  nameWithType: SubscriptionClient.RemoveRuleAsync(String)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.RemoveRuleAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: RemoveRuleAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 804
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously removes the rule described by <span class="paramref">ruleName</span>.
  example: []
  syntax:
    content: public Task RemoveRuleAsync(string ruleName)
    content.vb: Public Function RemoveRuleAsync(ruleName As String) As Task
    parameters:
    - id: ruleName
      type: System.String
      description: The name of the rule.
    return:
      type: System.Threading.Tasks.Task
      description: A task instance that represents the asynchronous remove rule operation.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.RemoveRuleAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginCreateReceiver(Microsoft.ServiceBus.Messaging.ReceiveMode,System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginCreateReceiver(Microsoft.ServiceBus.Messaging.ReceiveMode,System.TimeSpan,System.AsyncCallback,System.Object)
  id: OnBeginCreateReceiver(Microsoft.ServiceBus.Messaging.ReceiveMode,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: OnBeginCreateReceiver(ReceiveMode, TimeSpan, AsyncCallback, Object)
  nameWithType: SubscriptionClient.OnBeginCreateReceiver(ReceiveMode, TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginCreateReceiver(Microsoft.ServiceBus.Messaging.ReceiveMode, System.TimeSpan, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnBeginCreateReceiver
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 941
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes the begin create receiver action.
  example: []
  syntax:
    content: protected abstract IAsyncResult OnBeginCreateReceiver(ReceiveMode receiveMode, TimeSpan timeout, AsyncCallback callback, object state)
    content.vb: Protected MustOverride Function OnBeginCreateReceiver(receiveMode As ReceiveMode, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: receiveMode
      type: Microsoft.ServiceBus.Messaging.ReceiveMode
      description: The message <xref href="Microsoft.ServiceBus.Messaging.ReceiveMode" data-throw-if-not-resolved="false"></xref>.
    - id: timeout
      type: System.TimeSpan
      description: The wait time before the operation times out.
    - id: callback
      type: System.AsyncCallback
      description: "An \n<xref href=\"System.AsyncCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate that references the method to invoke when the operation is complete."
    - id: state
      type: System.Object
      description: "A user-defined object that contains information about the receive operation. This object is passed to the \n<xref href=\"Microsoft.ServiceBus.Messaging.SubscriptionClient.EndCreateReceiver(System.IAsyncResult)\" data-throw-if-not-resolved=\"false\"></xref> delegate when the operation is complete."
    return:
      type: System.IAsyncResult
      description: "An \n<xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> that references the asynchronous parent method."
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginCreateReceiver*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginCreateReceiver(System.String,System.String,Microsoft.ServiceBus.Messaging.ReceiveMode,System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginCreateReceiver(System.String,System.String,Microsoft.ServiceBus.Messaging.ReceiveMode,System.TimeSpan,System.AsyncCallback,System.Object)
  id: OnBeginCreateReceiver(System.String,System.String,Microsoft.ServiceBus.Messaging.ReceiveMode,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: OnBeginCreateReceiver(String, String, ReceiveMode, TimeSpan, AsyncCallback, Object)
  nameWithType: SubscriptionClient.OnBeginCreateReceiver(String, String, ReceiveMode, TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginCreateReceiver(System.String, System.String, Microsoft.ServiceBus.Messaging.ReceiveMode, System.TimeSpan, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnBeginCreateReceiver
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 954
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes the begin create receiver action.
  example: []
  syntax:
    content: protected abstract IAsyncResult OnBeginCreateReceiver(string subQueuePath, string subQueueName, ReceiveMode receiveMode, TimeSpan timeout, AsyncCallback callback, object state)
    content.vb: Protected MustOverride Function OnBeginCreateReceiver(subQueuePath As String, subQueueName As String, receiveMode As ReceiveMode, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: subQueuePath
      type: System.String
      description: The path of the subqueue.
    - id: subQueueName
      type: System.String
      description: The name of the subqueue.
    - id: receiveMode
      type: Microsoft.ServiceBus.Messaging.ReceiveMode
      description: The message <xref href="Microsoft.ServiceBus.Messaging.ReceiveMode" data-throw-if-not-resolved="false"></xref>.
    - id: timeout
      type: System.TimeSpan
      description: The wait time before the operation times out.
    - id: callback
      type: System.AsyncCallback
      description: "An \n<xref href=\"System.AsyncCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate that references the method to invoke when the operation is complete."
    - id: state
      type: System.Object
      description: "A user-defined object that contains information about the receive operation. This object is passed to the \n<xref href=\"Microsoft.ServiceBus.Messaging.SubscriptionClient.EndCreateReceiver(System.IAsyncResult)\" data-throw-if-not-resolved=\"false\"></xref> delegate when the operation is complete."
    return:
      type: System.IAsyncResult
      description: "An \n<xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> that references the asynchronous parent async method. "
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginCreateReceiver*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndCreateReceiver(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndCreateReceiver(System.IAsyncResult)
  id: OnEndCreateReceiver(System.IAsyncResult)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: OnEndCreateReceiver(IAsyncResult)
  nameWithType: SubscriptionClient.OnEndCreateReceiver(IAsyncResult)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndCreateReceiver(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnEndCreateReceiver
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 961
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes the end create receiver action.
  example: []
  syntax:
    content: protected abstract MessageReceiver OnEndCreateReceiver(IAsyncResult result)
    content.vb: Protected MustOverride Function OnEndCreateReceiver(result As IAsyncResult) As MessageReceiver
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "An \n<xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> object that references the \n<xref href=\"Microsoft.ServiceBus.Messaging.SubscriptionClient.EndCreateReceiver(System.IAsyncResult)\" data-throw-if-not-resolved=\"false\"></xref>."
    return:
      type: Microsoft.ServiceBus.Messaging.MessageReceiver
      description: A newly-created <xref href="Microsoft.ServiceBus.Messaging.MessageReceiver" data-throw-if-not-resolved="false"></xref> object.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndCreateReceiver*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginAcceptMessageSession(System.String,Microsoft.ServiceBus.Messaging.ReceiveMode,System.TimeSpan,System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginAcceptMessageSession(System.String,Microsoft.ServiceBus.Messaging.ReceiveMode,System.TimeSpan,System.TimeSpan,System.AsyncCallback,System.Object)
  id: OnBeginAcceptMessageSession(System.String,Microsoft.ServiceBus.Messaging.ReceiveMode,System.TimeSpan,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: OnBeginAcceptMessageSession(String, ReceiveMode, TimeSpan, TimeSpan, AsyncCallback, Object)
  nameWithType: SubscriptionClient.OnBeginAcceptMessageSession(String, ReceiveMode, TimeSpan, TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginAcceptMessageSession(System.String, Microsoft.ServiceBus.Messaging.ReceiveMode, System.TimeSpan, System.TimeSpan, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnBeginAcceptMessageSession
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 985
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes upon calling the BeginAcceptMessageSession operation.
  example: []
  syntax:
    content: protected abstract IAsyncResult OnBeginAcceptMessageSession(string sessionId, ReceiveMode receiveMode, TimeSpan serverWaitTime, TimeSpan timeout, AsyncCallback callback, object state)
    content.vb: Protected MustOverride Function OnBeginAcceptMessageSession(sessionId As String, receiveMode As ReceiveMode, serverWaitTime As TimeSpan, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: sessionId
      type: System.String
      description: The session identifier of the message session.
    - id: receiveMode
      type: Microsoft.ServiceBus.Messaging.ReceiveMode
      description: The receive mode when processing with the receive messages.
    - id: serverWaitTime
      type: System.TimeSpan
      description: The time span the server waits for processing messages before it times out
    - id: timeout
      type: System.TimeSpan
      description: The time span the server waits for processing messages before it times out.
    - id: callback
      type: System.AsyncCallback
      description: "An \n<xref href=\"System.AsyncCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate that references the method to invoke when the operation is complete."
    - id: state
      type: System.Object
      description: A user-defined object that contains state information about the asynchronous operation.
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation to accept a message session.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginAcceptMessageSession*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndAcceptMessageSession(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndAcceptMessageSession(System.IAsyncResult)
  id: OnEndAcceptMessageSession(System.IAsyncResult)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: OnEndAcceptMessageSession(IAsyncResult)
  nameWithType: SubscriptionClient.OnEndAcceptMessageSession(IAsyncResult)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndAcceptMessageSession(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnEndAcceptMessageSession
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 992
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes upon calling the EndAcceptMessageSession operation.
  example: []
  syntax:
    content: protected abstract MessageSession OnEndAcceptMessageSession(IAsyncResult result)
    content.vb: Protected MustOverride Function OnEndAcceptMessageSession(result As IAsyncResult) As MessageSession
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "An \n<xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> that represents the status of the asynchronous accept message session operation."
    return:
      type: Microsoft.ServiceBus.Messaging.MessageSession
      description: "The \n<xref href=\"Microsoft.ServiceBus.Messaging.MessageSession\" data-throw-if-not-resolved=\"false\"></xref> that allows grouping of related messages for processing in a single transaction."
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndAcceptMessageSession*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginGetMessageSessions(System.DateTime,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginGetMessageSessions(System.DateTime,System.AsyncCallback,System.Object)
  id: OnBeginGetMessageSessions(System.DateTime,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: OnBeginGetMessageSessions(DateTime, AsyncCallback, Object)
  nameWithType: SubscriptionClient.OnBeginGetMessageSessions(DateTime, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginGetMessageSessions(System.DateTime, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnBeginGetMessageSessions
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1000
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes upon calling the BeginGetMessageSessions operation.
  example: []
  syntax:
    content: protected abstract IAsyncResult OnBeginGetMessageSessions(DateTime lastUpdatedTime, AsyncCallback callback, object state)
    content.vb: Protected MustOverride Function OnBeginGetMessageSessions(lastUpdatedTime As Date, callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: lastUpdatedTime
      type: System.DateTime
      description: The time the session was last updated.
    - id: callback
      type: System.AsyncCallback
      description: "An \n<xref href=\"System.AsyncCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate that references the method to invoke when the operation is complete."
    - id: state
      type: System.Object
      description: A user-defined object that contains state information about the asynchronous operation.
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation to add a new rule to the subscription.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginGetMessageSessions*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndGetMessageSessions(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndGetMessageSessions(System.IAsyncResult)
  id: OnEndGetMessageSessions(System.IAsyncResult)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: OnEndGetMessageSessions(IAsyncResult)
  nameWithType: SubscriptionClient.OnEndGetMessageSessions(IAsyncResult)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndGetMessageSessions(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnEndGetMessageSessions
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1005
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes the end get message action.
  example: []
  syntax:
    content: protected abstract IEnumerable<MessageSession> OnEndGetMessageSessions(IAsyncResult result)
    content.vb: Protected MustOverride Function OnEndGetMessageSessions(result As IAsyncResult) As IEnumerable(Of MessageSession)
    parameters:
    - id: result
      type: System.IAsyncResult
      description: The result of the message.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.MessageSession}
      description: The end get message action.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndGetMessageSessions*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginAddRule(Microsoft.ServiceBus.Messaging.RuleDescription,System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginAddRule(Microsoft.ServiceBus.Messaging.RuleDescription,System.TimeSpan,System.AsyncCallback,System.Object)
  id: OnBeginAddRule(Microsoft.ServiceBus.Messaging.RuleDescription,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: OnBeginAddRule(RuleDescription, TimeSpan, AsyncCallback, Object)
  nameWithType: SubscriptionClient.OnBeginAddRule(RuleDescription, TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginAddRule(Microsoft.ServiceBus.Messaging.RuleDescription, System.TimeSpan, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnBeginAddRule
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1014
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes upon calling the BeginAddRule operation.
  example: []
  syntax:
    content: protected abstract IAsyncResult OnBeginAddRule(RuleDescription description, TimeSpan timeout, AsyncCallback callback, object state)
    content.vb: Protected MustOverride Function OnBeginAddRule(description As RuleDescription, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: description
      type: Microsoft.ServiceBus.Messaging.RuleDescription
      description: The rule description that provides metadata of the rule to add.
    - id: timeout
      type: System.TimeSpan
      description: The time span this operation waits before it times out.
    - id: callback
      type: System.AsyncCallback
      description: "An \n<xref href=\"System.AsyncCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate that references the method to invoke when the operation is complete."
    - id: state
      type: System.Object
      description: A user-defined object that contains state information about the asynchronous operation.
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation to add a new rule to the subscription.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginAddRule*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndAddRule(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndAddRule(System.IAsyncResult)
  id: OnEndAddRule(System.IAsyncResult)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: OnEndAddRule(IAsyncResult)
  nameWithType: SubscriptionClient.OnEndAddRule(IAsyncResult)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndAddRule(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnEndAddRule
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1021
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Ends the asynchronous call to \n<xref href=\"Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginAddRule(Microsoft.ServiceBus.Messaging.RuleDescription%2cSystem.TimeSpan%2cSystem.AsyncCallback%2cSystem.Object)\" data-throw-if-not-resolved=\"false\"></xref>."
  example: []
  syntax:
    content: protected abstract void OnEndAddRule(IAsyncResult result)
    content.vb: Protected MustOverride Sub OnEndAddRule(result As IAsyncResult)
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "An \n<xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> from a \n<xref href=\"Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginAddRule(Microsoft.ServiceBus.Messaging.RuleDescription%2cSystem.TimeSpan%2cSystem.AsyncCallback%2cSystem.Object)\" data-throw-if-not-resolved=\"false\"></xref>."
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndAddRule*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginRemoveRule(System.String,System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginRemoveRule(System.String,System.TimeSpan,System.AsyncCallback,System.Object)
  id: OnBeginRemoveRule(System.String,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: OnBeginRemoveRule(String, TimeSpan, AsyncCallback, Object)
  nameWithType: SubscriptionClient.OnBeginRemoveRule(String, TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginRemoveRule(System.String, System.TimeSpan, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnBeginRemoveRule
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1035
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Begins removing a \n<xref href=\"Microsoft.ServiceBus.Messaging.RuleDescription\" data-throw-if-not-resolved=\"false\"></xref> from a \n<xref href=\"Microsoft.ServiceBus.Messaging.SubscriptionDescription\" data-throw-if-not-resolved=\"false\"></xref> through the run-time client protocol."
  example: []
  syntax:
    content: protected abstract IAsyncResult OnBeginRemoveRule(string ruleName, TimeSpan timeout, AsyncCallback callback, object state)
    content.vb: Protected MustOverride Function OnBeginRemoveRule(ruleName As String, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: ruleName
      type: System.String
      description: The name of the rule to remove.
    - id: timeout
      type: System.TimeSpan
      description: The wait time before the operation times out.
    - id: callback
      type: System.AsyncCallback
      description: "An \n<xref href=\"System.AsyncCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate that references the method to invoke when the operation is complete."
    - id: state
      type: System.Object
      description: "A user-defined object that contains information about the receive operation. This object is passed to the \n<xref href=\"Microsoft.ServiceBus.Messaging.SubscriptionClient.RemoveRule(System.String)\" data-throw-if-not-resolved=\"false\"></xref> delegate when the operation is complete."
    return:
      type: System.IAsyncResult
      description: "An \n<xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> that references the asynchronous \n<xref href=\"Microsoft.ServiceBus.Messaging.SubscriptionClient.RemoveRule(System.String)\" data-throw-if-not-resolved=\"false\"></xref>."
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginRemoveRule*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndRemoveRule(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndRemoveRule(System.IAsyncResult)
  id: OnEndRemoveRule(System.IAsyncResult)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: OnEndRemoveRule(IAsyncResult)
  nameWithType: SubscriptionClient.OnEndRemoveRule(IAsyncResult)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndRemoveRule(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnEndRemoveRule
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1042
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Ends the asynchronous call to \n<xref href=\"Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginRemoveRule(System.String%2cSystem.TimeSpan%2cSystem.AsyncCallback%2cSystem.Object)\" data-throw-if-not-resolved=\"false\"></xref>."
  example: []
  syntax:
    content: protected abstract void OnEndRemoveRule(IAsyncResult result)
    content.vb: Protected MustOverride Sub OnEndRemoveRule(result As IAsyncResult)
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "An \n<xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> from a \n<xref href=\"Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginRemoveRule(System.String%2cSystem.TimeSpan%2cSystem.AsyncCallback%2cSystem.Object)\" data-throw-if-not-resolved=\"false\"></xref>."
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndRemoveRule*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginRemoveRulesByTag(System.String,System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginRemoveRulesByTag(System.String,System.TimeSpan,System.AsyncCallback,System.Object)
  id: OnBeginRemoveRulesByTag(System.String,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: OnBeginRemoveRulesByTag(String, TimeSpan, AsyncCallback, Object)
  nameWithType: SubscriptionClient.OnBeginRemoveRulesByTag(String, TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginRemoveRulesByTag(System.String, System.TimeSpan, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnBeginRemoveRulesByTag
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1054
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Begins removing a \n<xref href=\"Microsoft.ServiceBus.Messaging.RuleDescription\" data-throw-if-not-resolved=\"false\"></xref> from a \n<xref href=\"Microsoft.ServiceBus.Messaging.SubscriptionDescription\" data-throw-if-not-resolved=\"false\"></xref> through the run-time client protocol using a tag."
  example: []
  syntax:
    content: protected abstract IAsyncResult OnBeginRemoveRulesByTag(string tag, TimeSpan timeout, AsyncCallback callback, object state)
    content.vb: Protected MustOverride Function OnBeginRemoveRulesByTag(tag As String, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: tag
      type: System.String
      description: The tag to be used.
    - id: timeout
      type: System.TimeSpan
      description: The wait time before the operation times out.
    - id: callback
      type: System.AsyncCallback
      description: "An \n<xref href=\"System.AsyncCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate that references the method to invoke when the operation is complete."
    - id: state
      type: System.Object
      description: "A user-defined object that contains information about the receive operation. This object is passed to the \n<xref href=\"Microsoft.ServiceBus.Messaging.SubscriptionClient.RemoveRule(System.String)\" data-throw-if-not-resolved=\"false\"></xref> delegate when the operation is complete."
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation to add a new rule to the subscription.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginRemoveRulesByTag*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndRemoveRules(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndRemoveRules(System.IAsyncResult)
  id: OnEndRemoveRules(System.IAsyncResult)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: OnEndRemoveRules(IAsyncResult)
  nameWithType: SubscriptionClient.OnEndRemoveRules(IAsyncResult)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndRemoveRules(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnEndRemoveRules
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1059
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Ends the asynchronous call to \n<xref href=\"Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginRemoveRule(System.String%2cSystem.TimeSpan%2cSystem.AsyncCallback%2cSystem.Object)\" data-throw-if-not-resolved=\"false\"></xref>."
  example: []
  syntax:
    content: protected abstract void OnEndRemoveRules(IAsyncResult result)
    content.vb: Protected MustOverride Sub OnEndRemoveRules(result As IAsyncResult)
    parameters:
    - id: result
      type: System.IAsyncResult
      description: The result of the asynchronization.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndRemoveRules*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnAbort
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnAbort
  id: OnAbort
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: OnAbort()
  nameWithType: SubscriptionClient.OnAbort()
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnAbort()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnAbort
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1062
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes the abort action.
  example: []
  syntax:
    content: protected override void OnAbort()
    content.vb: Protected Overrides Sub OnAbort
  overridden: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnAbort*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnClose(System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnClose(System.TimeSpan)
  id: OnClose(System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: OnClose(TimeSpan)
  nameWithType: SubscriptionClient.OnClose(TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnClose(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnClose
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1070
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes the close action.
  example: []
  syntax:
    content: protected override void OnClose(TimeSpan timeout)
    content.vb: Protected Overrides Sub OnClose(timeout As TimeSpan)
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: The wait time before the operation times out.
  overridden: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose(System.TimeSpan)
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnClose*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  id: OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: OnBeginClose(TimeSpan, AsyncCallback, Object)
  nameWithType: SubscriptionClient.OnBeginClose(TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginClose(System.TimeSpan, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnBeginClose
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1083
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes the begin close action.
  example: []
  syntax:
    content: protected override IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state)
    content.vb: Protected Overrides Function OnBeginClose(timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: The wait time before the operation times out.
    - id: callback
      type: System.AsyncCallback
      description: "An \n<xref href=\"System.AsyncCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate that references the method to invoke when the operation is complete."
    - id: state
      type: System.Object
      description: "A user-defined object that contains information about the receive operation. \nThis object is passed to the BeginClose delegate when the operation is complete."
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult" data-throw-if-not-resolved="false"></xref>that references the asynchronous BeginClose.
  overridden: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginClose*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndClose(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndClose(System.IAsyncResult)
  id: OnEndClose(System.IAsyncResult)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: OnEndClose(IAsyncResult)
  nameWithType: SubscriptionClient.OnEndClose(IAsyncResult)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndClose(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnEndClose
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1091
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes the end close action.
  example: []
  syntax:
    content: protected override void OnEndClose(IAsyncResult result)
    content.vb: Protected Overrides Sub OnEndClose(result As IAsyncResult)
    parameters:
    - id: result
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous BeginClose.
  overridden: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose(System.IAsyncResult)
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndClose*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.Mode
  commentId: P:Microsoft.ServiceBus.Messaging.SubscriptionClient.Mode
  id: Mode
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: Mode
  nameWithType: SubscriptionClient.Mode
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.Mode
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Mode
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1104
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets the message receive mode when processing the received message.
  example: []
  syntax:
    content: public ReceiveMode Mode { get; }
    content.vb: Public ReadOnly Property Mode As ReceiveMode
    parameters: []
    return:
      type: Microsoft.ServiceBus.Messaging.ReceiveMode
      description: The message <xref href="Microsoft.ServiceBus.Messaging.ReceiveMode" data-throw-if-not-resolved="false"></xref> when processing the received message.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.Mode*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.PrefetchCount
  commentId: P:Microsoft.ServiceBus.Messaging.SubscriptionClient.PrefetchCount
  id: PrefetchCount
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: PrefetchCount
  nameWithType: SubscriptionClient.PrefetchCount
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.PrefetchCount
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: PrefetchCount
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1109
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets or sets the number of messages that the message receiver can simultaneously request.
  remarks: 'Takes effect on the next receive call to the server. '
  example: []
  syntax:
    content: public int PrefetchCount { get; set; }
    content.vb: Public Property PrefetchCount As Integer
    parameters: []
    return:
      type: System.Int32
      description: The number of messages that the message receiver can simultaneously request.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.PrefetchCount*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.Abandon(System.Guid)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.Abandon(System.Guid)
  id: Abandon(System.Guid)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: Abandon(Guid)
  nameWithType: SubscriptionClient.Abandon(Guid)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.Abandon(System.Guid)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Abandon
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1132
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Discards the message and relinquishes the message lock ownership.
  remarks: "When the client fails to get the message from the queue/topic, this method should be called. \n         Service Bus will increment the delivery count of the message. \n         The client now can either attempt to receive the message again or move it to the dead-letter queue."
  example: []
  syntax:
    content: public void Abandon(Guid lockToken)
    content.vb: Public Sub Abandon(lockToken As Guid)
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance to abandon.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.Abandon*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "Thrown if the operation exceeded the timeout value set via \n<xref href=\"Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref>."
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Thrown if the client entity has been closed or aborted.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.Abandon(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.Abandon(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: Abandon(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: Abandon(Guid, IDictionary<String, Object>)
  nameWithType: SubscriptionClient.Abandon(Guid, IDictionary<String, Object>)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.Abandon(System.Guid, System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Abandon
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1144
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Discards the message and relinquishes the message lock ownership.
  remarks: "When the client fails to get the message from the queue/topic, this method should be called. \n         Service Bus will increment the delivery count of the message. \n         The client now can either attempt to receive the message again or move it to the dead-letter queue."
  example: []
  syntax:
    content: public void Abandon(Guid lockToken, IDictionary<string, object> propertiesToModify)
    content.vb: Public Sub Abandon(lockToken As Guid, propertiesToModify As IDictionary(Of String, Object))
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance to abandon.
    - id: propertiesToModify
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: A collection of property objects to be modified.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.Abandon*
  nameWithType.vb: SubscriptionClient.Abandon(Guid, IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.SubscriptionClient.Abandon(System.Guid, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: Abandon(Guid, IDictionary(Of String, Object))
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.AbandonAsync(System.Guid)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.AbandonAsync(System.Guid)
  id: AbandonAsync(System.Guid)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: AbandonAsync(Guid)
  nameWithType: SubscriptionClient.AbandonAsync(Guid)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.AbandonAsync(System.Guid)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: AbandonAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1153
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously discards the message and relinquishes the message lock ownership.
  example: []
  syntax:
    content: public Task AbandonAsync(Guid lockToken)
    content.vb: Public Function AbandonAsync(lockToken As Guid) As Task
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance to abandon.
    return:
      type: System.Threading.Tasks.Task
      description: A task instance that represents the asynchronous abandon operation.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.AbandonAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.AbandonAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.AbandonAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: AbandonAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: AbandonAsync(Guid, IDictionary<String, Object>)
  nameWithType: SubscriptionClient.AbandonAsync(Guid, IDictionary<String, Object>)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.AbandonAsync(System.Guid, System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: AbandonAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1163
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously discards the message and relinquishes the message lock ownership.
  example: []
  syntax:
    content: public Task AbandonAsync(Guid lockToken, IDictionary<string, object> propertiesToModify)
    content.vb: Public Function AbandonAsync(lockToken As Guid, propertiesToModify As IDictionary(Of String, Object)) As Task
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance to abandon.
    - id: propertiesToModify
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: A collection of property objects to be modified.
    return:
      type: System.Threading.Tasks.Task
      description: A task instance that represents the asynchronous abandon operation.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.AbandonAsync*
  nameWithType.vb: SubscriptionClient.AbandonAsync(Guid, IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.SubscriptionClient.AbandonAsync(System.Guid, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: AbandonAsync(Guid, IDictionary(Of String, Object))
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.Complete(System.Guid)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.Complete(System.Guid)
  id: Complete(System.Guid)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: Complete(Guid)
  nameWithType: SubscriptionClient.Complete(Guid)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.Complete(System.Guid)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Complete
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1199
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Completes processing of a message.
  remarks: >-
    This method is used as a handshake between the client and Service Bus for a guaranteed delivery of the message. If the
              client failed before calling this method, the message will be kept in the queue.
  example: []
  syntax:
    content: public void Complete(Guid lockToken)
    content.vb: Public Sub Complete(lockToken As Guid)
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.Complete*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "Thrown if the operation exceeded the timeout value set by \n<xref href=\"Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref>."
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Thrown if the client entity has been closed or aborted.
  - type: Microsoft.ServiceBus.Messaging.MessageLockLostException
    commentId: T:Microsoft.ServiceBus.Messaging.MessageLockLostException
    description: "Thrown if the message represented by \n<span class=\"paramref\">lockToken</span> has lost the message lock."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.CompleteAsync(System.Guid)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.CompleteAsync(System.Guid)
  id: CompleteAsync(System.Guid)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: CompleteAsync(Guid)
  nameWithType: SubscriptionClient.CompleteAsync(Guid)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.CompleteAsync(System.Guid)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CompleteAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1208
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously completes processing of a message.
  example: []
  syntax:
    content: public Task CompleteAsync(Guid lockToken)
    content.vb: Public Function CompleteAsync(lockToken As Guid) As Task
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance.
    return:
      type: System.Threading.Tasks.Task
      description: A task instance that represents the asynchronous complete operation.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.CompleteAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.CompleteBatch(System.Collections.Generic.IEnumerable{System.Guid})
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.CompleteBatch(System.Collections.Generic.IEnumerable{System.Guid})
  id: CompleteBatch(System.Collections.Generic.IEnumerable{System.Guid})
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: CompleteBatch(IEnumerable<Guid>)
  nameWithType: SubscriptionClient.CompleteBatch(IEnumerable<Guid>)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.CompleteBatch(System.Collections.Generic.IEnumerable<System.Guid>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CompleteBatch
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1218
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Completes processing of a batch.
  remarks: >-
    This method is used as a handshake between the client and Service Bus for a guaranteed delivery of the message. If the
              client failed before calling this method, the message will be kept in the queue.
  example: []
  syntax:
    content: public void CompleteBatch(IEnumerable<Guid> lockTokens)
    content.vb: Public Sub CompleteBatch(lockTokens As IEnumerable(Of Guid))
    parameters:
    - id: lockTokens
      type: System.Collections.Generic.IEnumerable{System.Guid}
      description: The lock tokens bound to the locked message instance.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.CompleteBatch*
  nameWithType.vb: SubscriptionClient.CompleteBatch(IEnumerable(Of Guid))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.SubscriptionClient.CompleteBatch(System.Collections.Generic.IEnumerable(Of System.Guid))
  name.vb: CompleteBatch(IEnumerable(Of Guid))
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.CompleteBatchAsync(System.Collections.Generic.IEnumerable{System.Guid})
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.CompleteBatchAsync(System.Collections.Generic.IEnumerable{System.Guid})
  id: CompleteBatchAsync(System.Collections.Generic.IEnumerable{System.Guid})
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: CompleteBatchAsync(IEnumerable<Guid>)
  nameWithType: SubscriptionClient.CompleteBatchAsync(IEnumerable<Guid>)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.CompleteBatchAsync(System.Collections.Generic.IEnumerable<System.Guid>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CompleteBatchAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1227
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously completes processing of a batch.
  example: []
  syntax:
    content: public Task CompleteBatchAsync(IEnumerable<Guid> lockTokens)
    content.vb: Public Function CompleteBatchAsync(lockTokens As IEnumerable(Of Guid)) As Task
    parameters:
    - id: lockTokens
      type: System.Collections.Generic.IEnumerable{System.Guid}
      description: The lock tokens bound to the locked message instance.
    return:
      type: System.Threading.Tasks.Task
      description: A task instance that represents the asynchronous complete batch operation.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.CompleteBatchAsync*
  nameWithType.vb: SubscriptionClient.CompleteBatchAsync(IEnumerable(Of Guid))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.SubscriptionClient.CompleteBatchAsync(System.Collections.Generic.IEnumerable(Of System.Guid))
  name.vb: CompleteBatchAsync(IEnumerable(Of Guid))
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.Defer(System.Guid)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.Defer(System.Guid)
  id: Defer(System.Guid)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: Defer(Guid)
  nameWithType: SubscriptionClient.Defer(Guid)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.Defer(System.Guid)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Defer
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1283
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Suspends the processing of a message.
  remarks: 'Before deferring, you should set aside the message receipt for later retrieval. '
  example: []
  syntax:
    content: public void Defer(Guid lockToken)
    content.vb: Public Sub Defer(lockToken As Guid)
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.Defer*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "Thrown if the operation exceeded the timeout value set by \n<xref href=\"Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref>."
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Thrown if the client entity has been closed or aborted.
  - type: Microsoft.ServiceBus.Messaging.MessageLockLostException
    commentId: T:Microsoft.ServiceBus.Messaging.MessageLockLostException
    description: "Thrown if the message represented by \n<span class=\"paramref\">lockToken</span> has lost the message lock."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.Defer(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.Defer(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: Defer(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: Defer(Guid, IDictionary<String, Object>)
  nameWithType: SubscriptionClient.Defer(Guid, IDictionary<String, Object>)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.Defer(System.Guid, System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Defer
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1293
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Suspends the processing of a message.
  remarks: 'Before deferring, you should set aside the message receipt for later retrieval. '
  example: []
  syntax:
    content: public void Defer(Guid lockToken, IDictionary<string, object> propertiesToModify)
    content.vb: Public Sub Defer(lockToken As Guid, propertiesToModify As IDictionary(Of String, Object))
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance.
    - id: propertiesToModify
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: The properties to modify.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.Defer*
  nameWithType.vb: SubscriptionClient.Defer(Guid, IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.SubscriptionClient.Defer(System.Guid, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: Defer(Guid, IDictionary(Of String, Object))
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.DeferAsync(System.Guid)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.DeferAsync(System.Guid)
  id: DeferAsync(System.Guid)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: DeferAsync(Guid)
  nameWithType: SubscriptionClient.DeferAsync(Guid)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.DeferAsync(System.Guid)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: DeferAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1302
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously suspends the processing of a message.
  example: []
  syntax:
    content: public Task DeferAsync(Guid lockToken)
    content.vb: Public Function DeferAsync(lockToken As Guid) As Task
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance.
    return:
      type: System.Threading.Tasks.Task
      description: A task instance that represents the asynchronous defer operation.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.DeferAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.DeferAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.DeferAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: DeferAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: DeferAsync(Guid, IDictionary<String, Object>)
  nameWithType: SubscriptionClient.DeferAsync(Guid, IDictionary<String, Object>)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.DeferAsync(System.Guid, System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: DeferAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1312
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously suspends the processing of a message.
  example: []
  syntax:
    content: public Task DeferAsync(Guid lockToken, IDictionary<string, object> propertiesToModify)
    content.vb: Public Function DeferAsync(lockToken As Guid, propertiesToModify As IDictionary(Of String, Object)) As Task
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance.
    - id: propertiesToModify
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: The properties to modify.
    return:
      type: System.Threading.Tasks.Task
      description: A task instance that represents the asynchronous defer operation.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.DeferAsync*
  nameWithType.vb: SubscriptionClient.DeferAsync(Guid, IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.SubscriptionClient.DeferAsync(System.Guid, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: DeferAsync(Guid, IDictionary(Of String, Object))
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetter(System.Guid)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetter(System.Guid)
  id: DeadLetter(System.Guid)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: DeadLetter(Guid)
  nameWithType: SubscriptionClient.DeadLetter(Guid)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetter(System.Guid)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: DeadLetter
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1347
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Moves the undelivered message to the dead letter queue.
  example: []
  syntax:
    content: public void DeadLetter(Guid lockToken)
    content.vb: Public Sub DeadLetter(lockToken As Guid)
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetter*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "Thrown if the operation exceeded the timeout value set by \n<xref href=\"Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref>."
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Thrown if the client entity has been closed or aborted.
  - type: Microsoft.ServiceBus.Messaging.MessageLockLostException
    commentId: T:Microsoft.ServiceBus.Messaging.MessageLockLostException
    description: "Thrown if the message represented by \n<span class=\"paramref\">lockToken</span> has lost the message lock."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetter(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetter(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: DeadLetter(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: DeadLetter(Guid, IDictionary<String, Object>)
  nameWithType: SubscriptionClient.DeadLetter(Guid, IDictionary<String, Object>)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetter(System.Guid, System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: DeadLetter
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1356
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Moves the undelivered message to the dead letter queue.
  example: []
  syntax:
    content: public void DeadLetter(Guid lockToken, IDictionary<string, object> propertiesToModify)
    content.vb: Public Sub DeadLetter(lockToken As Guid, propertiesToModify As IDictionary(Of String, Object))
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance.
    - id: propertiesToModify
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: The properties to modify.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetter*
  nameWithType.vb: SubscriptionClient.DeadLetter(Guid, IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetter(System.Guid, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: DeadLetter(Guid, IDictionary(Of String, Object))
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetter(System.Guid,System.String,System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetter(System.Guid,System.String,System.String)
  id: DeadLetter(System.Guid,System.String,System.String)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: DeadLetter(Guid, String, String)
  nameWithType: SubscriptionClient.DeadLetter(Guid, String, String)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetter(System.Guid, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: DeadLetter
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1371
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Moves the undelivered message to the dead letter queue.
  example: []
  syntax:
    content: public void DeadLetter(Guid lockToken, string deadLetterReason, string deadLetterErrorDescription)
    content.vb: Public Sub DeadLetter(lockToken As Guid, deadLetterReason As String, deadLetterErrorDescription As String)
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance.
    - id: deadLetterReason
      type: System.String
      description: The reason for deadlettering the message.
    - id: deadLetterErrorDescription
      type: System.String
      description: The error description for deadlettering the message.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetter*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "Thrown if the operation exceeded the timeout value set by \n<xref href=\"Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref>."
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Thrown if the client entity has been closed or aborted.
  - type: Microsoft.ServiceBus.Messaging.MessageLockLostException
    commentId: T:Microsoft.ServiceBus.Messaging.MessageLockLostException
    description: "Thrown if the message represented by \n<span class=\"paramref\">lockToken</span> has lost the message lock."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetterAsync(System.Guid)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetterAsync(System.Guid)
  id: DeadLetterAsync(System.Guid)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: DeadLetterAsync(Guid)
  nameWithType: SubscriptionClient.DeadLetterAsync(Guid)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetterAsync(System.Guid)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: DeadLetterAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1380
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously moves the undelivered message to the dead letter queue.
  example: []
  syntax:
    content: public Task DeadLetterAsync(Guid lockToken)
    content.vb: Public Function DeadLetterAsync(lockToken As Guid) As Task
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance.
    return:
      type: System.Threading.Tasks.Task
      description: A task instance that represents the asynchronous deadletter operation.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetterAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetterAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetterAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: DeadLetterAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: DeadLetterAsync(Guid, IDictionary<String, Object>)
  nameWithType: SubscriptionClient.DeadLetterAsync(Guid, IDictionary<String, Object>)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetterAsync(System.Guid, System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: DeadLetterAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1390
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously moves the undelivered message to the dead letter queue.
  example: []
  syntax:
    content: public Task DeadLetterAsync(Guid lockToken, IDictionary<string, object> propertiesToModify)
    content.vb: Public Function DeadLetterAsync(lockToken As Guid, propertiesToModify As IDictionary(Of String, Object)) As Task
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance.
    - id: propertiesToModify
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: The properties to modify.
    return:
      type: System.Threading.Tasks.Task
      description: A task instance that represents the asynchronous deadletter operation.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetterAsync*
  nameWithType.vb: SubscriptionClient.DeadLetterAsync(Guid, IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetterAsync(System.Guid, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: DeadLetterAsync(Guid, IDictionary(Of String, Object))
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetterAsync(System.Guid,System.String,System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetterAsync(System.Guid,System.String,System.String)
  id: DeadLetterAsync(System.Guid,System.String,System.String)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: DeadLetterAsync(Guid, String, String)
  nameWithType: SubscriptionClient.DeadLetterAsync(Guid, String, String)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetterAsync(System.Guid, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: DeadLetterAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1401
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously moves the undelivered message to the dead letter queue.
  example: []
  syntax:
    content: public Task DeadLetterAsync(Guid lockToken, string deadLetterReason, string deadLetterErrorDescription)
    content.vb: Public Function DeadLetterAsync(lockToken As Guid, deadLetterReason As String, deadLetterErrorDescription As String) As Task
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance.
    - id: deadLetterReason
      type: System.String
      description: The reason for deadlettering the message.
    - id: deadLetterErrorDescription
      type: System.String
      description: The error description for deadlettering the message.
    return:
      type: System.Threading.Tasks.Task
      description: A task instance that represents the asynchronous deadletter operation.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetterAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.Receive
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.Receive
  id: Receive
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: Receive()
  nameWithType: SubscriptionClient.Receive()
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.Receive()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Receive
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1452
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Receives a message using the <xref href="Microsoft.ServiceBus.Messaging.QueueClient.InternalReceiver" data-throw-if-not-resolved="false"></xref>.
  remarks: "A Null can be return by this API if operation exceeded the timeout specified, \nor the operations succeeded but there are no more messages to be received."
  example: []
  syntax:
    content: public BrokeredMessage Receive()
    content.vb: Public Function Receive As BrokeredMessage
    return:
      type: Microsoft.ServiceBus.Messaging.BrokeredMessage
      description: The <xref href="Microsoft.ServiceBus.Messaging.BrokeredMessage" data-throw-if-not-resolved="false"></xref> that represents the received message.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.Receive*
  exceptions:
  - type: Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
    description: Thrown when the subscription does not exist.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "Thrown if the operation exceeded the timeout value set via \n<xref href=\"Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref>."
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Thrown if the client entity has been closed or aborted.
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: Thrown if there is an authentication error.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.Receive(System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.Receive(System.TimeSpan)
  id: Receive(System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: Receive(TimeSpan)
  nameWithType: SubscriptionClient.Receive(TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.Receive(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Receive
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1469
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Receives a message using the <xref href="Microsoft.ServiceBus.Messaging.QueueClient.InternalReceiver" data-throw-if-not-resolved="false"></xref>.
  remarks: "A Null can be return by this API if operation exceeded the timeout specified, \nor the operations succeeded but there are no more messages to be received."
  example: []
  syntax:
    content: public BrokeredMessage Receive(TimeSpan serverWaitTime)
    content.vb: Public Function Receive(serverWaitTime As TimeSpan) As BrokeredMessage
    parameters:
    - id: serverWaitTime
      type: System.TimeSpan
      description: The time span the server waits for receiving a message before it times out.
    return:
      type: Microsoft.ServiceBus.Messaging.BrokeredMessage
      description: The <xref href="Microsoft.ServiceBus.Messaging.BrokeredMessage" data-throw-if-not-resolved="false"></xref>  that represents the received message.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.Receive*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown if the <span class="paramref">serverWaitTime</span> is negative.
  - type: Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
    description: Thrown when the subscription does not exist.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Thrown if the client entity has been closed or aborted.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "Thrown if the operation exceeded the timeout value set via \n<xref href=\"Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout\" data-throw-if-not-resolved=\"false\"></xref>."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: Thrown if there is an authentication error.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.Receive(System.Int64)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.Receive(System.Int64)
  id: Receive(System.Int64)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: Receive(Int64)
  nameWithType: SubscriptionClient.Receive(Int64)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.Receive(System.Int64)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Receive
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1481
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Receives a message using the <xref href="Microsoft.ServiceBus.Messaging.QueueClient.InternalReceiver" data-throw-if-not-resolved="false"></xref>.
  remarks: "A Null can be return by this API if operation exceeded the timeout specified, \nor the operations succeeded but the message with the requested sequenceNumber cannot be located."
  example: []
  syntax:
    content: public BrokeredMessage Receive(long sequenceNumber)
    content.vb: Public Function Receive(sequenceNumber As Long) As BrokeredMessage
    parameters:
    - id: sequenceNumber
      type: System.Int64
      description: The sequence number of the deferred message to receive.
    return:
      type: Microsoft.ServiceBus.Messaging.BrokeredMessage
      description: The <xref href="Microsoft.ServiceBus.Messaging.BrokeredMessage" data-throw-if-not-resolved="false"></xref>  that represents the received message.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.Receive*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Thrown if the client entity has been closed or aborted.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatch(System.Int32)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatch(System.Int32)
  id: ReceiveBatch(System.Int32)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: ReceiveBatch(Int32)
  nameWithType: SubscriptionClient.ReceiveBatch(Int32)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatch(System.Int32)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ReceiveBatch
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1493
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Receives a batch after the asynchronous operation.
  remarks: "A Null can be return by this API if operation exceeded the timeout specified, \nor the operations succeeded but there are no more messages to be received."
  example: []
  syntax:
    content: public IEnumerable<BrokeredMessage> ReceiveBatch(int messageCount)
    content.vb: Public Function ReceiveBatch(messageCount As Integer) As IEnumerable(Of BrokeredMessage)
    parameters:
    - id: messageCount
      type: System.Int32
      description: "The number of messages to return in the batch. As this is an approximation, \nfewer or more messages than <span class=\"paramref\">messageCount</span> may be returned."
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: A batch after the asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatch(System.Int32,System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatch(System.Int32,System.TimeSpan)
  id: ReceiveBatch(System.Int32,System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: ReceiveBatch(Int32, TimeSpan)
  nameWithType: SubscriptionClient.ReceiveBatch(Int32, TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatch(System.Int32, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ReceiveBatch
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1506
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Receives a batch after the asynchronous operation.
  remarks: "A Null can be return by this API if operation exceeded the timeout specified, \nor the operations succeeded but there are no more messages to be received."
  example: []
  syntax:
    content: public IEnumerable<BrokeredMessage> ReceiveBatch(int messageCount, TimeSpan serverWaitTime)
    content.vb: Public Function ReceiveBatch(messageCount As Integer, serverWaitTime As TimeSpan) As IEnumerable(Of BrokeredMessage)
    parameters:
    - id: messageCount
      type: System.Int32
      description: "The number of messages to return in the batch. As this is an approximation, \nfewer or more messages than <span class=\"paramref\">messageCount</span> may be returned."
    - id: serverWaitTime
      type: System.TimeSpan
      description: The time span the server waits for processing messages.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: A batch after the asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatch(System.Collections.Generic.IEnumerable{System.Int64})
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatch(System.Collections.Generic.IEnumerable{System.Int64})
  id: ReceiveBatch(System.Collections.Generic.IEnumerable{System.Int64})
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: ReceiveBatch(IEnumerable<Int64>)
  nameWithType: SubscriptionClient.ReceiveBatch(IEnumerable<Int64>)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatch(System.Collections.Generic.IEnumerable<System.Int64>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ReceiveBatch
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1517
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Receives a batch after the asynchronous operation.
  remarks: "A Null can be return by this API if operation exceeded the timeout specified, \nor the operations succeeded but the message with the requested sequenceNumber cannot be located."
  example: []
  syntax:
    content: public IEnumerable<BrokeredMessage> ReceiveBatch(IEnumerable<long> sequenceNumbers)
    content.vb: Public Function ReceiveBatch(sequenceNumbers As IEnumerable(Of Long)) As IEnumerable(Of BrokeredMessage)
    parameters:
    - id: sequenceNumbers
      type: System.Collections.Generic.IEnumerable{System.Int64}
      description: The sequence number.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: A batch after the asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatch*
  nameWithType.vb: SubscriptionClient.ReceiveBatch(IEnumerable(Of Int64))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatch(System.Collections.Generic.IEnumerable(Of System.Int64))
  name.vb: ReceiveBatch(IEnumerable(Of Int64))
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveAsync
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveAsync
  id: ReceiveAsync
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: ReceiveAsync()
  nameWithType: SubscriptionClient.ReceiveAsync()
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveAsync()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ReceiveAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1525
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously receives a message using the <xref href="Microsoft.ServiceBus.Messaging.QueueClient.InternalReceiver" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Task<BrokeredMessage> ReceiveAsync()
    content.vb: Public Function ReceiveAsync As Task(Of BrokeredMessage)
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: A task instance that represents the asynchronous receive operation.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveAsync(System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveAsync(System.TimeSpan)
  id: ReceiveAsync(System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: ReceiveAsync(TimeSpan)
  nameWithType: SubscriptionClient.ReceiveAsync(TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveAsync(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ReceiveAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1534
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously receives a message using the <xref href="Microsoft.ServiceBus.Messaging.QueueClient.InternalReceiver" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Task<BrokeredMessage> ReceiveAsync(TimeSpan serverWaitTime)
    content.vb: Public Function ReceiveAsync(serverWaitTime As TimeSpan) As Task(Of BrokeredMessage)
    parameters:
    - id: serverWaitTime
      type: System.TimeSpan
      description: The time span the server waits for receiving a message before it times out.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: A task instance that represents the asynchronous receive operation.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveAsync(System.Int64)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveAsync(System.Int64)
  id: ReceiveAsync(System.Int64)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: ReceiveAsync(Int64)
  nameWithType: SubscriptionClient.ReceiveAsync(Int64)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveAsync(System.Int64)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ReceiveAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1543
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously receives a message using the <xref href="Microsoft.ServiceBus.Messaging.QueueClient.InternalReceiver" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Task<BrokeredMessage> ReceiveAsync(long sequenceNumber)
    content.vb: Public Function ReceiveAsync(sequenceNumber As Long) As Task(Of BrokeredMessage)
    parameters:
    - id: sequenceNumber
      type: System.Int64
      description: The sequence number of the deferred message to receive.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: A task instance that represents the asynchronous receive operation.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatchAsync(System.Int32)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatchAsync(System.Int32)
  id: ReceiveBatchAsync(System.Int32)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: ReceiveBatchAsync(Int32)
  nameWithType: SubscriptionClient.ReceiveBatchAsync(Int32)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatchAsync(System.Int32)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ReceiveBatchAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1553
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously receives a set of messages (for batch processing).
  example: []
  syntax:
    content: public Task<IEnumerable<BrokeredMessage>> ReceiveBatchAsync(int messageCount)
    content.vb: Public Function ReceiveBatchAsync(messageCount As Integer) As Task(Of IEnumerable(Of BrokeredMessage))
    parameters:
    - id: messageCount
      type: System.Int32
      description: "The number of messages to return in the batch. As this is an approximation, \nfewer or more messages than <span class=\"paramref\">messageCount</span> may be returned."
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}}
      description: A task instance that represents the asynchronous receive batch operation.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatchAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatchAsync(System.Int32,System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatchAsync(System.Int32,System.TimeSpan)
  id: ReceiveBatchAsync(System.Int32,System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: ReceiveBatchAsync(Int32, TimeSpan)
  nameWithType: SubscriptionClient.ReceiveBatchAsync(Int32, TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatchAsync(System.Int32, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ReceiveBatchAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1564
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously receives a set of messages (for batch processing).
  example: []
  syntax:
    content: public Task<IEnumerable<BrokeredMessage>> ReceiveBatchAsync(int messageCount, TimeSpan serverWaitTime)
    content.vb: Public Function ReceiveBatchAsync(messageCount As Integer, serverWaitTime As TimeSpan) As Task(Of IEnumerable(Of BrokeredMessage))
    parameters:
    - id: messageCount
      type: System.Int32
      description: "The number of messages to return in the batch. As this is an approximation, \nfewer or more messages than <span class=\"paramref\">messageCount</span> may be returned."
    - id: serverWaitTime
      type: System.TimeSpan
      description: The time span the server waits for processing messages.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}}
      description: A task instance that represents the asynchronous receive batch operation.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatchAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatchAsync(System.Collections.Generic.IEnumerable{System.Int64})
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatchAsync(System.Collections.Generic.IEnumerable{System.Int64})
  id: ReceiveBatchAsync(System.Collections.Generic.IEnumerable{System.Int64})
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: ReceiveBatchAsync(IEnumerable<Int64>)
  nameWithType: SubscriptionClient.ReceiveBatchAsync(IEnumerable<Int64>)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatchAsync(System.Collections.Generic.IEnumerable<System.Int64>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ReceiveBatchAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1573
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously receives a set of messages (for batch processing).
  example: []
  syntax:
    content: public Task<IEnumerable<BrokeredMessage>> ReceiveBatchAsync(IEnumerable<long> sequenceNumbers)
    content.vb: Public Function ReceiveBatchAsync(sequenceNumbers As IEnumerable(Of Long)) As Task(Of IEnumerable(Of BrokeredMessage))
    parameters:
    - id: sequenceNumbers
      type: System.Collections.Generic.IEnumerable{System.Int64}
      description: The sequence number.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}}
      description: A task instance that represents the asynchronous receive batch operation.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatchAsync*
  nameWithType.vb: SubscriptionClient.ReceiveBatchAsync(IEnumerable(Of Int64))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatchAsync(System.Collections.Generic.IEnumerable(Of System.Int64))
  name.vb: ReceiveBatchAsync(IEnumerable(Of Int64))
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.Peek
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.Peek
  id: Peek
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: Peek()
  nameWithType: SubscriptionClient.Peek()
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.Peek()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Peek
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1660
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Returns without removing the first message in the queue.
  remarks: "A Null can be return by this API if operation exceeded the timeout specified, \nor the operations succeeded but there are no more messages to be received."
  example: []
  syntax:
    content: public BrokeredMessage Peek()
    content.vb: Public Function Peek As BrokeredMessage
    return:
      type: Microsoft.ServiceBus.Messaging.BrokeredMessage
      description: The returned message.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.Peek*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.Peek(System.Int64)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.Peek(System.Int64)
  id: Peek(System.Int64)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: Peek(Int64)
  nameWithType: SubscriptionClient.Peek(Int64)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.Peek(System.Int64)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Peek
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1671
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Returns without removing the first message in the queue.
  remarks: "A Null can be return by this API if operation exceeded the timeout specified, \nor the operations succeeded but there are no more messages to be received."
  example: []
  syntax:
    content: public BrokeredMessage Peek(long fromSequenceNumber)
    content.vb: Public Function Peek(fromSequenceNumber As Long) As BrokeredMessage
    parameters:
    - id: fromSequenceNumber
      type: System.Int64
      description: The starting point from which to browse a message.
    return:
      type: Microsoft.ServiceBus.Messaging.BrokeredMessage
      description: The returned message.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.Peek*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekAsync
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekAsync
  id: PeekAsync
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: PeekAsync()
  nameWithType: SubscriptionClient.PeekAsync()
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekAsync()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: PeekAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1679
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously returns without removing the first message in the queue.
  example: []
  syntax:
    content: public Task<BrokeredMessage> PeekAsync()
    content.vb: Public Function PeekAsync As Task(Of BrokeredMessage)
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: A task instance that represents the asynchronous peek operation.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekAsync(System.Int64)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekAsync(System.Int64)
  id: PeekAsync(System.Int64)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: PeekAsync(Int64)
  nameWithType: SubscriptionClient.PeekAsync(Int64)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekAsync(System.Int64)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: PeekAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1688
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously returns without removing the first message in the queue.
  example: []
  syntax:
    content: public Task<BrokeredMessage> PeekAsync(long fromSequenceNumber)
    content.vb: Public Function PeekAsync(fromSequenceNumber As Long) As Task(Of BrokeredMessage)
    parameters:
    - id: fromSequenceNumber
      type: System.Int64
      description: The starting point from which to browse a message.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: A task instance that represents the asynchronous peek operation.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekBatch(System.Int32)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekBatch(System.Int32)
  id: PeekBatch(System.Int32)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: PeekBatch(Int32)
  nameWithType: SubscriptionClient.PeekBatch(Int32)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekBatch(System.Int32)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: PeekBatch
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1699
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Returns without removing the first messages in a batch.
  remarks: "A Null can be return by this API if operation exceeded the timeout specified, \nor the operations succeeded but there are no more messages to be received."
  example: []
  syntax:
    content: public IEnumerable<BrokeredMessage> PeekBatch(int messageCount)
    content.vb: Public Function PeekBatch(messageCount As Integer) As IEnumerable(Of BrokeredMessage)
    parameters:
    - id: messageCount
      type: System.Int32
      description: The number of messages in a batch.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: The collection of first messages in a batch.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekBatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekBatch(System.Int64,System.Int32)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekBatch(System.Int64,System.Int32)
  id: PeekBatch(System.Int64,System.Int32)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: PeekBatch(Int64, Int32)
  nameWithType: SubscriptionClient.PeekBatch(Int64, Int32)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekBatch(System.Int64, System.Int32)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: PeekBatch
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1709
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Returns without removing the first messages in a batch.
  example: []
  syntax:
    content: public IEnumerable<BrokeredMessage> PeekBatch(long fromSequenceNumber, int messageCount)
    content.vb: Public Function PeekBatch(fromSequenceNumber As Long, messageCount As Integer) As IEnumerable(Of BrokeredMessage)
    parameters:
    - id: fromSequenceNumber
      type: System.Int64
      description: The starting point from which to browse a message.
    - id: messageCount
      type: System.Int32
      description: The number of messages in a batch.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: The collection of first messages in a batch.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekBatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekBatchAsync(System.Int32)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekBatchAsync(System.Int32)
  id: PeekBatchAsync(System.Int32)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: PeekBatchAsync(Int32)
  nameWithType: SubscriptionClient.PeekBatchAsync(Int32)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekBatchAsync(System.Int32)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: PeekBatchAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1718
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously returns without removing the first messages in a batch.
  example: []
  syntax:
    content: public Task<IEnumerable<BrokeredMessage>> PeekBatchAsync(int messageCount)
    content.vb: Public Function PeekBatchAsync(messageCount As Integer) As Task(Of IEnumerable(Of BrokeredMessage))
    parameters:
    - id: messageCount
      type: System.Int32
      description: The number of messages in a batch.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}}
      description: A task instance that represents the asynchronous peek batch operation.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekBatchAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekBatchAsync(System.Int64,System.Int32)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekBatchAsync(System.Int64,System.Int32)
  id: PeekBatchAsync(System.Int64,System.Int32)
  parent: Microsoft.ServiceBus.Messaging.SubscriptionClient
  langs:
  - csharp
  - vb
  name: PeekBatchAsync(Int64, Int32)
  nameWithType: SubscriptionClient.PeekBatchAsync(Int64, Int32)
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekBatchAsync(System.Int64, System.Int32)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: PeekBatchAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/SubscriptionClient.cs
    startLine: 1728
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously returns without removing the first messages in a batch.
  example: []
  syntax:
    content: public Task<IEnumerable<BrokeredMessage>> PeekBatchAsync(long fromSequenceNumber, int messageCount)
    content.vb: Public Function PeekBatchAsync(fromSequenceNumber As Long, messageCount As Integer) As Task(Of IEnumerable(Of BrokeredMessage))
    parameters:
    - id: fromSequenceNumber
      type: System.Int64
      description: The starting point from which to browse a message.
    - id: messageCount
      type: System.Int32
      description: The number of messages in a batch.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}}
      description: A task instance that represents the asynchronous peek batch operation.
  overload: Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekBatchAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.ServiceBus.Messaging
  commentId: N:Microsoft.ServiceBus.Messaging
  isExternal: false
  name: Microsoft.ServiceBus.Messaging
  nameWithType: Microsoft.ServiceBus.Messaging
  fullName: Microsoft.ServiceBus.Messaging
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.ServiceBus.Messaging.ClientEntity
  commentId: T:Microsoft.ServiceBus.Messaging.ClientEntity
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: ClientEntity
  nameWithType: ClientEntity
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.RetryPolicy
  commentId: P:Microsoft.ServiceBus.Messaging.ClientEntity.RetryPolicy
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: RetryPolicy
  nameWithType: ClientEntity.RetryPolicy
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.RetryPolicy
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.IsClosed
  commentId: P:Microsoft.ServiceBus.Messaging.ClientEntity.IsClosed
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: IsClosed
  nameWithType: ClientEntity.IsClosed
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.IsClosed
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThisLock
  commentId: P:Microsoft.ServiceBus.Messaging.ClientEntity.ThisLock
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: ThisLock
  nameWithType: ClientEntity.ThisLock
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThisLock
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.Abort
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.Abort
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: Abort()
  nameWithType: ClientEntity.Abort()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Abort()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.Abort
    name: Abort
    nameWithType: ClientEntity.Abort
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Abort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.Abort
    name: Abort
    nameWithType: ClientEntity.Abort
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Abort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.Close
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.Close
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: Close()
  nameWithType: ClientEntity.Close()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Close()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.Close
    name: Close
    nameWithType: ClientEntity.Close
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Close
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.Close
    name: Close
    nameWithType: ClientEntity.Close
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Close
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: CloseAsync()
  nameWithType: ClientEntity.CloseAsync()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
    name: CloseAsync
    nameWithType: ClientEntity.CloseAsync
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
    name: CloseAsync
    nameWithType: ClientEntity.CloseAsync
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.Fault
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.Fault
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: Fault()
  nameWithType: ClientEntity.Fault()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Fault()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.Fault
    name: Fault
    nameWithType: ClientEntity.Fault
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Fault
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.Fault
    name: Fault
    nameWithType: ClientEntity.Fault
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Fault
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen(System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen(System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: true
  name: OnOpen(TimeSpan)
  nameWithType: ClientEntity.OnOpen(TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen(System.TimeSpan)
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen(System.TimeSpan)
    name: OnOpen
    nameWithType: ClientEntity.OnOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen(System.TimeSpan)
    name: OnOpen
    nameWithType: ClientEntity.OnOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: ThrowIfClosed()
  nameWithType: ClientEntity.ThrowIfClosed()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
    name: ThrowIfClosed
    nameWithType: ClientEntity.ThrowIfClosed
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
    name: ThrowIfClosed
    nameWithType: ClientEntity.ThrowIfClosed
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: ThrowIfDisposed()
  nameWithType: ClientEntity.ThrowIfDisposed()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
    name: ThrowIfDisposed
    nameWithType: ClientEntity.ThrowIfDisposed
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
    name: ThrowIfDisposed
    nameWithType: ClientEntity.ThrowIfDisposed
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: ThrowIfDisposedOrNotOpen()
  nameWithType: ClientEntity.ThrowIfDisposedOrNotOpen()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
    name: ThrowIfDisposedOrNotOpen
    nameWithType: ClientEntity.ThrowIfDisposedOrNotOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
    name: ThrowIfDisposedOrNotOpen
    nameWithType: ClientEntity.ThrowIfDisposedOrNotOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: ThrowIfFaulted()
  nameWithType: ClientEntity.ThrowIfFaulted()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
    name: ThrowIfFaulted
    nameWithType: ClientEntity.ThrowIfFaulted
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
    name: ThrowIfFaulted
    nameWithType: ClientEntity.ThrowIfFaulted
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: ThrowIfDisposedOrImmutable()
  nameWithType: ClientEntity.ThrowIfDisposedOrImmutable()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
    name: ThrowIfDisposedOrImmutable
    nameWithType: ClientEntity.ThrowIfDisposedOrImmutable
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
    name: ThrowIfDisposedOrImmutable
    nameWithType: ClientEntity.ThrowIfDisposedOrImmutable
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: OnOpened()
  nameWithType: ClientEntity.OnOpened()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
    name: OnOpened
    nameWithType: ClientEntity.OnOpened
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
    name: OnOpened
    nameWithType: ClientEntity.OnOpened
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: OnClosed()
  nameWithType: ClientEntity.OnClosed()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
    name: OnClosed
    nameWithType: ClientEntity.OnClosed
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
    name: OnClosed
    nameWithType: ClientEntity.OnClosed
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: OnFaulted()
  nameWithType: ClientEntity.OnFaulted()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
    name: OnFaulted
    nameWithType: ClientEntity.OnFaulted
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
    name: OnFaulted
    nameWithType: ClientEntity.OnFaulted
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: true
  name: OnBeginOpen(TimeSpan, AsyncCallback, Object)
  nameWithType: ClientEntity.OnBeginOpen(TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen(System.TimeSpan, System.AsyncCallback, System.Object)
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
    name: OnBeginOpen
    nameWithType: ClientEntity.OnBeginOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
    name: OnBeginOpen
    nameWithType: ClientEntity.OnBeginOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen(System.IAsyncResult)
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: true
  name: OnEndOpen(IAsyncResult)
  nameWithType: ClientEntity.OnEndOpen(IAsyncResult)
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen(System.IAsyncResult)
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen(System.IAsyncResult)
    name: OnEndOpen
    nameWithType: ClientEntity.OnEndOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen(System.IAsyncResult)
    name: OnEndOpen
    nameWithType: ClientEntity.OnEndOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.TopicPath*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.TopicPath
  isExternal: false
  name: TopicPath
  nameWithType: SubscriptionClient.TopicPath
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.TopicPath
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.Name*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.Name
  isExternal: false
  name: Name
  nameWithType: SubscriptionClient.Name
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.Name
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.MessagingFactory*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.MessagingFactory
  isExternal: false
  name: MessagingFactory
  nameWithType: SubscriptionClient.MessagingFactory
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.MessagingFactory
- uid: Microsoft.ServiceBus.Messaging.MessagingFactory
  commentId: T:Microsoft.ServiceBus.Messaging.MessagingFactory
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: MessagingFactory
  nameWithType: MessagingFactory
  fullName: Microsoft.ServiceBus.Messaging.MessagingFactory
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient
  commentId: T:Microsoft.ServiceBus.Messaging.SubscriptionClient
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: SubscriptionClient
  nameWithType: SubscriptionClient
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.Create*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.Create
  isExternal: false
  name: Create
  nameWithType: SubscriptionClient.Create
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.Create
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.CreateFromConnectionString*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.CreateFromConnectionString
  isExternal: false
  name: CreateFromConnectionString
  nameWithType: SubscriptionClient.CreateFromConnectionString
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.CreateFromConnectionString
- uid: Microsoft.ServiceBus.Messaging.ReceiveMode
  commentId: T:Microsoft.ServiceBus.Messaging.ReceiveMode
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: ReceiveMode
  nameWithType: ReceiveMode
  fullName: Microsoft.ServiceBus.Messaging.ReceiveMode
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.FormatSubscriptionPath*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.FormatSubscriptionPath
  isExternal: false
  name: FormatSubscriptionPath
  nameWithType: SubscriptionClient.FormatSubscriptionPath
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.FormatSubscriptionPath
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.FormatDeadLetterPath*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.FormatDeadLetterPath
  isExternal: false
  name: FormatDeadLetterPath
  nameWithType: SubscriptionClient.FormatDeadLetterPath
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.FormatDeadLetterPath
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.RenewMessageLock*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.RenewMessageLock
  isExternal: false
  name: RenewMessageLock
  nameWithType: SubscriptionClient.RenewMessageLock
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.RenewMessageLock
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.RenewMessageLockAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.RenewMessageLockAsync
  isExternal: false
  name: RenewMessageLockAsync
  nameWithType: SubscriptionClient.RenewMessageLockAsync
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.RenewMessageLockAsync
- uid: System.Threading.Tasks.Task{System.DateTime}
  commentId: T:System.Threading.Tasks.Task{System.DateTime}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<DateTime>
  nameWithType: Task<DateTime>
  fullName: System.Threading.Tasks.Task<System.DateTime>
  nameWithType.vb: Task(Of DateTime)
  fullname.vb: System.Threading.Tasks.Task(Of System.DateTime)
  name.vb: Task(Of DateTime)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandler*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandler
  isExternal: false
  name: RegisterSessionHandler
  nameWithType: SubscriptionClient.RegisterSessionHandler
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandler
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Microsoft.ServiceBus.Messaging.SessionHandlerOptions
  commentId: T:Microsoft.ServiceBus.Messaging.SessionHandlerOptions
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: SessionHandlerOptions
  nameWithType: SessionHandlerOptions
  fullName: Microsoft.ServiceBus.Messaging.SessionHandlerOptions
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerAsync
  isExternal: false
  name: RegisterSessionHandlerAsync
  nameWithType: SubscriptionClient.RegisterSessionHandlerAsync
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerFactory*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerFactory
  isExternal: false
  name: RegisterSessionHandlerFactory
  nameWithType: SubscriptionClient.RegisterSessionHandlerFactory
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerFactory
- uid: Microsoft.ServiceBus.Messaging.IMessageSessionHandlerFactory
  commentId: T:Microsoft.ServiceBus.Messaging.IMessageSessionHandlerFactory
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: IMessageSessionHandlerFactory
  nameWithType: IMessageSessionHandlerFactory
  fullName: Microsoft.ServiceBus.Messaging.IMessageSessionHandlerFactory
- uid: Microsoft.ServiceBus.Messaging.IMessageSessionAsyncHandlerFactory
  commentId: T:Microsoft.ServiceBus.Messaging.IMessageSessionAsyncHandlerFactory
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: IMessageSessionAsyncHandlerFactory
  nameWithType: IMessageSessionAsyncHandlerFactory
  fullName: Microsoft.ServiceBus.Messaging.IMessageSessionAsyncHandlerFactory
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerFactoryAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerFactoryAsync
  isExternal: false
  name: RegisterSessionHandlerFactoryAsync
  nameWithType: SubscriptionClient.RegisterSessionHandlerFactoryAsync
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.RegisterSessionHandlerFactoryAsync
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnMessage*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnMessage
  isExternal: false
  name: OnMessage
  nameWithType: SubscriptionClient.OnMessage
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnMessage
- uid: System.Action{Microsoft.ServiceBus.Messaging.BrokeredMessage}
  commentId: T:System.Action{Microsoft.ServiceBus.Messaging.BrokeredMessage}
  parent: System
  definition: System.Action`1
  name: Action<BrokeredMessage>
  nameWithType: Action<BrokeredMessage>
  fullName: System.Action<Microsoft.ServiceBus.Messaging.BrokeredMessage>
  nameWithType.vb: Action(Of BrokeredMessage)
  fullname.vb: System.Action(Of Microsoft.ServiceBus.Messaging.BrokeredMessage)
  name.vb: Action(Of BrokeredMessage)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.BrokeredMessage
    name: BrokeredMessage
    nameWithType: BrokeredMessage
    fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.BrokeredMessage
    name: BrokeredMessage
    nameWithType: BrokeredMessage
    fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullname.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.OnMessageOptions
  commentId: T:Microsoft.ServiceBus.Messaging.OnMessageOptions
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: OnMessageOptions
  nameWithType: OnMessageOptions
  fullName: Microsoft.ServiceBus.Messaging.OnMessageOptions
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnMessageAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnMessageAsync
  isExternal: false
  name: OnMessageAsync
  nameWithType: SubscriptionClient.OnMessageAsync
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnMessageAsync
- uid: System.Func{Microsoft.ServiceBus.Messaging.BrokeredMessage,System.Threading.Tasks.Task}
  commentId: T:System.Func{Microsoft.ServiceBus.Messaging.BrokeredMessage,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`2
  name: Func<BrokeredMessage, Task>
  nameWithType: Func<BrokeredMessage, Task>
  fullName: System.Func<Microsoft.ServiceBus.Messaging.BrokeredMessage, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of BrokeredMessage, Task)
  fullname.vb: System.Func(Of Microsoft.ServiceBus.Messaging.BrokeredMessage, System.Threading.Tasks.Task)
  name.vb: Func(Of BrokeredMessage, Task)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.BrokeredMessage
    name: BrokeredMessage
    nameWithType: BrokeredMessage
    fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.BrokeredMessage
    name: BrokeredMessage
    nameWithType: BrokeredMessage
    fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.MessageSession
  commentId: T:Microsoft.ServiceBus.Messaging.MessageSession
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: MessageSession
  nameWithType: MessageSession
  fullName: Microsoft.ServiceBus.Messaging.MessageSession
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSession*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSession
  isExternal: false
  name: AcceptMessageSession
  nameWithType: SubscriptionClient.AcceptMessageSession
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSession
- uid: Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout
  commentId: P:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.TimeoutException
  commentId: T:System.TimeoutException
- uid: System.OperationCanceledException
  commentId: T:System.OperationCanceledException
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSessionAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSessionAsync
  isExternal: false
  name: AcceptMessageSessionAsync
  nameWithType: SubscriptionClient.AcceptMessageSessionAsync
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSessionAsync
- uid: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.MessageSession}
  commentId: T:System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.MessageSession}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<MessageSession>
  nameWithType: Task<MessageSession>
  fullName: System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.MessageSession>
  nameWithType.vb: Task(Of MessageSession)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.ServiceBus.Messaging.MessageSession)
  name.vb: Task(Of MessageSession)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.MessageSession
    name: MessageSession
    nameWithType: MessageSession
    fullName: Microsoft.ServiceBus.Messaging.MessageSession
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.MessageSession
    name: MessageSession
    nameWithType: MessageSession
    fullName: Microsoft.ServiceBus.Messaging.MessageSession
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.GetMessageSessions*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.GetMessageSessions
  isExternal: false
  name: GetMessageSessions
  nameWithType: SubscriptionClient.GetMessageSessions
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.GetMessageSessions
- uid: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.MessageSession}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.MessageSession}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<MessageSession>
  nameWithType: IEnumerable<MessageSession>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.MessageSession>
  nameWithType.vb: IEnumerable(Of MessageSession)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.MessageSession)
  name.vb: IEnumerable(Of MessageSession)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.MessageSession
    name: MessageSession
    nameWithType: MessageSession
    fullName: Microsoft.ServiceBus.Messaging.MessageSession
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.MessageSession
    name: MessageSession
    nameWithType: MessageSession
    fullName: Microsoft.ServiceBus.Messaging.MessageSession
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.GetMessageSessionsAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.GetMessageSessionsAsync
  isExternal: false
  name: GetMessageSessionsAsync
  nameWithType: SubscriptionClient.GetMessageSessionsAsync
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.GetMessageSessionsAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.MessageSession}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.MessageSession}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<MessageSession>>
  nameWithType: Task<IEnumerable<MessageSession>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.MessageSession>>
  nameWithType.vb: Task(Of IEnumerable(Of MessageSession))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.MessageSession))
  name.vb: Task(Of IEnumerable(Of MessageSession))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.MessageSession
    name: MessageSession
    nameWithType: MessageSession
    fullName: Microsoft.ServiceBus.Messaging.MessageSession
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.MessageSession
    name: MessageSession
    nameWithType: MessageSession
    fullName: Microsoft.ServiceBus.Messaging.MessageSession
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.SubscriptionDescription
  commentId: T:Microsoft.ServiceBus.Messaging.SubscriptionDescription
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: SubscriptionDescription
  nameWithType: SubscriptionDescription
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionDescription
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.AddRule*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.AddRule
  isExternal: false
  name: AddRule
  nameWithType: SubscriptionClient.AddRule
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.AddRule
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException
  commentId: T:Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException
  isExternal: false
  name: MessagingEntityAlreadyExistsException
  nameWithType: MessagingEntityAlreadyExistsException
  fullName: Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException
- uid: Microsoft.ServiceBus.Messaging.RuleDescription
  commentId: T:Microsoft.ServiceBus.Messaging.RuleDescription
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: RuleDescription
  nameWithType: RuleDescription
  fullName: Microsoft.ServiceBus.Messaging.RuleDescription
- uid: Microsoft.ServiceBus.Messaging.Filter
  commentId: T:Microsoft.ServiceBus.Messaging.Filter
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: Filter
  nameWithType: Filter
  fullName: Microsoft.ServiceBus.Messaging.Filter
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.AddRuleAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.AddRuleAsync
  isExternal: false
  name: AddRuleAsync
  nameWithType: SubscriptionClient.AddRuleAsync
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.AddRuleAsync
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.RemoveRule*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.RemoveRule
  isExternal: false
  name: RemoveRule
  nameWithType: SubscriptionClient.RemoveRule
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.RemoveRule
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.RemoveRuleAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.RemoveRuleAsync
  isExternal: false
  name: RemoveRuleAsync
  nameWithType: SubscriptionClient.RemoveRuleAsync
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.RemoveRuleAsync
- uid: System.AsyncCallback
  commentId: T:System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.EndCreateReceiver(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.EndCreateReceiver(System.IAsyncResult)
- uid: System.IAsyncResult
  commentId: T:System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginCreateReceiver*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginCreateReceiver
  isExternal: false
  name: OnBeginCreateReceiver
  nameWithType: SubscriptionClient.OnBeginCreateReceiver
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginCreateReceiver
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver
  commentId: T:Microsoft.ServiceBus.Messaging.MessageReceiver
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: MessageReceiver
  nameWithType: MessageReceiver
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndCreateReceiver*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndCreateReceiver
  isExternal: false
  name: OnEndCreateReceiver
  nameWithType: SubscriptionClient.OnEndCreateReceiver
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndCreateReceiver
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginAcceptMessageSession*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginAcceptMessageSession
  isExternal: false
  name: OnBeginAcceptMessageSession
  nameWithType: SubscriptionClient.OnBeginAcceptMessageSession
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginAcceptMessageSession
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndAcceptMessageSession*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndAcceptMessageSession
  isExternal: false
  name: OnEndAcceptMessageSession
  nameWithType: SubscriptionClient.OnEndAcceptMessageSession
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndAcceptMessageSession
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginGetMessageSessions*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginGetMessageSessions
  isExternal: false
  name: OnBeginGetMessageSessions
  nameWithType: SubscriptionClient.OnBeginGetMessageSessions
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginGetMessageSessions
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndGetMessageSessions*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndGetMessageSessions
  isExternal: false
  name: OnEndGetMessageSessions
  nameWithType: SubscriptionClient.OnEndGetMessageSessions
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndGetMessageSessions
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginAddRule*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginAddRule
  isExternal: false
  name: OnBeginAddRule
  nameWithType: SubscriptionClient.OnBeginAddRule
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginAddRule
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginAddRule(Microsoft.ServiceBus.Messaging.RuleDescription,System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginAddRule(Microsoft.ServiceBus.Messaging.RuleDescription,System.TimeSpan,System.AsyncCallback,System.Object)
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndAddRule*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndAddRule
  isExternal: false
  name: OnEndAddRule
  nameWithType: SubscriptionClient.OnEndAddRule
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndAddRule
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.RemoveRule(System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.RemoveRule(System.String)
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginRemoveRule*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginRemoveRule
  isExternal: false
  name: OnBeginRemoveRule
  nameWithType: SubscriptionClient.OnBeginRemoveRule
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginRemoveRule
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginRemoveRule(System.String,System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginRemoveRule(System.String,System.TimeSpan,System.AsyncCallback,System.Object)
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndRemoveRule*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndRemoveRule
  isExternal: false
  name: OnEndRemoveRule
  nameWithType: SubscriptionClient.OnEndRemoveRule
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndRemoveRule
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginRemoveRulesByTag*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginRemoveRulesByTag
  isExternal: false
  name: OnBeginRemoveRulesByTag
  nameWithType: SubscriptionClient.OnBeginRemoveRulesByTag
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginRemoveRulesByTag
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndRemoveRules*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndRemoveRules
  isExternal: false
  name: OnEndRemoveRules
  nameWithType: SubscriptionClient.OnEndRemoveRules
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndRemoveRules
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: OnAbort()
  nameWithType: ClientEntity.OnAbort()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
    name: OnAbort
    nameWithType: ClientEntity.OnAbort
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
    name: OnAbort
    nameWithType: ClientEntity.OnAbort
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnAbort*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnAbort
  isExternal: false
  name: OnAbort
  nameWithType: SubscriptionClient.OnAbort
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnAbort
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose(System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnClose(System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: true
  name: OnClose(TimeSpan)
  nameWithType: ClientEntity.OnClose(TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose(System.TimeSpan)
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose(System.TimeSpan)
    name: OnClose
    nameWithType: ClientEntity.OnClose
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose(System.TimeSpan)
    name: OnClose
    nameWithType: ClientEntity.OnClose
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnClose*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnClose
  isExternal: false
  name: OnClose
  nameWithType: SubscriptionClient.OnClose
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnClose
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: true
  name: OnBeginClose(TimeSpan, AsyncCallback, Object)
  nameWithType: ClientEntity.OnBeginClose(TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose(System.TimeSpan, System.AsyncCallback, System.Object)
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
    name: OnBeginClose
    nameWithType: ClientEntity.OnBeginClose
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
    name: OnBeginClose
    nameWithType: ClientEntity.OnBeginClose
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginClose*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginClose
  isExternal: false
  name: OnBeginClose
  nameWithType: SubscriptionClient.OnBeginClose
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginClose
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose(System.IAsyncResult)
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: true
  name: OnEndClose(IAsyncResult)
  nameWithType: ClientEntity.OnEndClose(IAsyncResult)
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose(System.IAsyncResult)
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose(System.IAsyncResult)
    name: OnEndClose
    nameWithType: ClientEntity.OnEndClose
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose(System.IAsyncResult)
    name: OnEndClose
    nameWithType: ClientEntity.OnEndClose
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndClose*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndClose
  isExternal: false
  name: OnEndClose
  nameWithType: SubscriptionClient.OnEndClose
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndClose
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.Mode*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.Mode
  isExternal: false
  name: Mode
  nameWithType: SubscriptionClient.Mode
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.Mode
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.PrefetchCount*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.PrefetchCount
  isExternal: false
  name: PrefetchCount
  nameWithType: SubscriptionClient.PrefetchCount
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.PrefetchCount
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.Abandon*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.Abandon
  isExternal: false
  name: Abandon
  nameWithType: SubscriptionClient.Abandon
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.Abandon
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Object>
  nameWithType: IDictionary<String, Object>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>
  nameWithType.vb: IDictionary(Of String, Object)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object)
  name.vb: IDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.AbandonAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.AbandonAsync
  isExternal: false
  name: AbandonAsync
  nameWithType: SubscriptionClient.AbandonAsync
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.AbandonAsync
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.Complete*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.Complete
  isExternal: false
  name: Complete
  nameWithType: SubscriptionClient.Complete
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.Complete
- uid: Microsoft.ServiceBus.Messaging.MessageLockLostException
  commentId: T:Microsoft.ServiceBus.Messaging.MessageLockLostException
  isExternal: false
  name: MessageLockLostException
  nameWithType: MessageLockLostException
  fullName: Microsoft.ServiceBus.Messaging.MessageLockLostException
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.CompleteAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.CompleteAsync
  isExternal: false
  name: CompleteAsync
  nameWithType: SubscriptionClient.CompleteAsync
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.CompleteAsync
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.CompleteBatch*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.CompleteBatch
  isExternal: false
  name: CompleteBatch
  nameWithType: SubscriptionClient.CompleteBatch
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.CompleteBatch
- uid: System.Collections.Generic.IEnumerable{System.Guid}
  commentId: T:System.Collections.Generic.IEnumerable{System.Guid}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Guid>
  nameWithType: IEnumerable<Guid>
  fullName: System.Collections.Generic.IEnumerable<System.Guid>
  nameWithType.vb: IEnumerable(Of Guid)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Guid)
  name.vb: IEnumerable(Of Guid)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.CompleteBatchAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.CompleteBatchAsync
  isExternal: false
  name: CompleteBatchAsync
  nameWithType: SubscriptionClient.CompleteBatchAsync
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.CompleteBatchAsync
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.Defer*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.Defer
  isExternal: false
  name: Defer
  nameWithType: SubscriptionClient.Defer
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.Defer
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.DeferAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.DeferAsync
  isExternal: false
  name: DeferAsync
  nameWithType: SubscriptionClient.DeferAsync
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.DeferAsync
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetter*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetter
  isExternal: false
  name: DeadLetter
  nameWithType: SubscriptionClient.DeadLetter
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetter
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetterAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetterAsync
  isExternal: false
  name: DeadLetterAsync
  nameWithType: SubscriptionClient.DeadLetterAsync
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetterAsync
- uid: Microsoft.ServiceBus.Messaging.QueueClient.InternalReceiver
  commentId: P:Microsoft.ServiceBus.Messaging.QueueClient.InternalReceiver
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage
  commentId: T:Microsoft.ServiceBus.Messaging.BrokeredMessage
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: BrokeredMessage
  nameWithType: BrokeredMessage
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.Receive*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.Receive
  isExternal: false
  name: Receive
  nameWithType: SubscriptionClient.Receive
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.Receive
- uid: Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
  commentId: T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
  isExternal: false
  name: MessagingEntityNotFoundException
  nameWithType: MessagingEntityNotFoundException
  fullName: Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException
- uid: System.UnauthorizedAccessException
  commentId: T:System.UnauthorizedAccessException
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatch*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatch
  isExternal: false
  name: ReceiveBatch
  nameWithType: SubscriptionClient.ReceiveBatch
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatch
- uid: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<BrokeredMessage>
  nameWithType: IEnumerable<BrokeredMessage>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.BrokeredMessage>
  nameWithType.vb: IEnumerable(Of BrokeredMessage)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.BrokeredMessage)
  name.vb: IEnumerable(Of BrokeredMessage)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.BrokeredMessage
    name: BrokeredMessage
    nameWithType: BrokeredMessage
    fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.BrokeredMessage
    name: BrokeredMessage
    nameWithType: BrokeredMessage
    fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Int64}
  commentId: T:System.Collections.Generic.IEnumerable{System.Int64}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Int64>
  nameWithType: IEnumerable<Int64>
  fullName: System.Collections.Generic.IEnumerable<System.Int64>
  nameWithType.vb: IEnumerable(Of Int64)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Int64)
  name.vb: IEnumerable(Of Int64)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveAsync
  isExternal: false
  name: ReceiveAsync
  nameWithType: SubscriptionClient.ReceiveAsync
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveAsync
- uid: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.BrokeredMessage}
  commentId: T:System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.BrokeredMessage}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<BrokeredMessage>
  nameWithType: Task<BrokeredMessage>
  fullName: System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.BrokeredMessage>
  nameWithType.vb: Task(Of BrokeredMessage)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.ServiceBus.Messaging.BrokeredMessage)
  name.vb: Task(Of BrokeredMessage)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.BrokeredMessage
    name: BrokeredMessage
    nameWithType: BrokeredMessage
    fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.BrokeredMessage
    name: BrokeredMessage
    nameWithType: BrokeredMessage
    fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatchAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatchAsync
  isExternal: false
  name: ReceiveBatchAsync
  nameWithType: SubscriptionClient.ReceiveBatchAsync
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.ReceiveBatchAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<BrokeredMessage>>
  nameWithType: Task<IEnumerable<BrokeredMessage>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.BrokeredMessage>>
  nameWithType.vb: Task(Of IEnumerable(Of BrokeredMessage))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.BrokeredMessage))
  name.vb: Task(Of IEnumerable(Of BrokeredMessage))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.BrokeredMessage
    name: BrokeredMessage
    nameWithType: BrokeredMessage
    fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.BrokeredMessage
    name: BrokeredMessage
    nameWithType: BrokeredMessage
    fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.Peek*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.Peek
  isExternal: false
  name: Peek
  nameWithType: SubscriptionClient.Peek
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.Peek
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekAsync
  isExternal: false
  name: PeekAsync
  nameWithType: SubscriptionClient.PeekAsync
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekAsync
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekBatch*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekBatch
  isExternal: false
  name: PeekBatch
  nameWithType: SubscriptionClient.PeekBatch
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekBatch
- uid: Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekBatchAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekBatchAsync
  isExternal: false
  name: PeekBatchAsync
  nameWithType: SubscriptionClient.PeekBatchAsync
  fullName: Microsoft.ServiceBus.Messaging.SubscriptionClient.PeekBatchAsync
