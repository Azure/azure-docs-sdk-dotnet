### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver
  commentId: T:Microsoft.ServiceBus.Messaging.EventHubReceiver
  id: EventHubReceiver
  parent: Microsoft.ServiceBus.Messaging
  children:
  - Microsoft.ServiceBus.Messaging.EventHubReceiver.Epoch
  - Microsoft.ServiceBus.Messaging.EventHubReceiver.EventHubPath
  - Microsoft.ServiceBus.Messaging.EventHubReceiver.Name
  - Microsoft.ServiceBus.Messaging.EventHubReceiver.OffsetInclusive
  - Microsoft.ServiceBus.Messaging.EventHubReceiver.OnAbort
  - Microsoft.ServiceBus.Messaging.EventHubReceiver.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  - Microsoft.ServiceBus.Messaging.EventHubReceiver.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
  - Microsoft.ServiceBus.Messaging.EventHubReceiver.OnClose(System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.EventHubReceiver.OnEndClose(System.IAsyncResult)
  - Microsoft.ServiceBus.Messaging.EventHubReceiver.OnEndOpen(System.IAsyncResult)
  - Microsoft.ServiceBus.Messaging.EventHubReceiver.OnOpen(System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.EventHubReceiver.PartitionId
  - Microsoft.ServiceBus.Messaging.EventHubReceiver.PrefetchCount
  - Microsoft.ServiceBus.Messaging.EventHubReceiver.PrefetchSizeInBytes
  - Microsoft.ServiceBus.Messaging.EventHubReceiver.Receive
  - Microsoft.ServiceBus.Messaging.EventHubReceiver.Receive(System.Int32)
  - Microsoft.ServiceBus.Messaging.EventHubReceiver.Receive(System.Int32,System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.EventHubReceiver.Receive(System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.EventHubReceiver.ReceiveAsync
  - Microsoft.ServiceBus.Messaging.EventHubReceiver.ReceiveAsync(System.Int32)
  - Microsoft.ServiceBus.Messaging.EventHubReceiver.ReceiveAsync(System.Int32,System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.EventHubReceiver.ReceiveAsync(System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.EventHubReceiver.StartingDateTimeUtc
  - Microsoft.ServiceBus.Messaging.EventHubReceiver.StartingOffset
  langs:
  - csharp
  - vb
  name: EventHubReceiver
  nameWithType: EventHubReceiver
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver
  type: Class
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: EventHubReceiver
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
    startLine: 14
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "A client class used in receive operations related to an Event Hub consumer group. \nRepresents a logical receiver connection to a specific Event Hub partition within a consumer group."
  example: []
  syntax:
    content: 'public sealed class EventHubReceiver : ClientEntity, IMessageClientEntity, ICloseable'
    content.vb: >-
      Public NotInheritable Class EventHubReceiver
          Inherits ClientEntity
          Implements IMessageClientEntity, ICloseable
  inheritance:
  - System.Object
  - Microsoft.ServiceBus.Messaging.ClientEntity
  inheritedMembers:
  - Microsoft.ServiceBus.Messaging.ClientEntity.RetryPolicy
  - Microsoft.ServiceBus.Messaging.ClientEntity.IsClosed
  - Microsoft.ServiceBus.Messaging.ClientEntity.ThisLock
  - Microsoft.ServiceBus.Messaging.ClientEntity.Abort
  - Microsoft.ServiceBus.Messaging.ClientEntity.Close
  - Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
  - Microsoft.ServiceBus.Messaging.ClientEntity.Fault
  - Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
  - Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
  - Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
  - Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
  - Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
  - Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
  - Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
  - Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.StartingOffset
  commentId: P:Microsoft.ServiceBus.Messaging.EventHubReceiver.StartingOffset
  id: StartingOffset
  parent: Microsoft.ServiceBus.Messaging.EventHubReceiver
  langs:
  - csharp
  - vb
  name: StartingOffset
  nameWithType: EventHubReceiver.StartingOffset
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.StartingOffset
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: StartingOffset
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
    startLine: 82
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Gets the starting offset for this receiver. The \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubReceiver.Receive\" data-throw-if-not-resolved=\"false\"></xref> method starts receiving the next event after this offset value. If the value is null, the receiver starts receiving events from the beginning of the Event Hubs event stream."
  remarks: "This starting offset ties to one partition only, \nrepresented by <xref href=\"Microsoft.ServiceBus.Messaging.EventHubReceiver.PartitionId\" data-throw-if-not-resolved=\"false\"></xref>."
  example: []
  syntax:
    content: public string StartingOffset { get; }
    content.vb: Public ReadOnly Property StartingOffset As String
    parameters: []
    return:
      type: System.String
      description: The starting offset.
  overload: Microsoft.ServiceBus.Messaging.EventHubReceiver.StartingOffset*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.StartingDateTimeUtc
  commentId: P:Microsoft.ServiceBus.Messaging.EventHubReceiver.StartingDateTimeUtc
  id: StartingDateTimeUtc
  parent: Microsoft.ServiceBus.Messaging.EventHubReceiver
  langs:
  - csharp
  - vb
  name: StartingDateTimeUtc
  nameWithType: EventHubReceiver.StartingDateTimeUtc
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.StartingDateTimeUtc
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: StartingDateTimeUtc
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
    startLine: 91
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Gets the starting date and time in UTC format for this receiver. The \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubReceiver.Receive\" data-throw-if-not-resolved=\"false\"></xref> method starts receiving the next event after this \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubReceiver.StartingDateTimeUtc\" data-throw-if-not-resolved=\"false\"></xref> value. If null, the receiver starts receiving events from the beginning of the Event Hubs event stream."
  remarks: "Service only uses this datetime as an approximation when delivering next event.\nKeep in mind that there can be clock skew between client time and service time, so user application \nshould be designed to handle duplication in event delivery."
  example: []
  syntax:
    content: public DateTime? StartingDateTimeUtc { get; }
    content.vb: Public ReadOnly Property StartingDateTimeUtc As Date?
    parameters: []
    return:
      type: System.Nullable{System.DateTime}
      description: The starting date and time in UTC.
  overload: Microsoft.ServiceBus.Messaging.EventHubReceiver.StartingDateTimeUtc*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.EventHubPath
  commentId: P:Microsoft.ServiceBus.Messaging.EventHubReceiver.EventHubPath
  id: EventHubPath
  parent: Microsoft.ServiceBus.Messaging.EventHubReceiver
  langs:
  - csharp
  - vb
  name: EventHubPath
  nameWithType: EventHubReceiver.EventHubPath
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.EventHubPath
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: EventHubPath
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
    startLine: 95
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets the event hub path.
  example: []
  syntax:
    content: public string EventHubPath { get; }
    content.vb: Public ReadOnly Property EventHubPath As String
    parameters: []
    return:
      type: System.String
      description: The event hub path.
  overload: Microsoft.ServiceBus.Messaging.EventHubReceiver.EventHubPath*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.Name
  commentId: P:Microsoft.ServiceBus.Messaging.EventHubReceiver.Name
  id: Name
  parent: Microsoft.ServiceBus.Messaging.EventHubReceiver
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: EventHubReceiver.Name
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.Name
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Name
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
    startLine: 99
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets the name of the Event Hub.
  example: []
  syntax:
    content: public string Name { get; }
    content.vb: Public ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: The name of the Event Hub.
  overload: Microsoft.ServiceBus.Messaging.EventHubReceiver.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.Epoch
  commentId: P:Microsoft.ServiceBus.Messaging.EventHubReceiver.Epoch
  id: Epoch
  parent: Microsoft.ServiceBus.Messaging.EventHubReceiver
  langs:
  - csharp
  - vb
  name: Epoch
  nameWithType: EventHubReceiver.Epoch
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.Epoch
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Epoch
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
    startLine: 103
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets the epoch value that is used to determine partition ownership during the receive operation.
  example: []
  syntax:
    content: public long ? Epoch { get; }
    content.vb: Public ReadOnly Property Epoch As Long?
    parameters: []
    return:
      type: System.Nullable{System.Int64}
      description: Returns <xref href="System.Int64" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.EventHubReceiver.Epoch*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.PartitionId
  commentId: P:Microsoft.ServiceBus.Messaging.EventHubReceiver.PartitionId
  id: PartitionId
  parent: Microsoft.ServiceBus.Messaging.EventHubReceiver
  langs:
  - csharp
  - vb
  name: PartitionId
  nameWithType: EventHubReceiver.PartitionId
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.PartitionId
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: PartitionId
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
    startLine: 107
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets the partition ID for a logical partition of an Event Hub.
  example: []
  syntax:
    content: public string PartitionId { get; }
    content.vb: Public ReadOnly Property PartitionId As String
    parameters: []
    return:
      type: System.String
      description: The partition identifier.
  overload: Microsoft.ServiceBus.Messaging.EventHubReceiver.PartitionId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.OffsetInclusive
  commentId: P:Microsoft.ServiceBus.Messaging.EventHubReceiver.OffsetInclusive
  id: OffsetInclusive
  parent: Microsoft.ServiceBus.Messaging.EventHubReceiver
  langs:
  - csharp
  - vb
  name: OffsetInclusive
  nameWithType: EventHubReceiver.OffsetInclusive
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.OffsetInclusive
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OffsetInclusive
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
    startLine: 112
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Gets a value indicating whether \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubReceiver.StartingOffset\" data-throw-if-not-resolved=\"false\"></xref> is treated as an inclusive offset, meaning that the first event returned is the event that contains the starting offset. Normally, the first event returned is the event after the starting offset."
  example: []
  syntax:
    content: public bool OffsetInclusive { get; }
    content.vb: Public ReadOnly Property OffsetInclusive As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: Returns <xref href="System.Boolean" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.EventHubReceiver.OffsetInclusive*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.PrefetchCount
  commentId: P:Microsoft.ServiceBus.Messaging.EventHubReceiver.PrefetchCount
  id: PrefetchCount
  parent: Microsoft.ServiceBus.Messaging.EventHubReceiver
  langs:
  - csharp
  - vb
  name: PrefetchCount
  nameWithType: EventHubReceiver.PrefetchCount
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.PrefetchCount
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: PrefetchCount
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
    startLine: 122
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Gets or sets the number of events that any receive operation will actively cache. By default, this value is inherited from \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubConsumerGroup\" data-throw-if-not-resolved=\"false\"></xref>. The default value is 10,000."
  remarks: "Changes to this value will be used in next receive operation, however this does not affect the \nnumber of events already cached by the receiver. Setting this property to non-zero value will set\n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubReceiver.PrefetchSizeInBytes\" data-throw-if-not-resolved=\"false\"></xref> to null.\nNote that setting the count too low will affect the effective performance of the event hub receive call."
  example: []
  syntax:
    content: public int PrefetchCount { get; set; }
    content.vb: Public Property PrefetchCount As Integer
    parameters: []
    return:
      type: System.Int32
      description: The number of messages that the message receiver can simultaneously request.
  overload: Microsoft.ServiceBus.Messaging.EventHubReceiver.PrefetchCount*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown if the value is less than the minimum required value of 10.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.PrefetchSizeInBytes
  commentId: P:Microsoft.ServiceBus.Messaging.EventHubReceiver.PrefetchSizeInBytes
  id: PrefetchSizeInBytes
  parent: Microsoft.ServiceBus.Messaging.EventHubReceiver
  langs:
  - csharp
  - vb
  name: PrefetchSizeInBytes
  nameWithType: EventHubReceiver.PrefetchSizeInBytes
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.PrefetchSizeInBytes
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: PrefetchSizeInBytes
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
    startLine: 147
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Gets or sets the maximum size (in bytes) in total that any receive operation will actively cache. The size of each event data is determined by the \n<xref href=\"Microsoft.ServiceBus.Messaging.EventData.SerializedSizeInBytes\" data-throw-if-not-resolved=\"false\"></xref> property."
  remarks: "The size limit is not an absolute limit. the size might go over by at least \none event data worth of size. Changes to this value will be used in next receive operation, however this does not affect the \nnumber of events already cached by the receiver. \nSetting this property to non-null value will set <xref href=\"Microsoft.ServiceBus.Messaging.EventHubReceiver.PrefetchCount\" data-throw-if-not-resolved=\"false\"></xref> to zero.\nNote that setting the size too low will affect the effective performance of the event hub receive call."
  example: []
  syntax:
    content: public long ? PrefetchSizeInBytes { get; set; }
    content.vb: Public Property PrefetchSizeInBytes As Long?
    parameters: []
    return:
      type: System.Nullable{System.Int64}
      description: Returns <xref href="System.Int64" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.EventHubReceiver.PrefetchSizeInBytes*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown when the size value is less than the minimum required value of 260K bytes.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.Receive
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubReceiver.Receive
  id: Receive
  parent: Microsoft.ServiceBus.Messaging.EventHubReceiver
  langs:
  - csharp
  - vb
  name: Receive()
  nameWithType: EventHubReceiver.Receive()
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.Receive()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Receive
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
    startLine: 203
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Receives Event Hubs event data.
  example: []
  syntax:
    content: public EventData Receive()
    content.vb: Public Function Receive As EventData
    return:
      type: Microsoft.ServiceBus.Messaging.EventData
      description: Returns the received <xref href="Microsoft.ServiceBus.Messaging.EventData" data-throw-if-not-resolved="false"></xref> object, or null if no event data is available.
  overload: Microsoft.ServiceBus.Messaging.EventHubReceiver.Receive*
  exceptions:
  - type: Microsoft.ServiceBus.Messaging.MessagingException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingException
    description: Thrown if the service encounters a transient error.
  - type: Microsoft.ServiceBus.Messaging.MessagingCommunicationException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingCommunicationException
    description: "Thrown if the client \nhas a problem connecting to the service."
  - type: Microsoft.ServiceBus.Messaging.ServerBusyException
    commentId: T:Microsoft.ServiceBus.Messaging.ServerBusyException
    description: "Thrown if the current namespace \nis placing too much load on the system."
  - type: Microsoft.ServiceBus.Messaging.ReceiverDisconnectedException
    commentId: T:Microsoft.ServiceBus.Messaging.ReceiverDisconnectedException
    description: "Thrown if another receiver with a higher \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubReceiver.Epoch\" data-throw-if-not-resolved=\"false\"></xref> value is connected as the current receiver to the same partition specified by \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubReceiver.PartitionId\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.Receive(System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubReceiver.Receive(System.TimeSpan)
  id: Receive(System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.EventHubReceiver
  langs:
  - csharp
  - vb
  name: Receive(TimeSpan)
  nameWithType: EventHubReceiver.Receive(TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.Receive(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Receive
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
    startLine: 221
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Receives Event Hubs event data with the specified timeout value.
  remarks: <span class="paramref">waitTime</span> is not a guaranteed wait time, as API will return data as soon as it is available.
  example: []
  syntax:
    content: public EventData Receive(TimeSpan waitTime)
    content.vb: Public Function Receive(waitTime As TimeSpan) As EventData
    parameters:
    - id: waitTime
      type: System.TimeSpan
      description: The maximum time the user is willing to wait for event data to arrive.
    return:
      type: Microsoft.ServiceBus.Messaging.EventData
      description: "Returns the received \n<xref href=\"Microsoft.ServiceBus.Messaging.EventData\" data-throw-if-not-resolved=\"false\"></xref> collection, or null if there is no event data available."
  overload: Microsoft.ServiceBus.Messaging.EventHubReceiver.Receive*
  exceptions:
  - type: Microsoft.ServiceBus.Messaging.MessagingException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingException
    description: Thrown if the service encounters a transient error.
  - type: Microsoft.ServiceBus.Messaging.MessagingCommunicationException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingCommunicationException
    description: "Thrown if the client \nhas a problem connecting to the service."
  - type: Microsoft.ServiceBus.Messaging.ServerBusyException
    commentId: T:Microsoft.ServiceBus.Messaging.ServerBusyException
    description: "Thrown if the current namespace \nis placing too much load on the system."
  - type: Microsoft.ServiceBus.Messaging.ReceiverDisconnectedException
    commentId: T:Microsoft.ServiceBus.Messaging.ReceiverDisconnectedException
    description: "Thrown if another receiver with a higher \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubReceiver.Epoch\" data-throw-if-not-resolved=\"false\"></xref> value is connected as the current receiver to the same partition specified by \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubReceiver.PartitionId\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.ReceiveAsync
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubReceiver.ReceiveAsync
  id: ReceiveAsync
  parent: Microsoft.ServiceBus.Messaging.EventHubReceiver
  langs:
  - csharp
  - vb
  name: ReceiveAsync()
  nameWithType: EventHubReceiver.ReceiveAsync()
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.ReceiveAsync()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ReceiveAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
    startLine: 236
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronous version of <xref href="Microsoft.ServiceBus.Messaging.EventHubReceiver.Receive" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Task<EventData> ReceiveAsync()
    content.vb: Public Function ReceiveAsync As Task(Of EventData)
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.EventData}
      description: The task representing the asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.EventHubReceiver.ReceiveAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.ReceiveAsync(System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubReceiver.ReceiveAsync(System.TimeSpan)
  id: ReceiveAsync(System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.EventHubReceiver
  langs:
  - csharp
  - vb
  name: ReceiveAsync(TimeSpan)
  nameWithType: EventHubReceiver.ReceiveAsync(TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.ReceiveAsync(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ReceiveAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
    startLine: 246
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronous version of <xref href="Microsoft.ServiceBus.Messaging.EventHubReceiver.Receive(System.TimeSpan)" data-throw-if-not-resolved="false"></xref>.
  remarks: "<span class=\"paramref\">waitTime</span> is not a guaranteed wait time, \n    as API will return data as soon as it is available."
  example: []
  syntax:
    content: public Task<EventData> ReceiveAsync(TimeSpan waitTime)
    content.vb: Public Function ReceiveAsync(waitTime As TimeSpan) As Task(Of EventData)
    parameters:
    - id: waitTime
      type: System.TimeSpan
      description: The maximum time the user is willing to wait for event data to arrive.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.EventData}
      description: The task representing the asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.EventHubReceiver.ReceiveAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.Receive(System.Int32)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubReceiver.Receive(System.Int32)
  id: Receive(System.Int32)
  parent: Microsoft.ServiceBus.Messaging.EventHubReceiver
  langs:
  - csharp
  - vb
  name: Receive(Int32)
  nameWithType: EventHubReceiver.Receive(Int32)
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.Receive(System.Int32)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Receive
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
    startLine: 277
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Receives Event Hubs event data, up to the specified count.
  remarks: "Service does not wait for <span class=\"paramref\">maxCount</span> events to be filled before \nreturning to user. It returns as soon as there are any events available."
  example: []
  syntax:
    content: public IEnumerable<EventData> Receive(int maxCount)
    content.vb: Public Function Receive(maxCount As Integer) As IEnumerable(Of EventData)
    parameters:
    - id: maxCount
      type: System.Int32
      description: The maximum amount of event data the user is willing to accept in one call.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.EventData}
      description: "Returns the received \n<xref href=\"Microsoft.ServiceBus.Messaging.EventData\" data-throw-if-not-resolved=\"false\"></xref> collection. The collection is either empty if no event is returned within the specified time, or all events up to <span class=\"paramref\">maxCount</span> are returned."
  overload: Microsoft.ServiceBus.Messaging.EventHubReceiver.Receive*
  exceptions:
  - type: Microsoft.ServiceBus.Messaging.MessagingException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingException
    description: Thrown if the service encounters a transient error.
  - type: Microsoft.ServiceBus.Messaging.MessagingCommunicationException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingCommunicationException
    description: "Thrown if the client \nhas a problem connecting to the service."
  - type: Microsoft.ServiceBus.Messaging.ServerBusyException
    commentId: T:Microsoft.ServiceBus.Messaging.ServerBusyException
    description: "Thrown if the current namespace \nis placing too much load on the system."
  - type: Microsoft.ServiceBus.Messaging.ReceiverDisconnectedException
    commentId: T:Microsoft.ServiceBus.Messaging.ReceiverDisconnectedException
    description: "Thrown if another receiver with a higher \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubReceiver.Epoch\" data-throw-if-not-resolved=\"false\"></xref> value is connected as the current receiver to the same partition specified by \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubReceiver.PartitionId\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.Receive(System.Int32,System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubReceiver.Receive(System.Int32,System.TimeSpan)
  id: Receive(System.Int32,System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.EventHubReceiver
  langs:
  - csharp
  - vb
  name: Receive(Int32, TimeSpan)
  nameWithType: EventHubReceiver.Receive(Int32, TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.Receive(System.Int32, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Receive
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
    startLine: 299
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Receives Event Hubs event data, up to the specified count with the specified timeout value.
  remarks: "<span class=\"paramref\">waitTime</span> is not a guaranteed wait time, \n    as API will return data as soon as it is available. Also service does not \n    wait for <span class=\"paramref\">maxCount</span> events to be filled before \n    returning to user. it returns as soon as there are any events available."
  example: []
  syntax:
    content: public IEnumerable<EventData> Receive(int maxCount, TimeSpan waitTime)
    content.vb: Public Function Receive(maxCount As Integer, waitTime As TimeSpan) As IEnumerable(Of EventData)
    parameters:
    - id: maxCount
      type: System.Int32
      description: The maximum amount of event data the user is willing to accept in one call.
    - id: waitTime
      type: System.TimeSpan
      description: The maximum time the user is willing to wait for event data to arrive.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.EventData}
      description: "Returns the received \n<xref href=\"Microsoft.ServiceBus.Messaging.EventData\" data-throw-if-not-resolved=\"false\"></xref> collection. The collection is either empty if no event is returned within the specified time, or all events up to <span class=\"paramref\">maxCount</span> are returned."
  overload: Microsoft.ServiceBus.Messaging.EventHubReceiver.Receive*
  exceptions:
  - type: Microsoft.ServiceBus.Messaging.MessagingException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingException
    description: Thrown if the service encounters a transient error.
  - type: Microsoft.ServiceBus.Messaging.MessagingCommunicationException
    commentId: T:Microsoft.ServiceBus.Messaging.MessagingCommunicationException
    description: "Thrown if the client \nhas a problem connecting to the service."
  - type: Microsoft.ServiceBus.Messaging.ServerBusyException
    commentId: T:Microsoft.ServiceBus.Messaging.ServerBusyException
    description: "Thrown if the current namespace \nis placing too much load on the system."
  - type: Microsoft.ServiceBus.Messaging.ReceiverDisconnectedException
    commentId: T:Microsoft.ServiceBus.Messaging.ReceiverDisconnectedException
    description: "Thrown if another receiver with a higher \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubReceiver.Epoch\" data-throw-if-not-resolved=\"false\"></xref> value is connected as the current receiver to the same partition specified by \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubReceiver.PartitionId\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.ReceiveAsync(System.Int32)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubReceiver.ReceiveAsync(System.Int32)
  id: ReceiveAsync(System.Int32)
  parent: Microsoft.ServiceBus.Messaging.EventHubReceiver
  langs:
  - csharp
  - vb
  name: ReceiveAsync(Int32)
  nameWithType: EventHubReceiver.ReceiveAsync(Int32)
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.ReceiveAsync(System.Int32)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ReceiveAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
    startLine: 316
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronous version of <xref href="Microsoft.ServiceBus.Messaging.EventHubReceiver.Receive(System.Int32)" data-throw-if-not-resolved="false"></xref>.
  remarks: "Service does not wait for <span class=\"paramref\">maxCount</span> events to be filled before \nreturning to user. It returns as soon as there are any events available."
  example: []
  syntax:
    content: public Task<IEnumerable<EventData>> ReceiveAsync(int maxCount)
    content.vb: Public Function ReceiveAsync(maxCount As Integer) As Task(Of IEnumerable(Of EventData))
    parameters:
    - id: maxCount
      type: System.Int32
      description: The maximum amount of event data the user is willing to accept in one call.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.EventData}}
      description: Returns <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.EventHubReceiver.ReceiveAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.ReceiveAsync(System.Int32,System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubReceiver.ReceiveAsync(System.Int32,System.TimeSpan)
  id: ReceiveAsync(System.Int32,System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.EventHubReceiver
  langs:
  - csharp
  - vb
  name: ReceiveAsync(Int32, TimeSpan)
  nameWithType: EventHubReceiver.ReceiveAsync(Int32, TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.ReceiveAsync(System.Int32, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ReceiveAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
    startLine: 329
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronous version of <xref href="Microsoft.ServiceBus.Messaging.EventHubReceiver.Receive(System.Int32%2cSystem.TimeSpan)" data-throw-if-not-resolved="false"></xref>.
  remarks: "<span class=\"paramref\">waitTime</span> is not a guaranteed wait time, \n    as API will return data as soon as it is available. Also service does not \n    wait for <span class=\"paramref\">maxCount</span> events to be filled before \n    returning to user. It returns as soon as there are any events available."
  example: []
  syntax:
    content: public Task<IEnumerable<EventData>> ReceiveAsync(int maxCount, TimeSpan waitTime)
    content.vb: Public Function ReceiveAsync(maxCount As Integer, waitTime As TimeSpan) As Task(Of IEnumerable(Of EventData))
    parameters:
    - id: maxCount
      type: System.Int32
      description: The maximum amount of event data the user is willing to accept in one call.
    - id: waitTime
      type: System.TimeSpan
      description: The maximum time the user is willing to wait for event data to arrive.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.EventData}}
      description: Returns <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.EventHubReceiver.ReceiveAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.OnAbort
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubReceiver.OnAbort
  id: OnAbort
  parent: Microsoft.ServiceBus.Messaging.EventHubReceiver
  langs:
  - csharp
  - vb
  name: OnAbort()
  nameWithType: EventHubReceiver.OnAbort()
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.OnAbort()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnAbort
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
    startLine: 406
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  syntax:
    content: protected override void OnAbort()
    content.vb: Protected Overrides Sub OnAbort
  overridden: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
  overload: Microsoft.ServiceBus.Messaging.EventHubReceiver.OnAbort*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.OnOpen(System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubReceiver.OnOpen(System.TimeSpan)
  id: OnOpen(System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.EventHubReceiver
  langs:
  - csharp
  - vb
  name: OnOpen(TimeSpan)
  nameWithType: EventHubReceiver.OnOpen(TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.OnOpen(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnOpen
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
    startLine: 414
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  syntax:
    content: protected override void OnOpen(TimeSpan timeout)
    content.vb: Protected Overrides Sub OnOpen(timeout As TimeSpan)
    parameters:
    - id: timeout
      type: System.TimeSpan
  overridden: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen(System.TimeSpan)
  overload: Microsoft.ServiceBus.Messaging.EventHubReceiver.OnOpen*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubReceiver.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
  id: OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.EventHubReceiver
  langs:
  - csharp
  - vb
  name: OnBeginOpen(TimeSpan, AsyncCallback, Object)
  nameWithType: EventHubReceiver.OnBeginOpen(TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.OnBeginOpen(System.TimeSpan, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnBeginOpen
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
    startLine: 420
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  syntax:
    content: protected override IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
    content.vb: Protected Overrides Function OnBeginOpen(timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: timeout
      type: System.TimeSpan
    - id: callback
      type: System.AsyncCallback
    - id: state
      type: System.Object
    return:
      type: System.IAsyncResult
  overridden: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
  overload: Microsoft.ServiceBus.Messaging.EventHubReceiver.OnBeginOpen*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.OnEndOpen(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubReceiver.OnEndOpen(System.IAsyncResult)
  id: OnEndOpen(System.IAsyncResult)
  parent: Microsoft.ServiceBus.Messaging.EventHubReceiver
  langs:
  - csharp
  - vb
  name: OnEndOpen(IAsyncResult)
  nameWithType: EventHubReceiver.OnEndOpen(IAsyncResult)
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.OnEndOpen(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnEndOpen
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
    startLine: 426
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  syntax:
    content: protected override void OnEndOpen(IAsyncResult result)
    content.vb: Protected Overrides Sub OnEndOpen(result As IAsyncResult)
    parameters:
    - id: result
      type: System.IAsyncResult
  overridden: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen(System.IAsyncResult)
  overload: Microsoft.ServiceBus.Messaging.EventHubReceiver.OnEndOpen*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.OnClose(System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubReceiver.OnClose(System.TimeSpan)
  id: OnClose(System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.EventHubReceiver
  langs:
  - csharp
  - vb
  name: OnClose(TimeSpan)
  nameWithType: EventHubReceiver.OnClose(TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.OnClose(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnClose
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
    startLine: 432
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  syntax:
    content: protected override void OnClose(TimeSpan timeout)
    content.vb: Protected Overrides Sub OnClose(timeout As TimeSpan)
    parameters:
    - id: timeout
      type: System.TimeSpan
  overridden: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose(System.TimeSpan)
  overload: Microsoft.ServiceBus.Messaging.EventHubReceiver.OnClose*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubReceiver.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  id: OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.EventHubReceiver
  langs:
  - csharp
  - vb
  name: OnBeginClose(TimeSpan, AsyncCallback, Object)
  nameWithType: EventHubReceiver.OnBeginClose(TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.OnBeginClose(System.TimeSpan, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnBeginClose
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
    startLine: 442
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  syntax:
    content: protected override IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state)
    content.vb: Protected Overrides Function OnBeginClose(timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: timeout
      type: System.TimeSpan
    - id: callback
      type: System.AsyncCallback
    - id: state
      type: System.Object
    return:
      type: System.IAsyncResult
  overridden: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  overload: Microsoft.ServiceBus.Messaging.EventHubReceiver.OnBeginClose*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.OnEndClose(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubReceiver.OnEndClose(System.IAsyncResult)
  id: OnEndClose(System.IAsyncResult)
  parent: Microsoft.ServiceBus.Messaging.EventHubReceiver
  langs:
  - csharp
  - vb
  name: OnEndClose(IAsyncResult)
  nameWithType: EventHubReceiver.OnEndClose(IAsyncResult)
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.OnEndClose(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnEndClose
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubReceiver.cs
    startLine: 452
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  syntax:
    content: protected override void OnEndClose(IAsyncResult result)
    content.vb: Protected Overrides Sub OnEndClose(result As IAsyncResult)
    parameters:
    - id: result
      type: System.IAsyncResult
  overridden: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose(System.IAsyncResult)
  overload: Microsoft.ServiceBus.Messaging.EventHubReceiver.OnEndClose*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: Microsoft.ServiceBus.Messaging
  commentId: N:Microsoft.ServiceBus.Messaging
  isExternal: false
  name: Microsoft.ServiceBus.Messaging
  nameWithType: Microsoft.ServiceBus.Messaging
  fullName: Microsoft.ServiceBus.Messaging
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.ServiceBus.Messaging.ClientEntity
  commentId: T:Microsoft.ServiceBus.Messaging.ClientEntity
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: ClientEntity
  nameWithType: ClientEntity
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.RetryPolicy
  commentId: P:Microsoft.ServiceBus.Messaging.ClientEntity.RetryPolicy
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: RetryPolicy
  nameWithType: ClientEntity.RetryPolicy
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.RetryPolicy
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.IsClosed
  commentId: P:Microsoft.ServiceBus.Messaging.ClientEntity.IsClosed
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: IsClosed
  nameWithType: ClientEntity.IsClosed
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.IsClosed
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThisLock
  commentId: P:Microsoft.ServiceBus.Messaging.ClientEntity.ThisLock
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: ThisLock
  nameWithType: ClientEntity.ThisLock
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThisLock
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.Abort
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.Abort
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: Abort()
  nameWithType: ClientEntity.Abort()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Abort()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.Abort
    name: Abort
    nameWithType: ClientEntity.Abort
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Abort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.Abort
    name: Abort
    nameWithType: ClientEntity.Abort
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Abort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.Close
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.Close
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: Close()
  nameWithType: ClientEntity.Close()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Close()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.Close
    name: Close
    nameWithType: ClientEntity.Close
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Close
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.Close
    name: Close
    nameWithType: ClientEntity.Close
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Close
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: CloseAsync()
  nameWithType: ClientEntity.CloseAsync()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
    name: CloseAsync
    nameWithType: ClientEntity.CloseAsync
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
    name: CloseAsync
    nameWithType: ClientEntity.CloseAsync
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.Fault
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.Fault
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: Fault()
  nameWithType: ClientEntity.Fault()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Fault()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.Fault
    name: Fault
    nameWithType: ClientEntity.Fault
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Fault
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.Fault
    name: Fault
    nameWithType: ClientEntity.Fault
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Fault
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: ThrowIfClosed()
  nameWithType: ClientEntity.ThrowIfClosed()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
    name: ThrowIfClosed
    nameWithType: ClientEntity.ThrowIfClosed
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
    name: ThrowIfClosed
    nameWithType: ClientEntity.ThrowIfClosed
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: ThrowIfDisposed()
  nameWithType: ClientEntity.ThrowIfDisposed()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
    name: ThrowIfDisposed
    nameWithType: ClientEntity.ThrowIfDisposed
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
    name: ThrowIfDisposed
    nameWithType: ClientEntity.ThrowIfDisposed
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: ThrowIfDisposedOrNotOpen()
  nameWithType: ClientEntity.ThrowIfDisposedOrNotOpen()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
    name: ThrowIfDisposedOrNotOpen
    nameWithType: ClientEntity.ThrowIfDisposedOrNotOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
    name: ThrowIfDisposedOrNotOpen
    nameWithType: ClientEntity.ThrowIfDisposedOrNotOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: ThrowIfFaulted()
  nameWithType: ClientEntity.ThrowIfFaulted()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
    name: ThrowIfFaulted
    nameWithType: ClientEntity.ThrowIfFaulted
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
    name: ThrowIfFaulted
    nameWithType: ClientEntity.ThrowIfFaulted
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: ThrowIfDisposedOrImmutable()
  nameWithType: ClientEntity.ThrowIfDisposedOrImmutable()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
    name: ThrowIfDisposedOrImmutable
    nameWithType: ClientEntity.ThrowIfDisposedOrImmutable
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
    name: ThrowIfDisposedOrImmutable
    nameWithType: ClientEntity.ThrowIfDisposedOrImmutable
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: OnOpened()
  nameWithType: ClientEntity.OnOpened()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
    name: OnOpened
    nameWithType: ClientEntity.OnOpened
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
    name: OnOpened
    nameWithType: ClientEntity.OnOpened
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: OnClosed()
  nameWithType: ClientEntity.OnClosed()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
    name: OnClosed
    nameWithType: ClientEntity.OnClosed
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
    name: OnClosed
    nameWithType: ClientEntity.OnClosed
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: OnFaulted()
  nameWithType: ClientEntity.OnFaulted()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
    name: OnFaulted
    nameWithType: ClientEntity.OnFaulted
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
    name: OnFaulted
    nameWithType: ClientEntity.OnFaulted
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.Receive
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubReceiver.Receive
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.PartitionId
  commentId: P:Microsoft.ServiceBus.Messaging.EventHubReceiver.PartitionId
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.StartingOffset*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubReceiver.StartingOffset
  isExternal: false
  name: StartingOffset
  nameWithType: EventHubReceiver.StartingOffset
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.StartingOffset
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.StartingDateTimeUtc
  commentId: P:Microsoft.ServiceBus.Messaging.EventHubReceiver.StartingDateTimeUtc
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.StartingDateTimeUtc*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubReceiver.StartingDateTimeUtc
  isExternal: false
  name: StartingDateTimeUtc
  nameWithType: EventHubReceiver.StartingDateTimeUtc
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.StartingDateTimeUtc
- uid: System.Nullable{System.DateTime}
  commentId: T:System.Nullable{System.DateTime}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<System.DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullname.vb: System.Nullable(Of System.DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.EventHubPath*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubReceiver.EventHubPath
  isExternal: false
  name: EventHubPath
  nameWithType: EventHubReceiver.EventHubPath
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.EventHubPath
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.Name*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubReceiver.Name
  isExternal: false
  name: Name
  nameWithType: EventHubReceiver.Name
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.Name
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.Epoch*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubReceiver.Epoch
  isExternal: false
  name: Epoch
  nameWithType: EventHubReceiver.Epoch
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.Epoch
- uid: System.Nullable{System.Int64}
  commentId: T:System.Nullable{System.Int64}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  nameWithType.vb: Nullable(Of Int64)
  fullname.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.PartitionId*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubReceiver.PartitionId
  isExternal: false
  name: PartitionId
  nameWithType: EventHubReceiver.PartitionId
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.PartitionId
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.StartingOffset
  commentId: P:Microsoft.ServiceBus.Messaging.EventHubReceiver.StartingOffset
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.OffsetInclusive*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubReceiver.OffsetInclusive
  isExternal: false
  name: OffsetInclusive
  nameWithType: EventHubReceiver.OffsetInclusive
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.OffsetInclusive
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  commentId: T:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: EventHubConsumerGroup
  nameWithType: EventHubConsumerGroup
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.PrefetchSizeInBytes
  commentId: P:Microsoft.ServiceBus.Messaging.EventHubReceiver.PrefetchSizeInBytes
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.PrefetchCount*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubReceiver.PrefetchCount
  isExternal: false
  name: PrefetchCount
  nameWithType: EventHubReceiver.PrefetchCount
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.PrefetchCount
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.ServiceBus.Messaging.EventData.SerializedSizeInBytes
  commentId: P:Microsoft.ServiceBus.Messaging.EventData.SerializedSizeInBytes
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.PrefetchCount
  commentId: P:Microsoft.ServiceBus.Messaging.EventHubReceiver.PrefetchCount
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.PrefetchSizeInBytes*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubReceiver.PrefetchSizeInBytes
  isExternal: false
  name: PrefetchSizeInBytes
  nameWithType: EventHubReceiver.PrefetchSizeInBytes
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.PrefetchSizeInBytes
- uid: Microsoft.ServiceBus.Messaging.EventData
  commentId: T:Microsoft.ServiceBus.Messaging.EventData
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: EventData
  nameWithType: EventData
  fullName: Microsoft.ServiceBus.Messaging.EventData
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.Epoch
  commentId: P:Microsoft.ServiceBus.Messaging.EventHubReceiver.Epoch
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.Receive*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubReceiver.Receive
  isExternal: false
  name: Receive
  nameWithType: EventHubReceiver.Receive
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.Receive
- uid: Microsoft.ServiceBus.Messaging.MessagingException
  commentId: T:Microsoft.ServiceBus.Messaging.MessagingException
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: MessagingException
  nameWithType: MessagingException
  fullName: Microsoft.ServiceBus.Messaging.MessagingException
- uid: Microsoft.ServiceBus.Messaging.MessagingCommunicationException
  commentId: T:Microsoft.ServiceBus.Messaging.MessagingCommunicationException
  isExternal: false
  name: MessagingCommunicationException
  nameWithType: MessagingCommunicationException
  fullName: Microsoft.ServiceBus.Messaging.MessagingCommunicationException
- uid: Microsoft.ServiceBus.Messaging.ServerBusyException
  commentId: T:Microsoft.ServiceBus.Messaging.ServerBusyException
  isExternal: false
  name: ServerBusyException
  nameWithType: ServerBusyException
  fullName: Microsoft.ServiceBus.Messaging.ServerBusyException
- uid: Microsoft.ServiceBus.Messaging.ReceiverDisconnectedException
  commentId: T:Microsoft.ServiceBus.Messaging.ReceiverDisconnectedException
  isExternal: false
  name: ReceiverDisconnectedException
  nameWithType: ReceiverDisconnectedException
  fullName: Microsoft.ServiceBus.Messaging.ReceiverDisconnectedException
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.ReceiveAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubReceiver.ReceiveAsync
  isExternal: false
  name: ReceiveAsync
  nameWithType: EventHubReceiver.ReceiveAsync
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.ReceiveAsync
- uid: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.EventData}
  commentId: T:System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.EventData}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<EventData>
  nameWithType: Task<EventData>
  fullName: System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.EventData>
  nameWithType.vb: Task(Of EventData)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.ServiceBus.Messaging.EventData)
  name.vb: Task(Of EventData)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.EventData
    name: EventData
    nameWithType: EventData
    fullName: Microsoft.ServiceBus.Messaging.EventData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.EventData
    name: EventData
    nameWithType: EventData
    fullName: Microsoft.ServiceBus.Messaging.EventData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.Receive(System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubReceiver.Receive(System.TimeSpan)
- uid: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.EventData}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.EventData}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<EventData>
  nameWithType: IEnumerable<EventData>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.EventData>
  nameWithType.vb: IEnumerable(Of EventData)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.EventData)
  name.vb: IEnumerable(Of EventData)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.EventData
    name: EventData
    nameWithType: EventData
    fullName: Microsoft.ServiceBus.Messaging.EventData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.EventData
    name: EventData
    nameWithType: EventData
    fullName: Microsoft.ServiceBus.Messaging.EventData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.Receive(System.Int32)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubReceiver.Receive(System.Int32)
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.EventData}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.EventData}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<EventData>>
  nameWithType: Task<IEnumerable<EventData>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.EventData>>
  nameWithType.vb: Task(Of IEnumerable(Of EventData))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.EventData))
  name.vb: Task(Of IEnumerable(Of EventData))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.EventData
    name: EventData
    nameWithType: EventData
    fullName: Microsoft.ServiceBus.Messaging.EventData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.EventData
    name: EventData
    nameWithType: EventData
    fullName: Microsoft.ServiceBus.Messaging.EventData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.Receive(System.Int32,System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubReceiver.Receive(System.Int32,System.TimeSpan)
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: OnAbort()
  nameWithType: ClientEntity.OnAbort()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
    name: OnAbort
    nameWithType: ClientEntity.OnAbort
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
    name: OnAbort
    nameWithType: ClientEntity.OnAbort
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.OnAbort*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubReceiver.OnAbort
  isExternal: false
  name: OnAbort
  nameWithType: EventHubReceiver.OnAbort
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.OnAbort
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen(System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen(System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: true
  name: OnOpen(TimeSpan)
  nameWithType: ClientEntity.OnOpen(TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen(System.TimeSpan)
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen(System.TimeSpan)
    name: OnOpen
    nameWithType: ClientEntity.OnOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen(System.TimeSpan)
    name: OnOpen
    nameWithType: ClientEntity.OnOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.OnOpen*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubReceiver.OnOpen
  isExternal: false
  name: OnOpen
  nameWithType: EventHubReceiver.OnOpen
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.OnOpen
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: true
  name: OnBeginOpen(TimeSpan, AsyncCallback, Object)
  nameWithType: ClientEntity.OnBeginOpen(TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen(System.TimeSpan, System.AsyncCallback, System.Object)
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
    name: OnBeginOpen
    nameWithType: ClientEntity.OnBeginOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
    name: OnBeginOpen
    nameWithType: ClientEntity.OnBeginOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.OnBeginOpen*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubReceiver.OnBeginOpen
  isExternal: false
  name: OnBeginOpen
  nameWithType: EventHubReceiver.OnBeginOpen
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.OnBeginOpen
- uid: System.AsyncCallback
  commentId: T:System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.IAsyncResult
  commentId: T:System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen(System.IAsyncResult)
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: true
  name: OnEndOpen(IAsyncResult)
  nameWithType: ClientEntity.OnEndOpen(IAsyncResult)
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen(System.IAsyncResult)
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen(System.IAsyncResult)
    name: OnEndOpen
    nameWithType: ClientEntity.OnEndOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen(System.IAsyncResult)
    name: OnEndOpen
    nameWithType: ClientEntity.OnEndOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.OnEndOpen*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubReceiver.OnEndOpen
  isExternal: false
  name: OnEndOpen
  nameWithType: EventHubReceiver.OnEndOpen
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.OnEndOpen
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose(System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnClose(System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: true
  name: OnClose(TimeSpan)
  nameWithType: ClientEntity.OnClose(TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose(System.TimeSpan)
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose(System.TimeSpan)
    name: OnClose
    nameWithType: ClientEntity.OnClose
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose(System.TimeSpan)
    name: OnClose
    nameWithType: ClientEntity.OnClose
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.OnClose*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubReceiver.OnClose
  isExternal: false
  name: OnClose
  nameWithType: EventHubReceiver.OnClose
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.OnClose
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: true
  name: OnBeginClose(TimeSpan, AsyncCallback, Object)
  nameWithType: ClientEntity.OnBeginClose(TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose(System.TimeSpan, System.AsyncCallback, System.Object)
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
    name: OnBeginClose
    nameWithType: ClientEntity.OnBeginClose
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
    name: OnBeginClose
    nameWithType: ClientEntity.OnBeginClose
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.OnBeginClose*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubReceiver.OnBeginClose
  isExternal: false
  name: OnBeginClose
  nameWithType: EventHubReceiver.OnBeginClose
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.OnBeginClose
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose(System.IAsyncResult)
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: true
  name: OnEndClose(IAsyncResult)
  nameWithType: ClientEntity.OnEndClose(IAsyncResult)
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose(System.IAsyncResult)
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose(System.IAsyncResult)
    name: OnEndClose
    nameWithType: ClientEntity.OnEndClose
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose(System.IAsyncResult)
    name: OnEndClose
    nameWithType: ClientEntity.OnEndClose
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver.OnEndClose*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubReceiver.OnEndClose
  isExternal: false
  name: OnEndClose
  nameWithType: EventHubReceiver.OnEndClose
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver.OnEndClose
