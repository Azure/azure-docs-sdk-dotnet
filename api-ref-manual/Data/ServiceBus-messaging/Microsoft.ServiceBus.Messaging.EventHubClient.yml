### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceBus.Messaging.EventHubClient
  commentId: T:Microsoft.ServiceBus.Messaging.EventHubClient
  id: EventHubClient
  parent: Microsoft.ServiceBus.Messaging
  children:
  - Microsoft.ServiceBus.Messaging.EventHubClient.Create(System.String)
  - Microsoft.ServiceBus.Messaging.EventHubClient.CreateFromConnectionString(System.String)
  - Microsoft.ServiceBus.Messaging.EventHubClient.CreateFromConnectionString(System.String,System.String)
  - Microsoft.ServiceBus.Messaging.EventHubClient.CreatePartitionedSender(System.String)
  - Microsoft.ServiceBus.Messaging.EventHubClient.CreatePartitionedSenderAsync(System.String)
  - Microsoft.ServiceBus.Messaging.EventHubClient.CreateSender(System.String)
  - Microsoft.ServiceBus.Messaging.EventHubClient.CreateSenderAsync
  - Microsoft.ServiceBus.Messaging.EventHubClient.CreateSenderAsync(System.String)
  - Microsoft.ServiceBus.Messaging.EventHubClient.GetConsumerGroup(System.String)
  - Microsoft.ServiceBus.Messaging.EventHubClient.GetDefaultConsumerGroup
  - Microsoft.ServiceBus.Messaging.EventHubClient.GetPartitionRuntimeInformation(System.String)
  - Microsoft.ServiceBus.Messaging.EventHubClient.GetPartitionRuntimeInformationAsync(System.String)
  - Microsoft.ServiceBus.Messaging.EventHubClient.GetRuntimeInformation
  - Microsoft.ServiceBus.Messaging.EventHubClient.GetRuntimeInformationAsync
  - Microsoft.ServiceBus.Messaging.EventHubClient.OnAbort
  - Microsoft.ServiceBus.Messaging.EventHubClient.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  - Microsoft.ServiceBus.Messaging.EventHubClient.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
  - Microsoft.ServiceBus.Messaging.EventHubClient.OnClose(System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.EventHubClient.OnEndClose(System.IAsyncResult)
  - Microsoft.ServiceBus.Messaging.EventHubClient.OnEndOpen(System.IAsyncResult)
  - Microsoft.ServiceBus.Messaging.EventHubClient.Path
  - Microsoft.ServiceBus.Messaging.EventHubClient.PrefetchCount
  - Microsoft.ServiceBus.Messaging.EventHubClient.PrefetchSizeInBytes
  - Microsoft.ServiceBus.Messaging.EventHubClient.Send(Microsoft.ServiceBus.Messaging.EventData)
  - Microsoft.ServiceBus.Messaging.EventHubClient.SendAsync(Microsoft.ServiceBus.Messaging.EventData)
  - Microsoft.ServiceBus.Messaging.EventHubClient.SendBatch(System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.EventData})
  - Microsoft.ServiceBus.Messaging.EventHubClient.SendBatchAsync(System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.EventData})
  langs:
  - csharp
  - vb
  name: EventHubClient
  nameWithType: EventHubClient
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient
  type: Class
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: EventHubClient
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
    startLine: 13
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: An anchor class used to send and receive events to and from an Event Hub.
  example: []
  syntax:
    content: 'public abstract class EventHubClient : ClientEntity, IMessageClientEntity, ICloseable'
    content.vb: >-
      Public MustInherit Class EventHubClient
          Inherits ClientEntity
          Implements IMessageClientEntity, ICloseable
  inheritance:
  - System.Object
  - Microsoft.ServiceBus.Messaging.ClientEntity
  inheritedMembers:
  - Microsoft.ServiceBus.Messaging.ClientEntity.RetryPolicy
  - Microsoft.ServiceBus.Messaging.ClientEntity.IsClosed
  - Microsoft.ServiceBus.Messaging.ClientEntity.ThisLock
  - Microsoft.ServiceBus.Messaging.ClientEntity.Abort
  - Microsoft.ServiceBus.Messaging.ClientEntity.Close
  - Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
  - Microsoft.ServiceBus.Messaging.ClientEntity.Fault
  - Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen(System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
  - Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
  - Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
  - Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
  - Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
  - Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
  - Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
  - Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.PrefetchCount
  commentId: P:Microsoft.ServiceBus.Messaging.EventHubClient.PrefetchCount
  id: PrefetchCount
  parent: Microsoft.ServiceBus.Messaging.EventHubClient
  langs:
  - csharp
  - vb
  name: PrefetchCount
  nameWithType: EventHubClient.PrefetchCount
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.PrefetchCount
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: PrefetchCount
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
    startLine: 43
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Gets or sets the number of events that any receive operation will actively cache. By default, this value is inherited from \n<xref href=\"Microsoft.ServiceBus.Messaging.MessagingFactory\" data-throw-if-not-resolved=\"false\"></xref> if the current instance is created from the factory method. Otherwise, the default value is 10,000."
  remarks: Note that setting the count too low will affect the effective performance of the Event Hub receive call.
  example: []
  syntax:
    content: public int PrefetchCount { get; set; }
    content.vb: Public Property PrefetchCount As Integer
    parameters: []
    return:
      type: System.Int32
      description: The number of messages that the message receiver can simultaneously request.
  overload: Microsoft.ServiceBus.Messaging.EventHubClient.PrefetchCount*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown if the value is less than the minimum required value of 10.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.PrefetchSizeInBytes
  commentId: P:Microsoft.ServiceBus.Messaging.EventHubClient.PrefetchSizeInBytes
  id: PrefetchSizeInBytes
  parent: Microsoft.ServiceBus.Messaging.EventHubClient
  langs:
  - csharp
  - vb
  name: PrefetchSizeInBytes
  nameWithType: EventHubClient.PrefetchSizeInBytes
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.PrefetchSizeInBytes
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: PrefetchSizeInBytes
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
    startLine: 72
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Gets or sets the maximum size (in bytes) in total that any receive operation will actively cache. The size of each event data is determined by the \n<xref href=\"Microsoft.ServiceBus.Messaging.EventData.SerializedSizeInBytes\" data-throw-if-not-resolved=\"false\"></xref> property."
  remarks: "The size limit is not an absolute limit, and can go over by as much as (PrefetchSizeInBytes/256kBytes) number of event worth of bytes.\nAny <xref href=\"Microsoft.ServiceBus.Messaging.EventHubConsumerGroup\" data-throw-if-not-resolved=\"false\"></xref> created from this \ninstance will inherit this value by default. Changes to this value will not be propagated \nto already created consumer group, but will be used by new <xref href=\"Microsoft.ServiceBus.Messaging.EventHubConsumerGroup\" data-throw-if-not-resolved=\"false\"></xref> \ncreated after the change. \nAlso setting this value to non-null value will set <xref href=\"Microsoft.ServiceBus.Messaging.EventHubClient.PrefetchCount\" data-throw-if-not-resolved=\"false\"></xref> to zero.\nNote that setting the size too low will affect the effective performance of the Event Hub receive call."
  example: []
  syntax:
    content: public long ? PrefetchSizeInBytes { get; set; }
    content.vb: Public Property PrefetchSizeInBytes As Long?
    parameters: []
    return:
      type: System.Nullable{System.Int64}
      description: Returns <xref href="System.Int64" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.EventHubClient.PrefetchSizeInBytes*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown when the size value is less than the minimum required value of 260K bytes.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.Path
  commentId: P:Microsoft.ServiceBus.Messaging.EventHubClient.Path
  id: Path
  parent: Microsoft.ServiceBus.Messaging.EventHubClient
  langs:
  - csharp
  - vb
  name: Path
  nameWithType: EventHubClient.Path
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.Path
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Path
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
    startLine: 93
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets the path of the Event Hub.
  example: []
  syntax:
    content: public string Path { get; }
    content.vb: Public ReadOnly Property Path As String
    parameters: []
    return:
      type: System.String
      description: The path of the Event Hub.
  overload: Microsoft.ServiceBus.Messaging.EventHubClient.Path*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.Create(System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubClient.Create(System.String)
  id: Create(System.String)
  parent: Microsoft.ServiceBus.Messaging.EventHubClient
  langs:
  - csharp
  - vb
  name: Create(String)
  nameWithType: EventHubClient.Create(String)
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.Create(System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Create
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
    startLine: 126
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Creates a new instance of the \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubClient\" data-throw-if-not-resolved=\"false\"></xref> instance, using a connection string from the application configuration settings."
  remarks: "This method will attempt to retrieve the connection string information\nfrom either app.config, or web.config files. User must supply the connection \nstring using the \"AppSettings\" section of the configuration. The format of the section\nis as follows:\n\n<pre><code><appSettings>\n<!-- Service Bus specific app setings for messaging connections -->\n<add key=\"Microsoft.ServiceBus.ConnectionString\" value=\"Endpoint=sb://[your namespace].servicebus.windows.net;SharedSecretIssuer=owner;SharedSecretValue=[your secret]\"></add>\n</appSettings></code></pre>\n"
  example: []
  syntax:
    content: public static EventHubClient Create(string path)
    content.vb: Public Shared Function Create(path As String) As EventHubClient
    parameters:
    - id: path
      type: System.String
      description: The path to the Event Hub.
    return:
      type: Microsoft.ServiceBus.Messaging.EventHubClient
      description: The newly created Event Hub client object.
  overload: Microsoft.ServiceBus.Messaging.EventHubClient.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.CreateFromConnectionString(System.String,System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubClient.CreateFromConnectionString(System.String,System.String)
  id: CreateFromConnectionString(System.String,System.String)
  parent: Microsoft.ServiceBus.Messaging.EventHubClient
  langs:
  - csharp
  - vb
  name: CreateFromConnectionString(String, String)
  nameWithType: EventHubClient.CreateFromConnectionString(String, String)
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.CreateFromConnectionString(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CreateFromConnectionString
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
    startLine: 140
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Creates a new instance of the Event Hubs client using the specified connection string. Use this overload only when the connection string does not use the \n<xref href=\"Microsoft.ServiceBus.ServiceBusConnectionStringBuilder.EntityPath\" data-throw-if-not-resolved=\"false\"></xref> property."
  remarks: >-
    The connection can be obtained either from the Azure portal, or created from

    a <xref href="Microsoft.ServiceBus.ServiceBusConnectionStringBuilder" data-throw-if-not-resolved="false"></xref> instance.
  example: []
  syntax:
    content: public static EventHubClient CreateFromConnectionString(string connectionString, string path)
    content.vb: Public Shared Function CreateFromConnectionString(connectionString As String, path As String) As EventHubClient
    parameters:
    - id: connectionString
      type: System.String
      description: The connection string to be used.
    - id: path
      type: System.String
      description: The path to the Event Hub.
    return:
      type: Microsoft.ServiceBus.Messaging.EventHubClient
      description: The newly created <xref href="Microsoft.ServiceBus.Messaging.EventHubClient" data-throw-if-not-resolved="false"></xref> object.
  overload: Microsoft.ServiceBus.Messaging.EventHubClient.CreateFromConnectionString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown when the format of the parameters is incorrect.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.CreateFromConnectionString(System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubClient.CreateFromConnectionString(System.String)
  id: CreateFromConnectionString(System.String)
  parent: Microsoft.ServiceBus.Messaging.EventHubClient
  langs:
  - csharp
  - vb
  name: CreateFromConnectionString(String)
  nameWithType: EventHubClient.CreateFromConnectionString(String)
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.CreateFromConnectionString(System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CreateFromConnectionString
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
    startLine: 181
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Creates a new instance of the Event Hubs client using the specified connection string. You can populate the \n<xref href=\"Microsoft.ServiceBus.ServiceBusConnectionStringBuilder.EntityPath\" data-throw-if-not-resolved=\"false\"></xref> property with the name of the Event Hub."
  remarks: >-
    The connection can be obtained either from the Azure portal, or created from

    a <xref href="Microsoft.ServiceBus.ServiceBusConnectionStringBuilder" data-throw-if-not-resolved="false"></xref> instance.
  example:
  - >-
    Sample showing how to populate the EntityPath in connectionString <pre><code>var connectionStringBuilder = new ServiceBusConnectionStringBuilder(connectionString);

    connectionStringBuilder.EntityPath = eventHubDescription.Path;


    var eventHubClient = EventHubClient.CreateFromConnectionString(connectionStringBuilder.ToString());</code></pre>
  syntax:
    content: public static EventHubClient CreateFromConnectionString(string connectionString)
    content.vb: Public Shared Function CreateFromConnectionString(connectionString As String) As EventHubClient
    parameters:
    - id: connectionString
      type: System.String
      description: The connection string to use.
    return:
      type: Microsoft.ServiceBus.Messaging.EventHubClient
      description: The newly created <xref href="Microsoft.ServiceBus.Messaging.EventHubClient" data-throw-if-not-resolved="false"></xref> object.
  overload: Microsoft.ServiceBus.Messaging.EventHubClient.CreateFromConnectionString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown when the format of the <span class="paramref">connectionString</span> parameter is incorrect.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown when the format of the parameter connectionString is incorrect.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.Send(Microsoft.ServiceBus.Messaging.EventData)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubClient.Send(Microsoft.ServiceBus.Messaging.EventData)
  id: Send(Microsoft.ServiceBus.Messaging.EventData)
  parent: Microsoft.ServiceBus.Messaging.EventHubClient
  langs:
  - csharp
  - vb
  name: Send(EventData)
  nameWithType: EventHubClient.Send(EventData)
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.Send(Microsoft.ServiceBus.Messaging.EventData)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Send
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
    startLine: 206
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Sends event data to an Event Hub.
  remarks: "Any <xref href=\"Microsoft.ServiceBus.Messaging.EventData\" data-throw-if-not-resolved=\"false\"></xref> instance send using this method must have \nthe <xref href=\"Microsoft.ServiceBus.Messaging.EventData.PartitionKey\" data-throw-if-not-resolved=\"false\"></xref> set."
  example: []
  syntax:
    content: public void Send(EventData data)
    content.vb: Public Sub Send(data As EventData)
    parameters:
    - id: data
      type: Microsoft.ServiceBus.Messaging.EventData
      description: The event data.
  overload: Microsoft.ServiceBus.Messaging.EventHubClient.Send*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.SendAsync(Microsoft.ServiceBus.Messaging.EventData)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubClient.SendAsync(Microsoft.ServiceBus.Messaging.EventData)
  id: SendAsync(Microsoft.ServiceBus.Messaging.EventData)
  parent: Microsoft.ServiceBus.Messaging.EventHubClient
  langs:
  - csharp
  - vb
  name: SendAsync(EventData)
  nameWithType: EventHubClient.SendAsync(EventData)
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.SendAsync(Microsoft.ServiceBus.Messaging.EventData)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: SendAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
    startLine: 217
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously sends event data to an Event Hub.
  remarks: "Any <xref href=\"Microsoft.ServiceBus.Messaging.EventData\" data-throw-if-not-resolved=\"false\"></xref> instance send using this method must have \nthe <xref href=\"Microsoft.ServiceBus.Messaging.EventData.PartitionKey\" data-throw-if-not-resolved=\"false\"></xref> set."
  example: []
  syntax:
    content: public Task SendAsync(EventData data)
    content.vb: Public Function SendAsync(data As EventData) As Task
    parameters:
    - id: data
      type: Microsoft.ServiceBus.Messaging.EventData
      description: The <xref href="Microsoft.ServiceBus.Messaging.EventData" data-throw-if-not-resolved="false"></xref> to send.
    return:
      type: System.Threading.Tasks.Task
      description: The task representing the asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.EventHubClient.SendAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.SendBatch(System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.EventData})
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubClient.SendBatch(System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.EventData})
  id: SendBatch(System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.EventData})
  parent: Microsoft.ServiceBus.Messaging.EventHubClient
  langs:
  - csharp
  - vb
  name: SendBatch(IEnumerable<EventData>)
  nameWithType: EventHubClient.SendBatch(IEnumerable<EventData>)
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.SendBatch(System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.EventData>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: SendBatch
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
    startLine: 231
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Sends a batch of event data.
  remarks: "User should make sure the total serialized size of <span class=\"paramref\">eventDataList</span> should be \nunder the size limit of one event data transmission, which is 256k by default. Also note that there will be some overhead to form the batch."
  example: []
  syntax:
    content: public void SendBatch(IEnumerable<EventData> eventDataList)
    content.vb: Public Sub SendBatch(eventDataList As IEnumerable(Of EventData))
    parameters:
    - id: eventDataList
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.EventData}
      description: An IEnumerable object containing event data instances.
  overload: Microsoft.ServiceBus.Messaging.EventHubClient.SendBatch*
  exceptions:
  - type: Microsoft.ServiceBus.Messaging.MessageSizeExceededException
    commentId: T:Microsoft.ServiceBus.Messaging.MessageSizeExceededException
    description: "Thrown if the total serialized size of <span class=\"paramref\">eventDataList</span> \nexceeds the allowed size limit for one event transmission (256k by default)."
  nameWithType.vb: EventHubClient.SendBatch(IEnumerable(Of EventData))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.EventHubClient.SendBatch(System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.EventData))
  name.vb: SendBatch(IEnumerable(Of EventData))
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.SendBatchAsync(System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.EventData})
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubClient.SendBatchAsync(System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.EventData})
  id: SendBatchAsync(System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.EventData})
  parent: Microsoft.ServiceBus.Messaging.EventHubClient
  langs:
  - csharp
  - vb
  name: SendBatchAsync(IEnumerable<EventData>)
  nameWithType: EventHubClient.SendBatchAsync(IEnumerable<EventData>)
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.SendBatchAsync(System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.EventData>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: SendBatchAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
    startLine: 244
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously sends a batch of event data.
  remarks: "User should make sure the total serialized size of <span class=\"paramref\">eventDataList</span> should be \nunder the size limit of one event data transmission, which is 256k by default. Also note that there will be some overhead to form the batch."
  example: []
  syntax:
    content: public Task SendBatchAsync(IEnumerable<EventData> eventDataList)
    content.vb: Public Function SendBatchAsync(eventDataList As IEnumerable(Of EventData)) As Task
    parameters:
    - id: eventDataList
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.EventData}
      description: An IEnumerable object containing event data instances.
    return:
      type: System.Threading.Tasks.Task
      description: Returns <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.EventHubClient.SendBatchAsync*
  exceptions:
  - type: Microsoft.ServiceBus.Messaging.MessageSizeExceededException
    commentId: T:Microsoft.ServiceBus.Messaging.MessageSizeExceededException
    description: "Thrown if the total serialized size of <span class=\"paramref\">eventDataList</span> \nexceeds the allowed size limit for one event transmission (256k by default)."
  nameWithType.vb: EventHubClient.SendBatchAsync(IEnumerable(Of EventData))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.EventHubClient.SendBatchAsync(System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.EventData))
  name.vb: SendBatchAsync(IEnumerable(Of EventData))
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.CreateSender(System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubClient.CreateSender(System.String)
  id: CreateSender(System.String)
  parent: Microsoft.ServiceBus.Messaging.EventHubClient
  langs:
  - csharp
  - vb
  name: CreateSender(String)
  nameWithType: EventHubClient.CreateSender(String)
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.CreateSender(System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CreateSender
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
    startLine: 255
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Creates an Event Hubs sender for the specified publisher.
  example: []
  syntax:
    content: public EventHubSender CreateSender(string publisher)
    content.vb: Public Function CreateSender(publisher As String) As EventHubSender
    parameters:
    - id: publisher
      type: System.String
      description: The publisher identifier.
    return:
      type: Microsoft.ServiceBus.Messaging.EventHubSender
      description: Returns <xref href="Microsoft.ServiceBus.Messaging.EventHubSender" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.EventHubClient.CreateSender*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.CreateSenderAsync(System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubClient.CreateSenderAsync(System.String)
  id: CreateSenderAsync(System.String)
  parent: Microsoft.ServiceBus.Messaging.EventHubClient
  langs:
  - csharp
  - vb
  name: CreateSenderAsync(String)
  nameWithType: EventHubClient.CreateSenderAsync(String)
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.CreateSenderAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CreateSenderAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
    startLine: 266
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronous version of <xref href="Microsoft.ServiceBus.Messaging.EventHubClient.CreateSender(System.String)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Task<EventHubSender> CreateSenderAsync(string publisher)
    content.vb: Public Function CreateSenderAsync(publisher As String) As Task(Of EventHubSender)
    parameters:
    - id: publisher
      type: System.String
      description: The publisher identifier.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.EventHubSender}
      description: Returns <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.EventHubClient.CreateSenderAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.CreatePartitionedSender(System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubClient.CreatePartitionedSender(System.String)
  id: CreatePartitionedSender(System.String)
  parent: Microsoft.ServiceBus.Messaging.EventHubClient
  langs:
  - csharp
  - vb
  name: CreatePartitionedSender(String)
  nameWithType: EventHubClient.CreatePartitionedSender(String)
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.CreatePartitionedSender(System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CreatePartitionedSender
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
    startLine: 274
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Creates an Event Hubs sender for the specified Event Hubs partition.
  example: []
  syntax:
    content: public EventHubSender CreatePartitionedSender(string partitionId)
    content.vb: Public Function CreatePartitionedSender(partitionId As String) As EventHubSender
    parameters:
    - id: partitionId
      type: System.String
      description: The ID of the partition.
    return:
      type: Microsoft.ServiceBus.Messaging.EventHubSender
      description: Returns the <xref href="Microsoft.ServiceBus.Messaging.EventHubSender" data-throw-if-not-resolved="false"></xref> object.
  overload: Microsoft.ServiceBus.Messaging.EventHubClient.CreatePartitionedSender*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.CreatePartitionedSenderAsync(System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubClient.CreatePartitionedSenderAsync(System.String)
  id: CreatePartitionedSenderAsync(System.String)
  parent: Microsoft.ServiceBus.Messaging.EventHubClient
  langs:
  - csharp
  - vb
  name: CreatePartitionedSenderAsync(String)
  nameWithType: EventHubClient.CreatePartitionedSenderAsync(String)
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.CreatePartitionedSenderAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CreatePartitionedSenderAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
    startLine: 283
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronous version of <xref href="Microsoft.ServiceBus.Messaging.EventHubClient.CreatePartitionedSender(System.String)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Task<EventHubSender> CreatePartitionedSenderAsync(string partitionId)
    content.vb: Public Function CreatePartitionedSenderAsync(partitionId As String) As Task(Of EventHubSender)
    parameters:
    - id: partitionId
      type: System.String
      description: The ID of the partition.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.EventHubSender}
      description: Returns <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.EventHubClient.CreatePartitionedSenderAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.GetRuntimeInformationAsync
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubClient.GetRuntimeInformationAsync
  id: GetRuntimeInformationAsync
  parent: Microsoft.ServiceBus.Messaging.EventHubClient
  langs:
  - csharp
  - vb
  name: GetRuntimeInformationAsync()
  nameWithType: EventHubClient.GetRuntimeInformationAsync()
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.GetRuntimeInformationAsync()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: GetRuntimeInformationAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
    startLine: 295
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronous version of <xref href="Microsoft.ServiceBus.Messaging.EventHubClient.GetRuntimeInformation" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public virtual Task<EventHubRuntimeInformation> GetRuntimeInformationAsync()
    content.vb: Public Overridable Function GetRuntimeInformationAsync As Task(Of EventHubRuntimeInformation)
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.EventHubRuntimeInformation}
      description: Returns <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.EventHubClient.GetRuntimeInformationAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.GetRuntimeInformation
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubClient.GetRuntimeInformation
  id: GetRuntimeInformation
  parent: Microsoft.ServiceBus.Messaging.EventHubClient
  langs:
  - csharp
  - vb
  name: GetRuntimeInformation()
  nameWithType: EventHubClient.GetRuntimeInformation()
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.GetRuntimeInformation()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: GetRuntimeInformation
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
    startLine: 304
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Retrieves Event Hubs runtime information, which is required for creating \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubSender\" data-throw-if-not-resolved=\"false\"></xref> or \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubReceiver\" data-throw-if-not-resolved=\"false\"></xref> objects."
  example: []
  syntax:
    content: public virtual EventHubRuntimeInformation GetRuntimeInformation()
    content.vb: Public Overridable Function GetRuntimeInformation As EventHubRuntimeInformation
    return:
      type: Microsoft.ServiceBus.Messaging.EventHubRuntimeInformation
      description: Returns <xref href="Microsoft.ServiceBus.Messaging.EventHubRuntimeInformation" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.EventHubClient.GetRuntimeInformation*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.GetPartitionRuntimeInformationAsync(System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubClient.GetPartitionRuntimeInformationAsync(System.String)
  id: GetPartitionRuntimeInformationAsync(System.String)
  parent: Microsoft.ServiceBus.Messaging.EventHubClient
  langs:
  - csharp
  - vb
  name: GetPartitionRuntimeInformationAsync(String)
  nameWithType: EventHubClient.GetPartitionRuntimeInformationAsync(String)
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.GetPartitionRuntimeInformationAsync(System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: GetPartitionRuntimeInformationAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
    startLine: 313
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Asynchronous version of \n<xref href=\"Microsoft.ServiceBus.Messaging.EventHubClient.GetPartitionRuntimeInformation(System.String)\" data-throw-if-not-resolved=\"false\"></xref>."
  example: []
  syntax:
    content: public virtual Task<PartitionRuntimeInformation> GetPartitionRuntimeInformationAsync(string partitionId)
    content.vb: Public Overridable Function GetPartitionRuntimeInformationAsync(partitionId As String) As Task(Of PartitionRuntimeInformation)
    parameters:
    - id: partitionId
      type: System.String
      description: The partition ID.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.PartitionRuntimeInformation}
      description: Returns <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.EventHubClient.GetPartitionRuntimeInformationAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.GetPartitionRuntimeInformation(System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubClient.GetPartitionRuntimeInformation(System.String)
  id: GetPartitionRuntimeInformation(System.String)
  parent: Microsoft.ServiceBus.Messaging.EventHubClient
  langs:
  - csharp
  - vb
  name: GetPartitionRuntimeInformation(String)
  nameWithType: EventHubClient.GetPartitionRuntimeInformation(String)
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.GetPartitionRuntimeInformation(System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: GetPartitionRuntimeInformation
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
    startLine: 321
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Retrieves runtime information for the specified partition of the Event Hub.
  example: []
  syntax:
    content: public virtual PartitionRuntimeInformation GetPartitionRuntimeInformation(string partitionId)
    content.vb: Public Overridable Function GetPartitionRuntimeInformation(partitionId As String) As PartitionRuntimeInformation
    parameters:
    - id: partitionId
      type: System.String
      description: The partition ID.
    return:
      type: Microsoft.ServiceBus.Messaging.PartitionRuntimeInformation
      description: Returns <xref href="Microsoft.ServiceBus.Messaging.PartitionRuntimeInformation" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.EventHubClient.GetPartitionRuntimeInformation*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.GetDefaultConsumerGroup
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubClient.GetDefaultConsumerGroup
  id: GetDefaultConsumerGroup
  parent: Microsoft.ServiceBus.Messaging.EventHubClient
  langs:
  - csharp
  - vb
  name: GetDefaultConsumerGroup()
  nameWithType: EventHubClient.GetDefaultConsumerGroup()
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.GetDefaultConsumerGroup()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: GetDefaultConsumerGroup
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
    startLine: 330
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Returns the default consumer group, for the receive operation of event data.
  remarks: >-
    Default ConsumerGroup cannot perform checkpoint operations. To perform

    checkpoint operations, user should create a explicit ConsumerGroup
  example: []
  syntax:
    content: public EventHubConsumerGroup GetDefaultConsumerGroup()
    content.vb: Public Function GetDefaultConsumerGroup As EventHubConsumerGroup
    return:
      type: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
      description: The default <xref href="Microsoft.ServiceBus.Messaging.EventHubConsumerGroup" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.EventHubClient.GetDefaultConsumerGroup*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.GetConsumerGroup(System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubClient.GetConsumerGroup(System.String)
  id: GetConsumerGroup(System.String)
  parent: Microsoft.ServiceBus.Messaging.EventHubClient
  langs:
  - csharp
  - vb
  name: GetConsumerGroup(String)
  nameWithType: EventHubClient.GetConsumerGroup(String)
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.GetConsumerGroup(System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: GetConsumerGroup
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
    startLine: 338
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Returns the consumer group with the specified name, for the receive operation of event data.
  example: []
  syntax:
    content: public EventHubConsumerGroup GetConsumerGroup(string groupName)
    content.vb: Public Function GetConsumerGroup(groupName As String) As EventHubConsumerGroup
    parameters:
    - id: groupName
      type: System.String
      description: The name of the group.
    return:
      type: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
      description: A <xref href="Microsoft.ServiceBus.Messaging.EventHubConsumerGroup" data-throw-if-not-resolved="false"></xref> instance, corresponding to the consumer group.
  overload: Microsoft.ServiceBus.Messaging.EventHubClient.GetConsumerGroup*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.OnAbort
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubClient.OnAbort
  id: OnAbort
  parent: Microsoft.ServiceBus.Messaging.EventHubClient
  langs:
  - csharp
  - vb
  name: OnAbort()
  nameWithType: EventHubClient.OnAbort()
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.OnAbort()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnAbort
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
    startLine: 359
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes the abort action.
  example: []
  syntax:
    content: protected override void OnAbort()
    content.vb: Protected Overrides Sub OnAbort
  overridden: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
  overload: Microsoft.ServiceBus.Messaging.EventHubClient.OnAbort*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.OnClose(System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubClient.OnClose(System.TimeSpan)
  id: OnClose(System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.EventHubClient
  langs:
  - csharp
  - vb
  name: OnClose(TimeSpan)
  nameWithType: EventHubClient.OnClose(TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.OnClose(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnClose
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
    startLine: 367
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes the close action.
  example: []
  syntax:
    content: protected override void OnClose(TimeSpan timeout)
    content.vb: Protected Overrides Sub OnClose(timeout As TimeSpan)
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: The wait time before the operation times out.
  overridden: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose(System.TimeSpan)
  overload: Microsoft.ServiceBus.Messaging.EventHubClient.OnClose*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubClient.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  id: OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.EventHubClient
  langs:
  - csharp
  - vb
  name: OnBeginClose(TimeSpan, AsyncCallback, Object)
  nameWithType: EventHubClient.OnBeginClose(TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.OnBeginClose(System.TimeSpan, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnBeginClose
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
    startLine: 380
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes the begin close action.
  example: []
  syntax:
    content: protected override IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state)
    content.vb: Protected Overrides Function OnBeginClose(timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: The wait time before the operation times out.
    - id: callback
      type: System.AsyncCallback
      description: "An \n<xref href=\"System.AsyncCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate that references the method to invoke when the operation is complete."
    - id: state
      type: System.Object
      description: "A user-defined object that contains information about the receive operation. \nThis object is passed to the EndClose delegate when the operation is complete."
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous Close operation.
  overridden: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  overload: Microsoft.ServiceBus.Messaging.EventHubClient.OnBeginClose*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.OnEndClose(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubClient.OnEndClose(System.IAsyncResult)
  id: OnEndClose(System.IAsyncResult)
  parent: Microsoft.ServiceBus.Messaging.EventHubClient
  langs:
  - csharp
  - vb
  name: OnEndClose(IAsyncResult)
  nameWithType: EventHubClient.OnEndClose(IAsyncResult)
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.OnEndClose(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnEndClose
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
    startLine: 388
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes the end close action.
  example: []
  syntax:
    content: protected override void OnEndClose(IAsyncResult result)
    content.vb: Protected Overrides Sub OnEndClose(result As IAsyncResult)
    parameters:
    - id: result
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous Close operation.
  overridden: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose(System.IAsyncResult)
  overload: Microsoft.ServiceBus.Messaging.EventHubClient.OnEndClose*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubClient.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
  id: OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.EventHubClient
  langs:
  - csharp
  - vb
  name: OnBeginOpen(TimeSpan, AsyncCallback, Object)
  nameWithType: EventHubClient.OnBeginOpen(TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.OnBeginOpen(System.TimeSpan, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnBeginOpen
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
    startLine: 400
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes the begin open action.
  example: []
  syntax:
    content: protected override IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state)
    content.vb: Protected Overrides Function OnBeginOpen(timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: The wait time before the operation times out.
    - id: callback
      type: System.AsyncCallback
      description: "An \n<xref href=\"System.AsyncCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate that references the method to invoke when the operation is complete."
    - id: state
      type: System.Object
      description: "A user-defined object that contains information about the receive operation. \nThis object is passed to the EndOpen delegate when the operation is complete."
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous Open operation.
  overridden: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
  overload: Microsoft.ServiceBus.Messaging.EventHubClient.OnBeginOpen*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.OnEndOpen(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubClient.OnEndOpen(System.IAsyncResult)
  id: OnEndOpen(System.IAsyncResult)
  parent: Microsoft.ServiceBus.Messaging.EventHubClient
  langs:
  - csharp
  - vb
  name: OnEndOpen(IAsyncResult)
  nameWithType: EventHubClient.OnEndOpen(IAsyncResult)
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.OnEndOpen(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnEndOpen
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
    startLine: 407
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes the end open action.
  example: []
  syntax:
    content: protected override void OnEndOpen(IAsyncResult result)
    content.vb: Protected Overrides Sub OnEndOpen(result As IAsyncResult)
    parameters:
    - id: result
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous Open operation.
  overridden: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen(System.IAsyncResult)
  overload: Microsoft.ServiceBus.Messaging.EventHubClient.OnEndOpen*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.CreateSenderAsync
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubClient.CreateSenderAsync
  id: CreateSenderAsync
  parent: Microsoft.ServiceBus.Messaging.EventHubClient
  langs:
  - csharp
  - vb
  name: CreateSenderAsync()
  nameWithType: EventHubClient.CreateSenderAsync()
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.CreateSenderAsync()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CreateSenderAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/EventHubClient.cs
    startLine: 414
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Creates the Event Hubs sender. This method is for internal use, and not meant to be called from user code.
  example: []
  syntax:
    content: protected abstract Task<MessageSender> CreateSenderAsync()
    content.vb: Protected MustOverride Function CreateSenderAsync As Task(Of MessageSender)
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.MessageSender}
      description: The task representing the asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.EventHubClient.CreateSenderAsync*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
references:
- uid: Microsoft.ServiceBus.Messaging
  commentId: N:Microsoft.ServiceBus.Messaging
  isExternal: false
  name: Microsoft.ServiceBus.Messaging
  nameWithType: Microsoft.ServiceBus.Messaging
  fullName: Microsoft.ServiceBus.Messaging
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.ServiceBus.Messaging.ClientEntity
  commentId: T:Microsoft.ServiceBus.Messaging.ClientEntity
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: ClientEntity
  nameWithType: ClientEntity
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.RetryPolicy
  commentId: P:Microsoft.ServiceBus.Messaging.ClientEntity.RetryPolicy
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: RetryPolicy
  nameWithType: ClientEntity.RetryPolicy
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.RetryPolicy
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.IsClosed
  commentId: P:Microsoft.ServiceBus.Messaging.ClientEntity.IsClosed
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: IsClosed
  nameWithType: ClientEntity.IsClosed
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.IsClosed
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThisLock
  commentId: P:Microsoft.ServiceBus.Messaging.ClientEntity.ThisLock
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: ThisLock
  nameWithType: ClientEntity.ThisLock
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThisLock
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.Abort
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.Abort
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: Abort()
  nameWithType: ClientEntity.Abort()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Abort()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.Abort
    name: Abort
    nameWithType: ClientEntity.Abort
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Abort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.Abort
    name: Abort
    nameWithType: ClientEntity.Abort
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Abort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.Close
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.Close
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: Close()
  nameWithType: ClientEntity.Close()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Close()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.Close
    name: Close
    nameWithType: ClientEntity.Close
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Close
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.Close
    name: Close
    nameWithType: ClientEntity.Close
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Close
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: CloseAsync()
  nameWithType: ClientEntity.CloseAsync()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
    name: CloseAsync
    nameWithType: ClientEntity.CloseAsync
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
    name: CloseAsync
    nameWithType: ClientEntity.CloseAsync
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.Fault
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.Fault
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: Fault()
  nameWithType: ClientEntity.Fault()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Fault()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.Fault
    name: Fault
    nameWithType: ClientEntity.Fault
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Fault
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.Fault
    name: Fault
    nameWithType: ClientEntity.Fault
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Fault
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen(System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen(System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: true
  name: OnOpen(TimeSpan)
  nameWithType: ClientEntity.OnOpen(TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen(System.TimeSpan)
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen(System.TimeSpan)
    name: OnOpen
    nameWithType: ClientEntity.OnOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen(System.TimeSpan)
    name: OnOpen
    nameWithType: ClientEntity.OnOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: ThrowIfClosed()
  nameWithType: ClientEntity.ThrowIfClosed()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
    name: ThrowIfClosed
    nameWithType: ClientEntity.ThrowIfClosed
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
    name: ThrowIfClosed
    nameWithType: ClientEntity.ThrowIfClosed
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: ThrowIfDisposed()
  nameWithType: ClientEntity.ThrowIfDisposed()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
    name: ThrowIfDisposed
    nameWithType: ClientEntity.ThrowIfDisposed
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
    name: ThrowIfDisposed
    nameWithType: ClientEntity.ThrowIfDisposed
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: ThrowIfDisposedOrNotOpen()
  nameWithType: ClientEntity.ThrowIfDisposedOrNotOpen()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
    name: ThrowIfDisposedOrNotOpen
    nameWithType: ClientEntity.ThrowIfDisposedOrNotOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
    name: ThrowIfDisposedOrNotOpen
    nameWithType: ClientEntity.ThrowIfDisposedOrNotOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: ThrowIfFaulted()
  nameWithType: ClientEntity.ThrowIfFaulted()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
    name: ThrowIfFaulted
    nameWithType: ClientEntity.ThrowIfFaulted
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
    name: ThrowIfFaulted
    nameWithType: ClientEntity.ThrowIfFaulted
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: ThrowIfDisposedOrImmutable()
  nameWithType: ClientEntity.ThrowIfDisposedOrImmutable()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
    name: ThrowIfDisposedOrImmutable
    nameWithType: ClientEntity.ThrowIfDisposedOrImmutable
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
    name: ThrowIfDisposedOrImmutable
    nameWithType: ClientEntity.ThrowIfDisposedOrImmutable
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: OnOpened()
  nameWithType: ClientEntity.OnOpened()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
    name: OnOpened
    nameWithType: ClientEntity.OnOpened
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
    name: OnOpened
    nameWithType: ClientEntity.OnOpened
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: OnClosed()
  nameWithType: ClientEntity.OnClosed()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
    name: OnClosed
    nameWithType: ClientEntity.OnClosed
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
    name: OnClosed
    nameWithType: ClientEntity.OnClosed
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: OnFaulted()
  nameWithType: ClientEntity.OnFaulted()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
    name: OnFaulted
    nameWithType: ClientEntity.OnFaulted
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
    name: OnFaulted
    nameWithType: ClientEntity.OnFaulted
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.ServiceBus.Messaging.MessagingFactory
  commentId: T:Microsoft.ServiceBus.Messaging.MessagingFactory
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: MessagingFactory
  nameWithType: MessagingFactory
  fullName: Microsoft.ServiceBus.Messaging.MessagingFactory
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.PrefetchCount*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubClient.PrefetchCount
  isExternal: false
  name: PrefetchCount
  nameWithType: EventHubClient.PrefetchCount
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.PrefetchCount
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.ServiceBus.Messaging.EventData.SerializedSizeInBytes
  commentId: P:Microsoft.ServiceBus.Messaging.EventData.SerializedSizeInBytes
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  commentId: T:Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: EventHubConsumerGroup
  nameWithType: EventHubConsumerGroup
  fullName: Microsoft.ServiceBus.Messaging.EventHubConsumerGroup
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.PrefetchCount
  commentId: P:Microsoft.ServiceBus.Messaging.EventHubClient.PrefetchCount
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.PrefetchSizeInBytes*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubClient.PrefetchSizeInBytes
  isExternal: false
  name: PrefetchSizeInBytes
  nameWithType: EventHubClient.PrefetchSizeInBytes
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.PrefetchSizeInBytes
- uid: System.Nullable{System.Int64}
  commentId: T:System.Nullable{System.Int64}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  nameWithType.vb: Nullable(Of Int64)
  fullname.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.Path*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubClient.Path
  isExternal: false
  name: Path
  nameWithType: EventHubClient.Path
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.Path
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.ServiceBus.Messaging.EventHubClient
  commentId: T:Microsoft.ServiceBus.Messaging.EventHubClient
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: EventHubClient
  nameWithType: EventHubClient
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.Create*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubClient.Create
  isExternal: false
  name: Create
  nameWithType: EventHubClient.Create
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.Create
- uid: Microsoft.ServiceBus.ServiceBusConnectionStringBuilder.EntityPath
  commentId: P:Microsoft.ServiceBus.ServiceBusConnectionStringBuilder.EntityPath
- uid: Microsoft.ServiceBus.ServiceBusConnectionStringBuilder
  commentId: T:Microsoft.ServiceBus.ServiceBusConnectionStringBuilder
  isExternal: false
  name: ServiceBusConnectionStringBuilder
  nameWithType: ServiceBusConnectionStringBuilder
  fullName: Microsoft.ServiceBus.ServiceBusConnectionStringBuilder
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.CreateFromConnectionString*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubClient.CreateFromConnectionString
  isExternal: false
  name: CreateFromConnectionString
  nameWithType: EventHubClient.CreateFromConnectionString
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.CreateFromConnectionString
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: Microsoft.ServiceBus.Messaging.EventData
  commentId: T:Microsoft.ServiceBus.Messaging.EventData
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: EventData
  nameWithType: EventData
  fullName: Microsoft.ServiceBus.Messaging.EventData
- uid: Microsoft.ServiceBus.Messaging.EventData.PartitionKey
  commentId: P:Microsoft.ServiceBus.Messaging.EventData.PartitionKey
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.Send*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubClient.Send
  isExternal: false
  name: Send
  nameWithType: EventHubClient.Send
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.Send
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.SendAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubClient.SendAsync
  isExternal: false
  name: SendAsync
  nameWithType: EventHubClient.SendAsync
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.SendAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.SendBatch*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubClient.SendBatch
  isExternal: false
  name: SendBatch
  nameWithType: EventHubClient.SendBatch
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.SendBatch
- uid: Microsoft.ServiceBus.Messaging.MessageSizeExceededException
  commentId: T:Microsoft.ServiceBus.Messaging.MessageSizeExceededException
  isExternal: false
  name: MessageSizeExceededException
  nameWithType: MessageSizeExceededException
  fullName: Microsoft.ServiceBus.Messaging.MessageSizeExceededException
- uid: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.EventData}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.EventData}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<EventData>
  nameWithType: IEnumerable<EventData>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.EventData>
  nameWithType.vb: IEnumerable(Of EventData)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.EventData)
  name.vb: IEnumerable(Of EventData)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.EventData
    name: EventData
    nameWithType: EventData
    fullName: Microsoft.ServiceBus.Messaging.EventData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.EventData
    name: EventData
    nameWithType: EventData
    fullName: Microsoft.ServiceBus.Messaging.EventData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.SendBatchAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubClient.SendBatchAsync
  isExternal: false
  name: SendBatchAsync
  nameWithType: EventHubClient.SendBatchAsync
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.SendBatchAsync
- uid: Microsoft.ServiceBus.Messaging.EventHubSender
  commentId: T:Microsoft.ServiceBus.Messaging.EventHubSender
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: EventHubSender
  nameWithType: EventHubSender
  fullName: Microsoft.ServiceBus.Messaging.EventHubSender
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.CreateSender*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubClient.CreateSender
  isExternal: false
  name: CreateSender
  nameWithType: EventHubClient.CreateSender
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.CreateSender
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.CreateSender(System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubClient.CreateSender(System.String)
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.CreateSenderAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubClient.CreateSenderAsync
  isExternal: false
  name: CreateSenderAsync
  nameWithType: EventHubClient.CreateSenderAsync
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.CreateSenderAsync
- uid: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.EventHubSender}
  commentId: T:System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.EventHubSender}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<EventHubSender>
  nameWithType: Task<EventHubSender>
  fullName: System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.EventHubSender>
  nameWithType.vb: Task(Of EventHubSender)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.ServiceBus.Messaging.EventHubSender)
  name.vb: Task(Of EventHubSender)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.EventHubSender
    name: EventHubSender
    nameWithType: EventHubSender
    fullName: Microsoft.ServiceBus.Messaging.EventHubSender
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.EventHubSender
    name: EventHubSender
    nameWithType: EventHubSender
    fullName: Microsoft.ServiceBus.Messaging.EventHubSender
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.CreatePartitionedSender*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubClient.CreatePartitionedSender
  isExternal: false
  name: CreatePartitionedSender
  nameWithType: EventHubClient.CreatePartitionedSender
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.CreatePartitionedSender
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.CreatePartitionedSender(System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubClient.CreatePartitionedSender(System.String)
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.CreatePartitionedSenderAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubClient.CreatePartitionedSenderAsync
  isExternal: false
  name: CreatePartitionedSenderAsync
  nameWithType: EventHubClient.CreatePartitionedSenderAsync
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.CreatePartitionedSenderAsync
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.GetRuntimeInformation
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubClient.GetRuntimeInformation
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.GetRuntimeInformationAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubClient.GetRuntimeInformationAsync
  isExternal: false
  name: GetRuntimeInformationAsync
  nameWithType: EventHubClient.GetRuntimeInformationAsync
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.GetRuntimeInformationAsync
- uid: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.EventHubRuntimeInformation}
  commentId: T:System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.EventHubRuntimeInformation}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<EventHubRuntimeInformation>
  nameWithType: Task<EventHubRuntimeInformation>
  fullName: System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.EventHubRuntimeInformation>
  nameWithType.vb: Task(Of EventHubRuntimeInformation)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.ServiceBus.Messaging.EventHubRuntimeInformation)
  name.vb: Task(Of EventHubRuntimeInformation)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.EventHubRuntimeInformation
    name: EventHubRuntimeInformation
    nameWithType: EventHubRuntimeInformation
    fullName: Microsoft.ServiceBus.Messaging.EventHubRuntimeInformation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.EventHubRuntimeInformation
    name: EventHubRuntimeInformation
    nameWithType: EventHubRuntimeInformation
    fullName: Microsoft.ServiceBus.Messaging.EventHubRuntimeInformation
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.EventHubReceiver
  commentId: T:Microsoft.ServiceBus.Messaging.EventHubReceiver
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: EventHubReceiver
  nameWithType: EventHubReceiver
  fullName: Microsoft.ServiceBus.Messaging.EventHubReceiver
- uid: Microsoft.ServiceBus.Messaging.EventHubRuntimeInformation
  commentId: T:Microsoft.ServiceBus.Messaging.EventHubRuntimeInformation
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: EventHubRuntimeInformation
  nameWithType: EventHubRuntimeInformation
  fullName: Microsoft.ServiceBus.Messaging.EventHubRuntimeInformation
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.GetRuntimeInformation*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubClient.GetRuntimeInformation
  isExternal: false
  name: GetRuntimeInformation
  nameWithType: EventHubClient.GetRuntimeInformation
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.GetRuntimeInformation
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.GetPartitionRuntimeInformation(System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.EventHubClient.GetPartitionRuntimeInformation(System.String)
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.GetPartitionRuntimeInformationAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubClient.GetPartitionRuntimeInformationAsync
  isExternal: false
  name: GetPartitionRuntimeInformationAsync
  nameWithType: EventHubClient.GetPartitionRuntimeInformationAsync
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.GetPartitionRuntimeInformationAsync
- uid: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.PartitionRuntimeInformation}
  commentId: T:System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.PartitionRuntimeInformation}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<PartitionRuntimeInformation>
  nameWithType: Task<PartitionRuntimeInformation>
  fullName: System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.PartitionRuntimeInformation>
  nameWithType.vb: Task(Of PartitionRuntimeInformation)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.ServiceBus.Messaging.PartitionRuntimeInformation)
  name.vb: Task(Of PartitionRuntimeInformation)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.PartitionRuntimeInformation
    name: PartitionRuntimeInformation
    nameWithType: PartitionRuntimeInformation
    fullName: Microsoft.ServiceBus.Messaging.PartitionRuntimeInformation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.PartitionRuntimeInformation
    name: PartitionRuntimeInformation
    nameWithType: PartitionRuntimeInformation
    fullName: Microsoft.ServiceBus.Messaging.PartitionRuntimeInformation
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.PartitionRuntimeInformation
  commentId: T:Microsoft.ServiceBus.Messaging.PartitionRuntimeInformation
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: PartitionRuntimeInformation
  nameWithType: PartitionRuntimeInformation
  fullName: Microsoft.ServiceBus.Messaging.PartitionRuntimeInformation
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.GetPartitionRuntimeInformation*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubClient.GetPartitionRuntimeInformation
  isExternal: false
  name: GetPartitionRuntimeInformation
  nameWithType: EventHubClient.GetPartitionRuntimeInformation
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.GetPartitionRuntimeInformation
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.GetDefaultConsumerGroup*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubClient.GetDefaultConsumerGroup
  isExternal: false
  name: GetDefaultConsumerGroup
  nameWithType: EventHubClient.GetDefaultConsumerGroup
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.GetDefaultConsumerGroup
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.GetConsumerGroup*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubClient.GetConsumerGroup
  isExternal: false
  name: GetConsumerGroup
  nameWithType: EventHubClient.GetConsumerGroup
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.GetConsumerGroup
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: OnAbort()
  nameWithType: ClientEntity.OnAbort()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
    name: OnAbort
    nameWithType: ClientEntity.OnAbort
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
    name: OnAbort
    nameWithType: ClientEntity.OnAbort
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.OnAbort*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubClient.OnAbort
  isExternal: false
  name: OnAbort
  nameWithType: EventHubClient.OnAbort
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.OnAbort
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose(System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnClose(System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: true
  name: OnClose(TimeSpan)
  nameWithType: ClientEntity.OnClose(TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose(System.TimeSpan)
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose(System.TimeSpan)
    name: OnClose
    nameWithType: ClientEntity.OnClose
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose(System.TimeSpan)
    name: OnClose
    nameWithType: ClientEntity.OnClose
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.OnClose*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubClient.OnClose
  isExternal: false
  name: OnClose
  nameWithType: EventHubClient.OnClose
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.OnClose
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.AsyncCallback
  commentId: T:System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.IAsyncResult
  commentId: T:System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: true
  name: OnBeginClose(TimeSpan, AsyncCallback, Object)
  nameWithType: ClientEntity.OnBeginClose(TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose(System.TimeSpan, System.AsyncCallback, System.Object)
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
    name: OnBeginClose
    nameWithType: ClientEntity.OnBeginClose
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
    name: OnBeginClose
    nameWithType: ClientEntity.OnBeginClose
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.OnBeginClose*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubClient.OnBeginClose
  isExternal: false
  name: OnBeginClose
  nameWithType: EventHubClient.OnBeginClose
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.OnBeginClose
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose(System.IAsyncResult)
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: true
  name: OnEndClose(IAsyncResult)
  nameWithType: ClientEntity.OnEndClose(IAsyncResult)
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose(System.IAsyncResult)
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose(System.IAsyncResult)
    name: OnEndClose
    nameWithType: ClientEntity.OnEndClose
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose(System.IAsyncResult)
    name: OnEndClose
    nameWithType: ClientEntity.OnEndClose
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.OnEndClose*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubClient.OnEndClose
  isExternal: false
  name: OnEndClose
  nameWithType: EventHubClient.OnEndClose
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.OnEndClose
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: true
  name: OnBeginOpen(TimeSpan, AsyncCallback, Object)
  nameWithType: ClientEntity.OnBeginOpen(TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen(System.TimeSpan, System.AsyncCallback, System.Object)
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
    name: OnBeginOpen
    nameWithType: ClientEntity.OnBeginOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
    name: OnBeginOpen
    nameWithType: ClientEntity.OnBeginOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.OnBeginOpen*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubClient.OnBeginOpen
  isExternal: false
  name: OnBeginOpen
  nameWithType: EventHubClient.OnBeginOpen
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.OnBeginOpen
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen(System.IAsyncResult)
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: true
  name: OnEndOpen(IAsyncResult)
  nameWithType: ClientEntity.OnEndOpen(IAsyncResult)
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen(System.IAsyncResult)
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen(System.IAsyncResult)
    name: OnEndOpen
    nameWithType: ClientEntity.OnEndOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen(System.IAsyncResult)
    name: OnEndOpen
    nameWithType: ClientEntity.OnEndOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.EventHubClient.OnEndOpen*
  commentId: Overload:Microsoft.ServiceBus.Messaging.EventHubClient.OnEndOpen
  isExternal: false
  name: OnEndOpen
  nameWithType: EventHubClient.OnEndOpen
  fullName: Microsoft.ServiceBus.Messaging.EventHubClient.OnEndOpen
- uid: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.MessageSender}
  commentId: T:System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.MessageSender}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<MessageSender>
  nameWithType: Task<MessageSender>
  fullName: System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.MessageSender>
  nameWithType.vb: Task(Of MessageSender)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.ServiceBus.Messaging.MessageSender)
  name.vb: Task(Of MessageSender)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.MessageSender
    name: MessageSender
    nameWithType: MessageSender
    fullName: Microsoft.ServiceBus.Messaging.MessageSender
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.MessageSender
    name: MessageSender
    nameWithType: MessageSender
    fullName: Microsoft.ServiceBus.Messaging.MessageSender
  - name: )
    nameWithType: )
    fullName: )
