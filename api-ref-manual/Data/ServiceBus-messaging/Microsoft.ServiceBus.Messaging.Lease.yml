### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceBus.Messaging.Lease
  commentId: T:Microsoft.ServiceBus.Messaging.Lease
  id: Lease
  parent: Microsoft.ServiceBus.Messaging
  children:
  - Microsoft.ServiceBus.Messaging.Lease.#ctor
  - Microsoft.ServiceBus.Messaging.Lease.#ctor(Microsoft.ServiceBus.Messaging.Lease)
  - Microsoft.ServiceBus.Messaging.Lease.Epoch
  - Microsoft.ServiceBus.Messaging.Lease.Equals(System.Object)
  - Microsoft.ServiceBus.Messaging.Lease.GetHashCode
  - Microsoft.ServiceBus.Messaging.Lease.IsExpired
  - Microsoft.ServiceBus.Messaging.Lease.Offset
  - Microsoft.ServiceBus.Messaging.Lease.Owner
  - Microsoft.ServiceBus.Messaging.Lease.PartitionId
  - Microsoft.ServiceBus.Messaging.Lease.SequenceNumber
  - Microsoft.ServiceBus.Messaging.Lease.Token
  langs:
  - csharp
  - vb
  name: Lease
  nameWithType: Lease
  fullName: Microsoft.ServiceBus.Messaging.Lease
  type: Class
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/Lease.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Lease
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/Lease.cs
    startLine: 7
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Contains partition ownership information.
  example: []
  syntax:
    content: public class Lease
    content.vb: Public Class Lease
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.ServiceBus.Messaging.Lease.#ctor
  commentId: M:Microsoft.ServiceBus.Messaging.Lease.#ctor
  id: '#ctor'
  parent: Microsoft.ServiceBus.Messaging.Lease
  langs:
  - csharp
  - vb
  name: Lease()
  nameWithType: Lease.Lease()
  fullName: Microsoft.ServiceBus.Messaging.Lease.Lease()
  type: Constructor
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/Lease.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: .ctor
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/Lease.cs
    startLine: 10
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Initializes a new instance of the <xref href="Microsoft.ServiceBus.Messaging.Lease" data-throw-if-not-resolved="false"></xref> class.
  example: []
  syntax:
    content: public Lease()
    content.vb: Public Sub New
  overload: Microsoft.ServiceBus.Messaging.Lease.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.Lease.#ctor(Microsoft.ServiceBus.Messaging.Lease)
  commentId: M:Microsoft.ServiceBus.Messaging.Lease.#ctor(Microsoft.ServiceBus.Messaging.Lease)
  id: '#ctor(Microsoft.ServiceBus.Messaging.Lease)'
  parent: Microsoft.ServiceBus.Messaging.Lease
  langs:
  - csharp
  - vb
  name: Lease(Lease)
  nameWithType: Lease.Lease(Lease)
  fullName: Microsoft.ServiceBus.Messaging.Lease.Lease(Microsoft.ServiceBus.Messaging.Lease)
  type: Constructor
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/Lease.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: .ctor
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/Lease.cs
    startLine: 18
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Initializes a new instance of the \n<xref href=\"Microsoft.ServiceBus.Messaging.Lease\" data-throw-if-not-resolved=\"false\"></xref> class with the specified \n<xref href=\"Microsoft.ServiceBus.Messaging.Lease.%23ctor(Microsoft.ServiceBus.Messaging.Lease)\" data-throw-if-not-resolved=\"false\"></xref> value as reference."
  example: []
  syntax:
    content: public Lease(Lease source)
    content.vb: Public Sub New(source As Lease)
    parameters:
    - id: source
      type: Microsoft.ServiceBus.Messaging.Lease
      description: The specified <xref href="Microsoft.ServiceBus.Messaging.Lease.%23ctor(Microsoft.ServiceBus.Messaging.Lease)" data-throw-if-not-resolved="false"></xref> instance where its property values will be copied from.
  overload: Microsoft.ServiceBus.Messaging.Lease.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.Lease.PartitionId
  commentId: P:Microsoft.ServiceBus.Messaging.Lease.PartitionId
  id: PartitionId
  parent: Microsoft.ServiceBus.Messaging.Lease
  langs:
  - csharp
  - vb
  name: PartitionId
  nameWithType: Lease.PartitionId
  fullName: Microsoft.ServiceBus.Messaging.Lease.PartitionId
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/Lease.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: PartitionId
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/Lease.cs
    startLine: 30
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets the ID of the partition to which this lease belongs.
  example: []
  syntax:
    content: public string PartitionId { get; set; }
    content.vb: Public Property PartitionId As String
    parameters: []
    return:
      type: System.String
      description: The partition identifier.
  overload: Microsoft.ServiceBus.Messaging.Lease.PartitionId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.Lease.Owner
  commentId: P:Microsoft.ServiceBus.Messaging.Lease.Owner
  id: Owner
  parent: Microsoft.ServiceBus.Messaging.Lease
  langs:
  - csharp
  - vb
  name: Owner
  nameWithType: Lease.Owner
  fullName: Microsoft.ServiceBus.Messaging.Lease.Owner
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/Lease.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Owner
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/Lease.cs
    startLine: 34
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets or sets the host owner for the partition.
  example: []
  syntax:
    content: public string Owner { get; set; }
    content.vb: Public Property Owner As String
    parameters: []
    return:
      type: System.String
      description: The host owner of the partition.
  overload: Microsoft.ServiceBus.Messaging.Lease.Owner*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.Lease.Token
  commentId: P:Microsoft.ServiceBus.Messaging.Lease.Token
  id: Token
  parent: Microsoft.ServiceBus.Messaging.Lease
  langs:
  - csharp
  - vb
  name: Token
  nameWithType: Lease.Token
  fullName: Microsoft.ServiceBus.Messaging.Lease.Token
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/Lease.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Token
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/Lease.cs
    startLine: 39
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Gets or sets the lease token that manages concurrency between hosts. You can use this token to guarantee single access to any resource needed by the \n<xref href=\"Microsoft.ServiceBus.Messaging.IEventProcessor\" data-throw-if-not-resolved=\"false\"></xref> object."
  example: []
  syntax:
    content: public string Token { get; set; }
    content.vb: Public Property Token As String
    parameters: []
    return:
      type: System.String
      description: The lease token.
  overload: Microsoft.ServiceBus.Messaging.Lease.Token*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.Lease.Epoch
  commentId: P:Microsoft.ServiceBus.Messaging.Lease.Epoch
  id: Epoch
  parent: Microsoft.ServiceBus.Messaging.Lease
  langs:
  - csharp
  - vb
  name: Epoch
  nameWithType: Lease.Epoch
  fullName: Microsoft.ServiceBus.Messaging.Lease.Epoch
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/Lease.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Epoch
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/Lease.cs
    startLine: 44
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Gets or sets the epoch year of the lease, which is a value \nyou can use to determine the most recent owner of a partition between competing nodes."
  example: []
  syntax:
    content: public long Epoch { get; set; }
    content.vb: Public Property Epoch As Long
    parameters: []
    return:
      type: System.Int64
      description: The epoch year of the lease.
  overload: Microsoft.ServiceBus.Messaging.Lease.Epoch*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.Lease.Offset
  commentId: P:Microsoft.ServiceBus.Messaging.Lease.Offset
  id: Offset
  parent: Microsoft.ServiceBus.Messaging.Lease
  langs:
  - csharp
  - vb
  name: Offset
  nameWithType: Lease.Offset
  fullName: Microsoft.ServiceBus.Messaging.Lease.Offset
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/Lease.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Offset
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/Lease.cs
    startLine: 48
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets or sets the current value for the offset in the stream.
  example: []
  syntax:
    content: public string Offset { get; set; }
    content.vb: Public Property Offset As String
    parameters: []
    return:
      type: System.String
      description: The lease offset.
  overload: Microsoft.ServiceBus.Messaging.Lease.Offset*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.Lease.SequenceNumber
  commentId: P:Microsoft.ServiceBus.Messaging.Lease.SequenceNumber
  id: SequenceNumber
  parent: Microsoft.ServiceBus.Messaging.Lease
  langs:
  - csharp
  - vb
  name: SequenceNumber
  nameWithType: Lease.SequenceNumber
  fullName: Microsoft.ServiceBus.Messaging.Lease.SequenceNumber
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/Lease.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: SequenceNumber
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/Lease.cs
    startLine: 52
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets or sets the last checkpointed sequence number in the stream.
  example: []
  syntax:
    content: public long SequenceNumber { get; set; }
    content.vb: Public Property SequenceNumber As Long
    parameters: []
    return:
      type: System.Int64
      description: Returns <xref href="System.Int64" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceBus.Messaging.Lease.SequenceNumber*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.Lease.IsExpired
  commentId: M:Microsoft.ServiceBus.Messaging.Lease.IsExpired
  id: IsExpired
  parent: Microsoft.ServiceBus.Messaging.Lease
  langs:
  - csharp
  - vb
  name: IsExpired()
  nameWithType: Lease.IsExpired()
  fullName: Microsoft.ServiceBus.Messaging.Lease.IsExpired()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/Lease.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: IsExpired
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/Lease.cs
    startLine: 56
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Determines whether the lease is expired.
  example: []
  syntax:
    content: public virtual bool IsExpired()
    content.vb: Public Overridable Function IsExpired As Boolean
    return:
      type: System.Boolean
      description: true if the lease is expired; otherwise, false.
  overload: Microsoft.ServiceBus.Messaging.Lease.IsExpired*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.ServiceBus.Messaging.Lease.Equals(System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.Lease.Equals(System.Object)
  id: Equals(System.Object)
  parent: Microsoft.ServiceBus.Messaging.Lease
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Lease.Equals(Object)
  fullName: Microsoft.ServiceBus.Messaging.Lease.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/Lease.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Equals
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/Lease.cs
    startLine: 64
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Determines whether this instance is equal to the specified object.
  example: []
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare.
    return:
      type: System.Boolean
      description: true if this instance is equal to the specified object; otherwise, false.
  overridden: System.Object.Equals(System.Object)
  overload: Microsoft.ServiceBus.Messaging.Lease.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.ServiceBus.Messaging.Lease.GetHashCode
  commentId: M:Microsoft.ServiceBus.Messaging.Lease.GetHashCode
  id: GetHashCode
  parent: Microsoft.ServiceBus.Messaging.Lease
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Lease.GetHashCode()
  fullName: Microsoft.ServiceBus.Messaging.Lease.GetHashCode()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/Lease.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: GetHashCode
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/Lease.cs
    startLine: 82
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Returns the hash code of the current instance.
  example: []
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: The hash code of the current instance.
  overridden: System.Object.GetHashCode
  overload: Microsoft.ServiceBus.Messaging.Lease.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.ServiceBus.Messaging
  commentId: N:Microsoft.ServiceBus.Messaging
  isExternal: false
  name: Microsoft.ServiceBus.Messaging
  nameWithType: Microsoft.ServiceBus.Messaging
  fullName: Microsoft.ServiceBus.Messaging
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.ServiceBus.Messaging.Lease
  commentId: T:Microsoft.ServiceBus.Messaging.Lease
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: Lease
  nameWithType: Lease
  fullName: Microsoft.ServiceBus.Messaging.Lease
- uid: Microsoft.ServiceBus.Messaging.Lease.#ctor*
  commentId: Overload:Microsoft.ServiceBus.Messaging.Lease.#ctor
  isExternal: false
  name: Lease
  nameWithType: Lease.Lease
  fullName: Microsoft.ServiceBus.Messaging.Lease.Lease
- uid: Microsoft.ServiceBus.Messaging.Lease.#ctor(Microsoft.ServiceBus.Messaging.Lease)
  commentId: M:Microsoft.ServiceBus.Messaging.Lease.#ctor(Microsoft.ServiceBus.Messaging.Lease)
- uid: Microsoft.ServiceBus.Messaging.Lease.PartitionId*
  commentId: Overload:Microsoft.ServiceBus.Messaging.Lease.PartitionId
  isExternal: false
  name: PartitionId
  nameWithType: Lease.PartitionId
  fullName: Microsoft.ServiceBus.Messaging.Lease.PartitionId
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.ServiceBus.Messaging.Lease.Owner*
  commentId: Overload:Microsoft.ServiceBus.Messaging.Lease.Owner
  isExternal: false
  name: Owner
  nameWithType: Lease.Owner
  fullName: Microsoft.ServiceBus.Messaging.Lease.Owner
- uid: Microsoft.ServiceBus.Messaging.IEventProcessor
  commentId: T:Microsoft.ServiceBus.Messaging.IEventProcessor
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: IEventProcessor
  nameWithType: IEventProcessor
  fullName: Microsoft.ServiceBus.Messaging.IEventProcessor
- uid: Microsoft.ServiceBus.Messaging.Lease.Token*
  commentId: Overload:Microsoft.ServiceBus.Messaging.Lease.Token
  isExternal: false
  name: Token
  nameWithType: Lease.Token
  fullName: Microsoft.ServiceBus.Messaging.Lease.Token
- uid: Microsoft.ServiceBus.Messaging.Lease.Epoch*
  commentId: Overload:Microsoft.ServiceBus.Messaging.Lease.Epoch
  isExternal: false
  name: Epoch
  nameWithType: Lease.Epoch
  fullName: Microsoft.ServiceBus.Messaging.Lease.Epoch
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.ServiceBus.Messaging.Lease.Offset*
  commentId: Overload:Microsoft.ServiceBus.Messaging.Lease.Offset
  isExternal: false
  name: Offset
  nameWithType: Lease.Offset
  fullName: Microsoft.ServiceBus.Messaging.Lease.Offset
- uid: Microsoft.ServiceBus.Messaging.Lease.SequenceNumber*
  commentId: Overload:Microsoft.ServiceBus.Messaging.Lease.SequenceNumber
  isExternal: false
  name: SequenceNumber
  nameWithType: Lease.SequenceNumber
  fullName: Microsoft.ServiceBus.Messaging.Lease.SequenceNumber
- uid: Microsoft.ServiceBus.Messaging.Lease.IsExpired*
  commentId: Overload:Microsoft.ServiceBus.Messaging.Lease.IsExpired
  isExternal: false
  name: IsExpired
  nameWithType: Lease.IsExpired
  fullName: Microsoft.ServiceBus.Messaging.Lease.IsExpired
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.Lease.Equals*
  commentId: Overload:Microsoft.ServiceBus.Messaging.Lease.Equals
  isExternal: false
  name: Equals
  nameWithType: Lease.Equals
  fullName: Microsoft.ServiceBus.Messaging.Lease.Equals
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.Lease.GetHashCode*
  commentId: Overload:Microsoft.ServiceBus.Messaging.Lease.GetHashCode
  isExternal: false
  name: GetHashCode
  nameWithType: Lease.GetHashCode
  fullName: Microsoft.ServiceBus.Messaging.Lease.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
