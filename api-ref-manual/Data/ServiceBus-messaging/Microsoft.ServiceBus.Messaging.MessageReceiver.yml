### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver
  commentId: T:Microsoft.ServiceBus.Messaging.MessageReceiver
  id: MessageReceiver
  parent: Microsoft.ServiceBus.Messaging
  children:
  - Microsoft.ServiceBus.Messaging.MessageReceiver.Abandon(System.Guid)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.Abandon(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  - Microsoft.ServiceBus.Messaging.MessageReceiver.AbandonAsync(System.Guid)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.AbandonAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  - Microsoft.ServiceBus.Messaging.MessageReceiver.BatchFlushInterval
  - Microsoft.ServiceBus.Messaging.MessageReceiver.BatchingEnabled
  - Microsoft.ServiceBus.Messaging.MessageReceiver.Complete(System.Guid)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.CompleteAsync(System.Guid)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.CompleteBatch(System.Collections.Generic.IEnumerable{System.Guid})
  - Microsoft.ServiceBus.Messaging.MessageReceiver.CompleteBatchAsync(System.Collections.Generic.IEnumerable{System.Guid})
  - Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetter(System.Guid)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetter(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  - Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetter(System.Guid,System.String,System.String)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetterAsync(System.Guid)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetterAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  - Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetterAsync(System.Guid,System.String,System.String)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.Defer(System.Guid)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.Defer(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  - Microsoft.ServiceBus.Messaging.MessageReceiver.DeferAsync(System.Guid)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.DeferAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  - Microsoft.ServiceBus.Messaging.MessageReceiver.GetLockToken(Microsoft.ServiceBus.Messaging.BrokeredMessage)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.GetLockTokens(System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage})
  - Microsoft.ServiceBus.Messaging.MessageReceiver.GetProperty``1
  - Microsoft.ServiceBus.Messaging.MessageReceiver.LastPeekedSequenceNumber
  - Microsoft.ServiceBus.Messaging.MessageReceiver.Mode
  - Microsoft.ServiceBus.Messaging.MessageReceiver.OffsetInclusive
  - Microsoft.ServiceBus.Messaging.MessageReceiver.OnAbandon(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginAbandon(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.TimeSpan,System.AsyncCallback,System.Object)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginComplete(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}},System.Boolean,System.TimeSpan,System.AsyncCallback,System.Object)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginComplete(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.Boolean,System.TimeSpan,System.AsyncCallback,System.Object)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginDeadLetter(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String,System.Boolean,System.TimeSpan,System.AsyncCallback,System.Object)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginDefer(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.TimeSpan,System.AsyncCallback,System.Object)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginPeek(Microsoft.ServiceBus.Tracing.TrackingContext,System.Int64,System.Int32,System.TimeSpan,System.AsyncCallback,System.Object)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginRenewMessageLocks(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.Boolean,System.TimeSpan,System.AsyncCallback,System.Object)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginTryReceive(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Int64},System.TimeSpan,System.AsyncCallback,System.Object)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginTryReceive(Microsoft.ServiceBus.Tracing.TrackingContext,System.Int32,System.TimeSpan,System.AsyncCallback,System.Object)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginTryReceive2(Microsoft.ServiceBus.Tracing.TrackingContext,System.Int32,System.TimeSpan,System.AsyncCallback,System.Object)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginTryReceiveEventData(Microsoft.ServiceBus.Tracing.TrackingContext,System.Int32,System.TimeSpan,System.AsyncCallback,System.Object)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.OnComplete(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.OnDeadLetter(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String,System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.OnDefer(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndAbandon(System.IAsyncResult)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndComplete(System.IAsyncResult)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndDeadLetter(System.IAsyncResult)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndDefer(System.IAsyncResult)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndPeek(System.IAsyncResult)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndRenewMessageLocks(System.IAsyncResult)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndTryReceive(System.IAsyncResult,System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}@)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndTryReceive2(System.IAsyncResult,System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}@)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndTryReceiveEventData(System.IAsyncResult,System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.EventData}@)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.OnMessage(System.Action{Microsoft.ServiceBus.Messaging.BrokeredMessage},Microsoft.ServiceBus.Messaging.OnMessageOptions)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.OnMessageAsync(System.Func{Microsoft.ServiceBus.Messaging.BrokeredMessage,System.Threading.Tasks.Task},Microsoft.ServiceBus.Messaging.OnMessageOptions)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.OnPeek(Microsoft.ServiceBus.Tracing.TrackingContext,System.Int64,System.Int32,System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.OnRenewMessageLocks(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.OnTryReceive(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Int64},System.TimeSpan,System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}@)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.OnTryReceive(Microsoft.ServiceBus.Tracing.TrackingContext,System.Int32,System.TimeSpan,System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}@)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.Path
  - Microsoft.ServiceBus.Messaging.MessageReceiver.Peek
  - Microsoft.ServiceBus.Messaging.MessageReceiver.Peek(System.Int64)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.PeekAsync
  - Microsoft.ServiceBus.Messaging.MessageReceiver.PeekAsync(System.Int64)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.PeekBatch(System.Int32)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.PeekBatch(System.Int64,System.Int32)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.PeekBatchAsync(System.Int32)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.PeekBatchAsync(System.Int64,System.Int32)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.PrefetchCount
  - Microsoft.ServiceBus.Messaging.MessageReceiver.Receive
  - Microsoft.ServiceBus.Messaging.MessageReceiver.Receive(System.Int64)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.Receive(System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveAsync
  - Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveAsync(System.Int64)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveAsync(System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatch(System.Collections.Generic.IEnumerable{System.Int64})
  - Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatch(System.Int32)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatch(System.Int32,System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatchAsync(System.Collections.Generic.IEnumerable{System.Int64})
  - Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatchAsync(System.Int32)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatchAsync(System.Int32,System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiverStartTime
  - Microsoft.ServiceBus.Messaging.MessageReceiver.StartOffset
  - Microsoft.ServiceBus.Messaging.MessageReceiver.SupportsGetRuntimeEntityDescription
  langs:
  - csharp
  - vb
  name: MessageReceiver
  nameWithType: MessageReceiver
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver
  type: Class
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: MessageReceiver
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 79
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: 'The MessageReceiver class is used to receive messages from the message container and acknowledge them. '
  remarks: "Please note that message delivery mechanism does not provide by default all time reliable message\n         receiving. Service Bus deletes the message once it goes out of the system. For a guaranteed delivery, you \n         can use the PeekLock delivery mode.\n<example>\n<pre><code>//********************************************************************************\n//                             Sending messages to a Queue\n//********************************************************************************\n\n// Create a sender\nMessageSender myMessageSender = myQueueClient.CreateSender(SendMode.Default);\n\n// Send messages\nList&lt;string&gt; Issues = new List&lt;string&gt;();\nforeach (var issue in Issues)\n{\nmyMessageSender.Send(new BrokeredMessage(issue));\n}</code></pre>\n</example>\n<example>\n<pre><code>//********************************************************************************\n//                           Recieving messages from a Queue\n//********************************************************************************\n\n// Create a receiver\nMessageReceiver myMessageReceiver = \nmyQueueClient.CreateReceiver(ReceiveMode.PeekLock);\n\n// Receive messages\nfor (int count = 0; count &lt; Issues.Count; count++)\n{\nvar message = myMessageReceiver.Receive();\nmessage.Complete();\n}</code></pre>         \n</example>\n<example>\n<pre><code>//********************************************************************************\n//                    Receiving messages from a particular session\n//********************************************************************************\n\n// Create subscription client\nSubscriptionClient mySubscriptionClient = factory.CreateSubscriptionClient(mySubscription);\n\n// Create a receiver\nMessageReceiver myMessageReceiver = mySubscriptionClient.AcceptMessageSession(ReceiveMode.PeekLock);\n\n// Receive messages\nfor (int count = 0; count *lt; Issues.Count; count++)\n{\nvar message = myMessageReceiver.Receive();\nmessage.Complete();\n}</code></pre>\n</example>\n"
  example: []
  syntax:
    content: 'public abstract class MessageReceiver : ClientEntity, IMessageClientEntity, ICloseable, IMessageReceiver, IMessageBrowser'
    content.vb: >-
      Public MustInherit Class MessageReceiver
          Inherits ClientEntity
          Implements IMessageClientEntity, ICloseable, IMessageReceiver, IMessageBrowser
  inheritance:
  - System.Object
  - Microsoft.ServiceBus.Messaging.ClientEntity
  derivedClasses:
  - Microsoft.ServiceBus.Messaging.MessageSession
  inheritedMembers:
  - Microsoft.ServiceBus.Messaging.ClientEntity.RetryPolicy
  - Microsoft.ServiceBus.Messaging.ClientEntity.IsClosed
  - Microsoft.ServiceBus.Messaging.ClientEntity.ThisLock
  - Microsoft.ServiceBus.Messaging.ClientEntity.Abort
  - Microsoft.ServiceBus.Messaging.ClientEntity.Close
  - Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
  - Microsoft.ServiceBus.Messaging.ClientEntity.Fault
  - Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen(System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.ClientEntity.OnClose(System.TimeSpan)
  - Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
  - Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
  - Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
  - Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
  - Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
  - Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
  - Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
  - Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
  - Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
  - Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
  - Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen(System.IAsyncResult)
  - Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  - Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose(System.IAsyncResult)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.Path
  commentId: P:Microsoft.ServiceBus.Messaging.MessageReceiver.Path
  id: Path
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: Path
  nameWithType: MessageReceiver.Path
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.Path
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Path
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 112
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: "Gets the path of the queue or topic, relative to the \n<xref href=\"Microsoft.ServiceBus.Messaging.MessagingFactory\" data-throw-if-not-resolved=\"false\"></xref> base address."
  example: []
  syntax:
    content: public abstract string Path { get; }
    content.vb: Public MustOverride ReadOnly Property Path As String
    parameters: []
    return:
      type: System.String
      description: A string representing the path of the queue or topic.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.Path*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.BatchFlushInterval
  commentId: P:Microsoft.ServiceBus.Messaging.MessageReceiver.BatchFlushInterval
  id: BatchFlushInterval
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: BatchFlushInterval
  nameWithType: MessageReceiver.BatchFlushInterval
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.BatchFlushInterval
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: BatchFlushInterval
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 117
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets the batch flush interval.
  remarks: You can set the value of it via SbmpTransportSetting.BatchFlushInterval
  example: []
  syntax:
    content: public virtual TimeSpan BatchFlushInterval { get; }
    content.vb: Public Overridable ReadOnly Property BatchFlushInterval As TimeSpan
    parameters: []
    return:
      type: System.TimeSpan
      description: The batch flush interval. The default value is 20 ms.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.BatchFlushInterval*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.LastPeekedSequenceNumber
  commentId: P:Microsoft.ServiceBus.Messaging.MessageReceiver.LastPeekedSequenceNumber
  id: LastPeekedSequenceNumber
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: LastPeekedSequenceNumber
  nameWithType: MessageReceiver.LastPeekedSequenceNumber
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.LastPeekedSequenceNumber
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: LastPeekedSequenceNumber
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 133
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets or sets the sequence number of the message last peeked.
  example: []
  syntax:
    content: public virtual long LastPeekedSequenceNumber { get; }
    content.vb: Public Overridable ReadOnly Property LastPeekedSequenceNumber As Long
    parameters: []
    return:
      type: System.Int64
      description: The sequence number of the message last peeked.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.LastPeekedSequenceNumber*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.Mode
  commentId: P:Microsoft.ServiceBus.Messaging.MessageReceiver.Mode
  id: Mode
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: Mode
  nameWithType: MessageReceiver.Mode
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.Mode
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Mode
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 156
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets the message receive mode.
  example: []
  syntax:
    content: public ReceiveMode Mode { get; protected set; }
    content.vb: Public Property Mode As ReceiveMode
    parameters: []
    return:
      type: Microsoft.ServiceBus.Messaging.ReceiveMode
      description: The message receive mode.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.Mode*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiverStartTime
  commentId: P:Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiverStartTime
  id: ReceiverStartTime
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: ReceiverStartTime
  nameWithType: MessageReceiver.ReceiverStartTime
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiverStartTime
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ReceiverStartTime
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 170
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets or sets the start time of the receiver.
  example: []
  syntax:
    content: protected virtual DateTime? ReceiverStartTime { get; set; }
    content.vb: Protected Overridable Property ReceiverStartTime As Date?
    parameters: []
    return:
      type: System.Nullable{System.DateTime}
      description: The start time of the receiver.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiverStartTime*
  modifiers.csharp:
  - protected
  - virtual
  - get
  - set
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OffsetInclusive
  commentId: P:Microsoft.ServiceBus.Messaging.MessageReceiver.OffsetInclusive
  id: OffsetInclusive
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: OffsetInclusive
  nameWithType: MessageReceiver.OffsetInclusive
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OffsetInclusive
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OffsetInclusive
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 173
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: ''
  example: []
  syntax:
    content: protected virtual bool OffsetInclusive { get; set; }
    content.vb: Protected Overridable Property OffsetInclusive As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.OffsetInclusive*
  modifiers.csharp:
  - protected
  - virtual
  - get
  - set
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.StartOffset
  commentId: P:Microsoft.ServiceBus.Messaging.MessageReceiver.StartOffset
  id: StartOffset
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: StartOffset
  nameWithType: MessageReceiver.StartOffset
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.StartOffset
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: StartOffset
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 177
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets or sets the starting point of the offset.
  example: []
  syntax:
    content: protected virtual string StartOffset { get; set; }
    content.vb: Protected Overridable Property StartOffset As String
    parameters: []
    return:
      type: System.String
      description: The starting point of the offset.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.StartOffset*
  modifiers.csharp:
  - protected
  - virtual
  - get
  - set
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.SupportsGetRuntimeEntityDescription
  commentId: P:Microsoft.ServiceBus.Messaging.MessageReceiver.SupportsGetRuntimeEntityDescription
  id: SupportsGetRuntimeEntityDescription
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: SupportsGetRuntimeEntityDescription
  nameWithType: MessageReceiver.SupportsGetRuntimeEntityDescription
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.SupportsGetRuntimeEntityDescription
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: SupportsGetRuntimeEntityDescription
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 180
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: ''
  example: []
  syntax:
    content: protected abstract bool SupportsGetRuntimeEntityDescription { get; }
    content.vb: Protected MustOverride ReadOnly Property SupportsGetRuntimeEntityDescription As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.SupportsGetRuntimeEntityDescription*
  modifiers.csharp:
  - protected
  - abstract
  - get
  modifiers.vb:
  - Protected
  - MustOverride
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.BatchingEnabled
  commentId: P:Microsoft.ServiceBus.Messaging.MessageReceiver.BatchingEnabled
  id: BatchingEnabled
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: BatchingEnabled
  nameWithType: MessageReceiver.BatchingEnabled
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.BatchingEnabled
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: BatchingEnabled
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 190
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets a value indicating whether the batching is enabled.
  example: []
  syntax:
    content: protected bool BatchingEnabled { get; }
    content.vb: Protected ReadOnly Property BatchingEnabled As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if batching is enabled; otherwise, false.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.BatchingEnabled*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.PrefetchCount
  commentId: P:Microsoft.ServiceBus.Messaging.MessageReceiver.PrefetchCount
  id: PrefetchCount
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: PrefetchCount
  nameWithType: MessageReceiver.PrefetchCount
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.PrefetchCount
  type: Property
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: PrefetchCount
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 198
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets or sets the number of messages that the message receiver can simultaneously request.
  remarks: 'Takes effect on the next receive call to the server. '
  example: []
  syntax:
    content: public virtual int PrefetchCount { get; set; }
    content.vb: Public Overridable Property PrefetchCount As Integer
    parameters: []
    return:
      type: System.Int32
      description: The number of messages that the message receiver can simultaneously request.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.PrefetchCount*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnMessage(System.Action{Microsoft.ServiceBus.Messaging.BrokeredMessage},Microsoft.ServiceBus.Messaging.OnMessageOptions)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnMessage(System.Action{Microsoft.ServiceBus.Messaging.BrokeredMessage},Microsoft.ServiceBus.Messaging.OnMessageOptions)
  id: OnMessage(System.Action{Microsoft.ServiceBus.Messaging.BrokeredMessage},Microsoft.ServiceBus.Messaging.OnMessageOptions)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: OnMessage(Action<BrokeredMessage>, OnMessageOptions)
  nameWithType: MessageReceiver.OnMessage(Action<BrokeredMessage>, OnMessageOptions)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnMessage(System.Action<Microsoft.ServiceBus.Messaging.BrokeredMessage>, Microsoft.ServiceBus.Messaging.OnMessageOptions)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnMessage
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 276
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Processes a message in an event-driven message pump.
  example: []
  syntax:
    content: public void OnMessage(Action<BrokeredMessage> callback, OnMessageOptions options)
    content.vb: Public Sub OnMessage(callback As Action(Of BrokeredMessage), options As OnMessageOptions)
    parameters:
    - id: callback
      type: System.Action{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: The method to invoke when the operation is complete.
    - id: options
      type: Microsoft.ServiceBus.Messaging.OnMessageOptions
      description: "Specifies the \n<xref href=\"Microsoft.ServiceBus.Messaging.OnMessageOptions\" data-throw-if-not-resolved=\"false\"></xref>options with which to instantiate the message pump."
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.OnMessage*
  nameWithType.vb: MessageReceiver.OnMessage(Action(Of BrokeredMessage), OnMessageOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.MessageReceiver.OnMessage(System.Action(Of Microsoft.ServiceBus.Messaging.BrokeredMessage), Microsoft.ServiceBus.Messaging.OnMessageOptions)
  name.vb: OnMessage(Action(Of BrokeredMessage), OnMessageOptions)
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnMessageAsync(System.Func{Microsoft.ServiceBus.Messaging.BrokeredMessage,System.Threading.Tasks.Task},Microsoft.ServiceBus.Messaging.OnMessageOptions)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnMessageAsync(System.Func{Microsoft.ServiceBus.Messaging.BrokeredMessage,System.Threading.Tasks.Task},Microsoft.ServiceBus.Messaging.OnMessageOptions)
  id: OnMessageAsync(System.Func{Microsoft.ServiceBus.Messaging.BrokeredMessage,System.Threading.Tasks.Task},Microsoft.ServiceBus.Messaging.OnMessageOptions)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: OnMessageAsync(Func<BrokeredMessage, Task>, OnMessageOptions)
  nameWithType: MessageReceiver.OnMessageAsync(Func<BrokeredMessage, Task>, OnMessageOptions)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnMessageAsync(System.Func<Microsoft.ServiceBus.Messaging.BrokeredMessage, System.Threading.Tasks.Task>, Microsoft.ServiceBus.Messaging.OnMessageOptions)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnMessageAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 285
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously processes a message in an event-driven message pump.
  example: []
  syntax:
    content: public void OnMessageAsync(Func<BrokeredMessage, Task> callback, OnMessageOptions options)
    content.vb: Public Sub OnMessageAsync(callback As Func(Of BrokeredMessage, Task), options As OnMessageOptions)
    parameters:
    - id: callback
      type: System.Func{Microsoft.ServiceBus.Messaging.BrokeredMessage,System.Threading.Tasks.Task}
      description: The method to invoke when the operation is complete.
    - id: options
      type: Microsoft.ServiceBus.Messaging.OnMessageOptions
      description: "Specifies the \n<xref href=\"Microsoft.ServiceBus.Messaging.OnMessageOptions\" data-throw-if-not-resolved=\"false\"></xref>options with which to instantiate the message pump."
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.OnMessageAsync*
  nameWithType.vb: MessageReceiver.OnMessageAsync(Func(Of BrokeredMessage, Task), OnMessageOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.MessageReceiver.OnMessageAsync(System.Func(Of Microsoft.ServiceBus.Messaging.BrokeredMessage, System.Threading.Tasks.Task), Microsoft.ServiceBus.Messaging.OnMessageOptions)
  name.vb: OnMessageAsync(Func(Of BrokeredMessage, Task), OnMessageOptions)
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.Abandon(System.Guid)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.Abandon(System.Guid)
  id: Abandon(System.Guid)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: Abandon(Guid)
  nameWithType: MessageReceiver.Abandon(Guid)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.Abandon(System.Guid)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Abandon
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 297
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Discards the message and relinquishes the message lock ownership.
  remarks: "When the message receiver fails to get the message from the queue/topic, this method should be called. \n         The Service Bus will increment the delivery count of the message. \n         The message receiver now can either attempt to receive the message again or move it to the dead-letter queue."
  example: []
  syntax:
    content: public void Abandon(Guid lockToken)
    content.vb: Public Sub Abandon(lockToken As Guid)
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance to abandon.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.Abandon*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.Abandon(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.Abandon(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: Abandon(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: Abandon(Guid, IDictionary<String, Object>)
  nameWithType: MessageReceiver.Abandon(Guid, IDictionary<String, Object>)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.Abandon(System.Guid, System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Abandon
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 305
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Discards the message and relinquishes the message lock ownership.
  example: []
  syntax:
    content: public void Abandon(Guid lockToken, IDictionary<string, object> propertiesToModify)
    content.vb: Public Sub Abandon(lockToken As Guid, propertiesToModify As IDictionary(Of String, Object))
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token.
    - id: propertiesToModify
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: The properties to modify.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.Abandon*
  nameWithType.vb: MessageReceiver.Abandon(Guid, IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.MessageReceiver.Abandon(System.Guid, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: Abandon(Guid, IDictionary(Of String, Object))
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.AbandonAsync(System.Guid)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.AbandonAsync(System.Guid)
  id: AbandonAsync(System.Guid)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: AbandonAsync(Guid)
  nameWithType: MessageReceiver.AbandonAsync(Guid)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.AbandonAsync(System.Guid)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: AbandonAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 343
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously discards the message and relinquishes the message lock ownership.
  example: []
  syntax:
    content: public Task AbandonAsync(Guid lockToken)
    content.vb: Public Function AbandonAsync(lockToken As Guid) As Task
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance to abandon.
    return:
      type: System.Threading.Tasks.Task
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.AbandonAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.AbandonAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.AbandonAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: AbandonAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: AbandonAsync(Guid, IDictionary<String, Object>)
  nameWithType: MessageReceiver.AbandonAsync(Guid, IDictionary<String, Object>)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.AbandonAsync(System.Guid, System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: AbandonAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 361
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously discards the message and relinquishes the message lock ownership.
  example: []
  syntax:
    content: public Task AbandonAsync(Guid lockToken, IDictionary<string, object> propertiesToModify)
    content.vb: Public Function AbandonAsync(lockToken As Guid, propertiesToModify As IDictionary(Of String, Object)) As Task
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token.
    - id: propertiesToModify
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: The properties to modify.
    return:
      type: System.Threading.Tasks.Task
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.AbandonAsync*
  nameWithType.vb: MessageReceiver.AbandonAsync(Guid, IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.MessageReceiver.AbandonAsync(System.Guid, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: AbandonAsync(Guid, IDictionary(Of String, Object))
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.Complete(System.Guid)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.Complete(System.Guid)
  id: Complete(System.Guid)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: Complete(Guid)
  nameWithType: MessageReceiver.Complete(Guid)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.Complete(System.Guid)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Complete
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 472
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: >-
    Completes the receive operation on a message.

    If using AMQP, this operation can only be performed on messages that were received by this receiver.
  remarks: >-
    This method is used as a handshake between the receiver and Service Bus for a guaranteed delivery of the message. If the
              receiver failed before calling this method, the message will be kept in the queue.
  example: []
  syntax:
    content: public void Complete(Guid lockToken)
    content.vb: Public Sub Complete(lockToken As Guid)
    parameters:
    - id: lockToken
      type: System.Guid
      description: "The lock token of the \n<xref href=\"Microsoft.ServiceBus.Messaging.BrokeredMessage\" data-throw-if-not-resolved=\"false\"></xref>. This is only available when a message is received in peek-lock mode. The lock token is used internally to complete or abandon a message."
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.Complete*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.CompleteAsync(System.Guid)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.CompleteAsync(System.Guid)
  id: CompleteAsync(System.Guid)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: CompleteAsync(Guid)
  nameWithType: MessageReceiver.CompleteAsync(Guid)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.CompleteAsync(System.Guid)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CompleteAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 481
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: >-
    Asynchronously completes the receive operation on a message.

    If using AMQP, this operation can only be performed on messages that were received by this receiver.
  example: []
  syntax:
    content: public Task CompleteAsync(Guid lockToken)
    content.vb: Public Function CompleteAsync(lockToken As Guid) As Task
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token.
    return:
      type: System.Threading.Tasks.Task
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.CompleteAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.CompleteBatch(System.Collections.Generic.IEnumerable{System.Guid})
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.CompleteBatch(System.Collections.Generic.IEnumerable{System.Guid})
  id: CompleteBatch(System.Collections.Generic.IEnumerable{System.Guid})
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: CompleteBatch(IEnumerable<Guid>)
  nameWithType: MessageReceiver.CompleteBatch(IEnumerable<Guid>)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.CompleteBatch(System.Collections.Generic.IEnumerable<System.Guid>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CompleteBatch
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 491
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: >-
    Completes the receive operation on a batch of message.

    If using AMQP, this operation can only be performed on messages that were received by this receiver.
  example: []
  syntax:
    content: public void CompleteBatch(IEnumerable<Guid> lockTokens)
    content.vb: Public Sub CompleteBatch(lockTokens As IEnumerable(Of Guid))
    parameters:
    - id: lockTokens
      type: System.Collections.Generic.IEnumerable{System.Guid}
      description: The lock tokens.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.CompleteBatch*
  nameWithType.vb: MessageReceiver.CompleteBatch(IEnumerable(Of Guid))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.MessageReceiver.CompleteBatch(System.Collections.Generic.IEnumerable(Of System.Guid))
  name.vb: CompleteBatch(IEnumerable(Of Guid))
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.CompleteBatchAsync(System.Collections.Generic.IEnumerable{System.Guid})
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.CompleteBatchAsync(System.Collections.Generic.IEnumerable{System.Guid})
  id: CompleteBatchAsync(System.Collections.Generic.IEnumerable{System.Guid})
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: CompleteBatchAsync(IEnumerable<Guid>)
  nameWithType: MessageReceiver.CompleteBatchAsync(IEnumerable<Guid>)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.CompleteBatchAsync(System.Collections.Generic.IEnumerable<System.Guid>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: CompleteBatchAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 500
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: >-
    Asynchronously completes the receive operation on a batch of message.

    If using AMQP, this operation can only be performed on messages that were received by this receiver.
  example: []
  syntax:
    content: public Task CompleteBatchAsync(IEnumerable<Guid> lockTokens)
    content.vb: Public Function CompleteBatchAsync(lockTokens As IEnumerable(Of Guid)) As Task
    parameters:
    - id: lockTokens
      type: System.Collections.Generic.IEnumerable{System.Guid}
      description: The lock tokens.
    return:
      type: System.Threading.Tasks.Task
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.CompleteBatchAsync*
  nameWithType.vb: MessageReceiver.CompleteBatchAsync(IEnumerable(Of Guid))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.MessageReceiver.CompleteBatchAsync(System.Collections.Generic.IEnumerable(Of System.Guid))
  name.vb: CompleteBatchAsync(IEnumerable(Of Guid))
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.Defer(System.Guid)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.Defer(System.Guid)
  id: Defer(System.Guid)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: Defer(Guid)
  nameWithType: MessageReceiver.Defer(Guid)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.Defer(System.Guid)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Defer
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 731
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Indicates that the receiver wants to defer the processing for the message.
  remarks: 'Before deferring user should set aside the message receipt for later retrieval. '
  example: []
  syntax:
    content: public void Defer(Guid lockToken)
    content.vb: Public Sub Defer(lockToken As Guid)
    parameters:
    - id: lockToken
      type: System.Guid
      description: "The lock token of the \n<xref href=\"Microsoft.ServiceBus.Messaging.BrokeredMessage\" data-throw-if-not-resolved=\"false\"></xref>. This is only available when a message is received in peek-lock mode. The lock token is used internally to complete or abandon a message."
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.Defer*
  exceptions:
  - type: Microsoft.ServiceBus.Common.Fx.Exception
    commentId: P:Microsoft.ServiceBus.Common.Fx.Exception
    description: Receive context is null.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.Defer(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.Defer(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: Defer(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: Defer(Guid, IDictionary<String, Object>)
  nameWithType: MessageReceiver.Defer(Guid, IDictionary<String, Object>)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.Defer(System.Guid, System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Defer
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 739
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Indicates that the receiver wants to defer the processing for the message.
  example: []
  syntax:
    content: public void Defer(Guid lockToken, IDictionary<string, object> propertiesToModify)
    content.vb: Public Sub Defer(lockToken As Guid, propertiesToModify As IDictionary(Of String, Object))
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token.
    - id: propertiesToModify
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: The properties to modify.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.Defer*
  nameWithType.vb: MessageReceiver.Defer(Guid, IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.MessageReceiver.Defer(System.Guid, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: Defer(Guid, IDictionary(Of String, Object))
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.DeferAsync(System.Guid)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.DeferAsync(System.Guid)
  id: DeferAsync(System.Guid)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: DeferAsync(Guid)
  nameWithType: MessageReceiver.DeferAsync(Guid)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.DeferAsync(System.Guid)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: DeferAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 747
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously defer the processing of the message.
  example: []
  syntax:
    content: public Task DeferAsync(Guid lockToken)
    content.vb: Public Function DeferAsync(lockToken As Guid) As Task
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token.
    return:
      type: System.Threading.Tasks.Task
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.DeferAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.DeferAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.DeferAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: DeferAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: DeferAsync(Guid, IDictionary<String, Object>)
  nameWithType: MessageReceiver.DeferAsync(Guid, IDictionary<String, Object>)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.DeferAsync(System.Guid, System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: DeferAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 758
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously defer the processing of the message.
  example: []
  syntax:
    content: public Task DeferAsync(Guid lockToken, IDictionary<string, object> propertiesToModify)
    content.vb: Public Function DeferAsync(lockToken As Guid, propertiesToModify As IDictionary(Of String, Object)) As Task
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token.
    - id: propertiesToModify
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: The properties to modify.
    return:
      type: System.Threading.Tasks.Task
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.DeferAsync*
  nameWithType.vb: MessageReceiver.DeferAsync(Guid, IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.MessageReceiver.DeferAsync(System.Guid, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: DeferAsync(Guid, IDictionary(Of String, Object))
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.Receive
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.Receive
  id: Receive
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: Receive()
  nameWithType: MessageReceiver.Receive()
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.Receive()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Receive
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 976
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Receives a <xref href="Microsoft.ServiceBus.Messaging.BrokeredMessage" data-throw-if-not-resolved="false"></xref> from the current queue or topic.
  remarks: "A Null can be returned by this API if operation exceeded the timeout specified, \nor the operations succeeded but there are no more messages to be received."
  example: []
  syntax:
    content: public BrokeredMessage Receive()
    content.vb: Public Function Receive As BrokeredMessage
    return:
      type: Microsoft.ServiceBus.Messaging.BrokeredMessage
      description: The <xref href="Microsoft.ServiceBus.Messaging.BrokeredMessage" data-throw-if-not-resolved="false"></xref>  that represents the received message.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.Receive*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatch(System.Int32)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatch(System.Int32)
  id: ReceiveBatch(System.Int32)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: ReceiveBatch(Int32)
  nameWithType: MessageReceiver.ReceiveBatch(Int32)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatch(System.Int32)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ReceiveBatch
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 987
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Receives a batch of messages.
  remarks: "A Null can be return by this API if operation exceeded the timeout specified, \nor the operations succeeded but there are no more messages to be received."
  example: []
  syntax:
    content: public IEnumerable<BrokeredMessage> ReceiveBatch(int messageCount)
    content.vb: Public Function ReceiveBatch(messageCount As Integer) As IEnumerable(Of BrokeredMessage)
    parameters:
    - id: messageCount
      type: System.Int32
      description: "The number of messages to return in the batch. As this is an approximation, \nfewer or more messages than <span class=\"paramref\">messageCount</span> may be returned."
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: A batch of messages.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.Receive(System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.Receive(System.TimeSpan)
  id: Receive(System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: Receive(TimeSpan)
  nameWithType: MessageReceiver.Receive(TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.Receive(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Receive
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 997
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Receives a <xref href="Microsoft.ServiceBus.Messaging.BrokeredMessage" data-throw-if-not-resolved="false"></xref> from the current queue or topic.
  remarks: "A Null can be returned by this API if operation exceeded the timeout specified, \nor the operations succeeded but there are no more messages to be received."
  example: []
  syntax:
    content: public BrokeredMessage Receive(TimeSpan serverWaitTime)
    content.vb: Public Function Receive(serverWaitTime As TimeSpan) As BrokeredMessage
    parameters:
    - id: serverWaitTime
      type: System.TimeSpan
      description: The time span the server waits before the operation times out.
    return:
      type: Microsoft.ServiceBus.Messaging.BrokeredMessage
      description: The <xref href="Microsoft.ServiceBus.Messaging.BrokeredMessage" data-throw-if-not-resolved="false"></xref>  that represents the received message.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.Receive*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatch(System.Int32,System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatch(System.Int32,System.TimeSpan)
  id: ReceiveBatch(System.Int32,System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: ReceiveBatch(Int32, TimeSpan)
  nameWithType: MessageReceiver.ReceiveBatch(Int32, TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatch(System.Int32, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ReceiveBatch
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1011
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Receives a batch of messages.
  remarks: "A Null can be returned by this API if operation exceeded the timeout specified, \nor the operations succeeded but there are no more messages to be received."
  example: []
  syntax:
    content: public IEnumerable<BrokeredMessage> ReceiveBatch(int messageCount, TimeSpan serverWaitTime)
    content.vb: Public Function ReceiveBatch(messageCount As Integer, serverWaitTime As TimeSpan) As IEnumerable(Of BrokeredMessage)
    parameters:
    - id: messageCount
      type: System.Int32
      description: "The number of messages to return in the batch. As this is an approximation, \nfewer or more messages than <span class=\"paramref\">messageCount</span> may be returned."
    - id: serverWaitTime
      type: System.TimeSpan
      description: The server wait time.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: A batch of messages.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.Receive(System.Int64)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.Receive(System.Int64)
  id: Receive(System.Int64)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: Receive(Int64)
  nameWithType: MessageReceiver.Receive(Int64)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.Receive(System.Int64)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Receive
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1023
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Receives a message from the current queue or topic.
  remarks: "A Null can be returned by this API if operation exceeded the timeout specified, \nor the operations succeeded but the message with the requested sequenceNumber cannot be located."
  example: []
  syntax:
    content: public BrokeredMessage Receive(long sequenceNumber)
    content.vb: Public Function Receive(sequenceNumber As Long) As BrokeredMessage
    parameters:
    - id: sequenceNumber
      type: System.Int64
      description: The sequence number of the message to receive.
    return:
      type: Microsoft.ServiceBus.Messaging.BrokeredMessage
      description: The <xref href="Microsoft.ServiceBus.Messaging.BrokeredMessage" data-throw-if-not-resolved="false"></xref>  that represents the received message.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.Receive*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveAsync
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveAsync
  id: ReceiveAsync
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: ReceiveAsync()
  nameWithType: MessageReceiver.ReceiveAsync()
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveAsync()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ReceiveAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1036
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously receives a message from the current queue or topic.
  example: []
  syntax:
    content: public Task<BrokeredMessage> ReceiveAsync()
    content.vb: Public Function ReceiveAsync As Task(Of BrokeredMessage)
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveAsync(System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveAsync(System.TimeSpan)
  id: ReceiveAsync(System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: ReceiveAsync(TimeSpan)
  nameWithType: MessageReceiver.ReceiveAsync(TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveAsync(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ReceiveAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1046
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously receives a message from the current queue or topic.
  example: []
  syntax:
    content: public Task<BrokeredMessage> ReceiveAsync(TimeSpan serverWaitTime)
    content.vb: Public Function ReceiveAsync(serverWaitTime As TimeSpan) As Task(Of BrokeredMessage)
    parameters:
    - id: serverWaitTime
      type: System.TimeSpan
      description: The time span the server waits before the operation times out.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveAsync(System.Int64)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveAsync(System.Int64)
  id: ReceiveAsync(System.Int64)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: ReceiveAsync(Int64)
  nameWithType: MessageReceiver.ReceiveAsync(Int64)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveAsync(System.Int64)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ReceiveAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1056
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously receives a message from the current queue or topic.
  example: []
  syntax:
    content: public Task<BrokeredMessage> ReceiveAsync(long sequenceNumber)
    content.vb: Public Function ReceiveAsync(sequenceNumber As Long) As Task(Of BrokeredMessage)
    parameters:
    - id: sequenceNumber
      type: System.Int64
      description: The sequence number of the message to receive.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatch(System.Collections.Generic.IEnumerable{System.Int64})
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatch(System.Collections.Generic.IEnumerable{System.Int64})
  id: ReceiveBatch(System.Collections.Generic.IEnumerable{System.Int64})
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: ReceiveBatch(IEnumerable<Int64>)
  nameWithType: MessageReceiver.ReceiveBatch(IEnumerable<Int64>)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatch(System.Collections.Generic.IEnumerable<System.Int64>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ReceiveBatch
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1068
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Receives a batch of messages.
  remarks: "A Null can be returned by this API if operation exceeded the timeout specified, \nor the operations succeeded but the message with the requested sequenceNumber cannot be located."
  example: []
  syntax:
    content: public IEnumerable<BrokeredMessage> ReceiveBatch(IEnumerable<long> sequenceNumbers)
    content.vb: Public Function ReceiveBatch(sequenceNumbers As IEnumerable(Of Long)) As IEnumerable(Of BrokeredMessage)
    parameters:
    - id: sequenceNumbers
      type: System.Collections.Generic.IEnumerable{System.Int64}
      description: The sequence numbers.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: A batch of messages.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatch*
  nameWithType.vb: MessageReceiver.ReceiveBatch(IEnumerable(Of Int64))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatch(System.Collections.Generic.IEnumerable(Of System.Int64))
  name.vb: ReceiveBatch(IEnumerable(Of Int64))
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatchAsync(System.Int32)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatchAsync(System.Int32)
  id: ReceiveBatchAsync(System.Int32)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: ReceiveBatchAsync(Int32)
  nameWithType: MessageReceiver.ReceiveBatchAsync(Int32)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatchAsync(System.Int32)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ReceiveBatchAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1079
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously receives a batch of messages.
  example: []
  syntax:
    content: public Task<IEnumerable<BrokeredMessage>> ReceiveBatchAsync(int messageCount)
    content.vb: Public Function ReceiveBatchAsync(messageCount As Integer) As Task(Of IEnumerable(Of BrokeredMessage))
    parameters:
    - id: messageCount
      type: System.Int32
      description: "The number of messages to return in the batch. As this is an approximation, \nfewer or more messages than <span class=\"paramref\">messageCount</span> may be returned."
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatchAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatchAsync(System.Int32,System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatchAsync(System.Int32,System.TimeSpan)
  id: ReceiveBatchAsync(System.Int32,System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: ReceiveBatchAsync(Int32, TimeSpan)
  nameWithType: MessageReceiver.ReceiveBatchAsync(Int32, TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatchAsync(System.Int32, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ReceiveBatchAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1091
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously receives a batch of messages.
  example: []
  syntax:
    content: public Task<IEnumerable<BrokeredMessage>> ReceiveBatchAsync(int messageCount, TimeSpan serverWaitTime)
    content.vb: Public Function ReceiveBatchAsync(messageCount As Integer, serverWaitTime As TimeSpan) As Task(Of IEnumerable(Of BrokeredMessage))
    parameters:
    - id: messageCount
      type: System.Int32
      description: "The number of messages to return in the batch. As this is an approximation, \nfewer or more messages than <span class=\"paramref\">messageCount</span> may be returned."
    - id: serverWaitTime
      type: System.TimeSpan
      description: The server wait time.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatchAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatchAsync(System.Collections.Generic.IEnumerable{System.Int64})
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatchAsync(System.Collections.Generic.IEnumerable{System.Int64})
  id: ReceiveBatchAsync(System.Collections.Generic.IEnumerable{System.Int64})
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: ReceiveBatchAsync(IEnumerable<Int64>)
  nameWithType: MessageReceiver.ReceiveBatchAsync(IEnumerable<Int64>)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatchAsync(System.Collections.Generic.IEnumerable<System.Int64>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: ReceiveBatchAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1101
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously receives a batch of messages.
  example: []
  syntax:
    content: public Task<IEnumerable<BrokeredMessage>> ReceiveBatchAsync(IEnumerable<long> sequenceNumbers)
    content.vb: Public Function ReceiveBatchAsync(sequenceNumbers As IEnumerable(Of Long)) As Task(Of IEnumerable(Of BrokeredMessage))
    parameters:
    - id: sequenceNumbers
      type: System.Collections.Generic.IEnumerable{System.Int64}
      description: The sequence numbers.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatchAsync*
  nameWithType.vb: MessageReceiver.ReceiveBatchAsync(IEnumerable(Of Int64))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatchAsync(System.Collections.Generic.IEnumerable(Of System.Int64))
  name.vb: ReceiveBatchAsync(IEnumerable(Of Int64))
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetter(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetter(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: DeadLetter(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: DeadLetter(Guid, IDictionary<String, Object>)
  nameWithType: MessageReceiver.DeadLetter(Guid, IDictionary<String, Object>)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetter(System.Guid, System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: DeadLetter
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1111
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Moves the undelivered message to the dead letter queue.
  example: []
  syntax:
    content: public void DeadLetter(Guid lockToken, IDictionary<string, object> propertiesToModify)
    content.vb: Public Sub DeadLetter(lockToken As Guid, propertiesToModify As IDictionary(Of String, Object))
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance.
    - id: propertiesToModify
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: The properties to modify.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetter*
  nameWithType.vb: MessageReceiver.DeadLetter(Guid, IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetter(System.Guid, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: DeadLetter(Guid, IDictionary(Of String, Object))
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetter(System.Guid,System.String,System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetter(System.Guid,System.String,System.String)
  id: DeadLetter(System.Guid,System.String,System.String)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: DeadLetter(Guid, String, String)
  nameWithType: MessageReceiver.DeadLetter(Guid, String, String)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetter(System.Guid, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: DeadLetter
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1120
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Moves the undelivered message to the dead letter queue.
  example: []
  syntax:
    content: public void DeadLetter(Guid lockToken, string deadLetterReason, string deadLetterErrorDescription)
    content.vb: Public Sub DeadLetter(lockToken As Guid, deadLetterReason As String, deadLetterErrorDescription As String)
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance.
    - id: deadLetterReason
      type: System.String
      description: The reason for deadlettering the message.
    - id: deadLetterErrorDescription
      type: System.String
      description: The error description for deadlettering the message.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetter*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetter(System.Guid)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetter(System.Guid)
  id: DeadLetter(System.Guid)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: DeadLetter(Guid)
  nameWithType: MessageReceiver.DeadLetter(Guid)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetter(System.Guid)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: DeadLetter
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1127
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Moves the undelivered message to the dead letter queue.
  example: []
  syntax:
    content: public void DeadLetter(Guid lockToken)
    content.vb: Public Sub DeadLetter(lockToken As Guid)
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetter*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetterAsync(System.Guid)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetterAsync(System.Guid)
  id: DeadLetterAsync(System.Guid)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: DeadLetterAsync(Guid)
  nameWithType: MessageReceiver.DeadLetterAsync(Guid)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetterAsync(System.Guid)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: DeadLetterAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1135
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously moves the undelivered message to the dead letter queue.
  example: []
  syntax:
    content: public Task DeadLetterAsync(Guid lockToken)
    content.vb: Public Function DeadLetterAsync(lockToken As Guid) As Task
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance.
    return:
      type: System.Threading.Tasks.Task
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetterAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetterAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetterAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: DeadLetterAsync(System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: DeadLetterAsync(Guid, IDictionary<String, Object>)
  nameWithType: MessageReceiver.DeadLetterAsync(Guid, IDictionary<String, Object>)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetterAsync(System.Guid, System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: DeadLetterAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1146
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously moves the undelivered message to the dead letter queue.
  example: []
  syntax:
    content: public Task DeadLetterAsync(Guid lockToken, IDictionary<string, object> propertiesToModify)
    content.vb: Public Function DeadLetterAsync(lockToken As Guid, propertiesToModify As IDictionary(Of String, Object)) As Task
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance.
    - id: propertiesToModify
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: The properties to modify.
    return:
      type: System.Threading.Tasks.Task
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetterAsync*
  nameWithType.vb: MessageReceiver.DeadLetterAsync(Guid, IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetterAsync(System.Guid, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: DeadLetterAsync(Guid, IDictionary(Of String, Object))
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetterAsync(System.Guid,System.String,System.String)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetterAsync(System.Guid,System.String,System.String)
  id: DeadLetterAsync(System.Guid,System.String,System.String)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: DeadLetterAsync(Guid, String, String)
  nameWithType: MessageReceiver.DeadLetterAsync(Guid, String, String)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetterAsync(System.Guid, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: DeadLetterAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1158
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously moves the undelivered message to the dead letter queue.
  example: []
  syntax:
    content: public Task DeadLetterAsync(Guid lockToken, string deadLetterReason, string deadLetterErrorDescription)
    content.vb: Public Function DeadLetterAsync(lockToken As Guid, deadLetterReason As String, deadLetterErrorDescription As String) As Task
    parameters:
    - id: lockToken
      type: System.Guid
      description: The lock token bound to the locked message instance.
    - id: deadLetterReason
      type: System.String
      description: The reason for deadlettering the message.
    - id: deadLetterErrorDescription
      type: System.String
      description: The error description for deadlettering the message.
    return:
      type: System.Threading.Tasks.Task
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetterAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.GetLockToken(Microsoft.ServiceBus.Messaging.BrokeredMessage)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.GetLockToken(Microsoft.ServiceBus.Messaging.BrokeredMessage)
  id: GetLockToken(Microsoft.ServiceBus.Messaging.BrokeredMessage)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: GetLockToken(BrokeredMessage)
  nameWithType: MessageReceiver.GetLockToken(BrokeredMessage)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.GetLockToken(Microsoft.ServiceBus.Messaging.BrokeredMessage)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: GetLockToken
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1711
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets the lock token bound to the message.
  example: []
  syntax:
    content: protected static Guid GetLockToken(BrokeredMessage message)
    content.vb: Protected Shared Function GetLockToken(message As BrokeredMessage) As Guid
    parameters:
    - id: message
      type: Microsoft.ServiceBus.Messaging.BrokeredMessage
      description: The <xref href="Microsoft.ServiceBus.Messaging.BrokeredMessage" data-throw-if-not-resolved="false"></xref> from which to get the lock token.
    return:
      type: System.Guid
      description: The lock token of the message.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.GetLockToken*
  modifiers.csharp:
  - protected
  - static
  modifiers.vb:
  - Protected
  - Shared
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.GetLockTokens(System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage})
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.GetLockTokens(System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage})
  id: GetLockTokens(System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage})
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: GetLockTokens(IEnumerable<BrokeredMessage>)
  nameWithType: MessageReceiver.GetLockTokens(IEnumerable<BrokeredMessage>)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.GetLockTokens(System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.BrokeredMessage>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: GetLockTokens
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1719
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Gets the collection of lock tokens from the specified collection of messages.
  example: []
  syntax:
    content: protected static IEnumerable<Guid> GetLockTokens(IEnumerable<BrokeredMessage> messages)
    content.vb: Protected Shared Function GetLockTokens(messages As IEnumerable(Of BrokeredMessage)) As IEnumerable(Of Guid)
    parameters:
    - id: messages
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: The collection of messages from which to get the lock tokens.
    return:
      type: System.Collections.Generic.IEnumerable{System.Guid}
      description: The collection of lock tokens from the specified messages.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.GetLockTokens*
  nameWithType.vb: MessageReceiver.GetLockTokens(IEnumerable(Of BrokeredMessage))
  modifiers.csharp:
  - protected
  - static
  modifiers.vb:
  - Protected
  - Shared
  fullName.vb: Microsoft.ServiceBus.Messaging.MessageReceiver.GetLockTokens(System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.BrokeredMessage))
  name.vb: GetLockTokens(IEnumerable(Of BrokeredMessage))
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginTryReceive(Microsoft.ServiceBus.Tracing.TrackingContext,System.Int32,System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginTryReceive(Microsoft.ServiceBus.Tracing.TrackingContext,System.Int32,System.TimeSpan,System.AsyncCallback,System.Object)
  id: OnBeginTryReceive(Microsoft.ServiceBus.Tracing.TrackingContext,System.Int32,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: OnBeginTryReceive(TrackingContext, Int32, TimeSpan, AsyncCallback, Object)
  nameWithType: MessageReceiver.OnBeginTryReceive(TrackingContext, Int32, TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginTryReceive(Microsoft.ServiceBus.Tracing.TrackingContext, System.Int32, System.TimeSpan, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnBeginTryReceive
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1745
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: 'Executes the begin try receive action. '
  example: []
  syntax:
    content: protected abstract IAsyncResult OnBeginTryReceive(TrackingContext trackingContext, int messageCount, TimeSpan serverWaitTime, AsyncCallback callback, object state)
    content.vb: Protected MustOverride Function OnBeginTryReceive(trackingContext As TrackingContext, messageCount As Integer, serverWaitTime As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: trackingContext
      type: Microsoft.ServiceBus.Tracing.TrackingContext
      description: TrackingContext to use.
    - id: messageCount
      type: System.Int32
      description: 'Number of messages. '
    - id: serverWaitTime
      type: System.TimeSpan
      description: 'The server wait time before it times out. '
    - id: callback
      type: System.AsyncCallback
      description: 'The callback. '
    - id: state
      type: System.Object
      description: 'The state. '
    return:
      type: System.IAsyncResult
      description: '. '
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginTryReceive*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndTryReceive(System.IAsyncResult,System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}@)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndTryReceive(System.IAsyncResult,System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}@)
  id: OnEndTryReceive(System.IAsyncResult,System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}@)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: OnEndTryReceive(IAsyncResult, out IEnumerable<BrokeredMessage>)
  nameWithType: MessageReceiver.OnEndTryReceive(IAsyncResult, out IEnumerable<BrokeredMessage>)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndTryReceive(System.IAsyncResult, out System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.BrokeredMessage>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnEndTryReceive
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1751
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes the end try receive action.
  example: []
  syntax:
    content: protected abstract bool OnEndTryReceive(IAsyncResult result, out IEnumerable<BrokeredMessage> messages)
    content.vb: Protected MustOverride Function OnEndTryReceive(result As IAsyncResult, ByRef messages As IEnumerable(Of BrokeredMessage)) As Boolean
    parameters:
    - id: result
      type: System.IAsyncResult
      description: The result.
    - id: messages
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: The received message collection.
    return:
      type: System.Boolean
      description: true if it succeeds; false if it fails.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndTryReceive*
  nameWithType.vb: MessageReceiver.OnEndTryReceive(IAsyncResult, ByRef IEnumerable(Of BrokeredMessage))
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndTryReceive(System.IAsyncResult, ByRef System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.BrokeredMessage))
  name.vb: OnEndTryReceive(IAsyncResult, ByRef IEnumerable(Of BrokeredMessage))
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginTryReceiveEventData(Microsoft.ServiceBus.Tracing.TrackingContext,System.Int32,System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginTryReceiveEventData(Microsoft.ServiceBus.Tracing.TrackingContext,System.Int32,System.TimeSpan,System.AsyncCallback,System.Object)
  id: OnBeginTryReceiveEventData(Microsoft.ServiceBus.Tracing.TrackingContext,System.Int32,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: OnBeginTryReceiveEventData(TrackingContext, Int32, TimeSpan, AsyncCallback, Object)
  nameWithType: MessageReceiver.OnBeginTryReceiveEventData(TrackingContext, Int32, TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginTryReceiveEventData(Microsoft.ServiceBus.Tracing.TrackingContext, System.Int32, System.TimeSpan, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnBeginTryReceiveEventData
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1760
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes upon calling the OnTryReceive or BeginTryReceive operation for the event data.
  example: []
  syntax:
    content: protected virtual IAsyncResult OnBeginTryReceiveEventData(TrackingContext trackingContext, int messageCount, TimeSpan serverWaitTime, AsyncCallback callback, object state)
    content.vb: Protected Overridable Function OnBeginTryReceiveEventData(trackingContext As TrackingContext, messageCount As Integer, serverWaitTime As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: trackingContext
      type: Microsoft.ServiceBus.Tracing.TrackingContext
      description: The context information associated by a transaction tracking this operation.
    - id: messageCount
      type: System.Int32
      description: The number of messages to try receiving.
    - id: serverWaitTime
      type: System.TimeSpan
      description: The time span the operation waits before it times out.
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback" data-throw-if-not-resolved="false"></xref> delegate that references the method to invoke when the operation is complete.
    - id: state
      type: System.Object
      description: A user-defined object that contains state information about the asynchronous operation.
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation to try to receive event data.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginTryReceiveEventData*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndTryReceiveEventData(System.IAsyncResult,System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.EventData}@)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndTryReceiveEventData(System.IAsyncResult,System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.EventData}@)
  id: OnEndTryReceiveEventData(System.IAsyncResult,System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.EventData}@)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: OnEndTryReceiveEventData(IAsyncResult, out IEnumerable<EventData>)
  nameWithType: MessageReceiver.OnEndTryReceiveEventData(IAsyncResult, out IEnumerable<EventData>)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndTryReceiveEventData(System.IAsyncResult, out System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.EventData>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnEndTryReceiveEventData
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1769
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes the EndTryReceive action for the event data.
  example: []
  syntax:
    content: protected virtual bool OnEndTryReceiveEventData(IAsyncResult result, out IEnumerable<EventData> messages)
    content.vb: Protected Overridable Function OnEndTryReceiveEventData(result As IAsyncResult, ByRef messages As IEnumerable(Of EventData)) As Boolean
    parameters:
    - id: result
      type: System.IAsyncResult
      description: The result.
    - id: messages
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.EventData}
      description: The received message collection.
    return:
      type: System.Boolean
      description: true if it succeeds; false if it fails.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndTryReceiveEventData*
  nameWithType.vb: MessageReceiver.OnEndTryReceiveEventData(IAsyncResult, ByRef IEnumerable(Of EventData))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndTryReceiveEventData(System.IAsyncResult, ByRef System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.EventData))
  name.vb: OnEndTryReceiveEventData(IAsyncResult, ByRef IEnumerable(Of EventData))
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginTryReceive2(Microsoft.ServiceBus.Tracing.TrackingContext,System.Int32,System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginTryReceive2(Microsoft.ServiceBus.Tracing.TrackingContext,System.Int32,System.TimeSpan,System.AsyncCallback,System.Object)
  id: OnBeginTryReceive2(Microsoft.ServiceBus.Tracing.TrackingContext,System.Int32,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: OnBeginTryReceive2(TrackingContext, Int32, TimeSpan, AsyncCallback, Object)
  nameWithType: MessageReceiver.OnBeginTryReceive2(TrackingContext, Int32, TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginTryReceive2(Microsoft.ServiceBus.Tracing.TrackingContext, System.Int32, System.TimeSpan, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnBeginTryReceive2
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1781
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: 'Executes the begin try receive action. '
  example: []
  syntax:
    content: protected abstract IAsyncResult OnBeginTryReceive2(TrackingContext trackingContext, int messageCount, TimeSpan serverWaitTime, AsyncCallback callback, object state)
    content.vb: Protected MustOverride Function OnBeginTryReceive2(trackingContext As TrackingContext, messageCount As Integer, serverWaitTime As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: trackingContext
      type: Microsoft.ServiceBus.Tracing.TrackingContext
      description: TrackingContext to use.
    - id: messageCount
      type: System.Int32
      description: 'Number of messages. '
    - id: serverWaitTime
      type: System.TimeSpan
      description: 'The server wait time before it times out. '
    - id: callback
      type: System.AsyncCallback
      description: 'The callback. '
    - id: state
      type: System.Object
      description: 'The state. '
    return:
      type: System.IAsyncResult
      description: '. '
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginTryReceive2*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndTryReceive2(System.IAsyncResult,System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}@)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndTryReceive2(System.IAsyncResult,System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}@)
  id: OnEndTryReceive2(System.IAsyncResult,System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}@)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: OnEndTryReceive2(IAsyncResult, out IEnumerable<BrokeredMessage>)
  nameWithType: MessageReceiver.OnEndTryReceive2(IAsyncResult, out IEnumerable<BrokeredMessage>)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndTryReceive2(System.IAsyncResult, out System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.BrokeredMessage>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnEndTryReceive2
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1787
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes the end try receive action.
  example: []
  syntax:
    content: protected abstract bool OnEndTryReceive2(IAsyncResult result, out IEnumerable<BrokeredMessage> messages)
    content.vb: Protected MustOverride Function OnEndTryReceive2(result As IAsyncResult, ByRef messages As IEnumerable(Of BrokeredMessage)) As Boolean
    parameters:
    - id: result
      type: System.IAsyncResult
      description: The result.
    - id: messages
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: The received message collection.
    return:
      type: System.Boolean
      description: true if it succeeds; false if it fails.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndTryReceive2*
  nameWithType.vb: MessageReceiver.OnEndTryReceive2(IAsyncResult, ByRef IEnumerable(Of BrokeredMessage))
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndTryReceive2(System.IAsyncResult, ByRef System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.BrokeredMessage))
  name.vb: OnEndTryReceive2(IAsyncResult, ByRef IEnumerable(Of BrokeredMessage))
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnTryReceive(Microsoft.ServiceBus.Tracing.TrackingContext,System.Int32,System.TimeSpan,System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}@)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnTryReceive(Microsoft.ServiceBus.Tracing.TrackingContext,System.Int32,System.TimeSpan,System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}@)
  id: OnTryReceive(Microsoft.ServiceBus.Tracing.TrackingContext,System.Int32,System.TimeSpan,System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}@)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: OnTryReceive(TrackingContext, Int32, TimeSpan, out IEnumerable<BrokeredMessage>)
  nameWithType: MessageReceiver.OnTryReceive(TrackingContext, Int32, TimeSpan, out IEnumerable<BrokeredMessage>)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnTryReceive(Microsoft.ServiceBus.Tracing.TrackingContext, System.Int32, System.TimeSpan, out System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.BrokeredMessage>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnTryReceive
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1795
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: 'Executes the try receive action. '
  example: []
  syntax:
    content: protected virtual bool OnTryReceive(TrackingContext trackingContext, int messageCount, TimeSpan serverWaitTime, out IEnumerable<BrokeredMessage> messages)
    content.vb: Protected Overridable Function OnTryReceive(trackingContext As TrackingContext, messageCount As Integer, serverWaitTime As TimeSpan, ByRef messages As IEnumerable(Of BrokeredMessage)) As Boolean
    parameters:
    - id: trackingContext
      type: Microsoft.ServiceBus.Tracing.TrackingContext
      description: TrackingContext to use.
    - id: messageCount
      type: System.Int32
      description: 'Number of messages. '
    - id: serverWaitTime
      type: System.TimeSpan
      description: 'The server wait time before it times out. '
    - id: messages
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: '[out] The messages. '
    return:
      type: System.Boolean
      description: 'true if it succeeds, false if it fails. '
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.OnTryReceive*
  nameWithType.vb: MessageReceiver.OnTryReceive(TrackingContext, Int32, TimeSpan, ByRef IEnumerable(Of BrokeredMessage))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.ServiceBus.Messaging.MessageReceiver.OnTryReceive(Microsoft.ServiceBus.Tracing.TrackingContext, System.Int32, System.TimeSpan, ByRef System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.BrokeredMessage))
  name.vb: OnTryReceive(TrackingContext, Int32, TimeSpan, ByRef IEnumerable(Of BrokeredMessage))
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginTryReceive(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Int64},System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginTryReceive(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Int64},System.TimeSpan,System.AsyncCallback,System.Object)
  id: OnBeginTryReceive(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Int64},System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: OnBeginTryReceive(TrackingContext, IEnumerable<Int64>, TimeSpan, AsyncCallback, Object)
  nameWithType: MessageReceiver.OnBeginTryReceive(TrackingContext, IEnumerable<Int64>, TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginTryReceive(Microsoft.ServiceBus.Tracing.TrackingContext, System.Collections.Generic.IEnumerable<System.Int64>, System.TimeSpan, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnBeginTryReceive
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1821
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: 'Executes the begin try receive action. '
  example: []
  syntax:
    content: protected abstract IAsyncResult OnBeginTryReceive(TrackingContext trackingContext, IEnumerable<long> sequenceNumbers, TimeSpan timeout, AsyncCallback callback, object state)
    content.vb: Protected MustOverride Function OnBeginTryReceive(trackingContext As TrackingContext, sequenceNumbers As IEnumerable(Of Long), timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: trackingContext
      type: Microsoft.ServiceBus.Tracing.TrackingContext
      description: TrackingContext to use.
    - id: sequenceNumbers
      type: System.Collections.Generic.IEnumerable{System.Int64}
      description: 'The sequenceNumbers. '
    - id: timeout
      type: System.TimeSpan
      description: 'The timeout. '
    - id: callback
      type: System.AsyncCallback
      description: 'The callback. '
    - id: state
      type: System.Object
      description: 'The state. '
    return:
      type: System.IAsyncResult
      description: '. '
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginTryReceive*
  nameWithType.vb: MessageReceiver.OnBeginTryReceive(TrackingContext, IEnumerable(Of Int64), TimeSpan, AsyncCallback, Object)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginTryReceive(Microsoft.ServiceBus.Tracing.TrackingContext, System.Collections.Generic.IEnumerable(Of System.Int64), System.TimeSpan, System.AsyncCallback, System.Object)
  name.vb: OnBeginTryReceive(TrackingContext, IEnumerable(Of Int64), TimeSpan, AsyncCallback, Object)
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnTryReceive(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Int64},System.TimeSpan,System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}@)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnTryReceive(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Int64},System.TimeSpan,System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}@)
  id: OnTryReceive(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Int64},System.TimeSpan,System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}@)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: OnTryReceive(TrackingContext, IEnumerable<Int64>, TimeSpan, out IEnumerable<BrokeredMessage>)
  nameWithType: MessageReceiver.OnTryReceive(TrackingContext, IEnumerable<Int64>, TimeSpan, out IEnumerable<BrokeredMessage>)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnTryReceive(Microsoft.ServiceBus.Tracing.TrackingContext, System.Collections.Generic.IEnumerable<System.Int64>, System.TimeSpan, out System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.BrokeredMessage>)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnTryReceive
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1829
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: 'Executes the try receive action. '
  example: []
  syntax:
    content: protected virtual bool OnTryReceive(TrackingContext trackingContext, IEnumerable<long> sequenceNumbers, TimeSpan timeout, out IEnumerable<BrokeredMessage> messages)
    content.vb: Protected Overridable Function OnTryReceive(trackingContext As TrackingContext, sequenceNumbers As IEnumerable(Of Long), timeout As TimeSpan, ByRef messages As IEnumerable(Of BrokeredMessage)) As Boolean
    parameters:
    - id: trackingContext
      type: Microsoft.ServiceBus.Tracing.TrackingContext
      description: TrackingContext to use.
    - id: sequenceNumbers
      type: System.Collections.Generic.IEnumerable{System.Int64}
      description: 'The receipts. '
    - id: timeout
      type: System.TimeSpan
      description: 'The timeout. '
    - id: messages
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: '[out] The messages. '
    return:
      type: System.Boolean
      description: 'true if it succeeds, false if it fails. '
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.OnTryReceive*
  nameWithType.vb: MessageReceiver.OnTryReceive(TrackingContext, IEnumerable(Of Int64), TimeSpan, ByRef IEnumerable(Of BrokeredMessage))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.ServiceBus.Messaging.MessageReceiver.OnTryReceive(Microsoft.ServiceBus.Tracing.TrackingContext, System.Collections.Generic.IEnumerable(Of System.Int64), System.TimeSpan, ByRef System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.BrokeredMessage))
  name.vb: OnTryReceive(TrackingContext, IEnumerable(Of Int64), TimeSpan, ByRef IEnumerable(Of BrokeredMessage))
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginDefer(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginDefer(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.TimeSpan,System.AsyncCallback,System.Object)
  id: OnBeginDefer(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: OnBeginDefer(TrackingContext, IEnumerable<Guid>, IDictionary<String, Object>, Boolean, TimeSpan, AsyncCallback, Object)
  nameWithType: MessageReceiver.OnBeginDefer(TrackingContext, IEnumerable<Guid>, IDictionary<String, Object>, Boolean, TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginDefer(Microsoft.ServiceBus.Tracing.TrackingContext, System.Collections.Generic.IEnumerable<System.Guid>, System.Collections.Generic.IDictionary<System.String, System.Object>, System.Boolean, System.TimeSpan, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnBeginDefer
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1859
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes upon calling the OnDefer or BeginDefer operation.
  example: []
  syntax:
    content: protected abstract IAsyncResult OnBeginDefer(TrackingContext trackingContext, IEnumerable<Guid> lockTokens, IDictionary<string, object> propertiesToModify, bool fromSync, TimeSpan timeout, AsyncCallback callback, object state)
    content.vb: Protected MustOverride Function OnBeginDefer(trackingContext As TrackingContext, lockTokens As IEnumerable(Of Guid), propertiesToModify As IDictionary(Of String, Object), fromSync As Boolean, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: trackingContext
      type: Microsoft.ServiceBus.Tracing.TrackingContext
      description: The context information associated by a transaction tracking this operation.
    - id: lockTokens
      type: System.Collections.Generic.IEnumerable{System.Guid}
      description: The collection of lock tokens bound to the locked message instances.
    - id: propertiesToModify
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: The properties to modify.
    - id: fromSync
      type: System.Boolean
      description: The start of synchronization.
    - id: timeout
      type: System.TimeSpan
      description: The time span the operation waits before it times out.
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback" data-throw-if-not-resolved="false"></xref> delegate that references the method to invoke when the operation is complete.
    - id: state
      type: System.Object
      description: A user-defined object that contains state information about the asynchronous operation.
    return:
      type: System.IAsyncResult
      description: An<xref href="System.IAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation to suspend processing of messages.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginDefer*
  nameWithType.vb: MessageReceiver.OnBeginDefer(TrackingContext, IEnumerable(Of Guid), IDictionary(Of String, Object), Boolean, TimeSpan, AsyncCallback, Object)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginDefer(Microsoft.ServiceBus.Tracing.TrackingContext, System.Collections.Generic.IEnumerable(Of System.Guid), System.Collections.Generic.IDictionary(Of System.String, System.Object), System.Boolean, System.TimeSpan, System.AsyncCallback, System.Object)
  name.vb: OnBeginDefer(TrackingContext, IEnumerable(Of Guid), IDictionary(Of String, Object), Boolean, TimeSpan, AsyncCallback, Object)
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndDefer(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndDefer(System.IAsyncResult)
  id: OnEndDefer(System.IAsyncResult)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: OnEndDefer(IAsyncResult)
  nameWithType: MessageReceiver.OnEndDefer(IAsyncResult)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndDefer(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnEndDefer
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1863
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes the end defer action.
  example: []
  syntax:
    content: protected abstract void OnEndDefer(IAsyncResult result)
    content.vb: Protected MustOverride Sub OnEndDefer(result As IAsyncResult)
    parameters:
    - id: result
      type: System.IAsyncResult
      description: The result.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndDefer*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnDefer(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnDefer(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  id: OnDefer(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: OnDefer(TrackingContext, IEnumerable<Guid>, IDictionary<String, Object>, TimeSpan)
  nameWithType: MessageReceiver.OnDefer(TrackingContext, IEnumerable<Guid>, IDictionary<String, Object>, TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnDefer(Microsoft.ServiceBus.Tracing.TrackingContext, System.Collections.Generic.IEnumerable<System.Guid>, System.Collections.Generic.IDictionary<System.String, System.Object>, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnDefer
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1870
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: 'Executes the defer action. '
  example: []
  syntax:
    content: protected virtual void OnDefer(TrackingContext trackingContext, IEnumerable<Guid> lockTokens, IDictionary<string, object> propertiesToModify, TimeSpan timeout)
    content.vb: Protected Overridable Sub OnDefer(trackingContext As TrackingContext, lockTokens As IEnumerable(Of Guid), propertiesToModify As IDictionary(Of String, Object), timeout As TimeSpan)
    parameters:
    - id: trackingContext
      type: Microsoft.ServiceBus.Tracing.TrackingContext
      description: TrackingContext to use.
    - id: lockTokens
      type: System.Collections.Generic.IEnumerable{System.Guid}
      description: 'The lock tokens. '
    - id: propertiesToModify
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: ''
    - id: timeout
      type: System.TimeSpan
      description: 'The timeout. '
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.OnDefer*
  nameWithType.vb: MessageReceiver.OnDefer(TrackingContext, IEnumerable(Of Guid), IDictionary(Of String, Object), TimeSpan)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.ServiceBus.Messaging.MessageReceiver.OnDefer(Microsoft.ServiceBus.Tracing.TrackingContext, System.Collections.Generic.IEnumerable(Of System.Guid), System.Collections.Generic.IDictionary(Of System.String, System.Object), System.TimeSpan)
  name.vb: OnDefer(TrackingContext, IEnumerable(Of Guid), IDictionary(Of String, Object), TimeSpan)
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginDeadLetter(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String,System.Boolean,System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginDeadLetter(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String,System.Boolean,System.TimeSpan,System.AsyncCallback,System.Object)
  id: OnBeginDeadLetter(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String,System.Boolean,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: OnBeginDeadLetter(TrackingContext, IEnumerable<Guid>, IDictionary<String, Object>, String, String, Boolean, TimeSpan, AsyncCallback, Object)
  nameWithType: MessageReceiver.OnBeginDeadLetter(TrackingContext, IEnumerable<Guid>, IDictionary<String, Object>, String, String, Boolean, TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginDeadLetter(Microsoft.ServiceBus.Tracing.TrackingContext, System.Collections.Generic.IEnumerable<System.Guid>, System.Collections.Generic.IDictionary<System.String, System.Object>, System.String, System.String, System.Boolean, System.TimeSpan, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnBeginDeadLetter
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1887
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes upon calling the OnDeadLetter or BeginDeadLetter operation.
  example: []
  syntax:
    content: protected abstract IAsyncResult OnBeginDeadLetter(TrackingContext trackingContext, IEnumerable<Guid> lockTokens, IDictionary<string, object> propertiesToModify, string deadLetterReason, string deadLetterErrorDescription, bool fromSync, TimeSpan timeout, AsyncCallback callback, object state)
    content.vb: Protected MustOverride Function OnBeginDeadLetter(trackingContext As TrackingContext, lockTokens As IEnumerable(Of Guid), propertiesToModify As IDictionary(Of String, Object), deadLetterReason As String, deadLetterErrorDescription As String, fromSync As Boolean, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: trackingContext
      type: Microsoft.ServiceBus.Tracing.TrackingContext
      description: The context information associated by a transaction tracking this operation.
    - id: lockTokens
      type: System.Collections.Generic.IEnumerable{System.Guid}
      description: The collection of lock tokens bound to the locked message instances.
    - id: propertiesToModify
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: The properties to modify.
    - id: deadLetterReason
      type: System.String
      description: The reason for deadlettering the messages.
    - id: deadLetterErrorDescription
      type: System.String
      description: The error description for deadlettering the messages.
    - id: fromSync
      type: System.Boolean
      description: The start of the synchronization.
    - id: timeout
      type: System.TimeSpan
      description: The time span the operation waits before it times out.
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback" data-throw-if-not-resolved="false"></xref> delegate that references the method to invoke when the operation is complete.
    - id: state
      type: System.Object
      description: A user-defined object that contains state information about the asynchronous operation.
    return:
      type: System.IAsyncResult
      description: An<xref href="System.IAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation to move undelivered of messages to the deadletter queue.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginDeadLetter*
  nameWithType.vb: MessageReceiver.OnBeginDeadLetter(TrackingContext, IEnumerable(Of Guid), IDictionary(Of String, Object), String, String, Boolean, TimeSpan, AsyncCallback, Object)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginDeadLetter(Microsoft.ServiceBus.Tracing.TrackingContext, System.Collections.Generic.IEnumerable(Of System.Guid), System.Collections.Generic.IDictionary(Of System.String, System.Object), System.String, System.String, System.Boolean, System.TimeSpan, System.AsyncCallback, System.Object)
  name.vb: OnBeginDeadLetter(TrackingContext, IEnumerable(Of Guid), IDictionary(Of String, Object), String, String, Boolean, TimeSpan, AsyncCallback, Object)
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndDeadLetter(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndDeadLetter(System.IAsyncResult)
  id: OnEndDeadLetter(System.IAsyncResult)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: OnEndDeadLetter(IAsyncResult)
  nameWithType: MessageReceiver.OnEndDeadLetter(IAsyncResult)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndDeadLetter(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnEndDeadLetter
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1891
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes the end move to dead letter queue action.
  example: []
  syntax:
    content: protected abstract void OnEndDeadLetter(IAsyncResult result)
    content.vb: Protected MustOverride Sub OnEndDeadLetter(result As IAsyncResult)
    parameters:
    - id: result
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult" data-throw-if-not-resolved="false"></xref> object that references the asynchronously completed operation.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndDeadLetter*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnDeadLetter(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String,System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnDeadLetter(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String,System.TimeSpan)
  id: OnDeadLetter(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String,System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: OnDeadLetter(TrackingContext, IEnumerable<Guid>, IDictionary<String, Object>, String, String, TimeSpan)
  nameWithType: MessageReceiver.OnDeadLetter(TrackingContext, IEnumerable<Guid>, IDictionary<String, Object>, String, String, TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnDeadLetter(Microsoft.ServiceBus.Tracing.TrackingContext, System.Collections.Generic.IEnumerable<System.Guid>, System.Collections.Generic.IDictionary<System.String, System.Object>, System.String, System.String, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnDeadLetter
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1900
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: 'Executes the move to dead letter queue action. '
  example: []
  syntax:
    content: protected virtual void OnDeadLetter(TrackingContext trackingContext, IEnumerable<Guid> lockTokens, IDictionary<string, object> propertiesToModify, string deadLetterReason, string deadLetterErrorDescription, TimeSpan timeout)
    content.vb: Protected Overridable Sub OnDeadLetter(trackingContext As TrackingContext, lockTokens As IEnumerable(Of Guid), propertiesToModify As IDictionary(Of String, Object), deadLetterReason As String, deadLetterErrorDescription As String, timeout As TimeSpan)
    parameters:
    - id: trackingContext
      type: Microsoft.ServiceBus.Tracing.TrackingContext
      description: TrackingContext to use.
    - id: lockTokens
      type: System.Collections.Generic.IEnumerable{System.Guid}
      description: 'The lock tokens. '
    - id: propertiesToModify
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: ''
    - id: deadLetterReason
      type: System.String
      description: 'The reason for deadlettering the message. '
    - id: deadLetterErrorDescription
      type: System.String
      description: 'The description information for deadlettering the message. '
    - id: timeout
      type: System.TimeSpan
      description: 'The timeout. '
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.OnDeadLetter*
  nameWithType.vb: MessageReceiver.OnDeadLetter(TrackingContext, IEnumerable(Of Guid), IDictionary(Of String, Object), String, String, TimeSpan)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.ServiceBus.Messaging.MessageReceiver.OnDeadLetter(Microsoft.ServiceBus.Tracing.TrackingContext, System.Collections.Generic.IEnumerable(Of System.Guid), System.Collections.Generic.IDictionary(Of System.String, System.Object), System.String, System.String, System.TimeSpan)
  name.vb: OnDeadLetter(TrackingContext, IEnumerable(Of Guid), IDictionary(Of String, Object), String, String, TimeSpan)
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginRenewMessageLocks(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.Boolean,System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginRenewMessageLocks(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.Boolean,System.TimeSpan,System.AsyncCallback,System.Object)
  id: OnBeginRenewMessageLocks(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.Boolean,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: OnBeginRenewMessageLocks(TrackingContext, IEnumerable<Guid>, Boolean, TimeSpan, AsyncCallback, Object)
  nameWithType: MessageReceiver.OnBeginRenewMessageLocks(TrackingContext, IEnumerable<Guid>, Boolean, TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginRenewMessageLocks(Microsoft.ServiceBus.Tracing.TrackingContext, System.Collections.Generic.IEnumerable<System.Guid>, System.Boolean, System.TimeSpan, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnBeginRenewMessageLocks
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1914
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes upon calling the OnBegin operation for lock messages.
  example: []
  syntax:
    content: protected abstract IAsyncResult OnBeginRenewMessageLocks(TrackingContext trackingContext, IEnumerable<Guid> lockTokens, bool fromSync, TimeSpan timeout, AsyncCallback callback, object state)
    content.vb: Protected MustOverride Function OnBeginRenewMessageLocks(trackingContext As TrackingContext, lockTokens As IEnumerable(Of Guid), fromSync As Boolean, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: trackingContext
      type: Microsoft.ServiceBus.Tracing.TrackingContext
      description: The context information associated by a transaction tracking this operation.
    - id: lockTokens
      type: System.Collections.Generic.IEnumerable{System.Guid}
      description: The collection of lock tokens bound to the locked message instances.
    - id: fromSync
      type: System.Boolean
      description: The start of the synchronization.
    - id: timeout
      type: System.TimeSpan
      description: The time span the operation waits before it times out.
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback" data-throw-if-not-resolved="false"></xref> delegate that references the method to invoke when the operation is complete.
    - id: state
      type: System.Object
      description: A user-defined object that contains state information about the asynchronous operation.
    return:
      type: System.IAsyncResult
      description: An<xref href="System.IAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation to renew processing of lock messages.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginRenewMessageLocks*
  nameWithType.vb: MessageReceiver.OnBeginRenewMessageLocks(TrackingContext, IEnumerable(Of Guid), Boolean, TimeSpan, AsyncCallback, Object)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginRenewMessageLocks(Microsoft.ServiceBus.Tracing.TrackingContext, System.Collections.Generic.IEnumerable(Of System.Guid), System.Boolean, System.TimeSpan, System.AsyncCallback, System.Object)
  name.vb: OnBeginRenewMessageLocks(TrackingContext, IEnumerable(Of Guid), Boolean, TimeSpan, AsyncCallback, Object)
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndRenewMessageLocks(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndRenewMessageLocks(System.IAsyncResult)
  id: OnEndRenewMessageLocks(System.IAsyncResult)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: OnEndRenewMessageLocks(IAsyncResult)
  nameWithType: MessageReceiver.OnEndRenewMessageLocks(IAsyncResult)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndRenewMessageLocks(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnEndRenewMessageLocks
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1919
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes the EndRenew action for message locks.
  example: []
  syntax:
    content: protected abstract IEnumerable<DateTime> OnEndRenewMessageLocks(IAsyncResult result)
    content.vb: Protected MustOverride Function OnEndRenewMessageLocks(result As IAsyncResult) As IEnumerable(Of Date)
    parameters:
    - id: result
      type: System.IAsyncResult
      description: The result of the operation.
    return:
      type: System.Collections.Generic.IEnumerable{System.DateTime}
      description: A <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> of lock messages.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndRenewMessageLocks*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnRenewMessageLocks(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnRenewMessageLocks(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.TimeSpan)
  id: OnRenewMessageLocks(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: OnRenewMessageLocks(TrackingContext, IEnumerable<Guid>, TimeSpan)
  nameWithType: MessageReceiver.OnRenewMessageLocks(TrackingContext, IEnumerable<Guid>, TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnRenewMessageLocks(Microsoft.ServiceBus.Tracing.TrackingContext, System.Collections.Generic.IEnumerable<System.Guid>, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnRenewMessageLocks
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1926
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes the Renew action for lock messages.
  example: []
  syntax:
    content: protected virtual IEnumerable<DateTime> OnRenewMessageLocks(TrackingContext trackingContext, IEnumerable<Guid> lockTokens, TimeSpan timeout)
    content.vb: Protected Overridable Function OnRenewMessageLocks(trackingContext As TrackingContext, lockTokens As IEnumerable(Of Guid), timeout As TimeSpan) As IEnumerable(Of Date)
    parameters:
    - id: trackingContext
      type: Microsoft.ServiceBus.Tracing.TrackingContext
      description: The tracking context.
    - id: lockTokens
      type: System.Collections.Generic.IEnumerable{System.Guid}
      description: The lock tokens.
    - id: timeout
      type: System.TimeSpan
      description: The time span the operation waits before it times out.
    return:
      type: System.Collections.Generic.IEnumerable{System.DateTime}
      description: The renewed lock messages.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.OnRenewMessageLocks*
  nameWithType.vb: MessageReceiver.OnRenewMessageLocks(TrackingContext, IEnumerable(Of Guid), TimeSpan)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.ServiceBus.Messaging.MessageReceiver.OnRenewMessageLocks(Microsoft.ServiceBus.Tracing.TrackingContext, System.Collections.Generic.IEnumerable(Of System.Guid), System.TimeSpan)
  name.vb: OnRenewMessageLocks(TrackingContext, IEnumerable(Of Guid), TimeSpan)
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginComplete(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.Boolean,System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginComplete(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.Boolean,System.TimeSpan,System.AsyncCallback,System.Object)
  id: OnBeginComplete(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.Boolean,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: OnBeginComplete(TrackingContext, IEnumerable<Guid>, Boolean, TimeSpan, AsyncCallback, Object)
  nameWithType: MessageReceiver.OnBeginComplete(TrackingContext, IEnumerable<Guid>, Boolean, TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginComplete(Microsoft.ServiceBus.Tracing.TrackingContext, System.Collections.Generic.IEnumerable<System.Guid>, System.Boolean, System.TimeSpan, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnBeginComplete
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1942
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes upon calling the OnComplete or BeginComplete operation.
  example: []
  syntax:
    content: protected abstract IAsyncResult OnBeginComplete(TrackingContext trackingContext, IEnumerable<Guid> lockTokens, bool fromSync, TimeSpan timeout, AsyncCallback callback, object state)
    content.vb: Protected MustOverride Function OnBeginComplete(trackingContext As TrackingContext, lockTokens As IEnumerable(Of Guid), fromSync As Boolean, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: trackingContext
      type: Microsoft.ServiceBus.Tracing.TrackingContext
      description: The context information associated by a transaction tracking this operation.
    - id: lockTokens
      type: System.Collections.Generic.IEnumerable{System.Guid}
      description: The collection of lock tokens bound to the locked message instances.
    - id: fromSync
      type: System.Boolean
      description: The start of the synchronization.
    - id: timeout
      type: System.TimeSpan
      description: The time span the operation waits before it times out.
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback" data-throw-if-not-resolved="false"></xref> delegate that references the method to invoke when the operation is complete.
    - id: state
      type: System.Object
      description: A user-defined object that contains state information about the asynchronous operation.
    return:
      type: System.IAsyncResult
      description: An<xref href="System.IAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation to complete receiving of messages.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginComplete*
  nameWithType.vb: MessageReceiver.OnBeginComplete(TrackingContext, IEnumerable(Of Guid), Boolean, TimeSpan, AsyncCallback, Object)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginComplete(Microsoft.ServiceBus.Tracing.TrackingContext, System.Collections.Generic.IEnumerable(Of System.Guid), System.Boolean, System.TimeSpan, System.AsyncCallback, System.Object)
  name.vb: OnBeginComplete(TrackingContext, IEnumerable(Of Guid), Boolean, TimeSpan, AsyncCallback, Object)
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginComplete(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}},System.Boolean,System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginComplete(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}},System.Boolean,System.TimeSpan,System.AsyncCallback,System.Object)
  id: OnBeginComplete(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}},System.Boolean,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: OnBeginComplete(TrackingContext, IEnumerable<ArraySegment<Byte>>, Boolean, TimeSpan, AsyncCallback, Object)
  nameWithType: MessageReceiver.OnBeginComplete(TrackingContext, IEnumerable<ArraySegment<Byte>>, Boolean, TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginComplete(Microsoft.ServiceBus.Tracing.TrackingContext, System.Collections.Generic.IEnumerable<System.ArraySegment<System.Byte>>, System.Boolean, System.TimeSpan, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnBeginComplete
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1952
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes upon calling the OnComplete or BeginComplete operation.
  example: []
  syntax:
    content: protected abstract IAsyncResult OnBeginComplete(TrackingContext trackingContext, IEnumerable<ArraySegment<byte>> deliveryTags, bool fromSync, TimeSpan timeout, AsyncCallback callback, object state)
    content.vb: Protected MustOverride Function OnBeginComplete(trackingContext As TrackingContext, deliveryTags As IEnumerable(Of ArraySegment(Of Byte)), fromSync As Boolean, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: trackingContext
      type: Microsoft.ServiceBus.Tracing.TrackingContext
      description: The context information associated by a transaction tracking this operation.
    - id: deliveryTags
      type: System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}}
      description: A collection of delivery tags.
    - id: fromSync
      type: System.Boolean
      description: The start of the synchronization.
    - id: timeout
      type: System.TimeSpan
      description: The time span the operation waits before it times out.
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback" data-throw-if-not-resolved="false"></xref> delegate that references the method to invoke when the operation is complete.
    - id: state
      type: System.Object
      description: A user-defined object that contains state information about the asynchronous operation.
    return:
      type: System.IAsyncResult
      description: An<xref href="System.IAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation to complete receiving of messages.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginComplete*
  nameWithType.vb: MessageReceiver.OnBeginComplete(TrackingContext, IEnumerable(Of ArraySegment(Of Byte)), Boolean, TimeSpan, AsyncCallback, Object)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginComplete(Microsoft.ServiceBus.Tracing.TrackingContext, System.Collections.Generic.IEnumerable(Of System.ArraySegment(Of System.Byte)), System.Boolean, System.TimeSpan, System.AsyncCallback, System.Object)
  name.vb: OnBeginComplete(TrackingContext, IEnumerable(Of ArraySegment(Of Byte)), Boolean, TimeSpan, AsyncCallback, Object)
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndComplete(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndComplete(System.IAsyncResult)
  id: OnEndComplete(System.IAsyncResult)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: OnEndComplete(IAsyncResult)
  nameWithType: MessageReceiver.OnEndComplete(IAsyncResult)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndComplete(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnEndComplete
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1956
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes the end complete action.
  example: []
  syntax:
    content: protected abstract void OnEndComplete(IAsyncResult result)
    content.vb: Protected MustOverride Sub OnEndComplete(result As IAsyncResult)
    parameters:
    - id: result
      type: System.IAsyncResult
      description: The result.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndComplete*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnComplete(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnComplete(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.TimeSpan)
  id: OnComplete(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: OnComplete(TrackingContext, IEnumerable<Guid>, TimeSpan)
  nameWithType: MessageReceiver.OnComplete(TrackingContext, IEnumerable<Guid>, TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnComplete(Microsoft.ServiceBus.Tracing.TrackingContext, System.Collections.Generic.IEnumerable<System.Guid>, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnComplete
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1962
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: 'Executes the complete action. '
  example: []
  syntax:
    content: protected virtual void OnComplete(TrackingContext trackingContext, IEnumerable<Guid> lockTokens, TimeSpan timeout)
    content.vb: Protected Overridable Sub OnComplete(trackingContext As TrackingContext, lockTokens As IEnumerable(Of Guid), timeout As TimeSpan)
    parameters:
    - id: trackingContext
      type: Microsoft.ServiceBus.Tracing.TrackingContext
      description: TrackingContext to use.
    - id: lockTokens
      type: System.Collections.Generic.IEnumerable{System.Guid}
      description: 'The lock tokens. '
    - id: timeout
      type: System.TimeSpan
      description: 'The timeout. '
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.OnComplete*
  nameWithType.vb: MessageReceiver.OnComplete(TrackingContext, IEnumerable(Of Guid), TimeSpan)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.ServiceBus.Messaging.MessageReceiver.OnComplete(Microsoft.ServiceBus.Tracing.TrackingContext, System.Collections.Generic.IEnumerable(Of System.Guid), System.TimeSpan)
  name.vb: OnComplete(TrackingContext, IEnumerable(Of Guid), TimeSpan)
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginAbandon(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginAbandon(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.TimeSpan,System.AsyncCallback,System.Object)
  id: OnBeginAbandon(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: OnBeginAbandon(TrackingContext, IEnumerable<Guid>, IDictionary<String, Object>, Boolean, TimeSpan, AsyncCallback, Object)
  nameWithType: MessageReceiver.OnBeginAbandon(TrackingContext, IEnumerable<Guid>, IDictionary<String, Object>, Boolean, TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginAbandon(Microsoft.ServiceBus.Tracing.TrackingContext, System.Collections.Generic.IEnumerable<System.Guid>, System.Collections.Generic.IDictionary<System.String, System.Object>, System.Boolean, System.TimeSpan, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnBeginAbandon
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1979
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes upon calling the OnAbandon or BeginAbandon operation.
  example: []
  syntax:
    content: protected abstract IAsyncResult OnBeginAbandon(TrackingContext trackingContext, IEnumerable<Guid> lockTokens, IDictionary<string, object> propertiesToModify, bool fromSync, TimeSpan timeout, AsyncCallback callback, object state)
    content.vb: Protected MustOverride Function OnBeginAbandon(trackingContext As TrackingContext, lockTokens As IEnumerable(Of Guid), propertiesToModify As IDictionary(Of String, Object), fromSync As Boolean, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: trackingContext
      type: Microsoft.ServiceBus.Tracing.TrackingContext
      description: The context information associated by a transaction tracking this operation.
    - id: lockTokens
      type: System.Collections.Generic.IEnumerable{System.Guid}
      description: The collection of lock tokens bound to the locked message instances.
    - id: propertiesToModify
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: The properties to modify.
    - id: fromSync
      type: System.Boolean
      description: The start of the synchronization.
    - id: timeout
      type: System.TimeSpan
      description: The time span the operation waits before it times out.
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback" data-throw-if-not-resolved="false"></xref> delegate that references the method to invoke when the operation is complete.
    - id: state
      type: System.Object
      description: A user-defined object that contains state information about the asynchronous operation.
    return:
      type: System.IAsyncResult
      description: An<xref href="System.IAsyncResult" data-throw-if-not-resolved="false"></xref> that references the asynchronous operation to abandon the messages and relinquish its lock.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginAbandon*
  nameWithType.vb: MessageReceiver.OnBeginAbandon(TrackingContext, IEnumerable(Of Guid), IDictionary(Of String, Object), Boolean, TimeSpan, AsyncCallback, Object)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginAbandon(Microsoft.ServiceBus.Tracing.TrackingContext, System.Collections.Generic.IEnumerable(Of System.Guid), System.Collections.Generic.IDictionary(Of System.String, System.Object), System.Boolean, System.TimeSpan, System.AsyncCallback, System.Object)
  name.vb: OnBeginAbandon(TrackingContext, IEnumerable(Of Guid), IDictionary(Of String, Object), Boolean, TimeSpan, AsyncCallback, Object)
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndAbandon(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndAbandon(System.IAsyncResult)
  id: OnEndAbandon(System.IAsyncResult)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: OnEndAbandon(IAsyncResult)
  nameWithType: MessageReceiver.OnEndAbandon(IAsyncResult)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndAbandon(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnEndAbandon
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1983
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes the end abandon action.
  example: []
  syntax:
    content: protected abstract void OnEndAbandon(IAsyncResult result)
    content.vb: Protected MustOverride Sub OnEndAbandon(result As IAsyncResult)
    parameters:
    - id: result
      type: System.IAsyncResult
      description: The result.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndAbandon*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnAbandon(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnAbandon(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  id: OnAbandon(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: OnAbandon(TrackingContext, IEnumerable<Guid>, IDictionary<String, Object>, TimeSpan)
  nameWithType: MessageReceiver.OnAbandon(TrackingContext, IEnumerable<Guid>, IDictionary<String, Object>, TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnAbandon(Microsoft.ServiceBus.Tracing.TrackingContext, System.Collections.Generic.IEnumerable<System.Guid>, System.Collections.Generic.IDictionary<System.String, System.Object>, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnAbandon
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 1990
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: 'Executes the abandon action. '
  example: []
  syntax:
    content: protected virtual void OnAbandon(TrackingContext trackingContext, IEnumerable<Guid> lockTokens, IDictionary<string, object> propertiesToModify, TimeSpan timeout)
    content.vb: Protected Overridable Sub OnAbandon(trackingContext As TrackingContext, lockTokens As IEnumerable(Of Guid), propertiesToModify As IDictionary(Of String, Object), timeout As TimeSpan)
    parameters:
    - id: trackingContext
      type: Microsoft.ServiceBus.Tracing.TrackingContext
      description: TrackingContext to use.
    - id: lockTokens
      type: System.Collections.Generic.IEnumerable{System.Guid}
      description: 'The lock tokens. '
    - id: propertiesToModify
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: ''
    - id: timeout
      type: System.TimeSpan
      description: 'The timeout. '
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.OnAbandon*
  nameWithType.vb: MessageReceiver.OnAbandon(TrackingContext, IEnumerable(Of Guid), IDictionary(Of String, Object), TimeSpan)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.ServiceBus.Messaging.MessageReceiver.OnAbandon(Microsoft.ServiceBus.Tracing.TrackingContext, System.Collections.Generic.IEnumerable(Of System.Guid), System.Collections.Generic.IDictionary(Of System.String, System.Object), System.TimeSpan)
  name.vb: OnAbandon(TrackingContext, IEnumerable(Of Guid), IDictionary(Of String, Object), TimeSpan)
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.GetProperty``1
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.GetProperty``1
  id: GetProperty``1
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: GetProperty<T>()
  nameWithType: MessageReceiver.GetProperty<T>()
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.GetProperty<T>()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: GetProperty
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 2025
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: ''
  example: []
  syntax:
    content: protected virtual T GetProperty<T>()
    content.vb: Protected Overridable Function GetProperty(Of T) As T
    typeParameters:
    - id: T
      description: ''
    return:
      type: '{T}'
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.GetProperty*
  nameWithType.vb: MessageReceiver.GetProperty(Of T)()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.ServiceBus.Messaging.MessageReceiver.GetProperty(Of T)()
  name.vb: GetProperty(Of T)()
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.Peek
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.Peek
  id: Peek
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: Peek()
  nameWithType: MessageReceiver.Peek()
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.Peek()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Peek
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 2075
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Reads the next message without changing the state of the receiver or the message source.
  example: []
  syntax:
    content: public BrokeredMessage Peek()
    content.vb: Public Function Peek As BrokeredMessage
    return:
      type: Microsoft.ServiceBus.Messaging.BrokeredMessage
      description: The <xref href="Microsoft.ServiceBus.Messaging.BrokeredMessage" data-throw-if-not-resolved="false"></xref> that represents the next message to be read.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.Peek*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.Peek(System.Int64)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.Peek(System.Int64)
  id: Peek(System.Int64)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: Peek(Int64)
  nameWithType: MessageReceiver.Peek(Int64)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.Peek(System.Int64)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: Peek
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 2083
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Reads the next message without changing the state of the receiver or the message source.
  example: []
  syntax:
    content: public BrokeredMessage Peek(long fromSequenceNumber)
    content.vb: Public Function Peek(fromSequenceNumber As Long) As BrokeredMessage
    parameters:
    - id: fromSequenceNumber
      type: System.Int64
      description: The sequence number from where to read the message.
    return:
      type: Microsoft.ServiceBus.Messaging.BrokeredMessage
      description: The <xref href="Microsoft.ServiceBus.Messaging.BrokeredMessage" data-throw-if-not-resolved="false"></xref> that represents the next message to be read.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.Peek*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.PeekAsync
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.PeekAsync
  id: PeekAsync
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: PeekAsync()
  nameWithType: MessageReceiver.PeekAsync()
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.PeekAsync()
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: PeekAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 2090
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously reads the next message without changing the state of the receiver or the message source.
  example: []
  syntax:
    content: public Task<BrokeredMessage> PeekAsync()
    content.vb: Public Function PeekAsync As Task(Of BrokeredMessage)
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.PeekAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.PeekAsync(System.Int64)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.PeekAsync(System.Int64)
  id: PeekAsync(System.Int64)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: PeekAsync(Int64)
  nameWithType: MessageReceiver.PeekAsync(Int64)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.PeekAsync(System.Int64)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: PeekAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 2100
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously reads the next message without changing the state of the receiver or the message source.
  example: []
  syntax:
    content: public Task<BrokeredMessage> PeekAsync(long fromSequenceNumber)
    content.vb: Public Function PeekAsync(fromSequenceNumber As Long) As Task(Of BrokeredMessage)
    parameters:
    - id: fromSequenceNumber
      type: System.Int64
      description: The sequence number from where to read the message.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.PeekAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.PeekBatch(System.Int32)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.PeekBatch(System.Int32)
  id: PeekBatch(System.Int32)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: PeekBatch(Int32)
  nameWithType: MessageReceiver.PeekBatch(Int32)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.PeekBatch(System.Int32)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: PeekBatch
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 2110
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Reads the next batch of message without changing the state of the receiver or the message source.
  example: []
  syntax:
    content: public IEnumerable<BrokeredMessage> PeekBatch(int messageCount)
    content.vb: Public Function PeekBatch(messageCount As Integer) As IEnumerable(Of BrokeredMessage)
    parameters:
    - id: messageCount
      type: System.Int32
      description: The number of message.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: The batch of message to be read.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.PeekBatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.PeekBatch(System.Int64,System.Int32)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.PeekBatch(System.Int64,System.Int32)
  id: PeekBatch(System.Int64,System.Int32)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: PeekBatch(Int64, Int32)
  nameWithType: MessageReceiver.PeekBatch(Int64, Int32)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.PeekBatch(System.Int64, System.Int32)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: PeekBatch
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 2119
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Reads the next batch of message without changing the state of the receiver or the message source.
  example: []
  syntax:
    content: public IEnumerable<BrokeredMessage> PeekBatch(long fromSequenceNumber, int messageCount)
    content.vb: Public Function PeekBatch(fromSequenceNumber As Long, messageCount As Integer) As IEnumerable(Of BrokeredMessage)
    parameters:
    - id: fromSequenceNumber
      type: System.Int64
      description: The sequence number from where to read a batch message.
    - id: messageCount
      type: System.Int32
      description: The number of message.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: The batch of message to be read.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.PeekBatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.PeekBatchAsync(System.Int32)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.PeekBatchAsync(System.Int32)
  id: PeekBatchAsync(System.Int32)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: PeekBatchAsync(Int32)
  nameWithType: MessageReceiver.PeekBatchAsync(Int32)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.PeekBatchAsync(System.Int32)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: PeekBatchAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 2127
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously reads the next batch of message without changing the state of the receiver or the message source.
  example: []
  syntax:
    content: public Task<IEnumerable<BrokeredMessage>> PeekBatchAsync(int messageCount)
    content.vb: Public Function PeekBatchAsync(messageCount As Integer) As Task(Of IEnumerable(Of BrokeredMessage))
    parameters:
    - id: messageCount
      type: System.Int32
      description: The number of message.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.PeekBatchAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.PeekBatchAsync(System.Int64,System.Int32)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.PeekBatchAsync(System.Int64,System.Int32)
  id: PeekBatchAsync(System.Int64,System.Int32)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: PeekBatchAsync(Int64, Int32)
  nameWithType: MessageReceiver.PeekBatchAsync(Int64, Int32)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.PeekBatchAsync(System.Int64, System.Int32)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: PeekBatchAsync
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 2138
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Asynchronously reads the next batch of message without changing the state of the receiver or the message source.
  example: []
  syntax:
    content: public Task<IEnumerable<BrokeredMessage>> PeekBatchAsync(long fromSequenceNumber, int messageCount)
    content.vb: Public Function PeekBatchAsync(fromSequenceNumber As Long, messageCount As Integer) As Task(Of IEnumerable(Of BrokeredMessage))
    parameters:
    - id: fromSequenceNumber
      type: System.Int64
      description: The sequence number from where to read a batch message.
    - id: messageCount
      type: System.Int32
      description: The number of message.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}}
      description: The asynchronous operation.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.PeekBatchAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginPeek(Microsoft.ServiceBus.Tracing.TrackingContext,System.Int64,System.Int32,System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginPeek(Microsoft.ServiceBus.Tracing.TrackingContext,System.Int64,System.Int32,System.TimeSpan,System.AsyncCallback,System.Object)
  id: OnBeginPeek(Microsoft.ServiceBus.Tracing.TrackingContext,System.Int64,System.Int32,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: OnBeginPeek(TrackingContext, Int64, Int32, TimeSpan, AsyncCallback, Object)
  nameWithType: MessageReceiver.OnBeginPeek(TrackingContext, Int64, Int32, TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginPeek(Microsoft.ServiceBus.Tracing.TrackingContext, System.Int64, System.Int32, System.TimeSpan, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnBeginPeek
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 2278
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes upon calling the BeginPeek operation.
  example: []
  syntax:
    content: protected abstract IAsyncResult OnBeginPeek(TrackingContext trackingContext, long fromSequenceNumber, int messageCount, TimeSpan timeout, AsyncCallback callback, object state)
    content.vb: Protected MustOverride Function OnBeginPeek(trackingContext As TrackingContext, fromSequenceNumber As Long, messageCount As Integer, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: trackingContext
      type: Microsoft.ServiceBus.Tracing.TrackingContext
      description: The context information associated by a transaction tracking this operation.
    - id: fromSequenceNumber
      type: System.Int64
      description: The sequence number from where to begin the operation.
    - id: messageCount
      type: System.Int32
      description: The number of message.
    - id: timeout
      type: System.TimeSpan
      description: The time span the operation waits before it times out.
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback" data-throw-if-not-resolved="false"></xref> delegate that references the method to invoke when the operation is complete.
    - id: state
      type: System.Object
      description: A user-defined object that contains state information about the asynchronous operation.
    return:
      type: System.IAsyncResult
      description: The result of the operation.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginPeek*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndPeek(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndPeek(System.IAsyncResult)
  id: OnEndPeek(System.IAsyncResult)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: OnEndPeek(IAsyncResult)
  nameWithType: MessageReceiver.OnEndPeek(IAsyncResult)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndPeek(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnEndPeek
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 2283
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes the EndPeek operation.
  example: []
  syntax:
    content: protected abstract IEnumerable<BrokeredMessage> OnEndPeek(IAsyncResult result)
    content.vb: Protected MustOverride Function OnEndPeek(result As IAsyncResult) As IEnumerable(Of BrokeredMessage)
    parameters:
    - id: result
      type: System.IAsyncResult
      description: The result of the operation.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: A list of messages.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndPeek*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnPeek(Microsoft.ServiceBus.Tracing.TrackingContext,System.Int64,System.Int32,System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnPeek(Microsoft.ServiceBus.Tracing.TrackingContext,System.Int64,System.Int32,System.TimeSpan)
  id: OnPeek(Microsoft.ServiceBus.Tracing.TrackingContext,System.Int64,System.Int32,System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.MessageReceiver
  langs:
  - csharp
  - vb
  name: OnPeek(TrackingContext, Int64, Int32, TimeSpan)
  nameWithType: MessageReceiver.OnPeek(TrackingContext, Int64, Int32, TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnPeek(Microsoft.ServiceBus.Tracing.TrackingContext, System.Int64, System.Int32, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
      branch: ClientSDK_30
      repo: https://msazure.visualstudio.com/One/_git/ServiceBus-Messaging
      commit: ef69c0f00c222ceba94c418de56bba5fe44df979
    id: OnPeek
    path: ../src/msazure-vso-servicebusmessaging/src/product/Clients/Microsoft.ServiceBus.Messaging/Messaging/MessageReceiver.cs
    startLine: 2291
  assemblies:
  - Microsoft.ServiceBus
  namespace: Microsoft.ServiceBus.Messaging
  summary: Executes upon calling the Peek operation.
  example: []
  syntax:
    content: protected virtual IEnumerable<BrokeredMessage> OnPeek(TrackingContext trackingContext, long fromSequenceNumber, int messageCount, TimeSpan timeout)
    content.vb: Protected Overridable Function OnPeek(trackingContext As TrackingContext, fromSequenceNumber As Long, messageCount As Integer, timeout As TimeSpan) As IEnumerable(Of BrokeredMessage)
    parameters:
    - id: trackingContext
      type: Microsoft.ServiceBus.Tracing.TrackingContext
      description: The tracking context.
    - id: fromSequenceNumber
      type: System.Int64
      description: The sequence number from where to peek.
    - id: messageCount
      type: System.Int32
      description: The number of message.
    - id: timeout
      type: System.TimeSpan
      description: The time span the operation waits before it times out.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}
      description: The messages peeked.
  overload: Microsoft.ServiceBus.Messaging.MessageReceiver.OnPeek*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: Microsoft.ServiceBus.Messaging
  commentId: N:Microsoft.ServiceBus.Messaging
  isExternal: false
  name: Microsoft.ServiceBus.Messaging
  nameWithType: Microsoft.ServiceBus.Messaging
  fullName: Microsoft.ServiceBus.Messaging
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.ServiceBus.Messaging.ClientEntity
  commentId: T:Microsoft.ServiceBus.Messaging.ClientEntity
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: ClientEntity
  nameWithType: ClientEntity
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.RetryPolicy
  commentId: P:Microsoft.ServiceBus.Messaging.ClientEntity.RetryPolicy
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: RetryPolicy
  nameWithType: ClientEntity.RetryPolicy
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.RetryPolicy
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.IsClosed
  commentId: P:Microsoft.ServiceBus.Messaging.ClientEntity.IsClosed
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: IsClosed
  nameWithType: ClientEntity.IsClosed
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.IsClosed
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThisLock
  commentId: P:Microsoft.ServiceBus.Messaging.ClientEntity.ThisLock
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: ThisLock
  nameWithType: ClientEntity.ThisLock
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThisLock
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.Abort
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.Abort
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: Abort()
  nameWithType: ClientEntity.Abort()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Abort()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.Abort
    name: Abort
    nameWithType: ClientEntity.Abort
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Abort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.Abort
    name: Abort
    nameWithType: ClientEntity.Abort
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Abort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.Close
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.Close
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: Close()
  nameWithType: ClientEntity.Close()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Close()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.Close
    name: Close
    nameWithType: ClientEntity.Close
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Close
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.Close
    name: Close
    nameWithType: ClientEntity.Close
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Close
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: CloseAsync()
  nameWithType: ClientEntity.CloseAsync()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
    name: CloseAsync
    nameWithType: ClientEntity.CloseAsync
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
    name: CloseAsync
    nameWithType: ClientEntity.CloseAsync
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.CloseAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.Fault
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.Fault
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: Fault()
  nameWithType: ClientEntity.Fault()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Fault()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.Fault
    name: Fault
    nameWithType: ClientEntity.Fault
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Fault
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.Fault
    name: Fault
    nameWithType: ClientEntity.Fault
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.Fault
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen(System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen(System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: true
  name: OnOpen(TimeSpan)
  nameWithType: ClientEntity.OnOpen(TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen(System.TimeSpan)
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen(System.TimeSpan)
    name: OnOpen
    nameWithType: ClientEntity.OnOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen(System.TimeSpan)
    name: OnOpen
    nameWithType: ClientEntity.OnOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose(System.TimeSpan)
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnClose(System.TimeSpan)
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: true
  name: OnClose(TimeSpan)
  nameWithType: ClientEntity.OnClose(TimeSpan)
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose(System.TimeSpan)
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose(System.TimeSpan)
    name: OnClose
    nameWithType: ClientEntity.OnClose
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose(System.TimeSpan)
    name: OnClose
    nameWithType: ClientEntity.OnClose
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnClose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: ThrowIfClosed()
  nameWithType: ClientEntity.ThrowIfClosed()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
    name: ThrowIfClosed
    nameWithType: ClientEntity.ThrowIfClosed
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
    name: ThrowIfClosed
    nameWithType: ClientEntity.ThrowIfClosed
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfClosed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: ThrowIfDisposed()
  nameWithType: ClientEntity.ThrowIfDisposed()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
    name: ThrowIfDisposed
    nameWithType: ClientEntity.ThrowIfDisposed
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
    name: ThrowIfDisposed
    nameWithType: ClientEntity.ThrowIfDisposed
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: ThrowIfDisposedOrNotOpen()
  nameWithType: ClientEntity.ThrowIfDisposedOrNotOpen()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
    name: ThrowIfDisposedOrNotOpen
    nameWithType: ClientEntity.ThrowIfDisposedOrNotOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
    name: ThrowIfDisposedOrNotOpen
    nameWithType: ClientEntity.ThrowIfDisposedOrNotOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrNotOpen
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: ThrowIfFaulted()
  nameWithType: ClientEntity.ThrowIfFaulted()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
    name: ThrowIfFaulted
    nameWithType: ClientEntity.ThrowIfFaulted
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
    name: ThrowIfFaulted
    nameWithType: ClientEntity.ThrowIfFaulted
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfFaulted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: ThrowIfDisposedOrImmutable()
  nameWithType: ClientEntity.ThrowIfDisposedOrImmutable()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
    name: ThrowIfDisposedOrImmutable
    nameWithType: ClientEntity.ThrowIfDisposedOrImmutable
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
    name: ThrowIfDisposedOrImmutable
    nameWithType: ClientEntity.ThrowIfDisposedOrImmutable
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.ThrowIfDisposedOrImmutable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: OnOpened()
  nameWithType: ClientEntity.OnOpened()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
    name: OnOpened
    nameWithType: ClientEntity.OnOpened
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
    name: OnOpened
    nameWithType: ClientEntity.OnOpened
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnOpened
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: OnClosed()
  nameWithType: ClientEntity.OnClosed()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
    name: OnClosed
    nameWithType: ClientEntity.OnClosed
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
    name: OnClosed
    nameWithType: ClientEntity.OnClosed
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnClosed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: OnFaulted()
  nameWithType: ClientEntity.OnFaulted()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
    name: OnFaulted
    nameWithType: ClientEntity.OnFaulted
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
    name: OnFaulted
    nameWithType: ClientEntity.OnFaulted
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnFaulted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: false
  name: OnAbort()
  nameWithType: ClientEntity.OnAbort()
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort()
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
    name: OnAbort
    nameWithType: ClientEntity.OnAbort
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
    name: OnAbort
    nameWithType: ClientEntity.OnAbort
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnAbort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: true
  name: OnBeginOpen(TimeSpan, AsyncCallback, Object)
  nameWithType: ClientEntity.OnBeginOpen(TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen(System.TimeSpan, System.AsyncCallback, System.Object)
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
    name: OnBeginOpen
    nameWithType: ClientEntity.OnBeginOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
    name: OnBeginOpen
    nameWithType: ClientEntity.OnBeginOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen(System.IAsyncResult)
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: true
  name: OnEndOpen(IAsyncResult)
  nameWithType: ClientEntity.OnEndOpen(IAsyncResult)
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen(System.IAsyncResult)
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen(System.IAsyncResult)
    name: OnEndOpen
    nameWithType: ClientEntity.OnEndOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen(System.IAsyncResult)
    name: OnEndOpen
    nameWithType: ClientEntity.OnEndOpen
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndOpen
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: true
  name: OnBeginClose(TimeSpan, AsyncCallback, Object)
  nameWithType: ClientEntity.OnBeginClose(TimeSpan, AsyncCallback, Object)
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose(System.TimeSpan, System.AsyncCallback, System.Object)
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
    name: OnBeginClose
    nameWithType: ClientEntity.OnBeginClose
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
    name: OnBeginClose
    nameWithType: ClientEntity.OnBeginClose
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnBeginClose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose(System.IAsyncResult)
  commentId: M:Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose(System.IAsyncResult)
  parent: Microsoft.ServiceBus.Messaging.ClientEntity
  isExternal: true
  name: OnEndClose(IAsyncResult)
  nameWithType: ClientEntity.OnEndClose(IAsyncResult)
  fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose(System.IAsyncResult)
  spec.csharp:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose(System.IAsyncResult)
    name: OnEndClose
    nameWithType: ClientEntity.OnEndClose
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose(System.IAsyncResult)
    name: OnEndClose
    nameWithType: ClientEntity.OnEndClose
    fullName: Microsoft.ServiceBus.Messaging.ClientEntity.OnEndClose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.ServiceBus.Messaging.MessagingFactory
  commentId: T:Microsoft.ServiceBus.Messaging.MessagingFactory
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: MessagingFactory
  nameWithType: MessagingFactory
  fullName: Microsoft.ServiceBus.Messaging.MessagingFactory
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.Path*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.Path
  isExternal: false
  name: Path
  nameWithType: MessageReceiver.Path
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.Path
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.BatchFlushInterval*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.BatchFlushInterval
  isExternal: false
  name: BatchFlushInterval
  nameWithType: MessageReceiver.BatchFlushInterval
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.BatchFlushInterval
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.LastPeekedSequenceNumber*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.LastPeekedSequenceNumber
  isExternal: false
  name: LastPeekedSequenceNumber
  nameWithType: MessageReceiver.LastPeekedSequenceNumber
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.LastPeekedSequenceNumber
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.Mode*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.Mode
  isExternal: false
  name: Mode
  nameWithType: MessageReceiver.Mode
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.Mode
- uid: Microsoft.ServiceBus.Messaging.ReceiveMode
  commentId: T:Microsoft.ServiceBus.Messaging.ReceiveMode
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: ReceiveMode
  nameWithType: ReceiveMode
  fullName: Microsoft.ServiceBus.Messaging.ReceiveMode
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiverStartTime*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiverStartTime
  isExternal: false
  name: ReceiverStartTime
  nameWithType: MessageReceiver.ReceiverStartTime
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiverStartTime
- uid: System.Nullable{System.DateTime}
  commentId: T:System.Nullable{System.DateTime}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<System.DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullname.vb: System.Nullable(Of System.DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OffsetInclusive*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.OffsetInclusive
  isExternal: false
  name: OffsetInclusive
  nameWithType: MessageReceiver.OffsetInclusive
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OffsetInclusive
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.StartOffset*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.StartOffset
  isExternal: false
  name: StartOffset
  nameWithType: MessageReceiver.StartOffset
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.StartOffset
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.SupportsGetRuntimeEntityDescription*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.SupportsGetRuntimeEntityDescription
  isExternal: false
  name: SupportsGetRuntimeEntityDescription
  nameWithType: MessageReceiver.SupportsGetRuntimeEntityDescription
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.SupportsGetRuntimeEntityDescription
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.BatchingEnabled*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.BatchingEnabled
  isExternal: false
  name: BatchingEnabled
  nameWithType: MessageReceiver.BatchingEnabled
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.BatchingEnabled
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.PrefetchCount*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.PrefetchCount
  isExternal: false
  name: PrefetchCount
  nameWithType: MessageReceiver.PrefetchCount
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.PrefetchCount
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.ServiceBus.Messaging.OnMessageOptions
  commentId: T:Microsoft.ServiceBus.Messaging.OnMessageOptions
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: OnMessageOptions
  nameWithType: OnMessageOptions
  fullName: Microsoft.ServiceBus.Messaging.OnMessageOptions
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnMessage*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.OnMessage
  isExternal: false
  name: OnMessage
  nameWithType: MessageReceiver.OnMessage
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnMessage
- uid: System.Action{Microsoft.ServiceBus.Messaging.BrokeredMessage}
  commentId: T:System.Action{Microsoft.ServiceBus.Messaging.BrokeredMessage}
  parent: System
  definition: System.Action`1
  name: Action<BrokeredMessage>
  nameWithType: Action<BrokeredMessage>
  fullName: System.Action<Microsoft.ServiceBus.Messaging.BrokeredMessage>
  nameWithType.vb: Action(Of BrokeredMessage)
  fullname.vb: System.Action(Of Microsoft.ServiceBus.Messaging.BrokeredMessage)
  name.vb: Action(Of BrokeredMessage)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.BrokeredMessage
    name: BrokeredMessage
    nameWithType: BrokeredMessage
    fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.BrokeredMessage
    name: BrokeredMessage
    nameWithType: BrokeredMessage
    fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullname.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnMessageAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.OnMessageAsync
  isExternal: false
  name: OnMessageAsync
  nameWithType: MessageReceiver.OnMessageAsync
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnMessageAsync
- uid: System.Func{Microsoft.ServiceBus.Messaging.BrokeredMessage,System.Threading.Tasks.Task}
  commentId: T:System.Func{Microsoft.ServiceBus.Messaging.BrokeredMessage,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`2
  name: Func<BrokeredMessage, Task>
  nameWithType: Func<BrokeredMessage, Task>
  fullName: System.Func<Microsoft.ServiceBus.Messaging.BrokeredMessage, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of BrokeredMessage, Task)
  fullname.vb: System.Func(Of Microsoft.ServiceBus.Messaging.BrokeredMessage, System.Threading.Tasks.Task)
  name.vb: Func(Of BrokeredMessage, Task)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.BrokeredMessage
    name: BrokeredMessage
    nameWithType: BrokeredMessage
    fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.BrokeredMessage
    name: BrokeredMessage
    nameWithType: BrokeredMessage
    fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.Abandon*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.Abandon
  isExternal: false
  name: Abandon
  nameWithType: MessageReceiver.Abandon
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.Abandon
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Object>
  nameWithType: IDictionary<String, Object>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>
  nameWithType.vb: IDictionary(Of String, Object)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object)
  name.vb: IDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.AbandonAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.AbandonAsync
  isExternal: false
  name: AbandonAsync
  nameWithType: MessageReceiver.AbandonAsync
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.AbandonAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.ServiceBus.Messaging.BrokeredMessage
  commentId: T:Microsoft.ServiceBus.Messaging.BrokeredMessage
  parent: Microsoft.ServiceBus.Messaging
  isExternal: false
  name: BrokeredMessage
  nameWithType: BrokeredMessage
  fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.Complete*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.Complete
  isExternal: false
  name: Complete
  nameWithType: MessageReceiver.Complete
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.Complete
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.CompleteAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.CompleteAsync
  isExternal: false
  name: CompleteAsync
  nameWithType: MessageReceiver.CompleteAsync
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.CompleteAsync
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.CompleteBatch*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.CompleteBatch
  isExternal: false
  name: CompleteBatch
  nameWithType: MessageReceiver.CompleteBatch
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.CompleteBatch
- uid: System.Collections.Generic.IEnumerable{System.Guid}
  commentId: T:System.Collections.Generic.IEnumerable{System.Guid}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Guid>
  nameWithType: IEnumerable<Guid>
  fullName: System.Collections.Generic.IEnumerable<System.Guid>
  nameWithType.vb: IEnumerable(Of Guid)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Guid)
  name.vb: IEnumerable(Of Guid)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.CompleteBatchAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.CompleteBatchAsync
  isExternal: false
  name: CompleteBatchAsync
  nameWithType: MessageReceiver.CompleteBatchAsync
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.CompleteBatchAsync
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.Defer*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.Defer
  isExternal: false
  name: Defer
  nameWithType: MessageReceiver.Defer
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.Defer
- uid: Microsoft.ServiceBus.Common.Fx.Exception
  commentId: P:Microsoft.ServiceBus.Common.Fx.Exception
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.DeferAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.DeferAsync
  isExternal: false
  name: DeferAsync
  nameWithType: MessageReceiver.DeferAsync
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.DeferAsync
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.Receive*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.Receive
  isExternal: false
  name: Receive
  nameWithType: MessageReceiver.Receive
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.Receive
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatch*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatch
  isExternal: false
  name: ReceiveBatch
  nameWithType: MessageReceiver.ReceiveBatch
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatch
- uid: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<BrokeredMessage>
  nameWithType: IEnumerable<BrokeredMessage>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.BrokeredMessage>
  nameWithType.vb: IEnumerable(Of BrokeredMessage)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.BrokeredMessage)
  name.vb: IEnumerable(Of BrokeredMessage)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.BrokeredMessage
    name: BrokeredMessage
    nameWithType: BrokeredMessage
    fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.BrokeredMessage
    name: BrokeredMessage
    nameWithType: BrokeredMessage
    fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveAsync
  isExternal: false
  name: ReceiveAsync
  nameWithType: MessageReceiver.ReceiveAsync
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveAsync
- uid: System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.BrokeredMessage}
  commentId: T:System.Threading.Tasks.Task{Microsoft.ServiceBus.Messaging.BrokeredMessage}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<BrokeredMessage>
  nameWithType: Task<BrokeredMessage>
  fullName: System.Threading.Tasks.Task<Microsoft.ServiceBus.Messaging.BrokeredMessage>
  nameWithType.vb: Task(Of BrokeredMessage)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.ServiceBus.Messaging.BrokeredMessage)
  name.vb: Task(Of BrokeredMessage)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.BrokeredMessage
    name: BrokeredMessage
    nameWithType: BrokeredMessage
    fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.BrokeredMessage
    name: BrokeredMessage
    nameWithType: BrokeredMessage
    fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Int64}
  commentId: T:System.Collections.Generic.IEnumerable{System.Int64}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Int64>
  nameWithType: IEnumerable<Int64>
  fullName: System.Collections.Generic.IEnumerable<System.Int64>
  nameWithType.vb: IEnumerable(Of Int64)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Int64)
  name.vb: IEnumerable(Of Int64)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatchAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatchAsync
  isExternal: false
  name: ReceiveBatchAsync
  nameWithType: MessageReceiver.ReceiveBatchAsync
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.ReceiveBatchAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<BrokeredMessage>>
  nameWithType: Task<IEnumerable<BrokeredMessage>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.BrokeredMessage>>
  nameWithType.vb: Task(Of IEnumerable(Of BrokeredMessage))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.BrokeredMessage))
  name.vb: Task(Of IEnumerable(Of BrokeredMessage))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.BrokeredMessage
    name: BrokeredMessage
    nameWithType: BrokeredMessage
    fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.BrokeredMessage
    name: BrokeredMessage
    nameWithType: BrokeredMessage
    fullName: Microsoft.ServiceBus.Messaging.BrokeredMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetter*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetter
  isExternal: false
  name: DeadLetter
  nameWithType: MessageReceiver.DeadLetter
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetter
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetterAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetterAsync
  isExternal: false
  name: DeadLetterAsync
  nameWithType: MessageReceiver.DeadLetterAsync
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetterAsync
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.GetLockToken*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.GetLockToken
  isExternal: false
  name: GetLockToken
  nameWithType: MessageReceiver.GetLockToken
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.GetLockToken
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.GetLockTokens*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.GetLockTokens
  isExternal: false
  name: GetLockTokens
  nameWithType: MessageReceiver.GetLockTokens
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.GetLockTokens
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginTryReceive*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginTryReceive
  isExternal: false
  name: OnBeginTryReceive
  nameWithType: MessageReceiver.OnBeginTryReceive
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginTryReceive
- uid: Microsoft.ServiceBus.Tracing.TrackingContext
  commentId: T:Microsoft.ServiceBus.Tracing.TrackingContext
  parent: Microsoft.ServiceBus.Tracing
  isExternal: false
  name: TrackingContext
  nameWithType: TrackingContext
  fullName: Microsoft.ServiceBus.Tracing.TrackingContext
- uid: System.AsyncCallback
  commentId: T:System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.IAsyncResult
  commentId: T:System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: Microsoft.ServiceBus.Tracing
  commentId: N:Microsoft.ServiceBus.Tracing
  isExternal: false
  name: Microsoft.ServiceBus.Tracing
  nameWithType: Microsoft.ServiceBus.Tracing
  fullName: Microsoft.ServiceBus.Tracing
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndTryReceive*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndTryReceive
  isExternal: false
  name: OnEndTryReceive
  nameWithType: MessageReceiver.OnEndTryReceive
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndTryReceive
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginTryReceiveEventData*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginTryReceiveEventData
  isExternal: false
  name: OnBeginTryReceiveEventData
  nameWithType: MessageReceiver.OnBeginTryReceiveEventData
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginTryReceiveEventData
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndTryReceiveEventData*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndTryReceiveEventData
  isExternal: false
  name: OnEndTryReceiveEventData
  nameWithType: MessageReceiver.OnEndTryReceiveEventData
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndTryReceiveEventData
- uid: System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.EventData}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.EventData}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<EventData>
  nameWithType: IEnumerable<EventData>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.ServiceBus.Messaging.EventData>
  nameWithType.vb: IEnumerable(Of EventData)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.ServiceBus.Messaging.EventData)
  name.vb: IEnumerable(Of EventData)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceBus.Messaging.EventData
    name: EventData
    nameWithType: EventData
    fullName: Microsoft.ServiceBus.Messaging.EventData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceBus.Messaging.EventData
    name: EventData
    nameWithType: EventData
    fullName: Microsoft.ServiceBus.Messaging.EventData
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginTryReceive2*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginTryReceive2
  isExternal: false
  name: OnBeginTryReceive2
  nameWithType: MessageReceiver.OnBeginTryReceive2
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginTryReceive2
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndTryReceive2*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndTryReceive2
  isExternal: false
  name: OnEndTryReceive2
  nameWithType: MessageReceiver.OnEndTryReceive2
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndTryReceive2
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnTryReceive*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.OnTryReceive
  isExternal: false
  name: OnTryReceive
  nameWithType: MessageReceiver.OnTryReceive
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnTryReceive
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginDefer*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginDefer
  isExternal: false
  name: OnBeginDefer
  nameWithType: MessageReceiver.OnBeginDefer
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginDefer
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndDefer*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndDefer
  isExternal: false
  name: OnEndDefer
  nameWithType: MessageReceiver.OnEndDefer
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndDefer
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnDefer*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.OnDefer
  isExternal: false
  name: OnDefer
  nameWithType: MessageReceiver.OnDefer
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnDefer
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginDeadLetter*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginDeadLetter
  isExternal: false
  name: OnBeginDeadLetter
  nameWithType: MessageReceiver.OnBeginDeadLetter
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginDeadLetter
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndDeadLetter*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndDeadLetter
  isExternal: false
  name: OnEndDeadLetter
  nameWithType: MessageReceiver.OnEndDeadLetter
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndDeadLetter
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnDeadLetter*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.OnDeadLetter
  isExternal: false
  name: OnDeadLetter
  nameWithType: MessageReceiver.OnDeadLetter
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnDeadLetter
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginRenewMessageLocks*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginRenewMessageLocks
  isExternal: false
  name: OnBeginRenewMessageLocks
  nameWithType: MessageReceiver.OnBeginRenewMessageLocks
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginRenewMessageLocks
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndRenewMessageLocks*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndRenewMessageLocks
  isExternal: false
  name: OnEndRenewMessageLocks
  nameWithType: MessageReceiver.OnEndRenewMessageLocks
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndRenewMessageLocks
- uid: System.Collections.Generic.IEnumerable{System.DateTime}
  commentId: T:System.Collections.Generic.IEnumerable{System.DateTime}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<DateTime>
  nameWithType: IEnumerable<DateTime>
  fullName: System.Collections.Generic.IEnumerable<System.DateTime>
  nameWithType.vb: IEnumerable(Of DateTime)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.DateTime)
  name.vb: IEnumerable(Of DateTime)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnRenewMessageLocks*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.OnRenewMessageLocks
  isExternal: false
  name: OnRenewMessageLocks
  nameWithType: MessageReceiver.OnRenewMessageLocks
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnRenewMessageLocks
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginComplete*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginComplete
  isExternal: false
  name: OnBeginComplete
  nameWithType: MessageReceiver.OnBeginComplete
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginComplete
- uid: System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}}
  commentId: T:System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ArraySegment<Byte>>
  nameWithType: IEnumerable<ArraySegment<Byte>>
  fullName: System.Collections.Generic.IEnumerable<System.ArraySegment<System.Byte>>
  nameWithType.vb: IEnumerable(Of ArraySegment(Of Byte))
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.ArraySegment(Of System.Byte))
  name.vb: IEnumerable(Of ArraySegment(Of Byte))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndComplete*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndComplete
  isExternal: false
  name: OnEndComplete
  nameWithType: MessageReceiver.OnEndComplete
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndComplete
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnComplete*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.OnComplete
  isExternal: false
  name: OnComplete
  nameWithType: MessageReceiver.OnComplete
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnComplete
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginAbandon*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginAbandon
  isExternal: false
  name: OnBeginAbandon
  nameWithType: MessageReceiver.OnBeginAbandon
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginAbandon
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndAbandon*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndAbandon
  isExternal: false
  name: OnEndAbandon
  nameWithType: MessageReceiver.OnEndAbandon
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndAbandon
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnAbandon*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.OnAbandon
  isExternal: false
  name: OnAbandon
  nameWithType: MessageReceiver.OnAbandon
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnAbandon
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.GetProperty*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.GetProperty
  isExternal: false
  name: GetProperty<T>
  nameWithType: MessageReceiver.GetProperty<T>
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.GetProperty<T>
  nameWithType.vb: MessageReceiver.GetProperty(Of T)
  fullname.vb: Microsoft.ServiceBus.Messaging.MessageReceiver.GetProperty(Of T)
  name.vb: GetProperty(Of T)
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.Peek*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.Peek
  isExternal: false
  name: Peek
  nameWithType: MessageReceiver.Peek
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.Peek
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.PeekAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.PeekAsync
  isExternal: false
  name: PeekAsync
  nameWithType: MessageReceiver.PeekAsync
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.PeekAsync
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.PeekBatch*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.PeekBatch
  isExternal: false
  name: PeekBatch
  nameWithType: MessageReceiver.PeekBatch
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.PeekBatch
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.PeekBatchAsync*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.PeekBatchAsync
  isExternal: false
  name: PeekBatchAsync
  nameWithType: MessageReceiver.PeekBatchAsync
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.PeekBatchAsync
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginPeek*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginPeek
  isExternal: false
  name: OnBeginPeek
  nameWithType: MessageReceiver.OnBeginPeek
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginPeek
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndPeek*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndPeek
  isExternal: false
  name: OnEndPeek
  nameWithType: MessageReceiver.OnEndPeek
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndPeek
- uid: Microsoft.ServiceBus.Messaging.MessageReceiver.OnPeek*
  commentId: Overload:Microsoft.ServiceBus.Messaging.MessageReceiver.OnPeek
  isExternal: false
  name: OnPeek
  nameWithType: MessageReceiver.OnPeek
  fullName: Microsoft.ServiceBus.Messaging.MessageReceiver.OnPeek
