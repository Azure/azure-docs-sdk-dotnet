### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceFabric.Data.ITransaction
  commentId: T:Microsoft.ServiceFabric.Data.ITransaction
  id: ITransaction
  parent: Microsoft.ServiceFabric.Data
  children:
  - Microsoft.ServiceFabric.Data.ITransaction.Abort
  - Microsoft.ServiceFabric.Data.ITransaction.CommitAsync
  - Microsoft.ServiceFabric.Data.ITransaction.CommitSequenceNumber
  - Microsoft.ServiceFabric.Data.ITransaction.GetVisibilitySequenceNumberAsync
  - Microsoft.ServiceFabric.Data.ITransaction.TransactionId
  langs:
  - csharp
  - vb
  name: ITransaction
  nameWithType: ITransaction
  fullName: Microsoft.ServiceFabric.Data.ITransaction
  type: Interface
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/ITransaction.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ITransaction
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/ITransaction.cs
    startLine: 81
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nA sequence of operations performed as a single logical unit of work.\n"
  remarks: "\nA transaction must exhibit the following ACID properties. (see: https://technet.microsoft.com/en-us/library/ms190612)\n<ul><li>\nAtomicity - A transaction must be an atomic unit of work; either all of its data modifications are\n            performed, or none of them is performed.\n</li><li>\n    Consistency - When completed, a transaction must leave all data in a consistent state. All\n    internal data structures must be correct at the end of the transaction.\n</li><li>\n    Isolation - Modifications made by concurrent transactions must be isolated from the\n    modifications made by any other concurrent transactions. \n    The isolation level used for an operation within a <xref href=\"Microsoft.ServiceFabric.Data.ITransaction\" data-throw-if-not-resolved=\"false\"></xref> is determined by the\n<xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> performing the operation.\n</li><li>\n    Durability - After a transaction has completed, its effects are permanently in place in the system.\n    The modifications persist even in the event of a system failure.\n</li></ul>\n\n<p>\nAny instance member of this type are not guaranteed to be thread safe. \nThis makes transactions the unit of concurrency: Users can have multiple transactions in-flight at any given point of time but for a given transaction each API must be called one at a time.\nSo all Reliable Collection APIs that take in a transaction and return a Task, must be awaited one at a time.\n</p>\n\n<p>\nFollowing is an example of a correct usage."\n<pre><code>using (var txn = this.StateManager.CreateTransaction())\n{\n    var dequeueOutput = await concurrentQueue.DequeueAsync(txn, cancellationToken);\n    var dequeueOutput = await concurrentQueue.DequeueAsync(txn, cancellationToken);\n    await txn.CommitAsync();\n}</code></pre>\n</p>\n\n<p>\nFollowing is an example of incorrect usage that has undefined behavior.\n<pre><code>using (var txn = this.StateManager.CreateTransaction())\n{\n    List&lt;Task&gt; taskList = new List&lt;Task&gt;();\n    taskList.Add(concurrentQueue.DequeueAsync(txn, cancellationToken));\n    taskList.Add(concurrentQueue.DequeueAsync(txn, cancellationToken));\n\n    await Task.WhenAll(taskList);\n    await txn.CommitAsync();\n}</code></pre>\n</p>\n
  example: []
  syntax:
    content: 'public interface ITransaction : IDisposable'
    content.vb: >-
      Public Interface ITransaction
          Inherits IDisposable
  inheritedMembers:
  - System.IDisposable.Dispose
  extensionMethods:
  - Microsoft.ServiceFabric.Data.ITransaction.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.ServiceFabric.Data.ITransaction.CommitSequenceNumber
  commentId: P:Microsoft.ServiceFabric.Data.ITransaction.CommitSequenceNumber
  id: CommitSequenceNumber
  parent: Microsoft.ServiceFabric.Data.ITransaction
  langs:
  - csharp
  - vb
  name: CommitSequenceNumber
  nameWithType: ITransaction.CommitSequenceNumber
  fullName: Microsoft.ServiceFabric.Data.ITransaction.CommitSequenceNumber
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/ITransaction.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CommitSequenceNumber
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/ITransaction.cs
    startLine: 89
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nSequence number for the commit operation.\n"
  example: []
  syntax:
    content: long CommitSequenceNumber { get; }
    content.vb: ReadOnly Property CommitSequenceNumber As Long
    parameters: []
    return:
      type: System.Int64
      description: "\nThe sequence number at which the the transaction was committed.\n"
  overload: Microsoft.ServiceFabric.Data.ITransaction.CommitSequenceNumber*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.ServiceFabric.Data.ITransaction.CommitAsync
  commentId: M:Microsoft.ServiceFabric.Data.ITransaction.CommitAsync
  id: CommitAsync
  parent: Microsoft.ServiceFabric.Data.ITransaction
  langs:
  - csharp
  - vb
  name: CommitAsync()
  nameWithType: ITransaction.CommitAsync()
  fullName: Microsoft.ServiceFabric.Data.ITransaction.CommitAsync()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/ITransaction.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CommitAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/ITransaction.cs
    startLine: 106
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nCommit the transaction.\n"
  remarks: "\nYou cannot abort a transaction once it has been committed, because all modifications\nhave been persisted and replicated.\n"
  example: []
  syntax:
    content: Task CommitAsync()
    content.vb: Function CommitAsync As Task
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous commit operation. \n"
  overload: Microsoft.ServiceFabric.Data.ITransaction.CommitAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The transaction has already been committed or aborted.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: "\nThe transaction includes updates to state and the replica role is not Primary.\nOnly Primary replicas are given write status.\n"
- uid: Microsoft.ServiceFabric.Data.ITransaction.Abort
  commentId: M:Microsoft.ServiceFabric.Data.ITransaction.Abort
  id: Abort
  parent: Microsoft.ServiceFabric.Data.ITransaction
  langs:
  - csharp
  - vb
  name: Abort()
  nameWithType: ITransaction.Abort()
  fullName: Microsoft.ServiceFabric.Data.ITransaction.Abort()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/ITransaction.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Abort
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/ITransaction.cs
    startLine: 116
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nAbort (rolls back) the transaction.\n"
  example: []
  syntax:
    content: void Abort()
    content.vb: Sub Abort
  overload: Microsoft.ServiceFabric.Data.ITransaction.Abort*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The transaction has already been committed or aborted.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: "\nThe transaction includes updates to state and the replica role is not Primary.\nOnly Primary replicas are given write status.\n"
- uid: Microsoft.ServiceFabric.Data.ITransaction.TransactionId
  commentId: P:Microsoft.ServiceFabric.Data.ITransaction.TransactionId
  id: TransactionId
  parent: Microsoft.ServiceFabric.Data.ITransaction
  langs:
  - csharp
  - vb
  name: TransactionId
  nameWithType: ITransaction.TransactionId
  fullName: Microsoft.ServiceFabric.Data.ITransaction.TransactionId
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/ITransaction.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TransactionId
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/ITransaction.cs
    startLine: 122
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nGets a value identifying the transaction.\n"
  example: []
  syntax:
    content: long TransactionId { get; }
    content.vb: ReadOnly Property TransactionId As Long
    parameters: []
    return:
      type: System.Int64
      description: The transaction id.
  overload: Microsoft.ServiceFabric.Data.ITransaction.TransactionId*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.ServiceFabric.Data.ITransaction.GetVisibilitySequenceNumberAsync
  commentId: M:Microsoft.ServiceFabric.Data.ITransaction.GetVisibilitySequenceNumberAsync
  id: GetVisibilitySequenceNumberAsync
  parent: Microsoft.ServiceFabric.Data.ITransaction
  langs:
  - csharp
  - vb
  name: GetVisibilitySequenceNumberAsync()
  nameWithType: ITransaction.GetVisibilitySequenceNumberAsync()
  fullName: Microsoft.ServiceFabric.Data.ITransaction.GetVisibilitySequenceNumberAsync()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/ITransaction.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetVisibilitySequenceNumberAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/ITransaction.cs
    startLine: 128
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nGets the visibility sequence number.\n"
  example: []
  syntax:
    content: Task<long> GetVisibilitySequenceNumberAsync()
    content.vb: Function GetVisibilitySequenceNumberAsync As Task(Of Long)
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: The visibility sequence number.
  overload: Microsoft.ServiceFabric.Data.ITransaction.GetVisibilitySequenceNumberAsync*
references:
- uid: Microsoft.ServiceFabric.Data.ITransaction
  commentId: T:Microsoft.ServiceFabric.Data.ITransaction
  parent: Microsoft.ServiceFabric.Data
  isExternal: false
  name: ITransaction
  nameWithType: ITransaction
  fullName: Microsoft.ServiceFabric.Data.ITransaction
- uid: Microsoft.ServiceFabric.Data.IReliableState
  commentId: T:Microsoft.ServiceFabric.Data.IReliableState
  parent: Microsoft.ServiceFabric.Data
  isExternal: false
  name: IReliableState
  nameWithType: IReliableState
  fullName: Microsoft.ServiceFabric.Data.IReliableState
- uid: Microsoft.ServiceFabric.Data
  commentId: N:Microsoft.ServiceFabric.Data
  isExternal: false
  name: Microsoft.ServiceFabric.Data
  nameWithType: Microsoft.ServiceFabric.Data
  fullName: Microsoft.ServiceFabric.Data
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.ITransaction.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<ITransaction>()
  nameWithType: ByteArraySerializer.Serialize<ITransaction>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Data.ITransaction>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of ITransaction)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Data.ITransaction)()
  name.vb: Serialize(Of ITransaction)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<ITransaction>
    nameWithType: ByteArraySerializer.Serialize<ITransaction>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Data.ITransaction>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of ITransaction)
    nameWithType: ByteArraySerializer.Serialize(Of ITransaction)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Data.ITransaction)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: Microsoft.ServiceFabric.Data.ITransaction.CommitSequenceNumber*
  commentId: Overload:Microsoft.ServiceFabric.Data.ITransaction.CommitSequenceNumber
  isExternal: false
  name: CommitSequenceNumber
  nameWithType: ITransaction.CommitSequenceNumber
  fullName: Microsoft.ServiceFabric.Data.ITransaction.CommitSequenceNumber
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.ServiceFabric.Data.ITransaction.CommitAsync*
  commentId: Overload:Microsoft.ServiceFabric.Data.ITransaction.CommitAsync
  isExternal: false
  name: CommitAsync
  nameWithType: ITransaction.CommitAsync
  fullName: Microsoft.ServiceFabric.Data.ITransaction.CommitAsync
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  parent: System
  isExternal: true
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.Fabric.FabricNotPrimaryException
  commentId: T:System.Fabric.FabricNotPrimaryException
  isExternal: false
  name: FabricNotPrimaryException
  nameWithType: FabricNotPrimaryException
  fullName: System.Fabric.FabricNotPrimaryException
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.ServiceFabric.Data.ITransaction.Abort*
  commentId: Overload:Microsoft.ServiceFabric.Data.ITransaction.Abort
  isExternal: false
  name: Abort
  nameWithType: ITransaction.Abort
  fullName: Microsoft.ServiceFabric.Data.ITransaction.Abort
- uid: Microsoft.ServiceFabric.Data.ITransaction.TransactionId*
  commentId: Overload:Microsoft.ServiceFabric.Data.ITransaction.TransactionId
  isExternal: false
  name: TransactionId
  nameWithType: ITransaction.TransactionId
  fullName: Microsoft.ServiceFabric.Data.ITransaction.TransactionId
- uid: Microsoft.ServiceFabric.Data.ITransaction.GetVisibilitySequenceNumberAsync*
  commentId: Overload:Microsoft.ServiceFabric.Data.ITransaction.GetVisibilitySequenceNumberAsync
  isExternal: false
  name: GetVisibilitySequenceNumberAsync
  nameWithType: ITransaction.GetVisibilitySequenceNumberAsync
  fullName: Microsoft.ServiceFabric.Data.ITransaction.GetVisibilitySequenceNumberAsync
- uid: System.Threading.Tasks.Task{System.Int64}
  commentId: T:System.Threading.Tasks.Task{System.Int64}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int64>
  nameWithType: Task<Int64>
  fullName: System.Threading.Tasks.Task<System.Int64>
  nameWithType.vb: Task(Of Int64)
  fullname.vb: System.Threading.Tasks.Task(Of System.Int64)
  name.vb: Task(Of Int64)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
