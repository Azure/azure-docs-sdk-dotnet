<Type Name="DatabaseResource" FullName="Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource">
  <TypeSignature Language="C#" Value="public class DatabaseResource : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DatabaseResource extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource" />
  <TypeSignature Language="VB.NET" Value="Public Class DatabaseResource&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type DatabaseResource = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.RedisEnterpriseCache</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A Class representing a Database along with the instance operations that can be performed on it.
            If you have a <see cref="T:Azure.Core.ResourceIdentifier" /> you can construct a <see cref="T:Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource" />
            from an instance of <see cref="T:Azure.ResourceManager.ArmClient" /> using the GetDatabaseResource method.
            Otherwise you can get one from its parent resource <see cref="T:Azure.ResourceManager.RedisEnterpriseCache.ClusterResource" /> using the GetDatabase method.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DatabaseResource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RedisEnterpriseCache</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateResourceIdentifier">
      <MemberSignature Language="C#" Value="public static Azure.Core.ResourceIdentifier CreateResourceIdentifier (string subscriptionId, string resourceGroupName, string clusterName, string databaseName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Core.ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string clusterName, string databaseName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateResourceIdentifier (subscriptionId As String, resourceGroupName As String, clusterName As String, databaseName As String) As ResourceIdentifier" />
      <MemberSignature Language="F#" Value="static member CreateResourceIdentifier : string * string * string * string -&gt; Azure.Core.ResourceIdentifier" Usage="Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource.CreateResourceIdentifier (subscriptionId, resourceGroupName, clusterName, databaseName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RedisEnterpriseCache</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.ResourceIdentifier</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionId" Type="System.String" />
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="clusterName" Type="System.String" />
        <Parameter Name="databaseName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="subscriptionId">To be added.</param>
        <param name="resourceGroupName">To be added.</param>
        <param name="clusterName">To be added.</param>
        <param name="databaseName">To be added.</param>
        <summary> Generate the resource identifier of a <see cref="T:Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource" /> instance. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.RedisEnterpriseCache.DatabaseData Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.ResourceManager.RedisEnterpriseCache.DatabaseData Data" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource.Data" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Data As DatabaseData" />
      <MemberSignature Language="F#" Value="member this.Data : Azure.ResourceManager.RedisEnterpriseCache.DatabaseData" Usage="Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RedisEnterpriseCache</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.RedisEnterpriseCache.DatabaseData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets the data representing this Feature. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation Delete (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation Delete(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource.Delete(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Delete (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation" />
      <MemberSignature Language="F#" Value="abstract member Delete : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&#xA;override this.Delete : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation" Usage="databaseResource.Delete (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RedisEnterpriseCache</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Deletes a single database
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redisEnterprise/{clusterName}/databases/{databaseName}
            Operation Id: Databases_Delete
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt; DeleteAsync (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation&gt; DeleteAsync(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource.DeleteAsync(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteAsync (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;&#xA;override this.DeleteAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;" Usage="databaseResource.DeleteAsync (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RedisEnterpriseCache</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Deletes a single database
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redisEnterprise/{clusterName}/databases/{databaseName}
            Operation Id: Databases_Delete
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Export">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation Export (Azure.WaitUntil waitUntil, Azure.ResourceManager.RedisEnterpriseCache.Models.ExportClusterContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation Export(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.RedisEnterpriseCache.Models.ExportClusterContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource.Export(Azure.WaitUntil,Azure.ResourceManager.RedisEnterpriseCache.Models.ExportClusterContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Export (waitUntil As WaitUntil, content As ExportClusterContent, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation" />
      <MemberSignature Language="F#" Value="abstract member Export : Azure.WaitUntil * Azure.ResourceManager.RedisEnterpriseCache.Models.ExportClusterContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&#xA;override this.Export : Azure.WaitUntil * Azure.ResourceManager.RedisEnterpriseCache.Models.ExportClusterContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation" Usage="databaseResource.Export (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RedisEnterpriseCache</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.ResourceManager.RedisEnterpriseCache.Models.ExportClusterContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> Storage information for exporting into the cluster. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Exports a database file from target database.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redisEnterprise/{clusterName}/databases/{databaseName}/export
            Operation Id: Databases_Export
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ExportAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt; ExportAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.RedisEnterpriseCache.Models.ExportClusterContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation&gt; ExportAsync(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.RedisEnterpriseCache.Models.ExportClusterContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource.ExportAsync(Azure.WaitUntil,Azure.ResourceManager.RedisEnterpriseCache.Models.ExportClusterContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExportAsync (waitUntil As WaitUntil, content As ExportClusterContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation)" />
      <MemberSignature Language="F#" Value="abstract member ExportAsync : Azure.WaitUntil * Azure.ResourceManager.RedisEnterpriseCache.Models.ExportClusterContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;&#xA;override this.ExportAsync : Azure.WaitUntil * Azure.ResourceManager.RedisEnterpriseCache.Models.ExportClusterContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;" Usage="databaseResource.ExportAsync (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RedisEnterpriseCache</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.ResourceManager.RedisEnterpriseCache.Models.ExportClusterContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> Storage information for exporting into the cluster. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Exports a database file from target database.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redisEnterprise/{clusterName}/databases/{databaseName}/export
            Operation Id: Databases_Export
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ForceUnlink">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation ForceUnlink (Azure.WaitUntil waitUntil, Azure.ResourceManager.RedisEnterpriseCache.Models.ForceUnlinkContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation ForceUnlink(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.RedisEnterpriseCache.Models.ForceUnlinkContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource.ForceUnlink(Azure.WaitUntil,Azure.ResourceManager.RedisEnterpriseCache.Models.ForceUnlinkContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ForceUnlink (waitUntil As WaitUntil, content As ForceUnlinkContent, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation" />
      <MemberSignature Language="F#" Value="abstract member ForceUnlink : Azure.WaitUntil * Azure.ResourceManager.RedisEnterpriseCache.Models.ForceUnlinkContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&#xA;override this.ForceUnlink : Azure.WaitUntil * Azure.ResourceManager.RedisEnterpriseCache.Models.ForceUnlinkContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation" Usage="databaseResource.ForceUnlink (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RedisEnterpriseCache</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.ResourceManager.RedisEnterpriseCache.Models.ForceUnlinkContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> Information identifying the database to be unlinked. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Forcibly removes the link to the specified database resource.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redisEnterprise/{clusterName}/databases/{databaseName}/forceUnlink
            Operation Id: Databases_ForceUnlink
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ForceUnlinkAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt; ForceUnlinkAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.RedisEnterpriseCache.Models.ForceUnlinkContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation&gt; ForceUnlinkAsync(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.RedisEnterpriseCache.Models.ForceUnlinkContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource.ForceUnlinkAsync(Azure.WaitUntil,Azure.ResourceManager.RedisEnterpriseCache.Models.ForceUnlinkContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ForceUnlinkAsync (waitUntil As WaitUntil, content As ForceUnlinkContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation)" />
      <MemberSignature Language="F#" Value="abstract member ForceUnlinkAsync : Azure.WaitUntil * Azure.ResourceManager.RedisEnterpriseCache.Models.ForceUnlinkContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;&#xA;override this.ForceUnlinkAsync : Azure.WaitUntil * Azure.ResourceManager.RedisEnterpriseCache.Models.ForceUnlinkContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;" Usage="databaseResource.ForceUnlinkAsync (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RedisEnterpriseCache</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.ResourceManager.RedisEnterpriseCache.Models.ForceUnlinkContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> Information identifying the database to be unlinked. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Forcibly removes the link to the specified database resource.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redisEnterprise/{clusterName}/databases/{databaseName}/forceUnlink
            Operation Id: Databases_ForceUnlink
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource&gt; Get (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource&gt; Get(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource.Get(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Get (Optional cancellationToken As CancellationToken = Nothing) As Response(Of DatabaseResource)" />
      <MemberSignature Language="F#" Value="abstract member Get : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource&gt;&#xA;override this.Get : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource&gt;" Usage="databaseResource.Get cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RedisEnterpriseCache</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets information about a database in a RedisEnterprise cluster.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redisEnterprise/{clusterName}/databases/{databaseName}
            Operation Id: Databases_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource&gt;&gt; GetAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource&gt;&gt; GetAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource.GetAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DatabaseResource))" />
      <MemberSignature Language="F#" Value="abstract member GetAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource&gt;&gt;&#xA;override this.GetAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource&gt;&gt;" Usage="databaseResource.GetAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RedisEnterpriseCache</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets information about a database in a RedisEnterprise cluster.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redisEnterprise/{clusterName}/databases/{databaseName}
            Operation Id: Databases_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKeys">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.RedisEnterpriseCache.Models.AccessKeys&gt; GetKeys (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.RedisEnterpriseCache.Models.AccessKeys&gt; GetKeys(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource.GetKeys(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetKeys (Optional cancellationToken As CancellationToken = Nothing) As Response(Of AccessKeys)" />
      <MemberSignature Language="F#" Value="abstract member GetKeys : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.RedisEnterpriseCache.Models.AccessKeys&gt;&#xA;override this.GetKeys : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.RedisEnterpriseCache.Models.AccessKeys&gt;" Usage="databaseResource.GetKeys cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RedisEnterpriseCache</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.RedisEnterpriseCache.Models.AccessKeys&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Retrieves the access keys for the RedisEnterprise database.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redisEnterprise/{clusterName}/databases/{databaseName}/listKeys
            Operation Id: Databases_ListKeys
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKeysAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RedisEnterpriseCache.Models.AccessKeys&gt;&gt; GetKeysAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.RedisEnterpriseCache.Models.AccessKeys&gt;&gt; GetKeysAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource.GetKeysAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetKeysAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AccessKeys))" />
      <MemberSignature Language="F#" Value="abstract member GetKeysAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RedisEnterpriseCache.Models.AccessKeys&gt;&gt;&#xA;override this.GetKeysAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RedisEnterpriseCache.Models.AccessKeys&gt;&gt;" Usage="databaseResource.GetKeysAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RedisEnterpriseCache</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RedisEnterpriseCache.Models.AccessKeys&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Retrieves the access keys for the RedisEnterprise database.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redisEnterprise/{clusterName}/databases/{databaseName}/listKeys
            Operation Id: Databases_ListKeys
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasData">
      <MemberSignature Language="C#" Value="public virtual bool HasData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasData" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource.HasData" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HasData As Boolean" />
      <MemberSignature Language="F#" Value="member this.HasData : bool" Usage="Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource.HasData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RedisEnterpriseCache</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets whether or not the current instance has data. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation Import (Azure.WaitUntil waitUntil, Azure.ResourceManager.RedisEnterpriseCache.Models.ImportClusterContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation Import(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.RedisEnterpriseCache.Models.ImportClusterContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource.Import(Azure.WaitUntil,Azure.ResourceManager.RedisEnterpriseCache.Models.ImportClusterContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Import (waitUntil As WaitUntil, content As ImportClusterContent, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation" />
      <MemberSignature Language="F#" Value="abstract member Import : Azure.WaitUntil * Azure.ResourceManager.RedisEnterpriseCache.Models.ImportClusterContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&#xA;override this.Import : Azure.WaitUntil * Azure.ResourceManager.RedisEnterpriseCache.Models.ImportClusterContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation" Usage="databaseResource.Import (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RedisEnterpriseCache</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.ResourceManager.RedisEnterpriseCache.Models.ImportClusterContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> Storage information for importing into the cluster. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Imports database files to target database.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redisEnterprise/{clusterName}/databases/{databaseName}/import
            Operation Id: Databases_Import
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ImportAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt; ImportAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.RedisEnterpriseCache.Models.ImportClusterContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation&gt; ImportAsync(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.RedisEnterpriseCache.Models.ImportClusterContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource.ImportAsync(Azure.WaitUntil,Azure.ResourceManager.RedisEnterpriseCache.Models.ImportClusterContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportAsync (waitUntil As WaitUntil, content As ImportClusterContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation)" />
      <MemberSignature Language="F#" Value="abstract member ImportAsync : Azure.WaitUntil * Azure.ResourceManager.RedisEnterpriseCache.Models.ImportClusterContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;&#xA;override this.ImportAsync : Azure.WaitUntil * Azure.ResourceManager.RedisEnterpriseCache.Models.ImportClusterContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;" Usage="databaseResource.ImportAsync (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RedisEnterpriseCache</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.ResourceManager.RedisEnterpriseCache.Models.ImportClusterContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> Storage information for importing into the cluster. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Imports database files to target database.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redisEnterprise/{clusterName}/databases/{databaseName}/import
            Operation Id: Databases_Import
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="RegenerateKey">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RedisEnterpriseCache.Models.AccessKeys&gt; RegenerateKey (Azure.WaitUntil waitUntil, Azure.ResourceManager.RedisEnterpriseCache.Models.RegenerateKeyContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.RedisEnterpriseCache.Models.AccessKeys&gt; RegenerateKey(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.RedisEnterpriseCache.Models.RegenerateKeyContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource.RegenerateKey(Azure.WaitUntil,Azure.ResourceManager.RedisEnterpriseCache.Models.RegenerateKeyContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RegenerateKey (waitUntil As WaitUntil, content As RegenerateKeyContent, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of AccessKeys)" />
      <MemberSignature Language="F#" Value="abstract member RegenerateKey : Azure.WaitUntil * Azure.ResourceManager.RedisEnterpriseCache.Models.RegenerateKeyContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RedisEnterpriseCache.Models.AccessKeys&gt;&#xA;override this.RegenerateKey : Azure.WaitUntil * Azure.ResourceManager.RedisEnterpriseCache.Models.RegenerateKeyContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RedisEnterpriseCache.Models.AccessKeys&gt;" Usage="databaseResource.RegenerateKey (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RedisEnterpriseCache</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RedisEnterpriseCache.Models.AccessKeys&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.ResourceManager.RedisEnterpriseCache.Models.RegenerateKeyContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> Specifies which key to regenerate. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Regenerates the RedisEnterprise database's access keys.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redisEnterprise/{clusterName}/databases/{databaseName}/regenerateKey
            Operation Id: Databases_RegenerateKey
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="RegenerateKeyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RedisEnterpriseCache.Models.AccessKeys&gt;&gt; RegenerateKeyAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.RedisEnterpriseCache.Models.RegenerateKeyContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.RedisEnterpriseCache.Models.AccessKeys&gt;&gt; RegenerateKeyAsync(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.RedisEnterpriseCache.Models.RegenerateKeyContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource.RegenerateKeyAsync(Azure.WaitUntil,Azure.ResourceManager.RedisEnterpriseCache.Models.RegenerateKeyContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RegenerateKeyAsync (waitUntil As WaitUntil, content As RegenerateKeyContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of AccessKeys))" />
      <MemberSignature Language="F#" Value="abstract member RegenerateKeyAsync : Azure.WaitUntil * Azure.ResourceManager.RedisEnterpriseCache.Models.RegenerateKeyContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RedisEnterpriseCache.Models.AccessKeys&gt;&gt;&#xA;override this.RegenerateKeyAsync : Azure.WaitUntil * Azure.ResourceManager.RedisEnterpriseCache.Models.RegenerateKeyContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RedisEnterpriseCache.Models.AccessKeys&gt;&gt;" Usage="databaseResource.RegenerateKeyAsync (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RedisEnterpriseCache</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RedisEnterpriseCache.Models.AccessKeys&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.ResourceManager.RedisEnterpriseCache.Models.RegenerateKeyContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> Specifies which key to regenerate. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Regenerates the RedisEnterprise database's access keys.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redisEnterprise/{clusterName}/databases/{databaseName}/regenerateKey
            Operation Id: Databases_RegenerateKey
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ResourceType">
      <MemberSignature Language="C#" Value="public static readonly Azure.Core.ResourceType ResourceType;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype Azure.Core.ResourceType ResourceType" />
      <MemberSignature Language="DocId" Value="F:Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource.ResourceType" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ResourceType As ResourceType " />
      <MemberSignature Language="F#" Value=" staticval mutable ResourceType : Azure.Core.ResourceType" Usage="Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource.ResourceType" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RedisEnterpriseCache</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.ResourceType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets the resource type for the operations. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource&gt; Update (Azure.WaitUntil waitUntil, Azure.ResourceManager.RedisEnterpriseCache.Models.DatabasePatch patch, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource&gt; Update(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.RedisEnterpriseCache.Models.DatabasePatch patch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource.Update(Azure.WaitUntil,Azure.ResourceManager.RedisEnterpriseCache.Models.DatabasePatch,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Update (waitUntil As WaitUntil, patch As DatabasePatch, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of DatabaseResource)" />
      <MemberSignature Language="F#" Value="abstract member Update : Azure.WaitUntil * Azure.ResourceManager.RedisEnterpriseCache.Models.DatabasePatch * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource&gt;&#xA;override this.Update : Azure.WaitUntil * Azure.ResourceManager.RedisEnterpriseCache.Models.DatabasePatch * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource&gt;" Usage="databaseResource.Update (waitUntil, patch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RedisEnterpriseCache</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="patch" Type="Azure.ResourceManager.RedisEnterpriseCache.Models.DatabasePatch" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="patch"> Parameters supplied to the create or update database operation. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Updates a database
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redisEnterprise/{clusterName}/databases/{databaseName}
            Operation Id: Databases_Update
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="patch" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource&gt;&gt; UpdateAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.RedisEnterpriseCache.Models.DatabasePatch patch, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource&gt;&gt; UpdateAsync(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.RedisEnterpriseCache.Models.DatabasePatch patch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource.UpdateAsync(Azure.WaitUntil,Azure.ResourceManager.RedisEnterpriseCache.Models.DatabasePatch,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateAsync (waitUntil As WaitUntil, patch As DatabasePatch, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of DatabaseResource))" />
      <MemberSignature Language="F#" Value="abstract member UpdateAsync : Azure.WaitUntil * Azure.ResourceManager.RedisEnterpriseCache.Models.DatabasePatch * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource&gt;&gt;&#xA;override this.UpdateAsync : Azure.WaitUntil * Azure.ResourceManager.RedisEnterpriseCache.Models.DatabasePatch * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource&gt;&gt;" Usage="databaseResource.UpdateAsync (waitUntil, patch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RedisEnterpriseCache</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RedisEnterpriseCache.DatabaseResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="patch" Type="Azure.ResourceManager.RedisEnterpriseCache.Models.DatabasePatch" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="patch"> Parameters supplied to the create or update database operation. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Updates a database
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redisEnterprise/{clusterName}/databases/{databaseName}
            Operation Id: Databases_Update
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="patch" /> is null. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
