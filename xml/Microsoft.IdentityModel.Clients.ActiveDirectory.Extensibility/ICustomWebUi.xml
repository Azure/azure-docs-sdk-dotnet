<Type Name="ICustomWebUi" FullName="Microsoft.IdentityModel.Clients.ActiveDirectory.Extensibility.ICustomWebUi">
  <TypeSignature Language="C#" Value="public interface ICustomWebUi" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomWebUi" />
  <TypeSignature Language="DocId" Value="T:Microsoft.IdentityModel.Clients.ActiveDirectory.Extensibility.ICustomWebUi" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomWebUi" />
  <TypeSignature Language="F#" Value="type ICustomWebUi = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.IdentityModel.Clients.ActiveDirectory</AssemblyName>
    <AssemblyVersion>5.2.8.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            Interface that an ADAL.NET extender can implement to provide their own Web UI in public client applications
            to sign-in user and have them consented part of the Authorization code flow.
            ADAL.NET provides an embedded web view for Windows, but there are other scenarios not yet supported.
            This extensibility point enables them to provide such UI in a secure way
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AcquireAuthorizationCodeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Uri&gt; AcquireAuthorizationCodeAsync (Uri authorizationUri, Uri redirectUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Uri&gt; AcquireAuthorizationCodeAsync(class System.Uri authorizationUri, class System.Uri redirectUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Clients.ActiveDirectory.Extensibility.ICustomWebUi.AcquireAuthorizationCodeAsync(System.Uri,System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function AcquireAuthorizationCodeAsync (authorizationUri As Uri, redirectUri As Uri) As Task(Of Uri)" />
      <MemberSignature Language="F#" Value="abstract member AcquireAuthorizationCodeAsync : Uri * Uri -&gt; System.Threading.Tasks.Task&lt;Uri&gt;" Usage="iCustomWebUi.AcquireAuthorizationCodeAsync (authorizationUri, redirectUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Clients.ActiveDirectory</AssemblyName>
        <AssemblyVersion>5.2.8.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Uri&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authorizationUri" Type="System.Uri" />
        <Parameter Name="redirectUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="authorizationUri">
             URI computed by ADAL.NET that will let the UI extension
             navigate to the STS authorization endpoint in order to sign-in the user and have them consent
             </param>
        <param name="redirectUri">
             The redirect Uri that was configured. The auth code will be appended to this redirect uri and the browser
             will redirect to it. 
             </param>
        <summary>
             Method called by ADAL.NET to delegate the authentication code Web with with the STS
             </summary>
        <returns>
             The URI returned back from the STS authorization endpoint. This URI contains a code=CODE
             parameters that ADAL.NET will extract and redeem.
             </returns>
        <remarks>
             The authorizationUri is crafted to leverage PKCE in order to protect the token from a man
             in the middle attack. Only MSAL.NET can redeem the code.
            
             In the event of cancellation, the implementer should return OperationCanceledException.
             </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
