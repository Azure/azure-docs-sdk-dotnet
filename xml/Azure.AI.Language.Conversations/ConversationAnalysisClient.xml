<Type Name="ConversationAnalysisClient" FullName="Azure.AI.Language.Conversations.ConversationAnalysisClient">
  <TypeSignature Language="C#" Value="public class ConversationAnalysisClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConversationAnalysisClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.AI.Language.Conversations.ConversationAnalysisClient" />
  <TypeSignature Language="VB.NET" Value="Public Class ConversationAnalysisClient" />
  <TypeSignature Language="F#" Value="type ConversationAnalysisClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The ConversationAnalysis service client. </summary>
    <remarks>
            See <see href="https://docs.microsoft.com/rest/api/language/conversation-analysis-runtime" /> for more information about models you can pass to this client.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ConversationAnalysisClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of ConversationAnalysisClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConversationAnalysisClient (Uri endpoint, Azure.AzureKeyCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.AzureKeyCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.#ctor(System.Uri,Azure.AzureKeyCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As AzureKeyCredential)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Language.Conversations.ConversationAnalysisClient : Uri * Azure.AzureKeyCredential -&gt; Azure.AI.Language.Conversations.ConversationAnalysisClient" Usage="new Azure.AI.Language.Conversations.ConversationAnalysisClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint"> Supported Cognitive Services endpoint (e.g., https://&lt;resource-name&gt;.cognitiveservices.azure.com). </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of ConversationAnalysisClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConversationAnalysisClient (Uri endpoint, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.#ctor(System.Uri,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Language.Conversations.ConversationAnalysisClient : Uri * Azure.Core.TokenCredential -&gt; Azure.AI.Language.Conversations.ConversationAnalysisClient" Usage="new Azure.AI.Language.Conversations.ConversationAnalysisClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint"> Supported Cognitive Services endpoint (e.g., https://&lt;resource-name&gt;.cognitiveservices.azure.com). </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of ConversationAnalysisClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConversationAnalysisClient (Uri endpoint, Azure.AzureKeyCredential credential, Azure.AI.Language.Conversations.ConversationsClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.AzureKeyCredential credential, class Azure.AI.Language.Conversations.ConversationsClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.#ctor(System.Uri,Azure.AzureKeyCredential,Azure.AI.Language.Conversations.ConversationsClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As AzureKeyCredential, options As ConversationsClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Language.Conversations.ConversationAnalysisClient : Uri * Azure.AzureKeyCredential * Azure.AI.Language.Conversations.ConversationsClientOptions -&gt; Azure.AI.Language.Conversations.ConversationAnalysisClient" Usage="new Azure.AI.Language.Conversations.ConversationAnalysisClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
        <Parameter Name="options" Type="Azure.AI.Language.Conversations.ConversationsClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> Supported Cognitive Services endpoint (e.g., https://&lt;resource-name&gt;.cognitiveservices.azure.com). </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of ConversationAnalysisClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConversationAnalysisClient (Uri endpoint, Azure.Core.TokenCredential credential, Azure.AI.Language.Conversations.ConversationsClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential, class Azure.AI.Language.Conversations.ConversationsClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.AI.Language.Conversations.ConversationsClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential, options As ConversationsClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Language.Conversations.ConversationAnalysisClient : Uri * Azure.Core.TokenCredential * Azure.AI.Language.Conversations.ConversationsClientOptions -&gt; Azure.AI.Language.Conversations.ConversationAnalysisClient" Usage="new Azure.AI.Language.Conversations.ConversationAnalysisClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.AI.Language.Conversations.ConversationsClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> Supported Cognitive Services endpoint (e.g., https://&lt;resource-name&gt;.cognitiveservices.azure.com). </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of ConversationAnalysisClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeConversation">
      <MemberSignature Language="C#" Value="public virtual Azure.Response AnalyzeConversation (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response AnalyzeConversation(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.AnalyzeConversation(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeConversation (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeConversation : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.AnalyzeConversation : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="conversationAnalysisClient.AnalyzeConversation (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Analyzes the input conversation utterance. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            <details><summary>ConversationalTask</summary>Schema for <c>ConversationalTask</c>:
            <code>{
              kind: Conversation, # Required. Enumeration of supported Conversation tasks.
              analysisInput: {
                conversationItem: {
                  id: string, # Required. The ID of a conversation item.
                  participantId: string, # Required. The participant ID of a conversation item.
                  language: string, # Optional. The override language of a conversation item in BCP 47 language representation.
                  modality: "transcript" | "text", # Optional. Enumeration of supported conversational modalities.
                  role: "agent" | "customer" | "generic", # Optional. The role of the participant.
                }, # Required. The abstract base for a user input formatted conversation (e.g., Text, Transcript).
              }, # Required. The input ConversationItem and its optional parameters
              parameters: {
                projectName: string, # Required. The name of the project to use.
                deploymentName: string, # Required. The name of the deployment to use.
                verbose: boolean, # Optional. If true, the service will return more detailed information in the response.
                isLoggingEnabled: boolean, # Optional. If true, the service will keep the query for further review.
                stringIndexType: "Utf16CodeUnit", # Optional. Specifies the method used to interpret string offsets. Set this to "Utf16CodeUnit" for .NET strings, which are encoded as UTF-16.
                directTarget: string, # Optional. The name of a target project to forward the request to.
                targetProjectParameters: Dictionary&lt;string, AnalysisParameters&gt;, # Optional. A dictionary representing the parameters for each target project.
              }, # Required. Input parameters necessary for a Conversation task.
            }
            </code></details>
            
            Response Body:
            
            <details><summary>ConversationalTaskResult</summary>Schema for <c>ConversationalTaskResult</c>:
            <code>{
              kind: ConversationResult, # Required. Enumeration of supported conversational task results
              result: {
                query: string, # Required. The conversation utterance given by the caller.
                detectedLanguage: string, # Optional. The system detected language for the query in BCP 47 language representation..
                prediction: {
                  projectKind: "Conversation" | "Orchestration", # Required. The type of the project.
                  topIntent: string, # Optional. The intent with the highest score.
                }, # Required. The prediction result of a conversation project.
              }, # Required. Represents a conversation analysis response.
            }
            </code></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeConversation">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; AnalyzeConversation (Azure.WaitUntil waitUntil, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; AnalyzeConversation(valuetype Azure.WaitUntil waitUntil, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.AnalyzeConversation(Azure.WaitUntil,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeConversation (waitUntil As WaitUntil, content As RequestContent, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeConversation : Azure.WaitUntil * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.AnalyzeConversation : Azure.WaitUntil * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="conversationAnalysisClient.AnalyzeConversation (waitUntil, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="context" Type="Azure.RequestContext" Index="2" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Submit a collection of conversations for analysis. Specify one or more unique tasks to be executed. </summary>
        <returns> The <see cref="T:Azure.Operation`1" /> from the service that will contain a <see cref="T:System.BinaryData" /> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        <remarks>
             Below is the JSON schema for the request and response payloads.
            
             Request Body:
            
             Schema for <c>AnalyzeConversationJobsInput</c>:
             <code>{
               displayName: string, # Optional. Optional display name for the analysis job.
               analysisInput: {
                 conversations: [
                   {
                     id: string, # Required. Unique identifier for the conversation.
                     language: string, # Required. The language of the conversation item in BCP-47 format.
                     modality: "transcript" | "text", # Required. Enumeration of supported conversational modalities.
                     domain: "finance" | "healthcare" | "generic", # Optional. Enumeration of supported conversational domains.
                   }
                 ], # Required.
               }, # Required.
               tasks: [
                 {
                   taskName: string, # Optional.
                   kind: "ConversationalPIITask" | "ConversationalSummarizationTask", # Required. Enumeration of supported analysis tasks on a collection of conversations.
                 }
               ], # Required. The set of tasks to execute on the input conversation.
             }
             </code>
            
             Response Body:
            
             Schema for <c>AnalyzeConversationJobState</c>:
             <code>{
               displayName: string, # Optional.
               createdDateTime: string (ISO 8601 Format), # Required.
               expirationDateTime: string (ISO 8601 Format), # Optional.
               jobId: string, # Required.
               lastUpdatedDateTime: string (ISO 8601 Format), # Required.
               status: "notStarted" | "running" | "succeeded" | "partiallyCompleted" | "failed" | "cancelled" | "cancelling", # Required.
               errors: [
                 {
                   code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable" | "Timeout" | "QuotaExceeded" | "Conflict" | "Warning", # Required. One of a server-defined set of error codes.
                   message: string, # Required. A human-readable representation of the error.
                   target: string, # Optional. The target of the error.
                   details: [Error], # Optional. An array of details about specific errors that led to this reported error.
                   innererror: {
                     code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure" | "InvalidRequestBodyFormat" | "EmptyRequest" | "MissingInputDocuments" | "InvalidDocument" | "ModelVersionIncorrect" | "InvalidDocumentBatch" | "UnsupportedLanguageCode" | "InvalidCountryHint", # Required. One of a server-defined set of error codes.
                     message: string, # Required. Error message.
                     details: Dictionary&lt;string, string&gt;, # Optional. Error details.
                     target: string, # Optional. Error target.
                     innererror: InnerErrorModel, # Optional. An object containing more specific information than the current object about the error.
                   }, # Optional. An object containing more specific information than the current object about the error.
                 }
               ], # Optional.
               nextLink: string, # Optional.
               tasks: {
                 completed: number, # Required. Count of tasks completed successfully.
                 failed: number, # Required. Count of tasks that failed.
                 inProgress: number, # Required. Count of tasks in progress currently.
                 total: number, # Required. Total count of tasks submitted as part of the job.
                 items: [
                   {
                     lastUpdateDateTime: string (ISO 8601 Format), # Required. The last updated time in UTC for the task.
                     status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling", # Required. The status of the task at the mentioned last update time.
                     taskName: string, # Optional.
                     kind: "ConversationalPIIResults" | "ConversationalSummarizationResults", # Required. Enumeration of supported Conversation Analysis task results.
                   }
                 ], # Optional. List of results from tasks (if available).
               }, # Required.
               statistics: {
                 transactionsCount: number, # Required. Number of transactions for the request.
                 conversationsCount: number, # Required. Number of conversations submitted in the request.
                 validConversationsCount: number, # Required. Number of conversations documents. This excludes empty, over-size limit or non-supported languages documents.
                 erroneousConversationsCount: number, # Required. Number of invalid documents. This includes empty, over-size limit or non-supported languages documents.
               }, # Optional. if showStats=true was specified in the request this field will contain information about the request payload.
             }
             </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeConversationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; AnalyzeConversationAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; AnalyzeConversationAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.AnalyzeConversationAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeConversationAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeConversationAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.AnalyzeConversationAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="conversationAnalysisClient.AnalyzeConversationAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Analyzes the input conversation utterance. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            <details><summary>ConversationalTask</summary>Schema for <c>ConversationalTask</c>:
            <code>{
              kind: Conversation, # Required. Enumeration of supported Conversation tasks.
              analysisInput: {
                conversationItem: {
                  id: string, # Required. The ID of a conversation item.
                  participantId: string, # Required. The participant ID of a conversation item.
                  language: string, # Optional. The override language of a conversation item in BCP 47 language representation.
                  modality: "transcript" | "text", # Optional. Enumeration of supported conversational modalities.
                  role: "agent" | "customer" | "generic", # Optional. The role of the participant.
                }, # Required. The abstract base for a user input formatted conversation (e.g., Text, Transcript).
              }, # Required. The input ConversationItem and its optional parameters
              parameters: {
                projectName: string, # Required. The name of the project to use.
                deploymentName: string, # Required. The name of the deployment to use.
                verbose: boolean, # Optional. If true, the service will return more detailed information in the response.
                isLoggingEnabled: boolean, # Optional. If true, the service will keep the query for further review.
                stringIndexType: "Utf16CodeUnit", # Optional. Specifies the method used to interpret string offsets. Set this to "Utf16CodeUnit" for .NET strings, which are encoded as UTF-16.
                directTarget: string, # Optional. The name of a target project to forward the request to.
                targetProjectParameters: Dictionary&lt;string, AnalysisParameters&gt;, # Optional. A dictionary representing the parameters for each target project.
              }, # Required. Input parameters necessary for a Conversation task.
            }
            </code></details>
            
            Response Body:
            
            <details><summary>ConversationalTaskResult</summary>Schema for <c>ConversationalTaskResult</c>:
            <code>{
              kind: ConversationResult, # Required. Enumeration of supported conversational task results
              result: {
                query: string, # Required. The conversation utterance given by the caller.
                detectedLanguage: string, # Optional. The system detected language for the query in BCP 47 language representation..
                prediction: {
                  projectKind: "Conversation" | "Orchestration", # Required. The type of the project.
                  topIntent: string, # Optional. The intent with the highest score.
                }, # Required. The prediction result of a conversation project.
              }, # Required. Represents a conversation analysis response.
            }
            </code></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeConversationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; AnalyzeConversationAsync (Azure.WaitUntil waitUntil, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; AnalyzeConversationAsync(valuetype Azure.WaitUntil waitUntil, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.AnalyzeConversationAsync(Azure.WaitUntil,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeConversationAsync (waitUntil As WaitUntil, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeConversationAsync : Azure.WaitUntil * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.AnalyzeConversationAsync : Azure.WaitUntil * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="conversationAnalysisClient.AnalyzeConversationAsync (waitUntil, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="context" Type="Azure.RequestContext" Index="2" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Submit a collection of conversations for analysis. Specify one or more unique tasks to be executed. </summary>
        <returns> The <see cref="T:Azure.Operation`1" /> from the service that will contain a <see cref="T:System.BinaryData" /> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        <remarks>
             Below is the JSON schema for the request and response payloads.
            
             Request Body:
            
             Schema for <c>AnalyzeConversationJobsInput</c>:
             <code>{
               displayName: string, # Optional. Optional display name for the analysis job.
               analysisInput: {
                 conversations: [
                   {
                     id: string, # Required. Unique identifier for the conversation.
                     language: string, # Required. The language of the conversation item in BCP-47 format.
                     modality: "transcript" | "text", # Required. Enumeration of supported conversational modalities.
                     domain: "finance" | "healthcare" | "generic", # Optional. Enumeration of supported conversational domains.
                   }
                 ], # Required.
               }, # Required.
               tasks: [
                 {
                   taskName: string, # Optional.
                   kind: "ConversationalPIITask" | "ConversationalSummarizationTask", # Required. Enumeration of supported analysis tasks on a collection of conversations.
                 }
               ], # Required. The set of tasks to execute on the input conversation.
             }
             </code>
            
             Response Body:
            
             Schema for <c>AnalyzeConversationJobState</c>:
             <code>{
               displayName: string, # Optional.
               createdDateTime: string (ISO 8601 Format), # Required.
               expirationDateTime: string (ISO 8601 Format), # Optional.
               jobId: string, # Required.
               lastUpdatedDateTime: string (ISO 8601 Format), # Required.
               status: "notStarted" | "running" | "succeeded" | "partiallyCompleted" | "failed" | "cancelled" | "cancelling", # Required.
               errors: [
                 {
                   code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable" | "Timeout" | "QuotaExceeded" | "Conflict" | "Warning", # Required. One of a server-defined set of error codes.
                   message: string, # Required. A human-readable representation of the error.
                   target: string, # Optional. The target of the error.
                   details: [Error], # Optional. An array of details about specific errors that led to this reported error.
                   innererror: {
                     code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure" | "InvalidRequestBodyFormat" | "EmptyRequest" | "MissingInputDocuments" | "InvalidDocument" | "ModelVersionIncorrect" | "InvalidDocumentBatch" | "UnsupportedLanguageCode" | "InvalidCountryHint", # Required. One of a server-defined set of error codes.
                     message: string, # Required. Error message.
                     details: Dictionary&lt;string, string&gt;, # Optional. Error details.
                     target: string, # Optional. Error target.
                     innererror: InnerErrorModel, # Optional. An object containing more specific information than the current object about the error.
                   }, # Optional. An object containing more specific information than the current object about the error.
                 }
               ], # Optional.
               nextLink: string, # Optional.
               tasks: {
                 completed: number, # Required. Count of tasks completed successfully.
                 failed: number, # Required. Count of tasks that failed.
                 inProgress: number, # Required. Count of tasks in progress currently.
                 total: number, # Required. Total count of tasks submitted as part of the job.
                 items: [
                   {
                     lastUpdateDateTime: string (ISO 8601 Format), # Required. The last updated time in UTC for the task.
                     status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling", # Required. The status of the task at the mentioned last update time.
                     taskName: string, # Optional.
                     kind: "ConversationalPIIResults" | "ConversationalSummarizationResults", # Required. Enumeration of supported Conversation Analysis task results.
                   }
                 ], # Optional. List of results from tasks (if available).
               }, # Required.
               statistics: {
                 transactionsCount: number, # Required. Number of transactions for the request.
                 conversationsCount: number, # Required. Number of conversations submitted in the request.
                 validConversationsCount: number, # Required. Number of conversations documents. This excludes empty, over-size limit or non-supported languages documents.
                 erroneousConversationsCount: number, # Required. Number of invalid documents. This includes empty, over-size limit or non-supported languages documents.
               }, # Optional. if showStats=true was specified in the request this field will contain information about the request payload.
             }
             </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CancelAnalyzeConversationJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation CancelAnalyzeConversationJob (Azure.WaitUntil waitUntil, Guid jobId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation CancelAnalyzeConversationJob(valuetype Azure.WaitUntil waitUntil, valuetype System.Guid jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.CancelAnalyzeConversationJob(Azure.WaitUntil,System.Guid,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CancelAnalyzeConversationJob (waitUntil As WaitUntil, jobId As Guid, Optional context As RequestContext = Nothing) As Operation" />
      <MemberSignature Language="F#" Value="abstract member CancelAnalyzeConversationJob : Azure.WaitUntil * Guid * Azure.RequestContext -&gt; Azure.Operation&#xA;override this.CancelAnalyzeConversationJob : Azure.WaitUntil * Guid * Azure.RequestContext -&gt; Azure.Operation" Usage="conversationAnalysisClient.CancelAnalyzeConversationJob (waitUntil, jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="jobId" Type="System.Guid" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="context" Type="Azure.RequestContext" Index="2" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="jobId"> Job ID. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Cancel a long-running Text Analysis conversations job. </summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CancelAnalyzeConversationJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&gt; CancelAnalyzeConversationJobAsync (Azure.WaitUntil waitUntil, Guid jobId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation&gt; CancelAnalyzeConversationJobAsync(valuetype Azure.WaitUntil waitUntil, valuetype System.Guid jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.CancelAnalyzeConversationJobAsync(Azure.WaitUntil,System.Guid,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CancelAnalyzeConversationJobAsync (waitUntil As WaitUntil, jobId As Guid, Optional context As RequestContext = Nothing) As Task(Of Operation)" />
      <MemberSignature Language="F#" Value="abstract member CancelAnalyzeConversationJobAsync : Azure.WaitUntil * Guid * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&gt;&#xA;override this.CancelAnalyzeConversationJobAsync : Azure.WaitUntil * Guid * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&gt;" Usage="conversationAnalysisClient.CancelAnalyzeConversationJobAsync (waitUntil, jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="jobId" Type="System.Guid" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="context" Type="Azure.RequestContext" Index="2" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="jobId"> Job ID. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Cancel a long-running Text Analysis conversations job. </summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="Endpoint">
      <MemberSignature Language="C#" Value="public virtual Uri Endpoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Endpoint" />
      <MemberSignature Language="DocId" Value="P:Azure.AI.Language.Conversations.ConversationAnalysisClient.Endpoint" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Endpoint As Uri" />
      <MemberSignature Language="F#" Value="member this.Endpoint : Uri" Usage="Azure.AI.Language.Conversations.ConversationAnalysisClient.Endpoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the service endpoint for this client.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAnalyzeConversationJobStatus">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetAnalyzeConversationJobStatus (Guid jobId, bool? showStats = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetAnalyzeConversationJobStatus(valuetype System.Guid jobId, valuetype System.Nullable`1&lt;bool&gt; showStats, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.GetAnalyzeConversationJobStatus(System.Guid,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAnalyzeConversationJobStatus (jobId As Guid, Optional showStats As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetAnalyzeConversationJobStatus : Guid * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetAnalyzeConversationJobStatus : Guid * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="conversationAnalysisClient.GetAnalyzeConversationJobStatus (jobId, showStats, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.Guid" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="showStats" Type="System.Nullable&lt;System.Boolean&gt;" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="context" Type="Azure.RequestContext" Index="2" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="jobId"> Job ID. </param>
        <param name="showStats"> (Optional) if set to true, response will contain request and document level statistics. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get the status of an analysis job. A job may consist of one or more tasks. Once all tasks are succeeded, the job will transition to the succeeded state and results will be available for each task. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>AnalyzeConversationJobState</c>:
            <code>{
              displayName: string, # Optional.
              createdDateTime: string (ISO 8601 Format), # Required.
              expirationDateTime: string (ISO 8601 Format), # Optional.
              jobId: string, # Required.
              lastUpdatedDateTime: string (ISO 8601 Format), # Required.
              status: "notStarted" | "running" | "succeeded" | "partiallyCompleted" | "failed" | "cancelled" | "cancelling", # Required.
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable" | "Timeout" | "QuotaExceeded" | "Conflict" | "Warning", # Required. One of a server-defined set of error codes.
                  message: string, # Required. A human-readable representation of the error.
                  target: string, # Optional. The target of the error.
                  details: [Error], # Optional. An array of details about specific errors that led to this reported error.
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure" | "InvalidRequestBodyFormat" | "EmptyRequest" | "MissingInputDocuments" | "InvalidDocument" | "ModelVersionIncorrect" | "InvalidDocumentBatch" | "UnsupportedLanguageCode" | "InvalidCountryHint", # Required. One of a server-defined set of error codes.
                    message: string, # Required. Error message.
                    details: Dictionary&lt;string, string&gt;, # Optional. Error details.
                    target: string, # Optional. Error target.
                    innererror: InnerErrorModel, # Optional. An object containing more specific information than the current object about the error.
                  }, # Optional. An object containing more specific information than the current object about the error.
                }
              ], # Optional.
              nextLink: string, # Optional.
              tasks: {
                completed: number, # Required. Count of tasks completed successfully.
                failed: number, # Required. Count of tasks that failed.
                inProgress: number, # Required. Count of tasks in progress currently.
                total: number, # Required. Total count of tasks submitted as part of the job.
                items: [
                  {
                    lastUpdateDateTime: string (ISO 8601 Format), # Required. The last updated time in UTC for the task.
                    status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling", # Required. The status of the task at the mentioned last update time.
                    taskName: string, # Optional.
                    kind: "ConversationalPIIResults" | "ConversationalSummarizationResults", # Required. Enumeration of supported Conversation Analysis task results.
                  }
                ], # Optional. List of results from tasks (if available).
              }, # Required.
              statistics: {
                transactionsCount: number, # Required. Number of transactions for the request.
                conversationsCount: number, # Required. Number of conversations submitted in the request.
                validConversationsCount: number, # Required. Number of conversations documents. This excludes empty, over-size limit or non-supported languages documents.
                erroneousConversationsCount: number, # Required. Number of invalid documents. This includes empty, over-size limit or non-supported languages documents.
              }, # Optional. if showStats=true was specified in the request this field will contain information about the request payload.
            }
            </code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAnalyzeConversationJobStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetAnalyzeConversationJobStatusAsync (Guid jobId, bool? showStats = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetAnalyzeConversationJobStatusAsync(valuetype System.Guid jobId, valuetype System.Nullable`1&lt;bool&gt; showStats, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.GetAnalyzeConversationJobStatusAsync(System.Guid,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAnalyzeConversationJobStatusAsync (jobId As Guid, Optional showStats As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetAnalyzeConversationJobStatusAsync : Guid * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetAnalyzeConversationJobStatusAsync : Guid * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="conversationAnalysisClient.GetAnalyzeConversationJobStatusAsync (jobId, showStats, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.Guid" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="showStats" Type="System.Nullable&lt;System.Boolean&gt;" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="context" Type="Azure.RequestContext" Index="2" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="jobId"> Job ID. </param>
        <param name="showStats"> (Optional) if set to true, response will contain request and document level statistics. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get the status of an analysis job. A job may consist of one or more tasks. Once all tasks are succeeded, the job will transition to the succeeded state and results will be available for each task. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>AnalyzeConversationJobState</c>:
            <code>{
              displayName: string, # Optional.
              createdDateTime: string (ISO 8601 Format), # Required.
              expirationDateTime: string (ISO 8601 Format), # Optional.
              jobId: string, # Required.
              lastUpdatedDateTime: string (ISO 8601 Format), # Required.
              status: "notStarted" | "running" | "succeeded" | "partiallyCompleted" | "failed" | "cancelled" | "cancelling", # Required.
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable" | "Timeout" | "QuotaExceeded" | "Conflict" | "Warning", # Required. One of a server-defined set of error codes.
                  message: string, # Required. A human-readable representation of the error.
                  target: string, # Optional. The target of the error.
                  details: [Error], # Optional. An array of details about specific errors that led to this reported error.
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure" | "InvalidRequestBodyFormat" | "EmptyRequest" | "MissingInputDocuments" | "InvalidDocument" | "ModelVersionIncorrect" | "InvalidDocumentBatch" | "UnsupportedLanguageCode" | "InvalidCountryHint", # Required. One of a server-defined set of error codes.
                    message: string, # Required. Error message.
                    details: Dictionary&lt;string, string&gt;, # Optional. Error details.
                    target: string, # Optional. Error target.
                    innererror: InnerErrorModel, # Optional. An object containing more specific information than the current object about the error.
                  }, # Optional. An object containing more specific information than the current object about the error.
                }
              ], # Optional.
              nextLink: string, # Optional.
              tasks: {
                completed: number, # Required. Count of tasks completed successfully.
                failed: number, # Required. Count of tasks that failed.
                inProgress: number, # Required. Count of tasks in progress currently.
                total: number, # Required. Total count of tasks submitted as part of the job.
                items: [
                  {
                    lastUpdateDateTime: string (ISO 8601 Format), # Required. The last updated time in UTC for the task.
                    status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling", # Required. The status of the task at the mentioned last update time.
                    taskName: string, # Optional.
                    kind: "ConversationalPIIResults" | "ConversationalSummarizationResults", # Required. Enumeration of supported Conversation Analysis task results.
                  }
                ], # Optional. List of results from tasks (if available).
              }, # Required.
              statistics: {
                transactionsCount: number, # Required. Number of transactions for the request.
                conversationsCount: number, # Required. Number of conversations submitted in the request.
                validConversationsCount: number, # Required. Number of conversations documents. This excludes empty, over-size limit or non-supported languages documents.
                erroneousConversationsCount: number, # Required. Number of invalid documents. This includes empty, over-size limit or non-supported languages documents.
              }, # Optional. if showStats=true was specified in the request this field will contain information about the request payload.
            }
            </code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.AI.Language.Conversations.ConversationAnalysisClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.AI.Language.Conversations.ConversationAnalysisClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
