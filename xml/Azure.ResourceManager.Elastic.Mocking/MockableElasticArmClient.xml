<Type Name="MockableElasticArmClient" FullName="Azure.ResourceManager.Elastic.Mocking.MockableElasticArmClient">
  <TypeSignature Language="C#" Value="public class MockableElasticArmClient : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MockableElasticArmClient extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.Elastic.Mocking.MockableElasticArmClient" />
  <TypeSignature Language="VB.NET" Value="Public Class MockableElasticArmClient&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type MockableElasticArmClient = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.Elastic</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> A class to add extension methods to ArmClient. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MockableElasticArmClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Elastic.Mocking.MockableElasticArmClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Elastic</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Elastic.Mocking.MockableElasticArmClient" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetElasticMonitorResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Elastic.ElasticMonitorResource GetElasticMonitorResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Elastic.ElasticMonitorResource GetElasticMonitorResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Elastic.Mocking.MockableElasticArmClient.GetElasticMonitorResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetElasticMonitorResource (id As ResourceIdentifier) As ElasticMonitorResource" />
      <MemberSignature Language="F#" Value="abstract member GetElasticMonitorResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Elastic.ElasticMonitorResource&#xA;override this.GetElasticMonitorResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Elastic.ElasticMonitorResource" Usage="mockableElasticArmClient.GetElasticMonitorResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Elastic</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Elastic.ElasticMonitorResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.Elastic.ElasticMonitorResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Elastic.ElasticMonitorResource.CreateResourceIdentifier(System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.Elastic.ElasticMonitorResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Elastic.ElasticMonitorResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetElasticOpenAIIntegrationResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Elastic.ElasticOpenAIIntegrationResource GetElasticOpenAIIntegrationResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Elastic.ElasticOpenAIIntegrationResource GetElasticOpenAIIntegrationResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Elastic.Mocking.MockableElasticArmClient.GetElasticOpenAIIntegrationResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetElasticOpenAIIntegrationResource (id As ResourceIdentifier) As ElasticOpenAIIntegrationResource" />
      <MemberSignature Language="F#" Value="abstract member GetElasticOpenAIIntegrationResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Elastic.ElasticOpenAIIntegrationResource&#xA;override this.GetElasticOpenAIIntegrationResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Elastic.ElasticOpenAIIntegrationResource" Usage="mockableElasticArmClient.GetElasticOpenAIIntegrationResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Elastic</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Elastic.ElasticOpenAIIntegrationResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" Index="0" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.Elastic.ElasticOpenAIIntegrationResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Elastic.ElasticOpenAIIntegrationResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.Elastic.ElasticOpenAIIntegrationResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Elastic.ElasticOpenAIIntegrationResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetElasticTagRuleResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Elastic.ElasticTagRuleResource GetElasticTagRuleResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Elastic.ElasticTagRuleResource GetElasticTagRuleResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Elastic.Mocking.MockableElasticArmClient.GetElasticTagRuleResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetElasticTagRuleResource (id As ResourceIdentifier) As ElasticTagRuleResource" />
      <MemberSignature Language="F#" Value="abstract member GetElasticTagRuleResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Elastic.ElasticTagRuleResource&#xA;override this.GetElasticTagRuleResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Elastic.ElasticTagRuleResource" Usage="mockableElasticArmClient.GetElasticTagRuleResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Elastic</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Elastic.ElasticTagRuleResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" Index="0" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.Elastic.ElasticTagRuleResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Elastic.ElasticTagRuleResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.Elastic.ElasticTagRuleResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Elastic.ElasticTagRuleResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMonitoredSubscriptionPropertyResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Elastic.MonitoredSubscriptionPropertyResource GetMonitoredSubscriptionPropertyResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Elastic.MonitoredSubscriptionPropertyResource GetMonitoredSubscriptionPropertyResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Elastic.Mocking.MockableElasticArmClient.GetMonitoredSubscriptionPropertyResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMonitoredSubscriptionPropertyResource (id As ResourceIdentifier) As MonitoredSubscriptionPropertyResource" />
      <MemberSignature Language="F#" Value="abstract member GetMonitoredSubscriptionPropertyResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Elastic.MonitoredSubscriptionPropertyResource&#xA;override this.GetMonitoredSubscriptionPropertyResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Elastic.MonitoredSubscriptionPropertyResource" Usage="mockableElasticArmClient.GetMonitoredSubscriptionPropertyResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Elastic</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Elastic.MonitoredSubscriptionPropertyResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" Index="0" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Elastic.MonitoredSubscriptionPropertyResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Elastic.MonitoredSubscriptionPropertyResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Elastic.MonitoredSubscriptionPropertyResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Elastic.MonitoredSubscriptionPropertyResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMonitoringTagRuleResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Elastic.MonitoringTagRuleResource GetMonitoringTagRuleResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Elastic.MonitoringTagRuleResource GetMonitoringTagRuleResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Elastic.Mocking.MockableElasticArmClient.GetMonitoringTagRuleResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMonitoringTagRuleResource (id As ResourceIdentifier) As MonitoringTagRuleResource" />
      <MemberSignature Language="F#" Value="abstract member GetMonitoringTagRuleResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Elastic.MonitoringTagRuleResource&#xA;override this.GetMonitoringTagRuleResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Elastic.MonitoringTagRuleResource" Usage="mockableElasticArmClient.GetMonitoringTagRuleResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Elastic</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Elastic.MonitoringTagRuleResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" Index="0" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Elastic.MonitoringTagRuleResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Elastic.MonitoringTagRuleResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Elastic.MonitoringTagRuleResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Elastic.MonitoringTagRuleResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOpenAIIntegrationRPModelResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Elastic.OpenAIIntegrationRPModelResource GetOpenAIIntegrationRPModelResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Elastic.OpenAIIntegrationRPModelResource GetOpenAIIntegrationRPModelResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Elastic.Mocking.MockableElasticArmClient.GetOpenAIIntegrationRPModelResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOpenAIIntegrationRPModelResource (id As ResourceIdentifier) As OpenAIIntegrationRPModelResource" />
      <MemberSignature Language="F#" Value="abstract member GetOpenAIIntegrationRPModelResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Elastic.OpenAIIntegrationRPModelResource&#xA;override this.GetOpenAIIntegrationRPModelResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Elastic.OpenAIIntegrationRPModelResource" Usage="mockableElasticArmClient.GetOpenAIIntegrationRPModelResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Elastic</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Elastic.OpenAIIntegrationRPModelResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" Index="0" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.Elastic.OpenAIIntegrationRPModelResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Elastic.OpenAIIntegrationRPModelResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.Elastic.OpenAIIntegrationRPModelResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Elastic.OpenAIIntegrationRPModelResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
