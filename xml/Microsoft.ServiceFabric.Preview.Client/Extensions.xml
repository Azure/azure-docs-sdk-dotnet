<Type Name="Extensions" FullName="Microsoft.ServiceFabric.Preview.Client.Extensions">
  <TypeSignature Language="C#" Value="public static class Extensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Extensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ServiceFabric.Preview.Client.Extensions" />
  <TypeSignature Language="VB.NET" Value="Public Module Extensions" />
  <TypeSignature Language="F#" Value="type Extensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ServiceFabric.Preview</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Extension methods for FabricClient.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateComposeDeploymentAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task CreateComposeDeploymentAsync (this System.Fabric.FabricClient.ComposeDeploymentClient client, Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentDescription composeDeploymentDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task CreateComposeDeploymentAsync(class System.Fabric.FabricClient/ComposeDeploymentClient client, class Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentDescription composeDeploymentDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Preview.Client.Extensions.CreateComposeDeploymentAsync(System.Fabric.FabricClient.ComposeDeploymentClient,Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentDescription)" />
      <MemberSignature Language="F#" Value="static member CreateComposeDeploymentAsync : System.Fabric.FabricClient.ComposeDeploymentClient * Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentDescription -&gt; System.Threading.Tasks.Task" Usage="Microsoft.ServiceFabric.Preview.Client.Extensions.CreateComposeDeploymentAsync (client, composeDeploymentDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Preview</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="System.Fabric.FabricClient+ComposeDeploymentClient" RefType="this" />
        <Parameter Name="composeDeploymentDescription" Type="Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentDescription" />
      </Parameters>
      <Docs>
        <param name="client">
          <see cref="T:System.Fabric.FabricClient" /> object.</param>
        <param name="composeDeploymentDescription">
          <para>The <see cref="T:Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentDescription" /> that describes the compose deployment to be created.</para>
        </param>
        <summary>
          <para>Creates and instantiates the Service Fabric compose deployment described by the compose deployment description.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
              object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ImageBuilderValidationError" />: The create application request is not valid with respect to the provisioned manifests for the requested application type.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" />: The application name is not a valid Naming URI.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CorruptedImageStoreObjectFound" />: A corrupted file was encountered on the image store.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricElementAlreadyExistsException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ComposeDeploymentAlreadyExists" />: The compose deployment has already been created.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationAlreadyExists" />: The application has already been created so that compose deployment can not be created using the same name. </para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>There was an error accessing a file on the Image Store.</para>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <para>A required file was not found .</para>
        </exception>
        <exception cref="T:System.IO.PathTooLongException">
          <para>A path to an Image Store file/directory was too long.</para>
        </exception>
        <exception cref="T:System.IO.IOException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException" />: There was an IO error communicating with the Image Store.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>The request timed out but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>
                The parameters specified via the <see cref="T:Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentDescription" /> are incorrect.
              </para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateComposeDeploymentAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task CreateComposeDeploymentAsync (this System.Fabric.FabricClient.ComposeDeploymentClient client, Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentDescription composeDeploymentDescription, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task CreateComposeDeploymentAsync(class System.Fabric.FabricClient/ComposeDeploymentClient client, class Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentDescription composeDeploymentDescription, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Preview.Client.Extensions.CreateComposeDeploymentAsync(System.Fabric.FabricClient.ComposeDeploymentClient,Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentDescription,System.TimeSpan)" />
      <MemberSignature Language="F#" Value="static member CreateComposeDeploymentAsync : System.Fabric.FabricClient.ComposeDeploymentClient * Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentDescription * TimeSpan -&gt; System.Threading.Tasks.Task" Usage="Microsoft.ServiceFabric.Preview.Client.Extensions.CreateComposeDeploymentAsync (client, composeDeploymentDescription, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Preview</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="System.Fabric.FabricClient+ComposeDeploymentClient" RefType="this" />
        <Parameter Name="composeDeploymentDescription" Type="Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentDescription" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="client">
          <see cref="T:System.Fabric.FabricClient" /> object.</param>
        <param name="composeDeploymentDescription">
          <para>The <see cref="T:Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentDescription" /> that describes the compose deployment to be created.</para>
        </param>
        <param name="timeout">
          <para>Defines the maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
        </param>
        <summary>
          <para>Creates and instantiates the Service Fabric compose deployment described by the compose deployment description.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
              object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ImageBuilderValidationError" />: The create application request is not valid with respect to the provisioned manifests for the requested application type.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" />: The application name is not a valid Naming URI.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CorruptedImageStoreObjectFound" />: A corrupted file was encountered on the image store.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricElementAlreadyExistsException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ComposeDeploymentAlreadyExists" />: The compose deployment has already been created.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationAlreadyExists" />: The application has already been created so that compose deployment can not be created using the same name. </para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>There was an error accessing a file on the Image Store.</para>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <para>A required file was not found on the Image Store.</para>
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <para>A required directory was not found on the Image Store.</para>
        </exception>
        <exception cref="T:System.IO.PathTooLongException">
          <para>A path to an Image Store file/directory was too long.</para>
        </exception>
        <exception cref="T:System.IO.IOException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException" />: There was an IO error communicating with the Image Store.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>The request timed out but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>
                The parameters specified via the <see cref="T:Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentDescription" /> are incorrect.
              </para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateComposeDeploymentAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task CreateComposeDeploymentAsync (this System.Fabric.FabricClient.ComposeDeploymentClient client, Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentDescription composeDeploymentDescription, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task CreateComposeDeploymentAsync(class System.Fabric.FabricClient/ComposeDeploymentClient client, class Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentDescription composeDeploymentDescription, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Preview.Client.Extensions.CreateComposeDeploymentAsync(System.Fabric.FabricClient.ComposeDeploymentClient,Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentDescription,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member CreateComposeDeploymentAsync : System.Fabric.FabricClient.ComposeDeploymentClient * Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentDescription * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="Microsoft.ServiceFabric.Preview.Client.Extensions.CreateComposeDeploymentAsync (client, composeDeploymentDescription, timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Preview</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="System.Fabric.FabricClient+ComposeDeploymentClient" RefType="this" />
        <Parameter Name="composeDeploymentDescription" Type="Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentDescription" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="client">
          <see cref="T:System.Fabric.FabricClient" /> object.</param>
        <param name="composeDeploymentDescription">
          <para>The <see cref="T:Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentDescription" /> that describes the compose deployment to be created.</para>
        </param>
        <param name="timeout">
          <para>Defines the maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The CancellationToken that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
        </param>
        <summary>
          <para>Creates and instantiates the Service Fabric compose deployment described by the compose deployment description.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
              object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ImageBuilderValidationError" />: The create application request is not valid with respect to the provisioned manifests for the requested application type.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" />: The application name is not a valid Naming URI.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CorruptedImageStoreObjectFound" />: A corrupted file was encountered on the image store.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricElementAlreadyExistsException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ComposeDeploymentAlreadyExists" />: The compose deployment has already been created.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationAlreadyExists" />: The application has already been created so that compose deployment can not be created using the same name. </para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>There was an error accessing a file on the Image Store.</para>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <para>A required file was not found on the Image Store.</para>
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <para>A required directory was not found on the Image Store.</para>
        </exception>
        <exception cref="T:System.IO.PathTooLongException">
          <para>A path to an Image Store file/directory was too long.</para>
        </exception>
        <exception cref="T:System.IO.IOException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException" />: There was an IO error communicating with the Image Store.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>The request timed out but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>
                The parameters specified via the <see cref="T:Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentDescription" /> are incorrect.
              </para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteComposeDeploymentAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task DeleteComposeDeploymentAsync (this System.Fabric.FabricClient.ComposeDeploymentClient client, Microsoft.ServiceFabric.Preview.Client.Description.DeleteComposeDeploymentDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task DeleteComposeDeploymentAsync(class System.Fabric.FabricClient/ComposeDeploymentClient client, class Microsoft.ServiceFabric.Preview.Client.Description.DeleteComposeDeploymentDescription description) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Preview.Client.Extensions.DeleteComposeDeploymentAsync(System.Fabric.FabricClient.ComposeDeploymentClient,Microsoft.ServiceFabric.Preview.Client.Description.DeleteComposeDeploymentDescription)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DeleteComposeDeploymentAsync (client As FabricClient.ComposeDeploymentClient, description As DeleteComposeDeploymentDescription) As Task" />
      <MemberSignature Language="F#" Value="static member DeleteComposeDeploymentAsync : System.Fabric.FabricClient.ComposeDeploymentClient * Microsoft.ServiceFabric.Preview.Client.Description.DeleteComposeDeploymentDescription -&gt; System.Threading.Tasks.Task" Usage="Microsoft.ServiceFabric.Preview.Client.Extensions.DeleteComposeDeploymentAsync (client, description)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Preview</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="System.Fabric.FabricClient+ComposeDeploymentClient" RefType="this" />
        <Parameter Name="description" Type="Microsoft.ServiceFabric.Preview.Client.Description.DeleteComposeDeploymentDescription" />
      </Parameters>
      <Docs>
        <param name="client">
          <see cref="T:System.Fabric.FabricClient" /> object.</param>
        <param name="description">
          <para>The <see cref="T:Microsoft.ServiceFabric.Preview.Client.Description.DeleteComposeDeploymentDescription" /> that determines which compose deployment should be deleted.</para>
        </param>
        <summary>
          <para>Deletes the compose deployment instance from the cluster.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>
          <para>All compose deployment state will be lost and cannot be recovered after the compose deployment is deleted.</para>
        </remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricElementNotFoundException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ComposeDeploymentNotFound" />: The compose deployment does not exist.
            </para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationUpgradeInProgress" />: The application is being upgraded. </para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>The request timed out but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteComposeDeploymentAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task DeleteComposeDeploymentAsync (this System.Fabric.FabricClient.ComposeDeploymentClient client, Microsoft.ServiceFabric.Preview.Client.Description.DeleteComposeDeploymentDescription description, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task DeleteComposeDeploymentAsync(class System.Fabric.FabricClient/ComposeDeploymentClient client, class Microsoft.ServiceFabric.Preview.Client.Description.DeleteComposeDeploymentDescription description, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Preview.Client.Extensions.DeleteComposeDeploymentAsync(System.Fabric.FabricClient.ComposeDeploymentClient,Microsoft.ServiceFabric.Preview.Client.Description.DeleteComposeDeploymentDescription,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DeleteComposeDeploymentAsync (client As FabricClient.ComposeDeploymentClient, description As DeleteComposeDeploymentDescription, timeout As TimeSpan) As Task" />
      <MemberSignature Language="F#" Value="static member DeleteComposeDeploymentAsync : System.Fabric.FabricClient.ComposeDeploymentClient * Microsoft.ServiceFabric.Preview.Client.Description.DeleteComposeDeploymentDescription * TimeSpan -&gt; System.Threading.Tasks.Task" Usage="Microsoft.ServiceFabric.Preview.Client.Extensions.DeleteComposeDeploymentAsync (client, description, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Preview</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="System.Fabric.FabricClient+ComposeDeploymentClient" RefType="this" />
        <Parameter Name="description" Type="Microsoft.ServiceFabric.Preview.Client.Description.DeleteComposeDeploymentDescription" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="client">
          <see cref="T:System.Fabric.FabricClient" /> object.</param>
        <param name="description">
          <para>The <see cref="T:Microsoft.ServiceFabric.Preview.Client.Description.DeleteComposeDeploymentDescription" /> that determines which compose deployment should be deleted.</para>
        </param>
        <param name="timeout">
          <para>Defines the maximum amount of time the system will allow this operation to continue before returning System.TimeoutException.</para>
        </param>
        <summary>
          <para>Deletes the compose deployment from the cluster.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>
          <para>All application state will be lost and cannot be recovered after the application is deleted.</para>
        </remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricElementNotFoundException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ComposeDeploymentNotFound" />: The compose deployment does not exist.
            </para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationUpgradeInProgress" />: The application is being upgraded. </para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>The request timed out but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteComposeDeploymentAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task DeleteComposeDeploymentAsync (this System.Fabric.FabricClient.ComposeDeploymentClient client, Microsoft.ServiceFabric.Preview.Client.Description.DeleteComposeDeploymentDescription description, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task DeleteComposeDeploymentAsync(class System.Fabric.FabricClient/ComposeDeploymentClient client, class Microsoft.ServiceFabric.Preview.Client.Description.DeleteComposeDeploymentDescription description, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Preview.Client.Extensions.DeleteComposeDeploymentAsync(System.Fabric.FabricClient.ComposeDeploymentClient,Microsoft.ServiceFabric.Preview.Client.Description.DeleteComposeDeploymentDescription,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member DeleteComposeDeploymentAsync : System.Fabric.FabricClient.ComposeDeploymentClient * Microsoft.ServiceFabric.Preview.Client.Description.DeleteComposeDeploymentDescription * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="Microsoft.ServiceFabric.Preview.Client.Extensions.DeleteComposeDeploymentAsync (client, description, timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Preview</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="System.Fabric.FabricClient+ComposeDeploymentClient" RefType="this" />
        <Parameter Name="description" Type="Microsoft.ServiceFabric.Preview.Client.Description.DeleteComposeDeploymentDescription" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="client">
          <see cref="T:System.Fabric.FabricClient" /> object.</param>
        <param name="description">
          <para>The <see cref="T:Microsoft.ServiceFabric.Preview.Client.Description.DeleteComposeDeploymentDescription" /> that determines which compose deployment should be deleted.</para>
        </param>
        <param name="timeout">
          <para>Defines the maximum amount of time the system will allow this operation to continue before returning System.TimeoutException.</para>
        </param>
        <param name="cancellationToken">
          <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
        </param>
        <summary>
          <para>Deletes the compose deployment from the cluster.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>
          <para>All application state will be lost and cannot be recovered after the application is deleted.</para>
        </remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricElementNotFoundException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ComposeDeploymentNotFound" />: The compose deployment does not exist.
            </para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationUpgradeInProgress" />: The application is being upgraded. </para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>The request timed out but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetComposeDeploymentStatusPagedListAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Preview.Client.Query.ComposeDeploymentStatusList&gt; GetComposeDeploymentStatusPagedListAsync (this System.Fabric.FabricClient.QueryClient client, Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentStatusQueryDescription composeDeploymentQueryDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceFabric.Preview.Client.Query.ComposeDeploymentStatusList&gt; GetComposeDeploymentStatusPagedListAsync(class System.Fabric.FabricClient/QueryClient client, class Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentStatusQueryDescription composeDeploymentQueryDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Preview.Client.Extensions.GetComposeDeploymentStatusPagedListAsync(System.Fabric.FabricClient.QueryClient,Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentStatusQueryDescription)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetComposeDeploymentStatusPagedListAsync (client As FabricClient.QueryClient, composeDeploymentQueryDescription As ComposeDeploymentStatusQueryDescription) As Task(Of ComposeDeploymentStatusList)" />
      <MemberSignature Language="F#" Value="static member GetComposeDeploymentStatusPagedListAsync : System.Fabric.FabricClient.QueryClient * Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentStatusQueryDescription -&gt; System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Preview.Client.Query.ComposeDeploymentStatusList&gt;" Usage="Microsoft.ServiceFabric.Preview.Client.Extensions.GetComposeDeploymentStatusPagedListAsync (client, composeDeploymentQueryDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Preview</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Preview.Client.Query.ComposeDeploymentStatusList&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="System.Fabric.FabricClient+QueryClient" RefType="this" />
        <Parameter Name="composeDeploymentQueryDescription" Type="Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentStatusQueryDescription" />
      </Parameters>
      <Docs>
        <param name="client">
          <see cref="T:System.Fabric.FabricClient" /> object.</param>
        <param name="composeDeploymentQueryDescription">
          <para>The <see cref="T:Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentStatusQueryDescription" /> that determines which compose deployments should be queried.</para>
        </param>
        <summary>
          <para>Gets the status of compose deployments created that match filters specified in query description (if any).
            If the compose deployments do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous query operation.
            The value of TResult parameter is an <see cref="T:Microsoft.ServiceFabric.Preview.Client.Query.ComposeDeploymentStatusList" /> that represents the list of compose deployments that respect the filters in the <see cref="T:Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentStatusQueryDescription" /> and fit the page.
            If the provided query description has no matching compose deployments, it will return a list of 0 entries.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>
                See also <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetComposeDeploymentStatusPagedListAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Preview.Client.Query.ComposeDeploymentStatusList&gt; GetComposeDeploymentStatusPagedListAsync (this System.Fabric.FabricClient.QueryClient client, Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentStatusQueryDescription composeDeploymentQueryDescription, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceFabric.Preview.Client.Query.ComposeDeploymentStatusList&gt; GetComposeDeploymentStatusPagedListAsync(class System.Fabric.FabricClient/QueryClient client, class Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentStatusQueryDescription composeDeploymentQueryDescription, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Preview.Client.Extensions.GetComposeDeploymentStatusPagedListAsync(System.Fabric.FabricClient.QueryClient,Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentStatusQueryDescription,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetComposeDeploymentStatusPagedListAsync (client As FabricClient.QueryClient, composeDeploymentQueryDescription As ComposeDeploymentStatusQueryDescription, timeout As TimeSpan) As Task(Of ComposeDeploymentStatusList)" />
      <MemberSignature Language="F#" Value="static member GetComposeDeploymentStatusPagedListAsync : System.Fabric.FabricClient.QueryClient * Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentStatusQueryDescription * TimeSpan -&gt; System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Preview.Client.Query.ComposeDeploymentStatusList&gt;" Usage="Microsoft.ServiceFabric.Preview.Client.Extensions.GetComposeDeploymentStatusPagedListAsync (client, composeDeploymentQueryDescription, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Preview</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Preview.Client.Query.ComposeDeploymentStatusList&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="System.Fabric.FabricClient+QueryClient" RefType="this" />
        <Parameter Name="composeDeploymentQueryDescription" Type="Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentStatusQueryDescription" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="client">
          <see cref="T:System.Fabric.FabricClient" /> object.</param>
        <param name="composeDeploymentQueryDescription">
          <para>The <see cref="T:Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentStatusQueryDescription" /> that determines which compose deployments should be queried.</para>
        </param>
        <param name="timeout">
          <para>Defines the maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
        </param>
        <summary>
          <para>Gets the status of compose deployments created that match filters specified in query description (if any).
            If the compose deployments do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous query operation.
            The value of TResult parameter is an <see cref="T:Microsoft.ServiceFabric.Preview.Client.Query.ComposeDeploymentStatusList" /> that represents the list of compose deployments that respect the filters in the <see cref="T:Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentStatusQueryDescription" /> and fit the page.
            If the provided query description has no matching compose deployments, it will return a list of 0 entries.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>
                See also <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetComposeDeploymentStatusPagedListAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Preview.Client.Query.ComposeDeploymentStatusList&gt; GetComposeDeploymentStatusPagedListAsync (this System.Fabric.FabricClient.QueryClient client, Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentStatusQueryDescription composeDeploymentQueryDescription, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceFabric.Preview.Client.Query.ComposeDeploymentStatusList&gt; GetComposeDeploymentStatusPagedListAsync(class System.Fabric.FabricClient/QueryClient client, class Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentStatusQueryDescription composeDeploymentQueryDescription, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Preview.Client.Extensions.GetComposeDeploymentStatusPagedListAsync(System.Fabric.FabricClient.QueryClient,Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentStatusQueryDescription,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member GetComposeDeploymentStatusPagedListAsync : System.Fabric.FabricClient.QueryClient * Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentStatusQueryDescription * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Preview.Client.Query.ComposeDeploymentStatusList&gt;" Usage="Microsoft.ServiceFabric.Preview.Client.Extensions.GetComposeDeploymentStatusPagedListAsync (client, composeDeploymentQueryDescription, timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Preview</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Preview.Client.Query.ComposeDeploymentStatusList&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="System.Fabric.FabricClient+QueryClient" RefType="this" />
        <Parameter Name="composeDeploymentQueryDescription" Type="Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentStatusQueryDescription" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="client">
          <see cref="T:System.Fabric.FabricClient" /> object.</param>
        <param name="composeDeploymentQueryDescription">
          <para>The <see cref="T:Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentStatusQueryDescription" /> that determines which compose deployments should be queried.</para>
        </param>
        <param name="timeout">
          <para>Defines the maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The CancellationToken that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
        </param>
        <summary>
          <para>Gets the status of compose deployments created that match filters specified in query description (if any).
            If the compose deployments do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous query operation.
            The value of TResult parameter is an <see cref="T:Microsoft.ServiceFabric.Preview.Client.Query.ComposeDeploymentStatusList" /> that represents the list of compose deployments that respect the filters in the <see cref="T:Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentStatusQueryDescription" /> and fit the page.
            If the provided query description has no matching compose deployments, it will return a list of 0 entries.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>
                See also <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetComposeDeploymentUpgradeProgressAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Fabric.ComposeDeploymentUpgradeProgress&gt; GetComposeDeploymentUpgradeProgressAsync (this System.Fabric.FabricClient.ComposeDeploymentClient client, string deploymentName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Fabric.ComposeDeploymentUpgradeProgress&gt; GetComposeDeploymentUpgradeProgressAsync(class System.Fabric.FabricClient/ComposeDeploymentClient client, string deploymentName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Preview.Client.Extensions.GetComposeDeploymentUpgradeProgressAsync(System.Fabric.FabricClient.ComposeDeploymentClient,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetComposeDeploymentUpgradeProgressAsync (client As FabricClient.ComposeDeploymentClient, deploymentName As String) As Task(Of ComposeDeploymentUpgradeProgress)" />
      <MemberSignature Language="F#" Value="static member GetComposeDeploymentUpgradeProgressAsync : System.Fabric.FabricClient.ComposeDeploymentClient * string -&gt; System.Threading.Tasks.Task&lt;System.Fabric.ComposeDeploymentUpgradeProgress&gt;" Usage="Microsoft.ServiceFabric.Preview.Client.Extensions.GetComposeDeploymentUpgradeProgressAsync (client, deploymentName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Preview</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.ComposeDeploymentUpgradeProgress&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="System.Fabric.FabricClient+ComposeDeploymentClient" RefType="this" />
        <Parameter Name="deploymentName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="client">
          <see cref="T:System.Fabric.FabricClient" /> object.</param>
        <param name="deploymentName">
          <para>The name of the deployment.</para>
        </param>
        <summary>
          <para>Retrieves the upgrade progress of the specified compose deployment.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> whose result is the upgrade progress of the specified compose deployment.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricElementNotFoundException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ComposeDeploymentNotFound" />: The compose deployment does not exist.
            </para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>The request timed out but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RollbackComposeDeploymentUpgradeAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task RollbackComposeDeploymentUpgradeAsync (this System.Fabric.FabricClient.ComposeDeploymentClient client, Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentRollbackDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task RollbackComposeDeploymentUpgradeAsync(class System.Fabric.FabricClient/ComposeDeploymentClient client, class Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentRollbackDescription description) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Preview.Client.Extensions.RollbackComposeDeploymentUpgradeAsync(System.Fabric.FabricClient.ComposeDeploymentClient,Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentRollbackDescription)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RollbackComposeDeploymentUpgradeAsync (client As FabricClient.ComposeDeploymentClient, description As ComposeDeploymentRollbackDescription) As Task" />
      <MemberSignature Language="F#" Value="static member RollbackComposeDeploymentUpgradeAsync : System.Fabric.FabricClient.ComposeDeploymentClient * Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentRollbackDescription -&gt; System.Threading.Tasks.Task" Usage="Microsoft.ServiceFabric.Preview.Client.Extensions.RollbackComposeDeploymentUpgradeAsync (client, description)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Preview</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="System.Fabric.FabricClient+ComposeDeploymentClient" RefType="this" />
        <Parameter Name="description" Type="Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentRollbackDescription" />
      </Parameters>
      <Docs>
        <param name="client">
          <see cref="T:System.Fabric.FabricClient" /> object.</param>
        <param name="description">
          <para>The <see cref="T:Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentRollbackDescription" /> that determines which compose deployment should be rolled back.</para>
        </param>
        <summary>
          <para>Starts rolling back the current compose deployment upgrade.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricElementNotFoundException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ComposeDeploymentNotFound" />: The compose deployment does not exist.
            </para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ComposeDeploymentNotUpgrading" />: There is no pending upgrade for the specified compose deployment to rollback.
            </para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RollbackComposeDeploymentUpgradeAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task RollbackComposeDeploymentUpgradeAsync (this System.Fabric.FabricClient.ComposeDeploymentClient client, Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentRollbackDescription description, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task RollbackComposeDeploymentUpgradeAsync(class System.Fabric.FabricClient/ComposeDeploymentClient client, class Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentRollbackDescription description, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Preview.Client.Extensions.RollbackComposeDeploymentUpgradeAsync(System.Fabric.FabricClient.ComposeDeploymentClient,Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentRollbackDescription,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RollbackComposeDeploymentUpgradeAsync (client As FabricClient.ComposeDeploymentClient, description As ComposeDeploymentRollbackDescription, timeout As TimeSpan) As Task" />
      <MemberSignature Language="F#" Value="static member RollbackComposeDeploymentUpgradeAsync : System.Fabric.FabricClient.ComposeDeploymentClient * Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentRollbackDescription * TimeSpan -&gt; System.Threading.Tasks.Task" Usage="Microsoft.ServiceFabric.Preview.Client.Extensions.RollbackComposeDeploymentUpgradeAsync (client, description, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Preview</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="System.Fabric.FabricClient+ComposeDeploymentClient" RefType="this" />
        <Parameter Name="description" Type="Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentRollbackDescription" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="client">
          <see cref="T:System.Fabric.FabricClient" /> object.</param>
        <param name="description">
          <para>The <see cref="T:Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentRollbackDescription" /> that determines which compose deployment should be rolled back.</para>
        </param>
        <param name="timeout">
          <para>Defines the maximum amount of time the system will allow this operation to continue before returning System.TimeoutException.</para>
        </param>
        <summary>
          <para>Starts rolling back the current compose deployment upgrade.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricElementNotFoundException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ComposeDeploymentNotFound" />: The compose deployment does not exist.
            </para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ComposeDeploymentNotUpgrading" />: There is no pending upgrade for the specified compose deployment to rollback.
            </para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RollbackComposeDeploymentUpgradeAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task RollbackComposeDeploymentUpgradeAsync (this System.Fabric.FabricClient.ComposeDeploymentClient client, Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentRollbackDescription description, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task RollbackComposeDeploymentUpgradeAsync(class System.Fabric.FabricClient/ComposeDeploymentClient client, class Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentRollbackDescription description, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Preview.Client.Extensions.RollbackComposeDeploymentUpgradeAsync(System.Fabric.FabricClient.ComposeDeploymentClient,Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentRollbackDescription,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member RollbackComposeDeploymentUpgradeAsync : System.Fabric.FabricClient.ComposeDeploymentClient * Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentRollbackDescription * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="Microsoft.ServiceFabric.Preview.Client.Extensions.RollbackComposeDeploymentUpgradeAsync (client, description, timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Preview</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="System.Fabric.FabricClient+ComposeDeploymentClient" RefType="this" />
        <Parameter Name="description" Type="Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentRollbackDescription" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="client">
          <see cref="T:System.Fabric.FabricClient" /> object.</param>
        <param name="description">
          <para>The <see cref="T:Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentRollbackDescription" /> that determines which compose deployment should be rolled back.</para>
        </param>
        <param name="timeout">
          <para>Defines the maximum amount of time the system will allow this operation to continue before returning System.TimeoutException.</para>
        </param>
        <param name="cancellationToken">
          <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
        </param>
        <summary>
          <para>Starts rolling back the current compose deployment upgrade.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricElementNotFoundException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ComposeDeploymentNotFound" />: The compose deployment does not exist.
            </para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ComposeDeploymentNotUpgrading" />: There is no pending upgrade for the specified compose deployment to rollback.
            </para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="UpgradeComposeDeploymentAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task UpgradeComposeDeploymentAsync (this System.Fabric.FabricClient.ComposeDeploymentClient client, Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentUpgradeDescription upgradeDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task UpgradeComposeDeploymentAsync(class System.Fabric.FabricClient/ComposeDeploymentClient client, class Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentUpgradeDescription upgradeDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Preview.Client.Extensions.UpgradeComposeDeploymentAsync(System.Fabric.FabricClient.ComposeDeploymentClient,Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentUpgradeDescription)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UpgradeComposeDeploymentAsync (client As FabricClient.ComposeDeploymentClient, upgradeDescription As ComposeDeploymentUpgradeDescription) As Task" />
      <MemberSignature Language="F#" Value="static member UpgradeComposeDeploymentAsync : System.Fabric.FabricClient.ComposeDeploymentClient * Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentUpgradeDescription -&gt; System.Threading.Tasks.Task" Usage="Microsoft.ServiceFabric.Preview.Client.Extensions.UpgradeComposeDeploymentAsync (client, upgradeDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Preview</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="System.Fabric.FabricClient+ComposeDeploymentClient" RefType="this" />
        <Parameter Name="upgradeDescription" Type="Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentUpgradeDescription" />
      </Parameters>
      <Docs>
        <param name="client">To be added.</param>
        <param name="upgradeDescription">To be added.</param>
        <summary>
          <para>Starts the upgrade for the compose deployment identified by the deployment name, in the cluster.</para>
        </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpgradeComposeDeploymentAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task UpgradeComposeDeploymentAsync (this System.Fabric.FabricClient.ComposeDeploymentClient client, Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentUpgradeDescription upgradeDescription, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task UpgradeComposeDeploymentAsync(class System.Fabric.FabricClient/ComposeDeploymentClient client, class Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentUpgradeDescription upgradeDescription, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Preview.Client.Extensions.UpgradeComposeDeploymentAsync(System.Fabric.FabricClient.ComposeDeploymentClient,Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentUpgradeDescription,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member UpgradeComposeDeploymentAsync : System.Fabric.FabricClient.ComposeDeploymentClient * Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentUpgradeDescription * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="Microsoft.ServiceFabric.Preview.Client.Extensions.UpgradeComposeDeploymentAsync (client, upgradeDescription, timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Preview</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="System.Fabric.FabricClient+ComposeDeploymentClient" RefType="this" />
        <Parameter Name="upgradeDescription" Type="Microsoft.ServiceFabric.Preview.Client.Description.ComposeDeploymentUpgradeDescription" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="client">To be added.</param>
        <param name="upgradeDescription">To be added.</param>
        <param name="timeout">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
          <para>Starts the upgrade for the compose deployment identified by the deployment name, in the cluster.</para>
        </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>