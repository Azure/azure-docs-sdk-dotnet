<Type Name="Extensions" FullName="Microsoft.ServiceFabric.Preview.Client.Extensions">
  <TypeSignature Language="C#" Value="public static class Extensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Extensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ServiceFabric.Preview.Client.Extensions" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ServiceFabric.Preview</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>255.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Extension methods for FabricClient.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateComposeApplicationAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task CreateComposeApplicationAsync (this System.Fabric.FabricClient.ApplicationManagementClient client, Microsoft.ServiceFabric.Preview.Client.Description.ComposeApplicationDescription composeApplicationDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task CreateComposeApplicationAsync(class System.Fabric.FabricClient/ApplicationManagementClient client, class Microsoft.ServiceFabric.Preview.Client.Description.ComposeApplicationDescription composeApplicationDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Preview.Client.Extensions.CreateComposeApplicationAsync(System.Fabric.FabricClient.ApplicationManagementClient,Microsoft.ServiceFabric.Preview.Client.Description.ComposeApplicationDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Preview</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="System.Fabric.FabricClient+ApplicationManagementClient" RefType="this" />
        <Parameter Name="composeApplicationDescription" Type="Microsoft.ServiceFabric.Preview.Client.Description.ComposeApplicationDescription" />
      </Parameters>
      <Docs>
        <param name="client">
          <see cref="T:System.Fabric.FabricClient" /> object.</param>
        <param name="composeApplicationDescription">
          <para>The <see cref="T:Microsoft.ServiceFabric.Preview.Client.Description.ComposeApplicationDescription" /> that describes the compose application to be created.</para>
        </param>
        <summary>
          <para>Creates and instantiates the Service Fabric compose application described by the compose application description.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
              object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ImageBuilderValidationError" />: The create application request is not valid with respect to the provisioned manifests for the requested application type.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" />: The application name is not a valid Naming URI.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CorruptedImageStoreObjectFound" />: A corrupted file was encountered on the image store.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricElementAlreadyExistsException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ComposeApplicationAlreadyExists" />: The compose application has already been created.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationAlreadyExists" />: The application has already been created so that compose application can not be created using the same name. </para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>There was an error accessing a file on the Image Store.</para>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <para>A required file was not found .</para>
        </exception>
        <exception cref="T:System.IO.PathTooLongException">
          <para>A path to an Image Store file/directory was too long.</para>
        </exception>
        <exception cref="T:System.IO.IOException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException" />: There was an IO error communicating with the Image Store.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>The request timed out but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>
                The parameters specified via the <see cref="T:Microsoft.ServiceFabric.Preview.Client.Description.ComposeApplicationDescription" /> are incorrect.
              </para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateComposeApplicationAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task CreateComposeApplicationAsync (this System.Fabric.FabricClient.ApplicationManagementClient client, Microsoft.ServiceFabric.Preview.Client.Description.ComposeApplicationDescription composeApplicationDescription, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task CreateComposeApplicationAsync(class System.Fabric.FabricClient/ApplicationManagementClient client, class Microsoft.ServiceFabric.Preview.Client.Description.ComposeApplicationDescription composeApplicationDescription, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Preview.Client.Extensions.CreateComposeApplicationAsync(System.Fabric.FabricClient.ApplicationManagementClient,Microsoft.ServiceFabric.Preview.Client.Description.ComposeApplicationDescription,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Preview</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="System.Fabric.FabricClient+ApplicationManagementClient" RefType="this" />
        <Parameter Name="composeApplicationDescription" Type="Microsoft.ServiceFabric.Preview.Client.Description.ComposeApplicationDescription" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="client">
          <see cref="T:System.Fabric.FabricClient" /> object.</param>
        <param name="composeApplicationDescription">
          <para>The <see cref="T:Microsoft.ServiceFabric.Preview.Client.Description.ComposeApplicationDescription" /> that describes the compose application to be created.</para>
        </param>
        <param name="timeout">
          <para>Defines the maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
        </param>
        <summary>
          <para>Creates and instantiates the Service Fabric compose application described by the compose application description.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
              object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ImageBuilderValidationError" />: The create application request is not valid with respect to the provisioned manifests for the requested application type.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" />: The application name is not a valid Naming URI.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CorruptedImageStoreObjectFound" />: A corrupted file was encountered on the image store.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricElementAlreadyExistsException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ComposeApplicationAlreadyExists" />: The compose application has already been created.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationAlreadyExists" />: The application has already been created so that compose application can not be created using the same name. </para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>There was an error accessing a file on the Image Store.</para>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <para>A required file was not found on the Image Store.</para>
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <para>A required directory was not found on the Image Store.</para>
        </exception>
        <exception cref="T:System.IO.PathTooLongException">
          <para>A path to an Image Store file/directory was too long.</para>
        </exception>
        <exception cref="T:System.IO.IOException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException" />: There was an IO error communicating with the Image Store.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>The request timed out but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>
                The parameters specified via the <see cref="T:Microsoft.ServiceFabric.Preview.Client.Description.ComposeApplicationDescription" /> are incorrect.
              </para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateComposeApplicationAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task CreateComposeApplicationAsync (this System.Fabric.FabricClient.ApplicationManagementClient client, Microsoft.ServiceFabric.Preview.Client.Description.ComposeApplicationDescription composeApplicationDescription, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task CreateComposeApplicationAsync(class System.Fabric.FabricClient/ApplicationManagementClient client, class Microsoft.ServiceFabric.Preview.Client.Description.ComposeApplicationDescription composeApplicationDescription, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Preview.Client.Extensions.CreateComposeApplicationAsync(System.Fabric.FabricClient.ApplicationManagementClient,Microsoft.ServiceFabric.Preview.Client.Description.ComposeApplicationDescription,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Preview</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="System.Fabric.FabricClient+ApplicationManagementClient" RefType="this" />
        <Parameter Name="composeApplicationDescription" Type="Microsoft.ServiceFabric.Preview.Client.Description.ComposeApplicationDescription" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="client">
          <see cref="T:System.Fabric.FabricClient" /> object.</param>
        <param name="composeApplicationDescription">
          <para>The <see cref="T:Microsoft.ServiceFabric.Preview.Client.Description.ComposeApplicationDescription" /> that describes the compose application to be created.</para>
        </param>
        <param name="timeout">
          <para>Defines the maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The CancellationToken that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
        </param>
        <summary>
          <para>Creates and instantiates the Service Fabric compose application described by the compose application description.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
              object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ImageBuilderValidationError" />: The create application request is not valid with respect to the provisioned manifests for the requested application type.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" />: The application name is not a valid Naming URI.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CorruptedImageStoreObjectFound" />: A corrupted file was encountered on the image store.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricElementAlreadyExistsException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ComposeApplicationAlreadyExists" />: The compose application has already been created.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationAlreadyExists" />: The application has already been created so that compose application can not be created using the same name. </para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>There was an error accessing a file on the Image Store.</para>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <para>A required file was not found on the Image Store.</para>
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <para>A required directory was not found on the Image Store.</para>
        </exception>
        <exception cref="T:System.IO.PathTooLongException">
          <para>A path to an Image Store file/directory was too long.</para>
        </exception>
        <exception cref="T:System.IO.IOException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException" />: There was an IO error communicating with the Image Store.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>The request timed out but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>
                The parameters specified via the <see cref="T:Microsoft.ServiceFabric.Preview.Client.Description.ComposeApplicationDescription" /> are incorrect.
              </para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteComposeApplicationAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task DeleteComposeApplicationAsync (this System.Fabric.FabricClient.ApplicationManagementClient client, Uri applicationName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task DeleteComposeApplicationAsync(class System.Fabric.FabricClient/ApplicationManagementClient client, class System.Uri applicationName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Preview.Client.Extensions.DeleteComposeApplicationAsync(System.Fabric.FabricClient.ApplicationManagementClient,System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Preview</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="System.Fabric.FabricClient+ApplicationManagementClient" RefType="this" />
        <Parameter Name="applicationName" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="client">
          <see cref="T:System.Fabric.FabricClient" /> object.</param>
        <param name="applicationName">
          <para>The URI of the application instance name.</para>
        </param>
        <summary>
          <para>Deletes the compose application instance from the cluster.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>
          <para>All application state will be lost and cannot be recovered after the application is deleted.</para>
        </remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricElementNotFoundException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ComposeApplicationNotFound" />: The application does not exist.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationUpgradeInProgress" />: The application is being upgraded. </para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>The request timed out but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteComposeApplicationAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task DeleteComposeApplicationAsync (this System.Fabric.FabricClient.ApplicationManagementClient client, Uri applicationName, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task DeleteComposeApplicationAsync(class System.Fabric.FabricClient/ApplicationManagementClient client, class System.Uri applicationName, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Preview.Client.Extensions.DeleteComposeApplicationAsync(System.Fabric.FabricClient.ApplicationManagementClient,System.Uri,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Preview</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="System.Fabric.FabricClient+ApplicationManagementClient" RefType="this" />
        <Parameter Name="applicationName" Type="System.Uri" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="client">
          <see cref="T:System.Fabric.FabricClient" /> object.</param>
        <param name="applicationName">
          <para>The URI of the application instance name.</para>
        </param>
        <param name="timeout">
          <para>Defines the maximum amount of time the system will allow this operation to continue before returning System.TimeoutException.</para>
        </param>
        <summary>
          <para>Deletes the application instance from the cluster.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>
          <para>All application state will be lost and cannot be recovered after the application is deleted.</para>
        </remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricElementNotFoundException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationUpgradeInProgress" />: The application is being upgraded. </para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>The request timed out but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteComposeApplicationAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task DeleteComposeApplicationAsync (this System.Fabric.FabricClient.ApplicationManagementClient client, Uri applicationName, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task DeleteComposeApplicationAsync(class System.Fabric.FabricClient/ApplicationManagementClient client, class System.Uri applicationName, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Preview.Client.Extensions.DeleteComposeApplicationAsync(System.Fabric.FabricClient.ApplicationManagementClient,System.Uri,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Preview</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="System.Fabric.FabricClient+ApplicationManagementClient" RefType="this" />
        <Parameter Name="applicationName" Type="System.Uri" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="client">
          <see cref="T:System.Fabric.FabricClient" /> object.</param>
        <param name="applicationName">
          <para>The URI of the application instance name.</para>
        </param>
        <param name="timeout">
          <para>Defines the maximum amount of time the system will allow this operation to continue before returning System.TimeoutException.</para>
        </param>
        <param name="cancellationToken">
          <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
        </param>
        <summary>
          <para>Deletes the application instance from the cluster.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>
          <para>All application state will be lost and cannot be recovered after the application is deleted.</para>
        </remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricElementNotFoundException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationUpgradeInProgress" />: The application is being upgraded. </para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>The request timed out but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetComposeApplicationStatusPagedListAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Preview.Client.Query.ComposeApplicationStatusList&gt; GetComposeApplicationStatusPagedListAsync (this System.Fabric.FabricClient.QueryClient client, Microsoft.ServiceFabric.Preview.Client.Description.ComposeApplicationStatusQueryDescription composeApplicationQueryDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceFabric.Preview.Client.Query.ComposeApplicationStatusList&gt; GetComposeApplicationStatusPagedListAsync(class System.Fabric.FabricClient/QueryClient client, class Microsoft.ServiceFabric.Preview.Client.Description.ComposeApplicationStatusQueryDescription composeApplicationQueryDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Preview.Client.Extensions.GetComposeApplicationStatusPagedListAsync(System.Fabric.FabricClient.QueryClient,Microsoft.ServiceFabric.Preview.Client.Description.ComposeApplicationStatusQueryDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Preview</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Preview.Client.Query.ComposeApplicationStatusList&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="System.Fabric.FabricClient+QueryClient" RefType="this" />
        <Parameter Name="composeApplicationQueryDescription" Type="Microsoft.ServiceFabric.Preview.Client.Description.ComposeApplicationStatusQueryDescription" />
      </Parameters>
      <Docs>
        <param name="client">
          <see cref="T:System.Fabric.FabricClient" /> object.</param>
        <param name="composeApplicationQueryDescription">
          <para>The <see cref="T:Microsoft.ServiceFabric.Preview.Client.Description.ComposeApplicationStatusQueryDescription" /> that determines which compose applications should be queried.</para>
        </param>
        <summary>
          <para>Gets the status of compose applications created that match filters specified in query description (if any).
            If the compose applications do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous query operation.
            The value of TResult parameter is an <see cref="T:Microsoft.ServiceFabric.Preview.Client.Query.ComposeApplicationStatusList" /> that represents the list of compose applications that respect the filters in the <see cref="T:Microsoft.ServiceFabric.Preview.Client.Description.ComposeApplicationStatusQueryDescription" /> and fit the page.
            If the provided query description has no matching compose applications, it will return a list of 0 entries.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>
                See also <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetComposeApplicationStatusPagedListAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Preview.Client.Query.ComposeApplicationStatusList&gt; GetComposeApplicationStatusPagedListAsync (this System.Fabric.FabricClient.QueryClient client, Microsoft.ServiceFabric.Preview.Client.Description.ComposeApplicationStatusQueryDescription composeApplicationQueryDescription, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceFabric.Preview.Client.Query.ComposeApplicationStatusList&gt; GetComposeApplicationStatusPagedListAsync(class System.Fabric.FabricClient/QueryClient client, class Microsoft.ServiceFabric.Preview.Client.Description.ComposeApplicationStatusQueryDescription composeApplicationQueryDescription, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Preview.Client.Extensions.GetComposeApplicationStatusPagedListAsync(System.Fabric.FabricClient.QueryClient,Microsoft.ServiceFabric.Preview.Client.Description.ComposeApplicationStatusQueryDescription,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Preview</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Preview.Client.Query.ComposeApplicationStatusList&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="System.Fabric.FabricClient+QueryClient" RefType="this" />
        <Parameter Name="composeApplicationQueryDescription" Type="Microsoft.ServiceFabric.Preview.Client.Description.ComposeApplicationStatusQueryDescription" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="client">
          <see cref="T:System.Fabric.FabricClient" /> object.</param>
        <param name="composeApplicationQueryDescription">
          <para>The <see cref="T:Microsoft.ServiceFabric.Preview.Client.Description.ComposeApplicationStatusQueryDescription" /> that determines which compose applications should be queried.</para>
        </param>
        <param name="timeout">
          <para>Defines the maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
        </param>
        <summary>
          <para>Gets the status of compose applications created that match filters specified in query description (if any).
            If the compose applications do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous query operation.
            The value of TResult parameter is an <see cref="T:Microsoft.ServiceFabric.Preview.Client.Query.ComposeApplicationStatusList" /> that represents the list of compose applications that respect the filters in the <see cref="T:Microsoft.ServiceFabric.Preview.Client.Description.ComposeApplicationStatusQueryDescription" /> and fit the page.
            If the provided query description has no matching compose applications, it will return a list of 0 entries.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>
                See also <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetComposeApplicationStatusPagedListAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Preview.Client.Query.ComposeApplicationStatusList&gt; GetComposeApplicationStatusPagedListAsync (this System.Fabric.FabricClient.QueryClient client, Microsoft.ServiceFabric.Preview.Client.Description.ComposeApplicationStatusQueryDescription composeApplicationQueryDescription, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceFabric.Preview.Client.Query.ComposeApplicationStatusList&gt; GetComposeApplicationStatusPagedListAsync(class System.Fabric.FabricClient/QueryClient client, class Microsoft.ServiceFabric.Preview.Client.Description.ComposeApplicationStatusQueryDescription composeApplicationQueryDescription, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Preview.Client.Extensions.GetComposeApplicationStatusPagedListAsync(System.Fabric.FabricClient.QueryClient,Microsoft.ServiceFabric.Preview.Client.Description.ComposeApplicationStatusQueryDescription,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Preview</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Preview.Client.Query.ComposeApplicationStatusList&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="System.Fabric.FabricClient+QueryClient" RefType="this" />
        <Parameter Name="composeApplicationQueryDescription" Type="Microsoft.ServiceFabric.Preview.Client.Description.ComposeApplicationStatusQueryDescription" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="client">
          <see cref="T:System.Fabric.FabricClient" /> object.</param>
        <param name="composeApplicationQueryDescription">
          <para>The <see cref="T:Microsoft.ServiceFabric.Preview.Client.Description.ComposeApplicationStatusQueryDescription" /> that determines which compose applications should be queried.</para>
        </param>
        <param name="timeout">
          <para>Defines the maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The CancellationToken that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
        </param>
        <summary>
          <para>Gets the status of compose applications created that match filters specified in query description (if any).
            If the compose applications do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous query operation.
            The value of TResult parameter is an <see cref="T:Microsoft.ServiceFabric.Preview.Client.Query.ComposeApplicationStatusList" /> that represents the list of compose applications that respect the filters in the <see cref="T:Microsoft.ServiceFabric.Preview.Client.Description.ComposeApplicationStatusQueryDescription" /> and fit the page.
            If the provided query description has no matching compose applications, it will return a list of 0 entries.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>
                See <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>
                See also <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/" /> for handling common FabricClient failures.</para>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>