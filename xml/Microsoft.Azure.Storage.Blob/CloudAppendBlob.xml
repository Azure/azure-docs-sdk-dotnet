<Type Name="CloudAppendBlob" FullName="Microsoft.Azure.Storage.Blob.CloudAppendBlob">
  <TypeSignature Language="C#" Value="public class CloudAppendBlob : Microsoft.Azure.Storage.Blob.CloudBlob, Microsoft.Azure.Storage.Blob.ICloudBlob" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CloudAppendBlob extends Microsoft.Azure.Storage.Blob.CloudBlob implements class Microsoft.Azure.Storage.Blob.ICloudBlob, class Microsoft.Azure.Storage.Blob.IListBlobItem" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Storage.Blob.CloudAppendBlob" />
  <TypeSignature Language="VB.NET" Value="Public Class CloudAppendBlob&#xA;Inherits CloudBlob&#xA;Implements ICloudBlob" />
  <TypeSignature Language="F#" Value="type CloudAppendBlob = class&#xA;    inherit CloudBlob&#xA;    interface ICloudBlob&#xA;    interface IListBlobItem" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
    <AssemblyVersion>11.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Azure.Storage.Blob.CloudBlob</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Azure.Storage.Blob.ICloudBlob</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Azure.Storage.Blob.IListBlobItem</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Represents an append blob, a type of blob where blocks of data are always committed to the end of the blob.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CloudAppendBlob (Uri blobAbsoluteUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri blobAbsoluteUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.#ctor(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (blobAbsoluteUri As Uri)" />
      <MemberSignature Language="F#" Value="new Microsoft.Azure.Storage.Blob.CloudAppendBlob : Uri -&gt; Microsoft.Azure.Storage.Blob.CloudAppendBlob" Usage="new Microsoft.Azure.Storage.Blob.CloudAppendBlob blobAbsoluteUri" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="blobAbsoluteUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="blobAbsoluteUri">A <see cref="T:System.Uri" /> specifying the absolute URI to the blob.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Storage.Blob.CloudAppendBlob" /> class using an absolute URI to the blob.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CloudAppendBlob (Uri blobAbsoluteUri, Microsoft.Azure.Storage.Auth.StorageCredentials credentials);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri blobAbsoluteUri, class Microsoft.Azure.Storage.Auth.StorageCredentials credentials) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.#ctor(System.Uri,Microsoft.Azure.Storage.Auth.StorageCredentials)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (blobAbsoluteUri As Uri, credentials As StorageCredentials)" />
      <MemberSignature Language="F#" Value="new Microsoft.Azure.Storage.Blob.CloudAppendBlob : Uri * Microsoft.Azure.Storage.Auth.StorageCredentials -&gt; Microsoft.Azure.Storage.Blob.CloudAppendBlob" Usage="new Microsoft.Azure.Storage.Blob.CloudAppendBlob (blobAbsoluteUri, credentials)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="blobAbsoluteUri" Type="System.Uri" />
        <Parameter Name="credentials" Type="Microsoft.Azure.Storage.Auth.StorageCredentials" />
      </Parameters>
      <Docs>
        <param name="blobAbsoluteUri">A <see cref="T:System.Uri" /> specifying the absolute URI to the blob.</param>
        <param name="credentials">A <see cref="T:Microsoft.Azure.Storage.Auth.StorageCredentials" /> object.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Storage.Blob.CloudAppendBlob" /> class using an absolute URI to the blob.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CloudAppendBlob (Uri blobAbsoluteUri, Microsoft.Azure.Storage.Blob.CloudBlobClient client);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri blobAbsoluteUri, class Microsoft.Azure.Storage.Blob.CloudBlobClient client) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.#ctor(System.Uri,Microsoft.Azure.Storage.Blob.CloudBlobClient)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (blobAbsoluteUri As Uri, client As CloudBlobClient)" />
      <MemberSignature Language="F#" Value="new Microsoft.Azure.Storage.Blob.CloudAppendBlob : Uri * Microsoft.Azure.Storage.Blob.CloudBlobClient -&gt; Microsoft.Azure.Storage.Blob.CloudAppendBlob" Usage="new Microsoft.Azure.Storage.Blob.CloudAppendBlob (blobAbsoluteUri, client)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="blobAbsoluteUri" Type="System.Uri" />
        <Parameter Name="client" Type="Microsoft.Azure.Storage.Blob.CloudBlobClient" />
      </Parameters>
      <Docs>
        <param name="blobAbsoluteUri">A <see cref="T:System.Uri" /> specifying the absolute URI to the blob.</param>
        <param name="client">A <see cref="T:Microsoft.Azure.Storage.Blob.CloudBlobClient" /> object.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Storage.Blob.CloudAppendBlob" /> class using an absolute URI to the blob.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CloudAppendBlob (Microsoft.Azure.Storage.StorageUri blobAbsoluteUri, DateTimeOffset? snapshotTime, Microsoft.Azure.Storage.Auth.StorageCredentials credentials);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Azure.Storage.StorageUri blobAbsoluteUri, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; snapshotTime, class Microsoft.Azure.Storage.Auth.StorageCredentials credentials) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.#ctor(Microsoft.Azure.Storage.StorageUri,System.Nullable{System.DateTimeOffset},Microsoft.Azure.Storage.Auth.StorageCredentials)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (blobAbsoluteUri As StorageUri, snapshotTime As Nullable(Of DateTimeOffset), credentials As StorageCredentials)" />
      <MemberSignature Language="F#" Value="new Microsoft.Azure.Storage.Blob.CloudAppendBlob : Microsoft.Azure.Storage.StorageUri * Nullable&lt;DateTimeOffset&gt; * Microsoft.Azure.Storage.Auth.StorageCredentials -&gt; Microsoft.Azure.Storage.Blob.CloudAppendBlob" Usage="new Microsoft.Azure.Storage.Blob.CloudAppendBlob (blobAbsoluteUri, snapshotTime, credentials)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="blobAbsoluteUri" Type="Microsoft.Azure.Storage.StorageUri" />
        <Parameter Name="snapshotTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="credentials" Type="Microsoft.Azure.Storage.Auth.StorageCredentials" />
      </Parameters>
      <Docs>
        <param name="blobAbsoluteUri">A <see cref="T:Microsoft.Azure.Storage.StorageUri" /> containing the absolute URI to the blob at both the primary and secondary locations.</param>
        <param name="snapshotTime">A <see cref="T:System.DateTimeOffset" /> specifying the snapshot timestamp, if the blob is a snapshot.</param>
        <param name="credentials">A <see cref="T:Microsoft.Azure.Storage.Auth.StorageCredentials" /> object.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Storage.Blob.CloudAppendBlob" /> class using an absolute URI to the blob.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CloudAppendBlob (Microsoft.Azure.Storage.StorageUri blobAbsoluteUri, DateTimeOffset? snapshotTime, Microsoft.Azure.Storage.Blob.CloudBlobClient client);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Azure.Storage.StorageUri blobAbsoluteUri, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; snapshotTime, class Microsoft.Azure.Storage.Blob.CloudBlobClient client) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.#ctor(Microsoft.Azure.Storage.StorageUri,System.Nullable{System.DateTimeOffset},Microsoft.Azure.Storage.Blob.CloudBlobClient)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (blobAbsoluteUri As StorageUri, snapshotTime As Nullable(Of DateTimeOffset), client As CloudBlobClient)" />
      <MemberSignature Language="F#" Value="new Microsoft.Azure.Storage.Blob.CloudAppendBlob : Microsoft.Azure.Storage.StorageUri * Nullable&lt;DateTimeOffset&gt; * Microsoft.Azure.Storage.Blob.CloudBlobClient -&gt; Microsoft.Azure.Storage.Blob.CloudAppendBlob" Usage="new Microsoft.Azure.Storage.Blob.CloudAppendBlob (blobAbsoluteUri, snapshotTime, client)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="blobAbsoluteUri" Type="Microsoft.Azure.Storage.StorageUri" />
        <Parameter Name="snapshotTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="client" Type="Microsoft.Azure.Storage.Blob.CloudBlobClient" />
      </Parameters>
      <Docs>
        <param name="blobAbsoluteUri">A <see cref="T:Microsoft.Azure.Storage.StorageUri" /> containing the absolute URI to the blob at both the primary and secondary locations.</param>
        <param name="snapshotTime">A <see cref="T:System.DateTimeOffset" /> specifying the snapshot timestamp, if the blob is a snapshot.</param>
        <param name="client">A <see cref="T:Microsoft.Azure.Storage.Blob.CloudBlobClient" /> object.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Storage.Blob.CloudAppendBlob" /> class using an absolute URI to the blob.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CloudAppendBlob (Uri blobAbsoluteUri, DateTimeOffset? snapshotTime, Microsoft.Azure.Storage.Auth.StorageCredentials credentials);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri blobAbsoluteUri, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; snapshotTime, class Microsoft.Azure.Storage.Auth.StorageCredentials credentials) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.#ctor(System.Uri,System.Nullable{System.DateTimeOffset},Microsoft.Azure.Storage.Auth.StorageCredentials)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (blobAbsoluteUri As Uri, snapshotTime As Nullable(Of DateTimeOffset), credentials As StorageCredentials)" />
      <MemberSignature Language="F#" Value="new Microsoft.Azure.Storage.Blob.CloudAppendBlob : Uri * Nullable&lt;DateTimeOffset&gt; * Microsoft.Azure.Storage.Auth.StorageCredentials -&gt; Microsoft.Azure.Storage.Blob.CloudAppendBlob" Usage="new Microsoft.Azure.Storage.Blob.CloudAppendBlob (blobAbsoluteUri, snapshotTime, credentials)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="blobAbsoluteUri" Type="System.Uri" />
        <Parameter Name="snapshotTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="credentials" Type="Microsoft.Azure.Storage.Auth.StorageCredentials" />
      </Parameters>
      <Docs>
        <param name="blobAbsoluteUri">A <see cref="T:System.Uri" /> specifying the absolute URI to the blob.</param>
        <param name="snapshotTime">A <see cref="T:System.DateTimeOffset" /> specifying the snapshot timestamp, if the blob is a snapshot.</param>
        <param name="credentials">A <see cref="T:Microsoft.Azure.Storage.Auth.StorageCredentials" /> object.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Storage.Blob.CloudAppendBlob" /> class using an absolute URI to the blob.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CloudAppendBlob (Uri blobAbsoluteUri, DateTimeOffset? snapshotTime, Microsoft.Azure.Storage.Blob.CloudBlobClient client);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri blobAbsoluteUri, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; snapshotTime, class Microsoft.Azure.Storage.Blob.CloudBlobClient client) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.#ctor(System.Uri,System.Nullable{System.DateTimeOffset},Microsoft.Azure.Storage.Blob.CloudBlobClient)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (blobAbsoluteUri As Uri, snapshotTime As Nullable(Of DateTimeOffset), client As CloudBlobClient)" />
      <MemberSignature Language="F#" Value="new Microsoft.Azure.Storage.Blob.CloudAppendBlob : Uri * Nullable&lt;DateTimeOffset&gt; * Microsoft.Azure.Storage.Blob.CloudBlobClient -&gt; Microsoft.Azure.Storage.Blob.CloudAppendBlob" Usage="new Microsoft.Azure.Storage.Blob.CloudAppendBlob (blobAbsoluteUri, snapshotTime, client)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="blobAbsoluteUri" Type="System.Uri" />
        <Parameter Name="snapshotTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="client" Type="Microsoft.Azure.Storage.Blob.CloudBlobClient" />
      </Parameters>
      <Docs>
        <param name="blobAbsoluteUri">A <see cref="T:System.Uri" /> specifying the absolute URI to the blob.</param>
        <param name="snapshotTime">A <see cref="T:System.DateTimeOffset" /> specifying the snapshot timestamp, if the blob is a snapshot.</param>
        <param name="client">A <see cref="T:Microsoft.Azure.Storage.Blob.CloudBlobClient" /> object.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Storage.Blob.CloudAppendBlob" /> class using an absolute URI to the blob.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBlock">
      <MemberSignature Language="C#" Value="public virtual long AppendBlock (System.IO.Stream blockData, Microsoft.Azure.Storage.Shared.Protocol.Checksum contentChecksum = default, Microsoft.Azure.Storage.AccessCondition accessCondition = default, Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default, Microsoft.Azure.Storage.OperationContext operationContext = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 AppendBlock(class System.IO.Stream blockData, class Microsoft.Azure.Storage.Shared.Protocol.Checksum contentChecksum, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendBlock(System.IO.Stream,Microsoft.Azure.Storage.Shared.Protocol.Checksum,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AppendBlock (blockData As Stream, Optional contentChecksum As Checksum = Nothing, Optional accessCondition As AccessCondition = Nothing, Optional options As BlobRequestOptions = Nothing, Optional operationContext As OperationContext = Nothing) As Long" />
      <MemberSignature Language="F#" Value="abstract member AppendBlock : System.IO.Stream * Microsoft.Azure.Storage.Shared.Protocol.Checksum * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; int64&#xA;override this.AppendBlock : System.IO.Stream * Microsoft.Azure.Storage.Shared.Protocol.Checksum * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; int64" Usage="cloudAppendBlob.AppendBlock (blockData, contentChecksum, accessCondition, options, operationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blockData" Type="System.IO.Stream" />
        <Parameter Name="contentChecksum" Type="Microsoft.Azure.Storage.Shared.Protocol.Checksum" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
      </Parameters>
      <Docs>
        <param name="blockData">A <see cref="T:System.IO.Stream" /> object that provides the data for the block.</param>
        <param name="contentChecksum">An optional hash value used to ensure transactional integrity. May be <c>null</c> or Checksum.None</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request. If <c>null</c>, default options are applied to the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <summary>
            Commits a new block of data to the end of the blob.
            </summary>
        <returns>The offset at which the block was appended.</returns>
        <remarks>
            Clients may send the content checksum headers for a given operation as a means to ensure transactional integrity over the wire. 
            The <paramref name="contentChecksum" /> parameter permits clients who already have access to a pre-computed checksum value for a given byte range to provide it.
            If the <see cref="P:BlobRequestOptions.UseTransactionalMd5" /> or <see cref="P:BlobRequestOptions.UseTransactionalCrc64" /> properties are set to <c>true</c> and the corresponding content parameter is set 
            to <c>null</c>, then the client library will calculate the checksum value internally.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBlock">
      <MemberSignature Language="C#" Value="public virtual long AppendBlock (Uri sourceUri, long offset, long count, Microsoft.Azure.Storage.Shared.Protocol.Checksum sourceContentChecksum, Microsoft.Azure.Storage.AccessCondition sourceAccessCondition = default, Microsoft.Azure.Storage.AccessCondition destAccessCondition = default, Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default, Microsoft.Azure.Storage.OperationContext operationContext = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 AppendBlock(class System.Uri sourceUri, int64 offset, int64 count, class Microsoft.Azure.Storage.Shared.Protocol.Checksum sourceContentChecksum, class Microsoft.Azure.Storage.AccessCondition sourceAccessCondition, class Microsoft.Azure.Storage.AccessCondition destAccessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendBlock(System.Uri,System.Int64,System.Int64,Microsoft.Azure.Storage.Shared.Protocol.Checksum,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AppendBlock (sourceUri As Uri, offset As Long, count As Long, sourceContentChecksum As Checksum, Optional sourceAccessCondition As AccessCondition = Nothing, Optional destAccessCondition As AccessCondition = Nothing, Optional options As BlobRequestOptions = Nothing, Optional operationContext As OperationContext = Nothing) As Long" />
      <MemberSignature Language="F#" Value="abstract member AppendBlock : Uri * int64 * int64 * Microsoft.Azure.Storage.Shared.Protocol.Checksum * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; int64&#xA;override this.AppendBlock : Uri * int64 * int64 * Microsoft.Azure.Storage.Shared.Protocol.Checksum * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; int64" Usage="cloudAppendBlob.AppendBlock (sourceUri, offset, count, sourceContentChecksum, sourceAccessCondition, destAccessCondition, options, operationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceUri" Type="System.Uri" />
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="count" Type="System.Int64" />
        <Parameter Name="sourceContentChecksum" Type="Microsoft.Azure.Storage.Shared.Protocol.Checksum" />
        <Parameter Name="sourceAccessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="destAccessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
      </Parameters>
      <Docs>
        <param name="sourceUri">A <see cref="T:System.Uri" /> specifying the absolute URI to the source blob.</param>
        <param name="offset">The byte offset in the source at which to begin retrieving content.</param>
        <param name="count">The number of bytes from the source to return, or <c>null</c> to return all bytes through the end of the blob.</param>
        <param name="sourceContentChecksum">A hash value used to ensure transactional integrity. May be <c>null</c> or Checksum.None</param>
        <param name="sourceAccessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the access conditions for the source blob. If <c>null</c>, no condition is used.</param>
        <param name="destAccessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the access conditions for the destination blob. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request. If <c>null</c>, default options are applied to the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <summary>
            Commits a new block of data to the end of the blob.
            </summary>
        <returns>The offset at which the block was appended.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBlockAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;long&gt; AppendBlockAsync (System.IO.Stream blockData, string contentMD5 = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;int64&gt; AppendBlockAsync(class System.IO.Stream blockData, string contentMD5) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendBlockAsync(System.IO.Stream,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AppendBlockAsync (blockData As Stream, Optional contentMD5 As String = Nothing) As Task(Of Long)" />
      <MemberSignature Language="F#" Value="abstract member AppendBlockAsync : System.IO.Stream * string -&gt; System.Threading.Tasks.Task&lt;int64&gt;&#xA;override this.AppendBlockAsync : System.IO.Stream * string -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="cloudAppendBlob.AppendBlockAsync (blockData, contentMD5)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blockData" Type="System.IO.Stream" />
        <Parameter Name="contentMD5" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="blockData">A <see cref="T:System.IO.Stream" /> object that provides the data for the block.</param>
        <param name="contentMD5">An optional hash value used to ensure transactional integrity. May be <c>null</c> or an empty string.</param>
        <summary>
            Initiates an asynchronous operation to commit a new block of data to the end of the blob.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Clients may send the Content-MD5 header for a given Append Block operation as a means to ensure transactional integrity over the wire. 
            The <paramref name="contentMD5" /> parameter permits clients who already have access to a pre-computed MD5 value for a given byte range to provide it.
            If the <see cref="P:BlobRequestOptions.UseTransactionalMd5" /> property is set to <c>true</c> and the <paramref name="contentMD5" /> parameter is set 
            to <c>null</c>, then the client library will calculate the MD5 value internally.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBlockAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;long&gt; AppendBlockAsync (System.IO.Stream blockData, string contentMD5, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;int64&gt; AppendBlockAsync(class System.IO.Stream blockData, string contentMD5, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendBlockAsync(System.IO.Stream,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AppendBlockAsync (blockData As Stream, contentMD5 As String, cancellationToken As CancellationToken) As Task(Of Long)" />
      <MemberSignature Language="F#" Value="abstract member AppendBlockAsync : System.IO.Stream * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int64&gt;&#xA;override this.AppendBlockAsync : System.IO.Stream * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="cloudAppendBlob.AppendBlockAsync (blockData, contentMD5, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blockData" Type="System.IO.Stream" />
        <Parameter Name="contentMD5" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="blockData">A <see cref="T:System.IO.Stream" /> object that provides the data for the block.</param>
        <param name="contentMD5">An optional hash value used to ensure transactional integrity. May be <c>null</c> or an empty string.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to commit a new block of data to the end of the blob.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Clients may send the Content-MD5 header for a given Put Block operation as a means to ensure transactional integrity over the wire. 
            The <paramref name="contentMD5" /> parameter permits clients who already have access to a pre-computed MD5 value for a given byte range to provide it.
            If the <see cref="P:BlobRequestOptions.UseTransactionalMd5" /> property is set to <c>true</c> and the <paramref name="contentMD5" /> parameter is set 
            to <c>null</c>, then the client library will calculate the MD5 value internally.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBlockAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;long&gt; AppendBlockAsync (System.IO.Stream blockData, string contentMD5, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;int64&gt; AppendBlockAsync(class System.IO.Stream blockData, string contentMD5, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendBlockAsync(System.IO.Stream,System.String,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AppendBlockAsync (blockData As Stream, contentMD5 As String, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext) As Task(Of Long)" />
      <MemberSignature Language="F#" Value="abstract member AppendBlockAsync : System.IO.Stream * string * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; System.Threading.Tasks.Task&lt;int64&gt;&#xA;override this.AppendBlockAsync : System.IO.Stream * string * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="cloudAppendBlob.AppendBlockAsync (blockData, contentMD5, accessCondition, options, operationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blockData" Type="System.IO.Stream" />
        <Parameter Name="contentMD5" Type="System.String" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
      </Parameters>
      <Docs>
        <param name="blockData">A <see cref="T:System.IO.Stream" /> object that provides the data for the block.</param>
        <param name="contentMD5">An optional hash value used to ensure transactional integrity. May be <c>null</c> or an empty string.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <summary>
            Initiates an asynchronous operation to commit a new block of data to the end of the blob.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Clients may send the Content-MD5 header for a given Append Block operation as a means to ensure transactional integrity over the wire. 
            The <paramref name="contentMD5" /> parameter permits clients who already have access to a pre-computed MD5 value for a given byte range to provide it.
            If the <see cref="P:BlobRequestOptions.UseTransactionalMd5" /> property is set to <c>true</c> and the <paramref name="contentMD5" /> parameter is set 
            to <c>null</c>, then the client library will calculate the MD5 value internally.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBlockAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;long&gt; AppendBlockAsync (System.IO.Stream blockData, string contentMD5, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;int64&gt; AppendBlockAsync(class System.IO.Stream blockData, string contentMD5, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendBlockAsync(System.IO.Stream,System.String,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AppendBlockAsync (blockData As Stream, contentMD5 As String, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, cancellationToken As CancellationToken) As Task(Of Long)" />
      <MemberSignature Language="F#" Value="abstract member AppendBlockAsync : System.IO.Stream * string * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int64&gt;&#xA;override this.AppendBlockAsync : System.IO.Stream * string * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="cloudAppendBlob.AppendBlockAsync (blockData, contentMD5, accessCondition, options, operationContext, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blockData" Type="System.IO.Stream" />
        <Parameter Name="contentMD5" Type="System.String" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="blockData">A <see cref="T:System.IO.Stream" /> object that provides the data for the block.</param>
        <param name="contentMD5">An optional hash value used to ensure transactional integrity. May be <c>null</c> or an empty string.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to commit a new block of data to the end of the blob.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Clients may send the Content-MD5 header for a given Append Block operation as a means to ensure transactional integrity over the wire. 
            The <paramref name="contentMD5" /> parameter permits clients who already have access to a pre-computed MD5 value for a given byte range to provide it.
            If the <see cref="P:BlobRequestOptions.UseTransactionalMd5" /> property is set to <c>true</c> and the <paramref name="contentMD5" /> parameter is set 
            to <c>null</c>, then the client library will calculate the MD5 value internally.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBlockAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;long&gt; AppendBlockAsync (System.IO.Stream blockData, string contentMD5, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; progressHandler, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;int64&gt; AppendBlockAsync(class System.IO.Stream blockData, string contentMD5, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, class System.IProgress`1&lt;class Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; progressHandler, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendBlockAsync(System.IO.Stream,System.String,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.IProgress{Microsoft.Azure.Storage.Core.Util.StorageProgress},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AppendBlockAsync (blockData As Stream, contentMD5 As String, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, progressHandler As IProgress(Of StorageProgress), cancellationToken As CancellationToken) As Task(Of Long)" />
      <MemberSignature Language="F#" Value="abstract member AppendBlockAsync : System.IO.Stream * string * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int64&gt;&#xA;override this.AppendBlockAsync : System.IO.Stream * string * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="cloudAppendBlob.AppendBlockAsync (blockData, contentMD5, accessCondition, options, operationContext, progressHandler, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blockData" Type="System.IO.Stream" />
        <Parameter Name="contentMD5" Type="System.String" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="progressHandler" Type="System.IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="blockData">A <see cref="T:System.IO.Stream" /> object that provides the data for the block.</param>
        <param name="contentMD5">An optional hash value used to ensure transactional integrity. May be <c>null</c> or an empty string.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="progressHandler"> A <see cref="T:System.IProgress`1" /> object to handle <see cref="T:Microsoft.Azure.Storage.Core.Util.StorageProgress" /> messages.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to commit a new block of data to the end of the blob.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Clients may send the Content-MD5 header for a given Append Block operation as a means to ensure transactional integrity over the wire. 
            The <paramref name="contentMD5" /> parameter permits clients who already have access to a pre-computed MD5 value for a given byte range to provide it.
            If the <see cref="P:BlobRequestOptions.UseTransactionalMd5" /> property is set to <c>true</c> and the <paramref name="contentMD5" /> parameter is set 
            to <c>null</c>, then the client library will calculate the MD5 value internally.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBlockAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;long&gt; AppendBlockAsync (Uri sourceUri, long offset, long count, string sourceContentMd5, Microsoft.Azure.Storage.AccessCondition sourceAccessCondition, Microsoft.Azure.Storage.AccessCondition destAccessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;int64&gt; AppendBlockAsync(class System.Uri sourceUri, int64 offset, int64 count, string sourceContentMd5, class Microsoft.Azure.Storage.AccessCondition sourceAccessCondition, class Microsoft.Azure.Storage.AccessCondition destAccessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendBlockAsync(System.Uri,System.Int64,System.Int64,System.String,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AppendBlockAsync (sourceUri As Uri, offset As Long, count As Long, sourceContentMd5 As String, sourceAccessCondition As AccessCondition, destAccessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, cancellationToken As CancellationToken) As Task(Of Long)" />
      <MemberSignature Language="F#" Value="abstract member AppendBlockAsync : Uri * int64 * int64 * string * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int64&gt;&#xA;override this.AppendBlockAsync : Uri * int64 * int64 * string * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int64&gt;" Usage="cloudAppendBlob.AppendBlockAsync (sourceUri, offset, count, sourceContentMd5, sourceAccessCondition, destAccessCondition, options, operationContext, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceUri" Type="System.Uri" />
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="count" Type="System.Int64" />
        <Parameter Name="sourceContentMd5" Type="System.String" />
        <Parameter Name="sourceAccessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="destAccessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="sourceUri">A <see cref="T:System.Uri" /> specifying the absolute URI to the source blob.</param>
        <param name="offset">The byte offset in the source at which to begin retrieving content.</param>
        <param name="count">The number of bytes from the source to return, or <c>null</c> to return all bytes through the end of the blob.</param>
        <param name="sourceContentMd5">An optional hash value that will be used to set the <see cref="P:Microsoft.Azure.Storage.Blob.BlobProperties.ContentMD5" /> property
            on the blob. May be <c>null</c> or an empty string.</param>
        <param name="sourceAccessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the access conditions for the source blob. If <c>null</c>, no condition is used.</param>
        <param name="destAccessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the access conditions for the destination blob. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Commits a new block of data to the end of the blob.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents an asynchronous action.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendFromByteArray">
      <MemberSignature Language="C#" Value="public virtual void AppendFromByteArray (byte[] buffer, int index, int count, Microsoft.Azure.Storage.AccessCondition accessCondition = default, Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default, Microsoft.Azure.Storage.OperationContext operationContext = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AppendFromByteArray(unsigned int8[] buffer, int32 index, int32 count, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromByteArray(System.Byte[],System.Int32,System.Int32,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AppendFromByteArray (buffer As Byte(), index As Integer, count As Integer, Optional accessCondition As AccessCondition = Nothing, Optional options As BlobRequestOptions = Nothing, Optional operationContext As OperationContext = Nothing)" />
      <MemberSignature Language="F#" Value="abstract member AppendFromByteArray : byte[] * int * int * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; unit&#xA;override this.AppendFromByteArray : byte[] * int * int * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; unit" Usage="cloudAppendBlob.AppendFromByteArray (buffer, index, count, accessCondition, options, operationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
      </Parameters>
      <Docs>
        <param name="buffer">An array of bytes.</param>
        <param name="index">The zero-based byte offset in buffer at which to begin uploading bytes to the blob.</param>
        <param name="count">The number of bytes to be written to the blob.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request. If <c>null</c>, default options are applied to the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <summary>
            Appends the contents of a byte array to an append blob.Recommended only for single-writer scenarios.
            </summary>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendFromByteArrayAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AppendFromByteArrayAsync (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AppendFromByteArrayAsync(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromByteArrayAsync(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AppendFromByteArrayAsync (buffer As Byte(), index As Integer, count As Integer) As Task" />
      <MemberSignature Language="F#" Value="abstract member AppendFromByteArrayAsync : byte[] * int * int -&gt; System.Threading.Tasks.Task&#xA;override this.AppendFromByteArrayAsync : byte[] * int * int -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.AppendFromByteArrayAsync (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">An array of bytes.</param>
        <param name="index">The zero-based byte offset in buffer at which to begin uploading bytes to the blob.</param>
        <param name="count">The number of bytes to be written to the blob.</param>
        <summary>
            Initiates an asynchronous operation to append the contents of a byte array to an append blob. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendFromByteArrayAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AppendFromByteArrayAsync (byte[] buffer, int index, int count, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AppendFromByteArrayAsync(unsigned int8[] buffer, int32 index, int32 count, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromByteArrayAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AppendFromByteArrayAsync (buffer As Byte(), index As Integer, count As Integer, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member AppendFromByteArrayAsync : byte[] * int * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.AppendFromByteArrayAsync : byte[] * int * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.AppendFromByteArrayAsync (buffer, index, count, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">An array of bytes.</param>
        <param name="index">The zero-based byte offset in buffer at which to begin uploading bytes to the blob.</param>
        <param name="count">The number of bytes to be written to the blob.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to append the contents of a byte array to an append blob. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendFromByteArrayAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AppendFromByteArrayAsync (byte[] buffer, int index, int count, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AppendFromByteArrayAsync(unsigned int8[] buffer, int32 index, int32 count, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromByteArrayAsync(System.Byte[],System.Int32,System.Int32,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AppendFromByteArrayAsync (buffer As Byte(), index As Integer, count As Integer, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext) As Task" />
      <MemberSignature Language="F#" Value="abstract member AppendFromByteArrayAsync : byte[] * int * int * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; System.Threading.Tasks.Task&#xA;override this.AppendFromByteArrayAsync : byte[] * int * int * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.AppendFromByteArrayAsync (buffer, index, count, accessCondition, options, operationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
      </Parameters>
      <Docs>
        <param name="buffer">An array of bytes.</param>
        <param name="index">The zero-based byte offset in buffer at which to begin uploading bytes to the blob.</param>
        <param name="count">The number of bytes to be written to the blob.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <summary>
            Initiates an asynchronous operation to append the contents of a byte array to an append blob.This API should be used strictly in a single writer scenario 
            because the API internally uses the append-offset conditional header to avoid duplicate blocks which does not work in a multiple writer scenario.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendFromByteArrayAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AppendFromByteArrayAsync (byte[] buffer, int index, int count, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AppendFromByteArrayAsync(unsigned int8[] buffer, int32 index, int32 count, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromByteArrayAsync(System.Byte[],System.Int32,System.Int32,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AppendFromByteArrayAsync (buffer As Byte(), index As Integer, count As Integer, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member AppendFromByteArrayAsync : byte[] * int * int * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.AppendFromByteArrayAsync : byte[] * int * int * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.AppendFromByteArrayAsync (buffer, index, count, accessCondition, options, operationContext, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">An array of bytes.</param>
        <param name="index">The zero-based byte offset in buffer at which to begin uploading bytes to the blob.</param>
        <param name="count">The number of bytes to be written to the blob.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to upload the contents of a byte array to an append blob.This API should be used strictly in a single writer scenario 
            because the API internally uses the append-offset conditional header to avoid duplicate blocks which does not work in a multiple writer scenario.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendFromByteArrayAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AppendFromByteArrayAsync (byte[] buffer, int index, int count, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; progressHandler, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AppendFromByteArrayAsync(unsigned int8[] buffer, int32 index, int32 count, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, class System.IProgress`1&lt;class Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; progressHandler, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromByteArrayAsync(System.Byte[],System.Int32,System.Int32,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.IProgress{Microsoft.Azure.Storage.Core.Util.StorageProgress},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AppendFromByteArrayAsync (buffer As Byte(), index As Integer, count As Integer, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, progressHandler As IProgress(Of StorageProgress), cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member AppendFromByteArrayAsync : byte[] * int * int * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.AppendFromByteArrayAsync : byte[] * int * int * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.AppendFromByteArrayAsync (buffer, index, count, accessCondition, options, operationContext, progressHandler, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="progressHandler" Type="System.IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">An array of bytes.</param>
        <param name="index">The zero-based byte offset in buffer at which to begin uploading bytes to the blob.</param>
        <param name="count">The number of bytes to be written to the blob.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="progressHandler"> A <see cref="T:System.IProgress`1" /> object to handle <see cref="T:Microsoft.Azure.Storage.Core.Util.StorageProgress" /> messages.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to upload the contents of a byte array to an append blob.This API should be used strictly in a single writer scenario 
            because the API internally uses the append-offset conditional header to avoid duplicate blocks which does not work in a multiple writer scenario.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendFromFile">
      <MemberSignature Language="C#" Value="public virtual void AppendFromFile (string path, Microsoft.Azure.Storage.AccessCondition accessCondition = default, Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default, Microsoft.Azure.Storage.OperationContext operationContext = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AppendFromFile(string path, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromFile(System.String,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AppendFromFile (path As String, Optional accessCondition As AccessCondition = Nothing, Optional options As BlobRequestOptions = Nothing, Optional operationContext As OperationContext = Nothing)" />
      <MemberSignature Language="F#" Value="abstract member AppendFromFile : string * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; unit&#xA;override this.AppendFromFile : string * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; unit" Usage="cloudAppendBlob.AppendFromFile (path, accessCondition, options, operationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
      </Parameters>
      <Docs>
        <param name="path">A string containing the file path providing the blob content.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request. If <c>null</c>, default options are applied to the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <summary>
            Appends a file to an append blob. Recommended only for single-writer scenarios.
            </summary>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendFromFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AppendFromFileAsync (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AppendFromFileAsync(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromFileAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AppendFromFileAsync (path As String) As Task" />
      <MemberSignature Language="F#" Value="abstract member AppendFromFileAsync : string -&gt; System.Threading.Tasks.Task&#xA;override this.AppendFromFileAsync : string -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.AppendFromFileAsync path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">A string containing the file path providing the blob content.</param>
        <summary>
            Initiates an asynchronous operation to append a file to an append blob. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendFromFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AppendFromFileAsync (string path, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AppendFromFileAsync(string path, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromFileAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AppendFromFileAsync (path As String, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member AppendFromFileAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.AppendFromFileAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.AppendFromFileAsync (path, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">A string containing the file path providing the blob content.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to append a file to an append blob. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendFromFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AppendFromFileAsync (string path, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AppendFromFileAsync(string path, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromFileAsync(System.String,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AppendFromFileAsync (path As String, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext) As Task" />
      <MemberSignature Language="F#" Value="abstract member AppendFromFileAsync : string * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; System.Threading.Tasks.Task&#xA;override this.AppendFromFileAsync : string * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.AppendFromFileAsync (path, accessCondition, options, operationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
      </Parameters>
      <Docs>
        <param name="path">A string containing the file path providing the blob content.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <summary>
            Initiates an asynchronous operation to append a file to an append blob. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendFromFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AppendFromFileAsync (string path, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AppendFromFileAsync(string path, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromFileAsync(System.String,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AppendFromFileAsync (path As String, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member AppendFromFileAsync : string * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.AppendFromFileAsync : string * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.AppendFromFileAsync (path, accessCondition, options, operationContext, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">A string containing the file path providing the blob content.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to append a file to an append blob. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendFromFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AppendFromFileAsync (string path, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; progressHandler, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AppendFromFileAsync(string path, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, class System.IProgress`1&lt;class Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; progressHandler, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromFileAsync(System.String,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.IProgress{Microsoft.Azure.Storage.Core.Util.StorageProgress},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AppendFromFileAsync (path As String, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, progressHandler As IProgress(Of StorageProgress), cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member AppendFromFileAsync : string * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.AppendFromFileAsync : string * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.AppendFromFileAsync (path, accessCondition, options, operationContext, progressHandler, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="progressHandler" Type="System.IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">A string containing the file path providing the blob content.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="progressHandler"> A <see cref="T:System.IProgress`1" /> object to handle <see cref="T:Microsoft.Azure.Storage.Core.Util.StorageProgress" /> messages.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to append a file to an append blob. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendFromStream">
      <MemberSignature Language="C#" Value="public virtual void AppendFromStream (System.IO.Stream source, Microsoft.Azure.Storage.AccessCondition accessCondition = default, Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default, Microsoft.Azure.Storage.OperationContext operationContext = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AppendFromStream(class System.IO.Stream source, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromStream(System.IO.Stream,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AppendFromStream (source As Stream, Optional accessCondition As AccessCondition = Nothing, Optional options As BlobRequestOptions = Nothing, Optional operationContext As OperationContext = Nothing)" />
      <MemberSignature Language="F#" Value="abstract member AppendFromStream : System.IO.Stream * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; unit&#xA;override this.AppendFromStream : System.IO.Stream * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; unit" Usage="cloudAppendBlob.AppendFromStream (source, accessCondition, options, operationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:System.IO.Stream" /> object providing the blob content.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request. If <c>null</c>, default options are applied to the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <summary>
            Appends a stream to an append blob. Recommended only for single-writer scenarios.
            </summary>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendFromStream">
      <MemberSignature Language="C#" Value="public virtual void AppendFromStream (System.IO.Stream source, long length, Microsoft.Azure.Storage.AccessCondition accessCondition = default, Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default, Microsoft.Azure.Storage.OperationContext operationContext = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AppendFromStream(class System.IO.Stream source, int64 length, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromStream(System.IO.Stream,System.Int64,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AppendFromStream (source As Stream, length As Long, Optional accessCondition As AccessCondition = Nothing, Optional options As BlobRequestOptions = Nothing, Optional operationContext As OperationContext = Nothing)" />
      <MemberSignature Language="F#" Value="abstract member AppendFromStream : System.IO.Stream * int64 * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; unit&#xA;override this.AppendFromStream : System.IO.Stream * int64 * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; unit" Usage="cloudAppendBlob.AppendFromStream (source, length, accessCondition, options, operationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
        <Parameter Name="length" Type="System.Int64" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:System.IO.Stream" /> object providing the blob content.</param>
        <param name="length">The number of bytes to write from the source stream at its current position.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request. If <c>null</c>, default options are applied to the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <summary>
            Appends a stream to an append blob. Recommended only for single-writer scenarios.
            </summary>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendFromStreamAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AppendFromStreamAsync (System.IO.Stream source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AppendFromStreamAsync(class System.IO.Stream source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromStreamAsync(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AppendFromStreamAsync (source As Stream) As Task" />
      <MemberSignature Language="F#" Value="abstract member AppendFromStreamAsync : System.IO.Stream -&gt; System.Threading.Tasks.Task&#xA;override this.AppendFromStreamAsync : System.IO.Stream -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.AppendFromStreamAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:System.IO.Stream" /> object providing the blob content.</param>
        <summary>
            Initiates an asynchronous operation to append a stream to an append blob. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendFromStreamAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AppendFromStreamAsync (System.IO.Stream source, long length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AppendFromStreamAsync(class System.IO.Stream source, int64 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromStreamAsync(System.IO.Stream,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AppendFromStreamAsync (source As Stream, length As Long) As Task" />
      <MemberSignature Language="F#" Value="abstract member AppendFromStreamAsync : System.IO.Stream * int64 -&gt; System.Threading.Tasks.Task&#xA;override this.AppendFromStreamAsync : System.IO.Stream * int64 -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.AppendFromStreamAsync (source, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
        <Parameter Name="length" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:System.IO.Stream" /> object providing the blob content.</param>
        <param name="length">The number of bytes to write from the source stream at its current position.</param>
        <summary>
            Initiates an asynchronous operation to append a stream to an append blob. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendFromStreamAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AppendFromStreamAsync (System.IO.Stream source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AppendFromStreamAsync(class System.IO.Stream source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromStreamAsync(System.IO.Stream,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AppendFromStreamAsync (source As Stream, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member AppendFromStreamAsync : System.IO.Stream * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.AppendFromStreamAsync : System.IO.Stream * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.AppendFromStreamAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:System.IO.Stream" /> object providing the blob content.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to append a stream to an append blob. Recommended only for single-writer scenarios.        
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendFromStreamAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AppendFromStreamAsync (System.IO.Stream source, long length, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AppendFromStreamAsync(class System.IO.Stream source, int64 length, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromStreamAsync(System.IO.Stream,System.Int64,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AppendFromStreamAsync (source As Stream, length As Long, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member AppendFromStreamAsync : System.IO.Stream * int64 * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.AppendFromStreamAsync : System.IO.Stream * int64 * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.AppendFromStreamAsync (source, length, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
        <Parameter Name="length" Type="System.Int64" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:System.IO.Stream" /> object providing the blob content.</param>
        <param name="length">The number of bytes to write from the source stream at its current position.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to append a stream to an append blob. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendFromStreamAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AppendFromStreamAsync (System.IO.Stream source, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AppendFromStreamAsync(class System.IO.Stream source, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromStreamAsync(System.IO.Stream,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AppendFromStreamAsync (source As Stream, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext) As Task" />
      <MemberSignature Language="F#" Value="abstract member AppendFromStreamAsync : System.IO.Stream * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; System.Threading.Tasks.Task&#xA;override this.AppendFromStreamAsync : System.IO.Stream * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.AppendFromStreamAsync (source, accessCondition, options, operationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:System.IO.Stream" /> object providing the blob content.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <summary>
            Initiates an asynchronous operation to append a stream to an append blob. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendFromStreamAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AppendFromStreamAsync (System.IO.Stream source, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AppendFromStreamAsync(class System.IO.Stream source, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromStreamAsync(System.IO.Stream,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AppendFromStreamAsync (source As Stream, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member AppendFromStreamAsync : System.IO.Stream * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.AppendFromStreamAsync : System.IO.Stream * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.AppendFromStreamAsync (source, accessCondition, options, operationContext, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:System.IO.Stream" /> object providing the blob content.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to append a stream to an append blob. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendFromStreamAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AppendFromStreamAsync (System.IO.Stream source, long length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AppendFromStreamAsync(class System.IO.Stream source, int64 length, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromStreamAsync(System.IO.Stream,System.Int64,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AppendFromStreamAsync (source As Stream, length As Long, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext) As Task" />
      <MemberSignature Language="F#" Value="abstract member AppendFromStreamAsync : System.IO.Stream * int64 * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; System.Threading.Tasks.Task&#xA;override this.AppendFromStreamAsync : System.IO.Stream * int64 * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.AppendFromStreamAsync (source, length, accessCondition, options, operationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
        <Parameter Name="length" Type="System.Int64" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:System.IO.Stream" /> object providing the blob content.</param>
        <param name="length">The number of bytes to write from the source stream at its current position.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <summary>
            Initiates an asynchronous operation to append a stream to an append blob. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendFromStreamAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AppendFromStreamAsync (System.IO.Stream source, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; progressHandler, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AppendFromStreamAsync(class System.IO.Stream source, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, class System.IProgress`1&lt;class Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; progressHandler, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromStreamAsync(System.IO.Stream,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.IProgress{Microsoft.Azure.Storage.Core.Util.StorageProgress},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AppendFromStreamAsync (source As Stream, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, progressHandler As IProgress(Of StorageProgress), cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member AppendFromStreamAsync : System.IO.Stream * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.AppendFromStreamAsync : System.IO.Stream * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.AppendFromStreamAsync (source, accessCondition, options, operationContext, progressHandler, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="progressHandler" Type="System.IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:System.IO.Stream" /> object providing the blob content.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="progressHandler"> A <see cref="T:System.IProgress`1" /> object to handle <see cref="T:Microsoft.Azure.Storage.Core.Util.StorageProgress" /> messages.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to append a stream to an append blob. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendFromStreamAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AppendFromStreamAsync (System.IO.Stream source, long length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AppendFromStreamAsync(class System.IO.Stream source, int64 length, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromStreamAsync(System.IO.Stream,System.Int64,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AppendFromStreamAsync (source As Stream, length As Long, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member AppendFromStreamAsync : System.IO.Stream * int64 * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.AppendFromStreamAsync : System.IO.Stream * int64 * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.AppendFromStreamAsync (source, length, accessCondition, options, operationContext, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
        <Parameter Name="length" Type="System.Int64" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:System.IO.Stream" /> object providing the blob content.</param>
        <param name="length">The number of bytes to write from the source stream at its current position.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to append a stream to an append blob. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendFromStreamAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AppendFromStreamAsync (System.IO.Stream source, long length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; progressHandler, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AppendFromStreamAsync(class System.IO.Stream source, int64 length, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, class System.IProgress`1&lt;class Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; progressHandler, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromStreamAsync(System.IO.Stream,System.Int64,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.IProgress{Microsoft.Azure.Storage.Core.Util.StorageProgress},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AppendFromStreamAsync (source As Stream, length As Long, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, progressHandler As IProgress(Of StorageProgress), cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member AppendFromStreamAsync : System.IO.Stream * int64 * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.AppendFromStreamAsync : System.IO.Stream * int64 * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.AppendFromStreamAsync (source, length, accessCondition, options, operationContext, progressHandler, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
        <Parameter Name="length" Type="System.Int64" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="progressHandler" Type="System.IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:System.IO.Stream" /> object providing the blob content.</param>
        <param name="length">The number of bytes to write from the source stream at its current position.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="progressHandler"> A <see cref="T:System.IProgress`1" /> object to handle <see cref="T:Microsoft.Azure.Storage.Core.Util.StorageProgress" /> messages.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to append a stream to an append blob. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendText">
      <MemberSignature Language="C#" Value="public virtual void AppendText (string content, System.Text.Encoding encoding = default, Microsoft.Azure.Storage.AccessCondition accessCondition = default, Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default, Microsoft.Azure.Storage.OperationContext operationContext = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AppendText(string content, class System.Text.Encoding encoding, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendText(System.String,System.Text.Encoding,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AppendText (content As String, Optional encoding As Encoding = Nothing, Optional accessCondition As AccessCondition = Nothing, Optional options As BlobRequestOptions = Nothing, Optional operationContext As OperationContext = Nothing)" />
      <MemberSignature Language="F#" Value="abstract member AppendText : string * System.Text.Encoding * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; unit&#xA;override this.AppendText : string * System.Text.Encoding * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; unit" Usage="cloudAppendBlob.AppendText (content, encoding, accessCondition, options, operationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
      </Parameters>
      <Docs>
        <param name="content">A string containing the text to upload.</param>
        <param name="encoding">A <see cref="T:System.Text.Encoding" /> object that indicates the text encoding to use. If <c>null</c>, UTF-8 will be used.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request. If <c>null</c>, default options are applied to the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <summary>
            Appends a string of text to an append blob. This API should be used strictly in a single writer scenario 
            because the API internally uses the append-offset conditional header to avoid duplicate blocks which does not work in a multiple writer scenario.
            </summary>
        <remarks>
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AppendTextAsync (string content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AppendTextAsync(string content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendTextAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AppendTextAsync (content As String) As Task" />
      <MemberSignature Language="F#" Value="abstract member AppendTextAsync : string -&gt; System.Threading.Tasks.Task&#xA;override this.AppendTextAsync : string -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.AppendTextAsync content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="content">A string containing the text to upload.</param>
        <summary>
            Initiates an asynchronous operation to append a string of text to an append blob. This API should be used strictly in a single writer scenario 
            because the API internally uses the append-offset conditional header to avoid duplicate blocks which does not work in a multiple writer scenario.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AppendTextAsync (string content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AppendTextAsync(string content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendTextAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AppendTextAsync (content As String, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member AppendTextAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.AppendTextAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.AppendTextAsync (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content">A string containing the text to upload.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to append a string of text to an append blob. This API should be used strictly in a single writer scenario 
            because the API internally uses the append-offset conditional header to avoid duplicate blocks which does not work in a multiple writer scenario.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AppendTextAsync (string content, System.Text.Encoding encoding, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AppendTextAsync(string content, class System.Text.Encoding encoding, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendTextAsync(System.String,System.Text.Encoding,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AppendTextAsync (content As String, encoding As Encoding, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext) As Task" />
      <MemberSignature Language="F#" Value="abstract member AppendTextAsync : string * System.Text.Encoding * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; System.Threading.Tasks.Task&#xA;override this.AppendTextAsync : string * System.Text.Encoding * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.AppendTextAsync (content, encoding, accessCondition, options, operationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
      </Parameters>
      <Docs>
        <param name="content">A string containing the text to upload.</param>
        <param name="encoding">A <see cref="T:System.Text.Encoding" /> object that indicates the text encoding to use. If <c>null</c>, UTF-8 will be used.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <summary>
            Initiates an asynchronous operation to append a string of text to an append blob. This API should be used strictly in a single writer scenario 
            because the API internally uses the append-offset conditional header to avoid duplicate blocks which does not work in a multiple writer scenario.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AppendTextAsync (string content, System.Text.Encoding encoding, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AppendTextAsync(string content, class System.Text.Encoding encoding, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendTextAsync(System.String,System.Text.Encoding,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AppendTextAsync (content As String, encoding As Encoding, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member AppendTextAsync : string * System.Text.Encoding * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.AppendTextAsync : string * System.Text.Encoding * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.AppendTextAsync (content, encoding, accessCondition, options, operationContext, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content">A string containing the text to upload.</param>
        <param name="encoding">A <see cref="T:System.Text.Encoding" /> object that indicates the text encoding to use. If <c>null</c>, UTF-8 will be used.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to append a string of text to an append blob. This API should be used strictly in a single writer scenario 
            because the API internally uses the append-offset conditional header to avoid duplicate blocks which does not work in a multiple writer scenario.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AppendTextAsync (string content, System.Text.Encoding encoding, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; progressHandler, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AppendTextAsync(string content, class System.Text.Encoding encoding, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, class System.IProgress`1&lt;class Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; progressHandler, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendTextAsync(System.String,System.Text.Encoding,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.IProgress{Microsoft.Azure.Storage.Core.Util.StorageProgress},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AppendTextAsync (content As String, encoding As Encoding, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, progressHandler As IProgress(Of StorageProgress), cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member AppendTextAsync : string * System.Text.Encoding * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.AppendTextAsync : string * System.Text.Encoding * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.AppendTextAsync (content, encoding, accessCondition, options, operationContext, progressHandler, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="progressHandler" Type="System.IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content">A string containing the text to upload.</param>
        <param name="encoding">A <see cref="T:System.Text.Encoding" /> object that indicates the text encoding to use. If <c>null</c>, UTF-8 will be used.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="progressHandler"> A <see cref="T:System.IProgress`1" /> object to handle <see cref="T:Microsoft.Azure.Storage.Core.Util.StorageProgress" /> messages.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to append a string of text to an append blob. This API should be used strictly in a single writer scenario 
            because the API internally uses the append-offset conditional header to avoid duplicate blocks which does not work in a multiple writer scenario.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAppendBlock">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendBlock (System.IO.Stream blockData, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendBlock(class System.IO.Stream blockData, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginAppendBlock(System.IO.Stream,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginAppendBlock (blockData As Stream, callback As AsyncCallback, state As Object) As ICancellableAsyncResult" />
      <MemberSignature Language="F#" Value="abstract member BeginAppendBlock : System.IO.Stream * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult&#xA;override this.BeginAppendBlock : System.IO.Stream * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult" Usage="cloudAppendBlob.BeginAppendBlock (blockData, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.ICancellableAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blockData" Type="System.IO.Stream" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="blockData">A <see cref="T:System.IO.Stream" /> object that provides the data for the block.</param>
        <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that will receive notification when the asynchronous operation completes.</param>
        <param name="state">A user-defined object that will be passed to the callback delegate.</param>
        <summary>
            Begins an asynchronous operation to commit a new block of data to the end of the blob.
            </summary>
        <returns>An <see cref="T:Microsoft.Azure.Storage.ICancellableAsyncResult" /> that references the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAppendBlock">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendBlock (System.IO.Stream blockData, Microsoft.Azure.Storage.Shared.Protocol.Checksum contentChecksum, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendBlock(class System.IO.Stream blockData, class Microsoft.Azure.Storage.Shared.Protocol.Checksum contentChecksum, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginAppendBlock(System.IO.Stream,Microsoft.Azure.Storage.Shared.Protocol.Checksum,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginAppendBlock (blockData As Stream, contentChecksum As Checksum, callback As AsyncCallback, state As Object) As ICancellableAsyncResult" />
      <MemberSignature Language="F#" Value="abstract member BeginAppendBlock : System.IO.Stream * Microsoft.Azure.Storage.Shared.Protocol.Checksum * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult&#xA;override this.BeginAppendBlock : System.IO.Stream * Microsoft.Azure.Storage.Shared.Protocol.Checksum * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult" Usage="cloudAppendBlob.BeginAppendBlock (blockData, contentChecksum, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.ICancellableAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blockData" Type="System.IO.Stream" />
        <Parameter Name="contentChecksum" Type="Microsoft.Azure.Storage.Shared.Protocol.Checksum" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="blockData">A <see cref="T:System.IO.Stream" /> object that provides the data for the block.</param>
        <param name="contentChecksum">A hash value used to ensure transactional integrity. May be <c>null</c> or Checksum.None</param>
        <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that will receive notification when the asynchronous operation completes.</param>
        <param name="state">A user-defined object that will be passed to the callback delegate.</param>
        <summary>
            Begins an asynchronous operation to commit a new block of data to the end of the blob.
            </summary>
        <returns>An <see cref="T:Microsoft.Azure.Storage.ICancellableAsyncResult" /> that references the asynchronous operation.</returns>
        <remarks>
            Clients may send the content checksum headers for a given operation as a means to ensure transactional integrity over the wire. 
            The <paramref name="contentChecksum" /> parameter permits clients who already have access to a pre-computed checksum value for a given byte range to provide it.
            If the <see cref="P:BlobRequestOptions.UseTransactionalMd5" /> or <see cref="P:BlobRequestOptions.UseTransactionalCrc64" /> properties are set to <c>true</c> and the corresponding content parameter is set 
            to <c>null</c>, then the client library will calculate the checksum value internally.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAppendBlock">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendBlock (System.IO.Stream blockData, Microsoft.Azure.Storage.Shared.Protocol.Checksum contentChecksum, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendBlock(class System.IO.Stream blockData, class Microsoft.Azure.Storage.Shared.Protocol.Checksum contentChecksum, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginAppendBlock(System.IO.Stream,Microsoft.Azure.Storage.Shared.Protocol.Checksum,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginAppendBlock (blockData As Stream, contentChecksum As Checksum, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, callback As AsyncCallback, state As Object) As ICancellableAsyncResult" />
      <MemberSignature Language="F#" Value="abstract member BeginAppendBlock : System.IO.Stream * Microsoft.Azure.Storage.Shared.Protocol.Checksum * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult&#xA;override this.BeginAppendBlock : System.IO.Stream * Microsoft.Azure.Storage.Shared.Protocol.Checksum * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult" Usage="cloudAppendBlob.BeginAppendBlock (blockData, contentChecksum, accessCondition, options, operationContext, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.ICancellableAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blockData" Type="System.IO.Stream" />
        <Parameter Name="contentChecksum" Type="Microsoft.Azure.Storage.Shared.Protocol.Checksum" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="blockData">A <see cref="T:System.IO.Stream" /> object that provides the data for the block.</param>
        <param name="contentChecksum">A hash value used to ensure transactional integrity. May be <c>null</c> or Checksum.None</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that will receive notification when the asynchronous operation completes.</param>
        <param name="state">A user-defined object that will be passed to the callback delegate.</param>
        <summary>
            Begins an asynchronous operation to commit a new block of data to the end of the blob.
            </summary>
        <returns>An <see cref="T:Microsoft.Azure.Storage.ICancellableAsyncResult" /> that references the asynchronous operation.</returns>
        <remarks>
            Clients may send the content checksum headers for a given operation as a means to ensure transactional integrity over the wire. 
            The <paramref name="contentChecksum" /> parameter permits clients who already have access to a pre-computed checksum value for a given byte range to provide it.
            If the <see cref="P:BlobRequestOptions.UseTransactionalMd5" /> or <see cref="P:BlobRequestOptions.UseTransactionalCrc64" /> properties are set to <c>true</c> and the corresponding content parameter is set 
            to <c>null</c>, then the client library will calculate the checksum value internally.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAppendBlock">
      <MemberSignature Language="C#" Value="public Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendBlock (Uri sourceUri, long offset, long count, Microsoft.Azure.Storage.Shared.Protocol.Checksum sourceContentChecksum, Microsoft.Azure.Storage.AccessCondition sourceAccessCondition, Microsoft.Azure.Storage.AccessCondition destAccessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendBlock(class System.Uri sourceUri, int64 offset, int64 count, class Microsoft.Azure.Storage.Shared.Protocol.Checksum sourceContentChecksum, class Microsoft.Azure.Storage.AccessCondition sourceAccessCondition, class Microsoft.Azure.Storage.AccessCondition destAccessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginAppendBlock(System.Uri,System.Int64,System.Int64,Microsoft.Azure.Storage.Shared.Protocol.Checksum,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAppendBlock (sourceUri As Uri, offset As Long, count As Long, sourceContentChecksum As Checksum, sourceAccessCondition As AccessCondition, destAccessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, callback As AsyncCallback, state As Object) As ICancellableAsyncResult" />
      <MemberSignature Language="F#" Value="member this.BeginAppendBlock : Uri * int64 * int64 * Microsoft.Azure.Storage.Shared.Protocol.Checksum * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult" Usage="cloudAppendBlob.BeginAppendBlock (sourceUri, offset, count, sourceContentChecksum, sourceAccessCondition, destAccessCondition, options, operationContext, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.ICancellableAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceUri" Type="System.Uri" />
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="count" Type="System.Int64" />
        <Parameter Name="sourceContentChecksum" Type="Microsoft.Azure.Storage.Shared.Protocol.Checksum" />
        <Parameter Name="sourceAccessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="destAccessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sourceContentChecksum">To be added.</param>
        <param name="sourceUri">A <see cref="T:System.Uri" /> specifying the absolute URI to the source blob.</param>
        <param name="offset">The byte offset in the source at which to begin retrieving content.</param>
        <param name="count">The number of bytes from the source to return, or <c>null</c> to return all bytes through the end of the blob.</param>
        <param name="sourceContentMd5">An optional hash value used to ensure transactional integrity. May be <c>null</c> or an empty string.</param>
        <param name="sourceAccessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the access conditions for the source blob. If <c>null</c>, no condition is used.</param>
        <param name="destAccessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the access conditions for the destination blob. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request. If <c>null</c>, default options are applied to the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that will receive notification when the asynchronous operation completes.</param>
        <param name="state">A user-defined object that will be passed to the callback delegate.</param>
        <summary>
            Commits a new block of data to the end of the blob.
            </summary>
        <returns>An <see cref="T:Microsoft.Azure.Storage.ICancellableAsyncResult" /> that references the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAppendFromByteArray">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendFromByteArray (byte[] buffer, int index, int count, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendFromByteArray(unsigned int8[] buffer, int32 index, int32 count, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginAppendFromByteArray(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginAppendFromByteArray (buffer As Byte(), index As Integer, count As Integer, callback As AsyncCallback, state As Object) As ICancellableAsyncResult" />
      <MemberSignature Language="F#" Value="abstract member BeginAppendFromByteArray : byte[] * int * int * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult&#xA;override this.BeginAppendFromByteArray : byte[] * int * int * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult" Usage="cloudAppendBlob.BeginAppendFromByteArray (buffer, index, count, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.ICancellableAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">An array of bytes.</param>
        <param name="index">The zero-based byte offset in buffer at which to begin uploading bytes to the blob.</param>
        <param name="count">The number of bytes to be written to the blob.</param>
        <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that will receive notification when the asynchronous operation completes.</param>
        <param name="state">A user-defined object that will be passed to the callback delegate.</param>
        <summary>
            Begins an asynchronous operation to append the contents of a byte array to an append blob. Recommended only for single-writer scenarios.
            </summary>
        <returns>An <see cref="T:Microsoft.Azure.Storage.ICancellableAsyncResult" /> that references the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAppendFromByteArray">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendFromByteArray (byte[] buffer, int index, int count, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendFromByteArray(unsigned int8[] buffer, int32 index, int32 count, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginAppendFromByteArray(System.Byte[],System.Int32,System.Int32,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginAppendFromByteArray (buffer As Byte(), index As Integer, count As Integer, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, callback As AsyncCallback, state As Object) As ICancellableAsyncResult" />
      <MemberSignature Language="F#" Value="abstract member BeginAppendFromByteArray : byte[] * int * int * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult&#xA;override this.BeginAppendFromByteArray : byte[] * int * int * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult" Usage="cloudAppendBlob.BeginAppendFromByteArray (buffer, index, count, accessCondition, options, operationContext, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.ICancellableAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">An array of bytes.</param>
        <param name="index">The zero-based byte offset in buffer at which to begin uploading bytes to the blob.</param>
        <param name="count">The number of bytes to be written to the blob.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that will receive notification when the asynchronous operation completes.</param>
        <param name="state">A user-defined object that will be passed to the callback delegate.</param>
        <summary>
            Begins an asynchronous operation to append the contents of a byte array to an append blob. Recommended only for single-writer scenarios.
            </summary>
        <returns>An <see cref="T:Microsoft.Azure.Storage.ICancellableAsyncResult" /> that references the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAppendFromFile">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendFromFile (string path, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendFromFile(string path, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginAppendFromFile(System.String,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginAppendFromFile (path As String, callback As AsyncCallback, state As Object) As ICancellableAsyncResult" />
      <MemberSignature Language="F#" Value="abstract member BeginAppendFromFile : string * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult&#xA;override this.BeginAppendFromFile : string * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult" Usage="cloudAppendBlob.BeginAppendFromFile (path, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.ICancellableAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="path">A string containing the file path providing the blob content.</param>
        <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that will receive notification when the asynchronous operation completes.</param>
        <param name="state">A user-defined object that will be passed to the callback delegate.</param>
        <summary>
            Begins an asynchronous operation to append a file to an append blob. Recommended only for single-writer scenarios.
            </summary>
        <returns>An <see cref="T:Microsoft.Azure.Storage.ICancellableAsyncResult" /> that references the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAppendFromFile">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendFromFile (string path, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendFromFile(string path, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginAppendFromFile(System.String,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginAppendFromFile (path As String, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, callback As AsyncCallback, state As Object) As ICancellableAsyncResult" />
      <MemberSignature Language="F#" Value="abstract member BeginAppendFromFile : string * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult&#xA;override this.BeginAppendFromFile : string * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult" Usage="cloudAppendBlob.BeginAppendFromFile (path, accessCondition, options, operationContext, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.ICancellableAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="path">A string containing the file path providing the blob content.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that will receive notification when the asynchronous operation completes.</param>
        <param name="state">A user-defined object that will be passed to the callback delegate.</param>
        <summary>
            Begins an asynchronous operation to append a file to an append blob. Recommended only for single-writer scenarios.
            </summary>
        <returns>An <see cref="T:Microsoft.Azure.Storage.ICancellableAsyncResult" /> that references the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAppendFromFile">
      <MemberSignature Language="C#" Value="public Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendFromFile (string path, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; progressHandler, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendFromFile(string path, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, class System.IProgress`1&lt;class Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; progressHandler, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginAppendFromFile(System.String,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.IProgress{Microsoft.Azure.Storage.Core.Util.StorageProgress},System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAppendFromFile (path As String, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, progressHandler As IProgress(Of StorageProgress), callback As AsyncCallback, state As Object) As ICancellableAsyncResult" />
      <MemberSignature Language="F#" Value="member this.BeginAppendFromFile : string * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult" Usage="cloudAppendBlob.BeginAppendFromFile (path, accessCondition, options, operationContext, progressHandler, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.ICancellableAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="progressHandler" Type="System.IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt;" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="path">A string containing the file path providing the blob content.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="progressHandler"> An <see cref="T:System.IProgress`1" /> object to gather progress deltas.</param>
        <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that will receive notification when the asynchronous operation completes.</param>
        <param name="state">A user-defined object that will be passed to the callback delegate.</param>
        <summary>
            Begins an asynchronous operation to append a file to an append blob. Recommended only for single-writer scenarios.
            </summary>
        <returns>An <see cref="T:Microsoft.Azure.Storage.ICancellableAsyncResult" /> that references the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAppendFromStream">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendFromStream (System.IO.Stream source, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendFromStream(class System.IO.Stream source, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginAppendFromStream(System.IO.Stream,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginAppendFromStream (source As Stream, callback As AsyncCallback, state As Object) As ICancellableAsyncResult" />
      <MemberSignature Language="F#" Value="abstract member BeginAppendFromStream : System.IO.Stream * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult&#xA;override this.BeginAppendFromStream : System.IO.Stream * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult" Usage="cloudAppendBlob.BeginAppendFromStream (source, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.ICancellableAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:System.IO.Stream" /> object providing the blob content.</param>
        <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that will receive notification when the asynchronous operation completes.</param>
        <param name="state">A user-defined object that will be passed to the callback delegate.</param>
        <summary>
            Begins an asynchronous operation to append a stream to an append blob. Recommended only for single-writer scenarios.
            </summary>
        <returns>An <see cref="T:Microsoft.Azure.Storage.ICancellableAsyncResult" /> that references the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAppendFromStream">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendFromStream (System.IO.Stream source, long length, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendFromStream(class System.IO.Stream source, int64 length, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginAppendFromStream(System.IO.Stream,System.Int64,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginAppendFromStream (source As Stream, length As Long, callback As AsyncCallback, state As Object) As ICancellableAsyncResult" />
      <MemberSignature Language="F#" Value="abstract member BeginAppendFromStream : System.IO.Stream * int64 * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult&#xA;override this.BeginAppendFromStream : System.IO.Stream * int64 * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult" Usage="cloudAppendBlob.BeginAppendFromStream (source, length, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.ICancellableAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
        <Parameter Name="length" Type="System.Int64" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:System.IO.Stream" /> object providing the blob content.</param>
        <param name="length">Specifies the number of bytes from the Stream source to upload from the start position.</param>
        <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that will receive notification when the asynchronous operation completes.</param>
        <param name="state">A user-defined object that will be passed to the callback delegate.</param>
        <summary>
            Begins an asynchronous operation to append a stream to an append blob. Recommended only for single-writer scenarios.
            </summary>
        <returns>An <see cref="T:Microsoft.Azure.Storage.ICancellableAsyncResult" /> that references the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAppendFromStream">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendFromStream (System.IO.Stream source, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendFromStream(class System.IO.Stream source, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginAppendFromStream(System.IO.Stream,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginAppendFromStream (source As Stream, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, callback As AsyncCallback, state As Object) As ICancellableAsyncResult" />
      <MemberSignature Language="F#" Value="abstract member BeginAppendFromStream : System.IO.Stream * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult&#xA;override this.BeginAppendFromStream : System.IO.Stream * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult" Usage="cloudAppendBlob.BeginAppendFromStream (source, accessCondition, options, operationContext, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.ICancellableAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:System.IO.Stream" /> object providing the blob content.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that will receive notification when the asynchronous operation completes.</param>
        <param name="state">A user-defined object that will be passed to the callback delegate.</param>
        <summary>
            Begins an asynchronous operation to append a stream to an append blob. Recommended only for single-writer scenarios.
            </summary>
        <returns>An <see cref="T:Microsoft.Azure.Storage.ICancellableAsyncResult" /> that references the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAppendFromStream">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendFromStream (System.IO.Stream source, long length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendFromStream(class System.IO.Stream source, int64 length, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginAppendFromStream(System.IO.Stream,System.Int64,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginAppendFromStream (source As Stream, length As Long, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, callback As AsyncCallback, state As Object) As ICancellableAsyncResult" />
      <MemberSignature Language="F#" Value="abstract member BeginAppendFromStream : System.IO.Stream * int64 * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult&#xA;override this.BeginAppendFromStream : System.IO.Stream * int64 * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult" Usage="cloudAppendBlob.BeginAppendFromStream (source, length, accessCondition, options, operationContext, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.ICancellableAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
        <Parameter Name="length" Type="System.Int64" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:System.IO.Stream" /> object providing the blob content.</param>
        <param name="length">Specifies the number of bytes from the Stream source to upload from the start position.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that will receive notification when the asynchronous operation completes.</param>
        <param name="state">A user-defined object that will be passed to the callback delegate.</param>
        <summary>
            Begins an asynchronous operation to append a stream to an append blob. Recommended only for single-writer scenarios.
            </summary>
        <returns>An <see cref="T:Microsoft.Azure.Storage.ICancellableAsyncResult" /> that references the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAppendText">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendText (string content, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendText(string content, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginAppendText(System.String,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginAppendText (content As String, callback As AsyncCallback, state As Object) As ICancellableAsyncResult" />
      <MemberSignature Language="F#" Value="abstract member BeginAppendText : string * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult&#xA;override this.BeginAppendText : string * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult" Usage="cloudAppendBlob.BeginAppendText (content, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.ICancellableAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.String" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="content">A string containing the text to upload.</param>
        <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that will receive notification when the asynchronous operation completes.</param>
        <param name="state">A user-defined object that will be passed to the callback delegate.</param>
        <summary>
            Begins an asynchronous operation to append a string of text to an append blob. This API should be used strictly in a single writer scenario 
            because the API internally uses the append-offset conditional header to avoid duplicate blocks which does not work in a multiple writer scenario.
            </summary>
        <returns>An <see cref="T:Microsoft.Azure.Storage.ICancellableAsyncResult" /> that references the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAppendText">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendText (string content, System.Text.Encoding encoding, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendText(string content, class System.Text.Encoding encoding, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginAppendText(System.String,System.Text.Encoding,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginAppendText (content As String, encoding As Encoding, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, callback As AsyncCallback, state As Object) As ICancellableAsyncResult" />
      <MemberSignature Language="F#" Value="abstract member BeginAppendText : string * System.Text.Encoding * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult&#xA;override this.BeginAppendText : string * System.Text.Encoding * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult" Usage="cloudAppendBlob.BeginAppendText (content, encoding, accessCondition, options, operationContext, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.ICancellableAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="content">A string containing the text to upload.</param>
        <param name="encoding">A <see cref="T:System.Text.Encoding" /> object that indicates the text encoding to use. If <c>null</c>, UTF-8 will be used.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that will receive notification when the asynchronous operation completes.</param>
        <param name="state">A user-defined object that will be passed to the callback delegate.</param>
        <summary>
            Begins an asynchronous operation to append a string of text to an append blob. This API should be used strictly in a single writer scenario 
            because the API internally uses the append-offset conditional header to avoid duplicate blocks which does not work in a multiple writer scenario.
            </summary>
        <returns>An <see cref="T:Microsoft.Azure.Storage.ICancellableAsyncResult" /> that references the asynchronous operation.</returns>
        <remarks>
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginCreateOrReplace">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginCreateOrReplace (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Storage.ICancellableAsyncResult BeginCreateOrReplace(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginCreateOrReplace(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginCreateOrReplace (callback As AsyncCallback, state As Object) As ICancellableAsyncResult" />
      <MemberSignature Language="F#" Value="abstract member BeginCreateOrReplace : AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult&#xA;override this.BeginCreateOrReplace : AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult" Usage="cloudAppendBlob.BeginCreateOrReplace (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.ICancellableAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that will receive notification when the asynchronous operation completes.</param>
        <param name="state">A user-defined object that will be passed to the callback delegate.</param>
        <summary>
            Begins an asynchronous operation to create an empty append blob. If the blob already exists, this operation will overwrite it. To throw an exception if the blob exists, instead of overwriting,
            use <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginCreateOrReplace(Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.AsyncCallback,System.Object)" />.
            </summary>
        <returns>An <see cref="T:Microsoft.Azure.Storage.ICancellableAsyncResult" /> that references the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginCreateOrReplace">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginCreateOrReplace (Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Storage.ICancellableAsyncResult BeginCreateOrReplace(class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginCreateOrReplace(Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginCreateOrReplace (accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, callback As AsyncCallback, state As Object) As ICancellableAsyncResult" />
      <MemberSignature Language="F#" Value="abstract member BeginCreateOrReplace : Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult&#xA;override this.BeginCreateOrReplace : Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult" Usage="cloudAppendBlob.BeginCreateOrReplace (accessCondition, options, operationContext, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.ICancellableAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that will receive notification when the asynchronous operation completes.</param>
        <param name="state">A user-defined object that will be passed to the callback delegate.</param>
        <summary>
            Begins an asynchronous operation to create an empty append blob. If the blob already exists, this operation will overwrite it. To throw an exception if the blob exists, instead of overwriting, pass in an <see cref="T:Microsoft.Azure.Storage.AccessCondition" />
            object generated using <see cref="M:Microsoft.Azure.Storage.AccessCondition.GenerateIfNotExistsCondition" />.
            </summary>
        <returns>An <see cref="T:Microsoft.Azure.Storage.ICancellableAsyncResult" /> that references the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginCreateSnapshot">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginCreateSnapshot (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Storage.ICancellableAsyncResult BeginCreateSnapshot(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginCreateSnapshot(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginCreateSnapshot (callback As AsyncCallback, state As Object) As ICancellableAsyncResult" />
      <MemberSignature Language="F#" Value="abstract member BeginCreateSnapshot : AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult&#xA;override this.BeginCreateSnapshot : AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult" Usage="cloudAppendBlob.BeginCreateSnapshot (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.ICancellableAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that will receive notification when the asynchronous operation completes.</param>
        <param name="state">A user-defined object that will be passed to the callback delegate.</param>
        <summary>
            Begins an asynchronous operation to create a snapshot of the blob.
            </summary>
        <returns>An <see cref="T:Microsoft.Azure.Storage.ICancellableAsyncResult" /> that references the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginCreateSnapshot">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginCreateSnapshot (System.Collections.Generic.IDictionary&lt;string,string&gt; metadata, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Storage.ICancellableAsyncResult BeginCreateSnapshot(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginCreateSnapshot(System.Collections.Generic.IDictionary{System.String,System.String},Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginCreateSnapshot (metadata As IDictionary(Of String, String), accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, callback As AsyncCallback, state As Object) As ICancellableAsyncResult" />
      <MemberSignature Language="F#" Value="abstract member BeginCreateSnapshot : System.Collections.Generic.IDictionary&lt;string, string&gt; * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult&#xA;override this.BeginCreateSnapshot : System.Collections.Generic.IDictionary&lt;string, string&gt; * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult" Usage="cloudAppendBlob.BeginCreateSnapshot (metadata, accessCondition, options, operationContext, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.ICancellableAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="metadata">A collection of name-value pairs defining the metadata of the snapshot.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request, or <c>null</c>.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that will receive notification when the asynchronous operation completes.</param>
        <param name="state">A user-defined object that will be passed to the callback delegate.</param>
        <summary>
            Begins an asynchronous operation to create a snapshot of the blob.
            </summary>
        <returns>An <see cref="T:Microsoft.Azure.Storage.ICancellableAsyncResult" /> that references the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginDownloadText">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginDownloadText (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Storage.ICancellableAsyncResult BeginDownloadText(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginDownloadText(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginDownloadText (callback As AsyncCallback, state As Object) As ICancellableAsyncResult" />
      <MemberSignature Language="F#" Value="abstract member BeginDownloadText : AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult&#xA;override this.BeginDownloadText : AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult" Usage="cloudAppendBlob.BeginDownloadText (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.ICancellableAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that will receive notification when the asynchronous operation completes.</param>
        <param name="state">A user-defined object that will be passed to the callback delegate.</param>
        <summary>
            Begins an asynchronous operation to download the blob's contents as a string.
            </summary>
        <returns>An <see cref="T:Microsoft.Azure.Storage.ICancellableAsyncResult" /> that references the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginDownloadText">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginDownloadText (System.Text.Encoding encoding, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Storage.ICancellableAsyncResult BeginDownloadText(class System.Text.Encoding encoding, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginDownloadText(System.Text.Encoding,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginDownloadText (encoding As Encoding, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, callback As AsyncCallback, state As Object) As ICancellableAsyncResult" />
      <MemberSignature Language="F#" Value="abstract member BeginDownloadText : System.Text.Encoding * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult&#xA;override this.BeginDownloadText : System.Text.Encoding * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult" Usage="cloudAppendBlob.BeginDownloadText (encoding, accessCondition, options, operationContext, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.ICancellableAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="encoding">An object that indicates the text encoding to use.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that will receive notification when the asynchronous operation completes.</param>
        <param name="state">A user-defined object that will be passed to the callback delegate.</param>
        <summary>
            Begins an asynchronous operation to download the blob's contents as a string.
            </summary>
        <returns>An <see cref="T:Microsoft.Azure.Storage.ICancellableAsyncResult" /> that references the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginOpenWrite">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginOpenWrite (bool createNew, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Storage.ICancellableAsyncResult BeginOpenWrite(bool createNew, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginOpenWrite(System.Boolean,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginOpenWrite (createNew As Boolean, callback As AsyncCallback, state As Object) As ICancellableAsyncResult" />
      <MemberSignature Language="F#" Value="abstract member BeginOpenWrite : bool * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult&#xA;override this.BeginOpenWrite : bool * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult" Usage="cloudAppendBlob.BeginOpenWrite (createNew, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.ICancellableAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="createNew" Type="System.Boolean" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="createNew">Use <c>true</c> to create a new append blob or overwrite an existing one, <c>false</c> to append to an existing blob.</param>
        <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that will receive notification when the asynchronous operation completes.</param>
        <param name="state">A user-defined object that will be passed to the callback delegate.</param>
        <summary>
            Begins an asynchronous operation to open a stream for writing to the blob.
            </summary>
        <returns>An <see cref="T:Microsoft.Azure.Storage.ICancellableAsyncResult" /> that references the asynchronous operation.</returns>
        <remarks>
            Note that this method always makes a call to the <see cref="M:Microsoft.Azure.Storage.Blob.CloudBlob.BeginFetchAttributes(Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.AsyncCallback,System.Object)" /> method under the covers.
            Set the <see cref="P:Microsoft.Azure.Storage.Blob.CloudAppendBlob.StreamWriteSizeInBytes" /> property before calling this method to specify the block size to write, in bytes, 
            ranging from between 16 KB and 4 MB inclusive.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginOpenWrite">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginOpenWrite (bool createNew, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Storage.ICancellableAsyncResult BeginOpenWrite(bool createNew, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginOpenWrite(System.Boolean,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginOpenWrite (createNew As Boolean, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, callback As AsyncCallback, state As Object) As ICancellableAsyncResult" />
      <MemberSignature Language="F#" Value="abstract member BeginOpenWrite : bool * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult&#xA;override this.BeginOpenWrite : bool * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult" Usage="cloudAppendBlob.BeginOpenWrite (createNew, accessCondition, options, operationContext, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.ICancellableAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="createNew" Type="System.Boolean" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="createNew">Use <c>true</c> to create a new append blob or overwrite an existing one, <c>false</c> to append to an existing blob.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that will receive notification when the asynchronous operation completes.</param>
        <param name="state">A user-defined object that will be passed to the callback delegate.</param>
        <summary>
            Begins an asynchronous operation to open a stream for writing to the blob.
            </summary>
        <returns>An <see cref="T:Microsoft.Azure.Storage.ICancellableAsyncResult" /> that references the asynchronous operation.</returns>
        <remarks>
            Note that this method always makes a call to the <see cref="M:Microsoft.Azure.Storage.Blob.CloudBlob.BeginFetchAttributes(Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.AsyncCallback,System.Object)" /> method under the covers.
            Set the <see cref="P:Microsoft.Azure.Storage.Blob.CloudAppendBlob.StreamWriteSizeInBytes" /> property before calling this method to specify the block size to write, in bytes, 
            ranging from between 16 KB and 4 MB inclusive.
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginStartCopy">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginStartCopy (Microsoft.Azure.Storage.Blob.CloudAppendBlob source, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Storage.ICancellableAsyncResult BeginStartCopy(class Microsoft.Azure.Storage.Blob.CloudAppendBlob source, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginStartCopy(Microsoft.Azure.Storage.Blob.CloudAppendBlob,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginStartCopy (source As CloudAppendBlob, callback As AsyncCallback, state As Object) As ICancellableAsyncResult" />
      <MemberSignature Language="F#" Value="override this.BeginStartCopy : Microsoft.Azure.Storage.Blob.CloudAppendBlob * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult" Usage="cloudAppendBlob.BeginStartCopy (source, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.ICancellableAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.Azure.Storage.Blob.CloudAppendBlob" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:Microsoft.Azure.Storage.Blob.CloudAppendBlob" /> object.</param>
        <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that will receive notification when the asynchronous operation completes.</param>
        <param name="state">A user-defined object that will be passed to the callback delegate.</param>
        <summary>
            Begins an asynchronous operation to start copying another append blob's contents, properties, and metadata to this append blob.
            </summary>
        <returns>An <see cref="T:Microsoft.Azure.Storage.ICancellableAsyncResult" /> that references the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginStartCopy">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginStartCopy (Microsoft.Azure.Storage.Blob.CloudAppendBlob source, Microsoft.Azure.Storage.AccessCondition sourceAccessCondition, Microsoft.Azure.Storage.AccessCondition destAccessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Storage.ICancellableAsyncResult BeginStartCopy(class Microsoft.Azure.Storage.Blob.CloudAppendBlob source, class Microsoft.Azure.Storage.AccessCondition sourceAccessCondition, class Microsoft.Azure.Storage.AccessCondition destAccessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginStartCopy(Microsoft.Azure.Storage.Blob.CloudAppendBlob,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginStartCopy (source As CloudAppendBlob, sourceAccessCondition As AccessCondition, destAccessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, callback As AsyncCallback, state As Object) As ICancellableAsyncResult" />
      <MemberSignature Language="F#" Value="override this.BeginStartCopy : Microsoft.Azure.Storage.Blob.CloudAppendBlob * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult" Usage="cloudAppendBlob.BeginStartCopy (source, sourceAccessCondition, destAccessCondition, options, operationContext, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.ICancellableAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.Azure.Storage.Blob.CloudAppendBlob" />
        <Parameter Name="sourceAccessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="destAccessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:Microsoft.Azure.Storage.Blob.CloudAppendBlob" /> object.</param>
        <param name="sourceAccessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the access conditions for the source blob. If <c>null</c>, no condition is used.</param>
        <param name="destAccessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the access conditions for the destination blob. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that will receive notification when the asynchronous operation completes.</param>
        <param name="state">A user-defined object that will be passed to the callback delegate.</param>
        <summary>
            Begins an asynchronous operation to start copying another append blob's contents, properties, and metadata to this append blob.
            </summary>
        <returns>An <see cref="T:Microsoft.Azure.Storage.ICancellableAsyncResult" /> that references the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginUploadFromByteArray">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromByteArray (byte[] buffer, int index, int count, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromByteArray(unsigned int8[] buffer, int32 index, int32 count, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginUploadFromByteArray(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginUploadFromByteArray (buffer As Byte(), index As Integer, count As Integer, callback As AsyncCallback, state As Object) As ICancellableAsyncResult" />
      <MemberSignature Language="F#" Value="abstract member BeginUploadFromByteArray : byte[] * int * int * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult&#xA;override this.BeginUploadFromByteArray : byte[] * int * int * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult" Usage="cloudAppendBlob.BeginUploadFromByteArray (buffer, index, count, callback, state)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Storage.Blob.ICloudBlob.BeginUploadFromByteArray(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.ICancellableAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">An array of bytes.</param>
        <param name="index">The zero-based byte offset in buffer at which to begin uploading bytes to the blob.</param>
        <param name="count">The number of bytes to be written to the blob.</param>
        <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that will receive notification when the asynchronous operation completes.</param>
        <param name="state">A user-defined object that will be passed to the callback delegate.</param>
        <summary>
            Begins an asynchronous operation to upload the contents of a byte array to an append blob. If the blob already exists, it will be overwritten. Recommended only for single-writer scenarios.
            </summary>
        <returns>An <see cref="T:Microsoft.Azure.Storage.ICancellableAsyncResult" /> that references the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginAppendFromByteArray(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginUploadFromByteArray">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromByteArray (byte[] buffer, int index, int count, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromByteArray(unsigned int8[] buffer, int32 index, int32 count, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginUploadFromByteArray(System.Byte[],System.Int32,System.Int32,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginUploadFromByteArray (buffer As Byte(), index As Integer, count As Integer, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, callback As AsyncCallback, state As Object) As ICancellableAsyncResult" />
      <MemberSignature Language="F#" Value="abstract member BeginUploadFromByteArray : byte[] * int * int * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult&#xA;override this.BeginUploadFromByteArray : byte[] * int * int * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult" Usage="cloudAppendBlob.BeginUploadFromByteArray (buffer, index, count, accessCondition, options, operationContext, callback, state)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Storage.Blob.ICloudBlob.BeginUploadFromByteArray(System.Byte[],System.Int32,System.Int32,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.ICancellableAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">An array of bytes.</param>
        <param name="index">The zero-based byte offset in buffer at which to begin uploading bytes to the blob.</param>
        <param name="count">The number of bytes to be written to the blob.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that will receive notification when the asynchronous operation completes.</param>
        <param name="state">A user-defined object that will be passed to the callback delegate.</param>
        <summary>
            Begins an asynchronous operation to upload the contents of a byte array to an append blob. If the blob already exists, it will be overwritten. Recommended only for single-writer scenarios.
            </summary>
        <returns>An <see cref="T:Microsoft.Azure.Storage.ICancellableAsyncResult" /> that references the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginAppendFromByteArray(System.Byte[],System.Int32,System.Int32,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.AsyncCallback,System.Object)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginUploadFromFile">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromFile (string path, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromFile(string path, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginUploadFromFile(System.String,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginUploadFromFile (path As String, callback As AsyncCallback, state As Object) As ICancellableAsyncResult" />
      <MemberSignature Language="F#" Value="abstract member BeginUploadFromFile : string * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult&#xA;override this.BeginUploadFromFile : string * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult" Usage="cloudAppendBlob.BeginUploadFromFile (path, callback, state)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Storage.Blob.ICloudBlob.BeginUploadFromFile(System.String,System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.ICancellableAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="path">A string containing the file path providing the blob content.</param>
        <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that will receive notification when the asynchronous operation completes.</param>
        <param name="state">A user-defined object that will be passed to the callback delegate.</param>
        <summary>
            Begins an asynchronous operation to upload a file to an append blob. If the blob already exists, it will be overwritten. Recommended only for single-writer scenarios.
            </summary>
        <returns>An <see cref="T:Microsoft.Azure.Storage.ICancellableAsyncResult" /> that references the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginAppendFromFile(System.String,System.AsyncCallback,System.Object)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginUploadFromFile">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromFile (string path, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromFile(string path, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginUploadFromFile(System.String,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginUploadFromFile (path As String, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, callback As AsyncCallback, state As Object) As ICancellableAsyncResult" />
      <MemberSignature Language="F#" Value="abstract member BeginUploadFromFile : string * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult&#xA;override this.BeginUploadFromFile : string * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult" Usage="cloudAppendBlob.BeginUploadFromFile (path, accessCondition, options, operationContext, callback, state)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Storage.Blob.ICloudBlob.BeginUploadFromFile(System.String,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.ICancellableAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="path">A string containing the file path providing the blob content.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that will receive notification when the asynchronous operation completes.</param>
        <param name="state">A user-defined object that will be passed to the callback delegate.</param>
        <summary>
            Begins an asynchronous operation to upload a file to an append blob. If the blob already exists, it will be overwritten. Recommended only for single-writer scenarios.
            </summary>
        <returns>An <see cref="T:Microsoft.Azure.Storage.ICancellableAsyncResult" /> that references the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginAppendFromFile(System.String,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.AsyncCallback,System.Object)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginUploadFromStream">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromStream (System.IO.Stream source, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromStream(class System.IO.Stream source, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginUploadFromStream(System.IO.Stream,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginUploadFromStream (source As Stream, callback As AsyncCallback, state As Object) As ICancellableAsyncResult" />
      <MemberSignature Language="F#" Value="abstract member BeginUploadFromStream : System.IO.Stream * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult&#xA;override this.BeginUploadFromStream : System.IO.Stream * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult" Usage="cloudAppendBlob.BeginUploadFromStream (source, callback, state)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Storage.Blob.ICloudBlob.BeginUploadFromStream(System.IO.Stream,System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.ICancellableAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:System.IO.Stream" /> object providing the blob content.</param>
        <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that will receive notification when the asynchronous operation completes.</param>
        <param name="state">A user-defined object that will be passed to the callback delegate.</param>
        <summary>
            Begins an asynchronous operation to upload a stream to an append blob. If the blob already exists, it will be overwritten. Recommended only for single-writer scenarios.
            </summary>
        <returns>An <see cref="T:Microsoft.Azure.Storage.ICancellableAsyncResult" /> that references the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginAppendFromStream(System.IO.Stream,System.AsyncCallback,System.Object)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginUploadFromStream">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromStream (System.IO.Stream source, long length, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromStream(class System.IO.Stream source, int64 length, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginUploadFromStream(System.IO.Stream,System.Int64,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginUploadFromStream (source As Stream, length As Long, callback As AsyncCallback, state As Object) As ICancellableAsyncResult" />
      <MemberSignature Language="F#" Value="abstract member BeginUploadFromStream : System.IO.Stream * int64 * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult&#xA;override this.BeginUploadFromStream : System.IO.Stream * int64 * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult" Usage="cloudAppendBlob.BeginUploadFromStream (source, length, callback, state)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Storage.Blob.ICloudBlob.BeginUploadFromStream(System.IO.Stream,System.Int64,System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.ICancellableAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
        <Parameter Name="length" Type="System.Int64" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:System.IO.Stream" /> object providing the blob content.</param>
        <param name="length">Specifies the number of bytes from the Stream source to upload from the start position.</param>
        <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that will receive notification when the asynchronous operation completes.</param>
        <param name="state">A user-defined object that will be passed to the callback delegate.</param>
        <summary>
            Begins an asynchronous operation to upload a stream to an append blob. If the blob already exists, it will be overwritten. Recommended only for single-writer scenarios.
            </summary>
        <returns>An <see cref="T:Microsoft.Azure.Storage.ICancellableAsyncResult" /> that references the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginAppendFromStream(System.IO.Stream,System.Int64,System.AsyncCallback,System.Object)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginUploadFromStream">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromStream (System.IO.Stream source, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromStream(class System.IO.Stream source, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginUploadFromStream(System.IO.Stream,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginUploadFromStream (source As Stream, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, callback As AsyncCallback, state As Object) As ICancellableAsyncResult" />
      <MemberSignature Language="F#" Value="abstract member BeginUploadFromStream : System.IO.Stream * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult&#xA;override this.BeginUploadFromStream : System.IO.Stream * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult" Usage="cloudAppendBlob.BeginUploadFromStream (source, accessCondition, options, operationContext, callback, state)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Storage.Blob.ICloudBlob.BeginUploadFromStream(System.IO.Stream,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.ICancellableAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:System.IO.Stream" /> object providing the blob content.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that will receive notification when the asynchronous operation completes.</param>
        <param name="state">A user-defined object that will be passed to the callback delegate.</param>
        <summary>
            Begins an asynchronous operation to upload a stream to an append blob. If the blob already exists, it will be overwritten. Recommended only for single-writer scenarios.
            </summary>
        <returns>An <see cref="T:Microsoft.Azure.Storage.ICancellableAsyncResult" /> that references the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginAppendFromStream(System.IO.Stream,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.AsyncCallback,System.Object)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginUploadFromStream">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromStream (System.IO.Stream source, long length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromStream(class System.IO.Stream source, int64 length, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginUploadFromStream(System.IO.Stream,System.Int64,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginUploadFromStream (source As Stream, length As Long, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, callback As AsyncCallback, state As Object) As ICancellableAsyncResult" />
      <MemberSignature Language="F#" Value="abstract member BeginUploadFromStream : System.IO.Stream * int64 * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult&#xA;override this.BeginUploadFromStream : System.IO.Stream * int64 * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult" Usage="cloudAppendBlob.BeginUploadFromStream (source, length, accessCondition, options, operationContext, callback, state)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Storage.Blob.ICloudBlob.BeginUploadFromStream(System.IO.Stream,System.Int64,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.ICancellableAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
        <Parameter Name="length" Type="System.Int64" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:System.IO.Stream" /> object providing the blob content.</param>
        <param name="length">Specifies the number of bytes from the Stream source to upload from the start position.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that will receive notification when the asynchronous operation completes.</param>
        <param name="state">A user-defined object that will be passed to the callback delegate.</param>
        <summary>
            Begins an asynchronous operation to upload a stream to an append blob. If the blob already exists, it will be overwritten. Recommended only for single-writer scenarios.
            </summary>
        <returns>An <see cref="T:Microsoft.Azure.Storage.ICancellableAsyncResult" /> that references the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginAppendFromStream(System.IO.Stream,System.Int64,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.AsyncCallback,System.Object)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginUploadText">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadText (string content, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadText(string content, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginUploadText(System.String,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginUploadText (content As String, callback As AsyncCallback, state As Object) As ICancellableAsyncResult" />
      <MemberSignature Language="F#" Value="abstract member BeginUploadText : string * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult&#xA;override this.BeginUploadText : string * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult" Usage="cloudAppendBlob.BeginUploadText (content, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.ICancellableAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.String" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="content">A string containing the text to upload.</param>
        <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that will receive notification when the asynchronous operation completes.</param>
        <param name="state">A user-defined object that will be passed to the callback delegate.</param>
        <summary>
            Begins an asynchronous operation to upload a string of text to an append blob. If the blob already exists, it will be overwritten. Recommended only for single-writer scenarios.
            </summary>
        <returns>An <see cref="T:Microsoft.Azure.Storage.ICancellableAsyncResult" /> that references the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginAppendText(System.String,System.AsyncCallback,System.Object)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginUploadText">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadText (string content, System.Text.Encoding encoding, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadText(string content, class System.Text.Encoding encoding, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginUploadText(System.String,System.Text.Encoding,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginUploadText (content As String, encoding As Encoding, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, callback As AsyncCallback, state As Object) As ICancellableAsyncResult" />
      <MemberSignature Language="F#" Value="abstract member BeginUploadText : string * System.Text.Encoding * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult&#xA;override this.BeginUploadText : string * System.Text.Encoding * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * AsyncCallback * obj -&gt; Microsoft.Azure.Storage.ICancellableAsyncResult" Usage="cloudAppendBlob.BeginUploadText (content, encoding, accessCondition, options, operationContext, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.ICancellableAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="content">A string containing the text to upload.</param>
        <param name="encoding">A <see cref="T:System.Text.Encoding" /> object that indicates the text encoding to use. If <c>null</c>, UTF-8 will be used.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that will receive notification when the asynchronous operation completes.</param>
        <param name="state">A user-defined object that will be passed to the callback delegate.</param>
        <summary>
            Begins an asynchronous operation to upload a string of text to an append blob. If the blob already exists, it will be overwritten. Recommended only for single-writer scenarios.
            </summary>
        <returns>An <see cref="T:Microsoft.Azure.Storage.ICancellableAsyncResult" /> that references the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.BeginAppendText(System.String,System.Text.Encoding,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.AsyncCallback,System.Object)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateOrReplace">
      <MemberSignature Language="C#" Value="public virtual void CreateOrReplace (Microsoft.Azure.Storage.AccessCondition accessCondition = default, Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default, Microsoft.Azure.Storage.OperationContext operationContext = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateOrReplace(class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.CreateOrReplace(Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CreateOrReplace (Optional accessCondition As AccessCondition = Nothing, Optional options As BlobRequestOptions = Nothing, Optional operationContext As OperationContext = Nothing)" />
      <MemberSignature Language="F#" Value="abstract member CreateOrReplace : Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; unit&#xA;override this.CreateOrReplace : Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; unit" Usage="cloudAppendBlob.CreateOrReplace (accessCondition, options, operationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
      </Parameters>
      <Docs>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request. If <c>null</c>, default options are applied to the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <summary>
            Creates an empty append blob. If the blob already exists, this operation will overwrite it. To throw an exception if the blob exists, instead of overwriting, pass in an <see cref="T:Microsoft.Azure.Storage.AccessCondition" />
            object generated using <see cref="M:Microsoft.Azure.Storage.AccessCondition.GenerateIfNotExistsCondition" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateOrReplaceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task CreateOrReplaceAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CreateOrReplaceAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.CreateOrReplaceAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrReplaceAsync () As Task" />
      <MemberSignature Language="F#" Value="abstract member CreateOrReplaceAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.CreateOrReplaceAsync : unit -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.CreateOrReplaceAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Initiates an asynchronous operation to create an empty append blob. If the blob already exists, this operation will overwrite it. To throw an exception if the blob exists, instead of overwriting,
            use <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.CreateOrReplaceAsync(Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateOrReplaceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task CreateOrReplaceAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CreateOrReplaceAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.CreateOrReplaceAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrReplaceAsync (cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member CreateOrReplaceAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.CreateOrReplaceAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.CreateOrReplaceAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to create an append blob. If the blob already exists, this operation will overwrite it. To throw an exception if the blob exists, instead of overwriting,
            use <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.CreateOrReplaceAsync(Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.Threading.CancellationToken)" />.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateOrReplaceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task CreateOrReplaceAsync (Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CreateOrReplaceAsync(class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.CreateOrReplaceAsync(Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrReplaceAsync (accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext) As Task" />
      <MemberSignature Language="F#" Value="abstract member CreateOrReplaceAsync : Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; System.Threading.Tasks.Task&#xA;override this.CreateOrReplaceAsync : Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.CreateOrReplaceAsync (accessCondition, options, operationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
      </Parameters>
      <Docs>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <summary>
            Initiates an asynchronous operation to create an empty append blob. If the blob already exists, this operation will overwrite it. To throw an exception if the blob exists, instead of overwriting, pass in an <see cref="T:Microsoft.Azure.Storage.AccessCondition" />
            object generated using <see cref="M:Microsoft.Azure.Storage.AccessCondition.GenerateIfNotExistsCondition" />.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateOrReplaceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task CreateOrReplaceAsync (Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CreateOrReplaceAsync(class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.CreateOrReplaceAsync(Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrReplaceAsync (accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member CreateOrReplaceAsync : Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.CreateOrReplaceAsync : Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.CreateOrReplaceAsync (accessCondition, options, operationContext, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to create an empty append blob. If the blob already exists, this operation will overwrite it. To throw an exception if the blob exists, instead of overwriting, pass in an <see cref="T:Microsoft.Azure.Storage.AccessCondition" />
            object generated using <see cref="M:Microsoft.Azure.Storage.AccessCondition.GenerateIfNotExistsCondition" />.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSnapshot">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Storage.Blob.CloudAppendBlob CreateSnapshot (System.Collections.Generic.IDictionary&lt;string,string&gt; metadata = default, Microsoft.Azure.Storage.AccessCondition accessCondition = default, Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default, Microsoft.Azure.Storage.OperationContext operationContext = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Storage.Blob.CloudAppendBlob CreateSnapshot(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.CreateSnapshot(System.Collections.Generic.IDictionary{System.String,System.String},Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateSnapshot (Optional metadata As IDictionary(Of String, String) = Nothing, Optional accessCondition As AccessCondition = Nothing, Optional options As BlobRequestOptions = Nothing, Optional operationContext As OperationContext = Nothing) As CloudAppendBlob" />
      <MemberSignature Language="F#" Value="abstract member CreateSnapshot : System.Collections.Generic.IDictionary&lt;string, string&gt; * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; Microsoft.Azure.Storage.Blob.CloudAppendBlob&#xA;override this.CreateSnapshot : System.Collections.Generic.IDictionary&lt;string, string&gt; * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; Microsoft.Azure.Storage.Blob.CloudAppendBlob" Usage="cloudAppendBlob.CreateSnapshot (metadata, accessCondition, options, operationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.Blob.CloudAppendBlob</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
      </Parameters>
      <Docs>
        <param name="metadata">A collection of name-value pairs defining the metadata of the snapshot.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request, or <c>null</c>. If <c>null</c>, default options are applied to the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <summary>
            Creates a snapshot of the blob.
            </summary>
        <returns>A <see cref="T:Microsoft.Azure.Storage.Blob.CloudAppendBlob" /> object that is a blob snapshot.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSnapshotAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.Storage.Blob.CloudAppendBlob&gt; CreateSnapshotAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Storage.Blob.CloudAppendBlob&gt; CreateSnapshotAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.CreateSnapshotAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateSnapshotAsync () As Task(Of CloudAppendBlob)" />
      <MemberSignature Language="F#" Value="abstract member CreateSnapshotAsync : unit -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Storage.Blob.CloudAppendBlob&gt;&#xA;override this.CreateSnapshotAsync : unit -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Storage.Blob.CloudAppendBlob&gt;" Usage="cloudAppendBlob.CreateSnapshotAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Storage.Blob.CloudAppendBlob&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Initiates an asynchronous operation to create a snapshot of the blob.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> object of type <see cref="T:Microsoft.Azure.Storage.Blob.CloudAppendBlob" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSnapshotAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.Storage.Blob.CloudAppendBlob&gt; CreateSnapshotAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Storage.Blob.CloudAppendBlob&gt; CreateSnapshotAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.CreateSnapshotAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateSnapshotAsync (cancellationToken As CancellationToken) As Task(Of CloudAppendBlob)" />
      <MemberSignature Language="F#" Value="abstract member CreateSnapshotAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Storage.Blob.CloudAppendBlob&gt;&#xA;override this.CreateSnapshotAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Storage.Blob.CloudAppendBlob&gt;" Usage="cloudAppendBlob.CreateSnapshotAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Storage.Blob.CloudAppendBlob&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to create a snapshot of the blob.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> object of type <see cref="T:Microsoft.Azure.Storage.Blob.CloudAppendBlob" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSnapshotAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.Storage.Blob.CloudAppendBlob&gt; CreateSnapshotAsync (System.Collections.Generic.IDictionary&lt;string,string&gt; metadata, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Storage.Blob.CloudAppendBlob&gt; CreateSnapshotAsync(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.CreateSnapshotAsync(System.Collections.Generic.IDictionary{System.String,System.String},Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateSnapshotAsync (metadata As IDictionary(Of String, String), accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext) As Task(Of CloudAppendBlob)" />
      <MemberSignature Language="F#" Value="abstract member CreateSnapshotAsync : System.Collections.Generic.IDictionary&lt;string, string&gt; * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Storage.Blob.CloudAppendBlob&gt;&#xA;override this.CreateSnapshotAsync : System.Collections.Generic.IDictionary&lt;string, string&gt; * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Storage.Blob.CloudAppendBlob&gt;" Usage="cloudAppendBlob.CreateSnapshotAsync (metadata, accessCondition, options, operationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Storage.Blob.CloudAppendBlob&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
      </Parameters>
      <Docs>
        <param name="metadata">A collection of name-value pairs defining the metadata of the snapshot.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <summary>
            Initiates an asynchronous operation to create a snapshot of the blob.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> object of type <see cref="T:Microsoft.Azure.Storage.Blob.CloudAppendBlob" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSnapshotAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.Storage.Blob.CloudAppendBlob&gt; CreateSnapshotAsync (System.Collections.Generic.IDictionary&lt;string,string&gt; metadata, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Storage.Blob.CloudAppendBlob&gt; CreateSnapshotAsync(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.CreateSnapshotAsync(System.Collections.Generic.IDictionary{System.String,System.String},Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateSnapshotAsync (metadata As IDictionary(Of String, String), accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, cancellationToken As CancellationToken) As Task(Of CloudAppendBlob)" />
      <MemberSignature Language="F#" Value="abstract member CreateSnapshotAsync : System.Collections.Generic.IDictionary&lt;string, string&gt; * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Storage.Blob.CloudAppendBlob&gt;&#xA;override this.CreateSnapshotAsync : System.Collections.Generic.IDictionary&lt;string, string&gt; * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Storage.Blob.CloudAppendBlob&gt;" Usage="cloudAppendBlob.CreateSnapshotAsync (metadata, accessCondition, options, operationContext, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Storage.Blob.CloudAppendBlob&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="metadata">A collection of name-value pairs defining the metadata of the snapshot.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to create a snapshot of the blob.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> object of type <see cref="T:Microsoft.Azure.Storage.Blob.CloudAppendBlob" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DownloadText">
      <MemberSignature Language="C#" Value="public virtual string DownloadText (System.Text.Encoding encoding = default, Microsoft.Azure.Storage.AccessCondition accessCondition = default, Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default, Microsoft.Azure.Storage.OperationContext operationContext = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string DownloadText(class System.Text.Encoding encoding, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.DownloadText(System.Text.Encoding,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DownloadText (Optional encoding As Encoding = Nothing, Optional accessCondition As AccessCondition = Nothing, Optional options As BlobRequestOptions = Nothing, Optional operationContext As OperationContext = Nothing) As String" />
      <MemberSignature Language="F#" Value="abstract member DownloadText : System.Text.Encoding * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; string&#xA;override this.DownloadText : System.Text.Encoding * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; string" Usage="cloudAppendBlob.DownloadText (encoding, accessCondition, options, operationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
      </Parameters>
      <Docs>
        <param name="encoding">An object that indicates the text encoding to use.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request. If <c>null</c>, default options are applied to the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <summary>
            Downloads the blob's contents as a string.
            </summary>
        <returns>The contents of the blob, as a string.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DownloadTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; DownloadTextAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; DownloadTextAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.DownloadTextAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DownloadTextAsync () As Task(Of String)" />
      <MemberSignature Language="F#" Value="abstract member DownloadTextAsync : unit -&gt; System.Threading.Tasks.Task&lt;string&gt;&#xA;override this.DownloadTextAsync : unit -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="cloudAppendBlob.DownloadTextAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Initiates an asynchronous operation to download the blob's contents as a string.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> object of type <c>string</c> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DownloadTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; DownloadTextAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; DownloadTextAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.DownloadTextAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DownloadTextAsync (cancellationToken As CancellationToken) As Task(Of String)" />
      <MemberSignature Language="F#" Value="abstract member DownloadTextAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;&#xA;override this.DownloadTextAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="cloudAppendBlob.DownloadTextAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to download the blob's contents as a string.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> object of type <c>string</c> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DownloadTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; DownloadTextAsync (System.Text.Encoding encoding, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; DownloadTextAsync(class System.Text.Encoding encoding, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.DownloadTextAsync(System.Text.Encoding,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DownloadTextAsync (encoding As Encoding, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext) As Task(Of String)" />
      <MemberSignature Language="F#" Value="abstract member DownloadTextAsync : System.Text.Encoding * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; System.Threading.Tasks.Task&lt;string&gt;&#xA;override this.DownloadTextAsync : System.Text.Encoding * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="cloudAppendBlob.DownloadTextAsync (encoding, accessCondition, options, operationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
      </Parameters>
      <Docs>
        <param name="encoding">An object that indicates the text encoding to use.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <summary>
            Initiates an asynchronous operation to download the blob's contents as a string.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> object of type <c>string</c> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DownloadTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; DownloadTextAsync (System.Text.Encoding encoding, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; DownloadTextAsync(class System.Text.Encoding encoding, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.DownloadTextAsync(System.Text.Encoding,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DownloadTextAsync (encoding As Encoding, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, cancellationToken As CancellationToken) As Task(Of String)" />
      <MemberSignature Language="F#" Value="abstract member DownloadTextAsync : System.Text.Encoding * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;&#xA;override this.DownloadTextAsync : System.Text.Encoding * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="cloudAppendBlob.DownloadTextAsync (encoding, accessCondition, options, operationContext, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="encoding">An object that indicates the text encoding to use.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to download the blob's contents as a string.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> object of type <c>string</c> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DownloadTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; DownloadTextAsync (System.Text.Encoding encoding, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; progressHandler, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; DownloadTextAsync(class System.Text.Encoding encoding, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, class System.IProgress`1&lt;class Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; progressHandler, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.DownloadTextAsync(System.Text.Encoding,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.IProgress{Microsoft.Azure.Storage.Core.Util.StorageProgress},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DownloadTextAsync (encoding As Encoding, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, progressHandler As IProgress(Of StorageProgress), cancellationToken As CancellationToken) As Task(Of String)" />
      <MemberSignature Language="F#" Value="abstract member DownloadTextAsync : System.Text.Encoding * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;&#xA;override this.DownloadTextAsync : System.Text.Encoding * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="cloudAppendBlob.DownloadTextAsync (encoding, accessCondition, options, operationContext, progressHandler, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="progressHandler" Type="System.IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="encoding">An object that indicates the text encoding to use.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="progressHandler"> A <see cref="T:System.IProgress`1" /> object to handle <see cref="T:Microsoft.Azure.Storage.Core.Util.StorageProgress" /> messages.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to download the blob's contents as a string.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> object of type <c>string</c> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndAppendBlock">
      <MemberSignature Language="C#" Value="public virtual long EndAppendBlock (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 EndAppendBlock(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.EndAppendBlock(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EndAppendBlock (asyncResult As IAsyncResult) As Long" />
      <MemberSignature Language="F#" Value="abstract member EndAppendBlock : IAsyncResult -&gt; int64&#xA;override this.EndAppendBlock : IAsyncResult -&gt; int64" Usage="cloudAppendBlob.EndAppendBlock asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that references the pending asynchronous operation.</param>
        <summary>
            Ends an asynchronous operation to commit a new block of data to the end of the blob.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndAppendFromByteArray">
      <MemberSignature Language="C#" Value="public virtual void EndAppendFromByteArray (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndAppendFromByteArray(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.EndAppendFromByteArray(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndAppendFromByteArray (asyncResult As IAsyncResult)" />
      <MemberSignature Language="F#" Value="abstract member EndAppendFromByteArray : IAsyncResult -&gt; unit&#xA;override this.EndAppendFromByteArray : IAsyncResult -&gt; unit" Usage="cloudAppendBlob.EndAppendFromByteArray asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that references the pending asynchronous operation.</param>
        <summary>
            Ends an asynchronous operation to append the contents of a byte array to an append blob. Recommended only for single-writer scenarios.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndAppendFromFile">
      <MemberSignature Language="C#" Value="public virtual void EndAppendFromFile (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndAppendFromFile(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.EndAppendFromFile(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndAppendFromFile (asyncResult As IAsyncResult)" />
      <MemberSignature Language="F#" Value="abstract member EndAppendFromFile : IAsyncResult -&gt; unit&#xA;override this.EndAppendFromFile : IAsyncResult -&gt; unit" Usage="cloudAppendBlob.EndAppendFromFile asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that references the pending asynchronous operation.</param>
        <summary>
            Ends an asynchronous operation to upload a file to an append blob. Recommended only for single-writer scenarios.
            </summary>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndAppendFromStream">
      <MemberSignature Language="C#" Value="public virtual void EndAppendFromStream (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndAppendFromStream(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.EndAppendFromStream(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndAppendFromStream (asyncResult As IAsyncResult)" />
      <MemberSignature Language="F#" Value="abstract member EndAppendFromStream : IAsyncResult -&gt; unit&#xA;override this.EndAppendFromStream : IAsyncResult -&gt; unit" Usage="cloudAppendBlob.EndAppendFromStream asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that references the pending asynchronous operation.</param>
        <summary>
            Ends an asynchronous operation to append a stream to an append blob. 
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndAppendText">
      <MemberSignature Language="C#" Value="public virtual void EndAppendText (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndAppendText(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.EndAppendText(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndAppendText (asyncResult As IAsyncResult)" />
      <MemberSignature Language="F#" Value="abstract member EndAppendText : IAsyncResult -&gt; unit&#xA;override this.EndAppendText : IAsyncResult -&gt; unit" Usage="cloudAppendBlob.EndAppendText asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that references the pending asynchronous operation.</param>
        <summary>
            Ends an asynchronous operation to append a string of text to an append blob. This API should be used strictly in a single writer scenario 
            because the API internally uses the append-offset conditional header to avoid duplicate blocks which does not work in a multiple writer scenario.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndCreateOrReplace">
      <MemberSignature Language="C#" Value="public virtual void EndCreateOrReplace (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndCreateOrReplace(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.EndCreateOrReplace(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndCreateOrReplace (asyncResult As IAsyncResult)" />
      <MemberSignature Language="F#" Value="abstract member EndCreateOrReplace : IAsyncResult -&gt; unit&#xA;override this.EndCreateOrReplace : IAsyncResult -&gt; unit" Usage="cloudAppendBlob.EndCreateOrReplace asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that references the pending asynchronous operation.</param>
        <summary>
            Ends an asynchronous operation to create an append blob.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndCreateSnapshot">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Storage.Blob.CloudAppendBlob EndCreateSnapshot (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Storage.Blob.CloudAppendBlob EndCreateSnapshot(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.EndCreateSnapshot(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EndCreateSnapshot (asyncResult As IAsyncResult) As CloudAppendBlob" />
      <MemberSignature Language="F#" Value="abstract member EndCreateSnapshot : IAsyncResult -&gt; Microsoft.Azure.Storage.Blob.CloudAppendBlob&#xA;override this.EndCreateSnapshot : IAsyncResult -&gt; Microsoft.Azure.Storage.Blob.CloudAppendBlob" Usage="cloudAppendBlob.EndCreateSnapshot asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.Blob.CloudAppendBlob</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that references the pending asynchronous operation.</param>
        <summary>
            Ends an asynchronous operation to create a snapshot of the blob.
            </summary>
        <returns>A <see cref="T:Microsoft.Azure.Storage.Blob.CloudAppendBlob" /> object that is a blob snapshot.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndDownloadText">
      <MemberSignature Language="C#" Value="public virtual string EndDownloadText (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string EndDownloadText(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.EndDownloadText(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EndDownloadText (asyncResult As IAsyncResult) As String" />
      <MemberSignature Language="F#" Value="abstract member EndDownloadText : IAsyncResult -&gt; string&#xA;override this.EndDownloadText : IAsyncResult -&gt; string" Usage="cloudAppendBlob.EndDownloadText asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that references the pending asynchronous operation.</param>
        <summary>
            Ends an asynchronous operation to download the blob's contents as a string.
            </summary>
        <returns>The contents of the blob, as a string.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndOpenWrite">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Storage.Blob.CloudBlobStream EndOpenWrite (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Storage.Blob.CloudBlobStream EndOpenWrite(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.EndOpenWrite(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EndOpenWrite (asyncResult As IAsyncResult) As CloudBlobStream" />
      <MemberSignature Language="F#" Value="abstract member EndOpenWrite : IAsyncResult -&gt; Microsoft.Azure.Storage.Blob.CloudBlobStream&#xA;override this.EndOpenWrite : IAsyncResult -&gt; Microsoft.Azure.Storage.Blob.CloudBlobStream" Usage="cloudAppendBlob.EndOpenWrite asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.Blob.CloudBlobStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that references the pending asynchronous operation.</param>
        <summary>
            Ends an asynchronous operation to open a stream for writing to the blob.
            </summary>
        <returns>A <see cref="T:Microsoft.Azure.Storage.Blob.CloudBlobStream" /> object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndUploadFromByteArray">
      <MemberSignature Language="C#" Value="public virtual void EndUploadFromByteArray (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndUploadFromByteArray(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.EndUploadFromByteArray(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndUploadFromByteArray (asyncResult As IAsyncResult)" />
      <MemberSignature Language="F#" Value="abstract member EndUploadFromByteArray : IAsyncResult -&gt; unit&#xA;override this.EndUploadFromByteArray : IAsyncResult -&gt; unit" Usage="cloudAppendBlob.EndUploadFromByteArray asyncResult" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Storage.Blob.ICloudBlob.EndUploadFromByteArray(System.IAsyncResult)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that references the pending asynchronous operation.</param>
        <summary>
            Ends an asynchronous operation to upload the contents of a byte array to an append blob. Recommended only for single-writer scenarios.
            </summary>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndUploadFromFile">
      <MemberSignature Language="C#" Value="public virtual void EndUploadFromFile (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndUploadFromFile(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.EndUploadFromFile(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndUploadFromFile (asyncResult As IAsyncResult)" />
      <MemberSignature Language="F#" Value="abstract member EndUploadFromFile : IAsyncResult -&gt; unit&#xA;override this.EndUploadFromFile : IAsyncResult -&gt; unit" Usage="cloudAppendBlob.EndUploadFromFile asyncResult" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Storage.Blob.ICloudBlob.EndUploadFromFile(System.IAsyncResult)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that references the pending asynchronous operation.</param>
        <summary>
            Ends an asynchronous operation to upload a file to an append blob. Recommended only for single-writer scenarios.
            </summary>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndUploadFromStream">
      <MemberSignature Language="C#" Value="public virtual void EndUploadFromStream (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndUploadFromStream(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.EndUploadFromStream(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndUploadFromStream (asyncResult As IAsyncResult)" />
      <MemberSignature Language="F#" Value="abstract member EndUploadFromStream : IAsyncResult -&gt; unit&#xA;override this.EndUploadFromStream : IAsyncResult -&gt; unit" Usage="cloudAppendBlob.EndUploadFromStream asyncResult" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Storage.Blob.ICloudBlob.EndUploadFromStream(System.IAsyncResult)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that references the pending asynchronous operation.</param>
        <summary>
            Ends an asynchronous operation to upload a stream to an append blob. 
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndUploadText">
      <MemberSignature Language="C#" Value="public virtual void EndUploadText (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndUploadText(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.EndUploadText(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndUploadText (asyncResult As IAsyncResult)" />
      <MemberSignature Language="F#" Value="abstract member EndUploadText : IAsyncResult -&gt; unit&#xA;override this.EndUploadText : IAsyncResult -&gt; unit" Usage="cloudAppendBlob.EndUploadText asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that references the pending asynchronous operation.</param>
        <summary>
            Ends an asynchronous operation to upload a string of text to an append blob. This API should be used strictly in a single writer scenario 
            because the API internally uses the append-offset conditional header to avoid duplicate blocks which does not work in a multiple writer scenario.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenWrite">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Storage.Blob.CloudBlobStream OpenWrite (bool createNew, Microsoft.Azure.Storage.AccessCondition accessCondition = default, Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default, Microsoft.Azure.Storage.OperationContext operationContext = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Storage.Blob.CloudBlobStream OpenWrite(bool createNew, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.OpenWrite(System.Boolean,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OpenWrite (createNew As Boolean, Optional accessCondition As AccessCondition = Nothing, Optional options As BlobRequestOptions = Nothing, Optional operationContext As OperationContext = Nothing) As CloudBlobStream" />
      <MemberSignature Language="F#" Value="abstract member OpenWrite : bool * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; Microsoft.Azure.Storage.Blob.CloudBlobStream&#xA;override this.OpenWrite : bool * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; Microsoft.Azure.Storage.Blob.CloudBlobStream" Usage="cloudAppendBlob.OpenWrite (createNew, accessCondition, options, operationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Storage.Blob.CloudBlobStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="createNew" Type="System.Boolean" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
      </Parameters>
      <Docs>
        <param name="createNew">Use <c>true</c> to create a new append blob or overwrite an existing one, <c>false</c> to append to an existing blob.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request. If <c>null</c>, default options are applied to the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <summary>
            Opens a stream for writing to the blob.
            </summary>
        <returns>A <see cref="T:Microsoft.Azure.Storage.Blob.CloudBlobStream" /> object.</returns>
        <remarks>
            Note that this method always makes a call to the <see cref="M:Microsoft.Azure.Storage.Blob.CloudBlob.FetchAttributes(Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" /> method under the covers.
            Set the <see cref="P:Microsoft.Azure.Storage.Blob.CloudAppendBlob.StreamWriteSizeInBytes" /> property before calling this method to specify the block size to write, in bytes, 
            ranging from between 16 KB and 4 MB inclusive.
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenWriteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.Storage.Blob.CloudBlobStream&gt; OpenWriteAsync (bool createNew);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Storage.Blob.CloudBlobStream&gt; OpenWriteAsync(bool createNew) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.OpenWriteAsync(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OpenWriteAsync (createNew As Boolean) As Task(Of CloudBlobStream)" />
      <MemberSignature Language="F#" Value="abstract member OpenWriteAsync : bool -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Storage.Blob.CloudBlobStream&gt;&#xA;override this.OpenWriteAsync : bool -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Storage.Blob.CloudBlobStream&gt;" Usage="cloudAppendBlob.OpenWriteAsync createNew" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Storage.Blob.CloudBlobStream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="createNew" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="createNew">Use <c>true</c> to create a new append blob or overwrite an existing one, <c>false</c> to append to an existing blob.</param>
        <summary>
            Initiates an asynchronous operation to open a stream for writing to the blob.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> object of type <see cref="T:Microsoft.Azure.Storage.Blob.CloudBlobStream" /> that represents the asynchronous operation.</returns>
        <remarks>
            Note that this method always makes a call to the <see cref="M:Microsoft.Azure.Storage.Blob.CloudBlob.BeginFetchAttributes(Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.AsyncCallback,System.Object)" /> method under the covers.
            Set the <see cref="P:Microsoft.Azure.Storage.Blob.CloudAppendBlob.StreamWriteSizeInBytes" /> property before calling this method to specify the block size to write, in bytes, 
            ranging from between 16 KB and 4 MB inclusive.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenWriteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.Storage.Blob.CloudBlobStream&gt; OpenWriteAsync (bool createNew, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Storage.Blob.CloudBlobStream&gt; OpenWriteAsync(bool createNew, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.OpenWriteAsync(System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OpenWriteAsync (createNew As Boolean, cancellationToken As CancellationToken) As Task(Of CloudBlobStream)" />
      <MemberSignature Language="F#" Value="abstract member OpenWriteAsync : bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Storage.Blob.CloudBlobStream&gt;&#xA;override this.OpenWriteAsync : bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Storage.Blob.CloudBlobStream&gt;" Usage="cloudAppendBlob.OpenWriteAsync (createNew, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Storage.Blob.CloudBlobStream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="createNew" Type="System.Boolean" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="createNew">Use <c>true</c> to create a new append blob or overwrite an existing one, <c>false</c> to append to an existing blob.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to open a stream for writing to the blob.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> object of type <see cref="T:Microsoft.Azure.Storage.Blob.CloudBlobStream" /> that represents the asynchronous operation.</returns>
        <remarks>
            Note that this method always makes a call to the <see cref="M:Microsoft.Azure.Storage.Blob.CloudBlob.FetchAttributesAsync(Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.Threading.CancellationToken)" /> method under the covers.
            Set the <see cref="P:Microsoft.Azure.Storage.Blob.CloudAppendBlob.StreamWriteSizeInBytes" /> property before calling this method to specify the block size to write, in bytes, 
            ranging from between 16 KB and 4 MB inclusive.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenWriteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.Storage.Blob.CloudBlobStream&gt; OpenWriteAsync (bool createNew, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Storage.Blob.CloudBlobStream&gt; OpenWriteAsync(bool createNew, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.OpenWriteAsync(System.Boolean,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OpenWriteAsync (createNew As Boolean, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext) As Task(Of CloudBlobStream)" />
      <MemberSignature Language="F#" Value="abstract member OpenWriteAsync : bool * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Storage.Blob.CloudBlobStream&gt;&#xA;override this.OpenWriteAsync : bool * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Storage.Blob.CloudBlobStream&gt;" Usage="cloudAppendBlob.OpenWriteAsync (createNew, accessCondition, options, operationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Storage.Blob.CloudBlobStream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="createNew" Type="System.Boolean" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
      </Parameters>
      <Docs>
        <param name="createNew">Use <c>true</c> to create a new append blob or overwrite an existing one, <c>false</c> to append to an existing blob.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <summary>
            Initiates an asynchronous operation to open a stream for writing to the blob.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> object of type <see cref="T:Microsoft.Azure.Storage.Blob.CloudBlobStream" /> that represents the asynchronous operation.</returns>
        <remarks>
            Note that this method always makes a call to the <see cref="M:Microsoft.Azure.Storage.Blob.CloudBlob.FetchAttributesAsync(Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.Threading.CancellationToken)" /> method under the covers.
            Set the <see cref="P:Microsoft.Azure.Storage.Blob.CloudAppendBlob.StreamWriteSizeInBytes" /> property before calling this method to specify the block size to write, in bytes, 
            ranging from between 16 KB and 4 MB inclusive.
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenWriteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.Storage.Blob.CloudBlobStream&gt; OpenWriteAsync (bool createNew, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Storage.Blob.CloudBlobStream&gt; OpenWriteAsync(bool createNew, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.OpenWriteAsync(System.Boolean,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OpenWriteAsync (createNew As Boolean, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, cancellationToken As CancellationToken) As Task(Of CloudBlobStream)" />
      <MemberSignature Language="F#" Value="abstract member OpenWriteAsync : bool * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Storage.Blob.CloudBlobStream&gt;&#xA;override this.OpenWriteAsync : bool * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Storage.Blob.CloudBlobStream&gt;" Usage="cloudAppendBlob.OpenWriteAsync (createNew, accessCondition, options, operationContext, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Storage.Blob.CloudBlobStream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="createNew" Type="System.Boolean" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="createNew">Use <c>true</c> to create a new append blob or overwrite an existing one, <c>false</c> to append to an existing blob.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to open a stream for writing to the blob.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> object of type <see cref="T:Microsoft.Azure.Storage.Blob.CloudBlobStream" /> that represents the asynchronous operation.</returns>
        <remarks>
            Note that this method always makes a call to the <see cref="M:Microsoft.Azure.Storage.Blob.CloudBlob.FetchAttributesAsync(Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.Threading.CancellationToken)" /> method under the covers.
            Set the <see cref="P:Microsoft.Azure.Storage.Blob.CloudAppendBlob.StreamWriteSizeInBytes" /> property before calling this method to specify the block size to write, in bytes, 
            ranging from between 16 KB and 4 MB inclusive.
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartCopy">
      <MemberSignature Language="C#" Value="public virtual string StartCopy (Microsoft.Azure.Storage.Blob.CloudAppendBlob source, Microsoft.Azure.Storage.AccessCondition sourceAccessCondition = default, Microsoft.Azure.Storage.AccessCondition destAccessCondition = default, Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default, Microsoft.Azure.Storage.OperationContext operationContext = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string StartCopy(class Microsoft.Azure.Storage.Blob.CloudAppendBlob source, class Microsoft.Azure.Storage.AccessCondition sourceAccessCondition, class Microsoft.Azure.Storage.AccessCondition destAccessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.StartCopy(Microsoft.Azure.Storage.Blob.CloudAppendBlob,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StartCopy (source As CloudAppendBlob, Optional sourceAccessCondition As AccessCondition = Nothing, Optional destAccessCondition As AccessCondition = Nothing, Optional options As BlobRequestOptions = Nothing, Optional operationContext As OperationContext = Nothing) As String" />
      <MemberSignature Language="F#" Value="override this.StartCopy : Microsoft.Azure.Storage.Blob.CloudAppendBlob * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; string" Usage="cloudAppendBlob.StartCopy (source, sourceAccessCondition, destAccessCondition, options, operationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.Azure.Storage.Blob.CloudAppendBlob" />
        <Parameter Name="sourceAccessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="destAccessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
      </Parameters>
      <Docs>
        <param name="source">The <see cref="T:System.Uri" /> of the source blob.</param>
        <param name="sourceAccessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the access conditions for the source blob. If <c>null</c>, no condition is used.</param>
        <param name="destAccessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the access conditions for the destination blob. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request. If <c>null</c>, default options are applied to the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <summary>
            Begins an operation to start copying another append blob's contents, properties, and metadata to this append blob.
            </summary>
        <returns>The copy ID associated with the copy operation.</returns>
        <remarks>
            This method fetches the blob's ETag, last-modified time, and part of the copy state.
            The copy ID and copy status fields are fetched, and the rest of the copy state is cleared.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartCopyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; StartCopyAsync (Microsoft.Azure.Storage.Blob.CloudAppendBlob source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; StartCopyAsync(class Microsoft.Azure.Storage.Blob.CloudAppendBlob source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.StartCopyAsync(Microsoft.Azure.Storage.Blob.CloudAppendBlob)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StartCopyAsync (source As CloudAppendBlob) As Task(Of String)" />
      <MemberSignature Language="F#" Value="override this.StartCopyAsync : Microsoft.Azure.Storage.Blob.CloudAppendBlob -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="cloudAppendBlob.StartCopyAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.Azure.Storage.Blob.CloudAppendBlob" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:Microsoft.Azure.Storage.Blob.CloudAppendBlob" /> object.</param>
        <summary>
            Initiates an asynchronous operation to start copying another append blob's contents, properties, and metadata to this append blob.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> object of type <c>string</c> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartCopyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; StartCopyAsync (Microsoft.Azure.Storage.Blob.CloudAppendBlob source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; StartCopyAsync(class Microsoft.Azure.Storage.Blob.CloudAppendBlob source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.StartCopyAsync(Microsoft.Azure.Storage.Blob.CloudAppendBlob,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StartCopyAsync (source As CloudAppendBlob, cancellationToken As CancellationToken) As Task(Of String)" />
      <MemberSignature Language="F#" Value="override this.StartCopyAsync : Microsoft.Azure.Storage.Blob.CloudAppendBlob * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="cloudAppendBlob.StartCopyAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.Azure.Storage.Blob.CloudAppendBlob" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:Microsoft.Azure.Storage.Blob.CloudAppendBlob" /> object.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to start copying another append blob's contents, properties, and metadata to this append blob.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> object of type <c>string</c> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartCopyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; StartCopyAsync (Microsoft.Azure.Storage.Blob.CloudAppendBlob source, Microsoft.Azure.Storage.AccessCondition sourceAccessCondition, Microsoft.Azure.Storage.AccessCondition destAccessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; StartCopyAsync(class Microsoft.Azure.Storage.Blob.CloudAppendBlob source, class Microsoft.Azure.Storage.AccessCondition sourceAccessCondition, class Microsoft.Azure.Storage.AccessCondition destAccessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.StartCopyAsync(Microsoft.Azure.Storage.Blob.CloudAppendBlob,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StartCopyAsync (source As CloudAppendBlob, sourceAccessCondition As AccessCondition, destAccessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext) As Task(Of String)" />
      <MemberSignature Language="F#" Value="override this.StartCopyAsync : Microsoft.Azure.Storage.Blob.CloudAppendBlob * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="cloudAppendBlob.StartCopyAsync (source, sourceAccessCondition, destAccessCondition, options, operationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.Azure.Storage.Blob.CloudAppendBlob" />
        <Parameter Name="sourceAccessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="destAccessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:Microsoft.Azure.Storage.Blob.CloudAppendBlob" /> object.</param>
        <param name="sourceAccessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the access conditions for the source blob. If <c>null</c>, no condition is used.</param>
        <param name="destAccessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the access conditions for the destination blob. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <summary>
            Initiates an asynchronous operation to start copying another append blob's contents, properties, and metadata to this append blob.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> object of type <c>string</c> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartCopyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; StartCopyAsync (Microsoft.Azure.Storage.Blob.CloudAppendBlob source, Microsoft.Azure.Storage.AccessCondition sourceAccessCondition, Microsoft.Azure.Storage.AccessCondition destAccessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; StartCopyAsync(class Microsoft.Azure.Storage.Blob.CloudAppendBlob source, class Microsoft.Azure.Storage.AccessCondition sourceAccessCondition, class Microsoft.Azure.Storage.AccessCondition destAccessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.StartCopyAsync(Microsoft.Azure.Storage.Blob.CloudAppendBlob,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StartCopyAsync (source As CloudAppendBlob, sourceAccessCondition As AccessCondition, destAccessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, cancellationToken As CancellationToken) As Task(Of String)" />
      <MemberSignature Language="F#" Value="override this.StartCopyAsync : Microsoft.Azure.Storage.Blob.CloudAppendBlob * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="cloudAppendBlob.StartCopyAsync (source, sourceAccessCondition, destAccessCondition, options, operationContext, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="Microsoft.Azure.Storage.Blob.CloudAppendBlob" />
        <Parameter Name="sourceAccessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="destAccessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:Microsoft.Azure.Storage.Blob.CloudAppendBlob" /> object.</param>
        <param name="sourceAccessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the access conditions for the source blob. If <c>null</c>, no condition is used.</param>
        <param name="destAccessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the access conditions for the destination blob. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to start copying another append blob's contents, properties, and metadata to this append blob.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> object of type <c>string</c> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StreamWriteSizeInBytes">
      <MemberSignature Language="C#" Value="public int StreamWriteSizeInBytes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 StreamWriteSizeInBytes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Storage.Blob.CloudAppendBlob.StreamWriteSizeInBytes" />
      <MemberSignature Language="VB.NET" Value="Public Property StreamWriteSizeInBytes As Integer" />
      <MemberSignature Language="F#" Value="member this.StreamWriteSizeInBytes : int with get, set" Usage="Microsoft.Azure.Storage.Blob.CloudAppendBlob.StreamWriteSizeInBytes" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Azure.Storage.Blob.ICloudBlob.StreamWriteSizeInBytes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the number of bytes to buffer when writing to an append blob stream.
            </summary>
        <value>The size of a block, in bytes, ranging from between 16 KB and 4 MB inclusive.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFromByteArray">
      <MemberSignature Language="C#" Value="public virtual void UploadFromByteArray (byte[] buffer, int index, int count, Microsoft.Azure.Storage.AccessCondition accessCondition = default, Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default, Microsoft.Azure.Storage.OperationContext operationContext = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UploadFromByteArray(unsigned int8[] buffer, int32 index, int32 count, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.UploadFromByteArray(System.Byte[],System.Int32,System.Int32,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub UploadFromByteArray (buffer As Byte(), index As Integer, count As Integer, Optional accessCondition As AccessCondition = Nothing, Optional options As BlobRequestOptions = Nothing, Optional operationContext As OperationContext = Nothing)" />
      <MemberSignature Language="F#" Value="abstract member UploadFromByteArray : byte[] * int * int * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; unit&#xA;override this.UploadFromByteArray : byte[] * int * int * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; unit" Usage="cloudAppendBlob.UploadFromByteArray (buffer, index, count, accessCondition, options, operationContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Storage.Blob.ICloudBlob.UploadFromByteArray(System.Byte[],System.Int32,System.Int32,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
      </Parameters>
      <Docs>
        <param name="buffer">An array of bytes.</param>
        <param name="index">The zero-based byte offset in buffer at which to begin uploading bytes to the blob.</param>
        <param name="count">The number of bytes to be written to the blob.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request. If <c>null</c>, default options are applied to the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <summary>
            Uploads the contents of a byte array to an append blob. If the blob already exists, it will be overwritten. Recommended only for single-writer scenarios.
            </summary>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromByteArray(System.Byte[],System.Int32,System.Int32,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFromByteArrayAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UploadFromByteArrayAsync (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UploadFromByteArrayAsync(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.UploadFromByteArrayAsync(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadFromByteArrayAsync (buffer As Byte(), index As Integer, count As Integer) As Task" />
      <MemberSignature Language="F#" Value="abstract member UploadFromByteArrayAsync : byte[] * int * int -&gt; System.Threading.Tasks.Task&#xA;override this.UploadFromByteArrayAsync : byte[] * int * int -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.UploadFromByteArrayAsync (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Storage.Blob.ICloudBlob.UploadFromByteArrayAsync(System.Byte[],System.Int32,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">An array of bytes.</param>
        <param name="index">The zero-based byte offset in buffer at which to begin uploading bytes to the blob.</param>
        <param name="count">The number of bytes to be written to the blob.</param>
        <summary>
            Initiates an asynchronous operation to upload the contents of a byte array to an append blob. If the blob already exists, it will be overwritten. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromByteArrayAsync(System.Byte[],System.Int32,System.Int32)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFromByteArrayAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UploadFromByteArrayAsync (byte[] buffer, int index, int count, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UploadFromByteArrayAsync(unsigned int8[] buffer, int32 index, int32 count, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.UploadFromByteArrayAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadFromByteArrayAsync (buffer As Byte(), index As Integer, count As Integer, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member UploadFromByteArrayAsync : byte[] * int * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.UploadFromByteArrayAsync : byte[] * int * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.UploadFromByteArrayAsync (buffer, index, count, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Storage.Blob.ICloudBlob.UploadFromByteArrayAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">An array of bytes.</param>
        <param name="index">The zero-based byte offset in buffer at which to begin uploading bytes to the blob.</param>
        <param name="count">The number of bytes to be written to the blob.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to upload the contents of a byte array to an append blob. If the blob already exists, it will be overwritten. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromByteArrayAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFromByteArrayAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UploadFromByteArrayAsync (byte[] buffer, int index, int count, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UploadFromByteArrayAsync(unsigned int8[] buffer, int32 index, int32 count, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.UploadFromByteArrayAsync(System.Byte[],System.Int32,System.Int32,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadFromByteArrayAsync (buffer As Byte(), index As Integer, count As Integer, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext) As Task" />
      <MemberSignature Language="F#" Value="abstract member UploadFromByteArrayAsync : byte[] * int * int * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; System.Threading.Tasks.Task&#xA;override this.UploadFromByteArrayAsync : byte[] * int * int * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.UploadFromByteArrayAsync (buffer, index, count, accessCondition, options, operationContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Storage.Blob.ICloudBlob.UploadFromByteArrayAsync(System.Byte[],System.Int32,System.Int32,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
      </Parameters>
      <Docs>
        <param name="buffer">An array of bytes.</param>
        <param name="index">The zero-based byte offset in buffer at which to begin uploading bytes to the blob.</param>
        <param name="count">The number of bytes to be written to the blob.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <summary>
            Initiates an asynchronous operation to upload the contents of a byte array to an append blob. If the blob already exists, it will be overwritten. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromByteArrayAsync(System.Byte[],System.Int32,System.Int32,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFromByteArrayAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UploadFromByteArrayAsync (byte[] buffer, int index, int count, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UploadFromByteArrayAsync(unsigned int8[] buffer, int32 index, int32 count, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.UploadFromByteArrayAsync(System.Byte[],System.Int32,System.Int32,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadFromByteArrayAsync (buffer As Byte(), index As Integer, count As Integer, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member UploadFromByteArrayAsync : byte[] * int * int * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.UploadFromByteArrayAsync : byte[] * int * int * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.UploadFromByteArrayAsync (buffer, index, count, accessCondition, options, operationContext, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Storage.Blob.ICloudBlob.UploadFromByteArrayAsync(System.Byte[],System.Int32,System.Int32,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">An array of bytes.</param>
        <param name="index">The zero-based byte offset in buffer at which to begin uploading bytes to the blob.</param>
        <param name="count">The number of bytes to be written to the blob.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to upload the contents of a byte array to an append blob. If the blob already exists, it will be overwritten. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromByteArrayAsync(System.Byte[],System.Int32,System.Int32,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.Threading.CancellationToken)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFromByteArrayAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UploadFromByteArrayAsync (byte[] buffer, int index, int count, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; progressHandler, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UploadFromByteArrayAsync(unsigned int8[] buffer, int32 index, int32 count, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, class System.IProgress`1&lt;class Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; progressHandler, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.UploadFromByteArrayAsync(System.Byte[],System.Int32,System.Int32,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.IProgress{Microsoft.Azure.Storage.Core.Util.StorageProgress},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadFromByteArrayAsync (buffer As Byte(), index As Integer, count As Integer, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, progressHandler As IProgress(Of StorageProgress), cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member UploadFromByteArrayAsync : byte[] * int * int * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.UploadFromByteArrayAsync : byte[] * int * int * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.UploadFromByteArrayAsync (buffer, index, count, accessCondition, options, operationContext, progressHandler, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="progressHandler" Type="System.IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">An array of bytes.</param>
        <param name="index">The zero-based byte offset in buffer at which to begin uploading bytes to the blob.</param>
        <param name="count">The number of bytes to be written to the blob.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="progressHandler"> A <see cref="T:System.IProgress`1" /> object to handle <see cref="T:Microsoft.Azure.Storage.Core.Util.StorageProgress" /> messages.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to upload the contents of a byte array to an append blob. If the blob already exists, it will be overwritten. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromByteArrayAsync(System.Byte[],System.Int32,System.Int32,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.Threading.CancellationToken)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFromFile">
      <MemberSignature Language="C#" Value="public virtual void UploadFromFile (string path, Microsoft.Azure.Storage.AccessCondition accessCondition = default, Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default, Microsoft.Azure.Storage.OperationContext operationContext = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UploadFromFile(string path, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.UploadFromFile(System.String,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub UploadFromFile (path As String, Optional accessCondition As AccessCondition = Nothing, Optional options As BlobRequestOptions = Nothing, Optional operationContext As OperationContext = Nothing)" />
      <MemberSignature Language="F#" Value="abstract member UploadFromFile : string * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; unit&#xA;override this.UploadFromFile : string * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; unit" Usage="cloudAppendBlob.UploadFromFile (path, accessCondition, options, operationContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Storage.Blob.ICloudBlob.UploadFromFile(System.String,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
      </Parameters>
      <Docs>
        <param name="path">A string containing the file path providing the blob content.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request. If <c>null</c>, default options are applied to the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <summary>
            Uploads a file to an append blob. If the blob already exists, it will be overwritten. Recommended only for single-writer scenarios.
            </summary>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromFile(System.String,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFromFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UploadFromFileAsync (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UploadFromFileAsync(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.UploadFromFileAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadFromFileAsync (path As String) As Task" />
      <MemberSignature Language="F#" Value="abstract member UploadFromFileAsync : string -&gt; System.Threading.Tasks.Task&#xA;override this.UploadFromFileAsync : string -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.UploadFromFileAsync path" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Storage.Blob.ICloudBlob.UploadFromFileAsync(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">A string containing the file path providing the blob content.</param>
        <summary>
            Initiates an asynchronous operation to upload a file to an append blob. If the blob already exists, it will be overwritten. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromFileAsync(System.String)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFromFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UploadFromFileAsync (string path, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UploadFromFileAsync(string path, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.UploadFromFileAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadFromFileAsync (path As String, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member UploadFromFileAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.UploadFromFileAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.UploadFromFileAsync (path, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Storage.Blob.ICloudBlob.UploadFromFileAsync(System.String,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">A string containing the file path providing the blob content.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to upload a file to an append blob. If the blob already exists, it will be overwritten. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromFileAsync(System.String,System.Threading.CancellationToken)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFromFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UploadFromFileAsync (string path, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UploadFromFileAsync(string path, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.UploadFromFileAsync(System.String,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadFromFileAsync (path As String, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext) As Task" />
      <MemberSignature Language="F#" Value="abstract member UploadFromFileAsync : string * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; System.Threading.Tasks.Task&#xA;override this.UploadFromFileAsync : string * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.UploadFromFileAsync (path, accessCondition, options, operationContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Storage.Blob.ICloudBlob.UploadFromFileAsync(System.String,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
      </Parameters>
      <Docs>
        <param name="path">A string containing the file path providing the blob content.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <summary>
            Initiates an asynchronous operation to upload a file to an append blob. If the blob already exists, it will be overwritten. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromFileAsync(System.String,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFromFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UploadFromFileAsync (string path, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UploadFromFileAsync(string path, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.UploadFromFileAsync(System.String,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadFromFileAsync (path As String, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member UploadFromFileAsync : string * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.UploadFromFileAsync : string * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.UploadFromFileAsync (path, accessCondition, options, operationContext, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Storage.Blob.ICloudBlob.UploadFromFileAsync(System.String,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">A string containing the file path providing the blob content.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to upload a file to an append blob. If the blob already exists, it will be overwritten. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromFileAsync(System.String,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.Threading.CancellationToken)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFromFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UploadFromFileAsync (string path, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; progressHandler, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UploadFromFileAsync(string path, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, class System.IProgress`1&lt;class Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; progressHandler, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.UploadFromFileAsync(System.String,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.IProgress{Microsoft.Azure.Storage.Core.Util.StorageProgress},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadFromFileAsync (path As String, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, progressHandler As IProgress(Of StorageProgress), cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member UploadFromFileAsync : string * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.UploadFromFileAsync : string * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.UploadFromFileAsync (path, accessCondition, options, operationContext, progressHandler, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="progressHandler" Type="System.IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">A string containing the file path providing the blob content.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="progressHandler"> A <see cref="T:System.IProgress`1" /> object to handle <see cref="T:Microsoft.Azure.Storage.Core.Util.StorageProgress" /> messages.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to upload a file to an append blob. If the blob already exists, it will be overwritten. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromFileAsync(System.String,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.Threading.CancellationToken)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFromStream">
      <MemberSignature Language="C#" Value="public virtual void UploadFromStream (System.IO.Stream source, Microsoft.Azure.Storage.AccessCondition accessCondition = default, Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default, Microsoft.Azure.Storage.OperationContext operationContext = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UploadFromStream(class System.IO.Stream source, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.UploadFromStream(System.IO.Stream,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub UploadFromStream (source As Stream, Optional accessCondition As AccessCondition = Nothing, Optional options As BlobRequestOptions = Nothing, Optional operationContext As OperationContext = Nothing)" />
      <MemberSignature Language="F#" Value="abstract member UploadFromStream : System.IO.Stream * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; unit&#xA;override this.UploadFromStream : System.IO.Stream * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; unit" Usage="cloudAppendBlob.UploadFromStream (source, accessCondition, options, operationContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Storage.Blob.ICloudBlob.UploadFromStream(System.IO.Stream,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:System.IO.Stream" /> object providing the blob content.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request. If <c>null</c>, default options are applied to the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <summary>
            Uploads a stream to an append blob. If the blob already exists, it will be overwritten. Recommended only for single-writer scenarios.
            </summary>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromStream(System.IO.Stream,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFromStream">
      <MemberSignature Language="C#" Value="public virtual void UploadFromStream (System.IO.Stream source, long length, Microsoft.Azure.Storage.AccessCondition accessCondition = default, Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default, Microsoft.Azure.Storage.OperationContext operationContext = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UploadFromStream(class System.IO.Stream source, int64 length, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.UploadFromStream(System.IO.Stream,System.Int64,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub UploadFromStream (source As Stream, length As Long, Optional accessCondition As AccessCondition = Nothing, Optional options As BlobRequestOptions = Nothing, Optional operationContext As OperationContext = Nothing)" />
      <MemberSignature Language="F#" Value="abstract member UploadFromStream : System.IO.Stream * int64 * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; unit&#xA;override this.UploadFromStream : System.IO.Stream * int64 * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; unit" Usage="cloudAppendBlob.UploadFromStream (source, length, accessCondition, options, operationContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Storage.Blob.ICloudBlob.UploadFromStream(System.IO.Stream,System.Int64,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
        <Parameter Name="length" Type="System.Int64" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:System.IO.Stream" /> object providing the blob content.</param>
        <param name="length">The number of bytes to write from the source stream at its current position.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request. If <c>null</c>, default options are applied to the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <summary>
            Uploads a stream to an append blob. If the blob already exists, it will be overwritten. Recommended only for single-writer scenarios.
            </summary>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromStream(System.IO.Stream,System.Int64,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFromStreamAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UploadFromStreamAsync (System.IO.Stream source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UploadFromStreamAsync(class System.IO.Stream source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.UploadFromStreamAsync(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadFromStreamAsync (source As Stream) As Task" />
      <MemberSignature Language="F#" Value="abstract member UploadFromStreamAsync : System.IO.Stream -&gt; System.Threading.Tasks.Task&#xA;override this.UploadFromStreamAsync : System.IO.Stream -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.UploadFromStreamAsync source" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Storage.Blob.ICloudBlob.UploadFromStreamAsync(System.IO.Stream)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:System.IO.Stream" /> object providing the blob content.</param>
        <summary>
            Initiates an asynchronous operation to upload a stream to an append blob. If the blob already exists, it will be overwritten.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromStreamAsync(System.IO.Stream)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFromStreamAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UploadFromStreamAsync (System.IO.Stream source, long length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UploadFromStreamAsync(class System.IO.Stream source, int64 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.UploadFromStreamAsync(System.IO.Stream,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadFromStreamAsync (source As Stream, length As Long) As Task" />
      <MemberSignature Language="F#" Value="abstract member UploadFromStreamAsync : System.IO.Stream * int64 -&gt; System.Threading.Tasks.Task&#xA;override this.UploadFromStreamAsync : System.IO.Stream * int64 -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.UploadFromStreamAsync (source, length)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Storage.Blob.ICloudBlob.UploadFromStreamAsync(System.IO.Stream,System.Int64)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
        <Parameter Name="length" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:System.IO.Stream" /> object providing the blob content.</param>
        <param name="length">The number of bytes to write from the source stream at its current position.</param>
        <summary>
            Initiates an asynchronous operation to upload a stream to an append blob. If the blob already exists, it will be overwritten.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromStreamAsync(System.IO.Stream,System.Int64)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFromStreamAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UploadFromStreamAsync (System.IO.Stream source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UploadFromStreamAsync(class System.IO.Stream source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.UploadFromStreamAsync(System.IO.Stream,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadFromStreamAsync (source As Stream, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member UploadFromStreamAsync : System.IO.Stream * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.UploadFromStreamAsync : System.IO.Stream * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.UploadFromStreamAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Storage.Blob.ICloudBlob.UploadFromStreamAsync(System.IO.Stream,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:System.IO.Stream" /> object providing the blob content.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to upload a stream to an append blob. If the blob already exists, it will be overwritten.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromStreamAsync(System.IO.Stream,System.Threading.CancellationToken)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFromStreamAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UploadFromStreamAsync (System.IO.Stream source, long length, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UploadFromStreamAsync(class System.IO.Stream source, int64 length, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.UploadFromStreamAsync(System.IO.Stream,System.Int64,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadFromStreamAsync (source As Stream, length As Long, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member UploadFromStreamAsync : System.IO.Stream * int64 * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.UploadFromStreamAsync : System.IO.Stream * int64 * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.UploadFromStreamAsync (source, length, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Storage.Blob.ICloudBlob.UploadFromStreamAsync(System.IO.Stream,System.Int64,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
        <Parameter Name="length" Type="System.Int64" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:System.IO.Stream" /> object providing the blob content.</param>
        <param name="length">The number of bytes to write from the source stream at its current position.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to upload a stream to an append blob. If the blob already exists, it will be overwritten.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromStreamAsync(System.IO.Stream,System.Int64,System.Threading.CancellationToken)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFromStreamAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UploadFromStreamAsync (System.IO.Stream source, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UploadFromStreamAsync(class System.IO.Stream source, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.UploadFromStreamAsync(System.IO.Stream,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadFromStreamAsync (source As Stream, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext) As Task" />
      <MemberSignature Language="F#" Value="abstract member UploadFromStreamAsync : System.IO.Stream * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; System.Threading.Tasks.Task&#xA;override this.UploadFromStreamAsync : System.IO.Stream * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.UploadFromStreamAsync (source, accessCondition, options, operationContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Storage.Blob.ICloudBlob.UploadFromStreamAsync(System.IO.Stream,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:System.IO.Stream" /> object providing the blob content.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <summary>
            Initiates an asynchronous operation to upload a stream to an append blob. If the blob already exists, it will be overwritten. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromStreamAsync(System.IO.Stream,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFromStreamAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UploadFromStreamAsync (System.IO.Stream source, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UploadFromStreamAsync(class System.IO.Stream source, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.UploadFromStreamAsync(System.IO.Stream,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadFromStreamAsync (source As Stream, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member UploadFromStreamAsync : System.IO.Stream * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.UploadFromStreamAsync : System.IO.Stream * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.UploadFromStreamAsync (source, accessCondition, options, operationContext, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Storage.Blob.ICloudBlob.UploadFromStreamAsync(System.IO.Stream,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:System.IO.Stream" /> object providing the blob content.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to upload a stream to an append blob. If the blob already exists, it will be overwritten. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromStreamAsync(System.IO.Stream,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.Threading.CancellationToken)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFromStreamAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UploadFromStreamAsync (System.IO.Stream source, long length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UploadFromStreamAsync(class System.IO.Stream source, int64 length, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.UploadFromStreamAsync(System.IO.Stream,System.Int64,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadFromStreamAsync (source As Stream, length As Long, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext) As Task" />
      <MemberSignature Language="F#" Value="abstract member UploadFromStreamAsync : System.IO.Stream * int64 * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; System.Threading.Tasks.Task&#xA;override this.UploadFromStreamAsync : System.IO.Stream * int64 * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.UploadFromStreamAsync (source, length, accessCondition, options, operationContext)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Storage.Blob.ICloudBlob.UploadFromStreamAsync(System.IO.Stream,System.Int64,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
        <Parameter Name="length" Type="System.Int64" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:System.IO.Stream" /> object providing the blob content.</param>
        <param name="length">The number of bytes to write from the source stream at its current position.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <summary>
            Initiates an asynchronous operation to upload a stream to an append blob. If the blob already exists, it will be overwritten. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromStreamAsync(System.IO.Stream,System.Int64,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFromStreamAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UploadFromStreamAsync (System.IO.Stream source, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; progressHandler, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UploadFromStreamAsync(class System.IO.Stream source, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, class System.IProgress`1&lt;class Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; progressHandler, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.UploadFromStreamAsync(System.IO.Stream,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.IProgress{Microsoft.Azure.Storage.Core.Util.StorageProgress},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadFromStreamAsync (source As Stream, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, progressHandler As IProgress(Of StorageProgress), cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member UploadFromStreamAsync : System.IO.Stream * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.UploadFromStreamAsync : System.IO.Stream * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.UploadFromStreamAsync (source, accessCondition, options, operationContext, progressHandler, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="progressHandler" Type="System.IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:System.IO.Stream" /> object providing the blob content.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="progressHandler"> A <see cref="T:System.IProgress`1" /> object to handle <see cref="T:Microsoft.Azure.Storage.Core.Util.StorageProgress" /> messages.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to upload a stream to an append blob. If the blob already exists, it will be overwritten. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromStreamAsync(System.IO.Stream,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.Threading.CancellationToken)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFromStreamAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UploadFromStreamAsync (System.IO.Stream source, long length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UploadFromStreamAsync(class System.IO.Stream source, int64 length, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.UploadFromStreamAsync(System.IO.Stream,System.Int64,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadFromStreamAsync (source As Stream, length As Long, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member UploadFromStreamAsync : System.IO.Stream * int64 * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.UploadFromStreamAsync : System.IO.Stream * int64 * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.UploadFromStreamAsync (source, length, accessCondition, options, operationContext, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Storage.Blob.ICloudBlob.UploadFromStreamAsync(System.IO.Stream,System.Int64,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
        <Parameter Name="length" Type="System.Int64" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:System.IO.Stream" /> object providing the blob content.</param>
        <param name="length">The number of bytes to write from the source stream at its current position.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to upload a stream to an append blob. If the blob already exists, it will be overwritten. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromStreamAsync(System.IO.Stream,System.Int64,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.Threading.CancellationToken)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFromStreamAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UploadFromStreamAsync (System.IO.Stream source, long length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; progressHandler, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UploadFromStreamAsync(class System.IO.Stream source, int64 length, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, class System.IProgress`1&lt;class Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; progressHandler, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.UploadFromStreamAsync(System.IO.Stream,System.Int64,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.IProgress{Microsoft.Azure.Storage.Core.Util.StorageProgress},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadFromStreamAsync (source As Stream, length As Long, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, progressHandler As IProgress(Of StorageProgress), cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member UploadFromStreamAsync : System.IO.Stream * int64 * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.UploadFromStreamAsync : System.IO.Stream * int64 * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.UploadFromStreamAsync (source, length, accessCondition, options, operationContext, progressHandler, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
        <Parameter Name="length" Type="System.Int64" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="progressHandler" Type="System.IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">A <see cref="T:System.IO.Stream" /> object providing the blob content.</param>
        <param name="length">The number of bytes to write from the source stream at its current position.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="progressHandler"> A <see cref="T:System.IProgress`1" /> object to handle <see cref="T:Microsoft.Azure.Storage.Core.Util.StorageProgress" /> messages.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to upload a stream to an append blob. If the blob already exists, it will be overwritten. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.        
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendFromStreamAsync(System.IO.Stream,System.Int64,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.Threading.CancellationToken)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFromStreamAsyncHelper">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task UploadFromStreamAsyncHelper (System.IO.Stream source, long? length, bool createNew, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; progressHandler, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task UploadFromStreamAsyncHelper(class System.IO.Stream source, valuetype System.Nullable`1&lt;int64&gt; length, bool createNew, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, class System.IProgress`1&lt;class Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; progressHandler, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.UploadFromStreamAsyncHelper(System.IO.Stream,System.Nullable{System.Int64},System.Boolean,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.IProgress{Microsoft.Azure.Storage.Core.Util.StorageProgress},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadFromStreamAsyncHelper (source As Stream, length As Nullable(Of Long), createNew As Boolean, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, progressHandler As IProgress(Of StorageProgress), cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="member this.UploadFromStreamAsyncHelper : System.IO.Stream * Nullable&lt;int64&gt; * bool * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.UploadFromStreamAsyncHelper (source, length, createNew, accessCondition, options, operationContext, progressHandler, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IO.Stream" />
        <Parameter Name="length" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="createNew" Type="System.Boolean" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="progressHandler" Type="System.IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="source">The stream providing the blob content.</param>
        <param name="length">The number of bytes to write from the source stream at its current position.</param>
        <param name="createNew">
          <c>true</c> if the append blob is newly created, <c>false</c> otherwise.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the access conditions for the blob. If <c>null</c>, no condition is used.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="progressHandler"> An <see cref="T:System.IProgress`1" /> object to gather progress deltas.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Uploads a stream to an append blob. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents an asynchronous action.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadText">
      <MemberSignature Language="C#" Value="public virtual void UploadText (string content, System.Text.Encoding encoding = default, Microsoft.Azure.Storage.AccessCondition accessCondition = default, Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default, Microsoft.Azure.Storage.OperationContext operationContext = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UploadText(string content, class System.Text.Encoding encoding, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.UploadText(System.String,System.Text.Encoding,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub UploadText (content As String, Optional encoding As Encoding = Nothing, Optional accessCondition As AccessCondition = Nothing, Optional options As BlobRequestOptions = Nothing, Optional operationContext As OperationContext = Nothing)" />
      <MemberSignature Language="F#" Value="abstract member UploadText : string * System.Text.Encoding * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; unit&#xA;override this.UploadText : string * System.Text.Encoding * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; unit" Usage="cloudAppendBlob.UploadText (content, encoding, accessCondition, options, operationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
      </Parameters>
      <Docs>
        <param name="content">A string containing the text to upload.</param>
        <param name="encoding">A <see cref="T:System.Text.Encoding" /> object that indicates the text encoding to use. If <c>null</c>, UTF-8 will be used.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request. If <c>null</c>, default options are applied to the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <summary>
            Uploads a string of text to an append blob. If the blob already exists, it will be overwritten. Recommended only for single-writer scenarios.
            </summary>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendText(System.String,System.Text.Encoding,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UploadTextAsync (string content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UploadTextAsync(string content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.UploadTextAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadTextAsync (content As String) As Task" />
      <MemberSignature Language="F#" Value="abstract member UploadTextAsync : string -&gt; System.Threading.Tasks.Task&#xA;override this.UploadTextAsync : string -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.UploadTextAsync content" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="content">A string containing the text to upload.</param>
        <summary>
            Initiates an asynchronous operation to upload a string of text to an append blob. If the blob already exists, it will be overwritten. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendTextAsync(System.String)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UploadTextAsync (string content, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UploadTextAsync(string content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.UploadTextAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadTextAsync (content As String, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member UploadTextAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.UploadTextAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.UploadTextAsync (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content">A string containing the text to upload.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to upload a string of text to an append blob. If the blob already exists, it will be overwritten. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendTextAsync(System.String,System.Threading.CancellationToken)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UploadTextAsync (string content, System.Text.Encoding encoding, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UploadTextAsync(string content, class System.Text.Encoding encoding, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.UploadTextAsync(System.String,System.Text.Encoding,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadTextAsync (content As String, encoding As Encoding, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext) As Task" />
      <MemberSignature Language="F#" Value="abstract member UploadTextAsync : string * System.Text.Encoding * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; System.Threading.Tasks.Task&#xA;override this.UploadTextAsync : string * System.Text.Encoding * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.UploadTextAsync (content, encoding, accessCondition, options, operationContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
      </Parameters>
      <Docs>
        <param name="content">A string containing the text to upload.</param>
        <param name="encoding">A <see cref="T:System.Text.Encoding" /> object that indicates the text encoding to use. If <c>null</c>, UTF-8 will be used.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <summary>
            Initiates an asynchronous operation to upload a string of text to an append blob. If the blob already exists, it will be overwritten. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendTextAsync(System.String,System.Text.Encoding,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UploadTextAsync (string content, System.Text.Encoding encoding, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UploadTextAsync(string content, class System.Text.Encoding encoding, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.UploadTextAsync(System.String,System.Text.Encoding,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadTextAsync (content As String, encoding As Encoding, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member UploadTextAsync : string * System.Text.Encoding * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.UploadTextAsync : string * System.Text.Encoding * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.UploadTextAsync (content, encoding, accessCondition, options, operationContext, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content">A string containing the text to upload.</param>
        <param name="encoding">A <see cref="T:System.Text.Encoding" /> object that indicates the text encoding to use. If <c>null</c>, UTF-8 will be used.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to upload a string of text to an append blob. If the blob already exists, it will be overwritten. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendTextAsync(System.String,System.Text.Encoding,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.Threading.CancellationToken)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UploadTextAsync (string content, System.Text.Encoding encoding, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; progressHandler, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UploadTextAsync(string content, class System.Text.Encoding encoding, class Microsoft.Azure.Storage.AccessCondition accessCondition, class Microsoft.Azure.Storage.Blob.BlobRequestOptions options, class Microsoft.Azure.Storage.OperationContext operationContext, class System.IProgress`1&lt;class Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; progressHandler, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.UploadTextAsync(System.String,System.Text.Encoding,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.IProgress{Microsoft.Azure.Storage.Core.Util.StorageProgress},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadTextAsync (content As String, encoding As Encoding, accessCondition As AccessCondition, options As BlobRequestOptions, operationContext As OperationContext, progressHandler As IProgress(Of StorageProgress), cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member UploadTextAsync : string * System.Text.Encoding * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.UploadTextAsync : string * System.Text.Encoding * Microsoft.Azure.Storage.AccessCondition * Microsoft.Azure.Storage.Blob.BlobRequestOptions * Microsoft.Azure.Storage.OperationContext * IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="cloudAppendBlob.UploadTextAsync (content, encoding, accessCondition, options, operationContext, progressHandler, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Storage.Blob</AssemblyName>
        <AssemblyVersion>11.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Microsoft.Azure.Storage.DoesServiceRequest]</AttributeName>
          <AttributeName Language="F#">[&lt;Microsoft.Azure.Storage.DoesServiceRequest&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
        <Parameter Name="accessCondition" Type="Microsoft.Azure.Storage.AccessCondition" />
        <Parameter Name="options" Type="Microsoft.Azure.Storage.Blob.BlobRequestOptions" />
        <Parameter Name="operationContext" Type="Microsoft.Azure.Storage.OperationContext" />
        <Parameter Name="progressHandler" Type="System.IProgress&lt;Microsoft.Azure.Storage.Core.Util.StorageProgress&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content">A string containing the text to upload.</param>
        <param name="encoding">A <see cref="T:System.Text.Encoding" /> object that indicates the text encoding to use. If <c>null</c>, UTF-8 will be used.</param>
        <param name="accessCondition">An <see cref="T:Microsoft.Azure.Storage.AccessCondition" /> object that represents the condition that must be met in order for the request to proceed.</param>
        <param name="options">A <see cref="T:Microsoft.Azure.Storage.Blob.BlobRequestOptions" /> object that specifies additional options for the request.</param>
        <param name="operationContext">An <see cref="T:Microsoft.Azure.Storage.OperationContext" /> object that represents the context for the current operation.</param>
        <param name="progressHandler"> A <see cref="T:System.IProgress`1" /> object to handle <see cref="T:Microsoft.Azure.Storage.Core.Util.StorageProgress" /> messages.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a task to complete.</param>
        <summary>
            Initiates an asynchronous operation to upload a string of text to an append blob. If the blob already exists, it will be overwritten. Recommended only for single-writer scenarios.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.</returns>
        <remarks>
            Use this method only in single-writer scenarios. Internally, this method uses the append-offset conditional header to avoid duplicate blocks, which may cause problems in multiple-writer scenarios.
            If you have a single-writer scenario, see <see cref="P:Microsoft.Azure.Storage.Blob.BlobRequestOptions.AbsorbConditionalErrorsOnRetry" /> to determine whether setting this flag to <c>true</c> is acceptable for your scenario.
            To append data to an append blob that already exists, see <see cref="M:Microsoft.Azure.Storage.Blob.CloudAppendBlob.AppendTextAsync(System.String,System.Text.Encoding,Microsoft.Azure.Storage.AccessCondition,Microsoft.Azure.Storage.Blob.BlobRequestOptions,Microsoft.Azure.Storage.OperationContext,System.Threading.CancellationToken)" />.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
