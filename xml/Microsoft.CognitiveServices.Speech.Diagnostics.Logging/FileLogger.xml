<Type Name="FileLogger" FullName="Microsoft.CognitiveServices.Speech.Diagnostics.Logging.FileLogger">
  <TypeSignature Language="C#" Value="public static class FileLogger" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit FileLogger extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CognitiveServices.Speech.Diagnostics.Logging.FileLogger" />
  <TypeSignature Language="VB.NET" Value="Public Class FileLogger" />
  <TypeSignature Language="F#" Value="type FileLogger = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
    <AssemblyVersion>1.20.0.28</AssemblyVersion>
    <AssemblyVersion>1.21.0.28</AssemblyVersion>
    <AssemblyVersion>1.22.0.28</AssemblyVersion>
    <AssemblyVersion>1.23.0.28</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A static class to control file-based SDK logging.
            Turning on logging while running your Speech SDK scenario provides
            detailed information from the SDK's core native components. If you
            report an issue to Microsoft, you may be asked to provide logs to help
            Microsoft diagnose the issue. Your application should not take dependency
            on particular log strings, as they may change from one SDK release to another
            without notice.
            FileLogger is the simplest logging solution and suitable for diagnosing
            most on-device issues when running Speech SDK.
            Added in version 1.20.0
            </summary>
    <remarks>File logging is a process wide construct. That means that if (for example)
            you have multiple speech recognizer objects running in parallel, there will be one
            log file containing interleaved logs lines from all recognizers. You cannot get a
            separate log file for each recognizer.</remarks>
  </Docs>
  <Members>
    <Member MemberName="SetFilters">
      <MemberSignature Language="C#" Value="public static void SetFilters (params string[] filters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetFilters(string[] filters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.Diagnostics.Logging.FileLogger.SetFilters(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetFilters (ParamArray filters As String())" />
      <MemberSignature Language="F#" Value="static member SetFilters : string[] -&gt; unit" Usage="Microsoft.CognitiveServices.Speech.Diagnostics.Logging.FileLogger.SetFilters filters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>1.20.0.28</AssemblyVersion>
        <AssemblyVersion>1.21.0.28</AssemblyVersion>
        <AssemblyVersion>1.22.0.28</AssemblyVersion>
        <AssemblyVersion>1.23.0.28</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filters" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="filters">Filters to use, or an empty list to remove previously set filters.</param>
        <summary>
            Sets or clears the filters that apply to file logging.
            Once filters are set, the event will be invoked only if the log string
            contains at least one of the strings specified by the filters. The match is case sensitive.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLevel">
      <MemberSignature Language="C#" Value="public static void SetLevel (Microsoft.CognitiveServices.Speech.Diagnostics.Logging.Level level);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetLevel(valuetype Microsoft.CognitiveServices.Speech.Diagnostics.Logging.Level level) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.Diagnostics.Logging.FileLogger.SetLevel(Microsoft.CognitiveServices.Speech.Diagnostics.Logging.Level)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetLevel (level As Level)" />
      <MemberSignature Language="F#" Value="static member SetLevel : Microsoft.CognitiveServices.Speech.Diagnostics.Logging.Level -&gt; unit" Usage="Microsoft.CognitiveServices.Speech.Diagnostics.Logging.FileLogger.SetLevel level" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>1.21.0.28</AssemblyVersion>
        <AssemblyVersion>1.22.0.28</AssemblyVersion>
        <AssemblyVersion>1.23.0.28</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="level" Type="Microsoft.CognitiveServices.Speech.Diagnostics.Logging.Level" />
      </Parameters>
      <Docs>
        <param name="level">Maximum level of detail to be captured by the logger.</param>
        <summary>
            Sets the level of the messages to be captured by the logger
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public static void Start (string filePath, bool append = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Start(string filePath, bool append) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.Diagnostics.Logging.FileLogger.Start(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Start (filePath As String, Optional append As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member Start : string * bool -&gt; unit" Usage="Microsoft.CognitiveServices.Speech.Diagnostics.Logging.FileLogger.Start (filePath, append)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>1.20.0.28</AssemblyVersion>
        <AssemblyVersion>1.21.0.28</AssemblyVersion>
        <AssemblyVersion>1.22.0.28</AssemblyVersion>
        <AssemblyVersion>1.23.0.28</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filePath" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="filePath">Path to a log file on local disk</param>
        <param name="append">Optional. If true, appends to existing log file. If false, creates a new log file</param>
        <summary>
            Starts logging to a file.
            </summary>
        <remarks>Note that each write operation to the file is immediately followed by a flush to disk.
            For typical usage (e.g. one Speech Recognizer and a Solid State Drive (SSD)) this should not
            cause performace issues. You may however want to avoid file logging when running many Speech
            SDK recognizers or other SDK objects simultaneously. Use MemoryLogger or EventLogger instead.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public static void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.Diagnostics.Logging.FileLogger.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Stop ()" />
      <MemberSignature Language="F#" Value="static member Stop : unit -&gt; unit" Usage="Microsoft.CognitiveServices.Speech.Diagnostics.Logging.FileLogger.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>1.20.0.28</AssemblyVersion>
        <AssemblyVersion>1.21.0.28</AssemblyVersion>
        <AssemblyVersion>1.22.0.28</AssemblyVersion>
        <AssemblyVersion>1.23.0.28</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Stops logging to a file.
            </summary>
        <remarks>This call is optional. If logging as been started,
            the log file will be written when the process exists normally.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
