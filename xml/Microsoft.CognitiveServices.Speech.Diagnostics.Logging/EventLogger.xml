<Type Name="EventLogger" FullName="Microsoft.CognitiveServices.Speech.Diagnostics.Logging.EventLogger">
  <TypeSignature Language="C#" Value="public static class EventLogger" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EventLogger extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CognitiveServices.Speech.Diagnostics.Logging.EventLogger" />
  <TypeSignature Language="VB.NET" Value="Public Class EventLogger" />
  <TypeSignature Language="F#" Value="type EventLogger = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
    <AssemblyVersion>1.20.0.28</AssemblyVersion>
    <AssemblyVersion>1.21.0.28</AssemblyVersion>
    <AssemblyVersion>1.22.0.28</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A static class to control event-based SDK logging.
            Turning on logging while running your Speech SDK scenario provides
            detailed information from the SDK's core native components. If you
            report an issue to Microsoft, you may be asked to provide logs to help
            Microsoft diagnose the issue. Your application should not take dependency
            on particular log strings, as they may change from one SDK release to another
            without notice.
            Use EventLogger when you want to get access to new log strings as soon
            as they are available, and you need to further process them. For example,
            integrating Speech SDK logs with your existing logging collection system.
            Added in version 1.20.0
            </summary>
    <remarks>Event logging is a process wide construct. That means that if (for example)
            you have multiple speech recognizer objects running in parallel, you can only register
            one callback function to receive interleaved logs from all recognizers. You cannot register
            a separate callback for each recognizer.</remarks>
  </Docs>
  <Members>
    <Member MemberName="OnMessage">
      <MemberSignature Language="C#" Value="public static event EventHandler&lt;string&gt; OnMessage;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;string&gt; OnMessage" />
      <MemberSignature Language="DocId" Value="E:Microsoft.CognitiveServices.Speech.Diagnostics.Logging.EventLogger.OnMessage" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event OnMessage As EventHandler(Of String) " />
      <MemberSignature Language="F#" Value="member this.OnMessage : EventHandler&lt;string&gt; " Usage="member this.OnMessage : System.EventHandler&lt;System.string&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>1.20.0.28</AssemblyVersion>
        <AssemblyVersion>1.21.0.28</AssemblyVersion>
        <AssemblyVersion>1.22.0.28</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Event that gets invoked for each new log messages.
            </summary>
        <remarks>You can only subscribe once to the event. The event thread is a working thread of the SDK,
            so the log string should be copied somewhere for further processing by another thread, and return immediately
            from the method. No heavy processing or network calls should be done in method subscribed to this event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFilters">
      <MemberSignature Language="C#" Value="public static void SetFilters (params string[] filters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetFilters(string[] filters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.Diagnostics.Logging.EventLogger.SetFilters(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetFilters (ParamArray filters As String())" />
      <MemberSignature Language="F#" Value="static member SetFilters : string[] -&gt; unit" Usage="Microsoft.CognitiveServices.Speech.Diagnostics.Logging.EventLogger.SetFilters filters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>1.20.0.28</AssemblyVersion>
        <AssemblyVersion>1.21.0.28</AssemblyVersion>
        <AssemblyVersion>1.22.0.28</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filters" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="filters">Filters to use, or an empty list to clear previously set filters</param>
        <summary>
            Sets or clears filters for log messages.
            Once filters are set, the event will be invoked only if the log message
            contains at least one of the strings specified by the filters. The match is case sensitive.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLevel">
      <MemberSignature Language="C#" Value="public static void SetLevel (Microsoft.CognitiveServices.Speech.Diagnostics.Logging.Level level);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetLevel(valuetype Microsoft.CognitiveServices.Speech.Diagnostics.Logging.Level level) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.Diagnostics.Logging.EventLogger.SetLevel(Microsoft.CognitiveServices.Speech.Diagnostics.Logging.Level)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetLevel (level As Level)" />
      <MemberSignature Language="F#" Value="static member SetLevel : Microsoft.CognitiveServices.Speech.Diagnostics.Logging.Level -&gt; unit" Usage="Microsoft.CognitiveServices.Speech.Diagnostics.Logging.EventLogger.SetLevel level" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>1.21.0.28</AssemblyVersion>
        <AssemblyVersion>1.22.0.28</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="level" Type="Microsoft.CognitiveServices.Speech.Diagnostics.Logging.Level" />
      </Parameters>
      <Docs>
        <param name="level">Maximum level of detail to be capture by the logger.</param>
        <summary>
            Sets the level of the messages to be captured by the logger
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
