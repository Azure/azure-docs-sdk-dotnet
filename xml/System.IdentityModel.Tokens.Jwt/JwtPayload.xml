<Type Name="JwtPayload" FullName="System.IdentityModel.Tokens.Jwt.JwtPayload">
  <TypeSignature Language="C#" Value="public class JwtPayload : System.Collections.Generic.Dictionary&lt;string,object&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit JwtPayload extends System.Collections.Generic.Dictionary`2&lt;string, object&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Tokens.Jwt.JwtPayload" />
  <TypeSignature Language="VB.NET" Value="Public Class JwtPayload&#xA;Inherits Dictionary(Of String, Object)" />
  <TypeSignature Language="F#" Value="type JwtPayload = class&#xA;    inherit Dictionary&lt;string, obj&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
    <AssemblyVersion>5.2.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="!0">System.String</BaseTypeArgument>
      <BaseTypeArgument TypeParamName="!1">System.Object</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Initializes a new instance of <see cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload" /> which contains JSON objects representing the claims contained in the JWT. Each claim is a JSON object of the form { Name, Value }.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JwtPayload ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.Jwt.JwtPayload.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload" /> class with no claims. Default string comparer <see cref="P:System.StringComparer.Ordinal" />. 
            Creates a empty <see cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload" /></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JwtPayload (System.Collections.Generic.IEnumerable&lt;System.Security.Claims.Claim&gt; claims);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class System.Security.Claims.Claim&gt; claims) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.Jwt.JwtPayload.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (claims As IEnumerable(Of Claim))" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Tokens.Jwt.JwtPayload : seq&lt;System.Security.Claims.Claim&gt; -&gt; System.IdentityModel.Tokens.Jwt.JwtPayload" Usage="new System.IdentityModel.Tokens.Jwt.JwtPayload claims" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="claims" Type="System.Collections.Generic.IEnumerable&lt;System.Security.Claims.Claim&gt;" />
      </Parameters>
      <Docs>
        <param name="claims">To be added.</param>
        <summary>
            Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload" /> class with <see cref="T:System.Collections.Generic.IEnumerable`1" />. Default string comparer <see cref="P:System.StringComparer.Ordinal" />.
            <param name="claims">The claims to add.</param></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JwtPayload (string issuer, string audience, System.Collections.Generic.IEnumerable&lt;System.Security.Claims.Claim&gt; claims, Nullable&lt;DateTime&gt; notBefore, Nullable&lt;DateTime&gt; expires);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string issuer, string audience, class System.Collections.Generic.IEnumerable`1&lt;class System.Security.Claims.Claim&gt; claims, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; notBefore, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; expires) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.Jwt.JwtPayload.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Nullable{System.DateTime},System.Nullable{System.DateTime})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (issuer As String, audience As String, claims As IEnumerable(Of Claim), notBefore As Nullable(Of DateTime), expires As Nullable(Of DateTime))" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Tokens.Jwt.JwtPayload : string * string * seq&lt;System.Security.Claims.Claim&gt; * Nullable&lt;DateTime&gt; * Nullable&lt;DateTime&gt; -&gt; System.IdentityModel.Tokens.Jwt.JwtPayload" Usage="new System.IdentityModel.Tokens.Jwt.JwtPayload (issuer, audience, claims, notBefore, expires)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="issuer" Type="System.String" />
        <Parameter Name="audience" Type="System.String" />
        <Parameter Name="claims" Type="System.Collections.Generic.IEnumerable&lt;System.Security.Claims.Claim&gt;" />
        <Parameter Name="notBefore" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="expires" Type="System.Nullable&lt;System.DateTime&gt;" />
      </Parameters>
      <Docs>
        <param name="issuer">If this value is not null, a { iss, 'issuer' } claim will be added.</param>
        <param name="audience">If this value is not null, a { aud, 'audience' } claim will be added</param>
        <param name="claims">If this value is not null then for each <see cref="T:System.Security.Claims.Claim" /> a { 'Claim.Type', 'Claim.Value' } is added. If duplicate claims are found then a { 'Claim.Type', List&lt;object&gt; } will be created to contain the duplicate values.</param>
        <param name="notBefore">If notbefore.HasValue is 'true' a { nbf, 'value' } claim is added.</param>
        <param name="expires">If expires.HasValue is 'true' a { exp, 'value' } claim is added.</param>
        <summary>
            Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload" /> class with claims added for each parameter specified. Default string comparer <see cref="P:System.StringComparer.Ordinal" />. 
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JwtPayload (string issuer, string audience, System.Collections.Generic.IEnumerable&lt;System.Security.Claims.Claim&gt; claims, Nullable&lt;DateTime&gt; notBefore, Nullable&lt;DateTime&gt; expires, Nullable&lt;DateTime&gt; issuedAt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string issuer, string audience, class System.Collections.Generic.IEnumerable`1&lt;class System.Security.Claims.Claim&gt; claims, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; notBefore, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; expires, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; issuedAt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.Jwt.JwtPayload.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (issuer As String, audience As String, claims As IEnumerable(Of Claim), notBefore As Nullable(Of DateTime), expires As Nullable(Of DateTime), issuedAt As Nullable(Of DateTime))" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Tokens.Jwt.JwtPayload : string * string * seq&lt;System.Security.Claims.Claim&gt; * Nullable&lt;DateTime&gt; * Nullable&lt;DateTime&gt; * Nullable&lt;DateTime&gt; -&gt; System.IdentityModel.Tokens.Jwt.JwtPayload" Usage="new System.IdentityModel.Tokens.Jwt.JwtPayload (issuer, audience, claims, notBefore, expires, issuedAt)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="issuer" Type="System.String" />
        <Parameter Name="audience" Type="System.String" />
        <Parameter Name="claims" Type="System.Collections.Generic.IEnumerable&lt;System.Security.Claims.Claim&gt;" />
        <Parameter Name="notBefore" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="expires" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="issuedAt" Type="System.Nullable&lt;System.DateTime&gt;" />
      </Parameters>
      <Docs>
        <param name="issuer">If this value is not null, a { iss, 'issuer' } claim will be added.</param>
        <param name="audience">If this value is not null, a { aud, 'audience' } claim will be added</param>
        <param name="claims">If this value is not null then for each <see cref="T:System.Security.Claims.Claim" /> a { 'Claim.Type', 'Claim.Value' } is added. If duplicate claims are found then a { 'Claim.Type', List&lt;object&gt; } will be created to contain the duplicate values.</param>
        <param name="notBefore">If notbefore.HasValue is 'true' a { nbf, 'value' } claim is added.</param>
        <param name="expires">If expires.HasValue is 'true' a { exp, 'value' } claim is added.</param>
        <param name="issuedAt">If issuedAt.HasValue is 'true' a { iat, 'value' } claim is added.</param>
        <summary>
            Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload" /> class with claims added for each parameter specified. Default string comparer <see cref="P:System.StringComparer.Ordinal" />. 
            </summary>
        <remarks>Comparison is set to <see cref="P:System.StringComparer.Ordinal" /><para>The 4 parameters: 'issuer', 'audience', 'notBefore', 'expires' take precednece over <see cref="T:System.Security.Claims.Claim" />(s) in 'claims'. The values in 'claims' will be overridden.</para></remarks>
        <exception cref="T:System.ArgumentException">If 'expires' &lt;= 'notbefore'.</exception>
      </Docs>
    </Member>
    <Member MemberName="Acr">
      <MemberSignature Language="C#" Value="public string Acr { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Acr" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.Jwt.JwtPayload.Acr" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Acr As String" />
      <MemberSignature Language="F#" Value="member this.Acr : string" Usage="System.IdentityModel.Tokens.Jwt.JwtPayload.Acr" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the 'value' of the 'acr' claim { acr, 'value' }.
            </summary>
        <value>To be added.</value>
        <remarks>If the 'acr' claim is not found, null is returned.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Actort">
      <MemberSignature Language="C#" Value="public string Actort { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Actort" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.Jwt.JwtPayload.Actort" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Actort As String" />
      <MemberSignature Language="F#" Value="member this.Actort : string" Usage="System.IdentityModel.Tokens.Jwt.JwtPayload.Actort" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the 'value' of the 'actor' claim { actort, 'value' }.
            </summary>
        <value>To be added.</value>
        <remarks>If the 'actor' claim is not found, null is returned.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddClaim">
      <MemberSignature Language="C#" Value="public void AddClaim (System.Security.Claims.Claim claim);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddClaim(class System.Security.Claims.Claim claim) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.Jwt.JwtPayload.AddClaim(System.Security.Claims.Claim)" />
      <MemberSignature Language="F#" Value="member this.AddClaim : System.Security.Claims.Claim -&gt; unit" Usage="jwtPayload.AddClaim claim" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="claim" Type="System.Security.Claims.Claim" />
      </Parameters>
      <Docs>
        <param name="claim">{ 'Claim.Type', 'Claim.Value' } is added. If a JSON object is found with the name == <see cref="P:System.Security.Claims.Claim.Type" /> then a { 'Claim.Type', List&lt;object&gt; } will be created to contain the duplicate values.</param>
        <summary>
            Adds a JSON object representing the <see cref="T:System.Security.Claims.Claim" /> to the <see cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload" /></summary>
        <remarks>See <see cref="M:System.IdentityModel.Tokens.Jwt.JwtPayload.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})" /> For details on how <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.OutboundClaimTypeMap" /> is applied.</remarks>
        <exception cref="T:System.ArgumentNullException">'claim' is null.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddClaims">
      <MemberSignature Language="C#" Value="public void AddClaims (System.Collections.Generic.IEnumerable&lt;System.Security.Claims.Claim&gt; claims);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddClaims(class System.Collections.Generic.IEnumerable`1&lt;class System.Security.Claims.Claim&gt; claims) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.Jwt.JwtPayload.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddClaims (claims As IEnumerable(Of Claim))" />
      <MemberSignature Language="F#" Value="member this.AddClaims : seq&lt;System.Security.Claims.Claim&gt; -&gt; unit" Usage="jwtPayload.AddClaims claims" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="claims" Type="System.Collections.Generic.IEnumerable&lt;System.Security.Claims.Claim&gt;" />
      </Parameters>
      <Docs>
        <param name="claims">For each <see cref="T:System.Security.Claims.Claim" /> a JSON pair { 'Claim.Type', 'Claim.Value' } is added. If duplicate claims are found then a { 'Claim.Type', List&lt;object&gt; } will be created to contain the duplicate values.</param>
        <summary>
            Adds a number of <see cref="T:System.Security.Claims.Claim" /> to the <see cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload" /> as JSON { name, value } pairs.
            </summary>
        <remarks>
          <para>Any <see cref="T:System.Security.Claims.Claim" /> in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> that is null, will be ignored.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">'claims' is null.</exception>
      </Docs>
    </Member>
    <Member MemberName="Amr">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;string&gt; Amr { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;string&gt; Amr" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.Jwt.JwtPayload.Amr" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Amr As IList(Of String)" />
      <MemberSignature Language="F#" Value="member this.Amr : System.Collections.Generic.IList&lt;string&gt;" Usage="System.IdentityModel.Tokens.Jwt.JwtPayload.Amr" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the 'value' of the 'amr' claim { amr, 'value' } as list of strings.
            </summary>
        <value>To be added.</value>
        <remarks>If the 'amr' claim is not found, an empty enumerable is returned.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Aud">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;string&gt; Aud { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;string&gt; Aud" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.Jwt.JwtPayload.Aud" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Aud As IList(Of String)" />
      <MemberSignature Language="F#" Value="member this.Aud : System.Collections.Generic.IList&lt;string&gt;" Usage="System.IdentityModel.Tokens.Jwt.JwtPayload.Aud" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the 'value' of the 'audience' claim { aud, 'value' } as a list of strings.
            </summary>
        <value>To be added.</value>
        <remarks>If the 'audience' claim is not found, an empty enumerable is returned.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AuthTime">
      <MemberSignature Language="C#" Value="public Nullable&lt;int&gt; AuthTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int32&gt; AuthTime" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.Jwt.JwtPayload.AuthTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AuthTime As Nullable(Of Integer)" />
      <MemberSignature Language="F#" Value="member this.AuthTime : Nullable&lt;int&gt;" Usage="System.IdentityModel.Tokens.Jwt.JwtPayload.AuthTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the 'value' of the 'auth_time' claim { auth_time, 'value' }.
            </summary>
        <value>To be added.</value>
        <remarks>If the 'auth_time' claim is not found OR could not be converted to <see cref="T:System.Int32" />, null is returned.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Azp">
      <MemberSignature Language="C#" Value="public string Azp { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Azp" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.Jwt.JwtPayload.Azp" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Azp As String" />
      <MemberSignature Language="F#" Value="member this.Azp : string" Usage="System.IdentityModel.Tokens.Jwt.JwtPayload.Azp" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the 'value' of the 'azp' claim { azp, 'value' }.
            </summary>
        <value>To be added.</value>
        <remarks>If the 'azp' claim is not found, null is returned.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Base64UrlDeserialize">
      <MemberSignature Language="C#" Value="public static System.IdentityModel.Tokens.Jwt.JwtPayload Base64UrlDeserialize (string base64UrlEncodedJsonString);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IdentityModel.Tokens.Jwt.JwtPayload Base64UrlDeserialize(string base64UrlEncodedJsonString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.Jwt.JwtPayload.Base64UrlDeserialize(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Base64UrlDeserialize (base64UrlEncodedJsonString As String) As JwtPayload" />
      <MemberSignature Language="F#" Value="static member Base64UrlDeserialize : string -&gt; System.IdentityModel.Tokens.Jwt.JwtPayload" Usage="System.IdentityModel.Tokens.Jwt.JwtPayload.Base64UrlDeserialize base64UrlEncodedJsonString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.Jwt.JwtPayload</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="base64UrlEncodedJsonString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="base64UrlEncodedJsonString">base64url encoded JSON to deserialize.</param>
        <summary>
            Deserializes Base64UrlEncoded JSON into a <see cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload" /> instance.
            </summary>
        <returns>An instance of <see cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload" />.</returns>
        <remarks>Use <see cref="P:System.IdentityModel.Tokens.Jwt.JsonExtensions.Deserializer" /> to customize JSON serialization.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Base64UrlEncode">
      <MemberSignature Language="C#" Value="public virtual string Base64UrlEncode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Base64UrlEncode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.Jwt.JwtPayload.Base64UrlEncode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Base64UrlEncode () As String" />
      <MemberSignature Language="F#" Value="abstract member Base64UrlEncode : unit -&gt; string&#xA;override this.Base64UrlEncode : unit -&gt; string" Usage="jwtPayload.Base64UrlEncode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Encodes this instance as Base64UrlEncoded JSON.
            </summary>
        <returns>Base64UrlEncoded JSON.</returns>
        <remarks>Use <see cref="P:System.IdentityModel.Tokens.Jwt.JsonExtensions.Serializer" /> to customize JSON serialization.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CHash">
      <MemberSignature Language="C#" Value="public string CHash { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CHash" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.Jwt.JwtPayload.CHash" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CHash As String" />
      <MemberSignature Language="F#" Value="member this.CHash : string" Usage="System.IdentityModel.Tokens.Jwt.JwtPayload.CHash" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets 'value' of the 'c_hash' claim { c_hash, 'value' }.
            </summary>
        <value>To be added.</value>
        <remarks>If the 'c_hash' claim is not found, null is returned.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Claims">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;System.Security.Claims.Claim&gt; Claims { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Security.Claims.Claim&gt; Claims" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.Jwt.JwtPayload.Claims" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Claims As IEnumerable(Of Claim)" />
      <MemberSignature Language="F#" Value="member this.Claims : seq&lt;System.Security.Claims.Claim&gt;" Usage="System.IdentityModel.Tokens.Jwt.JwtPayload.Claims" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Security.Claims.Claim&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1" /><see cref="T:System.Security.Claims.Claim" /> for each JSON { name, value }.
            </summary>
        <value>To be added.</value>
        <remarks>Each <see cref="T:System.Security.Claims.Claim" />(s) returned will have the <see cref="P:System.Security.Claims.Claim.Type" /> translated according to the mapping found in <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.InboundClaimTypeMap" />. Adding and removing to <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.InboundClaimTypeMap" /> will affect the value of the <see cref="P:System.Security.Claims.Claim.Type" />.
            <para><see cref="P:System.Security.Claims.Claim.Issuer" /> and <see cref="P:System.Security.Claims.Claim.OriginalIssuer" /> will be set to the value of <see cref="P:System.IdentityModel.Tokens.Jwt.JwtPayload.Iss" /> ( <see cref="F:System.String.Empty" /> if null).</para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static System.IdentityModel.Tokens.Jwt.JwtPayload Deserialize (string jsonString);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IdentityModel.Tokens.Jwt.JwtPayload Deserialize(string jsonString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.Jwt.JwtPayload.Deserialize(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (jsonString As String) As JwtPayload" />
      <MemberSignature Language="F#" Value="static member Deserialize : string -&gt; System.IdentityModel.Tokens.Jwt.JwtPayload" Usage="System.IdentityModel.Tokens.Jwt.JwtPayload.Deserialize jsonString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.Jwt.JwtPayload</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jsonString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="jsonString">The JSON to deserialize.</param>
        <summary>
            Deserialzes JSON into a <see cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload" /> instance.
            </summary>
        <returns>An instance of <see cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload" />.</returns>
        <remarks>Use <see cref="P:System.IdentityModel.Tokens.Jwt.JsonExtensions.Deserializer" /> to customize JSON serialization.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exp">
      <MemberSignature Language="C#" Value="public Nullable&lt;int&gt; Exp { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int32&gt; Exp" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.Jwt.JwtPayload.Exp" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exp As Nullable(Of Integer)" />
      <MemberSignature Language="F#" Value="member this.Exp : Nullable&lt;int&gt;" Usage="System.IdentityModel.Tokens.Jwt.JwtPayload.Exp" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the 'value' of the 'expiration' claim { exp, 'value' }.
            </summary>
        <value>To be added.</value>
        <remarks>If the 'expiration' claim is not found OR could not be converted to <see cref="T:System.Int32" />, null is returned.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Iat">
      <MemberSignature Language="C#" Value="public Nullable&lt;int&gt; Iat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int32&gt; Iat" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.Jwt.JwtPayload.Iat" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Iat As Nullable(Of Integer)" />
      <MemberSignature Language="F#" Value="member this.Iat : Nullable&lt;int&gt;" Usage="System.IdentityModel.Tokens.Jwt.JwtPayload.Iat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the 'value' of the 'Issued At' claim { iat, 'value' }.
            </summary>
        <value>To be added.</value>
        <remarks>If the 'Issued At' claim is not found OR cannot be converted to <see cref="T:System.Int32" /> null is returned.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Iss">
      <MemberSignature Language="C#" Value="public string Iss { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Iss" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.Jwt.JwtPayload.Iss" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Iss As String" />
      <MemberSignature Language="F#" Value="member this.Iss : string" Usage="System.IdentityModel.Tokens.Jwt.JwtPayload.Iss" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the 'value' of the 'issuer' claim { iss, 'value' }.
            </summary>
        <value>To be added.</value>
        <remarks>If the 'issuer' claim is not found, null is returned.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Jti">
      <MemberSignature Language="C#" Value="public string Jti { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Jti" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.Jwt.JwtPayload.Jti" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Jti As String" />
      <MemberSignature Language="F#" Value="member this.Jti : string" Usage="System.IdentityModel.Tokens.Jwt.JwtPayload.Jti" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the 'value' of the 'JWT ID' claim { jti, 'value' }.
            </summary>
        <value>To be added.</value>
        <remarks>If the 'JWT ID' claim is not found, null is returned.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Nbf">
      <MemberSignature Language="C#" Value="public Nullable&lt;int&gt; Nbf { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int32&gt; Nbf" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.Jwt.JwtPayload.Nbf" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Nbf As Nullable(Of Integer)" />
      <MemberSignature Language="F#" Value="member this.Nbf : Nullable&lt;int&gt;" Usage="System.IdentityModel.Tokens.Jwt.JwtPayload.Nbf" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the 'value' of the 'expiration' claim { nbf, 'value' }.
            </summary>
        <value>To be added.</value>
        <remarks>If the 'notbefore' claim is not found OR could not be converted to <see cref="T:System.Int32" />, null is returned.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Nonce">
      <MemberSignature Language="C#" Value="public string Nonce { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Nonce" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.Jwt.JwtPayload.Nonce" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Nonce As String" />
      <MemberSignature Language="F#" Value="member this.Nonce : string" Usage="System.IdentityModel.Tokens.Jwt.JwtPayload.Nonce" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the 'value' of the 'nonce' claim { nonce, 'value' }.
            </summary>
        <value>To be added.</value>
        <remarks>If the 'nonce' claim is not found, null is returned.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeToJson">
      <MemberSignature Language="C#" Value="public virtual string SerializeToJson ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string SerializeToJson() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.Jwt.JwtPayload.SerializeToJson" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SerializeToJson () As String" />
      <MemberSignature Language="F#" Value="abstract member SerializeToJson : unit -&gt; string&#xA;override this.SerializeToJson : unit -&gt; string" Usage="jwtPayload.SerializeToJson " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Serializes this instance to JSON.
            </summary>
        <returns>This instance as JSON.</returns>
        <remarks>Use <see cref="P:System.IdentityModel.Tokens.Jwt.JsonExtensions.Serializer" /> to customize JSON serialization.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub">
      <MemberSignature Language="C#" Value="public string Sub { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Sub" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.Jwt.JwtPayload.Sub" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Sub As String" />
      <MemberSignature Language="F#" Value="member this.Sub : string" Usage="System.IdentityModel.Tokens.Jwt.JwtPayload.Sub" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the 'value' of the 'subject' claim { sub, 'value' }.
            </summary>
        <value>To be added.</value>
        <remarks>If the 'subject' claim is not found, null is returned.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidFrom">
      <MemberSignature Language="C#" Value="public DateTime ValidFrom { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime ValidFrom" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.Jwt.JwtPayload.ValidFrom" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValidFrom As DateTime" />
      <MemberSignature Language="F#" Value="member this.ValidFrom : DateTime" Usage="System.IdentityModel.Tokens.Jwt.JwtPayload.ValidFrom" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the 'value' of the 'notbefore' claim { nbf, 'value' } converted to a <see cref="T:System.DateTime" /> assuming 'value' is seconds since UnixEpoch (UTC 1970-01-01T0:0:0Z).
            </summary>
        <value>To be added.</value>
        <remarks>If the 'notbefore' claim is not found, then <see cref="F:System.DateTime.MinValue" /> is returned. Time is returned as UTC.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidTo">
      <MemberSignature Language="C#" Value="public DateTime ValidTo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime ValidTo" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.Jwt.JwtPayload.ValidTo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValidTo As DateTime" />
      <MemberSignature Language="F#" Value="member this.ValidTo : DateTime" Usage="System.IdentityModel.Tokens.Jwt.JwtPayload.ValidTo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the 'value' of the 'expiration' claim { exp, 'value' } converted to a <see cref="T:System.DateTime" /> assuming 'value' is seconds since UnixEpoch (UTC 1970-01-01T0:0:0Z).
            </summary>
        <value>To be added.</value>
        <remarks>If the 'expiration' claim is not found, then <see cref="F:System.DateTime.MinValue" /> is returned.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>