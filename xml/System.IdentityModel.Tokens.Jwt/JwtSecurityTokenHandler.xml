<Type Name="JwtSecurityTokenHandler" FullName="System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler">
  <TypeSignature Language="C#" Value="public class JwtSecurityTokenHandler : Microsoft.IdentityModel.Tokens.SecurityTokenHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi JwtSecurityTokenHandler extends Microsoft.IdentityModel.Tokens.SecurityTokenHandler" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler" />
  <TypeSignature Language="VB.NET" Value="Public Class JwtSecurityTokenHandler&#xA;Inherits SecurityTokenHandler" />
  <TypeSignature Language="F#" Value="type JwtSecurityTokenHandler = class&#xA;    inherit SecurityTokenHandler" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
    <AssemblyVersion>5.2.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.IdentityModel.Tokens.SecurityTokenHandler</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A <see cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenHandler" /> designed for creating and validating Json Web Tokens. See: http://tools.ietf.org/html/rfc7519 and http://www.rfc-editor.org/info/rfc7515
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JwtSecurityTokenHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanReadToken">
      <MemberSignature Language="C#" Value="public override bool CanReadToken (string token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanReadToken(string token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CanReadToken(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanReadToken (token As String) As Boolean" />
      <MemberSignature Language="F#" Value="override this.CanReadToken : string -&gt; bool" Usage="jwtSecurityTokenHandler.CanReadToken token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="token">String that should represent a valid JWT.</param>
        <summary>
            Determines if the string is a well formed Json Web Token (JWT).
            <para>see: http://tools.ietf.org/html/rfc7519 </para></summary>
        <returns>
          <para>'false' if the token is null or whitespace.</para>
          <para>'false' if token.Length is greater than <see cref="P:Microsoft.IdentityModel.Tokens.SecurityTokenHandler.MaximumTokenSizeInBytes" />.</para>
          <para>'true' if the token is in JSON compact serialization format.</para>
        </returns>
        <remarks>Uses <see cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)" /> matching one of:
            <para>JWS: @"^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$"</para><para>JWE: (dir): @"^[A-Za-z0-9-_]+\.\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$"</para><para>JWE: (wrappedkey): @"^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]$"</para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CanValidateToken">
      <MemberSignature Language="C#" Value="public override bool CanValidateToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanValidateToken" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CanValidateToken" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanValidateToken As Boolean" />
      <MemberSignature Language="F#" Value="member this.CanValidateToken : bool" Usage="System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CanValidateToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns a value that indicates if this handler can validate a <see cref="T:Microsoft.IdentityModel.Tokens.SecurityToken" />.
            </summary>
        <value>'true', indicating this instance can validate a <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWriteToken">
      <MemberSignature Language="C#" Value="public override bool CanWriteToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWriteToken" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CanWriteToken" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWriteToken As Boolean" />
      <MemberSignature Language="F#" Value="member this.CanWriteToken : bool" Usage="System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CanWriteToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the value that indicates if this instance can write a <see cref="T:Microsoft.IdentityModel.Tokens.SecurityToken" />.
            </summary>
        <value>'true', indicating this instance can write a <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateActorValue">
      <MemberSignature Language="C#" Value="protected virtual string CreateActorValue (System.Security.Claims.ClaimsIdentity actor);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string CreateActorValue(class System.Security.Claims.ClaimsIdentity actor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateActorValue(System.Security.Claims.ClaimsIdentity)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateActorValue (actor As ClaimsIdentity) As String" />
      <MemberSignature Language="F#" Value="abstract member CreateActorValue : System.Security.Claims.ClaimsIdentity -&gt; string&#xA;override this.CreateActorValue : System.Security.Claims.ClaimsIdentity -&gt; string" Usage="jwtSecurityTokenHandler.CreateActorValue actor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actor" Type="System.Security.Claims.ClaimsIdentity" />
      </Parameters>
      <Docs>
        <param name="actor">
          <see cref="T:System.Security.Claims.ClaimsIdentity" /> as actor.</param>
        <summary>
            Creates the 'value' for the actor claim: { actort, 'value' }
            </summary>
        <returns>
          <see cref="T:System.String" /> representing the actor.</returns>
        <remarks>If <see cref="P:System.Security.Claims.ClaimsIdentity.BootstrapContext" /> is not null:
            <para>  If 'type' is 'string', return as string.</para><para>  if 'type' is 'BootstrapContext' and 'BootstrapContext.SecurityToken' is 'JwtSecurityToken'</para><para>    if 'JwtSecurityToken.RawData' != null, return RawData.</para><para>    else return <see cref="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.WriteToken(Microsoft.IdentityModel.Tokens.SecurityToken)" />.</para><para>  if 'BootstrapContext.Token' != null, return 'Token'.</para><para>default: <see cref="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.WriteToken(Microsoft.IdentityModel.Tokens.SecurityToken)" /> new ( <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" />( actor.Claims ).</para></remarks>
        <exception cref="T:System.ArgumentNullException">'actor' is null.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateClaimsIdentity">
      <MemberSignature Language="C#" Value="protected virtual System.Security.Claims.ClaimsIdentity CreateClaimsIdentity (System.IdentityModel.Tokens.Jwt.JwtSecurityToken jwtToken, string issuer, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Security.Claims.ClaimsIdentity CreateClaimsIdentity(class System.IdentityModel.Tokens.Jwt.JwtSecurityToken jwtToken, string issuer, class Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateClaimsIdentity(System.IdentityModel.Tokens.Jwt.JwtSecurityToken,System.String,Microsoft.IdentityModel.Tokens.TokenValidationParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateClaimsIdentity (jwtToken As JwtSecurityToken, issuer As String, validationParameters As TokenValidationParameters) As ClaimsIdentity" />
      <MemberSignature Language="F#" Value="abstract member CreateClaimsIdentity : System.IdentityModel.Tokens.Jwt.JwtSecurityToken * string * Microsoft.IdentityModel.Tokens.TokenValidationParameters -&gt; System.Security.Claims.ClaimsIdentity&#xA;override this.CreateClaimsIdentity : System.IdentityModel.Tokens.Jwt.JwtSecurityToken * string * Microsoft.IdentityModel.Tokens.TokenValidationParameters -&gt; System.Security.Claims.ClaimsIdentity" Usage="jwtSecurityTokenHandler.CreateClaimsIdentity (jwtToken, issuer, validationParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Claims.ClaimsIdentity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jwtToken" Type="System.IdentityModel.Tokens.Jwt.JwtSecurityToken" />
        <Parameter Name="issuer" Type="System.String" />
        <Parameter Name="validationParameters" Type="Microsoft.IdentityModel.Tokens.TokenValidationParameters" />
      </Parameters>
      <Docs>
        <param name="jwtToken">The <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" /> to use as a <see cref="T:System.Security.Claims.Claim" /> source.</param>
        <param name="issuer">The value to set <see cref="P:System.Security.Claims.Claim.Issuer" /></param>
        <param name="validationParameters"> Contains parameters for validating the token.</param>
        <summary>
            Creates a <see cref="T:System.Security.Claims.ClaimsIdentity" /> from a <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" />.
            </summary>
        <returns>A <see cref="T:System.Security.Claims.ClaimsIdentity" /> containing the <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.Claims" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEncodedJwt">
      <MemberSignature Language="C#" Value="public virtual string CreateEncodedJwt (Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string CreateEncodedJwt(class Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateEncodedJwt(Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateEncodedJwt (tokenDescriptor As SecurityTokenDescriptor) As String" />
      <MemberSignature Language="F#" Value="abstract member CreateEncodedJwt : Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor -&gt; string&#xA;override this.CreateEncodedJwt : Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor -&gt; string" Usage="jwtSecurityTokenHandler.CreateEncodedJwt tokenDescriptor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenDescriptor" Type="Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor" />
      </Parameters>
      <Docs>
        <param name="tokenDescriptor">A <see cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor" /> that contains details of contents of the token.</param>
        <summary>
            Returns a Json Web Token (JWT).
            </summary>
        <returns>To be added.</returns>
        <remarks>A JWS and JWE can be returned.
            <para>If <see cref="P:Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor.EncryptingCredentials" />is provided, then a JWE will be created.</para><para>If <see cref="P:Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor.SigningCredentials" /> is provided then a JWS will be created.</para><para>If both are provided then a JWE with an embedded JWS will be created.</para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEncodedJwt">
      <MemberSignature Language="C#" Value="public virtual string CreateEncodedJwt (string issuer, string audience, System.Security.Claims.ClaimsIdentity subject, Nullable&lt;DateTime&gt; notBefore, Nullable&lt;DateTime&gt; expires, Nullable&lt;DateTime&gt; issuedAt, Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string CreateEncodedJwt(string issuer, string audience, class System.Security.Claims.ClaimsIdentity subject, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; notBefore, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; expires, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; issuedAt, class Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateEncodedJwt(System.String,System.String,System.Security.Claims.ClaimsIdentity,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},Microsoft.IdentityModel.Tokens.SigningCredentials)" />
      <MemberSignature Language="F#" Value="abstract member CreateEncodedJwt : string * string * System.Security.Claims.ClaimsIdentity * Nullable&lt;DateTime&gt; * Nullable&lt;DateTime&gt; * Nullable&lt;DateTime&gt; * Microsoft.IdentityModel.Tokens.SigningCredentials -&gt; string&#xA;override this.CreateEncodedJwt : string * string * System.Security.Claims.ClaimsIdentity * Nullable&lt;DateTime&gt; * Nullable&lt;DateTime&gt; * Nullable&lt;DateTime&gt; * Microsoft.IdentityModel.Tokens.SigningCredentials -&gt; string" Usage="jwtSecurityTokenHandler.CreateEncodedJwt (issuer, audience, subject, notBefore, expires, issuedAt, signingCredentials)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="issuer" Type="System.String" />
        <Parameter Name="audience" Type="System.String" />
        <Parameter Name="subject" Type="System.Security.Claims.ClaimsIdentity" />
        <Parameter Name="notBefore" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="expires" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="issuedAt" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="signingCredentials" Type="Microsoft.IdentityModel.Tokens.SigningCredentials" />
      </Parameters>
      <Docs>
        <param name="issuer">The issuer of the token.</param>
        <param name="audience">The audience for this token.</param>
        <param name="subject">The source of the <see cref="T:System.Security.Claims.Claim" />(s) for this token.</param>
        <param name="notBefore">The notbefore time for this token.</param>
        <param name="expires">The expiration time for this token.</param>
        <param name="issuedAt">The issue time for this token.</param>
        <param name="signingCredentials">Contains cryptographic material for generating a signature.</param>
        <summary>
            Creates a JWT in 'Compact Serialization Format'.
            </summary>
        <returns>A Base64UrlEncoded string in 'Compact Serialization Format'.</returns>
        <remarks>If <see cref="P:System.Security.Claims.ClaimsIdentity.Actor" /> is not null, then a claim { actort, 'value' } will be added to the payload. See <see cref="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateActorValue(System.Security.Claims.ClaimsIdentity)" /> for details on how the value is created.
            <para>See <seealso cref="T:System.IdentityModel.Tokens.Jwt.JwtHeader" /> for details on how the HeaderParameters are added to the header.</para><para>See <seealso cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload" /> for details on how the values are added to the payload.</para><para>Each <see cref="T:System.Security.Claims.Claim" /> in the <paramref name="subject" /> will map <see cref="P:System.Security.Claims.Claim.Type" /> by applying <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.OutboundClaimTypeMap" />. Modifying <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.OutboundClaimTypeMap" /> could change the outbound JWT.</para><para>If <see cref="T:Microsoft.IdentityModel.Tokens.SigningCredentials" /> is provided, then a JWS will be created.</para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEncodedJwt">
      <MemberSignature Language="C#" Value="public virtual string CreateEncodedJwt (string issuer, string audience, System.Security.Claims.ClaimsIdentity subject, Nullable&lt;DateTime&gt; notBefore, Nullable&lt;DateTime&gt; expires, Nullable&lt;DateTime&gt; issuedAt, Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials, Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string CreateEncodedJwt(string issuer, string audience, class System.Security.Claims.ClaimsIdentity subject, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; notBefore, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; expires, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; issuedAt, class Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials, class Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateEncodedJwt(System.String,System.String,System.Security.Claims.ClaimsIdentity,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},Microsoft.IdentityModel.Tokens.SigningCredentials,Microsoft.IdentityModel.Tokens.EncryptingCredentials)" />
      <MemberSignature Language="F#" Value="abstract member CreateEncodedJwt : string * string * System.Security.Claims.ClaimsIdentity * Nullable&lt;DateTime&gt; * Nullable&lt;DateTime&gt; * Nullable&lt;DateTime&gt; * Microsoft.IdentityModel.Tokens.SigningCredentials * Microsoft.IdentityModel.Tokens.EncryptingCredentials -&gt; string&#xA;override this.CreateEncodedJwt : string * string * System.Security.Claims.ClaimsIdentity * Nullable&lt;DateTime&gt; * Nullable&lt;DateTime&gt; * Nullable&lt;DateTime&gt; * Microsoft.IdentityModel.Tokens.SigningCredentials * Microsoft.IdentityModel.Tokens.EncryptingCredentials -&gt; string" Usage="jwtSecurityTokenHandler.CreateEncodedJwt (issuer, audience, subject, notBefore, expires, issuedAt, signingCredentials, encryptingCredentials)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="issuer" Type="System.String" />
        <Parameter Name="audience" Type="System.String" />
        <Parameter Name="subject" Type="System.Security.Claims.ClaimsIdentity" />
        <Parameter Name="notBefore" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="expires" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="issuedAt" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="signingCredentials" Type="Microsoft.IdentityModel.Tokens.SigningCredentials" />
        <Parameter Name="encryptingCredentials" Type="Microsoft.IdentityModel.Tokens.EncryptingCredentials" />
      </Parameters>
      <Docs>
        <param name="issuer">The issuer of the token.</param>
        <param name="audience">The audience for this token.</param>
        <param name="subject">The source of the <see cref="T:System.Security.Claims.Claim" />(s) for this token.</param>
        <param name="notBefore">Translated into 'epoch time' and assigned to 'nbf'.</param>
        <param name="expires">Translated into 'epoch time' and assigned to 'exp'.</param>
        <param name="issuedAt">Translated into 'epoch time' and assigned to 'iat'.</param>
        <param name="signingCredentials">Contains cryptographic material for signing.</param>
        <param name="encryptingCredentials">Contains cryptographic material for encrypting.</param>
        <summary>
            Creates a JWT in 'Compact Serialization Format'.
            </summary>
        <returns>A Base64UrlEncoded string in 'Compact Serialization Format'.</returns>
        <remarks>If <see cref="P:System.Security.Claims.ClaimsIdentity.Actor" /> is not null, then a claim { actort, 'value' } will be added to the payload. <see cref="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateActorValue(System.Security.Claims.ClaimsIdentity)" /> for details on how the value is created.
            <para>See <seealso cref="T:System.IdentityModel.Tokens.Jwt.JwtHeader" /> for details on how the HeaderParameters are added to the header.</para><para>See <seealso cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload" /> for details on how the values are added to the payload.</para><para>Each <see cref="T:System.Security.Claims.Claim" /> in the <paramref name="subject" /> will map <see cref="P:System.Security.Claims.Claim.Type" /> by applying <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.OutboundClaimTypeMap" />. Modifying <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.OutboundClaimTypeMap" /> could change the outbound JWT.</para></remarks>
        <exception cref="T:System.ArgumentException">If 'expires' &lt;= 'notBefore'.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateJwtSecurityToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.Jwt.JwtSecurityToken CreateJwtSecurityToken (Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.Jwt.JwtSecurityToken CreateJwtSecurityToken(class Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateJwtSecurityToken(Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateJwtSecurityToken (tokenDescriptor As SecurityTokenDescriptor) As JwtSecurityToken" />
      <MemberSignature Language="F#" Value="abstract member CreateJwtSecurityToken : Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor -&gt; System.IdentityModel.Tokens.Jwt.JwtSecurityToken&#xA;override this.CreateJwtSecurityToken : Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor -&gt; System.IdentityModel.Tokens.Jwt.JwtSecurityToken" Usage="jwtSecurityTokenHandler.CreateJwtSecurityToken tokenDescriptor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.Jwt.JwtSecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenDescriptor" Type="Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor" />
      </Parameters>
      <Docs>
        <param name="tokenDescriptor"> A <see cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor" /> that contains details of contents of the token.</param>
        <summary>
            Creates a Json Web Token (JWT).
            </summary>
        <returns>To be added.</returns>
        <remarks>
          <see cref="P:Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor.SigningCredentials" /> is used to sign <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.RawData" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateJwtSecurityToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.Jwt.JwtSecurityToken CreateJwtSecurityToken (string issuer = null, string audience = null, System.Security.Claims.ClaimsIdentity subject = null, Nullable&lt;DateTime&gt; notBefore = null, Nullable&lt;DateTime&gt; expires = null, Nullable&lt;DateTime&gt; issuedAt = null, Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.Jwt.JwtSecurityToken CreateJwtSecurityToken(string issuer, string audience, class System.Security.Claims.ClaimsIdentity subject, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; notBefore, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; expires, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; issuedAt, class Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateJwtSecurityToken(System.String,System.String,System.Security.Claims.ClaimsIdentity,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},Microsoft.IdentityModel.Tokens.SigningCredentials)" />
      <MemberSignature Language="F#" Value="abstract member CreateJwtSecurityToken : string * string * System.Security.Claims.ClaimsIdentity * Nullable&lt;DateTime&gt; * Nullable&lt;DateTime&gt; * Nullable&lt;DateTime&gt; * Microsoft.IdentityModel.Tokens.SigningCredentials -&gt; System.IdentityModel.Tokens.Jwt.JwtSecurityToken&#xA;override this.CreateJwtSecurityToken : string * string * System.Security.Claims.ClaimsIdentity * Nullable&lt;DateTime&gt; * Nullable&lt;DateTime&gt; * Nullable&lt;DateTime&gt; * Microsoft.IdentityModel.Tokens.SigningCredentials -&gt; System.IdentityModel.Tokens.Jwt.JwtSecurityToken" Usage="jwtSecurityTokenHandler.CreateJwtSecurityToken (issuer, audience, subject, notBefore, expires, issuedAt, signingCredentials)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.Jwt.JwtSecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="issuer" Type="System.String" />
        <Parameter Name="audience" Type="System.String" />
        <Parameter Name="subject" Type="System.Security.Claims.ClaimsIdentity" />
        <Parameter Name="notBefore" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="expires" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="issuedAt" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="signingCredentials" Type="Microsoft.IdentityModel.Tokens.SigningCredentials" />
      </Parameters>
      <Docs>
        <param name="issuer">The issuer of the token.</param>
        <param name="audience">The audience for this token.</param>
        <param name="subject">The source of the <see cref="T:System.Security.Claims.Claim" />(s) for this token.</param>
        <param name="notBefore">The notbefore time for this token.</param>
        <param name="expires">The expiration time for this token.</param>
        <param name="issuedAt">The issue time for this token.</param>
        <param name="signingCredentials">Contains cryptographic material for generating a signature.</param>
        <summary>
            Creates a <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" /></summary>
        <returns>A <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" />.</returns>
        <remarks>If <see cref="P:System.Security.Claims.ClaimsIdentity.Actor" /> is not null, then a claim { actort, 'value' } will be added to the payload. <see cref="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateActorValue(System.Security.Claims.ClaimsIdentity)" /> for details on how the value is created.
            <para>See <seealso cref="T:System.IdentityModel.Tokens.Jwt.JwtHeader" /> for details on how the HeaderParameters are added to the header.</para><para>See <seealso cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload" /> for details on how the values are added to the payload.</para><para>Each <see cref="T:System.Security.Claims.Claim" /> on the <paramref name="subject" /> added will have <see cref="P:System.Security.Claims.Claim.Type" /> translated according to the mapping found in
            <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.OutboundClaimTypeMap" />. Adding and removing to <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.OutboundClaimTypeMap" /> will affect the name component of the Json claim.</para><para><see cref="M:Microsoft.IdentityModel.Tokens.SigningCredentials.#ctor(Microsoft.IdentityModel.Tokens.SecurityKey,System.String)" /> is used to sign <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.RawData" />.</para></remarks>
        <exception cref="T:System.ArgumentException">If 'expires' &lt;= 'notBefore'.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateJwtSecurityToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.Jwt.JwtSecurityToken CreateJwtSecurityToken (string issuer, string audience, System.Security.Claims.ClaimsIdentity subject, Nullable&lt;DateTime&gt; notBefore, Nullable&lt;DateTime&gt; expires, Nullable&lt;DateTime&gt; issuedAt, Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials, Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.Jwt.JwtSecurityToken CreateJwtSecurityToken(string issuer, string audience, class System.Security.Claims.ClaimsIdentity subject, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; notBefore, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; expires, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; issuedAt, class Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials, class Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateJwtSecurityToken(System.String,System.String,System.Security.Claims.ClaimsIdentity,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},Microsoft.IdentityModel.Tokens.SigningCredentials,Microsoft.IdentityModel.Tokens.EncryptingCredentials)" />
      <MemberSignature Language="F#" Value="abstract member CreateJwtSecurityToken : string * string * System.Security.Claims.ClaimsIdentity * Nullable&lt;DateTime&gt; * Nullable&lt;DateTime&gt; * Nullable&lt;DateTime&gt; * Microsoft.IdentityModel.Tokens.SigningCredentials * Microsoft.IdentityModel.Tokens.EncryptingCredentials -&gt; System.IdentityModel.Tokens.Jwt.JwtSecurityToken&#xA;override this.CreateJwtSecurityToken : string * string * System.Security.Claims.ClaimsIdentity * Nullable&lt;DateTime&gt; * Nullable&lt;DateTime&gt; * Nullable&lt;DateTime&gt; * Microsoft.IdentityModel.Tokens.SigningCredentials * Microsoft.IdentityModel.Tokens.EncryptingCredentials -&gt; System.IdentityModel.Tokens.Jwt.JwtSecurityToken" Usage="jwtSecurityTokenHandler.CreateJwtSecurityToken (issuer, audience, subject, notBefore, expires, issuedAt, signingCredentials, encryptingCredentials)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.Jwt.JwtSecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="issuer" Type="System.String" />
        <Parameter Name="audience" Type="System.String" />
        <Parameter Name="subject" Type="System.Security.Claims.ClaimsIdentity" />
        <Parameter Name="notBefore" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="expires" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="issuedAt" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="signingCredentials" Type="Microsoft.IdentityModel.Tokens.SigningCredentials" />
        <Parameter Name="encryptingCredentials" Type="Microsoft.IdentityModel.Tokens.EncryptingCredentials" />
      </Parameters>
      <Docs>
        <param name="issuer">The issuer of the token.</param>
        <param name="audience">The audience for this token.</param>
        <param name="subject">The source of the <see cref="T:System.Security.Claims.Claim" />(s) for this token.</param>
        <param name="notBefore">The notbefore time for this token.</param>
        <param name="expires">The expiration time for this token.</param>
        <param name="issuedAt">The issue time for this token.</param>
        <param name="signingCredentials">Contains cryptographic material for generating a signature.</param>
        <param name="encryptingCredentials">Contains cryptographic material for encrypting the token.</param>
        <summary>
            Creates a <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" /></summary>
        <returns>A <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" />.</returns>
        <remarks>If <see cref="P:System.Security.Claims.ClaimsIdentity.Actor" /> is not null, then a claim { actort, 'value' } will be added to the payload. <see cref="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateActorValue(System.Security.Claims.ClaimsIdentity)" /> for details on how the value is created.
            <para>See <seealso cref="T:System.IdentityModel.Tokens.Jwt.JwtHeader" /> for details on how the HeaderParameters are added to the header.</para><para>See <seealso cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload" /> for details on how the values are added to the payload.</para><para>Each <see cref="T:System.Security.Claims.Claim" /> on the <paramref name="subject" /> added will have <see cref="P:System.Security.Claims.Claim.Type" /> translated according to the mapping found in
            <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.OutboundClaimTypeMap" />. Adding and removing to <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.OutboundClaimTypeMap" /> will affect the name component of the Json claim.</para><para><see cref="M:Microsoft.IdentityModel.Tokens.SigningCredentials.#ctor(Microsoft.IdentityModel.Tokens.SecurityKey,System.String)" /> is used to sign <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.RawData" />.</para><para><see cref="M:Microsoft.IdentityModel.Tokens.EncryptingCredentials.#ctor(Microsoft.IdentityModel.Tokens.SecurityKey,System.String,System.String)" /> is used to encrypt <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.RawData" /> or <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.RawPayload" /> .</para></remarks>
        <exception cref="T:System.ArgumentException">If 'expires' &lt;= 'notBefore'.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateToken">
      <MemberSignature Language="C#" Value="public override Microsoft.IdentityModel.Tokens.SecurityToken CreateToken (Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.IdentityModel.Tokens.SecurityToken CreateToken(class Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateToken(Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CreateToken (tokenDescriptor As SecurityTokenDescriptor) As SecurityToken" />
      <MemberSignature Language="F#" Value="override this.CreateToken : Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor -&gt; Microsoft.IdentityModel.Tokens.SecurityToken" Usage="jwtSecurityTokenHandler.CreateToken tokenDescriptor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenDescriptor" Type="Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor" />
      </Parameters>
      <Docs>
        <param name="tokenDescriptor"> A <see cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor" /> that contains details of contents of the token.</param>
        <summary>
            Creates a Json Web Token (JWT).
            </summary>
        <returns>To be added.</returns>
        <remarks>
          <see cref="P:Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor.SigningCredentials" /> is used to sign <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.RawData" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DecryptToken">
      <MemberSignature Language="C#" Value="protected string DecryptToken (System.IdentityModel.Tokens.Jwt.JwtSecurityToken jwtToken, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string DecryptToken(class System.IdentityModel.Tokens.Jwt.JwtSecurityToken jwtToken, class Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.DecryptToken(System.IdentityModel.Tokens.Jwt.JwtSecurityToken,Microsoft.IdentityModel.Tokens.TokenValidationParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Function DecryptToken (jwtToken As JwtSecurityToken, validationParameters As TokenValidationParameters) As String" />
      <MemberSignature Language="F#" Value="member this.DecryptToken : System.IdentityModel.Tokens.Jwt.JwtSecurityToken * Microsoft.IdentityModel.Tokens.TokenValidationParameters -&gt; string" Usage="jwtSecurityTokenHandler.DecryptToken (jwtToken, validationParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jwtToken" Type="System.IdentityModel.Tokens.Jwt.JwtSecurityToken" />
        <Parameter Name="validationParameters" Type="Microsoft.IdentityModel.Tokens.TokenValidationParameters" />
      </Parameters>
      <Docs>
        <param name="jwtToken">the JWE that contains the cypher text.</param>
        <param name="validationParameters">contains crypto material.</param>
        <summary>
            Decrypts a JWE and returns the clear text 
            </summary>
        <returns>the decoded / cleartext contents of the JWE.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">if 'validationParameters' is null.</exception>
        <exception cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenException">if 'jwtToken.Header.enc' is null or empty.</exception>
        <exception cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenEncryptionKeyNotFoundException">if 'jwtToken.Header.kid' is not null AND decryption fails.</exception>
        <exception cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenDecryptionFailedException">if the JWE was not able to be decrypted.</exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultInboundClaimFilter">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.ISet&lt;string&gt; DefaultInboundClaimFilter;" />
      <MemberSignature Language="ILAsm" Value=".field public static class System.Collections.Generic.ISet`1&lt;string&gt; DefaultInboundClaimFilter" />
      <MemberSignature Language="DocId" Value="F:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.DefaultInboundClaimFilter" />
      <MemberSignature Language="VB.NET" Value="Public Shared DefaultInboundClaimFilter As ISet(Of String) " />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultInboundClaimFilter : System.Collections.Generic.ISet&lt;string&gt;" Usage="System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.DefaultInboundClaimFilter" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ISet&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Default claim type filter list.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultInboundClaimTypeMap">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,string&gt; DefaultInboundClaimTypeMap;" />
      <MemberSignature Language="ILAsm" Value=".field public static class System.Collections.Generic.IDictionary`2&lt;string, string&gt; DefaultInboundClaimTypeMap" />
      <MemberSignature Language="DocId" Value="F:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.DefaultInboundClaimTypeMap" />
      <MemberSignature Language="VB.NET" Value="Public Shared DefaultInboundClaimTypeMap As IDictionary(Of String, String) " />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultInboundClaimTypeMap : System.Collections.Generic.IDictionary&lt;string, string&gt;" Usage="System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.DefaultInboundClaimTypeMap" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Default claim type mapping for inbound claims.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultMapInboundClaims">
      <MemberSignature Language="C#" Value="public static bool DefaultMapInboundClaims;" />
      <MemberSignature Language="ILAsm" Value=".field public static bool DefaultMapInboundClaims" />
      <MemberSignature Language="DocId" Value="F:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.DefaultMapInboundClaims" />
      <MemberSignature Language="VB.NET" Value="Public Shared DefaultMapInboundClaims As Boolean " />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultMapInboundClaims : bool" Usage="System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.DefaultMapInboundClaims" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Default value for the flag that determines whether or not the InboundClaimTypeMap is used.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultOutboundAlgorithmMap">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,string&gt; DefaultOutboundAlgorithmMap;" />
      <MemberSignature Language="ILAsm" Value=".field public static class System.Collections.Generic.IDictionary`2&lt;string, string&gt; DefaultOutboundAlgorithmMap" />
      <MemberSignature Language="DocId" Value="F:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.DefaultOutboundAlgorithmMap" />
      <MemberSignature Language="VB.NET" Value="Public Shared DefaultOutboundAlgorithmMap As IDictionary(Of String, String) " />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultOutboundAlgorithmMap : System.Collections.Generic.IDictionary&lt;string, string&gt;" Usage="System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.DefaultOutboundAlgorithmMap" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Default JwtHeader algorithm mapping
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultOutboundClaimTypeMap">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,string&gt; DefaultOutboundClaimTypeMap;" />
      <MemberSignature Language="ILAsm" Value=".field public static class System.Collections.Generic.IDictionary`2&lt;string, string&gt; DefaultOutboundClaimTypeMap" />
      <MemberSignature Language="DocId" Value="F:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.DefaultOutboundClaimTypeMap" />
      <MemberSignature Language="VB.NET" Value="Public Shared DefaultOutboundClaimTypeMap As IDictionary(Of String, String) " />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultOutboundClaimTypeMap : System.Collections.Generic.IDictionary&lt;string, string&gt;" Usage="System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.DefaultOutboundClaimTypeMap" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Default claim type mapping for outbound claims.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultTokenLifetimeInMinutes">
      <MemberSignature Language="C#" Value="public static readonly int DefaultTokenLifetimeInMinutes;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly int32 DefaultTokenLifetimeInMinutes" />
      <MemberSignature Language="DocId" Value="F:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.DefaultTokenLifetimeInMinutes" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DefaultTokenLifetimeInMinutes As Integer " />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultTokenLifetimeInMinutes : int" Usage="System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.DefaultTokenLifetimeInMinutes" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Default lifetime of tokens created. When creating tokens, if 'expires' and 'notbefore' are both null, then a default will be set to: expires = DateTime.UtcNow, notbefore = DateTime.UtcNow + TimeSpan.FromMinutes(TokenLifetimeInMinutes).
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InboundClaimFilter">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ISet&lt;string&gt; InboundClaimFilter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ISet`1&lt;string&gt; InboundClaimFilter" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.InboundClaimFilter" />
      <MemberSignature Language="VB.NET" Value="Public Property InboundClaimFilter As ISet(Of String)" />
      <MemberSignature Language="F#" Value="member this.InboundClaimFilter : System.Collections.Generic.ISet&lt;string&gt; with get, set" Usage="System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.InboundClaimFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ISet&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Collections.Generic.ISet`1" /> used to filter claims when populating a <see cref="T:System.Security.Claims.ClaimsIdentity" /> claims form a <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" />.
            When a <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" /> is validated, claims with types found in this <see cref="T:System.Collections.Generic.ISet`1" /> will not be added to the <see cref="T:System.Security.Claims.ClaimsIdentity" />.
            <para>The default value is ClaimTypeMapping.InboundClaimFilter.</para></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">'value' is null.</exception>
      </Docs>
    </Member>
    <Member MemberName="InboundClaimTypeMap">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,string&gt; InboundClaimTypeMap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; InboundClaimTypeMap" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.InboundClaimTypeMap" />
      <MemberSignature Language="VB.NET" Value="Public Property InboundClaimTypeMap As IDictionary(Of String, String)" />
      <MemberSignature Language="F#" Value="member this.InboundClaimTypeMap : System.Collections.Generic.IDictionary&lt;string, string&gt; with get, set" Usage="System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.InboundClaimTypeMap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.InboundClaimTypeMap" /> which is used when setting the <see cref="P:System.Security.Claims.Claim.Type" /> for claims in the <see cref="T:System.Security.Claims.ClaimsPrincipal" /> extracted when validating a <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" />. 
            <para>The <see cref="P:System.Security.Claims.Claim.Type" /> is set to the JSON claim 'name' after translating using this mapping.</para><para>The default value is ClaimTypeMapping.InboundClaimTypeMap.</para></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">'value' is null.</exception>
      </Docs>
    </Member>
    <Member MemberName="JsonClaimTypeProperty">
      <MemberSignature Language="C#" Value="public static string JsonClaimTypeProperty { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string JsonClaimTypeProperty" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.JsonClaimTypeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property JsonClaimTypeProperty As String" />
      <MemberSignature Language="F#" Value="member this.JsonClaimTypeProperty : string with get, set" Usage="System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.JsonClaimTypeProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the property name of <see cref="P:System.Security.Claims.Claim.Properties" /> the will contain .Net type that was recognized when JwtPayload.Claims serialized the value to JSON.
            <para>See <seealso cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.InboundClaimTypeMap" /> for more information.</para></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">If <see cref="T:System.String" />.IsNullOrWhiteSpace('value') is true.</exception>
      </Docs>
    </Member>
    <Member MemberName="MapInboundClaims">
      <MemberSignature Language="C#" Value="public bool MapInboundClaims { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MapInboundClaims" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.MapInboundClaims" />
      <MemberSignature Language="VB.NET" Value="Public Property MapInboundClaims As Boolean" />
      <MemberSignature Language="F#" Value="member this.MapInboundClaims : bool with get, set" Usage="System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.MapInboundClaims" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.MapInboundClaims" /> property which is used when determining whether or not to map claim types that are extracted when validating a <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" />. 
            <para>If this is set to true, the <see cref="P:System.Security.Claims.Claim.Type" /> is set to the JSON claim 'name' after translating using this mapping. Otherwise, no mapping occurs.</para><para>The default value is true.</para></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutboundAlgorithmMap">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,string&gt; OutboundAlgorithmMap { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; OutboundAlgorithmMap" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.OutboundAlgorithmMap" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OutboundAlgorithmMap As IDictionary(Of String, String)" />
      <MemberSignature Language="F#" Value="member this.OutboundAlgorithmMap : System.Collections.Generic.IDictionary&lt;string, string&gt;" Usage="System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.OutboundAlgorithmMap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the outbound algorithm map that is passed to the <see cref="T:System.IdentityModel.Tokens.Jwt.JwtHeader" /> constructor.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutboundClaimTypeMap">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,string&gt; OutboundClaimTypeMap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; OutboundClaimTypeMap" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.OutboundClaimTypeMap" />
      <MemberSignature Language="VB.NET" Value="Public Property OutboundClaimTypeMap As IDictionary(Of String, String)" />
      <MemberSignature Language="F#" Value="member this.OutboundClaimTypeMap : System.Collections.Generic.IDictionary&lt;string, string&gt; with get, set" Usage="System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.OutboundClaimTypeMap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Gets or sets the <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.OutboundClaimTypeMap" /> which is used when creating a <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" /> from <see cref="T:System.Security.Claims.Claim" />(s).</para>
          <para>The JSON claim 'name' value is set to <see cref="P:System.Security.Claims.Claim.Type" /> after translating using this mapping.</para>
          <para>The default value is ClaimTypeMapping.OutboundClaimTypeMap</para>
        </summary>
        <value>To be added.</value>
        <remarks>This mapping is applied only when using <see cref="M:System.IdentityModel.Tokens.Jwt.JwtPayload.AddClaim(System.Security.Claims.Claim)" /> or <see cref="M:System.IdentityModel.Tokens.Jwt.JwtPayload.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})" />. Adding values directly will not result in translation.</remarks>
        <exception cref="T:System.ArgumentNullException">'value' is null.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadJwtToken">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Tokens.Jwt.JwtSecurityToken ReadJwtToken (string token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IdentityModel.Tokens.Jwt.JwtSecurityToken ReadJwtToken(string token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.ReadJwtToken(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadJwtToken (token As String) As JwtSecurityToken" />
      <MemberSignature Language="F#" Value="member this.ReadJwtToken : string -&gt; System.IdentityModel.Tokens.Jwt.JwtSecurityToken" Usage="jwtSecurityTokenHandler.ReadJwtToken token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.Jwt.JwtSecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="token">A 'JSON Web Token' (JWT) in JWS or JWE Compact Serialization Format.</param>
        <summary>
            Converts a string into an instance of <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" />.
            </summary>
        <returns>A <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" /></returns>
        <remarks>
          <para>If the 'token' is in JWE Compact Serialization format, only the protected header will be deserialized.</para>
            This method is unable to decrypt the payload. Use <see cref="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.ValidateToken(System.String,Microsoft.IdentityModel.Tokens.TokenValidationParameters,Microsoft.IdentityModel.Tokens.SecurityToken@)" />to obtain the payload.</remarks>
        <exception cref="T:System.ArgumentNullException">'token' is null or empty.</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CanReadToken(System.String)" />
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ReadToken">
      <MemberSignature Language="C#" Value="public override Microsoft.IdentityModel.Tokens.SecurityToken ReadToken (string token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.IdentityModel.Tokens.SecurityToken ReadToken(string token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.ReadToken(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadToken (token As String) As SecurityToken" />
      <MemberSignature Language="F#" Value="override this.ReadToken : string -&gt; Microsoft.IdentityModel.Tokens.SecurityToken" Usage="jwtSecurityTokenHandler.ReadToken token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="token">A 'JSON Web Token' (JWT) in JWS or JWE Compact Serialization Format.</param>
        <summary>
            Converts a string into an instance of <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" />.
            </summary>
        <returns>A <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" /></returns>
        <remarks>
          <para>If the 'token' is in JWE Compact Serialization format, only the protected header will be deserialized.</para>
            This method is unable to decrypt the payload. Use <see cref="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.ValidateToken(System.String,Microsoft.IdentityModel.Tokens.TokenValidationParameters,Microsoft.IdentityModel.Tokens.SecurityToken@)" />to obtain the payload.</remarks>
        <exception cref="T:System.ArgumentNullException">'token' is null or empty.</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CanReadToken(System.String)" />
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ReadToken">
      <MemberSignature Language="C#" Value="public override Microsoft.IdentityModel.Tokens.SecurityToken ReadToken (System.Xml.XmlReader reader, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.IdentityModel.Tokens.SecurityToken ReadToken(class System.Xml.XmlReader reader, class Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.ReadToken(System.Xml.XmlReader,Microsoft.IdentityModel.Tokens.TokenValidationParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadToken (reader As XmlReader, validationParameters As TokenValidationParameters) As SecurityToken" />
      <MemberSignature Language="F#" Value="override this.ReadToken : System.Xml.XmlReader * Microsoft.IdentityModel.Tokens.TokenValidationParameters -&gt; Microsoft.IdentityModel.Tokens.SecurityToken" Usage="jwtSecurityTokenHandler.ReadToken (reader, validationParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="validationParameters" Type="Microsoft.IdentityModel.Tokens.TokenValidationParameters" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see cref="T:System.Xml.XmlReader" />.</param>
        <param name="validationParameters">The current <see cref="T:Microsoft.IdentityModel.Tokens.TokenValidationParameters" />.</param>
        <summary>
            Deserializes token with the provided <see cref="T:Microsoft.IdentityModel.Tokens.TokenValidationParameters" />.
            </summary>
        <returns>The <see cref="T:Microsoft.IdentityModel.Tokens.SecurityToken" /></returns>
        <remarks>This method is not current supported.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveIssuerSigningKey">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.IdentityModel.Tokens.SecurityKey ResolveIssuerSigningKey (string token, System.IdentityModel.Tokens.Jwt.JwtSecurityToken jwtToken, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.IdentityModel.Tokens.SecurityKey ResolveIssuerSigningKey(string token, class System.IdentityModel.Tokens.Jwt.JwtSecurityToken jwtToken, class Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.ResolveIssuerSigningKey(System.String,System.IdentityModel.Tokens.Jwt.JwtSecurityToken,Microsoft.IdentityModel.Tokens.TokenValidationParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ResolveIssuerSigningKey (token As String, jwtToken As JwtSecurityToken, validationParameters As TokenValidationParameters) As SecurityKey" />
      <MemberSignature Language="F#" Value="abstract member ResolveIssuerSigningKey : string * System.IdentityModel.Tokens.Jwt.JwtSecurityToken * Microsoft.IdentityModel.Tokens.TokenValidationParameters -&gt; Microsoft.IdentityModel.Tokens.SecurityKey&#xA;override this.ResolveIssuerSigningKey : string * System.IdentityModel.Tokens.Jwt.JwtSecurityToken * Microsoft.IdentityModel.Tokens.TokenValidationParameters -&gt; Microsoft.IdentityModel.Tokens.SecurityKey" Usage="jwtSecurityTokenHandler.ResolveIssuerSigningKey (token, jwtToken, validationParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.IdentityModel.Tokens.SecurityKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.String" />
        <Parameter Name="jwtToken" Type="System.IdentityModel.Tokens.Jwt.JwtSecurityToken" />
        <Parameter Name="validationParameters" Type="Microsoft.IdentityModel.Tokens.TokenValidationParameters" />
      </Parameters>
      <Docs>
        <param name="token">The <see cref="T:System.String" /> representation of the token that is being validated.</param>
        <param name="jwtToken">The <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" /> that is being validated.</param>
        <param name="validationParameters">A <see cref="T:Microsoft.IdentityModel.Tokens.TokenValidationParameters" />  required for validation.</param>
        <summary>
            Returns a <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> to use when validating the signature of a token.
            </summary>
        <returns>Returns a <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> to use for signature validation.</returns>
        <remarks>If key fails to resolve, then null is returned</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveTokenDecryptionKey">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.IdentityModel.Tokens.SecurityKey ResolveTokenDecryptionKey (string token, System.IdentityModel.Tokens.Jwt.JwtSecurityToken jwtToken, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.IdentityModel.Tokens.SecurityKey ResolveTokenDecryptionKey(string token, class System.IdentityModel.Tokens.Jwt.JwtSecurityToken jwtToken, class Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.ResolveTokenDecryptionKey(System.String,System.IdentityModel.Tokens.Jwt.JwtSecurityToken,Microsoft.IdentityModel.Tokens.TokenValidationParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ResolveTokenDecryptionKey (token As String, jwtToken As JwtSecurityToken, validationParameters As TokenValidationParameters) As SecurityKey" />
      <MemberSignature Language="F#" Value="abstract member ResolveTokenDecryptionKey : string * System.IdentityModel.Tokens.Jwt.JwtSecurityToken * Microsoft.IdentityModel.Tokens.TokenValidationParameters -&gt; Microsoft.IdentityModel.Tokens.SecurityKey&#xA;override this.ResolveTokenDecryptionKey : string * System.IdentityModel.Tokens.Jwt.JwtSecurityToken * Microsoft.IdentityModel.Tokens.TokenValidationParameters -&gt; Microsoft.IdentityModel.Tokens.SecurityKey" Usage="jwtSecurityTokenHandler.ResolveTokenDecryptionKey (token, jwtToken, validationParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.IdentityModel.Tokens.SecurityKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.String" />
        <Parameter Name="jwtToken" Type="System.IdentityModel.Tokens.Jwt.JwtSecurityToken" />
        <Parameter Name="validationParameters" Type="Microsoft.IdentityModel.Tokens.TokenValidationParameters" />
      </Parameters>
      <Docs>
        <param name="token">The <see cref="T:System.String" /> the token that is being decrypted.</param>
        <param name="jwtToken">The <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" /> that is being decrypted.</param>
        <param name="validationParameters">A <see cref="T:Microsoft.IdentityModel.Tokens.TokenValidationParameters" />  required for validation.</param>
        <summary>
            Returns a <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> to use when decryption a JWE.
            </summary>
        <returns>Returns a <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> to use for signature validation.</returns>
        <remarks>If key fails to resolve, then null is returned</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDefaultTimesOnTokenCreation">
      <MemberSignature Language="C#" Value="public bool SetDefaultTimesOnTokenCreation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SetDefaultTimesOnTokenCreation" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.SetDefaultTimesOnTokenCreation" />
      <MemberSignature Language="VB.NET" Value="Public Property SetDefaultTimesOnTokenCreation As Boolean" />
      <MemberSignature Language="F#" Value="member this.SetDefaultTimesOnTokenCreation : bool with get, set" Usage="System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.SetDefaultTimesOnTokenCreation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-dotnet">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a bool that controls if token creation will set default 'exp', 'nbf' and 'iat' if not specified.
            </summary>
        <value>To be added.</value>
        <remarks>See: <see cref="F:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.DefaultTokenLifetimeInMinutes" />, <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.TokenLifetimeInMinutes" /> for defaults and configuration.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShortClaimTypeProperty">
      <MemberSignature Language="C#" Value="public static string ShortClaimTypeProperty { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string ShortClaimTypeProperty" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.ShortClaimTypeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property ShortClaimTypeProperty As String" />
      <MemberSignature Language="F#" Value="member this.ShortClaimTypeProperty : string with get, set" Usage="System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.ShortClaimTypeProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the property name of <see cref="P:System.Security.Claims.Claim.Properties" /> the will contain the original JSON claim 'name' if a mapping occurred when the <see cref="T:System.Security.Claims.Claim" />(s) were created.
            <para>See <seealso cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.InboundClaimTypeMap" /> for more information.</para></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">If <see cref="T:System.String" />.IsNullOrWhiteSpace('value') is true.</exception>
      </Docs>
    </Member>
    <Member MemberName="TokenLifetimeInMinutes">
      <MemberSignature Language="C#" Value="public int TokenLifetimeInMinutes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TokenLifetimeInMinutes" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.TokenLifetimeInMinutes" />
      <MemberSignature Language="VB.NET" Value="Public Property TokenLifetimeInMinutes As Integer" />
      <MemberSignature Language="F#" Value="member this.TokenLifetimeInMinutes : int with get, set" Usage="System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.TokenLifetimeInMinutes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the token lifetime in minutes.
            </summary>
        <value>To be added.</value>
        <remarks>Used by <see cref="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateToken(Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor)" /> to set the default expiration ('exp'). <see cref="F:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.DefaultTokenLifetimeInMinutes" /> for the default.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">'value' less than 1.</exception>
      </Docs>
    </Member>
    <Member MemberName="TokenType">
      <MemberSignature Language="C#" Value="public override Type TokenType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type TokenType" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.TokenType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property TokenType As Type" />
      <MemberSignature Language="F#" Value="member this.TokenType : Type" Usage="System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.TokenType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the type of the <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <return>The type of <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" /></return>
      </Docs>
    </Member>
    <Member MemberName="ValidateAudience">
      <MemberSignature Language="C#" Value="protected virtual void ValidateAudience (System.Collections.Generic.IEnumerable&lt;string&gt; audiences, System.IdentityModel.Tokens.Jwt.JwtSecurityToken jwtToken, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ValidateAudience(class System.Collections.Generic.IEnumerable`1&lt;string&gt; audiences, class System.IdentityModel.Tokens.Jwt.JwtSecurityToken jwtToken, class Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.ValidateAudience(System.Collections.Generic.IEnumerable{System.String},System.IdentityModel.Tokens.Jwt.JwtSecurityToken,Microsoft.IdentityModel.Tokens.TokenValidationParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ValidateAudience (audiences As IEnumerable(Of String), jwtToken As JwtSecurityToken, validationParameters As TokenValidationParameters)" />
      <MemberSignature Language="F#" Value="abstract member ValidateAudience : seq&lt;string&gt; * System.IdentityModel.Tokens.Jwt.JwtSecurityToken * Microsoft.IdentityModel.Tokens.TokenValidationParameters -&gt; unit&#xA;override this.ValidateAudience : seq&lt;string&gt; * System.IdentityModel.Tokens.Jwt.JwtSecurityToken * Microsoft.IdentityModel.Tokens.TokenValidationParameters -&gt; unit" Usage="jwtSecurityTokenHandler.ValidateAudience (audiences, jwtToken, validationParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audiences" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="jwtToken" Type="System.IdentityModel.Tokens.Jwt.JwtSecurityToken" />
        <Parameter Name="validationParameters" Type="Microsoft.IdentityModel.Tokens.TokenValidationParameters" />
      </Parameters>
      <Docs>
        <param name="audiences">The audiences found in the <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" />.</param>
        <param name="jwtToken">The <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" /> being validated.</param>
        <param name="validationParameters">
          <see cref="T:Microsoft.IdentityModel.Tokens.TokenValidationParameters" /> required for validation.</param>
        <summary>
            Determines if the audiences found in a <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" /> are valid.
            </summary>
        <remarks>See <see cref="M:Microsoft.IdentityModel.Tokens.Validators.ValidateAudience(System.Collections.Generic.IEnumerable{System.String},Microsoft.IdentityModel.Tokens.SecurityToken,Microsoft.IdentityModel.Tokens.TokenValidationParameters)" /> for additional details.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateIssuer">
      <MemberSignature Language="C#" Value="protected virtual string ValidateIssuer (string issuer, System.IdentityModel.Tokens.Jwt.JwtSecurityToken jwtToken, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string ValidateIssuer(string issuer, class System.IdentityModel.Tokens.Jwt.JwtSecurityToken jwtToken, class Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.ValidateIssuer(System.String,System.IdentityModel.Tokens.Jwt.JwtSecurityToken,Microsoft.IdentityModel.Tokens.TokenValidationParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ValidateIssuer (issuer As String, jwtToken As JwtSecurityToken, validationParameters As TokenValidationParameters) As String" />
      <MemberSignature Language="F#" Value="abstract member ValidateIssuer : string * System.IdentityModel.Tokens.Jwt.JwtSecurityToken * Microsoft.IdentityModel.Tokens.TokenValidationParameters -&gt; string&#xA;override this.ValidateIssuer : string * System.IdentityModel.Tokens.Jwt.JwtSecurityToken * Microsoft.IdentityModel.Tokens.TokenValidationParameters -&gt; string" Usage="jwtSecurityTokenHandler.ValidateIssuer (issuer, jwtToken, validationParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="issuer" Type="System.String" />
        <Parameter Name="jwtToken" Type="System.IdentityModel.Tokens.Jwt.JwtSecurityToken" />
        <Parameter Name="validationParameters" Type="Microsoft.IdentityModel.Tokens.TokenValidationParameters" />
      </Parameters>
      <Docs>
        <param name="issuer">The issuer to validate</param>
        <param name="jwtToken">The <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" /> that is being validated.</param>
        <param name="validationParameters">
          <see cref="T:Microsoft.IdentityModel.Tokens.TokenValidationParameters" /> required for validation.</param>
        <summary>
            Determines if the issuer found in a <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" /> is valid.
            </summary>
        <returns>The issuer to use when creating the <see cref="T:System.Security.Claims.Claim" />(s) in the <see cref="T:System.Security.Claims.ClaimsIdentity" />.</returns>
        <remarks>
          <see cref="M:Microsoft.IdentityModel.Tokens.Validators.ValidateIssuer(System.String,Microsoft.IdentityModel.Tokens.SecurityToken,Microsoft.IdentityModel.Tokens.TokenValidationParameters)" /> for additional details.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateIssuerSecurityKey">
      <MemberSignature Language="C#" Value="protected virtual void ValidateIssuerSecurityKey (Microsoft.IdentityModel.Tokens.SecurityKey key, System.IdentityModel.Tokens.Jwt.JwtSecurityToken securityToken, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ValidateIssuerSecurityKey(class Microsoft.IdentityModel.Tokens.SecurityKey key, class System.IdentityModel.Tokens.Jwt.JwtSecurityToken securityToken, class Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.ValidateIssuerSecurityKey(Microsoft.IdentityModel.Tokens.SecurityKey,System.IdentityModel.Tokens.Jwt.JwtSecurityToken,Microsoft.IdentityModel.Tokens.TokenValidationParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ValidateIssuerSecurityKey (key As SecurityKey, securityToken As JwtSecurityToken, validationParameters As TokenValidationParameters)" />
      <MemberSignature Language="F#" Value="abstract member ValidateIssuerSecurityKey : Microsoft.IdentityModel.Tokens.SecurityKey * System.IdentityModel.Tokens.Jwt.JwtSecurityToken * Microsoft.IdentityModel.Tokens.TokenValidationParameters -&gt; unit&#xA;override this.ValidateIssuerSecurityKey : Microsoft.IdentityModel.Tokens.SecurityKey * System.IdentityModel.Tokens.Jwt.JwtSecurityToken * Microsoft.IdentityModel.Tokens.TokenValidationParameters -&gt; unit" Usage="jwtSecurityTokenHandler.ValidateIssuerSecurityKey (key, securityToken, validationParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.IdentityModel.Tokens.SecurityKey" />
        <Parameter Name="securityToken" Type="System.IdentityModel.Tokens.Jwt.JwtSecurityToken" />
        <Parameter Name="validationParameters" Type="Microsoft.IdentityModel.Tokens.TokenValidationParameters" />
      </Parameters>
      <Docs>
        <param name="key">The <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> that signed the <see cref="T:Microsoft.IdentityModel.Tokens.SecurityToken" />.</param>
        <param name="securityToken">The <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" /> to validate.</param>
        <param name="validationParameters">The current <see cref="T:Microsoft.IdentityModel.Tokens.TokenValidationParameters" />.</param>
        <summary>
            Validates the <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.SigningKey" /> is an expected value.
            </summary>
        <remarks>If the <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.SigningKey" /> is a <see cref="T:Microsoft.IdentityModel.Tokens.X509SecurityKey" /> then the X509Certificate2 will be validated using the CertificateValidator.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateLifetime">
      <MemberSignature Language="C#" Value="protected virtual void ValidateLifetime (Nullable&lt;DateTime&gt; notBefore, Nullable&lt;DateTime&gt; expires, System.IdentityModel.Tokens.Jwt.JwtSecurityToken jwtToken, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ValidateLifetime(valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; notBefore, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; expires, class System.IdentityModel.Tokens.Jwt.JwtSecurityToken jwtToken, class Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.ValidateLifetime(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.IdentityModel.Tokens.Jwt.JwtSecurityToken,Microsoft.IdentityModel.Tokens.TokenValidationParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ValidateLifetime (notBefore As Nullable(Of DateTime), expires As Nullable(Of DateTime), jwtToken As JwtSecurityToken, validationParameters As TokenValidationParameters)" />
      <MemberSignature Language="F#" Value="abstract member ValidateLifetime : Nullable&lt;DateTime&gt; * Nullable&lt;DateTime&gt; * System.IdentityModel.Tokens.Jwt.JwtSecurityToken * Microsoft.IdentityModel.Tokens.TokenValidationParameters -&gt; unit&#xA;override this.ValidateLifetime : Nullable&lt;DateTime&gt; * Nullable&lt;DateTime&gt; * System.IdentityModel.Tokens.Jwt.JwtSecurityToken * Microsoft.IdentityModel.Tokens.TokenValidationParameters -&gt; unit" Usage="jwtSecurityTokenHandler.ValidateLifetime (notBefore, expires, jwtToken, validationParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notBefore" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="expires" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="jwtToken" Type="System.IdentityModel.Tokens.Jwt.JwtSecurityToken" />
        <Parameter Name="validationParameters" Type="Microsoft.IdentityModel.Tokens.TokenValidationParameters" />
      </Parameters>
      <Docs>
        <param name="notBefore">The <see cref="T:System.DateTime" /> value of the 'nbf' claim if it exists in the 'jwtToken'.</param>
        <param name="expires">The <see cref="T:System.DateTime" /> value of the 'exp' claim if it exists in the 'jwtToken'.</param>
        <param name="jwtToken">The <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" /> being validated.</param>
        <param name="validationParameters">
          <see cref="T:Microsoft.IdentityModel.Tokens.TokenValidationParameters" /> required for validation.</param>
        <summary>
            Validates the lifetime of a <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" />.
            </summary>
        <remarks>
          <see cref="M:Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(System.Nullable{System.DateTime},System.Nullable{System.DateTime},Microsoft.IdentityModel.Tokens.SecurityToken,Microsoft.IdentityModel.Tokens.TokenValidationParameters)" /> for additional details.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateSignature">
      <MemberSignature Language="C#" Value="protected virtual System.IdentityModel.Tokens.Jwt.JwtSecurityToken ValidateSignature (string token, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IdentityModel.Tokens.Jwt.JwtSecurityToken ValidateSignature(string token, class Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.ValidateSignature(System.String,Microsoft.IdentityModel.Tokens.TokenValidationParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ValidateSignature (token As String, validationParameters As TokenValidationParameters) As JwtSecurityToken" />
      <MemberSignature Language="F#" Value="abstract member ValidateSignature : string * Microsoft.IdentityModel.Tokens.TokenValidationParameters -&gt; System.IdentityModel.Tokens.Jwt.JwtSecurityToken&#xA;override this.ValidateSignature : string * Microsoft.IdentityModel.Tokens.TokenValidationParameters -&gt; System.IdentityModel.Tokens.Jwt.JwtSecurityToken" Usage="jwtSecurityTokenHandler.ValidateSignature (token, validationParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.Jwt.JwtSecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.String" />
        <Parameter Name="validationParameters" Type="Microsoft.IdentityModel.Tokens.TokenValidationParameters" />
      </Parameters>
      <Docs>
        <param name="token">A JWS token.</param>
        <param name="validationParameters">
          <see cref="T:Microsoft.IdentityModel.Tokens.TokenValidationParameters" /> that contains signing keys.</param>
        <summary>
            Validates that the signature, if found or required, is valid.
            </summary>
        <returns>A <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" /> that has the signature validated if token was signed.</returns>
        <remarks>
          <para>If the 'token' is signed, the signature is validated even if <see cref="P:Microsoft.IdentityModel.Tokens.TokenValidationParameters.RequireSignedTokens" /> is false.</para>
          <para>If the 'token' signature is validated, then the <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.SigningKey" /> will be set to the key that signed the 'token'.It is the responsibility of <see cref="P:Microsoft.IdentityModel.Tokens.TokenValidationParameters.SignatureValidator" /> to set the <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.SigningKey" /></para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">If 'validationParameters' is null.</exception>
        <exception cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenValidationException">If a signature is not found and <see cref="P:Microsoft.IdentityModel.Tokens.TokenValidationParameters.RequireSignedTokens" /> is true.</exception>
        <exception cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenSignatureKeyNotFoundException">If the 'token' has a key identifier and none of the <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" />(s) provided result in a validated signature. 
            This can indicate that a key refresh is required.</exception>
        <exception cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenInvalidSignatureException">If after trying all the <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" />(s), none result in a validated signature AND the 'token' does not have a key identifier.</exception>
      </Docs>
    </Member>
    <Member MemberName="ValidateToken">
      <MemberSignature Language="C#" Value="public override System.Security.Claims.ClaimsPrincipal ValidateToken (string token, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters, out Microsoft.IdentityModel.Tokens.SecurityToken validatedToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.Claims.ClaimsPrincipal ValidateToken(string token, class Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters, [out] class Microsoft.IdentityModel.Tokens.SecurityToken&amp; validatedToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.ValidateToken(System.String,Microsoft.IdentityModel.Tokens.TokenValidationParameters,Microsoft.IdentityModel.Tokens.SecurityToken@)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ValidateToken (token As String, validationParameters As TokenValidationParameters, ByRef validatedToken As SecurityToken) As ClaimsPrincipal" />
      <MemberSignature Language="F#" Value="override this.ValidateToken : string * Microsoft.IdentityModel.Tokens.TokenValidationParameters *  -&gt; System.Security.Claims.ClaimsPrincipal" Usage="jwtSecurityTokenHandler.ValidateToken (token, validationParameters, validatedToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Claims.ClaimsPrincipal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.String" />
        <Parameter Name="validationParameters" Type="Microsoft.IdentityModel.Tokens.TokenValidationParameters" />
        <Parameter Name="validatedToken" Type="Microsoft.IdentityModel.Tokens.SecurityToken" RefType="out" />
      </Parameters>
      <Docs>
        <param name="token">the JWT encoded as JWE or JWS</param>
        <param name="validationParameters">Contains validation parameters for the <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" />.</param>
        <param name="validatedToken">The <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" /> that was validated.</param>
        <summary>
            Reads and validates a 'JSON Web Token' (JWT) encoded as a JWS or JWE in Compact Serialized Format.
            </summary>
        <returns> A <see cref="T:System.Security.Claims.ClaimsPrincipal" /> from the JWT. Does not include claims found in the JWT header.</returns>
        <remarks> 
            Many of the exceptions listed above are not thrown directly from this method. See <see cref="T:Microsoft.IdentityModel.Tokens.Validators" /> to examin the call graph.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="validationParameters" /> is null.</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CanReadToken(System.String)" /> returns false.</exception>
        <exception cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenDecryptionFailedException">
          <paramref name="token" /> was a JWE was not able to be decrypted.</exception>
        <exception cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenEncryptionKeyNotFoundException">
          <paramref name="token" /> 'kid' header claim is not null AND decryption fails.</exception>
        <exception cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenException">
          <paramref name="token" /> 'enc' header claim is null or empty.</exception>
        <exception cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException">
          <paramref name="token" /> 'exp' claim is &lt; DateTime.UtcNow.</exception>
        <exception cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenInvalidAudienceException">
          <paramref name="token" /> 'aud' claim did not match either <see cref="P:Microsoft.IdentityModel.Tokens.TokenValidationParameters.ValidAudience" /> or one of <see cref="P:Microsoft.IdentityModel.Tokens.TokenValidationParameters.ValidAudiences" />.</exception>
        <exception cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenInvalidLifetimeException">
          <paramref name="token" /> 'nbf' claim is &gt; 'exp' claim.</exception>
        <exception cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenInvalidSignatureException">
          <paramref name="token" />.signature is not properly formatted.</exception>
        <exception cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenNoExpirationException">
          <see cref="P:Microsoft.IdentityModel.Tokens.TokenValidationParameters.TokenReplayCache" /> is not null and expirationTime.HasValue is false. When a TokenReplayCache is set, tokens require an expiration time.</exception>
        <exception cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenNotYetValidException">
          <paramref name="token" /> 'nbf' claim is &gt; DateTime.UtcNow.</exception>
        <exception cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenReplayAddFailedException">
          <paramref name="token" /> could not be added to the <see cref="P:Microsoft.IdentityModel.Tokens.TokenValidationParameters.TokenReplayCache" />.</exception>
        <exception cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenReplayDetectedException">
          <paramref name="token" /> is found in the cache.</exception>
      </Docs>
    </Member>
    <Member MemberName="ValidateTokenPayload">
      <MemberSignature Language="C#" Value="protected System.Security.Claims.ClaimsPrincipal ValidateTokenPayload (System.IdentityModel.Tokens.Jwt.JwtSecurityToken jwtToken, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Security.Claims.ClaimsPrincipal ValidateTokenPayload(class System.IdentityModel.Tokens.Jwt.JwtSecurityToken jwtToken, class Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.ValidateTokenPayload(System.IdentityModel.Tokens.Jwt.JwtSecurityToken,Microsoft.IdentityModel.Tokens.TokenValidationParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Function ValidateTokenPayload (jwtToken As JwtSecurityToken, validationParameters As TokenValidationParameters) As ClaimsPrincipal" />
      <MemberSignature Language="F#" Value="member this.ValidateTokenPayload : System.IdentityModel.Tokens.Jwt.JwtSecurityToken * Microsoft.IdentityModel.Tokens.TokenValidationParameters -&gt; System.Security.Claims.ClaimsPrincipal" Usage="jwtSecurityTokenHandler.ValidateTokenPayload (jwtToken, validationParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Claims.ClaimsPrincipal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jwtToken" Type="System.IdentityModel.Tokens.Jwt.JwtSecurityToken" />
        <Parameter Name="validationParameters" Type="Microsoft.IdentityModel.Tokens.TokenValidationParameters" />
      </Parameters>
      <Docs>
        <param name="jwtToken">The token to validate.</param>
        <param name="validationParameters">Contains validation parameters for the <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" />.</param>
        <summary>
            Validates the JSON payload of a <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" />.
            </summary>
        <returns>A <see cref="T:System.Security.Claims.ClaimsPrincipal" /> from the jwt. Does not include the header claims.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateTokenReplay">
      <MemberSignature Language="C#" Value="protected virtual void ValidateTokenReplay (Nullable&lt;DateTime&gt; expires, string securityToken, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ValidateTokenReplay(valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; expires, string securityToken, class Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.ValidateTokenReplay(System.Nullable{System.DateTime},System.String,Microsoft.IdentityModel.Tokens.TokenValidationParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ValidateTokenReplay (expires As Nullable(Of DateTime), securityToken As String, validationParameters As TokenValidationParameters)" />
      <MemberSignature Language="F#" Value="abstract member ValidateTokenReplay : Nullable&lt;DateTime&gt; * string * Microsoft.IdentityModel.Tokens.TokenValidationParameters -&gt; unit&#xA;override this.ValidateTokenReplay : Nullable&lt;DateTime&gt; * string * Microsoft.IdentityModel.Tokens.TokenValidationParameters -&gt; unit" Usage="jwtSecurityTokenHandler.ValidateTokenReplay (expires, securityToken, validationParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expires" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="securityToken" Type="System.String" />
        <Parameter Name="validationParameters" Type="Microsoft.IdentityModel.Tokens.TokenValidationParameters" />
      </Parameters>
      <Docs>
        <param name="expires">The <see cref="T:System.DateTime" /> value of the 'exp' claim if it exists in the <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" />'.</param>
        <param name="securityToken">The <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" /> that is being validated.</param>
        <param name="validationParameters">
          <see cref="T:Microsoft.IdentityModel.Tokens.TokenValidationParameters" /> required for validation.</param>
        <summary>
            Determines if a <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" /> is already validated.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToken">
      <MemberSignature Language="C#" Value="public override string WriteToken (Microsoft.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string WriteToken(class Microsoft.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.WriteToken(Microsoft.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function WriteToken (token As SecurityToken) As String" />
      <MemberSignature Language="F#" Value="override this.WriteToken : Microsoft.IdentityModel.Tokens.SecurityToken -&gt; string" Usage="jwtSecurityTokenHandler.WriteToken token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Microsoft.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="token">
          <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" /> to serialize.</param>
        <summary>
            Serializes a <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" /> into a JWT in Compact Serialization Format.
            </summary>
        <returns>A JWE or JWS in 'Compact Serialization Format'.</returns>
        <remarks>
          <para>The JWT will be serialized as a JWE or JWS.</para>
          <para>
            <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.Payload" /> will be used to create the JWT. If there is an inner token, the inner token's payload will be used.</para>
          <para>If either <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.SigningCredentials" /> or <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.InnerToken" />.SigningCredentials are set, the JWT will be signed.</para>
          <para>If <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.EncryptingCredentials" /> is set, a JWE will be created using the JWT above as the plaintext.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">'token' is null.</exception>
        <exception cref="T:System.ArgumentException">'token' is not a not <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken" />.</exception>
        <exception cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenEncryptionFailedException">if <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.InnerToken" /> is set and <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.EncryptingCredentials" /> is not set.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToken">
      <MemberSignature Language="C#" Value="public override void WriteToken (System.Xml.XmlWriter writer, Microsoft.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteToken(class System.Xml.XmlWriter writer, class Microsoft.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,Microsoft.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteToken (writer As XmlWriter, token As SecurityToken)" />
      <MemberSignature Language="F#" Value="override this.WriteToken : System.Xml.XmlWriter * Microsoft.IdentityModel.Tokens.SecurityToken -&gt; unit" Usage="jwtSecurityTokenHandler.WriteToken (writer, token)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Tokens.Jwt</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="token" Type="Microsoft.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="writer">The XML writer.</param>
        <param name="token">A token of type <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.TokenType" />.</param>
        <summary>
            Serializes to XML a token of the type handled by this instance.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>