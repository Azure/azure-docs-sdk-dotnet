<Type Name="SynapseNotebookActivity" FullName="Microsoft.Azure.Management.DataFactory.Models.SynapseNotebookActivity">
  <TypeSignature Language="C#" Value="public class SynapseNotebookActivity : Microsoft.Azure.Management.DataFactory.Models.ExecutionActivity" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SynapseNotebookActivity extends Microsoft.Azure.Management.DataFactory.Models.ExecutionActivity" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Management.DataFactory.Models.SynapseNotebookActivity" />
  <TypeSignature Language="VB.NET" Value="Public Class SynapseNotebookActivity&#xA;Inherits ExecutionActivity" />
  <TypeSignature Language="F#" Value="type SynapseNotebookActivity = class&#xA;    inherit ExecutionActivity" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Management.DataFactory</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Azure.Management.DataFactory.Models.ExecutionActivity</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Microsoft.Rest.Serialization.JsonTransformation]</AttributeName>
      <AttributeName Language="F#">[&lt;Microsoft.Rest.Serialization.JsonTransformation&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[Newtonsoft.Json.JsonObject("SynapseNotebook")]</AttributeName>
      <AttributeName Language="F#">[&lt;Newtonsoft.Json.JsonObject("SynapseNotebook")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Execute Synapse notebook activity.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SynapseNotebookActivity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.DataFactory.Models.SynapseNotebookActivity.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.DataFactory</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the SynapseNotebookActivity class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SynapseNotebookActivity (string name, Microsoft.Azure.Management.DataFactory.Models.SynapseNotebookReference notebook, System.Collections.Generic.IDictionary&lt;string,object&gt; additionalProperties = default, string description = default, System.Collections.Generic.IList&lt;Microsoft.Azure.Management.DataFactory.Models.ActivityDependency&gt; dependsOn = default, System.Collections.Generic.IList&lt;Microsoft.Azure.Management.DataFactory.Models.UserProperty&gt; userProperties = default, Microsoft.Azure.Management.DataFactory.Models.LinkedServiceReference linkedServiceName = default, Microsoft.Azure.Management.DataFactory.Models.ActivityPolicy policy = default, Microsoft.Azure.Management.DataFactory.Models.BigDataPoolParametrizationReference sparkPool = default, System.Collections.Generic.IDictionary&lt;string,Microsoft.Azure.Management.DataFactory.Models.NotebookParameter&gt; parameters = default, object executorSize = default, object conf = default, object driverSize = default, int? numExecutors = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class Microsoft.Azure.Management.DataFactory.Models.SynapseNotebookReference notebook, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; additionalProperties, string description, class System.Collections.Generic.IList`1&lt;class Microsoft.Azure.Management.DataFactory.Models.ActivityDependency&gt; dependsOn, class System.Collections.Generic.IList`1&lt;class Microsoft.Azure.Management.DataFactory.Models.UserProperty&gt; userProperties, class Microsoft.Azure.Management.DataFactory.Models.LinkedServiceReference linkedServiceName, class Microsoft.Azure.Management.DataFactory.Models.ActivityPolicy policy, class Microsoft.Azure.Management.DataFactory.Models.BigDataPoolParametrizationReference sparkPool, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.Azure.Management.DataFactory.Models.NotebookParameter&gt; parameters, object executorSize, object conf, object driverSize, valuetype System.Nullable`1&lt;int32&gt; numExecutors) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.DataFactory.Models.SynapseNotebookActivity.#ctor(System.String,Microsoft.Azure.Management.DataFactory.Models.SynapseNotebookReference,System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Collections.Generic.IList{Microsoft.Azure.Management.DataFactory.Models.ActivityDependency},System.Collections.Generic.IList{Microsoft.Azure.Management.DataFactory.Models.UserProperty},Microsoft.Azure.Management.DataFactory.Models.LinkedServiceReference,Microsoft.Azure.Management.DataFactory.Models.ActivityPolicy,Microsoft.Azure.Management.DataFactory.Models.BigDataPoolParametrizationReference,System.Collections.Generic.IDictionary{System.String,Microsoft.Azure.Management.DataFactory.Models.NotebookParameter},System.Object,System.Object,System.Object,System.Nullable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, notebook As SynapseNotebookReference, Optional additionalProperties As IDictionary(Of String, Object) = Nothing, Optional description As String = Nothing, Optional dependsOn As IList(Of ActivityDependency) = Nothing, Optional userProperties As IList(Of UserProperty) = Nothing, Optional linkedServiceName As LinkedServiceReference = Nothing, Optional policy As ActivityPolicy = Nothing, Optional sparkPool As BigDataPoolParametrizationReference = Nothing, Optional parameters As IDictionary(Of String, NotebookParameter) = Nothing, Optional executorSize As Object = Nothing, Optional conf As Object = Nothing, Optional driverSize As Object = Nothing, Optional numExecutors As Nullable(Of Integer) = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.Azure.Management.DataFactory.Models.SynapseNotebookActivity : string * Microsoft.Azure.Management.DataFactory.Models.SynapseNotebookReference * System.Collections.Generic.IDictionary&lt;string, obj&gt; * string * System.Collections.Generic.IList&lt;Microsoft.Azure.Management.DataFactory.Models.ActivityDependency&gt; * System.Collections.Generic.IList&lt;Microsoft.Azure.Management.DataFactory.Models.UserProperty&gt; * Microsoft.Azure.Management.DataFactory.Models.LinkedServiceReference * Microsoft.Azure.Management.DataFactory.Models.ActivityPolicy * Microsoft.Azure.Management.DataFactory.Models.BigDataPoolParametrizationReference * System.Collections.Generic.IDictionary&lt;string, Microsoft.Azure.Management.DataFactory.Models.NotebookParameter&gt; * obj * obj * obj * Nullable&lt;int&gt; -&gt; Microsoft.Azure.Management.DataFactory.Models.SynapseNotebookActivity" Usage="new Microsoft.Azure.Management.DataFactory.Models.SynapseNotebookActivity (name, notebook, additionalProperties, description, dependsOn, userProperties, linkedServiceName, policy, sparkPool, parameters, executorSize, conf, driverSize, numExecutors)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.DataFactory</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="notebook" Type="Microsoft.Azure.Management.DataFactory.Models.SynapseNotebookReference" />
        <Parameter Name="additionalProperties" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="description" Type="System.String" />
        <Parameter Name="dependsOn" Type="System.Collections.Generic.IList&lt;Microsoft.Azure.Management.DataFactory.Models.ActivityDependency&gt;" />
        <Parameter Name="userProperties" Type="System.Collections.Generic.IList&lt;Microsoft.Azure.Management.DataFactory.Models.UserProperty&gt;" />
        <Parameter Name="linkedServiceName" Type="Microsoft.Azure.Management.DataFactory.Models.LinkedServiceReference" />
        <Parameter Name="policy" Type="Microsoft.Azure.Management.DataFactory.Models.ActivityPolicy" />
        <Parameter Name="sparkPool" Type="Microsoft.Azure.Management.DataFactory.Models.BigDataPoolParametrizationReference" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.Azure.Management.DataFactory.Models.NotebookParameter&gt;" />
        <Parameter Name="executorSize" Type="System.Object" />
        <Parameter Name="conf" Type="System.Object" />
        <Parameter Name="driverSize" Type="System.Object" />
        <Parameter Name="numExecutors" Type="System.Nullable&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="name">Activity name.</param>
        <param name="notebook">Synapse notebook reference.</param>
        <param name="additionalProperties">Unmatched properties from the
            message are deserialized this collection</param>
        <param name="description">Activity description.</param>
        <param name="dependsOn">Activity depends on condition.</param>
        <param name="userProperties">Activity user properties.</param>
        <param name="linkedServiceName">Linked service reference.</param>
        <param name="policy">Activity policy.</param>
        <param name="sparkPool">The name of the big data pool which will be
            used to execute the notebook.</param>
        <param name="parameters">Notebook parameters.</param>
        <param name="executorSize">Number of core and memory to be used for
            executors allocated in the specified Spark pool for the session,
            which will be used for overriding 'executorCores' and
            'executorMemory' of the notebook you provide. Type: string (or
            Expression with resultType string).</param>
        <param name="conf">Spark configuration properties, which will
            override the 'conf' of the notebook you provide.</param>
        <param name="driverSize">Number of core and memory to be used for
            driver allocated in the specified Spark pool for the session, which
            will be used for overriding 'driverCores' and 'driverMemory' of the
            notebook you provide. Type: string (or Expression with resultType
            string).</param>
        <param name="numExecutors">Number of executors to launch for this
            session, which will override the 'numExecutors' of the notebook you
            provide.</param>
        <summary>
            Initializes a new instance of the SynapseNotebookActivity class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Conf">
      <MemberSignature Language="C#" Value="public object Conf { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Conf" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Management.DataFactory.Models.SynapseNotebookActivity.Conf" />
      <MemberSignature Language="VB.NET" Value="Public Property Conf As Object" />
      <MemberSignature Language="F#" Value="member this.Conf : obj with get, set" Usage="Microsoft.Azure.Management.DataFactory.Models.SynapseNotebookActivity.Conf" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.DataFactory</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Newtonsoft.Json.JsonProperty(PropertyName="typeProperties.conf")]</AttributeName>
          <AttributeName Language="F#">[&lt;Newtonsoft.Json.JsonProperty(PropertyName="typeProperties.conf")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets spark configuration properties, which will override
            the 'conf' of the notebook you provide.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DriverSize">
      <MemberSignature Language="C#" Value="public object DriverSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DriverSize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Management.DataFactory.Models.SynapseNotebookActivity.DriverSize" />
      <MemberSignature Language="VB.NET" Value="Public Property DriverSize As Object" />
      <MemberSignature Language="F#" Value="member this.DriverSize : obj with get, set" Usage="Microsoft.Azure.Management.DataFactory.Models.SynapseNotebookActivity.DriverSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.DataFactory</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Newtonsoft.Json.JsonProperty(PropertyName="typeProperties.driverSize")]</AttributeName>
          <AttributeName Language="F#">[&lt;Newtonsoft.Json.JsonProperty(PropertyName="typeProperties.driverSize")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets number of core and memory to be used for driver
            allocated in the specified Spark pool for the session, which will
            be used for overriding 'driverCores' and 'driverMemory' of the
            notebook you provide. Type: string (or Expression with resultType
            string).
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecutorSize">
      <MemberSignature Language="C#" Value="public object ExecutorSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ExecutorSize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Management.DataFactory.Models.SynapseNotebookActivity.ExecutorSize" />
      <MemberSignature Language="VB.NET" Value="Public Property ExecutorSize As Object" />
      <MemberSignature Language="F#" Value="member this.ExecutorSize : obj with get, set" Usage="Microsoft.Azure.Management.DataFactory.Models.SynapseNotebookActivity.ExecutorSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.DataFactory</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Newtonsoft.Json.JsonProperty(PropertyName="typeProperties.executorSize")]</AttributeName>
          <AttributeName Language="F#">[&lt;Newtonsoft.Json.JsonProperty(PropertyName="typeProperties.executorSize")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets number of core and memory to be used for executors
            allocated in the specified Spark pool for the session, which will
            be used for overriding 'executorCores' and 'executorMemory' of the
            notebook you provide. Type: string (or Expression with resultType
            string).
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Notebook">
      <MemberSignature Language="C#" Value="public Microsoft.Azure.Management.DataFactory.Models.SynapseNotebookReference Notebook { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Azure.Management.DataFactory.Models.SynapseNotebookReference Notebook" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Management.DataFactory.Models.SynapseNotebookActivity.Notebook" />
      <MemberSignature Language="VB.NET" Value="Public Property Notebook As SynapseNotebookReference" />
      <MemberSignature Language="F#" Value="member this.Notebook : Microsoft.Azure.Management.DataFactory.Models.SynapseNotebookReference with get, set" Usage="Microsoft.Azure.Management.DataFactory.Models.SynapseNotebookActivity.Notebook" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.DataFactory</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Newtonsoft.Json.JsonProperty(PropertyName="typeProperties.notebook")]</AttributeName>
          <AttributeName Language="F#">[&lt;Newtonsoft.Json.JsonProperty(PropertyName="typeProperties.notebook")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Management.DataFactory.Models.SynapseNotebookReference</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets synapse notebook reference.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumExecutors">
      <MemberSignature Language="C#" Value="public int? NumExecutors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int32&gt; NumExecutors" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Management.DataFactory.Models.SynapseNotebookActivity.NumExecutors" />
      <MemberSignature Language="VB.NET" Value="Public Property NumExecutors As Nullable(Of Integer)" />
      <MemberSignature Language="F#" Value="member this.NumExecutors : Nullable&lt;int&gt; with get, set" Usage="Microsoft.Azure.Management.DataFactory.Models.SynapseNotebookActivity.NumExecutors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.DataFactory</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Newtonsoft.Json.JsonProperty(PropertyName="typeProperties.numExecutors")]</AttributeName>
          <AttributeName Language="F#">[&lt;Newtonsoft.Json.JsonProperty(PropertyName="typeProperties.numExecutors")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets number of executors to launch for this session, which
            will override the 'numExecutors' of the notebook you provide.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameters">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,Microsoft.Azure.Management.DataFactory.Models.NotebookParameter&gt; Parameters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.Azure.Management.DataFactory.Models.NotebookParameter&gt; Parameters" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Management.DataFactory.Models.SynapseNotebookActivity.Parameters" />
      <MemberSignature Language="VB.NET" Value="Public Property Parameters As IDictionary(Of String, NotebookParameter)" />
      <MemberSignature Language="F#" Value="member this.Parameters : System.Collections.Generic.IDictionary&lt;string, Microsoft.Azure.Management.DataFactory.Models.NotebookParameter&gt; with get, set" Usage="Microsoft.Azure.Management.DataFactory.Models.SynapseNotebookActivity.Parameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.DataFactory</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Newtonsoft.Json.JsonProperty(PropertyName="typeProperties.parameters")]</AttributeName>
          <AttributeName Language="F#">[&lt;Newtonsoft.Json.JsonProperty(PropertyName="typeProperties.parameters")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,Microsoft.Azure.Management.DataFactory.Models.NotebookParameter&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets notebook parameters.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SparkPool">
      <MemberSignature Language="C#" Value="public Microsoft.Azure.Management.DataFactory.Models.BigDataPoolParametrizationReference SparkPool { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Azure.Management.DataFactory.Models.BigDataPoolParametrizationReference SparkPool" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Management.DataFactory.Models.SynapseNotebookActivity.SparkPool" />
      <MemberSignature Language="VB.NET" Value="Public Property SparkPool As BigDataPoolParametrizationReference" />
      <MemberSignature Language="F#" Value="member this.SparkPool : Microsoft.Azure.Management.DataFactory.Models.BigDataPoolParametrizationReference with get, set" Usage="Microsoft.Azure.Management.DataFactory.Models.SynapseNotebookActivity.SparkPool" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.DataFactory</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Newtonsoft.Json.JsonProperty(PropertyName="typeProperties.sparkPool")]</AttributeName>
          <AttributeName Language="F#">[&lt;Newtonsoft.Json.JsonProperty(PropertyName="typeProperties.sparkPool")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Management.DataFactory.Models.BigDataPoolParametrizationReference</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the name of the big data pool which will be used to
            execute the notebook.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public override void Validate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Validate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.DataFactory.Models.SynapseNotebookActivity.Validate" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Validate ()" />
      <MemberSignature Language="F#" Value="override this.Validate : unit -&gt; unit" Usage="synapseNotebookActivity.Validate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.DataFactory</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Validate the object.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
      </Docs>
    </Member>
  </Members>
</Type>
