<Type Name="TranslationRecognizer" FullName="Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer">
  <TypeSignature Language="C#" Value="public sealed class TranslationRecognizer : Microsoft.CognitiveServices.Speech.Recognizer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TranslationRecognizer extends Microsoft.CognitiveServices.Speech.Recognizer" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TranslationRecognizer&#xA;Inherits Recognizer" />
  <TypeSignature Language="F#" Value="type TranslationRecognizer = class&#xA;    inherit Recognizer" />
  <TypeSignature Language="C++ CLI" Value="public ref class TranslationRecognizer sealed : Microsoft::CognitiveServices::Speech::Recognizer" />
  <TypeSignature Language="C++ CX" Value="public ref class TranslationRecognizer sealed : Microsoft::CognitiveServices::Speech::Recognizer" />
  <TypeSignature Language="C++ WINRT" Value="class TranslationRecognizer sealed : Microsoft::CognitiveServices::Speech::Recognizer" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.CognitiveServices.Speech.Recognizer</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
             Performs translation on the speech input.
             </summary>
    <remarks>To be added.</remarks>
    <example>
             An example to use the translation recognizer on a audio file and listen to events generated by the recognizer.
             <code>
             static void MySessionEventHandler(object sender, SessionEventArgs e)
             {
                Console.WriteLine(String.Format("Translation recognition: Session event: {0} ", e.ToString()));
             }
            
             static void MyIntermediateResultEventHandler(object sender, TranslatioTextResultEventArgs e)
             {
                Console.WriteLine(string.Format(CultureInfo.InvariantCulture,"Translation recognition: Intermediate result: {0} ", e.ToString()));
             }
            
             static void MyFinalResultEventHandler(object sender, TranslationTextResultEventArgs e)
             {
                Console.WriteLine(string.Format(CultureInfo.InvariantCulture,"Translation recognition: Final result: {0} ", e.ToString()));
             }
            
             static void MyErrorHandler(object sender, RecognitionErrorEventArgs e)
             {
                Console.WriteLine(string.Format(CultureInfo.InvariantCulture,"Translation recognition: Error information: {0} ", e.ToString()));
             }
            
             static void TranslationRecognizerSample()
             {
               TranslationRecognizer reco = factory.CreateTranslationRecognizer("audioFileName", "en-us", "de-de");
            
               reco.OnSessionEvent += MySessionEventHandler;
               reco.FinalResultReceived += MyFinalResultEventHandler;
               reco.IntermediateResultReceived += MyIntermediateResultEventHandler;
               reco.RecognitionErrorRaised += MyErrorHandler;
            
               // Starts recognition.
               var result = await reco.RecognizeAsync();
            
               reco.OnSessionEvent -= MySessionEventHandler;
               reco.FinalResultReceived -= MyFinalResultEventHandler;
               reco.IntermediateResultReceived -= MyIntermediateResultEventHandler;
               reco.RecognitionErrorRaised -= MyErrorHandler;
            
               Console.WriteLine("Translation Recognition: Recognition result: " + result);
             }
             </code></example>
    <example>
             An example to use the translation recognizer on an audio file and listen to events generated by the recognizer.
             <code>
             static void MySessionEventHandler(object sender, SessionEventArgs e)
             {
                 Console.WriteLine(String.Format("Translation recognition: Session event: {0} ", e.ToString()));
             }
            
             static void MyIntermediateResultEventHandler(object sender, TranslationTextResultEventArgs e)
             {
                 Console.WriteLine(string.Format(CultureInfo.InvariantCulture, "Translation recognition: Intermediate result: {0} ", e.ToString()));
             }
            
             static void MyFinalResultEventHandler(object sender, TranslationTextResultEventArgs e)
             {
                 Console.WriteLine(string.Format(CultureInfo.InvariantCulture, "Translation recognition: Final result: {0} ", e.ToString()));
             }
            
             static void MyErrorHandler(object sender, RecognitionErrorEventArgs e)
             {
                 Console.WriteLine(string.Format(CultureInfo.InvariantCulture, "Translation recognition: Error information: {0} ", e.ToString()));
             }
            
             static async Task TranslationRecognizerSample()
             {
                 var factory = SpeechFactory.FromSubscription("YourSubscriptionKey", "YourServiceRegion");
                 string fromLanguage = "en-US";
                 var toLanguages = new List&lt;string&gt;() { "de-DE" };
                 TranslationRecognizer reco = factory.CreateTranslationRecognizerWithFileInput("audioFileName", fromLanguage, toLanguages);
            
                 reco.OnSessionEvent += MySessionEventHandler;
                 reco.FinalResultReceived += MyFinalResultEventHandler;
                 reco.IntermediateResultReceived += MyIntermediateResultEventHandler;
                 reco.RecognitionErrorRaised += MyErrorHandler;
            
                 // Starts recognition.
                 var result = await reco.RecognizeAsync();
            
                 reco.OnSessionEvent -= MySessionEventHandler;
                 reco.FinalResultReceived -= MyFinalResultEventHandler;
                 reco.IntermediateResultReceived -= MyIntermediateResultEventHandler;
                 reco.RecognitionErrorRaised -= MyErrorHandler;
            
                 Console.WriteLine("Translation Recognition: Recognition result: " + result);
             }
             </code></example>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="translationRecognizer.Dispose disposing" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="C++ CX" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="C++ WINRT" Value=" override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalResultReceived">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Microsoft.CognitiveServices.Speech.Translation.TranslationTextResultEventArgs&gt; FinalResultReceived;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Microsoft.CognitiveServices.Speech.Translation.TranslationTextResultEventArgs&gt; FinalResultReceived" />
      <MemberSignature Language="DocId" Value="E:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.FinalResultReceived" />
      <MemberSignature Language="VB.NET" Value="Public Event FinalResultReceived As EventHandler(Of TranslationTextResultEventArgs) " />
      <MemberSignature Language="F#" Value="member this.FinalResultReceived : EventHandler&lt;Microsoft.CognitiveServices.Speech.Translation.TranslationTextResultEventArgs&gt; " Usage="member this.FinalResultReceived : System.EventHandler&lt;Microsoft.CognitiveServices.Speech.Translation.TranslationTextResultEventArgs&gt; " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;Microsoft::CognitiveServices::Speech::Translation::TranslationTextResultEventArgs ^&gt; ^ FinalResultReceived;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Microsoft.CognitiveServices.Speech.Translation.TranslationTextResultEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The event <see cref="E:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.FinalResultReceived" /> signals that a final recognition result is received.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IntermediateResultReceived">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Microsoft.CognitiveServices.Speech.Translation.TranslationTextResultEventArgs&gt; IntermediateResultReceived;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Microsoft.CognitiveServices.Speech.Translation.TranslationTextResultEventArgs&gt; IntermediateResultReceived" />
      <MemberSignature Language="DocId" Value="E:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.IntermediateResultReceived" />
      <MemberSignature Language="VB.NET" Value="Public Event IntermediateResultReceived As EventHandler(Of TranslationTextResultEventArgs) " />
      <MemberSignature Language="F#" Value="member this.IntermediateResultReceived : EventHandler&lt;Microsoft.CognitiveServices.Speech.Translation.TranslationTextResultEventArgs&gt; " Usage="member this.IntermediateResultReceived : System.EventHandler&lt;Microsoft.CognitiveServices.Speech.Translation.TranslationTextResultEventArgs&gt; " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;Microsoft::CognitiveServices::Speech::Translation::TranslationTextResultEventArgs ^&gt; ^ IntermediateResultReceived;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Microsoft.CognitiveServices.Speech.Translation.TranslationTextResultEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The event <see cref="E:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.IntermediateResultReceived" /> signals that an intermediate recognition result is received.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVoiceOutputDesired">
      <MemberSignature Language="C#" Value="public bool IsVoiceOutputDesired { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVoiceOutputDesired" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.IsVoiceOutputDesired" />
      <MemberSignature Language="VB.NET" Value="Public Property IsVoiceOutputDesired As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsVoiceOutputDesired : bool with get, set" Usage="Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.IsVoiceOutputDesired" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVoiceOutputDesired { bool get(); void set(bool value); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property bool IsVoiceOutputDesired { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets/sets a boolean value which indicates whether a voice output of the translated text is desired.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameters">
      <MemberSignature Language="C#" Value="public Microsoft.CognitiveServices.Speech.IRecognizerParameters Parameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CognitiveServices.Speech.IRecognizerParameters Parameters" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.Parameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parameters As IRecognizerParameters" />
      <MemberSignature Language="F#" Value="member this.Parameters : Microsoft.CognitiveServices.Speech.IRecognizerParameters" Usage="Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.Parameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CognitiveServices::Speech::IRecognizerParameters ^ Parameters { Microsoft::CognitiveServices::Speech::IRecognizerParameters ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Microsoft::CognitiveServices::Speech::IRecognizerParameters ^ Parameters { Microsoft::CognitiveServices::Speech::IRecognizerParameters ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CognitiveServices.Speech.IRecognizerParameters</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The collection of parameters and their values defined for this <see cref="T:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RecognitionErrorRaised">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Microsoft.CognitiveServices.Speech.RecognitionErrorEventArgs&gt; RecognitionErrorRaised;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Microsoft.CognitiveServices.Speech.RecognitionErrorEventArgs&gt; RecognitionErrorRaised" />
      <MemberSignature Language="DocId" Value="E:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.RecognitionErrorRaised" />
      <MemberSignature Language="VB.NET" Value="Public Event RecognitionErrorRaised As EventHandler(Of RecognitionErrorEventArgs) " />
      <MemberSignature Language="F#" Value="member this.RecognitionErrorRaised : EventHandler&lt;Microsoft.CognitiveServices.Speech.RecognitionErrorEventArgs&gt; " Usage="member this.RecognitionErrorRaised : System.EventHandler&lt;Microsoft.CognitiveServices.Speech.RecognitionErrorEventArgs&gt; " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;Microsoft::CognitiveServices::Speech::RecognitionErrorEventArgs ^&gt; ^ RecognitionErrorRaised;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Microsoft.CognitiveServices.Speech.RecognitionErrorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The event <see cref="E:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.RecognitionErrorRaised" /> signals that an error occurred during recognition.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RecognizeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.CognitiveServices.Speech.Translation.TranslationTextResult&gt; RecognizeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.CognitiveServices.Speech.Translation.TranslationTextResult&gt; RecognizeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.RecognizeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function RecognizeAsync () As Task(Of TranslationTextResult)" />
      <MemberSignature Language="F#" Value="member this.RecognizeAsync : unit -&gt; System.Threading.Tasks.Task&lt;Microsoft.CognitiveServices.Speech.Translation.TranslationTextResult&gt;" Usage="translationRecognizer.RecognizeAsync " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;Microsoft::CognitiveServices::Speech::Translation::TranslationTextResult ^&gt; ^ RecognizeAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.CognitiveServices.Speech.Translation.TranslationTextResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
             Starts recognition and translation, and stops after the first utterance is recognized. The task returns the translation text as result.
             </summary>
        <returns>A task representing the recognition operation. The task returns a value of <see cref="T:Microsoft.CognitiveServices.Speech.Translation.TranslationTextResult" /></returns>
        <remarks>To be added.</remarks>
        <example>
             Create a translation recognizer, get and print the recognition result
             <code>
             static void TranslationRecognizerSample()
             {
               TranslationRecognizer reco = factory.CreateTranslationRecognizer("audioFileName", "en-us", "de-de");
            
               // Starts recognition.
               var result = await reco.RecognizeAsync();
            
               Console.WriteLine("Translation Recognition: Recognition result: " + result);
             }
             </code></example>
        <example>
             Create a translation recognizer, get and print the recognition result
             <code>
             static async Task TranslationRecognizerSample()
             {
                 var factory = SpeechFactory.FromSubscription("YourSubscriptionKey", "YourServiceRegion");
                 string fromLanguage = "en-US";
                 var toLanguages = new List&lt;string&gt;() { "de-DE" };
                 Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer reco = factory.CreateTranslationRecognizerWithFileInput("audioFileName", fromLanguage, toLanguages);
            
                 // Starts recognition.
                 var result = await reco.RecognizeAsync();
            
                 Console.WriteLine("Translation Recognition: Recognition result: " + result);
             }
             </code></example>
      </Docs>
    </Member>
    <Member MemberName="SourceLanguage">
      <MemberSignature Language="C#" Value="public string SourceLanguage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SourceLanguage" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.SourceLanguage" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SourceLanguage As String" />
      <MemberSignature Language="F#" Value="member this.SourceLanguage : string" Usage="Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.SourceLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SourceLanguage { System::String ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Platform::String ^ SourceLanguage { Platform::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the language name that was set when the recognizer was created.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartContinuousRecognitionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartContinuousRecognitionAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartContinuousRecognitionAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.StartContinuousRecognitionAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function StartContinuousRecognitionAsync () As Task" />
      <MemberSignature Language="F#" Value="member this.StartContinuousRecognitionAsync : unit -&gt; System.Threading.Tasks.Task" Usage="translationRecognizer.StartContinuousRecognitionAsync " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartContinuousRecognitionAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Starts recognition and translation on a continous audio stream, until StopContinuousRecognitionAsync() is called.
            User must subscribe to events to receive translation results.
            </summary>
        <returns>A task representing the asynchronous operation that starts the recognition.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartKeywordRecognitionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartKeywordRecognitionAsync (Microsoft.CognitiveServices.Speech.KeywordRecognitionModel model);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartKeywordRecognitionAsync(class Microsoft.CognitiveServices.Speech.KeywordRecognitionModel model) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.StartKeywordRecognitionAsync(Microsoft.CognitiveServices.Speech.KeywordRecognitionModel)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartKeywordRecognitionAsync (model As KeywordRecognitionModel) As Task" />
      <MemberSignature Language="F#" Value="member this.StartKeywordRecognitionAsync : Microsoft.CognitiveServices.Speech.KeywordRecognitionModel -&gt; System.Threading.Tasks.Task" Usage="translationRecognizer.StartKeywordRecognitionAsync model" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StartKeywordRecognitionAsync(Microsoft::CognitiveServices::Speech::KeywordRecognitionModel ^ model);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.CognitiveServices.Speech.KeywordRecognitionModel" />
      </Parameters>
      <Docs>
        <param name="model">The keyword recognition model that specifies the keyword to be recognized.</param>
        <summary>
            Starts speech recognition on a continuous audio stream with keyword spotting, until StopKeywordRecognitionAsync() is called.
            User must subscribe to events to receive recognition results.
            Note: Key word spotting functionality is only available on the Cognitive Services Device SDK. This functionality is currently not included in the SDK itself.
            </summary>
        <returns>A task representing the asynchronous operation that starts the recognition.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopContinuousRecognitionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StopContinuousRecognitionAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StopContinuousRecognitionAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.StopContinuousRecognitionAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function StopContinuousRecognitionAsync () As Task" />
      <MemberSignature Language="F#" Value="member this.StopContinuousRecognitionAsync : unit -&gt; System.Threading.Tasks.Task" Usage="translationRecognizer.StopContinuousRecognitionAsync " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StopContinuousRecognitionAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Stops continuous recognition and translation.
            </summary>
        <returns>A task representing the asynchronous operation that stops the translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopKeywordRecognitionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StopKeywordRecognitionAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StopKeywordRecognitionAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.StopKeywordRecognitionAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function StopKeywordRecognitionAsync () As Task" />
      <MemberSignature Language="F#" Value="member this.StopKeywordRecognitionAsync : unit -&gt; System.Threading.Tasks.Task" Usage="translationRecognizer.StopKeywordRecognitionAsync " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ StopKeywordRecognitionAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Stops continuous speech recognition with keyword spotting.
            Note: Key word spotting functionality is only available on the Cognitive Services Device SDK. This functionality is currently not included in the SDK itself.
            </summary>
        <returns>A task representing the asynchronous operation that stops the recognition.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SynthesisResultReceived">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Microsoft.CognitiveServices.Speech.Translation.TranslationSynthesisResultEventArgs&gt; SynthesisResultReceived;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Microsoft.CognitiveServices.Speech.Translation.TranslationSynthesisResultEventArgs&gt; SynthesisResultReceived" />
      <MemberSignature Language="DocId" Value="E:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.SynthesisResultReceived" />
      <MemberSignature Language="VB.NET" Value="Public Event SynthesisResultReceived As EventHandler(Of TranslationSynthesisResultEventArgs) " />
      <MemberSignature Language="F#" Value="member this.SynthesisResultReceived : EventHandler&lt;Microsoft.CognitiveServices.Speech.Translation.TranslationSynthesisResultEventArgs&gt; " Usage="member this.SynthesisResultReceived : System.EventHandler&lt;Microsoft.CognitiveServices.Speech.Translation.TranslationSynthesisResultEventArgs&gt; " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;Microsoft::CognitiveServices::Speech::Translation::TranslationSynthesisResultEventArgs ^&gt; ^ SynthesisResultReceived;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Microsoft.CognitiveServices.Speech.Translation.TranslationSynthesisResultEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The event <see cref="E:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.SynthesisResultReceived" /> signals that a translation synthesis result is received.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetLanguages">
      <MemberSignature Language="C#" Value="public string[] TargetLanguages { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] TargetLanguages" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.TargetLanguages" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TargetLanguages As String()" />
      <MemberSignature Language="F#" Value="member this.TargetLanguages : string[]" Usage="Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.TargetLanguages" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ TargetLanguages { cli::array &lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Platform::Array &lt;Platform::String ^&gt; ^ TargetLanguages { Platform::Array &lt;Platform::String ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets target languages for translation that were set when the recognizer was created.
            The language is specified in BCP-47 format. The translation will provide translated text for each of language.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>