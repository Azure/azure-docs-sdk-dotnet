<Type Name="TranslationRecognizer" FullName="Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer">
  <TypeSignature Language="C#" Value="public sealed class TranslationRecognizer : Microsoft.CognitiveServices.Speech.Recognizer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TranslationRecognizer extends Microsoft.CognitiveServices.Speech.Recognizer" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TranslationRecognizer&#xA;Inherits Recognizer" />
  <TypeSignature Language="F#" Value="type TranslationRecognizer = class&#xA;    inherit Recognizer" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.CognitiveServices.Speech.Recognizer</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
             Performs translation on the speech input.
             </summary>
    <remarks>To be added.</remarks>
    <example>
             An example to use the translation recognizer from microphone and listen to events generated by the recognizer.
             <code>
             public async Task TranslationContinuousRecognitionAsync()
             {
                 // Creates an instance of a speech factory with specified subscription key and service region. 
                 // Replace with your own subscription key and service region (e.g., "westus").
                 var factory = SpeechFactory.FromSubscription("YourSubscriptionKey", "YourServiceRegion");
            
                 // Sets source and target languages.
                 string fromLanguage = "en-US";
                 <![CDATA[List<string> toLanguages = new List<string>() { "de" };]]>
            
                 // Sets voice name of synthesis output.
                 const string GermanVoice = "de-DE-Hedda";
            
                 // Creates a translation recognizer using microphone as audio input, and requires voice output.
                 using (var recognizer = factory.CreateTranslationRecognizer(fromLanguage, toLanguages, GermanVoice))
                 {
                     // Subscribes to events.
                     recognizer.IntermediateResultReceived += (s, e) =&gt;
                     {
                         Console.WriteLine($"\nPartial result: recognized in {fromLanguage}: {e.Result.Text}.");
                         if (e.Result.TranslationStatus == TranslationStatus.Success)
                         {
                             foreach (var element in e.Result.Translations)
                             {
                                 Console.WriteLine($"    Translated into {element.Key}: {element.Value}");
                             }
                         }
                     };
            
                     recognizer.FinalResultReceived += (s, e) =&gt;
                     {
                         var result = e.Result;
                         if (result.RecognitionStatus == RecognitionStatus.Recognized)
                         {
                             Console.WriteLine($"\nFinal result: Status: {result.RecognitionStatus.ToString()}, recognized text in {fromLanguage}: {result.Text}.");
                             if (result.TranslationStatus == TranslationStatus.Success)
                             {
                                 foreach (var element in result.Translations)
                                 {
                                     Console.WriteLine($"    Translated into {element.Key}: {element.Value}");
                                 }
                             }
                         }
                     };
            
                     recognizer.SynthesisResultReceived += (s, e) =&gt;
                     {
                         if (e.Result.Status == SynthesisStatus.Success)
                         {
                             Console.WriteLine($"Synthesis result received. Size of audio data: {e.Result.Audio.Length}");
                         }
                         else if (e.Result.Status == SynthesisStatus.SynthesisEnd)
                         {
                             Console.WriteLine($"Synthesis result: end of synthesis result.");
                         }
                         else
                         {
                             Console.WriteLine($"Synthesis error. Status: {e.Result.Status.ToString()}, Failure reason: {e.Result.FailureReason}");
                         }
                     };
            
                     recognizer.RecognitionErrorRaised += (s, e) =&gt;
                     {
                         Console.WriteLine($"\nAn error occurred. Status: {e.Status.ToString()}");
                     };
            
                     recognizer.OnSessionEvent += (s, e) =&gt;
                     {
                         Console.WriteLine($"\nSession event. Event: {e.EventType.ToString()}.");
                     };
            
                     // Starts continuous recognition. Uses StopContinuousRecognitionAsync() to stop recognition.
                     Console.WriteLine("Say something...");
                     await recognizer.StartContinuousRecognitionAsync().ConfigureAwait(false);
            
                     do
                     {
                         Console.WriteLine("Press Enter to stop");
                     } while (Console.ReadKey().Key != ConsoleKey.Enter);
            
                     // Stops continuous recognition.
                     await recognizer.StopContinuousRecognitionAsync().ConfigureAwait(false);
                 }
             }
             </code></example>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="translationRecognizer.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalResultReceived">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Microsoft.CognitiveServices.Speech.Translation.TranslationTextResultEventArgs&gt; FinalResultReceived;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Microsoft.CognitiveServices.Speech.Translation.TranslationTextResultEventArgs&gt; FinalResultReceived" />
      <MemberSignature Language="DocId" Value="E:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.FinalResultReceived" />
      <MemberSignature Language="VB.NET" Value="Public Event FinalResultReceived As EventHandler(Of TranslationTextResultEventArgs) " />
      <MemberSignature Language="F#" Value="member this.FinalResultReceived : EventHandler&lt;Microsoft.CognitiveServices.Speech.Translation.TranslationTextResultEventArgs&gt; " Usage="member this.FinalResultReceived : System.EventHandler&lt;Microsoft.CognitiveServices.Speech.Translation.TranslationTextResultEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Microsoft.CognitiveServices.Speech.Translation.TranslationTextResultEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The event <see cref="E:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.FinalResultReceived" /> signals that a final recognition result is received.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IntermediateResultReceived">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Microsoft.CognitiveServices.Speech.Translation.TranslationTextResultEventArgs&gt; IntermediateResultReceived;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Microsoft.CognitiveServices.Speech.Translation.TranslationTextResultEventArgs&gt; IntermediateResultReceived" />
      <MemberSignature Language="DocId" Value="E:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.IntermediateResultReceived" />
      <MemberSignature Language="VB.NET" Value="Public Event IntermediateResultReceived As EventHandler(Of TranslationTextResultEventArgs) " />
      <MemberSignature Language="F#" Value="member this.IntermediateResultReceived : EventHandler&lt;Microsoft.CognitiveServices.Speech.Translation.TranslationTextResultEventArgs&gt; " Usage="member this.IntermediateResultReceived : System.EventHandler&lt;Microsoft.CognitiveServices.Speech.Translation.TranslationTextResultEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Microsoft.CognitiveServices.Speech.Translation.TranslationTextResultEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The event <see cref="E:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.IntermediateResultReceived" /> signals that an intermediate recognition result is received.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputVoiceName">
      <MemberSignature Language="C#" Value="public string OutputVoiceName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OutputVoiceName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.OutputVoiceName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OutputVoiceName As String" />
      <MemberSignature Language="F#" Value="member this.OutputVoiceName : string" Usage="Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.OutputVoiceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the name of output voice.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameters">
      <MemberSignature Language="C#" Value="public Microsoft.CognitiveServices.Speech.IRecognizerParameters Parameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CognitiveServices.Speech.IRecognizerParameters Parameters" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.Parameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parameters As IRecognizerParameters" />
      <MemberSignature Language="F#" Value="member this.Parameters : Microsoft.CognitiveServices.Speech.IRecognizerParameters" Usage="Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.Parameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CognitiveServices.Speech.IRecognizerParameters</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The collection of parameters and their values defined for this <see cref="T:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RecognitionErrorRaised">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Microsoft.CognitiveServices.Speech.RecognitionErrorEventArgs&gt; RecognitionErrorRaised;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Microsoft.CognitiveServices.Speech.RecognitionErrorEventArgs&gt; RecognitionErrorRaised" />
      <MemberSignature Language="DocId" Value="E:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.RecognitionErrorRaised" />
      <MemberSignature Language="VB.NET" Value="Public Event RecognitionErrorRaised As EventHandler(Of RecognitionErrorEventArgs) " />
      <MemberSignature Language="F#" Value="member this.RecognitionErrorRaised : EventHandler&lt;Microsoft.CognitiveServices.Speech.RecognitionErrorEventArgs&gt; " Usage="member this.RecognitionErrorRaised : System.EventHandler&lt;Microsoft.CognitiveServices.Speech.RecognitionErrorEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Microsoft.CognitiveServices.Speech.RecognitionErrorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The event <see cref="E:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.RecognitionErrorRaised" /> signals that an error occurred during recognition.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RecognizeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.CognitiveServices.Speech.Translation.TranslationTextResult&gt; RecognizeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.CognitiveServices.Speech.Translation.TranslationTextResult&gt; RecognizeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.RecognizeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function RecognizeAsync () As Task(Of TranslationTextResult)" />
      <MemberSignature Language="F#" Value="member this.RecognizeAsync : unit -&gt; System.Threading.Tasks.Task&lt;Microsoft.CognitiveServices.Speech.Translation.TranslationTextResult&gt;" Usage="translationRecognizer.RecognizeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.CognitiveServices.Speech.Translation.TranslationTextResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
             Starts recognition and translation, and stops after the first utterance is recognized. The task returns the translation text as result.
             Note: RecognizeAsync() returns when the first utterance has been recognized, so it is suitable only for single shot recognition like command or query. For long-running recognition, use StartContinuousRecognitionAsync() instead.
             </summary>
        <returns>A task representing the recognition operation. The task returns a value of <see cref="T:Microsoft.CognitiveServices.Speech.Translation.TranslationTextResult" /></returns>
        <remarks>To be added.</remarks>
        <example>
             Create a translation recognizer, get and print the recognition result
             <code>
             public async Task TranslationSingleShotRecognitionAsync()
             {
                 // Creates an instance of a speech factory with specified subscription key and service region. 
                 // Replace with your own subscription key and service region (e.g., "westus").
                 var factory = SpeechFactory.FromSubscription("YourSubscriptionKey", "YourServiceRegion");
            
                 string fromLanguage = "en-US";
                 <![CDATA[var toLanguages = new List<string>() { "de" };]]>
            
                 // Creates a translation recognizer.
                 using (var recognizer = factory.CreateTranslationRecognizer(fromLanguage, toLanguages))
                 {
                     // Starts recognizing.
                     Console.WriteLine("Say something...");
            
                     // Performs recognition.
                     // RecognizeAsync() returns when the first utterance has been recognized, so it is suitable 
                     // only for single shot recognition like command or query. For long-running recognition, use
                     // StartContinuousRecognitionAsync() instead.
                     var result = await recognizer.RecognizeAsync();
            
                     if (result.RecognitionStatus == RecognitionStatus.Recognized)
                     {
                         Console.WriteLine($"\nFinal result: Status: {result.RecognitionStatus.ToString()}, recognized text: {result.Text}.");
                         if (result.TranslationStatus == TranslationStatus.Success)
                         {
                             foreach (var element in result.Translations)
                             {
                                 Console.WriteLine($"    Translated into {element.Key}: {element.Value}");
                             }
                         }
                     }
                 }
             }
             </code></example>
      </Docs>
    </Member>
    <Member MemberName="SourceLanguage">
      <MemberSignature Language="C#" Value="public string SourceLanguage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SourceLanguage" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.SourceLanguage" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SourceLanguage As String" />
      <MemberSignature Language="F#" Value="member this.SourceLanguage : string" Usage="Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.SourceLanguage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the language name that was set when the recognizer was created.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartContinuousRecognitionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartContinuousRecognitionAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartContinuousRecognitionAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.StartContinuousRecognitionAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function StartContinuousRecognitionAsync () As Task" />
      <MemberSignature Language="F#" Value="member this.StartContinuousRecognitionAsync : unit -&gt; System.Threading.Tasks.Task" Usage="translationRecognizer.StartContinuousRecognitionAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Starts recognition and translation on a continous audio stream, until StopContinuousRecognitionAsync() is called.
            User must subscribe to events to receive translation results.
            </summary>
        <returns>A task representing the asynchronous operation that starts the recognition.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartKeywordRecognitionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartKeywordRecognitionAsync (Microsoft.CognitiveServices.Speech.KeywordRecognitionModel model);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartKeywordRecognitionAsync(class Microsoft.CognitiveServices.Speech.KeywordRecognitionModel model) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.StartKeywordRecognitionAsync(Microsoft.CognitiveServices.Speech.KeywordRecognitionModel)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartKeywordRecognitionAsync (model As KeywordRecognitionModel) As Task" />
      <MemberSignature Language="F#" Value="member this.StartKeywordRecognitionAsync : Microsoft.CognitiveServices.Speech.KeywordRecognitionModel -&gt; System.Threading.Tasks.Task" Usage="translationRecognizer.StartKeywordRecognitionAsync model" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="Microsoft.CognitiveServices.Speech.KeywordRecognitionModel" />
      </Parameters>
      <Docs>
        <param name="model">The keyword recognition model that specifies the keyword to be recognized.</param>
        <summary>
            Starts speech recognition on a continuous audio stream with keyword spotting, until StopKeywordRecognitionAsync() is called.
            User must subscribe to events to receive recognition results.
            Note: Key word spotting functionality is only available on the Cognitive Services Device SDK. This functionality is currently not included in the SDK itself.
            </summary>
        <returns>A task representing the asynchronous operation that starts the recognition.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopContinuousRecognitionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StopContinuousRecognitionAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StopContinuousRecognitionAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.StopContinuousRecognitionAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function StopContinuousRecognitionAsync () As Task" />
      <MemberSignature Language="F#" Value="member this.StopContinuousRecognitionAsync : unit -&gt; System.Threading.Tasks.Task" Usage="translationRecognizer.StopContinuousRecognitionAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Stops continuous recognition and translation.
            </summary>
        <returns>A task representing the asynchronous operation that stops the translation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopKeywordRecognitionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StopKeywordRecognitionAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StopKeywordRecognitionAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.StopKeywordRecognitionAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function StopKeywordRecognitionAsync () As Task" />
      <MemberSignature Language="F#" Value="member this.StopKeywordRecognitionAsync : unit -&gt; System.Threading.Tasks.Task" Usage="translationRecognizer.StopKeywordRecognitionAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Stops continuous speech recognition with keyword spotting.
            Note: Key word spotting functionality is only available on the Cognitive Services Device SDK. This functionality is currently not included in the SDK itself.
            </summary>
        <returns>A task representing the asynchronous operation that stops the recognition.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SynthesisResultReceived">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Microsoft.CognitiveServices.Speech.Translation.TranslationSynthesisResultEventArgs&gt; SynthesisResultReceived;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Microsoft.CognitiveServices.Speech.Translation.TranslationSynthesisResultEventArgs&gt; SynthesisResultReceived" />
      <MemberSignature Language="DocId" Value="E:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.SynthesisResultReceived" />
      <MemberSignature Language="VB.NET" Value="Public Event SynthesisResultReceived As EventHandler(Of TranslationSynthesisResultEventArgs) " />
      <MemberSignature Language="F#" Value="member this.SynthesisResultReceived : EventHandler&lt;Microsoft.CognitiveServices.Speech.Translation.TranslationSynthesisResultEventArgs&gt; " Usage="member this.SynthesisResultReceived : System.EventHandler&lt;Microsoft.CognitiveServices.Speech.Translation.TranslationSynthesisResultEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Microsoft.CognitiveServices.Speech.Translation.TranslationSynthesisResultEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The event <see cref="E:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.SynthesisResultReceived" /> signals that a translation synthesis result is received.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetLanguages">
      <MemberSignature Language="C#" Value="public string[] TargetLanguages { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] TargetLanguages" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.TargetLanguages" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TargetLanguages As String()" />
      <MemberSignature Language="F#" Value="member this.TargetLanguages : string[]" Usage="Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer.TargetLanguages" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets target languages for translation that were set when the recognizer was created.
            The language is specified in BCP-47 format. The translation will provide translated text for each of language.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>