<Type Name="IReviews" FullName="Microsoft.CognitiveServices.ContentModerator.IReviews">
  <TypeSignature Language="C#" Value="public interface IReviews" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IReviews" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CognitiveServices.ContentModerator.IReviews" />
  <TypeSignature Language="VB.NET" Value="Public Interface IReviews" />
  <TypeSignature Language="F#" Value="type IReviews = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.CognitiveServices.ContentModerator</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            Reviews operations.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddVideoFrameStreamWithHttpMessagesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&gt; AddVideoFrameStreamWithHttpMessagesAsync (string contentType, string teamName, string reviewId, System.IO.Stream frameImageZip, string frameMetadata, Nullable&lt;int&gt; timescale = null, System.Collections.Generic.Dictionary&lt;string,System.Collections.Generic.List&lt;string&gt;&gt; customHeaders = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.HttpOperationResponse&gt; AddVideoFrameStreamWithHttpMessagesAsync(string contentType, string teamName, string reviewId, class System.IO.Stream frameImageZip, string frameMetadata, valuetype System.Nullable`1&lt;int32&gt; timescale, class System.Collections.Generic.Dictionary`2&lt;string, class System.Collections.Generic.List`1&lt;string&gt;&gt; customHeaders, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.ContentModerator.IReviews.AddVideoFrameStreamWithHttpMessagesAsync(System.String,System.String,System.String,System.IO.Stream,System.String,System.Nullable{System.Int32},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member AddVideoFrameStreamWithHttpMessagesAsync : string * string * string * System.IO.Stream * string * Nullable&lt;int&gt; * System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.List&lt;string&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&gt;" Usage="iReviews.AddVideoFrameStreamWithHttpMessagesAsync (contentType, teamName, reviewId, frameImageZip, frameMetadata, timescale, customHeaders, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.CognitiveServices.ContentModerator</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contentType" Type="System.String" />
        <Parameter Name="teamName" Type="System.String" />
        <Parameter Name="reviewId" Type="System.String" />
        <Parameter Name="frameImageZip" Type="System.IO.Stream" />
        <Parameter Name="frameMetadata" Type="System.String" />
        <Parameter Name="timescale" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="customHeaders" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Collections.Generic.List&lt;System.String&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="contentType">
            The content type.
            </param>
        <param name="teamName">
            Your team name.
            </param>
        <param name="reviewId">
            Id of the review.
            </param>
        <param name="frameImageZip">
            Zip file containing frame images.
            </param>
        <param name="frameMetadata">
            Metadata of the frame.
            </param>
        <param name="timescale">
            Timescale of the video .
            </param>
        <param name="customHeaders">
            The headers that will be added to request.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            Use this method to add frames for a video review.Timescale: This
            parameter is a factor which is used to convert the timestamp on a
            frame into milliseconds. Timescale is provided in the output of the
            Content Moderator video media processor on the Azure Media Services
            platform.Timescale in the Video Moderation output is Ticks/Second.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.CognitiveServices.ContentModerator.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
        <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AddVideoFrameUrlWithHttpMessagesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&gt; AddVideoFrameUrlWithHttpMessagesAsync (string contentType, string teamName, string reviewId, System.Collections.Generic.IList&lt;Microsoft.CognitiveServices.ContentModerator.Models.VideoFrameBodyItem&gt; videoFrameBody, Nullable&lt;int&gt; timescale = null, System.Collections.Generic.Dictionary&lt;string,System.Collections.Generic.List&lt;string&gt;&gt; customHeaders = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.HttpOperationResponse&gt; AddVideoFrameUrlWithHttpMessagesAsync(string contentType, string teamName, string reviewId, class System.Collections.Generic.IList`1&lt;class Microsoft.CognitiveServices.ContentModerator.Models.VideoFrameBodyItem&gt; videoFrameBody, valuetype System.Nullable`1&lt;int32&gt; timescale, class System.Collections.Generic.Dictionary`2&lt;string, class System.Collections.Generic.List`1&lt;string&gt;&gt; customHeaders, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.ContentModerator.IReviews.AddVideoFrameUrlWithHttpMessagesAsync(System.String,System.String,System.String,System.Collections.Generic.IList{Microsoft.CognitiveServices.ContentModerator.Models.VideoFrameBodyItem},System.Nullable{System.Int32},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member AddVideoFrameUrlWithHttpMessagesAsync : string * string * string * System.Collections.Generic.IList&lt;Microsoft.CognitiveServices.ContentModerator.Models.VideoFrameBodyItem&gt; * Nullable&lt;int&gt; * System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.List&lt;string&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&gt;" Usage="iReviews.AddVideoFrameUrlWithHttpMessagesAsync (contentType, teamName, reviewId, videoFrameBody, timescale, customHeaders, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.CognitiveServices.ContentModerator</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contentType" Type="System.String" />
        <Parameter Name="teamName" Type="System.String" />
        <Parameter Name="reviewId" Type="System.String" />
        <Parameter Name="videoFrameBody" Type="System.Collections.Generic.IList&lt;Microsoft.CognitiveServices.ContentModerator.Models.VideoFrameBodyItem&gt;" />
        <Parameter Name="timescale" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="customHeaders" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Collections.Generic.List&lt;System.String&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="contentType">
            The content type.
            </param>
        <param name="teamName">
            Your team name.
            </param>
        <param name="reviewId">
            Id of the review.
            </param>
        <param name="videoFrameBody">
            Body for add video frames API
            </param>
        <param name="timescale">
            Timescale of the video.
            </param>
        <param name="customHeaders">
            The headers that will be added to request.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            Use this method to add frames for a video review.Timescale: This
            parameter is a factor which is used to convert the timestamp on a
            frame into milliseconds. Timescale is provided in the output of the
            Content Moderator video media processor on the Azure Media Services
            platform.Timescale in the Video Moderation output is Ticks/Second.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.CognitiveServices.ContentModerator.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
        <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AddVideoFrameWithHttpMessagesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&gt; AddVideoFrameWithHttpMessagesAsync (string teamName, string reviewId, Nullable&lt;int&gt; timescale = null, System.Collections.Generic.Dictionary&lt;string,System.Collections.Generic.List&lt;string&gt;&gt; customHeaders = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.HttpOperationResponse&gt; AddVideoFrameWithHttpMessagesAsync(string teamName, string reviewId, valuetype System.Nullable`1&lt;int32&gt; timescale, class System.Collections.Generic.Dictionary`2&lt;string, class System.Collections.Generic.List`1&lt;string&gt;&gt; customHeaders, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.ContentModerator.IReviews.AddVideoFrameWithHttpMessagesAsync(System.String,System.String,System.Nullable{System.Int32},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member AddVideoFrameWithHttpMessagesAsync : string * string * Nullable&lt;int&gt; * System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.List&lt;string&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&gt;" Usage="iReviews.AddVideoFrameWithHttpMessagesAsync (teamName, reviewId, timescale, customHeaders, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.CognitiveServices.ContentModerator</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="teamName" Type="System.String" />
        <Parameter Name="reviewId" Type="System.String" />
        <Parameter Name="timescale" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="customHeaders" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Collections.Generic.List&lt;System.String&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="teamName">
             Your team name.
             </param>
        <param name="reviewId">
             Id of the review.
             </param>
        <param name="timescale">
             Timescale of the video you are adding frames to.
             </param>
        <param name="customHeaders">
             The headers that will be added to request.
             </param>
        <param name="cancellationToken">
             The cancellation token.
             </param>
        <summary>
             The reviews created would show up for Reviewers on your team. As
             Reviewers complete reviewing, results of the Review would be POSTED
             (i.e. HTTP POST) on the specified CallBackEndpoint.
            
             &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
             &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
             &lt;p&gt;
             {&lt;br/&gt;
             "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
             "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
             "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
             "CallBackType": "Review",&lt;br/&gt;
             "ContentId": "&lt;The ContentId that was specified
             input&gt;",&lt;br/&gt;
             "Metadata": {&lt;br/&gt;
             "adultscore": "0.xxx",&lt;br/&gt;
             "a": "False",&lt;br/&gt;
             "racyscore": "0.xxx",&lt;br/&gt;
             "r": "True"&lt;br/&gt;
             },&lt;br/&gt;
             "ReviewerResultTags": {&lt;br/&gt;
             "a": "False",&lt;br/&gt;
             "r": "True"&lt;br/&gt;
             }&lt;br/&gt;
             }&lt;br/&gt;
            
             &lt;/p&gt;.
             </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.CognitiveServices.ContentModerator.Models.APIErrorException">
             Thrown when the operation returned an invalid status code
             </exception>
        <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
      </Docs>
    </Member>
    <Member MemberName="AddVideoTranscriptModerationResultWithHttpMessagesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&gt; AddVideoTranscriptModerationResultWithHttpMessagesAsync (string contentType, string teamName, string reviewId, System.Collections.Generic.IList&lt;Microsoft.CognitiveServices.ContentModerator.Models.TranscriptModerationBodyItem&gt; transcriptModerationBody, System.Collections.Generic.Dictionary&lt;string,System.Collections.Generic.List&lt;string&gt;&gt; customHeaders = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.HttpOperationResponse&gt; AddVideoTranscriptModerationResultWithHttpMessagesAsync(string contentType, string teamName, string reviewId, class System.Collections.Generic.IList`1&lt;class Microsoft.CognitiveServices.ContentModerator.Models.TranscriptModerationBodyItem&gt; transcriptModerationBody, class System.Collections.Generic.Dictionary`2&lt;string, class System.Collections.Generic.List`1&lt;string&gt;&gt; customHeaders, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.ContentModerator.IReviews.AddVideoTranscriptModerationResultWithHttpMessagesAsync(System.String,System.String,System.String,System.Collections.Generic.IList{Microsoft.CognitiveServices.ContentModerator.Models.TranscriptModerationBodyItem},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member AddVideoTranscriptModerationResultWithHttpMessagesAsync : string * string * string * System.Collections.Generic.IList&lt;Microsoft.CognitiveServices.ContentModerator.Models.TranscriptModerationBodyItem&gt; * System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.List&lt;string&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&gt;" Usage="iReviews.AddVideoTranscriptModerationResultWithHttpMessagesAsync (contentType, teamName, reviewId, transcriptModerationBody, customHeaders, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.CognitiveServices.ContentModerator</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contentType" Type="System.String" />
        <Parameter Name="teamName" Type="System.String" />
        <Parameter Name="reviewId" Type="System.String" />
        <Parameter Name="transcriptModerationBody" Type="System.Collections.Generic.IList&lt;Microsoft.CognitiveServices.ContentModerator.Models.TranscriptModerationBodyItem&gt;" />
        <Parameter Name="customHeaders" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Collections.Generic.List&lt;System.String&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="contentType">
            The content type.
            </param>
        <param name="teamName">
            Your team name.
            </param>
        <param name="reviewId">
            Id of the review.
            </param>
        <param name="transcriptModerationBody">
            Body for add video transcript moderation result API
            </param>
        <param name="customHeaders">
            The headers that will be added to request.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            This API adds a transcript screen text result file for a video
            review. Transcript screen text result file is a result of Screen
            Text API . In order to generate transcript screen text result file
            , a transcript file has to be screened for profanity using Screen
            Text API.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.CognitiveServices.ContentModerator.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
        <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AddVideoTranscriptWithHttpMessagesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&gt; AddVideoTranscriptWithHttpMessagesAsync (string teamName, string reviewId, System.IO.Stream vTTfile, System.Collections.Generic.Dictionary&lt;string,System.Collections.Generic.List&lt;string&gt;&gt; customHeaders = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.HttpOperationResponse&gt; AddVideoTranscriptWithHttpMessagesAsync(string teamName, string reviewId, class System.IO.Stream vTTfile, class System.Collections.Generic.Dictionary`2&lt;string, class System.Collections.Generic.List`1&lt;string&gt;&gt; customHeaders, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.ContentModerator.IReviews.AddVideoTranscriptWithHttpMessagesAsync(System.String,System.String,System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member AddVideoTranscriptWithHttpMessagesAsync : string * string * System.IO.Stream * System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.List&lt;string&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&gt;" Usage="iReviews.AddVideoTranscriptWithHttpMessagesAsync (teamName, reviewId, vTTfile, customHeaders, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.CognitiveServices.ContentModerator</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="teamName" Type="System.String" />
        <Parameter Name="reviewId" Type="System.String" />
        <Parameter Name="vTTfile" Type="System.IO.Stream" />
        <Parameter Name="customHeaders" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Collections.Generic.List&lt;System.String&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="teamName">
            Your team name.
            </param>
        <param name="reviewId">
            Id of the review.
            </param>
        <param name="vTTfile">
            Transcript file of the video.
            </param>
        <param name="customHeaders">
            The headers that will be added to request.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            This API adds a transcript file (text version of all the words
            spoken in a video) to a video review. The file should be a valid
            WebVTT format.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.CognitiveServices.ContentModerator.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
        <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateJobWithHttpMessagesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&lt;Microsoft.CognitiveServices.ContentModerator.Models.JobId&gt;&gt; CreateJobWithHttpMessagesAsync (string teamName, string contentType, string contentId, string workflowName, string jobContentType, Microsoft.CognitiveServices.ContentModerator.Models.Content content, string callBackEndpoint = null, System.Collections.Generic.Dictionary&lt;string,System.Collections.Generic.List&lt;string&gt;&gt; customHeaders = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.HttpOperationResponse`1&lt;class Microsoft.CognitiveServices.ContentModerator.Models.JobId&gt;&gt; CreateJobWithHttpMessagesAsync(string teamName, string contentType, string contentId, string workflowName, string jobContentType, class Microsoft.CognitiveServices.ContentModerator.Models.Content content, string callBackEndpoint, class System.Collections.Generic.Dictionary`2&lt;string, class System.Collections.Generic.List`1&lt;string&gt;&gt; customHeaders, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.ContentModerator.IReviews.CreateJobWithHttpMessagesAsync(System.String,System.String,System.String,System.String,System.String,Microsoft.CognitiveServices.ContentModerator.Models.Content,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateJobWithHttpMessagesAsync : string * string * string * string * string * Microsoft.CognitiveServices.ContentModerator.Models.Content * string * System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.List&lt;string&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&lt;Microsoft.CognitiveServices.ContentModerator.Models.JobId&gt;&gt;" Usage="iReviews.CreateJobWithHttpMessagesAsync (teamName, contentType, contentId, workflowName, jobContentType, content, callBackEndpoint, customHeaders, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.CognitiveServices.ContentModerator</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&lt;Microsoft.CognitiveServices.ContentModerator.Models.JobId&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="teamName" Type="System.String" />
        <Parameter Name="contentType" Type="System.String" />
        <Parameter Name="contentId" Type="System.String" />
        <Parameter Name="workflowName" Type="System.String" />
        <Parameter Name="jobContentType" Type="System.String" />
        <Parameter Name="content" Type="Microsoft.CognitiveServices.ContentModerator.Models.Content" />
        <Parameter Name="callBackEndpoint" Type="System.String" />
        <Parameter Name="customHeaders" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Collections.Generic.List&lt;System.String&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="teamName">
             Your team name.
             </param>
        <param name="contentType">
             Image, Text or Video. Possible values include: 'Image', 'Text',
             'Video'
             </param>
        <param name="contentId">
             Id/Name to identify the content submitted.
             </param>
        <param name="workflowName">
             Workflow Name that you want to invoke.
             </param>
        <param name="jobContentType">
             The content type. Possible values include: 'application/json',
             'image/jpeg'
             </param>
        <param name="content">
             Content to evaluate.
             </param>
        <param name="callBackEndpoint">
             Callback endpoint for posting the create job result.
             </param>
        <param name="customHeaders">
             The headers that will be added to request.
             </param>
        <param name="cancellationToken">
             The cancellation token.
             </param>
        <summary>
             A job Id will be returned for the content posted on this endpoint.
            
             Once the content is evaluated against the Workflow provided the
             review will be created or ignored based on the workflow expression.
            
             &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
            
             &lt;p&gt;
             &lt;h4&gt;Job Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;
            
             {&lt;br/&gt;
             "JobId": "&lt;Job Id&gt;,&lt;br/&gt;
             "ReviewId": "&lt;Review Id, if the Job resulted in a Review to be
             created&gt;",&lt;br/&gt;
             "WorkFlowId": "default",&lt;br/&gt;
             "Status": "&lt;This will be one of Complete, InProgress,
             Error&gt;",&lt;br/&gt;
             "ContentType": "Image",&lt;br/&gt;
             "ContentId": "&lt;This is the ContentId that was specified on
             input&gt;",&lt;br/&gt;
             "CallBackType": "Job",&lt;br/&gt;
             "Metadata": {&lt;br/&gt;
             "adultscore": "0.xxx",&lt;br/&gt;
             "a": "False",&lt;br/&gt;
             "racyscore": "0.xxx",&lt;br/&gt;
             "r": "True"&lt;br/&gt;
             }&lt;br/&gt;
             }&lt;br/&gt;
            
             &lt;/p&gt;
             &lt;p&gt;
             &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;
            
             {
             "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
             "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
             "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
             "CallBackType": "Review",&lt;br/&gt;
             "ContentId": "&lt;The ContentId that was specified
             input&gt;",&lt;br/&gt;
             "Metadata": {&lt;br/&gt;
             "adultscore": "0.xxx",
             "a": "False",&lt;br/&gt;
             "racyscore": "0.xxx",&lt;br/&gt;
             "r": "True"&lt;br/&gt;
             },&lt;br/&gt;
             "ReviewerResultTags": {&lt;br/&gt;
             "a": "False",&lt;br/&gt;
             "r": "True"&lt;br/&gt;
             }&lt;br/&gt;
             }&lt;br/&gt;
            
             &lt;/p&gt;.
             </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.CognitiveServices.ContentModerator.Models.APIErrorException">
             Thrown when the operation returned an invalid status code
             </exception>
        <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
        <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateReviewsWithHttpMessagesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&lt;System.Collections.Generic.IList&lt;string&gt;&gt;&gt; CreateReviewsWithHttpMessagesAsync (string urlContentType, string teamName, System.Collections.Generic.IList&lt;Microsoft.CognitiveServices.ContentModerator.Models.CreateReviewBodyItem&gt; createReviewBody, string subTeam = null, System.Collections.Generic.Dictionary&lt;string,System.Collections.Generic.List&lt;string&gt;&gt; customHeaders = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.HttpOperationResponse`1&lt;class System.Collections.Generic.IList`1&lt;string&gt;&gt;&gt; CreateReviewsWithHttpMessagesAsync(string urlContentType, string teamName, class System.Collections.Generic.IList`1&lt;class Microsoft.CognitiveServices.ContentModerator.Models.CreateReviewBodyItem&gt; createReviewBody, string subTeam, class System.Collections.Generic.Dictionary`2&lt;string, class System.Collections.Generic.List`1&lt;string&gt;&gt; customHeaders, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.ContentModerator.IReviews.CreateReviewsWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.IList{Microsoft.CognitiveServices.ContentModerator.Models.CreateReviewBodyItem},System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateReviewsWithHttpMessagesAsync : string * string * System.Collections.Generic.IList&lt;Microsoft.CognitiveServices.ContentModerator.Models.CreateReviewBodyItem&gt; * string * System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.List&lt;string&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&lt;System.Collections.Generic.IList&lt;string&gt;&gt;&gt;" Usage="iReviews.CreateReviewsWithHttpMessagesAsync (urlContentType, teamName, createReviewBody, subTeam, customHeaders, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.CognitiveServices.ContentModerator</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&lt;System.Collections.Generic.IList&lt;System.String&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlContentType" Type="System.String" />
        <Parameter Name="teamName" Type="System.String" />
        <Parameter Name="createReviewBody" Type="System.Collections.Generic.IList&lt;Microsoft.CognitiveServices.ContentModerator.Models.CreateReviewBodyItem&gt;" />
        <Parameter Name="subTeam" Type="System.String" />
        <Parameter Name="customHeaders" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Collections.Generic.List&lt;System.String&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="urlContentType">
             The content type.
             </param>
        <param name="teamName">
             Your team name.
             </param>
        <param name="createReviewBody">
             Body for create reviews API
             </param>
        <param name="subTeam">
             SubTeam of your team, you want to assign the created review to.
             </param>
        <param name="customHeaders">
             The headers that will be added to request.
             </param>
        <param name="cancellationToken">
             The cancellation token.
             </param>
        <summary>
             The reviews created would show up for Reviewers on your team. As
             Reviewers complete reviewing, results of the Review would be POSTED
             (i.e. HTTP POST) on the specified CallBackEndpoint.
            
             &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
             &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
             &lt;p&gt;
             {&lt;br/&gt;
             "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
             "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
             "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
             "CallBackType": "Review",&lt;br/&gt;
             "ContentId": "&lt;The ContentId that was specified
             input&gt;",&lt;br/&gt;
             "Metadata": {&lt;br/&gt;
             "adultscore": "0.xxx",&lt;br/&gt;
             "a": "False",&lt;br/&gt;
             "racyscore": "0.xxx",&lt;br/&gt;
             "r": "True"&lt;br/&gt;
             },&lt;br/&gt;
             "ReviewerResultTags": {&lt;br/&gt;
             "a": "False",&lt;br/&gt;
             "r": "True"&lt;br/&gt;
             }&lt;br/&gt;
             }&lt;br/&gt;
            
             &lt;/p&gt;.
             </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.CognitiveServices.ContentModerator.Models.APIErrorException">
             Thrown when the operation returned an invalid status code
             </exception>
        <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
        <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateVideoReviewsWithHttpMessagesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&lt;System.Collections.Generic.IList&lt;string&gt;&gt;&gt; CreateVideoReviewsWithHttpMessagesAsync (string contentType, string teamName, System.Collections.Generic.IList&lt;Microsoft.CognitiveServices.ContentModerator.Models.CreateVideoReviewsBodyItem&gt; createVideoReviewsBody, string subTeam = null, System.Collections.Generic.Dictionary&lt;string,System.Collections.Generic.List&lt;string&gt;&gt; customHeaders = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.HttpOperationResponse`1&lt;class System.Collections.Generic.IList`1&lt;string&gt;&gt;&gt; CreateVideoReviewsWithHttpMessagesAsync(string contentType, string teamName, class System.Collections.Generic.IList`1&lt;class Microsoft.CognitiveServices.ContentModerator.Models.CreateVideoReviewsBodyItem&gt; createVideoReviewsBody, string subTeam, class System.Collections.Generic.Dictionary`2&lt;string, class System.Collections.Generic.List`1&lt;string&gt;&gt; customHeaders, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.ContentModerator.IReviews.CreateVideoReviewsWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.IList{Microsoft.CognitiveServices.ContentModerator.Models.CreateVideoReviewsBodyItem},System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateVideoReviewsWithHttpMessagesAsync : string * string * System.Collections.Generic.IList&lt;Microsoft.CognitiveServices.ContentModerator.Models.CreateVideoReviewsBodyItem&gt; * string * System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.List&lt;string&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&lt;System.Collections.Generic.IList&lt;string&gt;&gt;&gt;" Usage="iReviews.CreateVideoReviewsWithHttpMessagesAsync (contentType, teamName, createVideoReviewsBody, subTeam, customHeaders, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.CognitiveServices.ContentModerator</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&lt;System.Collections.Generic.IList&lt;System.String&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contentType" Type="System.String" />
        <Parameter Name="teamName" Type="System.String" />
        <Parameter Name="createVideoReviewsBody" Type="System.Collections.Generic.IList&lt;Microsoft.CognitiveServices.ContentModerator.Models.CreateVideoReviewsBodyItem&gt;" />
        <Parameter Name="subTeam" Type="System.String" />
        <Parameter Name="customHeaders" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Collections.Generic.List&lt;System.String&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="contentType">
             The content type.
             </param>
        <param name="teamName">
             Your team name.
             </param>
        <param name="createVideoReviewsBody">
             Body for create reviews API
             </param>
        <param name="subTeam">
             SubTeam of your team, you want to assign the created review to.
             </param>
        <param name="customHeaders">
             The headers that will be added to request.
             </param>
        <param name="cancellationToken">
             The cancellation token.
             </param>
        <summary>
             The reviews created would show up for Reviewers on your team. As
             Reviewers complete reviewing, results of the Review would be POSTED
             (i.e. HTTP POST) on the specified CallBackEndpoint.
            
             &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
             &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
             &lt;p&gt;
             {&lt;br/&gt;
             "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
             "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
             "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
             "CallBackType": "Review",&lt;br/&gt;
             "ContentId": "&lt;The ContentId that was specified
             input&gt;",&lt;br/&gt;
             "Metadata": {&lt;br/&gt;
             "adultscore": "0.xxx",&lt;br/&gt;
             "a": "False",&lt;br/&gt;
             "racyscore": "0.xxx",&lt;br/&gt;
             "r": "True"&lt;br/&gt;
             },&lt;br/&gt;
             "ReviewerResultTags": {&lt;br/&gt;
             "a": "False",&lt;br/&gt;
             "r": "True"&lt;br/&gt;
             }&lt;br/&gt;
             }&lt;br/&gt;
            
             &lt;/p&gt;.
             </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.CognitiveServices.ContentModerator.Models.APIErrorException">
             Thrown when the operation returned an invalid status code
             </exception>
        <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
        <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
      </Docs>
    </Member>
    <Member MemberName="GetJobDetailsWithHttpMessagesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&lt;Microsoft.CognitiveServices.ContentModerator.Models.Job&gt;&gt; GetJobDetailsWithHttpMessagesAsync (string teamName, string jobId, System.Collections.Generic.Dictionary&lt;string,System.Collections.Generic.List&lt;string&gt;&gt; customHeaders = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.HttpOperationResponse`1&lt;class Microsoft.CognitiveServices.ContentModerator.Models.Job&gt;&gt; GetJobDetailsWithHttpMessagesAsync(string teamName, string jobId, class System.Collections.Generic.Dictionary`2&lt;string, class System.Collections.Generic.List`1&lt;string&gt;&gt; customHeaders, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.ContentModerator.IReviews.GetJobDetailsWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetJobDetailsWithHttpMessagesAsync : string * string * System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.List&lt;string&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&lt;Microsoft.CognitiveServices.ContentModerator.Models.Job&gt;&gt;" Usage="iReviews.GetJobDetailsWithHttpMessagesAsync (teamName, jobId, customHeaders, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.CognitiveServices.ContentModerator</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&lt;Microsoft.CognitiveServices.ContentModerator.Models.Job&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="teamName" Type="System.String" />
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="customHeaders" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Collections.Generic.List&lt;System.String&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="teamName">
            Your Team Name.
            </param>
        <param name="jobId">
            Id of the job.
            </param>
        <param name="customHeaders">
            The headers that will be added to request.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            Get the Job Details for a Job Id.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.CognitiveServices.ContentModerator.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
        <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
        <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetReviewWithHttpMessagesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&lt;Microsoft.CognitiveServices.ContentModerator.Models.Review&gt;&gt; GetReviewWithHttpMessagesAsync (string teamName, string reviewId, System.Collections.Generic.Dictionary&lt;string,System.Collections.Generic.List&lt;string&gt;&gt; customHeaders = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.HttpOperationResponse`1&lt;class Microsoft.CognitiveServices.ContentModerator.Models.Review&gt;&gt; GetReviewWithHttpMessagesAsync(string teamName, string reviewId, class System.Collections.Generic.Dictionary`2&lt;string, class System.Collections.Generic.List`1&lt;string&gt;&gt; customHeaders, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.ContentModerator.IReviews.GetReviewWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetReviewWithHttpMessagesAsync : string * string * System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.List&lt;string&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&lt;Microsoft.CognitiveServices.ContentModerator.Models.Review&gt;&gt;" Usage="iReviews.GetReviewWithHttpMessagesAsync (teamName, reviewId, customHeaders, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.CognitiveServices.ContentModerator</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&lt;Microsoft.CognitiveServices.ContentModerator.Models.Review&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="teamName" Type="System.String" />
        <Parameter Name="reviewId" Type="System.String" />
        <Parameter Name="customHeaders" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Collections.Generic.List&lt;System.String&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="teamName">
            Your Team Name.
            </param>
        <param name="reviewId">
            Id of the review.
            </param>
        <param name="customHeaders">
            The headers that will be added to request.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            Returns review details for the review Id passed.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.CognitiveServices.ContentModerator.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
        <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
        <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVideoFramesWithHttpMessagesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&lt;Microsoft.CognitiveServices.ContentModerator.Models.Frames&gt;&gt; GetVideoFramesWithHttpMessagesAsync (string teamName, string reviewId, Nullable&lt;int&gt; startSeed = null, Nullable&lt;int&gt; noOfRecords = null, string filter = null, System.Collections.Generic.Dictionary&lt;string,System.Collections.Generic.List&lt;string&gt;&gt; customHeaders = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.HttpOperationResponse`1&lt;class Microsoft.CognitiveServices.ContentModerator.Models.Frames&gt;&gt; GetVideoFramesWithHttpMessagesAsync(string teamName, string reviewId, valuetype System.Nullable`1&lt;int32&gt; startSeed, valuetype System.Nullable`1&lt;int32&gt; noOfRecords, string filter, class System.Collections.Generic.Dictionary`2&lt;string, class System.Collections.Generic.List`1&lt;string&gt;&gt; customHeaders, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.ContentModerator.IReviews.GetVideoFramesWithHttpMessagesAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GetVideoFramesWithHttpMessagesAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.List&lt;string&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&lt;Microsoft.CognitiveServices.ContentModerator.Models.Frames&gt;&gt;" Usage="iReviews.GetVideoFramesWithHttpMessagesAsync (teamName, reviewId, startSeed, noOfRecords, filter, customHeaders, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.CognitiveServices.ContentModerator</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&lt;Microsoft.CognitiveServices.ContentModerator.Models.Frames&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="teamName" Type="System.String" />
        <Parameter Name="reviewId" Type="System.String" />
        <Parameter Name="startSeed" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="noOfRecords" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="customHeaders" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Collections.Generic.List&lt;System.String&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="teamName">
             Your team name.
             </param>
        <param name="reviewId">
             Id of the review.
             </param>
        <param name="startSeed">
             Time stamp of the frame from where you want to start fetching the
             frames.
             </param>
        <param name="noOfRecords">
             Number of frames to fetch.
             </param>
        <param name="filter">
             Get frames filtered by tags.
             </param>
        <param name="customHeaders">
             The headers that will be added to request.
             </param>
        <param name="cancellationToken">
             The cancellation token.
             </param>
        <summary>
             The reviews created would show up for Reviewers on your team. As
             Reviewers complete reviewing, results of the Review would be POSTED
             (i.e. HTTP POST) on the specified CallBackEndpoint.
            
             &lt;h3&gt;CallBack Schemas &lt;/h3&gt;
             &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;
             &lt;p&gt;
             {&lt;br/&gt;
             "ReviewId": "&lt;Review Id&gt;",&lt;br/&gt;
             "ModifiedOn": "2016-10-11T22:36:32.9934851Z",&lt;br/&gt;
             "ModifiedBy": "&lt;Name of the Reviewer&gt;",&lt;br/&gt;
             "CallBackType": "Review",&lt;br/&gt;
             "ContentId": "&lt;The ContentId that was specified
             input&gt;",&lt;br/&gt;
             "Metadata": {&lt;br/&gt;
             "adultscore": "0.xxx",&lt;br/&gt;
             "a": "False",&lt;br/&gt;
             "racyscore": "0.xxx",&lt;br/&gt;
             "r": "True"&lt;br/&gt;
             },&lt;br/&gt;
             "ReviewerResultTags": {&lt;br/&gt;
             "a": "False",&lt;br/&gt;
             "r": "True"&lt;br/&gt;
             }&lt;br/&gt;
             }&lt;br/&gt;
            
             &lt;/p&gt;.
             </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.CognitiveServices.ContentModerator.Models.APIErrorException">
             Thrown when the operation returned an invalid status code
             </exception>
        <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
        <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
      </Docs>
    </Member>
    <Member MemberName="PublishVideoReviewWithHttpMessagesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&gt; PublishVideoReviewWithHttpMessagesAsync (string teamName, string reviewId, System.Collections.Generic.Dictionary&lt;string,System.Collections.Generic.List&lt;string&gt;&gt; customHeaders = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.HttpOperationResponse&gt; PublishVideoReviewWithHttpMessagesAsync(string teamName, string reviewId, class System.Collections.Generic.Dictionary`2&lt;string, class System.Collections.Generic.List`1&lt;string&gt;&gt; customHeaders, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.ContentModerator.IReviews.PublishVideoReviewWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member PublishVideoReviewWithHttpMessagesAsync : string * string * System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.List&lt;string&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&gt;" Usage="iReviews.PublishVideoReviewWithHttpMessagesAsync (teamName, reviewId, customHeaders, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.CognitiveServices.ContentModerator</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="teamName" Type="System.String" />
        <Parameter Name="reviewId" Type="System.String" />
        <Parameter Name="customHeaders" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Collections.Generic.List&lt;System.String&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="teamName">
            Your team name.
            </param>
        <param name="reviewId">
            Id of the review.
            </param>
        <param name="customHeaders">
            The headers that will be added to request.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            Publish video review to make it available for review.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.CognitiveServices.ContentModerator.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
        <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
      </Docs>
    </Member>
  </Members>
</Type>