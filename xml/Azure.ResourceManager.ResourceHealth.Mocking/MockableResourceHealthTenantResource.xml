<Type Name="MockableResourceHealthTenantResource" FullName="Azure.ResourceManager.ResourceHealth.Mocking.MockableResourceHealthTenantResource">
  <TypeSignature Language="C#" Value="public class MockableResourceHealthTenantResource : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MockableResourceHealthTenantResource extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.ResourceHealth.Mocking.MockableResourceHealthTenantResource" />
  <TypeSignature Language="VB.NET" Value="Public Class MockableResourceHealthTenantResource&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type MockableResourceHealthTenantResource = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.ResourceHealth</AssemblyName>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> A class to add extension methods to TenantResource. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MockableResourceHealthTenantResource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ResourceHealth.Mocking.MockableResourceHealthTenantResource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ResourceHealth</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.ResourceHealth.Mocking.MockableResourceHealthTenantResource" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetResourceHealthMetadataEntities">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ResourceHealth.ResourceHealthMetadataEntityCollection GetResourceHealthMetadataEntities ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ResourceHealth.ResourceHealthMetadataEntityCollection GetResourceHealthMetadataEntities() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ResourceHealth.Mocking.MockableResourceHealthTenantResource.GetResourceHealthMetadataEntities" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetResourceHealthMetadataEntities () As ResourceHealthMetadataEntityCollection" />
      <MemberSignature Language="F#" Value="abstract member GetResourceHealthMetadataEntities : unit -&gt; Azure.ResourceManager.ResourceHealth.ResourceHealthMetadataEntityCollection&#xA;override this.GetResourceHealthMetadataEntities : unit -&gt; Azure.ResourceManager.ResourceHealth.ResourceHealthMetadataEntityCollection" Usage="mockableResourceHealthTenantResource.GetResourceHealthMetadataEntities " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ResourceHealth</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ResourceHealth.ResourceHealthMetadataEntityCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of ResourceHealthMetadataEntityResources in the TenantResource. </summary>
        <returns> An object representing collection of ResourceHealthMetadataEntityResources and their operations over a ResourceHealthMetadataEntityResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetResourceHealthMetadataEntity">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ResourceHealth.ResourceHealthMetadataEntityResource&gt; GetResourceHealthMetadataEntity (string name, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ResourceHealth.ResourceHealthMetadataEntityResource&gt; GetResourceHealthMetadataEntity(string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ResourceHealth.Mocking.MockableResourceHealthTenantResource.GetResourceHealthMetadataEntity(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetResourceHealthMetadataEntity (name As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ResourceHealthMetadataEntityResource)" />
      <MemberSignature Language="F#" Value="abstract member GetResourceHealthMetadataEntity : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ResourceHealth.ResourceHealthMetadataEntityResource&gt;&#xA;override this.GetResourceHealthMetadataEntity : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ResourceHealth.ResourceHealthMetadataEntityResource&gt;" Usage="mockableResourceHealthTenantResource.GetResourceHealthMetadataEntity (name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ResourceHealth</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ResourceHealth.ResourceHealthMetadataEntityResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name"> Name of metadata entity. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the list of metadata entities.
            <list type="bullet"><item><term>Request Path</term><description>/providers/Microsoft.ResourceHealth/metadata/{name}</description></item><item><term>Operation Id</term><description>Metadata_GetEntity</description></item><item><term>Default Api Version</term><description>2023-10-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.ResourceHealth.ResourceHealthMetadataEntityResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetResourceHealthMetadataEntityAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ResourceHealth.ResourceHealthMetadataEntityResource&gt;&gt; GetResourceHealthMetadataEntityAsync (string name, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ResourceHealth.ResourceHealthMetadataEntityResource&gt;&gt; GetResourceHealthMetadataEntityAsync(string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ResourceHealth.Mocking.MockableResourceHealthTenantResource.GetResourceHealthMetadataEntityAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetResourceHealthMetadataEntityAsync (name As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ResourceHealthMetadataEntityResource))" />
      <MemberSignature Language="F#" Value="abstract member GetResourceHealthMetadataEntityAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ResourceHealth.ResourceHealthMetadataEntityResource&gt;&gt;&#xA;override this.GetResourceHealthMetadataEntityAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ResourceHealth.ResourceHealthMetadataEntityResource&gt;&gt;" Usage="mockableResourceHealthTenantResource.GetResourceHealthMetadataEntityAsync (name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ResourceHealth</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ResourceHealth.ResourceHealthMetadataEntityResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name"> Name of metadata entity. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the list of metadata entities.
            <list type="bullet"><item><term>Request Path</term><description>/providers/Microsoft.ResourceHealth/metadata/{name}</description></item><item><term>Operation Id</term><description>Metadata_GetEntity</description></item><item><term>Default Api Version</term><description>2023-10-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.ResourceHealth.ResourceHealthMetadataEntityResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetServiceEmergingIssue">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ResourceHealth.ServiceEmergingIssueResource&gt; GetServiceEmergingIssue (Azure.ResourceManager.ResourceHealth.Models.EmergingIssueNameContent issueName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ResourceHealth.ServiceEmergingIssueResource&gt; GetServiceEmergingIssue(valuetype Azure.ResourceManager.ResourceHealth.Models.EmergingIssueNameContent issueName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ResourceHealth.Mocking.MockableResourceHealthTenantResource.GetServiceEmergingIssue(Azure.ResourceManager.ResourceHealth.Models.EmergingIssueNameContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetServiceEmergingIssue (issueName As EmergingIssueNameContent, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ServiceEmergingIssueResource)" />
      <MemberSignature Language="F#" Value="abstract member GetServiceEmergingIssue : Azure.ResourceManager.ResourceHealth.Models.EmergingIssueNameContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ResourceHealth.ServiceEmergingIssueResource&gt;&#xA;override this.GetServiceEmergingIssue : Azure.ResourceManager.ResourceHealth.Models.EmergingIssueNameContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ResourceHealth.ServiceEmergingIssueResource&gt;" Usage="mockableResourceHealthTenantResource.GetServiceEmergingIssue (issueName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ResourceHealth</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ResourceHealth.ServiceEmergingIssueResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="issueName" Type="Azure.ResourceManager.ResourceHealth.Models.EmergingIssueNameContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="issueName"> The name of the emerging issue. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets Azure services' emerging issues.
            <list type="bullet"><item><term>Request Path</term><description>/providers/Microsoft.ResourceHealth/emergingIssues/{issueName}</description></item><item><term>Operation Id</term><description>EmergingIssues_Get</description></item><item><term>Default Api Version</term><description>2023-10-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.ResourceHealth.ServiceEmergingIssueResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetServiceEmergingIssueAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ResourceHealth.ServiceEmergingIssueResource&gt;&gt; GetServiceEmergingIssueAsync (Azure.ResourceManager.ResourceHealth.Models.EmergingIssueNameContent issueName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ResourceHealth.ServiceEmergingIssueResource&gt;&gt; GetServiceEmergingIssueAsync(valuetype Azure.ResourceManager.ResourceHealth.Models.EmergingIssueNameContent issueName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ResourceHealth.Mocking.MockableResourceHealthTenantResource.GetServiceEmergingIssueAsync(Azure.ResourceManager.ResourceHealth.Models.EmergingIssueNameContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetServiceEmergingIssueAsync (issueName As EmergingIssueNameContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ServiceEmergingIssueResource))" />
      <MemberSignature Language="F#" Value="abstract member GetServiceEmergingIssueAsync : Azure.ResourceManager.ResourceHealth.Models.EmergingIssueNameContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ResourceHealth.ServiceEmergingIssueResource&gt;&gt;&#xA;override this.GetServiceEmergingIssueAsync : Azure.ResourceManager.ResourceHealth.Models.EmergingIssueNameContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ResourceHealth.ServiceEmergingIssueResource&gt;&gt;" Usage="mockableResourceHealthTenantResource.GetServiceEmergingIssueAsync (issueName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ResourceHealth</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ResourceHealth.ServiceEmergingIssueResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="issueName" Type="Azure.ResourceManager.ResourceHealth.Models.EmergingIssueNameContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="issueName"> The name of the emerging issue. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets Azure services' emerging issues.
            <list type="bullet"><item><term>Request Path</term><description>/providers/Microsoft.ResourceHealth/emergingIssues/{issueName}</description></item><item><term>Operation Id</term><description>EmergingIssues_Get</description></item><item><term>Default Api Version</term><description>2023-10-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.ResourceHealth.ServiceEmergingIssueResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetServiceEmergingIssues">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ResourceHealth.ServiceEmergingIssueCollection GetServiceEmergingIssues ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ResourceHealth.ServiceEmergingIssueCollection GetServiceEmergingIssues() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ResourceHealth.Mocking.MockableResourceHealthTenantResource.GetServiceEmergingIssues" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetServiceEmergingIssues () As ServiceEmergingIssueCollection" />
      <MemberSignature Language="F#" Value="abstract member GetServiceEmergingIssues : unit -&gt; Azure.ResourceManager.ResourceHealth.ServiceEmergingIssueCollection&#xA;override this.GetServiceEmergingIssues : unit -&gt; Azure.ResourceManager.ResourceHealth.ServiceEmergingIssueCollection" Usage="mockableResourceHealthTenantResource.GetServiceEmergingIssues " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ResourceHealth</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ResourceHealth.ServiceEmergingIssueCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of ServiceEmergingIssueResources in the TenantResource. </summary>
        <returns> An object representing collection of ServiceEmergingIssueResources and their operations over a ServiceEmergingIssueResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTenantResourceHealthEvent">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ResourceHealth.TenantResourceHealthEventResource&gt; GetTenantResourceHealthEvent (string eventTrackingId, string filter = default, string queryStartTime = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ResourceHealth.TenantResourceHealthEventResource&gt; GetTenantResourceHealthEvent(string eventTrackingId, string filter, string queryStartTime, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ResourceHealth.Mocking.MockableResourceHealthTenantResource.GetTenantResourceHealthEvent(System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTenantResourceHealthEvent (eventTrackingId As String, Optional filter As String = Nothing, Optional queryStartTime As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of TenantResourceHealthEventResource)" />
      <MemberSignature Language="F#" Value="abstract member GetTenantResourceHealthEvent : string * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ResourceHealth.TenantResourceHealthEventResource&gt;&#xA;override this.GetTenantResourceHealthEvent : string * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ResourceHealth.TenantResourceHealthEventResource&gt;" Usage="mockableResourceHealthTenantResource.GetTenantResourceHealthEvent (eventTrackingId, filter, queryStartTime, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ResourceHealth</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ResourceHealth.TenantResourceHealthEventResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventTrackingId" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="queryStartTime" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="eventTrackingId"> Event Id which uniquely identifies ServiceHealth event. </param>
        <param name="filter"> The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN. </param>
        <param name="queryStartTime"> Specifies from when to return events, based on the lastUpdateTime property. For example, queryStartTime = 7/24/2020 OR queryStartTime=7%2F24%2F2020. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Service health event in the tenant by event tracking id
            <list type="bullet"><item><term>Request Path</term><description>/providers/Microsoft.ResourceHealth/events/{eventTrackingId}</description></item><item><term>Operation Id</term><description>Event_GetByTenantIdAndTrackingId</description></item><item><term>Default Api Version</term><description>2023-10-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.ResourceHealth.TenantResourceHealthEventResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="eventTrackingId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="eventTrackingId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTenantResourceHealthEventAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ResourceHealth.TenantResourceHealthEventResource&gt;&gt; GetTenantResourceHealthEventAsync (string eventTrackingId, string filter = default, string queryStartTime = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ResourceHealth.TenantResourceHealthEventResource&gt;&gt; GetTenantResourceHealthEventAsync(string eventTrackingId, string filter, string queryStartTime, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ResourceHealth.Mocking.MockableResourceHealthTenantResource.GetTenantResourceHealthEventAsync(System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTenantResourceHealthEventAsync (eventTrackingId As String, Optional filter As String = Nothing, Optional queryStartTime As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of TenantResourceHealthEventResource))" />
      <MemberSignature Language="F#" Value="abstract member GetTenantResourceHealthEventAsync : string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ResourceHealth.TenantResourceHealthEventResource&gt;&gt;&#xA;override this.GetTenantResourceHealthEventAsync : string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ResourceHealth.TenantResourceHealthEventResource&gt;&gt;" Usage="mockableResourceHealthTenantResource.GetTenantResourceHealthEventAsync (eventTrackingId, filter, queryStartTime, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ResourceHealth</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ResourceHealth.TenantResourceHealthEventResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventTrackingId" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="queryStartTime" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="eventTrackingId"> Event Id which uniquely identifies ServiceHealth event. </param>
        <param name="filter"> The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN. </param>
        <param name="queryStartTime"> Specifies from when to return events, based on the lastUpdateTime property. For example, queryStartTime = 7/24/2020 OR queryStartTime=7%2F24%2F2020. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Service health event in the tenant by event tracking id
            <list type="bullet"><item><term>Request Path</term><description>/providers/Microsoft.ResourceHealth/events/{eventTrackingId}</description></item><item><term>Operation Id</term><description>Event_GetByTenantIdAndTrackingId</description></item><item><term>Default Api Version</term><description>2023-10-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.ResourceHealth.TenantResourceHealthEventResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="eventTrackingId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="eventTrackingId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTenantResourceHealthEvents">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ResourceHealth.TenantResourceHealthEventCollection GetTenantResourceHealthEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ResourceHealth.TenantResourceHealthEventCollection GetTenantResourceHealthEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ResourceHealth.Mocking.MockableResourceHealthTenantResource.GetTenantResourceHealthEvents" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTenantResourceHealthEvents () As TenantResourceHealthEventCollection" />
      <MemberSignature Language="F#" Value="abstract member GetTenantResourceHealthEvents : unit -&gt; Azure.ResourceManager.ResourceHealth.TenantResourceHealthEventCollection&#xA;override this.GetTenantResourceHealthEvents : unit -&gt; Azure.ResourceManager.ResourceHealth.TenantResourceHealthEventCollection" Usage="mockableResourceHealthTenantResource.GetTenantResourceHealthEvents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ResourceHealth</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ResourceHealth.TenantResourceHealthEventCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of TenantResourceHealthEventResources in the TenantResource. </summary>
        <returns> An object representing collection of TenantResourceHealthEventResources and their operations over a TenantResourceHealthEventResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
