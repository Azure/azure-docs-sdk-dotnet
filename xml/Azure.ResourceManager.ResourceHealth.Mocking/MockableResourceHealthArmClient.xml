<Type Name="MockableResourceHealthArmClient" FullName="Azure.ResourceManager.ResourceHealth.Mocking.MockableResourceHealthArmClient">
  <TypeSignature Language="C#" Value="public class MockableResourceHealthArmClient : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MockableResourceHealthArmClient extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.ResourceHealth.Mocking.MockableResourceHealthArmClient" />
  <TypeSignature Language="VB.NET" Value="Public Class MockableResourceHealthArmClient&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type MockableResourceHealthArmClient = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.ResourceHealth</AssemblyName>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> A class to add extension methods to ArmClient. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MockableResourceHealthArmClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ResourceHealth.Mocking.MockableResourceHealthArmClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ResourceHealth</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.ResourceHealth.Mocking.MockableResourceHealthArmClient" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAvailabilityStatus">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt; GetAvailabilityStatus (Azure.Core.ResourceIdentifier scope, string filter = default, string expand = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt; GetAvailabilityStatus(class Azure.Core.ResourceIdentifier scope, string filter, string expand, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ResourceHealth.Mocking.MockableResourceHealthArmClient.GetAvailabilityStatus(Azure.Core.ResourceIdentifier,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAvailabilityStatus (scope As ResourceIdentifier, Optional filter As String = Nothing, Optional expand As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ResourceHealthAvailabilityStatus)" />
      <MemberSignature Language="F#" Value="abstract member GetAvailabilityStatus : Azure.Core.ResourceIdentifier * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt;&#xA;override this.GetAvailabilityStatus : Azure.Core.ResourceIdentifier * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt;" Usage="mockableResourceHealthArmClient.GetAvailabilityStatus (scope, filter, expand, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ResourceHealth</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="expand" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="filter"> The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN. </param>
        <param name="expand"> Setting $expand=recommendedactions in url query expands the recommendedactions in the response. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets current availability status for a single resource
            <list type="bullet"><item><term>Request Path</term><description>/{resourceUri}/providers/Microsoft.ResourceHealth/availabilityStatuses/current</description></item><item><term>Operation Id</term><description>AvailabilityStatuses_GetByResource</description></item><item><term>Default Api Version</term><description>2023-10-01-preview</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="scope" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAvailabilityStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt;&gt; GetAvailabilityStatusAsync (Azure.Core.ResourceIdentifier scope, string filter = default, string expand = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt;&gt; GetAvailabilityStatusAsync(class Azure.Core.ResourceIdentifier scope, string filter, string expand, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ResourceHealth.Mocking.MockableResourceHealthArmClient.GetAvailabilityStatusAsync(Azure.Core.ResourceIdentifier,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAvailabilityStatusAsync (scope As ResourceIdentifier, Optional filter As String = Nothing, Optional expand As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ResourceHealthAvailabilityStatus))" />
      <MemberSignature Language="F#" Value="abstract member GetAvailabilityStatusAsync : Azure.Core.ResourceIdentifier * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt;&gt;&#xA;override this.GetAvailabilityStatusAsync : Azure.Core.ResourceIdentifier * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt;&gt;" Usage="mockableResourceHealthArmClient.GetAvailabilityStatusAsync (scope, filter, expand, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ResourceHealth</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="expand" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="filter"> The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN. </param>
        <param name="expand"> Setting $expand=recommendedactions in url query expands the recommendedactions in the response. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets current availability status for a single resource
            <list type="bullet"><item><term>Request Path</term><description>/{resourceUri}/providers/Microsoft.ResourceHealth/availabilityStatuses/current</description></item><item><term>Operation Id</term><description>AvailabilityStatuses_GetByResource</description></item><item><term>Default Api Version</term><description>2023-10-01-preview</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="scope" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAvailabilityStatuses">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt; GetAvailabilityStatuses (Azure.Core.ResourceIdentifier scope, string filter = default, string expand = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt; GetAvailabilityStatuses(class Azure.Core.ResourceIdentifier scope, string filter, string expand, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ResourceHealth.Mocking.MockableResourceHealthArmClient.GetAvailabilityStatuses(Azure.Core.ResourceIdentifier,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAvailabilityStatuses (scope As ResourceIdentifier, Optional filter As String = Nothing, Optional expand As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of ResourceHealthAvailabilityStatus)" />
      <MemberSignature Language="F#" Value="abstract member GetAvailabilityStatuses : Azure.Core.ResourceIdentifier * string * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt;&#xA;override this.GetAvailabilityStatuses : Azure.Core.ResourceIdentifier * string * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt;" Usage="mockableResourceHealthArmClient.GetAvailabilityStatuses (scope, filter, expand, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ResourceHealth</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="expand" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="filter"> The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN. </param>
        <param name="expand"> Setting $expand=recommendedactions in url query expands the recommendedactions in the response. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists all historical availability transitions and impacting events for a single resource.
            <list type="bullet"><item><term>Request Path</term><description>/{resourceUri}/providers/Microsoft.ResourceHealth/availabilityStatuses</description></item><item><term>Operation Id</term><description>AvailabilityStatuses_List</description></item><item><term>Default Api Version</term><description>2023-10-01-preview</description></item></list></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="scope" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAvailabilityStatusesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt; GetAvailabilityStatusesAsync (Azure.Core.ResourceIdentifier scope, string filter = default, string expand = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt; GetAvailabilityStatusesAsync(class Azure.Core.ResourceIdentifier scope, string filter, string expand, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ResourceHealth.Mocking.MockableResourceHealthArmClient.GetAvailabilityStatusesAsync(Azure.Core.ResourceIdentifier,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAvailabilityStatusesAsync (scope As ResourceIdentifier, Optional filter As String = Nothing, Optional expand As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of ResourceHealthAvailabilityStatus)" />
      <MemberSignature Language="F#" Value="abstract member GetAvailabilityStatusesAsync : Azure.Core.ResourceIdentifier * string * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt;&#xA;override this.GetAvailabilityStatusesAsync : Azure.Core.ResourceIdentifier * string * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt;" Usage="mockableResourceHealthArmClient.GetAvailabilityStatusesAsync (scope, filter, expand, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ResourceHealth</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="expand" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="filter"> The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN. </param>
        <param name="expand"> Setting $expand=recommendedactions in url query expands the recommendedactions in the response. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists all historical availability transitions and impacting events for a single resource.
            <list type="bullet"><item><term>Request Path</term><description>/{resourceUri}/providers/Microsoft.ResourceHealth/availabilityStatuses</description></item><item><term>Operation Id</term><description>AvailabilityStatuses_List</description></item><item><term>Default Api Version</term><description>2023-10-01-preview</description></item></list></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="scope" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAvailabilityStatusOfChildResource">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt; GetAvailabilityStatusOfChildResource (Azure.Core.ResourceIdentifier scope, string filter = default, string expand = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt; GetAvailabilityStatusOfChildResource(class Azure.Core.ResourceIdentifier scope, string filter, string expand, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ResourceHealth.Mocking.MockableResourceHealthArmClient.GetAvailabilityStatusOfChildResource(Azure.Core.ResourceIdentifier,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAvailabilityStatusOfChildResource (scope As ResourceIdentifier, Optional filter As String = Nothing, Optional expand As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ResourceHealthAvailabilityStatus)" />
      <MemberSignature Language="F#" Value="abstract member GetAvailabilityStatusOfChildResource : Azure.Core.ResourceIdentifier * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt;&#xA;override this.GetAvailabilityStatusOfChildResource : Azure.Core.ResourceIdentifier * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt;" Usage="mockableResourceHealthArmClient.GetAvailabilityStatusOfChildResource (scope, filter, expand, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ResourceHealth</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="expand" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="filter"> The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN. </param>
        <param name="expand"> Setting $expand=recommendedactions in url query expands the recommendedactions in the response. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets current availability status for a single resource
            <list type="bullet"><item><term>Request Path</term><description>/{resourceUri}/providers/Microsoft.ResourceHealth/childAvailabilityStatuses/current</description></item><item><term>Operation Id</term><description>ChildAvailabilityStatuses_GetByResource</description></item><item><term>Default Api Version</term><description>2023-10-01-preview</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="scope" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAvailabilityStatusOfChildResourceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt;&gt; GetAvailabilityStatusOfChildResourceAsync (Azure.Core.ResourceIdentifier scope, string filter = default, string expand = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt;&gt; GetAvailabilityStatusOfChildResourceAsync(class Azure.Core.ResourceIdentifier scope, string filter, string expand, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ResourceHealth.Mocking.MockableResourceHealthArmClient.GetAvailabilityStatusOfChildResourceAsync(Azure.Core.ResourceIdentifier,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAvailabilityStatusOfChildResourceAsync (scope As ResourceIdentifier, Optional filter As String = Nothing, Optional expand As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ResourceHealthAvailabilityStatus))" />
      <MemberSignature Language="F#" Value="abstract member GetAvailabilityStatusOfChildResourceAsync : Azure.Core.ResourceIdentifier * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt;&gt;&#xA;override this.GetAvailabilityStatusOfChildResourceAsync : Azure.Core.ResourceIdentifier * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt;&gt;" Usage="mockableResourceHealthArmClient.GetAvailabilityStatusOfChildResourceAsync (scope, filter, expand, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ResourceHealth</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="expand" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="filter"> The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN. </param>
        <param name="expand"> Setting $expand=recommendedactions in url query expands the recommendedactions in the response. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets current availability status for a single resource
            <list type="bullet"><item><term>Request Path</term><description>/{resourceUri}/providers/Microsoft.ResourceHealth/childAvailabilityStatuses/current</description></item><item><term>Operation Id</term><description>ChildAvailabilityStatuses_GetByResource</description></item><item><term>Default Api Version</term><description>2023-10-01-preview</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="scope" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAvailabilityStatusOfChildResources">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt; GetAvailabilityStatusOfChildResources (Azure.Core.ResourceIdentifier scope, string filter = default, string expand = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt; GetAvailabilityStatusOfChildResources(class Azure.Core.ResourceIdentifier scope, string filter, string expand, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ResourceHealth.Mocking.MockableResourceHealthArmClient.GetAvailabilityStatusOfChildResources(Azure.Core.ResourceIdentifier,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAvailabilityStatusOfChildResources (scope As ResourceIdentifier, Optional filter As String = Nothing, Optional expand As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of ResourceHealthAvailabilityStatus)" />
      <MemberSignature Language="F#" Value="abstract member GetAvailabilityStatusOfChildResources : Azure.Core.ResourceIdentifier * string * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt;&#xA;override this.GetAvailabilityStatusOfChildResources : Azure.Core.ResourceIdentifier * string * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt;" Usage="mockableResourceHealthArmClient.GetAvailabilityStatusOfChildResources (scope, filter, expand, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ResourceHealth</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="expand" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="filter"> The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN. </param>
        <param name="expand"> Setting $expand=recommendedactions in url query expands the recommendedactions in the response. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists the all the children and its current health status for a parent resource. Use the nextLink property in the response to get the next page of children current health
            <list type="bullet"><item><term>Request Path</term><description>/{resourceUri}/providers/Microsoft.ResourceHealth/childResources</description></item><item><term>Operation Id</term><description>ChildResources_List</description></item><item><term>Default Api Version</term><description>2023-10-01-preview</description></item></list></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="scope" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAvailabilityStatusOfChildResourcesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt; GetAvailabilityStatusOfChildResourcesAsync (Azure.Core.ResourceIdentifier scope, string filter = default, string expand = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt; GetAvailabilityStatusOfChildResourcesAsync(class Azure.Core.ResourceIdentifier scope, string filter, string expand, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ResourceHealth.Mocking.MockableResourceHealthArmClient.GetAvailabilityStatusOfChildResourcesAsync(Azure.Core.ResourceIdentifier,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAvailabilityStatusOfChildResourcesAsync (scope As ResourceIdentifier, Optional filter As String = Nothing, Optional expand As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of ResourceHealthAvailabilityStatus)" />
      <MemberSignature Language="F#" Value="abstract member GetAvailabilityStatusOfChildResourcesAsync : Azure.Core.ResourceIdentifier * string * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt;&#xA;override this.GetAvailabilityStatusOfChildResourcesAsync : Azure.Core.ResourceIdentifier * string * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt;" Usage="mockableResourceHealthArmClient.GetAvailabilityStatusOfChildResourcesAsync (scope, filter, expand, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ResourceHealth</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="expand" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="filter"> The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN. </param>
        <param name="expand"> Setting $expand=recommendedactions in url query expands the recommendedactions in the response. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists the all the children and its current health status for a parent resource. Use the nextLink property in the response to get the next page of children current health
            <list type="bullet"><item><term>Request Path</term><description>/{resourceUri}/providers/Microsoft.ResourceHealth/childResources</description></item><item><term>Operation Id</term><description>ChildResources_List</description></item><item><term>Default Api Version</term><description>2023-10-01-preview</description></item></list></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="scope" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetHealthEventsOfSingleResource">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.ResourceHealth.ResourceHealthEventData&gt; GetHealthEventsOfSingleResource (Azure.Core.ResourceIdentifier scope, string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.ResourceHealth.ResourceHealthEventData&gt; GetHealthEventsOfSingleResource(class Azure.Core.ResourceIdentifier scope, string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ResourceHealth.Mocking.MockableResourceHealthArmClient.GetHealthEventsOfSingleResource(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHealthEventsOfSingleResource (scope As ResourceIdentifier, Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of ResourceHealthEventData)" />
      <MemberSignature Language="F#" Value="abstract member GetHealthEventsOfSingleResource : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.ResourceHealth.ResourceHealthEventData&gt;&#xA;override this.GetHealthEventsOfSingleResource : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.ResourceHealth.ResourceHealthEventData&gt;" Usage="mockableResourceHealthArmClient.GetHealthEventsOfSingleResource (scope, filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ResourceHealth</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.ResourceHealth.ResourceHealthEventData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="filter"> The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists current service health events for given resource.
            <list type="bullet"><item><term>Request Path</term><description>/{resourceUri}/providers/Microsoft.ResourceHealth/events</description></item><item><term>Operation Id</term><description>Events_ListBySingleResource</description></item><item><term>Default Api Version</term><description>2023-10-01-preview</description></item></list></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.ResourceHealth.ResourceHealthEventData" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="scope" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetHealthEventsOfSingleResourceAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.ResourceHealth.ResourceHealthEventData&gt; GetHealthEventsOfSingleResourceAsync (Azure.Core.ResourceIdentifier scope, string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.ResourceHealth.ResourceHealthEventData&gt; GetHealthEventsOfSingleResourceAsync(class Azure.Core.ResourceIdentifier scope, string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ResourceHealth.Mocking.MockableResourceHealthArmClient.GetHealthEventsOfSingleResourceAsync(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHealthEventsOfSingleResourceAsync (scope As ResourceIdentifier, Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of ResourceHealthEventData)" />
      <MemberSignature Language="F#" Value="abstract member GetHealthEventsOfSingleResourceAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.ResourceHealth.ResourceHealthEventData&gt;&#xA;override this.GetHealthEventsOfSingleResourceAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.ResourceHealth.ResourceHealthEventData&gt;" Usage="mockableResourceHealthArmClient.GetHealthEventsOfSingleResourceAsync (scope, filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ResourceHealth</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.ResourceHealth.ResourceHealthEventData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="filter"> The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists current service health events for given resource.
            <list type="bullet"><item><term>Request Path</term><description>/{resourceUri}/providers/Microsoft.ResourceHealth/events</description></item><item><term>Operation Id</term><description>Events_ListBySingleResource</description></item><item><term>Default Api Version</term><description>2023-10-01-preview</description></item></list></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.ResourceHealth.ResourceHealthEventData" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="scope" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetHistoricalAvailabilityStatusesOfChildResource">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt; GetHistoricalAvailabilityStatusesOfChildResource (Azure.Core.ResourceIdentifier scope, string filter = default, string expand = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt; GetHistoricalAvailabilityStatusesOfChildResource(class Azure.Core.ResourceIdentifier scope, string filter, string expand, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ResourceHealth.Mocking.MockableResourceHealthArmClient.GetHistoricalAvailabilityStatusesOfChildResource(Azure.Core.ResourceIdentifier,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHistoricalAvailabilityStatusesOfChildResource (scope As ResourceIdentifier, Optional filter As String = Nothing, Optional expand As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of ResourceHealthAvailabilityStatus)" />
      <MemberSignature Language="F#" Value="abstract member GetHistoricalAvailabilityStatusesOfChildResource : Azure.Core.ResourceIdentifier * string * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt;&#xA;override this.GetHistoricalAvailabilityStatusesOfChildResource : Azure.Core.ResourceIdentifier * string * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt;" Usage="mockableResourceHealthArmClient.GetHistoricalAvailabilityStatusesOfChildResource (scope, filter, expand, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ResourceHealth</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="expand" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="filter"> The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN. </param>
        <param name="expand"> Setting $expand=recommendedactions in url query expands the recommendedactions in the response. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists the historical availability statuses for a single child resource. Use the nextLink property in the response to get the next page of availability status
            <list type="bullet"><item><term>Request Path</term><description>/{resourceUri}/providers/Microsoft.ResourceHealth/childAvailabilityStatuses</description></item><item><term>Operation Id</term><description>ChildAvailabilityStatuses_List</description></item><item><term>Default Api Version</term><description>2023-10-01-preview</description></item></list></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="scope" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetHistoricalAvailabilityStatusesOfChildResourceAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt; GetHistoricalAvailabilityStatusesOfChildResourceAsync (Azure.Core.ResourceIdentifier scope, string filter = default, string expand = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt; GetHistoricalAvailabilityStatusesOfChildResourceAsync(class Azure.Core.ResourceIdentifier scope, string filter, string expand, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ResourceHealth.Mocking.MockableResourceHealthArmClient.GetHistoricalAvailabilityStatusesOfChildResourceAsync(Azure.Core.ResourceIdentifier,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHistoricalAvailabilityStatusesOfChildResourceAsync (scope As ResourceIdentifier, Optional filter As String = Nothing, Optional expand As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of ResourceHealthAvailabilityStatus)" />
      <MemberSignature Language="F#" Value="abstract member GetHistoricalAvailabilityStatusesOfChildResourceAsync : Azure.Core.ResourceIdentifier * string * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt;&#xA;override this.GetHistoricalAvailabilityStatusesOfChildResourceAsync : Azure.Core.ResourceIdentifier * string * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt;" Usage="mockableResourceHealthArmClient.GetHistoricalAvailabilityStatusesOfChildResourceAsync (scope, filter, expand, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ResourceHealth</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="expand" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="filter"> The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN. </param>
        <param name="expand"> Setting $expand=recommendedactions in url query expands the recommendedactions in the response. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists the historical availability statuses for a single child resource. Use the nextLink property in the response to get the next page of availability status
            <list type="bullet"><item><term>Request Path</term><description>/{resourceUri}/providers/Microsoft.ResourceHealth/childAvailabilityStatuses</description></item><item><term>Operation Id</term><description>ChildAvailabilityStatuses_List</description></item><item><term>Default Api Version</term><description>2023-10-01-preview</description></item></list></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.ResourceHealth.Models.ResourceHealthAvailabilityStatus" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="scope" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetResourceHealthEventImpactedResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ResourceHealth.ResourceHealthEventImpactedResource GetResourceHealthEventImpactedResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ResourceHealth.ResourceHealthEventImpactedResource GetResourceHealthEventImpactedResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ResourceHealth.Mocking.MockableResourceHealthArmClient.GetResourceHealthEventImpactedResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetResourceHealthEventImpactedResource (id As ResourceIdentifier) As ResourceHealthEventImpactedResource" />
      <MemberSignature Language="F#" Value="abstract member GetResourceHealthEventImpactedResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ResourceHealth.ResourceHealthEventImpactedResource&#xA;override this.GetResourceHealthEventImpactedResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ResourceHealth.ResourceHealthEventImpactedResource" Usage="mockableResourceHealthArmClient.GetResourceHealthEventImpactedResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ResourceHealth</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ResourceHealth.ResourceHealthEventImpactedResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.ResourceHealth.ResourceHealthEventImpactedResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.ResourceHealth.ResourceHealthEventImpactedResource.CreateResourceIdentifier(System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.ResourceHealth.ResourceHealthEventImpactedResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.ResourceHealth.ResourceHealthEventImpactedResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetResourceHealthEventResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ResourceHealth.ResourceHealthEventResource GetResourceHealthEventResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ResourceHealth.ResourceHealthEventResource GetResourceHealthEventResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ResourceHealth.Mocking.MockableResourceHealthArmClient.GetResourceHealthEventResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetResourceHealthEventResource (id As ResourceIdentifier) As ResourceHealthEventResource" />
      <MemberSignature Language="F#" Value="abstract member GetResourceHealthEventResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ResourceHealth.ResourceHealthEventResource&#xA;override this.GetResourceHealthEventResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ResourceHealth.ResourceHealthEventResource" Usage="mockableResourceHealthArmClient.GetResourceHealthEventResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ResourceHealth</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ResourceHealth.ResourceHealthEventResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.ResourceHealth.ResourceHealthEventResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.ResourceHealth.ResourceHealthEventResource.CreateResourceIdentifier(System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.ResourceHealth.ResourceHealthEventResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.ResourceHealth.ResourceHealthEventResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetResourceHealthMetadataEntityResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ResourceHealth.ResourceHealthMetadataEntityResource GetResourceHealthMetadataEntityResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ResourceHealth.ResourceHealthMetadataEntityResource GetResourceHealthMetadataEntityResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ResourceHealth.Mocking.MockableResourceHealthArmClient.GetResourceHealthMetadataEntityResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetResourceHealthMetadataEntityResource (id As ResourceIdentifier) As ResourceHealthMetadataEntityResource" />
      <MemberSignature Language="F#" Value="abstract member GetResourceHealthMetadataEntityResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ResourceHealth.ResourceHealthMetadataEntityResource&#xA;override this.GetResourceHealthMetadataEntityResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ResourceHealth.ResourceHealthMetadataEntityResource" Usage="mockableResourceHealthArmClient.GetResourceHealthMetadataEntityResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ResourceHealth</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ResourceHealth.ResourceHealthMetadataEntityResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.ResourceHealth.ResourceHealthMetadataEntityResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.ResourceHealth.ResourceHealthMetadataEntityResource.CreateResourceIdentifier(System.String)" /> to create a <see cref="T:Azure.ResourceManager.ResourceHealth.ResourceHealthMetadataEntityResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.ResourceHealth.ResourceHealthMetadataEntityResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetServiceEmergingIssueResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ResourceHealth.ServiceEmergingIssueResource GetServiceEmergingIssueResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ResourceHealth.ServiceEmergingIssueResource GetServiceEmergingIssueResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ResourceHealth.Mocking.MockableResourceHealthArmClient.GetServiceEmergingIssueResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetServiceEmergingIssueResource (id As ResourceIdentifier) As ServiceEmergingIssueResource" />
      <MemberSignature Language="F#" Value="abstract member GetServiceEmergingIssueResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ResourceHealth.ServiceEmergingIssueResource&#xA;override this.GetServiceEmergingIssueResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ResourceHealth.ServiceEmergingIssueResource" Usage="mockableResourceHealthArmClient.GetServiceEmergingIssueResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ResourceHealth</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ResourceHealth.ServiceEmergingIssueResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.ResourceHealth.ServiceEmergingIssueResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.ResourceHealth.ServiceEmergingIssueResource.CreateResourceIdentifier(Azure.ResourceManager.ResourceHealth.Models.EmergingIssueNameContent)" /> to create a <see cref="T:Azure.ResourceManager.ResourceHealth.ServiceEmergingIssueResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.ResourceHealth.ServiceEmergingIssueResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTenantResourceHealthEventImpactedResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ResourceHealth.TenantResourceHealthEventImpactedResource GetTenantResourceHealthEventImpactedResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ResourceHealth.TenantResourceHealthEventImpactedResource GetTenantResourceHealthEventImpactedResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ResourceHealth.Mocking.MockableResourceHealthArmClient.GetTenantResourceHealthEventImpactedResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTenantResourceHealthEventImpactedResource (id As ResourceIdentifier) As TenantResourceHealthEventImpactedResource" />
      <MemberSignature Language="F#" Value="abstract member GetTenantResourceHealthEventImpactedResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ResourceHealth.TenantResourceHealthEventImpactedResource&#xA;override this.GetTenantResourceHealthEventImpactedResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ResourceHealth.TenantResourceHealthEventImpactedResource" Usage="mockableResourceHealthArmClient.GetTenantResourceHealthEventImpactedResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ResourceHealth</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ResourceHealth.TenantResourceHealthEventImpactedResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.ResourceHealth.TenantResourceHealthEventImpactedResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.ResourceHealth.TenantResourceHealthEventImpactedResource.CreateResourceIdentifier(System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.ResourceHealth.TenantResourceHealthEventImpactedResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.ResourceHealth.TenantResourceHealthEventImpactedResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTenantResourceHealthEventResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ResourceHealth.TenantResourceHealthEventResource GetTenantResourceHealthEventResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ResourceHealth.TenantResourceHealthEventResource GetTenantResourceHealthEventResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ResourceHealth.Mocking.MockableResourceHealthArmClient.GetTenantResourceHealthEventResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTenantResourceHealthEventResource (id As ResourceIdentifier) As TenantResourceHealthEventResource" />
      <MemberSignature Language="F#" Value="abstract member GetTenantResourceHealthEventResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ResourceHealth.TenantResourceHealthEventResource&#xA;override this.GetTenantResourceHealthEventResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ResourceHealth.TenantResourceHealthEventResource" Usage="mockableResourceHealthArmClient.GetTenantResourceHealthEventResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ResourceHealth</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ResourceHealth.TenantResourceHealthEventResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.ResourceHealth.TenantResourceHealthEventResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.ResourceHealth.TenantResourceHealthEventResource.CreateResourceIdentifier(System.String)" /> to create a <see cref="T:Azure.ResourceManager.ResourceHealth.TenantResourceHealthEventResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.ResourceHealth.TenantResourceHealthEventResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
