<Type Name="ContainerRegistryClient" FullName="Azure.Containers.ContainerRegistry.ContainerRegistryClient">
  <TypeSignature Language="C#" Value="public class ContainerRegistryClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ContainerRegistryClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Containers.ContainerRegistry.ContainerRegistryClient" />
  <TypeSignature Language="VB.NET" Value="Public Class ContainerRegistryClient" />
  <TypeSignature Language="F#" Value="type ContainerRegistryClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The Azure Container Registry service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ContainerRegistryClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of RepositoryClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContainerRegistryClient (Uri endpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryClient.#ctor(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri)" />
      <MemberSignature Language="F#" Value="new Azure.Containers.ContainerRegistry.ContainerRegistryClient : Uri -&gt; Azure.Containers.ContainerRegistry.ContainerRegistryClient" Usage="new Azure.Containers.ContainerRegistry.ContainerRegistryClient endpoint" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="endpoint">The URI endpoint of the container registry.  This is likely to be similar
            to "https://{registry-name}.azurecr.io".</param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Containers.ContainerRegistry.ContainerRegistryClient" /> for managing container images and artifacts,
            using anonymous access to the registry.  Only operations that support anonymous access are enabled.  Other service
            methods will throw <see cref="T:Azure.RequestFailedException" /> if called from this client.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"> Thrown when the <paramref name="endpoint" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContainerRegistryClient (Uri endpoint, Azure.Containers.ContainerRegistry.ContainerRegistryClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Containers.ContainerRegistry.ContainerRegistryClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryClient.#ctor(System.Uri,Azure.Containers.ContainerRegistry.ContainerRegistryClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, options As ContainerRegistryClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Containers.ContainerRegistry.ContainerRegistryClient : Uri * Azure.Containers.ContainerRegistry.ContainerRegistryClientOptions -&gt; Azure.Containers.ContainerRegistry.ContainerRegistryClient" Usage="new Azure.Containers.ContainerRegistry.ContainerRegistryClient (endpoint, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="options" Type="Azure.Containers.ContainerRegistry.ContainerRegistryClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint">The URI endpoint of the container registry.  This is likely to be similar
            to "https://{registry-name}.azurecr.io".</param>
        <param name="options">Client configuration options for connecting to Azure Container Registry.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Containers.ContainerRegistry.ContainerRegistryClient" /> for managing container images and artifacts,
            using anonymous access to the registry.  Only operations that support anonymous access are enabled.  Other service
            methods will throw <see cref="T:Azure.RequestFailedException" /> if called from this client.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"> Thrown when the <paramref name="endpoint" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContainerRegistryClient (Uri endpoint, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryClient.#ctor(System.Uri,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Containers.ContainerRegistry.ContainerRegistryClient : Uri * Azure.Core.TokenCredential -&gt; Azure.Containers.ContainerRegistry.ContainerRegistryClient" Usage="new Azure.Containers.ContainerRegistry.ContainerRegistryClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint">The URI endpoint of the container registry.  This is likely to be similar
            to "https://{registry-name}.azurecr.io".</param>
        <param name="credential">The API key credential used to authenticate requests
            against the container registry.  </param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Containers.ContainerRegistry.ContainerRegistryClient" /> for managing container images and artifacts.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"> Thrown when the <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContainerRegistryClient (Uri endpoint, Azure.Core.TokenCredential credential, Azure.Containers.ContainerRegistry.ContainerRegistryClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential, class Azure.Containers.ContainerRegistry.ContainerRegistryClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Containers.ContainerRegistry.ContainerRegistryClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential, options As ContainerRegistryClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Containers.ContainerRegistry.ContainerRegistryClient : Uri * Azure.Core.TokenCredential * Azure.Containers.ContainerRegistry.ContainerRegistryClientOptions -&gt; Azure.Containers.ContainerRegistry.ContainerRegistryClient" Usage="new Azure.Containers.ContainerRegistry.ContainerRegistryClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Containers.ContainerRegistry.ContainerRegistryClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint">The URI endpoint of the container registry.  This is likely to be similar
            to "https://{registry-name}.azurecr.io".</param>
        <param name="credential">The API key credential used to authenticate requests
            against the container registry.  </param>
        <param name="options">Client configuration options for connecting to Azure Container Registry.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Containers.ContainerRegistry.ContainerRegistryClient" /> for managing container images and artifacts.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"> Thrown when the <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteRepository">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteRepository (string repositoryName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteRepository(string repositoryName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryClient.DeleteRepository(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteRepository (repositoryName As String, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteRepository : string * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.DeleteRepository : string * System.Threading.CancellationToken -&gt; Azure.Response" Usage="containerRegistryClient.DeleteRepository (repositoryName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryName"> Repository name (including the namespace). </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Delete the repository identified by `repository` and all associated artifacts.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"> Thrown when <paramref name="repositoryName" /> is null. </exception>
        <exception cref="T:System.ArgumentException"> Thrown when <paramref name="repositoryName" /> is empty. </exception>
        <exception cref="T:Azure.RequestFailedException">Thrown when a failure is returned by the Container Registry service.</exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteRepositoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteRepositoryAsync (string repositoryName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteRepositoryAsync(string repositoryName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryClient.DeleteRepositoryAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteRepositoryAsync (repositoryName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteRepositoryAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteRepositoryAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="containerRegistryClient.DeleteRepositoryAsync (repositoryName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repositoryName"> Repository name (including the namespace). </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Delete the repository identified by `repository` and all associated artifacts.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"> Thrown when <paramref name="repositoryName" /> is null. </exception>
        <exception cref="T:System.ArgumentException"> Thrown when <paramref name="repositoryName" /> is empty. </exception>
        <exception cref="T:Azure.RequestFailedException">Thrown when a failure is returned by the Container Registry service.</exception>
      </Docs>
    </Member>
    <Member MemberName="Endpoint">
      <MemberSignature Language="C#" Value="public virtual Uri Endpoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Endpoint" />
      <MemberSignature Language="DocId" Value="P:Azure.Containers.ContainerRegistry.ContainerRegistryClient.Endpoint" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Endpoint As Uri" />
      <MemberSignature Language="F#" Value="member this.Endpoint : Uri" Usage="Azure.Containers.ContainerRegistry.ContainerRegistryClient.Endpoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the registry service endpoint for this client.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArtifact">
      <MemberSignature Language="C#" Value="public virtual Azure.Containers.ContainerRegistry.RegistryArtifact GetArtifact (string repositoryName, string tagOrDigest);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Containers.ContainerRegistry.RegistryArtifact GetArtifact(string repositoryName, string tagOrDigest) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryClient.GetArtifact(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetArtifact (repositoryName As String, tagOrDigest As String) As RegistryArtifact" />
      <MemberSignature Language="F#" Value="abstract member GetArtifact : string * string -&gt; Azure.Containers.ContainerRegistry.RegistryArtifact&#xA;override this.GetArtifact : string * string -&gt; Azure.Containers.ContainerRegistry.RegistryArtifact" Usage="containerRegistryClient.GetArtifact (repositoryName, tagOrDigest)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Containers.ContainerRegistry.RegistryArtifact</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryName" Type="System.String" />
        <Parameter Name="tagOrDigest" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="repositoryName"> The name of the repository to reference. </param>
        <param name="tagOrDigest"> Either a tag or a digest that uniquely identifies the artifact. </param>
        <summary>
            Create a new <see cref="T:Azure.Containers.ContainerRegistry.RegistryArtifact" /> object for calling service methods related to the artifact specified by `repositoryName` and `tagOrDigest`.
            </summary>
        <returns> A new <see cref="T:Azure.Containers.ContainerRegistry.RegistryArtifact" /> for the desired repository. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"> Thrown when <paramref name="tagOrDigest" /> is null. </exception>
        <exception cref="T:System.ArgumentException"> Thrown when <paramref name="tagOrDigest" /> is empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRepository">
      <MemberSignature Language="C#" Value="public virtual Azure.Containers.ContainerRegistry.ContainerRepository GetRepository (string repositoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Containers.ContainerRegistry.ContainerRepository GetRepository(string repositoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryClient.GetRepository(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRepository (repositoryName As String) As ContainerRepository" />
      <MemberSignature Language="F#" Value="abstract member GetRepository : string -&gt; Azure.Containers.ContainerRegistry.ContainerRepository&#xA;override this.GetRepository : string -&gt; Azure.Containers.ContainerRegistry.ContainerRepository" Usage="containerRegistryClient.GetRepository repositoryName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Containers.ContainerRegistry.ContainerRepository</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repositoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="repositoryName"> The name of the repository to reference. </param>
        <summary>
            Create a new <see cref="T:Azure.Containers.ContainerRegistry.ContainerRepository" /> object for calling service methods related to the repository specified by `repositoryName`.
            </summary>
        <returns> A new <see cref="T:Azure.Containers.ContainerRegistry.ContainerRepository" /> for the desired repository. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"> Thrown when <paramref name="repositoryName" /> is null. </exception>
        <exception cref="T:System.ArgumentException"> Thrown when <paramref name="repositoryName" /> is empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoryNames">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;string&gt; GetRepositoryNames (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;string&gt; GetRepositoryNames(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryClient.GetRepositoryNames(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRepositoryNames (Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of String)" />
      <MemberSignature Language="F#" Value="abstract member GetRepositoryNames : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;string&gt;&#xA;override this.GetRepositoryNames : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;string&gt;" Usage="containerRegistryClient.GetRepositoryNames cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> List the names of the repositories in this registry. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">Thrown when a failure is returned by the Container Registry service.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRepositoryNamesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;string&gt; GetRepositoryNamesAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;string&gt; GetRepositoryNamesAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryClient.GetRepositoryNamesAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRepositoryNamesAsync (Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of String)" />
      <MemberSignature Language="F#" Value="abstract member GetRepositoryNamesAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;string&gt;&#xA;override this.GetRepositoryNamesAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;string&gt;" Usage="containerRegistryClient.GetRepositoryNamesAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> List the names of the repositories in this registry. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">Thrown when a failure is returned by the Container Registry service.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
