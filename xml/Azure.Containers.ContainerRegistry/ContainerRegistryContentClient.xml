<Type Name="ContainerRegistryContentClient" FullName="Azure.Containers.ContainerRegistry.ContainerRegistryContentClient">
  <TypeSignature Language="C#" Value="public class ContainerRegistryContentClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ContainerRegistryContentClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Containers.ContainerRegistry.ContainerRegistryContentClient" />
  <TypeSignature Language="VB.NET" Value="Public Class ContainerRegistryContentClient" />
  <TypeSignature Language="F#" Value="type ContainerRegistryContentClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.1.0</AssemblyVersion>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The Azure Container Registry content client, responsible for uploading and downloading
            blobs and manifests, the building blocks of artifacts. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ContainerRegistryContentClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryContentClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of ContainerRegistryContentClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContainerRegistryContentClient (Uri endpoint, string repositoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, string repositoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryContentClient.#ctor(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, repositoryName As String)" />
      <MemberSignature Language="F#" Value="new Azure.Containers.ContainerRegistry.ContainerRegistryContentClient : Uri * string -&gt; Azure.Containers.ContainerRegistry.ContainerRegistryContentClient" Usage="new Azure.Containers.ContainerRegistry.ContainerRegistryContentClient (endpoint, repositoryName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="repositoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="endpoint">The URI endpoint of the container registry.  This is likely to be similar
            to "https://{registry-name}.azurecr.io".</param>
        <param name="repositoryName">The name of the repository that logically groups the artifact parts.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Containers.ContainerRegistry.ContainerRegistryContentClient" /> for managing container images and artifacts,
            using anonymous access to the registry.  Only operations that support anonymous access are enabled.  Other service
            methods will throw <see cref="T:Azure.RequestFailedException" /> if called from this client.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"> Thrown when the <paramref name="endpoint" /> or <paramref name="repositoryName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContainerRegistryContentClient (Uri endpoint, string repositoryName, Azure.Containers.ContainerRegistry.ContainerRegistryClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, string repositoryName, class Azure.Containers.ContainerRegistry.ContainerRegistryClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryContentClient.#ctor(System.Uri,System.String,Azure.Containers.ContainerRegistry.ContainerRegistryClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, repositoryName As String, options As ContainerRegistryClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Containers.ContainerRegistry.ContainerRegistryContentClient : Uri * string * Azure.Containers.ContainerRegistry.ContainerRegistryClientOptions -&gt; Azure.Containers.ContainerRegistry.ContainerRegistryContentClient" Usage="new Azure.Containers.ContainerRegistry.ContainerRegistryContentClient (endpoint, repositoryName, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="repositoryName" Type="System.String" />
        <Parameter Name="options" Type="Azure.Containers.ContainerRegistry.ContainerRegistryClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint">The URI endpoint of the container registry.  This is likely to be similar
            to "https://{registry-name}.azurecr.io".</param>
        <param name="repositoryName">The name of the repository that logically groups the artifact parts.</param>
        <param name="options">Client configuration options for connecting to Azure Container Registry.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Containers.ContainerRegistry.ContainerRegistryContentClient" /> for managing container images and artifacts,
            using anonymous access to the registry.  Only operations that support anonymous access are enabled.  Other service
            methods will throw <see cref="T:Azure.RequestFailedException" /> if called from this client.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"> Thrown when the <paramref name="endpoint" /> or <paramref name="repositoryName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContainerRegistryContentClient (Uri endpoint, string repositoryName, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, string repositoryName, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryContentClient.#ctor(System.Uri,System.String,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, repositoryName As String, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Containers.ContainerRegistry.ContainerRegistryContentClient : Uri * string * Azure.Core.TokenCredential -&gt; Azure.Containers.ContainerRegistry.ContainerRegistryContentClient" Usage="new Azure.Containers.ContainerRegistry.ContainerRegistryContentClient (endpoint, repositoryName, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="repositoryName" Type="System.String" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint">The URI endpoint of the container registry.  This is likely to be similar
            to "https://{registry-name}.azurecr.io".</param>
        <param name="repositoryName">The name of the repository that logically groups the artifact parts.</param>
        <param name="credential">The API key credential used to authenticate requests
            against the container registry.  </param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Containers.ContainerRegistry.ContainerRegistryContentClient" /> for managing container images and artifacts.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"> Thrown when the <paramref name="endpoint" />, <paramref name="credential" />, or <paramref name="repositoryName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContainerRegistryContentClient (Uri endpoint, string repositoryName, Azure.Core.TokenCredential credential, Azure.Containers.ContainerRegistry.ContainerRegistryClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, string repositoryName, class Azure.Core.TokenCredential credential, class Azure.Containers.ContainerRegistry.ContainerRegistryClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryContentClient.#ctor(System.Uri,System.String,Azure.Core.TokenCredential,Azure.Containers.ContainerRegistry.ContainerRegistryClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, repositoryName As String, credential As TokenCredential, options As ContainerRegistryClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Containers.ContainerRegistry.ContainerRegistryContentClient : Uri * string * Azure.Core.TokenCredential * Azure.Containers.ContainerRegistry.ContainerRegistryClientOptions -&gt; Azure.Containers.ContainerRegistry.ContainerRegistryContentClient" Usage="new Azure.Containers.ContainerRegistry.ContainerRegistryContentClient (endpoint, repositoryName, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="repositoryName" Type="System.String" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Containers.ContainerRegistry.ContainerRegistryClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint">The URI endpoint of the container registry.  This is likely to be similar
            to "https://{registry-name}.azurecr.io".</param>
        <param name="repositoryName">The name of the repository that logically groups the artifact parts.</param>
        <param name="credential">The API key credential used to authenticate requests
            against the container registry.  </param>
        <param name="options">Client configuration options for connecting to Azure Container Registry.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Containers.ContainerRegistry.ContainerRegistryContentClient" /> for managing container images and artifacts.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"> Thrown when the <paramref name="endpoint" />, <paramref name="credential" />, or <paramref name="repositoryName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteBlob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteBlob (string digest, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteBlob(string digest, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryContentClient.DeleteBlob(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteBlob (digest As String, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteBlob : string * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.DeleteBlob : string * System.Threading.CancellationToken -&gt; Azure.Response" Usage="containerRegistryContentClient.DeleteBlob (digest, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="digest" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="digest">The digest of the blob to delete.</param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Delete a blob.
            </summary>
        <returns>The response received from the delete operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"> If <paramref name="digest" /> is null.</exception>
        <exception cref="T:Azure.RequestFailedException">Thrown when a failure is returned by the Container Registry service.</exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteBlobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteBlobAsync (string digest, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteBlobAsync(string digest, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryContentClient.DeleteBlobAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteBlobAsync (digest As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteBlobAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteBlobAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="containerRegistryContentClient.DeleteBlobAsync (digest, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="digest" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="digest">The digest of the blob to delete.</param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Delete a blob.
            </summary>
        <returns>The response received from the delete operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"> If <paramref name="digest" /> is null.</exception>
        <exception cref="T:Azure.RequestFailedException">Thrown when a failure is returned by the Container Registry service.</exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteManifest">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteManifest (string digest, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteManifest(string digest, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryContentClient.DeleteManifest(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteManifest (digest As String, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteManifest : string * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.DeleteManifest : string * System.Threading.CancellationToken -&gt; Azure.Response" Usage="containerRegistryContentClient.DeleteManifest (digest, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="digest" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="digest">The digest of the manifest to delete.</param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Delete a manifest.  Doing so effectively deletes the artifact from the registry.
            </summary>
        <returns>The response received from the delete operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"> If <paramref name="digest" /> is null.</exception>
        <exception cref="T:Azure.RequestFailedException">Thrown when a failure is returned by the Container Registry service.</exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteManifestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteManifestAsync (string digest, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteManifestAsync(string digest, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryContentClient.DeleteManifestAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteManifestAsync (digest As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteManifestAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteManifestAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="containerRegistryContentClient.DeleteManifestAsync (digest, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="digest" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="digest">The digest of the manifest to delete.</param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Delete a manifest.  Doing so effectively deletes the artifact from the registry.
            </summary>
        <returns>The response received from the delete operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"> If <paramref name="digest" /> is null.</exception>
        <exception cref="T:Azure.RequestFailedException">Thrown when a failure is returned by the Container Registry service.</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadBlobContent">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Containers.ContainerRegistry.DownloadRegistryBlobResult&gt; DownloadBlobContent (string digest, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Containers.ContainerRegistry.DownloadRegistryBlobResult&gt; DownloadBlobContent(string digest, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryContentClient.DownloadBlobContent(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DownloadBlobContent (digest As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DownloadRegistryBlobResult)" />
      <MemberSignature Language="F#" Value="abstract member DownloadBlobContent : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Containers.ContainerRegistry.DownloadRegistryBlobResult&gt;&#xA;override this.DownloadBlobContent : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Containers.ContainerRegistry.DownloadRegistryBlobResult&gt;" Usage="containerRegistryContentClient.DownloadBlobContent (digest, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Containers.ContainerRegistry.DownloadRegistryBlobResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="digest" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="digest">The digest of the blob to download.</param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Download a container registry blob.
            This API is a prefered way to fetch blobs that can fit into memory.
            The content is provided as <see cref="T:System.BinaryData" />, which provides a lightweight abstraction for a payload of bytes.
            It provides convenient helper methods to get out commonly used primitives, such as streams, strings, or bytes.
            To download a blob that does not fit in memory, consider using the <see cref="M:Azure.Containers.ContainerRegistry.ContainerRegistryContentClient.DownloadBlobTo(System.String,System.IO.Stream,System.Threading.CancellationToken)" /> method instead.
            </summary>
        <returns>The result of the download blob content operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"> If <paramref name="digest" /> is null.</exception>
        <exception cref="T:Azure.RequestFailedException">Thrown when a failure is returned by the Container Registry service.</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadBlobContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Containers.ContainerRegistry.DownloadRegistryBlobResult&gt;&gt; DownloadBlobContentAsync (string digest, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Containers.ContainerRegistry.DownloadRegistryBlobResult&gt;&gt; DownloadBlobContentAsync(string digest, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryContentClient.DownloadBlobContentAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DownloadBlobContentAsync (digest As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DownloadRegistryBlobResult))" />
      <MemberSignature Language="F#" Value="abstract member DownloadBlobContentAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Containers.ContainerRegistry.DownloadRegistryBlobResult&gt;&gt;&#xA;override this.DownloadBlobContentAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Containers.ContainerRegistry.DownloadRegistryBlobResult&gt;&gt;" Usage="containerRegistryContentClient.DownloadBlobContentAsync (digest, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Containers.ContainerRegistry.DownloadRegistryBlobResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="digest" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="digest">The digest of the blob to download.</param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Download a container registry blob.
            This API is a prefered way to fetch blobs that can fit into memory.
            The content is provided as <see cref="T:System.BinaryData" />, which provides a lightweight abstraction for a payload of bytes.
            It provides convenient helper methods to get out commonly used primitives, such as streams, strings, or bytes.
            To download a blob that does not fit in memory, consider using the <see cref="M:Azure.Containers.ContainerRegistry.ContainerRegistryContentClient.DownloadBlobToAsync(System.String,System.IO.Stream,System.Threading.CancellationToken)" /> method instead.
            </summary>
        <returns>The result of the download blob content operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"> If <paramref name="digest" /> is null.</exception>
        <exception cref="T:Azure.RequestFailedException">Thrown when a failure is returned by the Container Registry service.</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadBlobStreaming">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Containers.ContainerRegistry.DownloadRegistryBlobStreamingResult&gt; DownloadBlobStreaming (string digest, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Containers.ContainerRegistry.DownloadRegistryBlobStreamingResult&gt; DownloadBlobStreaming(string digest, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryContentClient.DownloadBlobStreaming(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DownloadBlobStreaming (digest As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DownloadRegistryBlobStreamingResult)" />
      <MemberSignature Language="F#" Value="abstract member DownloadBlobStreaming : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Containers.ContainerRegistry.DownloadRegistryBlobStreamingResult&gt;&#xA;override this.DownloadBlobStreaming : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Containers.ContainerRegistry.DownloadRegistryBlobStreamingResult&gt;" Usage="containerRegistryContentClient.DownloadBlobStreaming (digest, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Containers.ContainerRegistry.DownloadRegistryBlobStreamingResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="digest" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="digest">The digest of the blob to download.</param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Downloads a blob from the registry.
            </summary>
        <returns>
            A <see cref="T:Azure.Response`1" /> describing the
            downloaded blob.  <see cref="P:Azure.Containers.ContainerRegistry.DownloadRegistryBlobStreamingResult.Content" /> contains
            the blob's data.
            </returns>
        <remarks>
            This API gives access directly to network stream that should be disposed after usage.
            Consider the following alternatives:
            <list type="bullet"><item><term>DownloadContent</term><description>as a prefered way of downloading small blobs that can fit into memory</description></item><item><term>DownloadTo</term><description>to stream blob content to a path or a <see cref="T:System.IO.Stream" /></description></item></list></remarks>
        <exception cref="T:System.ArgumentNullException"> If <paramref name="digest" /> is null.</exception>
        <exception cref="T:Azure.RequestFailedException">Thrown when a failure is returned by the Container Registry service.</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadBlobStreamingAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Containers.ContainerRegistry.DownloadRegistryBlobStreamingResult&gt;&gt; DownloadBlobStreamingAsync (string digest, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Containers.ContainerRegistry.DownloadRegistryBlobStreamingResult&gt;&gt; DownloadBlobStreamingAsync(string digest, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryContentClient.DownloadBlobStreamingAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DownloadBlobStreamingAsync (digest As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DownloadRegistryBlobStreamingResult))" />
      <MemberSignature Language="F#" Value="abstract member DownloadBlobStreamingAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Containers.ContainerRegistry.DownloadRegistryBlobStreamingResult&gt;&gt;&#xA;override this.DownloadBlobStreamingAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Containers.ContainerRegistry.DownloadRegistryBlobStreamingResult&gt;&gt;" Usage="containerRegistryContentClient.DownloadBlobStreamingAsync (digest, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Containers.ContainerRegistry.DownloadRegistryBlobStreamingResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="digest" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="digest">The digest of the blob to download.</param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Downloads a blob from the registry.
            </summary>
        <returns>
            A <see cref="T:Azure.Response`1" /> describing the
            downloaded blob.  <see cref="P:Azure.Containers.ContainerRegistry.DownloadRegistryBlobStreamingResult.Content" /> contains
            the blob's data.
            </returns>
        <remarks>
            This API gives access directly to network stream that should be disposed after usage.
            Consider the following alternatives:
            <list type="bullet"><item><term>DownloadContent</term><description>as a prefered way of downloading small blobs that can fit into memory</description></item><item><term>DownloadTo</term><description>to stream blob content to a path or a <see cref="T:System.IO.Stream" /></description></item></list></remarks>
        <exception cref="T:System.ArgumentNullException"> If <paramref name="digest" /> is null.</exception>
        <exception cref="T:Azure.RequestFailedException">Thrown when a failure is returned by the Container Registry service.</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadBlobTo">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DownloadBlobTo (string digest, System.IO.Stream destination, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DownloadBlobTo(string digest, class System.IO.Stream destination, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryContentClient.DownloadBlobTo(System.String,System.IO.Stream,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DownloadBlobTo (digest As String, destination As Stream, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DownloadBlobTo : string * System.IO.Stream * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.DownloadBlobTo : string * System.IO.Stream * System.Threading.CancellationToken -&gt; Azure.Response" Usage="containerRegistryContentClient.DownloadBlobTo (digest, destination, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="digest" Type="System.String" />
        <Parameter Name="destination" Type="System.IO.Stream" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="digest">The digest of the blob to download.</param>
        <param name="destination">Destination for the downloaded blob.</param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Download a blob to a passed-in destination stream.
            </summary>
        <returns>The response corresponding to the final GET blob chunk request.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"> If <paramref name="destination" /> is null.</exception>
        <exception cref="T:Azure.RequestFailedException">Thrown when a failure is returned by the Container Registry service.</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadBlobTo">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DownloadBlobTo (string digest, string path, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DownloadBlobTo(string digest, string path, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryContentClient.DownloadBlobTo(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DownloadBlobTo (digest As String, path As String, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DownloadBlobTo : string * string * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.DownloadBlobTo : string * string * System.Threading.CancellationToken -&gt; Azure.Response" Usage="containerRegistryContentClient.DownloadBlobTo (digest, path, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="digest" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="digest">The digest of the blob to download.</param>
        <param name="path">A file path to write the downloaded content to.</param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Download a blob to a file specified by the path parameter.
            </summary>
        <returns>The raw response corresponding to the final GET blob chunk request.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"> If <paramref name="path" /> is null.</exception>
        <exception cref="T:Azure.RequestFailedException">Thrown when a failure is returned by the Container Registry service.</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadBlobToAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DownloadBlobToAsync (string digest, System.IO.Stream destination, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DownloadBlobToAsync(string digest, class System.IO.Stream destination, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryContentClient.DownloadBlobToAsync(System.String,System.IO.Stream,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DownloadBlobToAsync (digest As String, destination As Stream, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DownloadBlobToAsync : string * System.IO.Stream * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DownloadBlobToAsync : string * System.IO.Stream * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="containerRegistryContentClient.DownloadBlobToAsync (digest, destination, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="digest" Type="System.String" />
        <Parameter Name="destination" Type="System.IO.Stream" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="digest">The digest of the blob to download.</param>
        <param name="destination">Destination for the downloaded blob.</param>
        <param name="cancellationToken"> The cancellation token to use.</param>
        <summary>
            Download a blob to a passed-in destination stream.  This approach will download the blob
            to the destination stream in sequential chunks of bytes.
            </summary>
        <returns>The raw response corresponding to the final GET blob chunk request.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"> If <paramref name="destination" /> is null.</exception>
        <exception cref="T:Azure.RequestFailedException">Thrown when a failure is returned by the Container Registry service.</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadBlobToAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DownloadBlobToAsync (string digest, string path, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DownloadBlobToAsync(string digest, string path, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryContentClient.DownloadBlobToAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DownloadBlobToAsync (digest As String, path As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DownloadBlobToAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DownloadBlobToAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="containerRegistryContentClient.DownloadBlobToAsync (digest, path, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="digest" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="digest">The digest of the blob to download.</param>
        <param name="path">A file path to write the downloaded content to.</param>
        <param name="cancellationToken"> The cancellation token to use.</param>
        <summary>
            Download a blob to a file specified by the path parameter.
            </summary>
        <returns>The raw response corresponding to the final GET blob chunk request.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"> If <paramref name="path" /> is null.</exception>
        <exception cref="T:Azure.RequestFailedException">Thrown when a failure is returned by the Container Registry service.</exception>
      </Docs>
    </Member>
    <Member MemberName="Endpoint">
      <MemberSignature Language="C#" Value="public virtual Uri Endpoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Endpoint" />
      <MemberSignature Language="DocId" Value="P:Azure.Containers.ContainerRegistry.ContainerRegistryContentClient.Endpoint" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Endpoint As Uri" />
      <MemberSignature Language="F#" Value="member this.Endpoint : Uri" Usage="Azure.Containers.ContainerRegistry.ContainerRegistryContentClient.Endpoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the registry service endpoint for this client.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetManifest">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Containers.ContainerRegistry.GetManifestResult&gt; GetManifest (string tagOrDigest, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Containers.ContainerRegistry.GetManifestResult&gt; GetManifest(string tagOrDigest, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryContentClient.GetManifest(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetManifest (tagOrDigest As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of GetManifestResult)" />
      <MemberSignature Language="F#" Value="abstract member GetManifest : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Containers.ContainerRegistry.GetManifestResult&gt;&#xA;override this.GetManifest : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Containers.ContainerRegistry.GetManifestResult&gt;" Usage="containerRegistryContentClient.GetManifest (tagOrDigest, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Containers.ContainerRegistry.GetManifestResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagOrDigest" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tagOrDigest">The tag or digest of the manifest to get.</param>
        <param name="cancellationToken">The cancellation token to use.</param>
        <summary>
            Gets a manifest.
            </summary>
        <returns>The GET manifest result.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"> If <paramref name="tagOrDigest" /> is null.</exception>
        <exception cref="T:Azure.RequestFailedException">Thrown when a failure is returned by the Container Registry service.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetManifestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Containers.ContainerRegistry.GetManifestResult&gt;&gt; GetManifestAsync (string tagOrDigest, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Containers.ContainerRegistry.GetManifestResult&gt;&gt; GetManifestAsync(string tagOrDigest, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryContentClient.GetManifestAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetManifestAsync (tagOrDigest As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of GetManifestResult))" />
      <MemberSignature Language="F#" Value="abstract member GetManifestAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Containers.ContainerRegistry.GetManifestResult&gt;&gt;&#xA;override this.GetManifestAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Containers.ContainerRegistry.GetManifestResult&gt;&gt;" Usage="containerRegistryContentClient.GetManifestAsync (tagOrDigest, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Containers.ContainerRegistry.GetManifestResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagOrDigest" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tagOrDigest">The tag or digest of the manifest to get.</param>
        <param name="cancellationToken">The cancellation token to use.</param>
        <summary>
            Get a manifest.
            </summary>
        <returns>The manifest result.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"> If <paramref name="tagOrDigest" /> is null.</exception>
        <exception cref="T:Azure.RequestFailedException">Thrown when a failure is returned by the Container Registry service.</exception>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Containers.ContainerRegistry.ContainerRegistryContentClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Containers.ContainerRegistry.ContainerRegistryContentClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The HttpPipeline.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RepositoryName">
      <MemberSignature Language="C#" Value="public virtual string RepositoryName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RepositoryName" />
      <MemberSignature Language="DocId" Value="P:Azure.Containers.ContainerRegistry.ContainerRegistryContentClient.RepositoryName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RepositoryName As String" />
      <MemberSignature Language="F#" Value="member this.RepositoryName : string" Usage="Azure.Containers.ContainerRegistry.ContainerRegistryContentClient.RepositoryName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the name of the repository that logically groups the artifact parts.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetManifest">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Containers.ContainerRegistry.SetManifestResult&gt; SetManifest (Azure.Containers.ContainerRegistry.OciImageManifest manifest, string tag = default, Azure.Containers.ContainerRegistry.ManifestMediaType? mediaType = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Containers.ContainerRegistry.SetManifestResult&gt; SetManifest(class Azure.Containers.ContainerRegistry.OciImageManifest manifest, string tag, valuetype System.Nullable`1&lt;valuetype Azure.Containers.ContainerRegistry.ManifestMediaType&gt; mediaType, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryContentClient.SetManifest(Azure.Containers.ContainerRegistry.OciImageManifest,System.String,System.Nullable{Azure.Containers.ContainerRegistry.ManifestMediaType},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetManifest (manifest As OciImageManifest, Optional tag As String = Nothing, Optional mediaType As Nullable(Of ManifestMediaType) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SetManifestResult)" />
      <MemberSignature Language="F#" Value="abstract member SetManifest : Azure.Containers.ContainerRegistry.OciImageManifest * string * Nullable&lt;Azure.Containers.ContainerRegistry.ManifestMediaType&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Containers.ContainerRegistry.SetManifestResult&gt;&#xA;override this.SetManifest : Azure.Containers.ContainerRegistry.OciImageManifest * string * Nullable&lt;Azure.Containers.ContainerRegistry.ManifestMediaType&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Containers.ContainerRegistry.SetManifestResult&gt;" Usage="containerRegistryContentClient.SetManifest (manifest, tag, mediaType, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Containers.ContainerRegistry.SetManifestResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manifest" Type="Azure.Containers.ContainerRegistry.OciImageManifest" />
        <Parameter Name="tag" Type="System.String" />
        <Parameter Name="mediaType" Type="System.Nullable&lt;Azure.Containers.ContainerRegistry.ManifestMediaType&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="manifest">The manifest to set.</param>
        <param name="tag">A optional tag to assign to the artifact this manifest represents.</param>
        <param name="mediaType">The media type of the manifest.  If not specified, this value will be set to
            a default value of "application/vnd.oci.image.manifest.v1+json".</param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Sets a manifest.
            </summary>
        <returns>The result of the set manifest operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetManifest">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Containers.ContainerRegistry.SetManifestResult&gt; SetManifest (BinaryData manifest, string tag = default, Azure.Containers.ContainerRegistry.ManifestMediaType? mediaType = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Containers.ContainerRegistry.SetManifestResult&gt; SetManifest(class System.BinaryData manifest, string tag, valuetype System.Nullable`1&lt;valuetype Azure.Containers.ContainerRegistry.ManifestMediaType&gt; mediaType, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryContentClient.SetManifest(System.BinaryData,System.String,System.Nullable{Azure.Containers.ContainerRegistry.ManifestMediaType},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetManifest (manifest As BinaryData, Optional tag As String = Nothing, Optional mediaType As Nullable(Of ManifestMediaType) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SetManifestResult)" />
      <MemberSignature Language="F#" Value="abstract member SetManifest : BinaryData * string * Nullable&lt;Azure.Containers.ContainerRegistry.ManifestMediaType&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Containers.ContainerRegistry.SetManifestResult&gt;&#xA;override this.SetManifest : BinaryData * string * Nullable&lt;Azure.Containers.ContainerRegistry.ManifestMediaType&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Containers.ContainerRegistry.SetManifestResult&gt;" Usage="containerRegistryContentClient.SetManifest (manifest, tag, mediaType, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Containers.ContainerRegistry.SetManifestResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manifest" Type="System.BinaryData" />
        <Parameter Name="tag" Type="System.String" />
        <Parameter Name="mediaType" Type="System.Nullable&lt;Azure.Containers.ContainerRegistry.ManifestMediaType&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="manifest">The <see cref="T:System.BinaryData" /> containing the serialized manifest to set.</param>
        <param name="tag">A optional tag to assign to the artifact this manifest represents.</param>
        <param name="mediaType">The media type of the manifest.  If not specified, this value will be set to
            a default value of "application/vnd.oci.image.manifest.v1+json".</param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Sets a manifest.
            </summary>
        <returns>The result of the set manifest operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"> If <paramref name="manifest" /> is null.</exception>
        <exception cref="T:Azure.RequestFailedException">Thrown when a failure is returned by the Container Registry service.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetManifestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Containers.ContainerRegistry.SetManifestResult&gt;&gt; SetManifestAsync (Azure.Containers.ContainerRegistry.OciImageManifest manifest, string tag = default, Azure.Containers.ContainerRegistry.ManifestMediaType? mediaType = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Containers.ContainerRegistry.SetManifestResult&gt;&gt; SetManifestAsync(class Azure.Containers.ContainerRegistry.OciImageManifest manifest, string tag, valuetype System.Nullable`1&lt;valuetype Azure.Containers.ContainerRegistry.ManifestMediaType&gt; mediaType, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryContentClient.SetManifestAsync(Azure.Containers.ContainerRegistry.OciImageManifest,System.String,System.Nullable{Azure.Containers.ContainerRegistry.ManifestMediaType},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetManifestAsync (manifest As OciImageManifest, Optional tag As String = Nothing, Optional mediaType As Nullable(Of ManifestMediaType) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SetManifestResult))" />
      <MemberSignature Language="F#" Value="abstract member SetManifestAsync : Azure.Containers.ContainerRegistry.OciImageManifest * string * Nullable&lt;Azure.Containers.ContainerRegistry.ManifestMediaType&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Containers.ContainerRegistry.SetManifestResult&gt;&gt;&#xA;override this.SetManifestAsync : Azure.Containers.ContainerRegistry.OciImageManifest * string * Nullable&lt;Azure.Containers.ContainerRegistry.ManifestMediaType&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Containers.ContainerRegistry.SetManifestResult&gt;&gt;" Usage="containerRegistryContentClient.SetManifestAsync (manifest, tag, mediaType, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Containers.ContainerRegistry.SetManifestResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manifest" Type="Azure.Containers.ContainerRegistry.OciImageManifest" />
        <Parameter Name="tag" Type="System.String" />
        <Parameter Name="mediaType" Type="System.Nullable&lt;Azure.Containers.ContainerRegistry.ManifestMediaType&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="manifest">The manifest to set.</param>
        <param name="tag">A optional tag to assign to the artifact this manifest represents.</param>
        <param name="mediaType">The media type of the manifest.  If not specified, this value will be set to
            a default value of "application/vnd.oci.image.manifest.v1+json".</param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Sets a manifest.
            </summary>
        <returns>The result of the set manifest operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"> If <paramref name="manifest" /> is null.</exception>
        <exception cref="T:Azure.RequestFailedException">Thrown when a failure is returned by the Container Registry service.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetManifestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Containers.ContainerRegistry.SetManifestResult&gt;&gt; SetManifestAsync (BinaryData manifest, string tag = default, Azure.Containers.ContainerRegistry.ManifestMediaType? mediaType = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Containers.ContainerRegistry.SetManifestResult&gt;&gt; SetManifestAsync(class System.BinaryData manifest, string tag, valuetype System.Nullable`1&lt;valuetype Azure.Containers.ContainerRegistry.ManifestMediaType&gt; mediaType, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryContentClient.SetManifestAsync(System.BinaryData,System.String,System.Nullable{Azure.Containers.ContainerRegistry.ManifestMediaType},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetManifestAsync (manifest As BinaryData, Optional tag As String = Nothing, Optional mediaType As Nullable(Of ManifestMediaType) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SetManifestResult))" />
      <MemberSignature Language="F#" Value="abstract member SetManifestAsync : BinaryData * string * Nullable&lt;Azure.Containers.ContainerRegistry.ManifestMediaType&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Containers.ContainerRegistry.SetManifestResult&gt;&gt;&#xA;override this.SetManifestAsync : BinaryData * string * Nullable&lt;Azure.Containers.ContainerRegistry.ManifestMediaType&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Containers.ContainerRegistry.SetManifestResult&gt;&gt;" Usage="containerRegistryContentClient.SetManifestAsync (manifest, tag, mediaType, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Containers.ContainerRegistry.SetManifestResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manifest" Type="System.BinaryData" />
        <Parameter Name="tag" Type="System.String" />
        <Parameter Name="mediaType" Type="System.Nullable&lt;Azure.Containers.ContainerRegistry.ManifestMediaType&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="manifest">The <see cref="T:System.BinaryData" /> containing the serialized manifest to set.</param>
        <param name="tag">A optional tag to assign to the artifact this manifest represents.</param>
        <param name="mediaType">The media type of the manifest.  If not specified, this value will be set to
            a default value of "application/vnd.oci.image.manifest.v1+json".</param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Sets a manifest.
            </summary>
        <returns>The result of the set manifest operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"> If <paramref name="manifest" /> is null.</exception>
        <exception cref="T:Azure.RequestFailedException">Thrown when a failure is returned by the Container Registry service.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadBlob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Containers.ContainerRegistry.UploadRegistryBlobResult&gt; UploadBlob (BinaryData content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Containers.ContainerRegistry.UploadRegistryBlobResult&gt; UploadBlob(class System.BinaryData content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryContentClient.UploadBlob(System.BinaryData,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadBlob (content As BinaryData, Optional cancellationToken As CancellationToken = Nothing) As Response(Of UploadRegistryBlobResult)" />
      <MemberSignature Language="F#" Value="abstract member UploadBlob : BinaryData * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Containers.ContainerRegistry.UploadRegistryBlobResult&gt;&#xA;override this.UploadBlob : BinaryData * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Containers.ContainerRegistry.UploadRegistryBlobResult&gt;" Usage="containerRegistryContentClient.UploadBlob (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Containers.ContainerRegistry.UploadRegistryBlobResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.BinaryData" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content">The blob content.</param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Upload a container registry blob.
            </summary>
        <returns>The result of the blob upload.  The raw response associated with this result is the response from the final complete upload request.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"> If <paramref name="content" /> is null.</exception>
        <exception cref="T:Azure.RequestFailedException">Thrown when a failure is returned by the Container Registry service.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadBlob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Containers.ContainerRegistry.UploadRegistryBlobResult&gt; UploadBlob (System.IO.Stream content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Containers.ContainerRegistry.UploadRegistryBlobResult&gt; UploadBlob(class System.IO.Stream content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryContentClient.UploadBlob(System.IO.Stream,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadBlob (content As Stream, Optional cancellationToken As CancellationToken = Nothing) As Response(Of UploadRegistryBlobResult)" />
      <MemberSignature Language="F#" Value="abstract member UploadBlob : System.IO.Stream * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Containers.ContainerRegistry.UploadRegistryBlobResult&gt;&#xA;override this.UploadBlob : System.IO.Stream * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Containers.ContainerRegistry.UploadRegistryBlobResult&gt;" Usage="containerRegistryContentClient.UploadBlob (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Containers.ContainerRegistry.UploadRegistryBlobResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.IO.Stream" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content">The stream containing the blob data.</param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Upload a container registry blob.
            </summary>
        <returns>The result of the blob upload.  The raw response associated with this result is the response from the final complete upload request.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"> If <paramref name="content" /> is null.</exception>
        <exception cref="T:Azure.RequestFailedException">Thrown when a failure is returned by the Container Registry service.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadBlobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Containers.ContainerRegistry.UploadRegistryBlobResult&gt;&gt; UploadBlobAsync (BinaryData content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Containers.ContainerRegistry.UploadRegistryBlobResult&gt;&gt; UploadBlobAsync(class System.BinaryData content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryContentClient.UploadBlobAsync(System.BinaryData,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadBlobAsync (content As BinaryData, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of UploadRegistryBlobResult))" />
      <MemberSignature Language="F#" Value="abstract member UploadBlobAsync : BinaryData * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Containers.ContainerRegistry.UploadRegistryBlobResult&gt;&gt;&#xA;override this.UploadBlobAsync : BinaryData * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Containers.ContainerRegistry.UploadRegistryBlobResult&gt;&gt;" Usage="containerRegistryContentClient.UploadBlobAsync (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Containers.ContainerRegistry.UploadRegistryBlobResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.BinaryData" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content">The blob content.</param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Upload a container registry blob.
            </summary>
        <returns>The result of the blob upload.  The raw response associated with this result is the response from the final complete upload request.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"> If <paramref name="content" /> is null.</exception>
        <exception cref="T:Azure.RequestFailedException">Thrown when a failure is returned by the Container Registry service.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadBlobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Containers.ContainerRegistry.UploadRegistryBlobResult&gt;&gt; UploadBlobAsync (System.IO.Stream content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Containers.ContainerRegistry.UploadRegistryBlobResult&gt;&gt; UploadBlobAsync(class System.IO.Stream content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Containers.ContainerRegistry.ContainerRegistryContentClient.UploadBlobAsync(System.IO.Stream,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadBlobAsync (content As Stream, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of UploadRegistryBlobResult))" />
      <MemberSignature Language="F#" Value="abstract member UploadBlobAsync : System.IO.Stream * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Containers.ContainerRegistry.UploadRegistryBlobResult&gt;&gt;&#xA;override this.UploadBlobAsync : System.IO.Stream * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Containers.ContainerRegistry.UploadRegistryBlobResult&gt;&gt;" Usage="containerRegistryContentClient.UploadBlobAsync (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Containers.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Containers.ContainerRegistry.UploadRegistryBlobResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.IO.Stream" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content">The stream containing the blob data.</param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Upload a container registry blob.
            </summary>
        <returns>The result of the blob upload.  The raw response associated with this result is the response from the final complete upload request.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"> If <paramref name="content" /> is null.</exception>
        <exception cref="T:Azure.RequestFailedException">Thrown when a failure is returned by the Container Registry service.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
