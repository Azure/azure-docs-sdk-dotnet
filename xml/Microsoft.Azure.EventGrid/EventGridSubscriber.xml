<Type Name="EventGridSubscriber" FullName="Microsoft.Azure.EventGrid.EventGridSubscriber">
  <TypeSignature Language="C#" Value="public class EventGridSubscriber : Microsoft.Azure.EventGrid.ICustomEventTypeMapper, Microsoft.Azure.EventGrid.IEventGridEventDeserializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi EventGridSubscriber extends System.Object implements class Microsoft.Azure.EventGrid.ICustomEventTypeMapper, class Microsoft.Azure.EventGrid.IEventGridEventDeserializer" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.EventGrid.EventGridSubscriber" />
  <TypeSignature Language="VB.NET" Value="Public Class EventGridSubscriber&#xA;Implements ICustomEventTypeMapper, IEventGridEventDeserializer" />
  <TypeSignature Language="F#" Value="type EventGridSubscriber = class&#xA;    interface IEventGridEventDeserializer&#xA;    interface ICustomEventTypeMapper" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.EventGrid</AssemblyName>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Azure.EventGrid.ICustomEventTypeMapper</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Azure.EventGrid.IEventGridEventDeserializer</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventGridSubscriber ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.EventGrid.EventGridSubscriber.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOrUpdateCustomEventMapping">
      <MemberSignature Language="C#" Value="public void AddOrUpdateCustomEventMapping (string eventType, Type eventDataType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddOrUpdateCustomEventMapping(string eventType, class System.Type eventDataType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.EventGrid.EventGridSubscriber.AddOrUpdateCustomEventMapping(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddOrUpdateCustomEventMapping (eventType As String, eventDataType As Type)" />
      <MemberSignature Language="F#" Value="abstract member AddOrUpdateCustomEventMapping : string * Type -&gt; unit&#xA;override this.AddOrUpdateCustomEventMapping : string * Type -&gt; unit" Usage="eventGridSubscriber.AddOrUpdateCustomEventMapping (eventType, eventDataType)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.EventGrid.ICustomEventTypeMapper.AddOrUpdateCustomEventMapping(System.String,System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventType" Type="System.String" />
        <Parameter Name="eventDataType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="eventType">The event type to register, such as "Contoso.Items.ItemReceived"</param>
        <param name="eventDataType">The type of eventdata corresponding to this eventType, such as typeof(ContosoItemReceivedEventData)</param>
        <summary>
            Adds or updates a custom event mapping that associates an eventType string with the corresponding type of event data.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeserializeEventGridEvents">
      <MemberSignature Language="C#" Value="public Microsoft.Azure.EventGrid.Models.EventGridEvent[] DeserializeEventGridEvents (System.IO.Stream requestStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.EventGrid.Models.EventGridEvent[] DeserializeEventGridEvents(class System.IO.Stream requestStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.EventGrid.EventGridSubscriber.DeserializeEventGridEvents(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeserializeEventGridEvents (requestStream As Stream) As EventGridEvent()" />
      <MemberSignature Language="F#" Value="abstract member DeserializeEventGridEvents : System.IO.Stream -&gt; Microsoft.Azure.EventGrid.Models.EventGridEvent[]&#xA;override this.DeserializeEventGridEvents : System.IO.Stream -&gt; Microsoft.Azure.EventGrid.Models.EventGridEvent[]" Usage="eventGridSubscriber.DeserializeEventGridEvents requestStream" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.EventGrid.IEventGridEventDeserializer.DeserializeEventGridEvents(System.IO.Stream)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.EventGrid.Models.EventGridEvent[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="requestStream">Request Stream</param>
        <summary>
            Deserializes the provided stream using a default JSON serializer that supports all system event types.
            A webhook/function that is consuming events can call this function to deserialize EventGrid events.
            For system events, the Data property of each event in the returned array will be set to the appropriate
            type (e.g. StorageBlobCreatedEventData). For events on custom topics where the type of the Data property
            can be of any type, the calling function will have to first add a custom event mapping before calling this function.
            </summary>
        <returns>A list of EventGrid Events</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeserializeEventGridEvents">
      <MemberSignature Language="C#" Value="public Microsoft.Azure.EventGrid.Models.EventGridEvent[] DeserializeEventGridEvents (string requestContent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.EventGrid.Models.EventGridEvent[] DeserializeEventGridEvents(string requestContent) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.EventGrid.EventGridSubscriber.DeserializeEventGridEvents(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeserializeEventGridEvents (requestContent As String) As EventGridEvent()" />
      <MemberSignature Language="F#" Value="abstract member DeserializeEventGridEvents : string -&gt; Microsoft.Azure.EventGrid.Models.EventGridEvent[]&#xA;override this.DeserializeEventGridEvents : string -&gt; Microsoft.Azure.EventGrid.Models.EventGridEvent[]" Usage="eventGridSubscriber.DeserializeEventGridEvents requestContent" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.EventGrid.IEventGridEventDeserializer.DeserializeEventGridEvents(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.EventGrid.Models.EventGridEvent[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestContent" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestContent">The JSON string containing an array of EventGrid events</param>
        <summary>
            Deserializes the provided event data using a default JSON serializer that supports all system event types.
            A webhook/function that is consuming events can call this function to deserialize EventGrid events.
            For system events, the Data property of each event in the returned array will be set to the appropriate
            type (e.g. StorageBlobCreatedEventData). For events on custom topics where the type of the Data property
            can be of any type, the calling function will have to first add a custom event mapping before calling this function.
            </summary>
        <returns>A list of EventGrid Events</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeserializeEventGridEvents">
      <MemberSignature Language="C#" Value="public Microsoft.Azure.EventGrid.Models.EventGridEvent[] DeserializeEventGridEvents (System.IO.Stream requestStream, Newtonsoft.Json.JsonSerializer jsonSerializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.EventGrid.Models.EventGridEvent[] DeserializeEventGridEvents(class System.IO.Stream requestStream, class Newtonsoft.Json.JsonSerializer jsonSerializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.EventGrid.EventGridSubscriber.DeserializeEventGridEvents(System.IO.Stream,Newtonsoft.Json.JsonSerializer)" />
      <MemberSignature Language="F#" Value="abstract member DeserializeEventGridEvents : System.IO.Stream * Newtonsoft.Json.JsonSerializer -&gt; Microsoft.Azure.EventGrid.Models.EventGridEvent[]&#xA;override this.DeserializeEventGridEvents : System.IO.Stream * Newtonsoft.Json.JsonSerializer -&gt; Microsoft.Azure.EventGrid.Models.EventGridEvent[]" Usage="eventGridSubscriber.DeserializeEventGridEvents (requestStream, jsonSerializer)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.EventGrid.IEventGridEventDeserializer.DeserializeEventGridEvents(System.IO.Stream,Newtonsoft.Json.JsonSerializer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.EventGrid.Models.EventGridEvent[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestStream" Type="System.IO.Stream" />
        <Parameter Name="jsonSerializer" Type="Newtonsoft.Json.JsonSerializer" />
      </Parameters>
      <Docs>
        <param name="requestStream">Request Stream</param>
        <param name="jsonSerializer">JsonSerializer to use for the deserialization.</param>
        <summary>
            Deserializes the provided stream using a custom JSON serializer.
            A webhook/function that is consuming events can call this function to deserialize EventGrid events.
            For system events, the Data property of each event in the returned array will be set to the appropriate
            type (e.g. StorageBlobCreatedEventData). For events on custom topics where the type of the Data property
            can be of any type, the calling function will have to first add a custom event mapping before calling this function.
            </summary>
        <returns>A list of EventGrid Events</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeserializeEventGridEvents">
      <MemberSignature Language="C#" Value="public Microsoft.Azure.EventGrid.Models.EventGridEvent[] DeserializeEventGridEvents (string requestContent, Newtonsoft.Json.JsonSerializer jsonSerializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.EventGrid.Models.EventGridEvent[] DeserializeEventGridEvents(string requestContent, class Newtonsoft.Json.JsonSerializer jsonSerializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.EventGrid.EventGridSubscriber.DeserializeEventGridEvents(System.String,Newtonsoft.Json.JsonSerializer)" />
      <MemberSignature Language="F#" Value="abstract member DeserializeEventGridEvents : string * Newtonsoft.Json.JsonSerializer -&gt; Microsoft.Azure.EventGrid.Models.EventGridEvent[]&#xA;override this.DeserializeEventGridEvents : string * Newtonsoft.Json.JsonSerializer -&gt; Microsoft.Azure.EventGrid.Models.EventGridEvent[]" Usage="eventGridSubscriber.DeserializeEventGridEvents (requestContent, jsonSerializer)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.EventGrid.IEventGridEventDeserializer.DeserializeEventGridEvents(System.String,Newtonsoft.Json.JsonSerializer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.EventGrid.Models.EventGridEvent[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestContent" Type="System.String" />
        <Parameter Name="jsonSerializer" Type="Newtonsoft.Json.JsonSerializer" />
      </Parameters>
      <Docs>
        <param name="requestContent">The JSON string containing an array of EventGrid events</param>
        <param name="jsonSerializer">JsonSerializer to use for the deserialization.</param>
        <summary>
            Deserializes the provided event data using a custom JSON serializer.
            A webhook/function that is consuming events can call this function to deserialize EventGrid events.
            For system events, the Data property of each event in the returned array will be set to the appropriate
            type (e.g. StorageBlobCreatedEventData). For events on custom topics where the type of the Data property
            can be of any type, the calling function will have to first add a custom event mapping before calling this function.
            </summary>
        <returns>A list of EventGrid Events</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ListAllCustomEventMappings">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,Type&gt;&gt; ListAllCustomEventMappings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Type&gt;&gt; ListAllCustomEventMappings() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.EventGrid.EventGridSubscriber.ListAllCustomEventMappings" />
      <MemberSignature Language="VB.NET" Value="Public Iterator Overridable NotOverridable Function ListAllCustomEventMappings () As IEnumerable(Of KeyValuePair(Of String, Type))" />
      <MemberSignature Language="F#" Value="abstract member ListAllCustomEventMappings : unit -&gt; seq&lt;System.Collections.Generic.KeyValuePair&lt;string, Type&gt;&gt;&#xA;override this.ListAllCustomEventMappings : unit -&gt; seq&lt;System.Collections.Generic.KeyValuePair&lt;string, Type&gt;&gt;" Usage="eventGridSubscriber.ListAllCustomEventMappings " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.EventGrid.ICustomEventTypeMapper.ListAllCustomEventMappings</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-dotnet">
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(Microsoft.Azure.EventGrid.EventGridSubscriber/&lt;ListAllCustomEventMappings&gt;d__10))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Type&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            List all registered custom event mappings.
            </summary>
        <returns>An IEnumerable of mappings</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetCustomEventMapping">
      <MemberSignature Language="C#" Value="public bool TryGetCustomEventMapping (string eventType, out Type eventDataType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetCustomEventMapping(string eventType, [out] class System.Type&amp; eventDataType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.EventGrid.EventGridSubscriber.TryGetCustomEventMapping(System.String,System.Type@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetCustomEventMapping (eventType As String, ByRef eventDataType As Type) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryGetCustomEventMapping : string *  -&gt; bool&#xA;override this.TryGetCustomEventMapping : string *  -&gt; bool" Usage="eventGridSubscriber.TryGetCustomEventMapping (eventType, eventDataType)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.EventGrid.ICustomEventTypeMapper.TryGetCustomEventMapping(System.String,System.Type@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventType" Type="System.String" />
        <Parameter Name="eventDataType" Type="System.Type" RefType="out" />
      </Parameters>
      <Docs>
        <param name="eventType">The registered event type, such as "Contoso.Items.ItemReceived"</param>
        <param name="eventDataType">The type of eventdata corresponding to this eventType, such as typeof(ContosoItemReceivedEventData)</param>
        <summary>
            Gets information about a custom event mapping.
            </summary>
        <returns>True if the specified mapping exists.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryRemoveCustomEventMapping">
      <MemberSignature Language="C#" Value="public bool TryRemoveCustomEventMapping (string eventType, out Type eventDataType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryRemoveCustomEventMapping(string eventType, [out] class System.Type&amp; eventDataType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.EventGrid.EventGridSubscriber.TryRemoveCustomEventMapping(System.String,System.Type@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryRemoveCustomEventMapping (eventType As String, ByRef eventDataType As Type) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryRemoveCustomEventMapping : string *  -&gt; bool&#xA;override this.TryRemoveCustomEventMapping : string *  -&gt; bool" Usage="eventGridSubscriber.TryRemoveCustomEventMapping (eventType, eventDataType)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.EventGrid.ICustomEventTypeMapper.TryRemoveCustomEventMapping(System.String,System.Type@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventType" Type="System.String" />
        <Parameter Name="eventDataType" Type="System.Type" RefType="out" />
      </Parameters>
      <Docs>
        <param name="eventType">The registered event type, such as "Contoso.Items.ItemReceived"</param>
        <param name="eventDataType">The type of eventdata corresponding to this eventType, such as typeof(ContosoItemReceivedEventData)</param>
        <summary>
            Removes a custom event mapping.
            </summary>
        <returns>True if the specified mapping was removed successfully.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>