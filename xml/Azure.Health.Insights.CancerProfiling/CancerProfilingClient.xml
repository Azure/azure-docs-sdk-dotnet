<Type Name="CancerProfilingClient" FullName="Azure.Health.Insights.CancerProfiling.CancerProfilingClient">
  <TypeSignature Language="C#" Value="public class CancerProfilingClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CancerProfilingClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Health.Insights.CancerProfiling.CancerProfilingClient" />
  <TypeSignature Language="VB.NET" Value="Public Class CancerProfilingClient" />
  <TypeSignature Language="F#" Value="type CancerProfilingClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Health.Insights.CancerProfiling</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The CancerProfiling service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CancerProfilingClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Health.Insights.CancerProfiling.CancerProfilingClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Health.Insights.CancerProfiling</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of CancerProfilingClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CancerProfilingClient (Uri endpoint, Azure.AzureKeyCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.AzureKeyCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Health.Insights.CancerProfiling.CancerProfilingClient.#ctor(System.Uri,Azure.AzureKeyCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As AzureKeyCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Health.Insights.CancerProfiling.CancerProfilingClient : Uri * Azure.AzureKeyCredential -&gt; Azure.Health.Insights.CancerProfiling.CancerProfilingClient" Usage="new Azure.Health.Insights.CancerProfiling.CancerProfilingClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Health.Insights.CancerProfiling</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint"> Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus2.api.cognitive.microsoft.com). </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of CancerProfilingClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CancerProfilingClient (Uri endpoint, Azure.AzureKeyCredential credential, Azure.Health.Insights.CancerProfiling.CancerProfilingClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.AzureKeyCredential credential, class Azure.Health.Insights.CancerProfiling.CancerProfilingClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Health.Insights.CancerProfiling.CancerProfilingClient.#ctor(System.Uri,Azure.AzureKeyCredential,Azure.Health.Insights.CancerProfiling.CancerProfilingClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As AzureKeyCredential, options As CancerProfilingClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Health.Insights.CancerProfiling.CancerProfilingClient : Uri * Azure.AzureKeyCredential * Azure.Health.Insights.CancerProfiling.CancerProfilingClientOptions -&gt; Azure.Health.Insights.CancerProfiling.CancerProfilingClient" Usage="new Azure.Health.Insights.CancerProfiling.CancerProfilingClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Health.Insights.CancerProfiling</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
        <Parameter Name="options" Type="Azure.Health.Insights.CancerProfiling.CancerProfilingClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus2.api.cognitive.microsoft.com). </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of CancerProfilingClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="InferCancerProfile">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; InferCancerProfile (Azure.WaitUntil waitUntil, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; InferCancerProfile(valuetype Azure.WaitUntil waitUntil, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Health.Insights.CancerProfiling.CancerProfilingClient.InferCancerProfile(Azure.WaitUntil,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function InferCancerProfile (waitUntil As WaitUntil, content As RequestContent, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member InferCancerProfile : Azure.WaitUntil * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.InferCancerProfile : Azure.WaitUntil * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="cancerProfilingClient.InferCancerProfile (waitUntil, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Health.Insights.CancerProfiling</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create Onco Phenotype job
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Health.Insights.CancerProfiling.CancerProfilingClient.InferCancerProfile(Azure.WaitUntil,Azure.Health.Insights.CancerProfiling.OncoPhenotypeData,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call InferCancerProfile and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CancerProfilingClient client = new CancerProfilingClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    patients = new object[]
    {
        new
        {
            id = "<id>",
        }
    },
});
Operation<BinaryData> operation = client.InferCancerProfile(WaitUntil.Completed, content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("modelVersion").ToString());
]]></code>
This sample shows how to call InferCancerProfile with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CancerProfilingClient client = new CancerProfilingClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    patients = new object[]
    {
        new
        {
            id = "<id>",
            info = new
            {
                sex = "female",
                birthDate = "2022-05-10",
                clinicalInfo = new object[]
                {
                    new
                    {
                        system = "<system>",
                        code = "<code>",
                        name = "<name>",
                        value = "<value>",
                    }
                },
            },
            data = new object[]
            {
                new
                {
                    type = "note",
                    clinicalType = "consultation",
                    id = "<id>",
                    language = "<language>",
                    createdDateTime = "2022-05-10T18:57:31.2311892Z",
                    content = new
                    {
                        sourceType = "inline",
                        value = "<value>",
                    },
                }
            },
        }
    },
    configuration = new
    {
        verbose = true,
        includeEvidence = true,
        inferenceTypes = new object[]
        {
            "tumorSite"
        },
        checkForCancerCase = true,
    },
});
Operation<BinaryData> operation = client.InferCancerProfile(WaitUntil.Completed, content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("confidenceScore").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientDataEvidence").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientDataEvidence").GetProperty("text").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientDataEvidence").GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientDataEvidence").GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientInfoEvidence").GetProperty("system").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientInfoEvidence").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientInfoEvidence").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientInfoEvidence").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("importance").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("caseId").ToString());
Console.WriteLine(result.GetProperty("modelVersion").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="InferCancerProfile">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;Azure.Health.Insights.CancerProfiling.OncoPhenotypeResults&gt; InferCancerProfile (Azure.WaitUntil waitUntil, Azure.Health.Insights.CancerProfiling.OncoPhenotypeData body, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class Azure.Health.Insights.CancerProfiling.OncoPhenotypeResults&gt; InferCancerProfile(valuetype Azure.WaitUntil waitUntil, class Azure.Health.Insights.CancerProfiling.OncoPhenotypeData body, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Health.Insights.CancerProfiling.CancerProfilingClient.InferCancerProfile(Azure.WaitUntil,Azure.Health.Insights.CancerProfiling.OncoPhenotypeData,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function InferCancerProfile (waitUntil As WaitUntil, body As OncoPhenotypeData, Optional cancellationToken As CancellationToken = Nothing) As Operation(Of OncoPhenotypeResults)" />
      <MemberSignature Language="F#" Value="abstract member InferCancerProfile : Azure.WaitUntil * Azure.Health.Insights.CancerProfiling.OncoPhenotypeData * System.Threading.CancellationToken -&gt; Azure.Operation&lt;Azure.Health.Insights.CancerProfiling.OncoPhenotypeResults&gt;&#xA;override this.InferCancerProfile : Azure.WaitUntil * Azure.Health.Insights.CancerProfiling.OncoPhenotypeData * System.Threading.CancellationToken -&gt; Azure.Operation&lt;Azure.Health.Insights.CancerProfiling.OncoPhenotypeResults&gt;" Usage="cancerProfilingClient.InferCancerProfile (waitUntil, body, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Health.Insights.CancerProfiling</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;Azure.Health.Insights.CancerProfiling.OncoPhenotypeResults&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="body" Type="Azure.Health.Insights.CancerProfiling.OncoPhenotypeData" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="body"> Body parameter. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Create Onco Phenotype job. </summary>
        <returns>To be added.</returns>
        <remarks> Creates an Onco Phenotype job with the given request body. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> is null. </exception>
        <example>
This sample shows how to call InferCancerProfile.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CancerProfilingClient client = new CancerProfilingClient(endpoint, credential);

OncoPhenotypeData body = new OncoPhenotypeData(new PatientRecord[]
{
    new PatientRecord("<id>")
});
Operation<OncoPhenotypeResults> operation = client.InferCancerProfile(WaitUntil.Completed, body);
OncoPhenotypeResults responseData = operation.Value;
]]></code>
This sample shows how to call InferCancerProfile with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CancerProfilingClient client = new CancerProfilingClient(endpoint, credential);

OncoPhenotypeData body = new OncoPhenotypeData(new PatientRecord[]
{
    new PatientRecord("<id>")
    {
        Info = new PatientInfo
        {
            Sex = PatientInfoSex.Female,
            BirthDate = DateTimeOffset.Parse("2022-05-10"),
            ClinicalInfo = {new ClinicalCodedElement("<system>", "<code>")
            {
                Name = "<name>",
                Value = "<value>",
            }},
        },
        Data = {new PatientDocument(DocumentType.Note, "<id>", new DocumentContent(DocumentContentSourceType.Inline, "<value>"))
        {
            ClinicalType = ClinicalDocumentType.Consultation,
            Language = "<language>",
            CreatedDateTime = DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
        }},
    }
})
{
    Configuration = new OncoPhenotypeModelConfiguration
    {
        Verbose = true,
        IncludeEvidence = true,
        InferenceTypes = { OncoPhenotypeInferenceType.TumorSite },
        CheckForCancerCase = true,
    },
};
Operation<OncoPhenotypeResults> operation = client.InferCancerProfile(WaitUntil.Completed, body);
OncoPhenotypeResults responseData = operation.Value;
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="InferCancerProfileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; InferCancerProfileAsync (Azure.WaitUntil waitUntil, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; InferCancerProfileAsync(valuetype Azure.WaitUntil waitUntil, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Health.Insights.CancerProfiling.CancerProfilingClient.InferCancerProfileAsync(Azure.WaitUntil,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function InferCancerProfileAsync (waitUntil As WaitUntil, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member InferCancerProfileAsync : Azure.WaitUntil * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.InferCancerProfileAsync : Azure.WaitUntil * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="cancerProfilingClient.InferCancerProfileAsync (waitUntil, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Health.Insights.CancerProfiling</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create Onco Phenotype job
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Health.Insights.CancerProfiling.CancerProfilingClient.InferCancerProfileAsync(Azure.WaitUntil,Azure.Health.Insights.CancerProfiling.OncoPhenotypeData,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call InferCancerProfileAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CancerProfilingClient client = new CancerProfilingClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    patients = new object[]
    {
        new
        {
            id = "<id>",
        }
    },
});
Operation<BinaryData> operation = await client.InferCancerProfileAsync(WaitUntil.Completed, content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("modelVersion").ToString());
]]></code>
This sample shows how to call InferCancerProfileAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CancerProfilingClient client = new CancerProfilingClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    patients = new object[]
    {
        new
        {
            id = "<id>",
            info = new
            {
                sex = "female",
                birthDate = "2022-05-10",
                clinicalInfo = new object[]
                {
                    new
                    {
                        system = "<system>",
                        code = "<code>",
                        name = "<name>",
                        value = "<value>",
                    }
                },
            },
            data = new object[]
            {
                new
                {
                    type = "note",
                    clinicalType = "consultation",
                    id = "<id>",
                    language = "<language>",
                    createdDateTime = "2022-05-10T18:57:31.2311892Z",
                    content = new
                    {
                        sourceType = "inline",
                        value = "<value>",
                    },
                }
            },
        }
    },
    configuration = new
    {
        verbose = true,
        includeEvidence = true,
        inferenceTypes = new object[]
        {
            "tumorSite"
        },
        checkForCancerCase = true,
    },
});
Operation<BinaryData> operation = await client.InferCancerProfileAsync(WaitUntil.Completed, content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("confidenceScore").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientDataEvidence").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientDataEvidence").GetProperty("text").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientDataEvidence").GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientDataEvidence").GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientInfoEvidence").GetProperty("system").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientInfoEvidence").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientInfoEvidence").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientInfoEvidence").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("importance").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("caseId").ToString());
Console.WriteLine(result.GetProperty("modelVersion").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="InferCancerProfileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;Azure.Health.Insights.CancerProfiling.OncoPhenotypeResults&gt;&gt; InferCancerProfileAsync (Azure.WaitUntil waitUntil, Azure.Health.Insights.CancerProfiling.OncoPhenotypeData body, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class Azure.Health.Insights.CancerProfiling.OncoPhenotypeResults&gt;&gt; InferCancerProfileAsync(valuetype Azure.WaitUntil waitUntil, class Azure.Health.Insights.CancerProfiling.OncoPhenotypeData body, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Health.Insights.CancerProfiling.CancerProfilingClient.InferCancerProfileAsync(Azure.WaitUntil,Azure.Health.Insights.CancerProfiling.OncoPhenotypeData,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function InferCancerProfileAsync (waitUntil As WaitUntil, body As OncoPhenotypeData, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Operation(Of OncoPhenotypeResults))" />
      <MemberSignature Language="F#" Value="abstract member InferCancerProfileAsync : Azure.WaitUntil * Azure.Health.Insights.CancerProfiling.OncoPhenotypeData * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;Azure.Health.Insights.CancerProfiling.OncoPhenotypeResults&gt;&gt;&#xA;override this.InferCancerProfileAsync : Azure.WaitUntil * Azure.Health.Insights.CancerProfiling.OncoPhenotypeData * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;Azure.Health.Insights.CancerProfiling.OncoPhenotypeResults&gt;&gt;" Usage="cancerProfilingClient.InferCancerProfileAsync (waitUntil, body, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Health.Insights.CancerProfiling</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;Azure.Health.Insights.CancerProfiling.OncoPhenotypeResults&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="body" Type="Azure.Health.Insights.CancerProfiling.OncoPhenotypeData" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="body"> Body parameter. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Create Onco Phenotype job. </summary>
        <returns>To be added.</returns>
        <remarks> Creates an Onco Phenotype job with the given request body. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> is null. </exception>
        <example>
This sample shows how to call InferCancerProfileAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CancerProfilingClient client = new CancerProfilingClient(endpoint, credential);

OncoPhenotypeData body = new OncoPhenotypeData(new PatientRecord[]
{
    new PatientRecord("<id>")
});
Operation<OncoPhenotypeResults> operation = await client.InferCancerProfileAsync(WaitUntil.Completed, body);
OncoPhenotypeResults responseData = operation.Value;
]]></code>
This sample shows how to call InferCancerProfileAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CancerProfilingClient client = new CancerProfilingClient(endpoint, credential);

OncoPhenotypeData body = new OncoPhenotypeData(new PatientRecord[]
{
    new PatientRecord("<id>")
    {
        Info = new PatientInfo
        {
            Sex = PatientInfoSex.Female,
            BirthDate = DateTimeOffset.Parse("2022-05-10"),
            ClinicalInfo = {new ClinicalCodedElement("<system>", "<code>")
            {
                Name = "<name>",
                Value = "<value>",
            }},
        },
        Data = {new PatientDocument(DocumentType.Note, "<id>", new DocumentContent(DocumentContentSourceType.Inline, "<value>"))
        {
            ClinicalType = ClinicalDocumentType.Consultation,
            Language = "<language>",
            CreatedDateTime = DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
        }},
    }
})
{
    Configuration = new OncoPhenotypeModelConfiguration
    {
        Verbose = true,
        IncludeEvidence = true,
        InferenceTypes = { OncoPhenotypeInferenceType.TumorSite },
        CheckForCancerCase = true,
    },
};
Operation<OncoPhenotypeResults> operation = await client.InferCancerProfileAsync(WaitUntil.Completed, body);
OncoPhenotypeResults responseData = operation.Value;
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Health.Insights.CancerProfiling.CancerProfilingClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Health.Insights.CancerProfiling.CancerProfilingClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Health.Insights.CancerProfiling</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
