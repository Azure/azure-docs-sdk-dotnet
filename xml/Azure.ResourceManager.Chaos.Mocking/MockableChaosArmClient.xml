<Type Name="MockableChaosArmClient" FullName="Azure.ResourceManager.Chaos.Mocking.MockableChaosArmClient">
  <TypeSignature Language="C#" Value="public class MockableChaosArmClient : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MockableChaosArmClient extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.Chaos.Mocking.MockableChaosArmClient" />
  <TypeSignature Language="VB.NET" Value="Public Class MockableChaosArmClient&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type MockableChaosArmClient = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.Chaos</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> A class to add extension methods to ArmClient. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MockableChaosArmClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Chaos.Mocking.MockableChaosArmClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Chaos</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Chaos.Mocking.MockableChaosArmClient" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCapabilityResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Chaos.CapabilityResource GetCapabilityResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Chaos.CapabilityResource GetCapabilityResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Chaos.Mocking.MockableChaosArmClient.GetCapabilityResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCapabilityResource (id As ResourceIdentifier) As CapabilityResource" />
      <MemberSignature Language="F#" Value="abstract member GetCapabilityResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Chaos.CapabilityResource&#xA;override this.GetCapabilityResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Chaos.CapabilityResource" Usage="mockableChaosArmClient.GetCapabilityResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Chaos</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Chaos.CapabilityResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Chaos.CapabilityResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Chaos.CapabilityResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Chaos.CapabilityResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Chaos.CapabilityResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCapabilityTypeResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Chaos.CapabilityTypeResource GetCapabilityTypeResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Chaos.CapabilityTypeResource GetCapabilityTypeResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Chaos.Mocking.MockableChaosArmClient.GetCapabilityTypeResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCapabilityTypeResource (id As ResourceIdentifier) As CapabilityTypeResource" />
      <MemberSignature Language="F#" Value="abstract member GetCapabilityTypeResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Chaos.CapabilityTypeResource&#xA;override this.GetCapabilityTypeResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Chaos.CapabilityTypeResource" Usage="mockableChaosArmClient.GetCapabilityTypeResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Chaos</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Chaos.CapabilityTypeResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Chaos.CapabilityTypeResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Chaos.CapabilityTypeResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Chaos.CapabilityTypeResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Chaos.CapabilityTypeResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExperimentExecutionDetailResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Chaos.ExperimentExecutionDetailResource GetExperimentExecutionDetailResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Chaos.ExperimentExecutionDetailResource GetExperimentExecutionDetailResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Chaos.Mocking.MockableChaosArmClient.GetExperimentExecutionDetailResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExperimentExecutionDetailResource (id As ResourceIdentifier) As ExperimentExecutionDetailResource" />
      <MemberSignature Language="F#" Value="abstract member GetExperimentExecutionDetailResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Chaos.ExperimentExecutionDetailResource&#xA;override this.GetExperimentExecutionDetailResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Chaos.ExperimentExecutionDetailResource" Usage="mockableChaosArmClient.GetExperimentExecutionDetailResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Chaos</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Chaos.ExperimentExecutionDetailResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.Chaos.ExperimentExecutionDetailResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Chaos.ExperimentExecutionDetailResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.Chaos.ExperimentExecutionDetailResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Chaos.ExperimentExecutionDetailResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExperimentResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Chaos.ExperimentResource GetExperimentResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Chaos.ExperimentResource GetExperimentResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Chaos.Mocking.MockableChaosArmClient.GetExperimentResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExperimentResource (id As ResourceIdentifier) As ExperimentResource" />
      <MemberSignature Language="F#" Value="abstract member GetExperimentResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Chaos.ExperimentResource&#xA;override this.GetExperimentResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Chaos.ExperimentResource" Usage="mockableChaosArmClient.GetExperimentResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Chaos</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Chaos.ExperimentResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.Chaos.ExperimentResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Chaos.ExperimentResource.CreateResourceIdentifier(System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.Chaos.ExperimentResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Chaos.ExperimentResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExperimentStatusResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Chaos.ExperimentStatusResource GetExperimentStatusResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Chaos.ExperimentStatusResource GetExperimentStatusResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Chaos.Mocking.MockableChaosArmClient.GetExperimentStatusResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExperimentStatusResource (id As ResourceIdentifier) As ExperimentStatusResource" />
      <MemberSignature Language="F#" Value="abstract member GetExperimentStatusResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Chaos.ExperimentStatusResource&#xA;override this.GetExperimentStatusResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Chaos.ExperimentStatusResource" Usage="mockableChaosArmClient.GetExperimentStatusResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Chaos</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Chaos.ExperimentStatusResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.Chaos.ExperimentStatusResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Chaos.ExperimentStatusResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.Chaos.ExperimentStatusResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Chaos.ExperimentStatusResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTargetResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Chaos.TargetResource GetTargetResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Chaos.TargetResource GetTargetResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Chaos.Mocking.MockableChaosArmClient.GetTargetResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTargetResource (id As ResourceIdentifier) As TargetResource" />
      <MemberSignature Language="F#" Value="abstract member GetTargetResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Chaos.TargetResource&#xA;override this.GetTargetResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Chaos.TargetResource" Usage="mockableChaosArmClient.GetTargetResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Chaos</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Chaos.TargetResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Chaos.TargetResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Chaos.TargetResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Chaos.TargetResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Chaos.TargetResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTargetTypeResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Chaos.TargetTypeResource GetTargetTypeResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Chaos.TargetTypeResource GetTargetTypeResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Chaos.Mocking.MockableChaosArmClient.GetTargetTypeResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTargetTypeResource (id As ResourceIdentifier) As TargetTypeResource" />
      <MemberSignature Language="F#" Value="abstract member GetTargetTypeResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Chaos.TargetTypeResource&#xA;override this.GetTargetTypeResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Chaos.TargetTypeResource" Usage="mockableChaosArmClient.GetTargetTypeResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Chaos</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Chaos.TargetTypeResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Chaos.TargetTypeResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Chaos.TargetTypeResource.CreateResourceIdentifier(System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Chaos.TargetTypeResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Chaos.TargetTypeResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
