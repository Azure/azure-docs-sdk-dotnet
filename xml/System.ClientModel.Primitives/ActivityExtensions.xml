<Type Name="ActivityExtensions" FullName="System.ClientModel.Primitives.ActivityExtensions">
  <TypeSignature Language="C#" Value="public static class ActivityExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ActivityExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ClientModel.Primitives.ActivityExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module ActivityExtensions" />
  <TypeSignature Language="F#" Value="type ActivityExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>System.ClientModel</AssemblyName>
    <AssemblyVersion>1.4.0.0</AssemblyVersion>
    <AssemblyVersion>1.4.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Extensions for <see cref="T:System.Diagnostics.Activity" /> and <see cref="T:System.Diagnostics.ActivitySource" /> that provide
            common Open Telemetry tracing functionality for clients built on System.ClientModel.
            </summary>
    <remarks>These APIs should only be used by client library authors and should not
            be used by consuming applications. Applications should use the System.Diagnostics package
            to implement distributed tracing.</remarks>
  </Docs>
  <Members>
    <Member MemberName="MarkClientActivityFailed">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Activity MarkClientActivityFailed (this System.Diagnostics.Activity activity, Exception? exception);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Activity MarkClientActivityFailed(class System.Diagnostics.Activity activity, class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ClientModel.Primitives.ActivityExtensions.MarkClientActivityFailed(System.Diagnostics.Activity,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MarkClientActivityFailed (activity As Activity, exception As Exception) As Activity" />
      <MemberSignature Language="F#" Value="static member MarkClientActivityFailed : System.Diagnostics.Activity * Exception -&gt; System.Diagnostics.Activity" Usage="System.ClientModel.Primitives.ActivityExtensions.MarkClientActivityFailed (activity, exception)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ClientModel</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Diagnostics.Activity" Index="0" FrameworkAlternate="azure-dotnet" RefType="this" />
        <Parameter Name="exception" Type="System.Exception" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="activity">The activity to mark as failed.</param>
        <param name="exception">The <see cref="T:System.Exception" /> encountered during the operation.</param>
        <summary>
            Marks the <paramref name="activity" /> as failed.
            </summary>
        <returns>To be added.</returns>
        <remarks>This method should only be used by client library authors and should not
            be used by consuming applications. Applications should use the System.Diagnostics package
            to implement distributed tracing.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarkFailed">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Activity MarkFailed (this System.Diagnostics.Activity activity, Exception? exception);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Activity MarkFailed(class System.Diagnostics.Activity activity, class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ClientModel.Primitives.ActivityExtensions.MarkFailed(System.Diagnostics.Activity,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MarkFailed (activity As Activity, exception As Exception) As Activity" />
      <MemberSignature Language="F#" Value="static member MarkFailed : System.Diagnostics.Activity * Exception -&gt; System.Diagnostics.Activity" Usage="System.ClientModel.Primitives.ActivityExtensions.MarkFailed (activity, exception)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ClientModel</AssemblyName>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Diagnostics.Activity" RefType="this" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="exception" Type="System.Exception" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="activity">The activity to mark as failed.</param>
        <param name="exception">The <see cref="T:System.Exception" /> encountered during the operation.</param>
        <summary>
            Marks the <paramref name="activity" /> as failed.
            </summary>
        <returns>To be added.</returns>
        <remarks>This method should only be used by client library authors and should not
            be used by consuming applications. Applications should use the System.Diagnostics package
            to implement distributed tracing.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartClientActivity">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Activity? StartClientActivity (this System.Diagnostics.ActivitySource activitySource, System.ClientModel.Primitives.ClientPipelineOptions options, string name, System.Diagnostics.ActivityKind kind = System.Diagnostics.ActivityKind.Internal, System.Diagnostics.ActivityContext parentContext = default, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,object?&gt;&gt;? tags = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Activity StartClientActivity(class System.Diagnostics.ActivitySource activitySource, class System.ClientModel.Primitives.ClientPipelineOptions options, string name, valuetype System.Diagnostics.ActivityKind kind, valuetype System.Diagnostics.ActivityContext parentContext, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt; tags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ClientModel.Primitives.ActivityExtensions.StartClientActivity(System.Diagnostics.ActivitySource,System.ClientModel.Primitives.ClientPipelineOptions,System.String,System.Diagnostics.ActivityKind,System.Diagnostics.ActivityContext,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function StartClientActivity (activitySource As ActivitySource, options As ClientPipelineOptions, name As String, Optional kind As ActivityKind = System.Diagnostics.ActivityKind.Internal, Optional parentContext As ActivityContext = Nothing, Optional tags As IEnumerable(Of KeyValuePair(Of String, Object)) = Nothing) As Activity" />
      <MemberSignature Language="F#" Value="static member StartClientActivity : System.Diagnostics.ActivitySource * System.ClientModel.Primitives.ClientPipelineOptions * string * System.Diagnostics.ActivityKind * System.Diagnostics.ActivityContext * seq&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt; -&gt; System.Diagnostics.Activity" Usage="System.ClientModel.Primitives.ActivityExtensions.StartClientActivity (activitySource, options, name, kind, parentContext, tags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ClientModel</AssemblyName>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activitySource" Type="System.Diagnostics.ActivitySource" RefType="this" />
        <Parameter Name="options" Type="System.ClientModel.Primitives.ClientPipelineOptions" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="kind" Type="System.Diagnostics.ActivityKind" />
        <Parameter Name="parentContext" Type="System.Diagnostics.ActivityContext" />
        <Parameter Name="tags" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="activitySource">The <see cref="T:System.Diagnostics.ActivitySource" /> to use to create the <see cref="T:System.Diagnostics.Activity" />.</param>
        <param name="options">The options used to configure the client pipeline.</param>
        <param name="name">The operation name of the activity.</param>
        <param name="kind">The activity kind.</param>
        <param name="parentContext">The parent <see cref="T:System.Diagnostics.ActivityContext" /> object to initialize the created Activity object with.</param>
        <param name="tags">The optional tags list to initialize the created Activity object with.</param>
        <summary>
            Creates and starts a new <see cref="T:System.Diagnostics.Activity" /> if there are active listeners and if distributed
            tracing is enabled. Creates the Activity using the specified name, kind, parent activity context, and tags.
            </summary>
        <returns>To be added.</returns>
        <remarks>This extension method is intended to be used by client library authors only. Applications
            should use one of the overloads of <see cref="M:System.Diagnostics.ActivitySource.StartActivity(System.String,System.Diagnostics.ActivityKind)" />
            to create and start <see cref="T:System.Diagnostics.Activity" /> instances.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
