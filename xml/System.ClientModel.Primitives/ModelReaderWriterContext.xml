<Type Name="ModelReaderWriterContext" FullName="System.ClientModel.Primitives.ModelReaderWriterContext">
  <TypeSignature Language="C#" Value="public abstract class ModelReaderWriterContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ModelReaderWriterContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ClientModel.Primitives.ModelReaderWriterContext" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ModelReaderWriterContext" />
  <TypeSignature Language="F#" Value="type ModelReaderWriterContext = class" />
  <AssemblyInfo>
    <AssemblyName>System.ClientModel</AssemblyName>
    <AssemblyVersion>1.4.0.0</AssemblyVersion>
    <AssemblyVersion>1.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Context for <see cref="T:System.ClientModel.Primitives.ModelReaderWriter" /> to work with AOT.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ModelReaderWriterContext ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ClientModel.Primitives.ModelReaderWriterContext.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ClientModel</AssemblyName>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeBuilder">
      <MemberSignature Language="C#" Value="public System.ClientModel.Primitives.ModelReaderWriterTypeBuilder GetTypeBuilder (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ClientModel.Primitives.ModelReaderWriterTypeBuilder GetTypeBuilder(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ClientModel.Primitives.ModelReaderWriterContext.GetTypeBuilder(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeBuilder (type As Type) As ModelReaderWriterTypeBuilder" />
      <MemberSignature Language="F#" Value="member this.GetTypeBuilder : Type -&gt; System.ClientModel.Primitives.ModelReaderWriterTypeBuilder" Usage="modelReaderWriterContext.GetTypeBuilder type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ClientModel</AssemblyName>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ClientModel.Primitives.ModelReaderWriterTypeBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The type to get info for.</param>
        <summary>
            Gets a <see cref="T:System.ClientModel.Primitives.ModelReaderWriterTypeBuilder" /> for the given <see cref="T:System.Type" /> to allow <see cref="T:System.ClientModel.Primitives.ModelReaderWriter" /> to work with AOT.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">When the context does not contain a <see cref="T:System.ClientModel.Primitives.ModelReaderWriterTypeBuilder" /> for the given <see cref="T:System.Type" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetTypeBuilder">
      <MemberSignature Language="C#" Value="public bool TryGetTypeBuilder (Type type, out System.ClientModel.Primitives.ModelReaderWriterTypeBuilder? builder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetTypeBuilder(class System.Type type, [out] class System.ClientModel.Primitives.ModelReaderWriterTypeBuilder&amp; builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ClientModel.Primitives.ModelReaderWriterContext.TryGetTypeBuilder(System.Type,System.ClientModel.Primitives.ModelReaderWriterTypeBuilder@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetTypeBuilder (type As Type, ByRef builder As ModelReaderWriterTypeBuilder) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryGetTypeBuilder : Type * ModelReaderWriterTypeBuilder -&gt; bool" Usage="modelReaderWriterContext.TryGetTypeBuilder (type, builder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ClientModel</AssemblyName>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="builder" Type="System.ClientModel.Primitives.ModelReaderWriterTypeBuilder" RefType="out" />
      </Parameters>
      <Docs>
        <param name="type">The type to get info for.</param>
        <param name="builder">The <see cref="T:System.ClientModel.Primitives.ModelReaderWriterTypeBuilder" /> if found.</param>
        <summary>
            Tries to gets a <see cref="T:System.ClientModel.Primitives.ModelReaderWriterTypeBuilder" /> for the given <see cref="T:System.Type" /> to allow <see cref="T:System.ClientModel.Primitives.ModelReaderWriter" /> to work with AOT.
            </summary>
        <returns>True if the corresponding <see cref="T:System.ClientModel.Primitives.ModelReaderWriterTypeBuilder" /> if defined in the context otherwise false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetTypeBuilderCore">
      <MemberSignature Language="C#" Value="protected virtual bool TryGetTypeBuilderCore (Type type, out System.ClientModel.Primitives.ModelReaderWriterTypeBuilder? builder);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TryGetTypeBuilderCore(class System.Type type, [out] class System.ClientModel.Primitives.ModelReaderWriterTypeBuilder&amp; builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ClientModel.Primitives.ModelReaderWriterContext.TryGetTypeBuilderCore(System.Type,System.ClientModel.Primitives.ModelReaderWriterTypeBuilder@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TryGetTypeBuilderCore (type As Type, ByRef builder As ModelReaderWriterTypeBuilder) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryGetTypeBuilderCore : Type * ModelReaderWriterTypeBuilder -&gt; bool&#xA;override this.TryGetTypeBuilderCore : Type * ModelReaderWriterTypeBuilder -&gt; bool" Usage="modelReaderWriterContext.TryGetTypeBuilderCore (type, builder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ClientModel</AssemblyName>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="builder" Type="System.ClientModel.Primitives.ModelReaderWriterTypeBuilder" RefType="out" />
      </Parameters>
      <Docs>
        <param name="type">The type to get info for.</param>
        <param name="builder">The <see cref="T:System.ClientModel.Primitives.ModelReaderWriterTypeBuilder" /> if found.</param>
        <summary>
            Tries to gets a <see cref="T:System.ClientModel.Primitives.ModelReaderWriterTypeBuilder" /> for the given <see cref="T:System.Type" /> to allow <see cref="T:System.ClientModel.Primitives.ModelReaderWriter" /> to work with AOT.
            </summary>
        <returns>True if the corresponding <see cref="T:System.ClientModel.Primitives.ModelReaderWriterTypeBuilder" /> if defined in the context otherwise false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
