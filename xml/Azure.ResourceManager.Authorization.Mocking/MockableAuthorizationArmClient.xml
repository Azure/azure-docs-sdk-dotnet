<Type Name="MockableAuthorizationArmClient" FullName="Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient">
  <TypeSignature Language="C#" Value="public class MockableAuthorizationArmClient : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MockableAuthorizationArmClient extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient" />
  <TypeSignature Language="VB.NET" Value="Public Class MockableAuthorizationArmClient&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type MockableAuthorizationArmClient = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.1.0</AssemblyVersion>
    <AssemblyVersion>1.1.2.0</AssemblyVersion>
    <AssemblyVersion>1.1.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> A class to add extension methods to ArmClient. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MockableAuthorizationArmClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAuthorizationProviderOperationsMetadataResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Authorization.AuthorizationProviderOperationsMetadataResource GetAuthorizationProviderOperationsMetadataResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Authorization.AuthorizationProviderOperationsMetadataResource GetAuthorizationProviderOperationsMetadataResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetAuthorizationProviderOperationsMetadataResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAuthorizationProviderOperationsMetadataResource (id As ResourceIdentifier) As AuthorizationProviderOperationsMetadataResource" />
      <MemberSignature Language="F#" Value="abstract member GetAuthorizationProviderOperationsMetadataResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.AuthorizationProviderOperationsMetadataResource&#xA;override this.GetAuthorizationProviderOperationsMetadataResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.AuthorizationProviderOperationsMetadataResource" Usage="mockableAuthorizationArmClient.GetAuthorizationProviderOperationsMetadataResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Authorization.AuthorizationProviderOperationsMetadataResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.Authorization.AuthorizationProviderOperationsMetadataResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Authorization.AuthorizationProviderOperationsMetadataResource.CreateResourceIdentifier(System.String)" /> to create an <see cref="T:Azure.ResourceManager.Authorization.AuthorizationProviderOperationsMetadataResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Authorization.AuthorizationProviderOperationsMetadataResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAuthorizationRoleDefinition">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionResource&gt; GetAuthorizationRoleDefinition (Azure.Core.ResourceIdentifier scope, Azure.Core.ResourceIdentifier roleDefinitionId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionResource&gt; GetAuthorizationRoleDefinition(class Azure.Core.ResourceIdentifier scope, class Azure.Core.ResourceIdentifier roleDefinitionId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetAuthorizationRoleDefinition(Azure.Core.ResourceIdentifier,Azure.Core.ResourceIdentifier,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAuthorizationRoleDefinition (scope As ResourceIdentifier, roleDefinitionId As ResourceIdentifier, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AuthorizationRoleDefinitionResource)" />
      <MemberSignature Language="F#" Value="abstract member GetAuthorizationRoleDefinition : Azure.Core.ResourceIdentifier * Azure.Core.ResourceIdentifier * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionResource&gt;&#xA;override this.GetAuthorizationRoleDefinition : Azure.Core.ResourceIdentifier * Azure.Core.ResourceIdentifier * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionResource&gt;" Usage="mockableAuthorizationArmClient.GetAuthorizationRoleDefinition (scope, roleDefinitionId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="roleDefinitionId" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="roleDefinitionId"> The ID of the role definition. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get role definition by name (GUID).
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId}</description></item><item><term>Operation Id</term><description>RoleDefinitions_Get</description></item><item><term>Default Api Version</term><description>2022-04-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleDefinitionId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAuthorizationRoleDefinitionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionResource&gt;&gt; GetAuthorizationRoleDefinitionAsync (Azure.Core.ResourceIdentifier scope, Azure.Core.ResourceIdentifier roleDefinitionId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionResource&gt;&gt; GetAuthorizationRoleDefinitionAsync(class Azure.Core.ResourceIdentifier scope, class Azure.Core.ResourceIdentifier roleDefinitionId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetAuthorizationRoleDefinitionAsync(Azure.Core.ResourceIdentifier,Azure.Core.ResourceIdentifier,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAuthorizationRoleDefinitionAsync (scope As ResourceIdentifier, roleDefinitionId As ResourceIdentifier, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AuthorizationRoleDefinitionResource))" />
      <MemberSignature Language="F#" Value="abstract member GetAuthorizationRoleDefinitionAsync : Azure.Core.ResourceIdentifier * Azure.Core.ResourceIdentifier * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionResource&gt;&gt;&#xA;override this.GetAuthorizationRoleDefinitionAsync : Azure.Core.ResourceIdentifier * Azure.Core.ResourceIdentifier * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionResource&gt;&gt;" Usage="mockableAuthorizationArmClient.GetAuthorizationRoleDefinitionAsync (scope, roleDefinitionId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="roleDefinitionId" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="roleDefinitionId"> The ID of the role definition. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get role definition by name (GUID).
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId}</description></item><item><term>Operation Id</term><description>RoleDefinitions_Get</description></item><item><term>Default Api Version</term><description>2022-04-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleDefinitionId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAuthorizationRoleDefinitionResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionResource GetAuthorizationRoleDefinitionResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionResource GetAuthorizationRoleDefinitionResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetAuthorizationRoleDefinitionResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAuthorizationRoleDefinitionResource (id As ResourceIdentifier) As AuthorizationRoleDefinitionResource" />
      <MemberSignature Language="F#" Value="abstract member GetAuthorizationRoleDefinitionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionResource&#xA;override this.GetAuthorizationRoleDefinitionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionResource" Usage="mockableAuthorizationArmClient.GetAuthorizationRoleDefinitionResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionResource.CreateResourceIdentifier(System.String,Azure.Core.ResourceIdentifier)" /> to create an <see cref="T:Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAuthorizationRoleDefinitions">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionCollection GetAuthorizationRoleDefinitions (Azure.Core.ResourceIdentifier scope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionCollection GetAuthorizationRoleDefinitions(class Azure.Core.ResourceIdentifier scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetAuthorizationRoleDefinitions(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAuthorizationRoleDefinitions (scope As ResourceIdentifier) As AuthorizationRoleDefinitionCollection" />
      <MemberSignature Language="F#" Value="abstract member GetAuthorizationRoleDefinitions : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionCollection&#xA;override this.GetAuthorizationRoleDefinitions : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionCollection" Usage="mockableAuthorizationArmClient.GetAuthorizationRoleDefinitions scope" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <summary> Gets a collection of AuthorizationRoleDefinitionResources in the ArmClient. </summary>
        <returns> An object representing collection of AuthorizationRoleDefinitionResources and their operations over a AuthorizationRoleDefinitionResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDenyAssignment">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt; GetDenyAssignment (Azure.Core.ResourceIdentifier scope, string denyAssignmentId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.DenyAssignmentResource&gt; GetDenyAssignment(class Azure.Core.ResourceIdentifier scope, string denyAssignmentId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetDenyAssignment(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDenyAssignment (scope As ResourceIdentifier, denyAssignmentId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DenyAssignmentResource)" />
      <MemberSignature Language="F#" Value="abstract member GetDenyAssignment : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;&#xA;override this.GetDenyAssignment : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;" Usage="mockableAuthorizationArmClient.GetDenyAssignment (scope, denyAssignmentId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="denyAssignmentId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="denyAssignmentId"> The ID of the deny assignment to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the specified deny assignment.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId}</description></item><item><term>Operation Id</term><description>DenyAssignments_Get</description></item><item><term>Default Api Version</term><description>2022-04-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Authorization.DenyAssignmentResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="denyAssignmentId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="denyAssignmentId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDenyAssignmentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;&gt; GetDenyAssignmentAsync (Azure.Core.ResourceIdentifier scope, string denyAssignmentId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;&gt; GetDenyAssignmentAsync(class Azure.Core.ResourceIdentifier scope, string denyAssignmentId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetDenyAssignmentAsync(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDenyAssignmentAsync (scope As ResourceIdentifier, denyAssignmentId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DenyAssignmentResource))" />
      <MemberSignature Language="F#" Value="abstract member GetDenyAssignmentAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;&gt;&#xA;override this.GetDenyAssignmentAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;&gt;" Usage="mockableAuthorizationArmClient.GetDenyAssignmentAsync (scope, denyAssignmentId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="denyAssignmentId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="denyAssignmentId"> The ID of the deny assignment to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the specified deny assignment.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId}</description></item><item><term>Operation Id</term><description>DenyAssignments_Get</description></item><item><term>Default Api Version</term><description>2022-04-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Authorization.DenyAssignmentResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="denyAssignmentId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="denyAssignmentId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDenyAssignmentResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Authorization.DenyAssignmentResource GetDenyAssignmentResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Authorization.DenyAssignmentResource GetDenyAssignmentResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetDenyAssignmentResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDenyAssignmentResource (id As ResourceIdentifier) As DenyAssignmentResource" />
      <MemberSignature Language="F#" Value="abstract member GetDenyAssignmentResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.DenyAssignmentResource&#xA;override this.GetDenyAssignmentResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.DenyAssignmentResource" Usage="mockableAuthorizationArmClient.GetDenyAssignmentResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Authorization.DenyAssignmentResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Authorization.DenyAssignmentResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Authorization.DenyAssignmentResource.CreateResourceIdentifier(System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Authorization.DenyAssignmentResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Authorization.DenyAssignmentResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDenyAssignments">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Authorization.DenyAssignmentCollection GetDenyAssignments (Azure.Core.ResourceIdentifier scope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Authorization.DenyAssignmentCollection GetDenyAssignments(class Azure.Core.ResourceIdentifier scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetDenyAssignments(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDenyAssignments (scope As ResourceIdentifier) As DenyAssignmentCollection" />
      <MemberSignature Language="F#" Value="abstract member GetDenyAssignments : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.DenyAssignmentCollection&#xA;override this.GetDenyAssignments : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.DenyAssignmentCollection" Usage="mockableAuthorizationArmClient.GetDenyAssignments scope" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Authorization.DenyAssignmentCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <summary> Gets a collection of DenyAssignmentResources in the ArmClient. </summary>
        <returns> An object representing collection of DenyAssignmentResources and their operations over a DenyAssignmentResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEligibleChildResources">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Authorization.Models.EligibleChildResource&gt; GetEligibleChildResources (Azure.Core.ResourceIdentifier scope, string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Authorization.Models.EligibleChildResource&gt; GetEligibleChildResources(class Azure.Core.ResourceIdentifier scope, string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetEligibleChildResources(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEligibleChildResources (scope As ResourceIdentifier, Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of EligibleChildResource)" />
      <MemberSignature Language="F#" Value="abstract member GetEligibleChildResources : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Authorization.Models.EligibleChildResource&gt;&#xA;override this.GetEligibleChildResources : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Authorization.Models.EligibleChildResource&gt;" Usage="mockableAuthorizationArmClient.GetEligibleChildResources (scope, filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Authorization.Models.EligibleChildResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="filter"> The filter to apply on the operation. Use $filter=resourceType+eq+'Subscription' to filter on only resource of type = 'Subscription'. Use $filter=resourceType+eq+'subscription'+or+resourceType+eq+'resourcegroup' to filter on resource of type = 'Subscription' or 'ResourceGroup'. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the child resources of a resource on which user has eligible access
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/eligibleChildResources</description></item><item><term>Operation Id</term><description>EligibleChildResources_Get</description></item><item><term>Default Api Version</term><description>2020-10-01</description></item></list></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Authorization.Models.EligibleChildResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="scope" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEligibleChildResourcesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Authorization.Models.EligibleChildResource&gt; GetEligibleChildResourcesAsync (Azure.Core.ResourceIdentifier scope, string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Authorization.Models.EligibleChildResource&gt; GetEligibleChildResourcesAsync(class Azure.Core.ResourceIdentifier scope, string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetEligibleChildResourcesAsync(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEligibleChildResourcesAsync (scope As ResourceIdentifier, Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of EligibleChildResource)" />
      <MemberSignature Language="F#" Value="abstract member GetEligibleChildResourcesAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Authorization.Models.EligibleChildResource&gt;&#xA;override this.GetEligibleChildResourcesAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Authorization.Models.EligibleChildResource&gt;" Usage="mockableAuthorizationArmClient.GetEligibleChildResourcesAsync (scope, filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Authorization.Models.EligibleChildResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="filter"> The filter to apply on the operation. Use $filter=resourceType+eq+'Subscription' to filter on only resource of type = 'Subscription'. Use $filter=resourceType+eq+'subscription'+or+resourceType+eq+'resourcegroup' to filter on resource of type = 'Subscription' or 'ResourceGroup'. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the child resources of a resource on which user has eligible access
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/eligibleChildResources</description></item><item><term>Operation Id</term><description>EligibleChildResources_Get</description></item><item><term>Default Api Version</term><description>2020-10-01</description></item></list></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Authorization.Models.EligibleChildResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="scope" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRoleAssignment">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentResource&gt; GetRoleAssignment (Azure.Core.ResourceIdentifier scope, string roleAssignmentName, string tenantId = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.RoleAssignmentResource&gt; GetRoleAssignment(class Azure.Core.ResourceIdentifier scope, string roleAssignmentName, string tenantId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetRoleAssignment(Azure.Core.ResourceIdentifier,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleAssignment (scope As ResourceIdentifier, roleAssignmentName As String, Optional tenantId As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RoleAssignmentResource)" />
      <MemberSignature Language="F#" Value="abstract member GetRoleAssignment : Azure.Core.ResourceIdentifier * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentResource&gt;&#xA;override this.GetRoleAssignment : Azure.Core.ResourceIdentifier * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentResource&gt;" Usage="mockableAuthorizationArmClient.GetRoleAssignment (scope, roleAssignmentName, tenantId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="roleAssignmentName" Type="System.String" />
        <Parameter Name="tenantId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="roleAssignmentName"> The name of the role assignment. It can be any valid GUID. </param>
        <param name="tenantId"> Tenant ID for cross-tenant request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get a role assignment by scope and name.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}</description></item><item><term>Operation Id</term><description>RoleAssignments_Get</description></item><item><term>Default Api Version</term><description>2022-04-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Authorization.RoleAssignmentResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleAssignmentName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRoleAssignmentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentResource&gt;&gt; GetRoleAssignmentAsync (Azure.Core.ResourceIdentifier scope, string roleAssignmentName, string tenantId = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.RoleAssignmentResource&gt;&gt; GetRoleAssignmentAsync(class Azure.Core.ResourceIdentifier scope, string roleAssignmentName, string tenantId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetRoleAssignmentAsync(Azure.Core.ResourceIdentifier,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleAssignmentAsync (scope As ResourceIdentifier, roleAssignmentName As String, Optional tenantId As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RoleAssignmentResource))" />
      <MemberSignature Language="F#" Value="abstract member GetRoleAssignmentAsync : Azure.Core.ResourceIdentifier * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentResource&gt;&gt;&#xA;override this.GetRoleAssignmentAsync : Azure.Core.ResourceIdentifier * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentResource&gt;&gt;" Usage="mockableAuthorizationArmClient.GetRoleAssignmentAsync (scope, roleAssignmentName, tenantId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="roleAssignmentName" Type="System.String" />
        <Parameter Name="tenantId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="roleAssignmentName"> The name of the role assignment. It can be any valid GUID. </param>
        <param name="tenantId"> Tenant ID for cross-tenant request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get a role assignment by scope and name.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}</description></item><item><term>Operation Id</term><description>RoleAssignments_Get</description></item><item><term>Default Api Version</term><description>2022-04-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Authorization.RoleAssignmentResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleAssignmentName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRoleAssignmentResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Authorization.RoleAssignmentResource GetRoleAssignmentResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Authorization.RoleAssignmentResource GetRoleAssignmentResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetRoleAssignmentResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleAssignmentResource (id As ResourceIdentifier) As RoleAssignmentResource" />
      <MemberSignature Language="F#" Value="abstract member GetRoleAssignmentResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.RoleAssignmentResource&#xA;override this.GetRoleAssignmentResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.RoleAssignmentResource" Usage="mockableAuthorizationArmClient.GetRoleAssignmentResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Authorization.RoleAssignmentResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Authorization.RoleAssignmentResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Authorization.RoleAssignmentResource.CreateResourceIdentifier(System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Authorization.RoleAssignmentResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Authorization.RoleAssignmentResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoleAssignments">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Authorization.RoleAssignmentCollection GetRoleAssignments (Azure.Core.ResourceIdentifier scope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Authorization.RoleAssignmentCollection GetRoleAssignments(class Azure.Core.ResourceIdentifier scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetRoleAssignments(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleAssignments (scope As ResourceIdentifier) As RoleAssignmentCollection" />
      <MemberSignature Language="F#" Value="abstract member GetRoleAssignments : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.RoleAssignmentCollection&#xA;override this.GetRoleAssignments : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.RoleAssignmentCollection" Usage="mockableAuthorizationArmClient.GetRoleAssignments scope" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Authorization.RoleAssignmentCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <summary> Gets a collection of RoleAssignmentResources in the ArmClient. </summary>
        <returns> An object representing collection of RoleAssignmentResources and their operations over a RoleAssignmentResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoleAssignmentSchedule">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleResource&gt; GetRoleAssignmentSchedule (Azure.Core.ResourceIdentifier scope, string roleAssignmentScheduleName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.RoleAssignmentScheduleResource&gt; GetRoleAssignmentSchedule(class Azure.Core.ResourceIdentifier scope, string roleAssignmentScheduleName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetRoleAssignmentSchedule(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleAssignmentSchedule (scope As ResourceIdentifier, roleAssignmentScheduleName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RoleAssignmentScheduleResource)" />
      <MemberSignature Language="F#" Value="abstract member GetRoleAssignmentSchedule : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleResource&gt;&#xA;override this.GetRoleAssignmentSchedule : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleResource&gt;" Usage="mockableAuthorizationArmClient.GetRoleAssignmentSchedule (scope, roleAssignmentScheduleName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="roleAssignmentScheduleName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="roleAssignmentScheduleName"> The name (guid) of the role assignment schedule to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the specified role assignment schedule for a resource scope
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleAssignmentSchedules/{roleAssignmentScheduleName}</description></item><item><term>Operation Id</term><description>RoleAssignmentSchedules_Get</description></item><item><term>Default Api Version</term><description>2020-10-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Authorization.RoleAssignmentScheduleResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleAssignmentScheduleName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleAssignmentScheduleName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRoleAssignmentScheduleAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleResource&gt;&gt; GetRoleAssignmentScheduleAsync (Azure.Core.ResourceIdentifier scope, string roleAssignmentScheduleName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.RoleAssignmentScheduleResource&gt;&gt; GetRoleAssignmentScheduleAsync(class Azure.Core.ResourceIdentifier scope, string roleAssignmentScheduleName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetRoleAssignmentScheduleAsync(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleAssignmentScheduleAsync (scope As ResourceIdentifier, roleAssignmentScheduleName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RoleAssignmentScheduleResource))" />
      <MemberSignature Language="F#" Value="abstract member GetRoleAssignmentScheduleAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleResource&gt;&gt;&#xA;override this.GetRoleAssignmentScheduleAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleResource&gt;&gt;" Usage="mockableAuthorizationArmClient.GetRoleAssignmentScheduleAsync (scope, roleAssignmentScheduleName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="roleAssignmentScheduleName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="roleAssignmentScheduleName"> The name (guid) of the role assignment schedule to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the specified role assignment schedule for a resource scope
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleAssignmentSchedules/{roleAssignmentScheduleName}</description></item><item><term>Operation Id</term><description>RoleAssignmentSchedules_Get</description></item><item><term>Default Api Version</term><description>2020-10-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Authorization.RoleAssignmentScheduleResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleAssignmentScheduleName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleAssignmentScheduleName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRoleAssignmentScheduleInstance">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceResource&gt; GetRoleAssignmentScheduleInstance (Azure.Core.ResourceIdentifier scope, string roleAssignmentScheduleInstanceName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceResource&gt; GetRoleAssignmentScheduleInstance(class Azure.Core.ResourceIdentifier scope, string roleAssignmentScheduleInstanceName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetRoleAssignmentScheduleInstance(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleAssignmentScheduleInstance (scope As ResourceIdentifier, roleAssignmentScheduleInstanceName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RoleAssignmentScheduleInstanceResource)" />
      <MemberSignature Language="F#" Value="abstract member GetRoleAssignmentScheduleInstance : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceResource&gt;&#xA;override this.GetRoleAssignmentScheduleInstance : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceResource&gt;" Usage="mockableAuthorizationArmClient.GetRoleAssignmentScheduleInstance (scope, roleAssignmentScheduleInstanceName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="roleAssignmentScheduleInstanceName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="roleAssignmentScheduleInstanceName"> The name (hash of schedule name + time) of the role assignment schedule to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the specified role assignment schedule instance.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleAssignmentScheduleInstances/{roleAssignmentScheduleInstanceName}</description></item><item><term>Operation Id</term><description>RoleAssignmentScheduleInstances_Get</description></item><item><term>Default Api Version</term><description>2020-10-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleAssignmentScheduleInstanceName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleAssignmentScheduleInstanceName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRoleAssignmentScheduleInstanceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceResource&gt;&gt; GetRoleAssignmentScheduleInstanceAsync (Azure.Core.ResourceIdentifier scope, string roleAssignmentScheduleInstanceName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceResource&gt;&gt; GetRoleAssignmentScheduleInstanceAsync(class Azure.Core.ResourceIdentifier scope, string roleAssignmentScheduleInstanceName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetRoleAssignmentScheduleInstanceAsync(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleAssignmentScheduleInstanceAsync (scope As ResourceIdentifier, roleAssignmentScheduleInstanceName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RoleAssignmentScheduleInstanceResource))" />
      <MemberSignature Language="F#" Value="abstract member GetRoleAssignmentScheduleInstanceAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceResource&gt;&gt;&#xA;override this.GetRoleAssignmentScheduleInstanceAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceResource&gt;&gt;" Usage="mockableAuthorizationArmClient.GetRoleAssignmentScheduleInstanceAsync (scope, roleAssignmentScheduleInstanceName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="roleAssignmentScheduleInstanceName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="roleAssignmentScheduleInstanceName"> The name (hash of schedule name + time) of the role assignment schedule to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the specified role assignment schedule instance.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleAssignmentScheduleInstances/{roleAssignmentScheduleInstanceName}</description></item><item><term>Operation Id</term><description>RoleAssignmentScheduleInstances_Get</description></item><item><term>Default Api Version</term><description>2020-10-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleAssignmentScheduleInstanceName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleAssignmentScheduleInstanceName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRoleAssignmentScheduleInstanceResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceResource GetRoleAssignmentScheduleInstanceResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceResource GetRoleAssignmentScheduleInstanceResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetRoleAssignmentScheduleInstanceResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleAssignmentScheduleInstanceResource (id As ResourceIdentifier) As RoleAssignmentScheduleInstanceResource" />
      <MemberSignature Language="F#" Value="abstract member GetRoleAssignmentScheduleInstanceResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceResource&#xA;override this.GetRoleAssignmentScheduleInstanceResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceResource" Usage="mockableAuthorizationArmClient.GetRoleAssignmentScheduleInstanceResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceResource.CreateResourceIdentifier(System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoleAssignmentScheduleInstances">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceCollection GetRoleAssignmentScheduleInstances (Azure.Core.ResourceIdentifier scope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceCollection GetRoleAssignmentScheduleInstances(class Azure.Core.ResourceIdentifier scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetRoleAssignmentScheduleInstances(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleAssignmentScheduleInstances (scope As ResourceIdentifier) As RoleAssignmentScheduleInstanceCollection" />
      <MemberSignature Language="F#" Value="abstract member GetRoleAssignmentScheduleInstances : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceCollection&#xA;override this.GetRoleAssignmentScheduleInstances : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceCollection" Usage="mockableAuthorizationArmClient.GetRoleAssignmentScheduleInstances scope" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <summary> Gets a collection of RoleAssignmentScheduleInstanceResources in the ArmClient. </summary>
        <returns> An object representing collection of RoleAssignmentScheduleInstanceResources and their operations over a RoleAssignmentScheduleInstanceResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoleAssignmentScheduleRequest">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestResource&gt; GetRoleAssignmentScheduleRequest (Azure.Core.ResourceIdentifier scope, string roleAssignmentScheduleRequestName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestResource&gt; GetRoleAssignmentScheduleRequest(class Azure.Core.ResourceIdentifier scope, string roleAssignmentScheduleRequestName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetRoleAssignmentScheduleRequest(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleAssignmentScheduleRequest (scope As ResourceIdentifier, roleAssignmentScheduleRequestName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RoleAssignmentScheduleRequestResource)" />
      <MemberSignature Language="F#" Value="abstract member GetRoleAssignmentScheduleRequest : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestResource&gt;&#xA;override this.GetRoleAssignmentScheduleRequest : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestResource&gt;" Usage="mockableAuthorizationArmClient.GetRoleAssignmentScheduleRequest (scope, roleAssignmentScheduleRequestName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="roleAssignmentScheduleRequestName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="roleAssignmentScheduleRequestName"> The name (guid) of the role assignment schedule request to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the specified role assignment schedule request.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleAssignmentScheduleRequests/{roleAssignmentScheduleRequestName}</description></item><item><term>Operation Id</term><description>RoleAssignmentScheduleRequests_Get</description></item><item><term>Default Api Version</term><description>2020-10-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleAssignmentScheduleRequestName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleAssignmentScheduleRequestName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRoleAssignmentScheduleRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestResource&gt;&gt; GetRoleAssignmentScheduleRequestAsync (Azure.Core.ResourceIdentifier scope, string roleAssignmentScheduleRequestName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestResource&gt;&gt; GetRoleAssignmentScheduleRequestAsync(class Azure.Core.ResourceIdentifier scope, string roleAssignmentScheduleRequestName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetRoleAssignmentScheduleRequestAsync(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleAssignmentScheduleRequestAsync (scope As ResourceIdentifier, roleAssignmentScheduleRequestName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RoleAssignmentScheduleRequestResource))" />
      <MemberSignature Language="F#" Value="abstract member GetRoleAssignmentScheduleRequestAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestResource&gt;&gt;&#xA;override this.GetRoleAssignmentScheduleRequestAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestResource&gt;&gt;" Usage="mockableAuthorizationArmClient.GetRoleAssignmentScheduleRequestAsync (scope, roleAssignmentScheduleRequestName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="roleAssignmentScheduleRequestName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="roleAssignmentScheduleRequestName"> The name (guid) of the role assignment schedule request to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the specified role assignment schedule request.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleAssignmentScheduleRequests/{roleAssignmentScheduleRequestName}</description></item><item><term>Operation Id</term><description>RoleAssignmentScheduleRequests_Get</description></item><item><term>Default Api Version</term><description>2020-10-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleAssignmentScheduleRequestName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleAssignmentScheduleRequestName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRoleAssignmentScheduleRequestResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestResource GetRoleAssignmentScheduleRequestResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestResource GetRoleAssignmentScheduleRequestResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetRoleAssignmentScheduleRequestResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleAssignmentScheduleRequestResource (id As ResourceIdentifier) As RoleAssignmentScheduleRequestResource" />
      <MemberSignature Language="F#" Value="abstract member GetRoleAssignmentScheduleRequestResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestResource&#xA;override this.GetRoleAssignmentScheduleRequestResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestResource" Usage="mockableAuthorizationArmClient.GetRoleAssignmentScheduleRequestResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestResource.CreateResourceIdentifier(System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoleAssignmentScheduleRequests">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestCollection GetRoleAssignmentScheduleRequests (Azure.Core.ResourceIdentifier scope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestCollection GetRoleAssignmentScheduleRequests(class Azure.Core.ResourceIdentifier scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetRoleAssignmentScheduleRequests(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleAssignmentScheduleRequests (scope As ResourceIdentifier) As RoleAssignmentScheduleRequestCollection" />
      <MemberSignature Language="F#" Value="abstract member GetRoleAssignmentScheduleRequests : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestCollection&#xA;override this.GetRoleAssignmentScheduleRequests : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestCollection" Usage="mockableAuthorizationArmClient.GetRoleAssignmentScheduleRequests scope" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <summary> Gets a collection of RoleAssignmentScheduleRequestResources in the ArmClient. </summary>
        <returns> An object representing collection of RoleAssignmentScheduleRequestResources and their operations over a RoleAssignmentScheduleRequestResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoleAssignmentScheduleResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Authorization.RoleAssignmentScheduleResource GetRoleAssignmentScheduleResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Authorization.RoleAssignmentScheduleResource GetRoleAssignmentScheduleResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetRoleAssignmentScheduleResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleAssignmentScheduleResource (id As ResourceIdentifier) As RoleAssignmentScheduleResource" />
      <MemberSignature Language="F#" Value="abstract member GetRoleAssignmentScheduleResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.RoleAssignmentScheduleResource&#xA;override this.GetRoleAssignmentScheduleResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.RoleAssignmentScheduleResource" Usage="mockableAuthorizationArmClient.GetRoleAssignmentScheduleResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Authorization.RoleAssignmentScheduleResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Authorization.RoleAssignmentScheduleResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Authorization.RoleAssignmentScheduleResource.CreateResourceIdentifier(System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Authorization.RoleAssignmentScheduleResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Authorization.RoleAssignmentScheduleResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoleAssignmentSchedules">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Authorization.RoleAssignmentScheduleCollection GetRoleAssignmentSchedules (Azure.Core.ResourceIdentifier scope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Authorization.RoleAssignmentScheduleCollection GetRoleAssignmentSchedules(class Azure.Core.ResourceIdentifier scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetRoleAssignmentSchedules(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleAssignmentSchedules (scope As ResourceIdentifier) As RoleAssignmentScheduleCollection" />
      <MemberSignature Language="F#" Value="abstract member GetRoleAssignmentSchedules : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.RoleAssignmentScheduleCollection&#xA;override this.GetRoleAssignmentSchedules : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.RoleAssignmentScheduleCollection" Usage="mockableAuthorizationArmClient.GetRoleAssignmentSchedules scope" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Authorization.RoleAssignmentScheduleCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <summary> Gets a collection of RoleAssignmentScheduleResources in the ArmClient. </summary>
        <returns> An object representing collection of RoleAssignmentScheduleResources and their operations over a RoleAssignmentScheduleResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoleEligibilitySchedule">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleResource&gt; GetRoleEligibilitySchedule (Azure.Core.ResourceIdentifier scope, string roleEligibilityScheduleName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.RoleEligibilityScheduleResource&gt; GetRoleEligibilitySchedule(class Azure.Core.ResourceIdentifier scope, string roleEligibilityScheduleName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetRoleEligibilitySchedule(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleEligibilitySchedule (scope As ResourceIdentifier, roleEligibilityScheduleName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RoleEligibilityScheduleResource)" />
      <MemberSignature Language="F#" Value="abstract member GetRoleEligibilitySchedule : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleResource&gt;&#xA;override this.GetRoleEligibilitySchedule : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleResource&gt;" Usage="mockableAuthorizationArmClient.GetRoleEligibilitySchedule (scope, roleEligibilityScheduleName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="roleEligibilityScheduleName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="roleEligibilityScheduleName"> The name (guid) of the role eligibility schedule to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the specified role eligibility schedule for a resource scope
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleEligibilitySchedules/{roleEligibilityScheduleName}</description></item><item><term>Operation Id</term><description>RoleEligibilitySchedules_Get</description></item><item><term>Default Api Version</term><description>2020-10-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Authorization.RoleEligibilityScheduleResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleEligibilityScheduleName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleEligibilityScheduleName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRoleEligibilityScheduleAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleResource&gt;&gt; GetRoleEligibilityScheduleAsync (Azure.Core.ResourceIdentifier scope, string roleEligibilityScheduleName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.RoleEligibilityScheduleResource&gt;&gt; GetRoleEligibilityScheduleAsync(class Azure.Core.ResourceIdentifier scope, string roleEligibilityScheduleName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetRoleEligibilityScheduleAsync(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleEligibilityScheduleAsync (scope As ResourceIdentifier, roleEligibilityScheduleName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RoleEligibilityScheduleResource))" />
      <MemberSignature Language="F#" Value="abstract member GetRoleEligibilityScheduleAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleResource&gt;&gt;&#xA;override this.GetRoleEligibilityScheduleAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleResource&gt;&gt;" Usage="mockableAuthorizationArmClient.GetRoleEligibilityScheduleAsync (scope, roleEligibilityScheduleName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="roleEligibilityScheduleName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="roleEligibilityScheduleName"> The name (guid) of the role eligibility schedule to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the specified role eligibility schedule for a resource scope
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleEligibilitySchedules/{roleEligibilityScheduleName}</description></item><item><term>Operation Id</term><description>RoleEligibilitySchedules_Get</description></item><item><term>Default Api Version</term><description>2020-10-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Authorization.RoleEligibilityScheduleResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleEligibilityScheduleName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleEligibilityScheduleName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRoleEligibilityScheduleInstance">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceResource&gt; GetRoleEligibilityScheduleInstance (Azure.Core.ResourceIdentifier scope, string roleEligibilityScheduleInstanceName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceResource&gt; GetRoleEligibilityScheduleInstance(class Azure.Core.ResourceIdentifier scope, string roleEligibilityScheduleInstanceName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetRoleEligibilityScheduleInstance(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleEligibilityScheduleInstance (scope As ResourceIdentifier, roleEligibilityScheduleInstanceName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RoleEligibilityScheduleInstanceResource)" />
      <MemberSignature Language="F#" Value="abstract member GetRoleEligibilityScheduleInstance : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceResource&gt;&#xA;override this.GetRoleEligibilityScheduleInstance : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceResource&gt;" Usage="mockableAuthorizationArmClient.GetRoleEligibilityScheduleInstance (scope, roleEligibilityScheduleInstanceName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="roleEligibilityScheduleInstanceName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="roleEligibilityScheduleInstanceName"> The name (hash of schedule name + time) of the role eligibility schedule to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the specified role eligibility schedule instance.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleEligibilityScheduleInstances/{roleEligibilityScheduleInstanceName}</description></item><item><term>Operation Id</term><description>RoleEligibilityScheduleInstances_Get</description></item><item><term>Default Api Version</term><description>2020-10-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleEligibilityScheduleInstanceName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleEligibilityScheduleInstanceName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRoleEligibilityScheduleInstanceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceResource&gt;&gt; GetRoleEligibilityScheduleInstanceAsync (Azure.Core.ResourceIdentifier scope, string roleEligibilityScheduleInstanceName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceResource&gt;&gt; GetRoleEligibilityScheduleInstanceAsync(class Azure.Core.ResourceIdentifier scope, string roleEligibilityScheduleInstanceName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetRoleEligibilityScheduleInstanceAsync(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleEligibilityScheduleInstanceAsync (scope As ResourceIdentifier, roleEligibilityScheduleInstanceName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RoleEligibilityScheduleInstanceResource))" />
      <MemberSignature Language="F#" Value="abstract member GetRoleEligibilityScheduleInstanceAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceResource&gt;&gt;&#xA;override this.GetRoleEligibilityScheduleInstanceAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceResource&gt;&gt;" Usage="mockableAuthorizationArmClient.GetRoleEligibilityScheduleInstanceAsync (scope, roleEligibilityScheduleInstanceName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="roleEligibilityScheduleInstanceName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="roleEligibilityScheduleInstanceName"> The name (hash of schedule name + time) of the role eligibility schedule to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the specified role eligibility schedule instance.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleEligibilityScheduleInstances/{roleEligibilityScheduleInstanceName}</description></item><item><term>Operation Id</term><description>RoleEligibilityScheduleInstances_Get</description></item><item><term>Default Api Version</term><description>2020-10-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleEligibilityScheduleInstanceName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleEligibilityScheduleInstanceName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRoleEligibilityScheduleInstanceResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceResource GetRoleEligibilityScheduleInstanceResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceResource GetRoleEligibilityScheduleInstanceResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetRoleEligibilityScheduleInstanceResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleEligibilityScheduleInstanceResource (id As ResourceIdentifier) As RoleEligibilityScheduleInstanceResource" />
      <MemberSignature Language="F#" Value="abstract member GetRoleEligibilityScheduleInstanceResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceResource&#xA;override this.GetRoleEligibilityScheduleInstanceResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceResource" Usage="mockableAuthorizationArmClient.GetRoleEligibilityScheduleInstanceResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceResource.CreateResourceIdentifier(System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoleEligibilityScheduleInstances">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceCollection GetRoleEligibilityScheduleInstances (Azure.Core.ResourceIdentifier scope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceCollection GetRoleEligibilityScheduleInstances(class Azure.Core.ResourceIdentifier scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetRoleEligibilityScheduleInstances(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleEligibilityScheduleInstances (scope As ResourceIdentifier) As RoleEligibilityScheduleInstanceCollection" />
      <MemberSignature Language="F#" Value="abstract member GetRoleEligibilityScheduleInstances : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceCollection&#xA;override this.GetRoleEligibilityScheduleInstances : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceCollection" Usage="mockableAuthorizationArmClient.GetRoleEligibilityScheduleInstances scope" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <summary> Gets a collection of RoleEligibilityScheduleInstanceResources in the ArmClient. </summary>
        <returns> An object representing collection of RoleEligibilityScheduleInstanceResources and their operations over a RoleEligibilityScheduleInstanceResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoleEligibilityScheduleRequest">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestResource&gt; GetRoleEligibilityScheduleRequest (Azure.Core.ResourceIdentifier scope, string roleEligibilityScheduleRequestName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestResource&gt; GetRoleEligibilityScheduleRequest(class Azure.Core.ResourceIdentifier scope, string roleEligibilityScheduleRequestName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetRoleEligibilityScheduleRequest(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleEligibilityScheduleRequest (scope As ResourceIdentifier, roleEligibilityScheduleRequestName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RoleEligibilityScheduleRequestResource)" />
      <MemberSignature Language="F#" Value="abstract member GetRoleEligibilityScheduleRequest : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestResource&gt;&#xA;override this.GetRoleEligibilityScheduleRequest : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestResource&gt;" Usage="mockableAuthorizationArmClient.GetRoleEligibilityScheduleRequest (scope, roleEligibilityScheduleRequestName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="roleEligibilityScheduleRequestName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="roleEligibilityScheduleRequestName"> The name (guid) of the role eligibility schedule request to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the specified role eligibility schedule request.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleEligibilityScheduleRequests/{roleEligibilityScheduleRequestName}</description></item><item><term>Operation Id</term><description>RoleEligibilityScheduleRequests_Get</description></item><item><term>Default Api Version</term><description>2020-10-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleEligibilityScheduleRequestName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleEligibilityScheduleRequestName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRoleEligibilityScheduleRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestResource&gt;&gt; GetRoleEligibilityScheduleRequestAsync (Azure.Core.ResourceIdentifier scope, string roleEligibilityScheduleRequestName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestResource&gt;&gt; GetRoleEligibilityScheduleRequestAsync(class Azure.Core.ResourceIdentifier scope, string roleEligibilityScheduleRequestName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetRoleEligibilityScheduleRequestAsync(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleEligibilityScheduleRequestAsync (scope As ResourceIdentifier, roleEligibilityScheduleRequestName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RoleEligibilityScheduleRequestResource))" />
      <MemberSignature Language="F#" Value="abstract member GetRoleEligibilityScheduleRequestAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestResource&gt;&gt;&#xA;override this.GetRoleEligibilityScheduleRequestAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestResource&gt;&gt;" Usage="mockableAuthorizationArmClient.GetRoleEligibilityScheduleRequestAsync (scope, roleEligibilityScheduleRequestName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="roleEligibilityScheduleRequestName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="roleEligibilityScheduleRequestName"> The name (guid) of the role eligibility schedule request to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the specified role eligibility schedule request.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleEligibilityScheduleRequests/{roleEligibilityScheduleRequestName}</description></item><item><term>Operation Id</term><description>RoleEligibilityScheduleRequests_Get</description></item><item><term>Default Api Version</term><description>2020-10-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleEligibilityScheduleRequestName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleEligibilityScheduleRequestName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRoleEligibilityScheduleRequestResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestResource GetRoleEligibilityScheduleRequestResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestResource GetRoleEligibilityScheduleRequestResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetRoleEligibilityScheduleRequestResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleEligibilityScheduleRequestResource (id As ResourceIdentifier) As RoleEligibilityScheduleRequestResource" />
      <MemberSignature Language="F#" Value="abstract member GetRoleEligibilityScheduleRequestResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestResource&#xA;override this.GetRoleEligibilityScheduleRequestResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestResource" Usage="mockableAuthorizationArmClient.GetRoleEligibilityScheduleRequestResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestResource.CreateResourceIdentifier(System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoleEligibilityScheduleRequests">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestCollection GetRoleEligibilityScheduleRequests (Azure.Core.ResourceIdentifier scope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestCollection GetRoleEligibilityScheduleRequests(class Azure.Core.ResourceIdentifier scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetRoleEligibilityScheduleRequests(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleEligibilityScheduleRequests (scope As ResourceIdentifier) As RoleEligibilityScheduleRequestCollection" />
      <MemberSignature Language="F#" Value="abstract member GetRoleEligibilityScheduleRequests : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestCollection&#xA;override this.GetRoleEligibilityScheduleRequests : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestCollection" Usage="mockableAuthorizationArmClient.GetRoleEligibilityScheduleRequests scope" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <summary> Gets a collection of RoleEligibilityScheduleRequestResources in the ArmClient. </summary>
        <returns> An object representing collection of RoleEligibilityScheduleRequestResources and their operations over a RoleEligibilityScheduleRequestResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoleEligibilityScheduleResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Authorization.RoleEligibilityScheduleResource GetRoleEligibilityScheduleResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Authorization.RoleEligibilityScheduleResource GetRoleEligibilityScheduleResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetRoleEligibilityScheduleResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleEligibilityScheduleResource (id As ResourceIdentifier) As RoleEligibilityScheduleResource" />
      <MemberSignature Language="F#" Value="abstract member GetRoleEligibilityScheduleResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.RoleEligibilityScheduleResource&#xA;override this.GetRoleEligibilityScheduleResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.RoleEligibilityScheduleResource" Usage="mockableAuthorizationArmClient.GetRoleEligibilityScheduleResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Authorization.RoleEligibilityScheduleResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Authorization.RoleEligibilityScheduleResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Authorization.RoleEligibilityScheduleResource.CreateResourceIdentifier(System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Authorization.RoleEligibilityScheduleResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Authorization.RoleEligibilityScheduleResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoleEligibilitySchedules">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Authorization.RoleEligibilityScheduleCollection GetRoleEligibilitySchedules (Azure.Core.ResourceIdentifier scope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Authorization.RoleEligibilityScheduleCollection GetRoleEligibilitySchedules(class Azure.Core.ResourceIdentifier scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetRoleEligibilitySchedules(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleEligibilitySchedules (scope As ResourceIdentifier) As RoleEligibilityScheduleCollection" />
      <MemberSignature Language="F#" Value="abstract member GetRoleEligibilitySchedules : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.RoleEligibilityScheduleCollection&#xA;override this.GetRoleEligibilitySchedules : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.RoleEligibilityScheduleCollection" Usage="mockableAuthorizationArmClient.GetRoleEligibilitySchedules scope" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Authorization.RoleEligibilityScheduleCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <summary> Gets a collection of RoleEligibilityScheduleResources in the ArmClient. </summary>
        <returns> An object representing collection of RoleEligibilityScheduleResources and their operations over a RoleEligibilityScheduleResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoleManagementPolicies">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Authorization.RoleManagementPolicyCollection GetRoleManagementPolicies (Azure.Core.ResourceIdentifier scope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Authorization.RoleManagementPolicyCollection GetRoleManagementPolicies(class Azure.Core.ResourceIdentifier scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetRoleManagementPolicies(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleManagementPolicies (scope As ResourceIdentifier) As RoleManagementPolicyCollection" />
      <MemberSignature Language="F#" Value="abstract member GetRoleManagementPolicies : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.RoleManagementPolicyCollection&#xA;override this.GetRoleManagementPolicies : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.RoleManagementPolicyCollection" Usage="mockableAuthorizationArmClient.GetRoleManagementPolicies scope" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Authorization.RoleManagementPolicyCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <summary> Gets a collection of RoleManagementPolicyResources in the ArmClient. </summary>
        <returns> An object representing collection of RoleManagementPolicyResources and their operations over a RoleManagementPolicyResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoleManagementPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Authorization.RoleManagementPolicyResource&gt; GetRoleManagementPolicy (Azure.Core.ResourceIdentifier scope, string roleManagementPolicyName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.RoleManagementPolicyResource&gt; GetRoleManagementPolicy(class Azure.Core.ResourceIdentifier scope, string roleManagementPolicyName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetRoleManagementPolicy(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleManagementPolicy (scope As ResourceIdentifier, roleManagementPolicyName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RoleManagementPolicyResource)" />
      <MemberSignature Language="F#" Value="abstract member GetRoleManagementPolicy : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.RoleManagementPolicyResource&gt;&#xA;override this.GetRoleManagementPolicy : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.RoleManagementPolicyResource&gt;" Usage="mockableAuthorizationArmClient.GetRoleManagementPolicy (scope, roleManagementPolicyName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Authorization.RoleManagementPolicyResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="roleManagementPolicyName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="roleManagementPolicyName"> The name (guid) of the role management policy to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the specified role management policy for a resource scope
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleManagementPolicies/{roleManagementPolicyName}</description></item><item><term>Operation Id</term><description>RoleManagementPolicies_Get</description></item><item><term>Default Api Version</term><description>2020-10-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Authorization.RoleManagementPolicyResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleManagementPolicyName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleManagementPolicyName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRoleManagementPolicyAssignment">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentResource&gt; GetRoleManagementPolicyAssignment (Azure.Core.ResourceIdentifier scope, string roleManagementPolicyAssignmentName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentResource&gt; GetRoleManagementPolicyAssignment(class Azure.Core.ResourceIdentifier scope, string roleManagementPolicyAssignmentName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetRoleManagementPolicyAssignment(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleManagementPolicyAssignment (scope As ResourceIdentifier, roleManagementPolicyAssignmentName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RoleManagementPolicyAssignmentResource)" />
      <MemberSignature Language="F#" Value="abstract member GetRoleManagementPolicyAssignment : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentResource&gt;&#xA;override this.GetRoleManagementPolicyAssignment : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentResource&gt;" Usage="mockableAuthorizationArmClient.GetRoleManagementPolicyAssignment (scope, roleManagementPolicyAssignmentName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="roleManagementPolicyAssignmentName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="roleManagementPolicyAssignmentName"> The name of format {guid_guid} the role management policy assignment to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the specified role management policy assignment for a resource scope
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleManagementPolicyAssignments/{roleManagementPolicyAssignmentName}</description></item><item><term>Operation Id</term><description>RoleManagementPolicyAssignments_Get</description></item><item><term>Default Api Version</term><description>2020-10-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleManagementPolicyAssignmentName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleManagementPolicyAssignmentName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRoleManagementPolicyAssignmentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentResource&gt;&gt; GetRoleManagementPolicyAssignmentAsync (Azure.Core.ResourceIdentifier scope, string roleManagementPolicyAssignmentName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentResource&gt;&gt; GetRoleManagementPolicyAssignmentAsync(class Azure.Core.ResourceIdentifier scope, string roleManagementPolicyAssignmentName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetRoleManagementPolicyAssignmentAsync(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleManagementPolicyAssignmentAsync (scope As ResourceIdentifier, roleManagementPolicyAssignmentName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RoleManagementPolicyAssignmentResource))" />
      <MemberSignature Language="F#" Value="abstract member GetRoleManagementPolicyAssignmentAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentResource&gt;&gt;&#xA;override this.GetRoleManagementPolicyAssignmentAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentResource&gt;&gt;" Usage="mockableAuthorizationArmClient.GetRoleManagementPolicyAssignmentAsync (scope, roleManagementPolicyAssignmentName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="roleManagementPolicyAssignmentName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="roleManagementPolicyAssignmentName"> The name of format {guid_guid} the role management policy assignment to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the specified role management policy assignment for a resource scope
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleManagementPolicyAssignments/{roleManagementPolicyAssignmentName}</description></item><item><term>Operation Id</term><description>RoleManagementPolicyAssignments_Get</description></item><item><term>Default Api Version</term><description>2020-10-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleManagementPolicyAssignmentName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleManagementPolicyAssignmentName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRoleManagementPolicyAssignmentResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentResource GetRoleManagementPolicyAssignmentResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentResource GetRoleManagementPolicyAssignmentResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetRoleManagementPolicyAssignmentResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleManagementPolicyAssignmentResource (id As ResourceIdentifier) As RoleManagementPolicyAssignmentResource" />
      <MemberSignature Language="F#" Value="abstract member GetRoleManagementPolicyAssignmentResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentResource&#xA;override this.GetRoleManagementPolicyAssignmentResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentResource" Usage="mockableAuthorizationArmClient.GetRoleManagementPolicyAssignmentResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentResource.CreateResourceIdentifier(System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoleManagementPolicyAssignments">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentCollection GetRoleManagementPolicyAssignments (Azure.Core.ResourceIdentifier scope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentCollection GetRoleManagementPolicyAssignments(class Azure.Core.ResourceIdentifier scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetRoleManagementPolicyAssignments(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleManagementPolicyAssignments (scope As ResourceIdentifier) As RoleManagementPolicyAssignmentCollection" />
      <MemberSignature Language="F#" Value="abstract member GetRoleManagementPolicyAssignments : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentCollection&#xA;override this.GetRoleManagementPolicyAssignments : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentCollection" Usage="mockableAuthorizationArmClient.GetRoleManagementPolicyAssignments scope" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <summary> Gets a collection of RoleManagementPolicyAssignmentResources in the ArmClient. </summary>
        <returns> An object representing collection of RoleManagementPolicyAssignmentResources and their operations over a RoleManagementPolicyAssignmentResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoleManagementPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleManagementPolicyResource&gt;&gt; GetRoleManagementPolicyAsync (Azure.Core.ResourceIdentifier scope, string roleManagementPolicyName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.RoleManagementPolicyResource&gt;&gt; GetRoleManagementPolicyAsync(class Azure.Core.ResourceIdentifier scope, string roleManagementPolicyName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetRoleManagementPolicyAsync(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleManagementPolicyAsync (scope As ResourceIdentifier, roleManagementPolicyName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RoleManagementPolicyResource))" />
      <MemberSignature Language="F#" Value="abstract member GetRoleManagementPolicyAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleManagementPolicyResource&gt;&gt;&#xA;override this.GetRoleManagementPolicyAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleManagementPolicyResource&gt;&gt;" Usage="mockableAuthorizationArmClient.GetRoleManagementPolicyAsync (scope, roleManagementPolicyName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleManagementPolicyResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="roleManagementPolicyName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="roleManagementPolicyName"> The name (guid) of the role management policy to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the specified role management policy for a resource scope
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleManagementPolicies/{roleManagementPolicyName}</description></item><item><term>Operation Id</term><description>RoleManagementPolicies_Get</description></item><item><term>Default Api Version</term><description>2020-10-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Authorization.RoleManagementPolicyResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleManagementPolicyName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleManagementPolicyName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRoleManagementPolicyResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Authorization.RoleManagementPolicyResource GetRoleManagementPolicyResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Authorization.RoleManagementPolicyResource GetRoleManagementPolicyResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmClient.GetRoleManagementPolicyResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleManagementPolicyResource (id As ResourceIdentifier) As RoleManagementPolicyResource" />
      <MemberSignature Language="F#" Value="abstract member GetRoleManagementPolicyResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.RoleManagementPolicyResource&#xA;override this.GetRoleManagementPolicyResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Authorization.RoleManagementPolicyResource" Usage="mockableAuthorizationArmClient.GetRoleManagementPolicyResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Authorization.RoleManagementPolicyResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Authorization.RoleManagementPolicyResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Authorization.RoleManagementPolicyResource.CreateResourceIdentifier(System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Authorization.RoleManagementPolicyResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Authorization.RoleManagementPolicyResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
