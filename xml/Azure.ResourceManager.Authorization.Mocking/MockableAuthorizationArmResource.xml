<Type Name="MockableAuthorizationArmResource" FullName="Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmResource">
  <TypeSignature Language="C#" Value="public class MockableAuthorizationArmResource : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MockableAuthorizationArmResource extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmResource" />
  <TypeSignature Language="VB.NET" Value="Public Class MockableAuthorizationArmResource&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type MockableAuthorizationArmResource = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> A class to add extension methods to ArmResource. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MockableAuthorizationArmResource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmResource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmResource" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAuthorizationRoleDefinition">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionResource&gt; GetAuthorizationRoleDefinition (Azure.Core.ResourceIdentifier roleDefinitionId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionResource&gt; GetAuthorizationRoleDefinition(class Azure.Core.ResourceIdentifier roleDefinitionId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmResource.GetAuthorizationRoleDefinition(Azure.Core.ResourceIdentifier,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAuthorizationRoleDefinition (roleDefinitionId As ResourceIdentifier, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AuthorizationRoleDefinitionResource)" />
      <MemberSignature Language="F#" Value="abstract member GetAuthorizationRoleDefinition : Azure.Core.ResourceIdentifier * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionResource&gt;&#xA;override this.GetAuthorizationRoleDefinition : Azure.Core.ResourceIdentifier * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionResource&gt;" Usage="mockableAuthorizationArmResource.GetAuthorizationRoleDefinition (roleDefinitionId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleDefinitionId" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="roleDefinitionId"> The ID of the role definition. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get role definition by name (GUID).
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId}</description></item><item><term>Operation Id</term><description>RoleDefinitions_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleDefinitionId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAuthorizationRoleDefinitionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionResource&gt;&gt; GetAuthorizationRoleDefinitionAsync (Azure.Core.ResourceIdentifier roleDefinitionId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionResource&gt;&gt; GetAuthorizationRoleDefinitionAsync(class Azure.Core.ResourceIdentifier roleDefinitionId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmResource.GetAuthorizationRoleDefinitionAsync(Azure.Core.ResourceIdentifier,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAuthorizationRoleDefinitionAsync (roleDefinitionId As ResourceIdentifier, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AuthorizationRoleDefinitionResource))" />
      <MemberSignature Language="F#" Value="abstract member GetAuthorizationRoleDefinitionAsync : Azure.Core.ResourceIdentifier * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionResource&gt;&gt;&#xA;override this.GetAuthorizationRoleDefinitionAsync : Azure.Core.ResourceIdentifier * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionResource&gt;&gt;" Usage="mockableAuthorizationArmResource.GetAuthorizationRoleDefinitionAsync (roleDefinitionId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleDefinitionId" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="roleDefinitionId"> The ID of the role definition. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get role definition by name (GUID).
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId}</description></item><item><term>Operation Id</term><description>RoleDefinitions_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleDefinitionId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAuthorizationRoleDefinitions">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionCollection GetAuthorizationRoleDefinitions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionCollection GetAuthorizationRoleDefinitions() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmResource.GetAuthorizationRoleDefinitions" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAuthorizationRoleDefinitions () As AuthorizationRoleDefinitionCollection" />
      <MemberSignature Language="F#" Value="abstract member GetAuthorizationRoleDefinitions : unit -&gt; Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionCollection&#xA;override this.GetAuthorizationRoleDefinitions : unit -&gt; Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionCollection" Usage="mockableAuthorizationArmResource.GetAuthorizationRoleDefinitions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Authorization.AuthorizationRoleDefinitionCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of AuthorizationRoleDefinitionResources in the ArmResource. </summary>
        <returns> An object representing collection of AuthorizationRoleDefinitionResources and their operations over a AuthorizationRoleDefinitionResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDenyAssignment">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt; GetDenyAssignment (string denyAssignmentId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.DenyAssignmentResource&gt; GetDenyAssignment(string denyAssignmentId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmResource.GetDenyAssignment(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDenyAssignment (denyAssignmentId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DenyAssignmentResource)" />
      <MemberSignature Language="F#" Value="abstract member GetDenyAssignment : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;&#xA;override this.GetDenyAssignment : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;" Usage="mockableAuthorizationArmResource.GetDenyAssignment (denyAssignmentId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="denyAssignmentId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="denyAssignmentId"> The ID of the deny assignment to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the specified deny assignment.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId}</description></item><item><term>Operation Id</term><description>DenyAssignments_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="denyAssignmentId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="denyAssignmentId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDenyAssignmentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;&gt; GetDenyAssignmentAsync (string denyAssignmentId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;&gt; GetDenyAssignmentAsync(string denyAssignmentId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmResource.GetDenyAssignmentAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDenyAssignmentAsync (denyAssignmentId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DenyAssignmentResource))" />
      <MemberSignature Language="F#" Value="abstract member GetDenyAssignmentAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;&gt;&#xA;override this.GetDenyAssignmentAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;&gt;" Usage="mockableAuthorizationArmResource.GetDenyAssignmentAsync (denyAssignmentId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="denyAssignmentId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="denyAssignmentId"> The ID of the deny assignment to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the specified deny assignment.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId}</description></item><item><term>Operation Id</term><description>DenyAssignments_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="denyAssignmentId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="denyAssignmentId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDenyAssignments">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Authorization.DenyAssignmentCollection GetDenyAssignments ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Authorization.DenyAssignmentCollection GetDenyAssignments() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmResource.GetDenyAssignments" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDenyAssignments () As DenyAssignmentCollection" />
      <MemberSignature Language="F#" Value="abstract member GetDenyAssignments : unit -&gt; Azure.ResourceManager.Authorization.DenyAssignmentCollection&#xA;override this.GetDenyAssignments : unit -&gt; Azure.ResourceManager.Authorization.DenyAssignmentCollection" Usage="mockableAuthorizationArmResource.GetDenyAssignments " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Authorization.DenyAssignmentCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of DenyAssignmentResources in the ArmResource. </summary>
        <returns> An object representing collection of DenyAssignmentResources and their operations over a DenyAssignmentResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoleAssignment">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentResource&gt; GetRoleAssignment (string roleAssignmentName, string tenantId = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.RoleAssignmentResource&gt; GetRoleAssignment(string roleAssignmentName, string tenantId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmResource.GetRoleAssignment(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleAssignment (roleAssignmentName As String, Optional tenantId As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RoleAssignmentResource)" />
      <MemberSignature Language="F#" Value="abstract member GetRoleAssignment : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentResource&gt;&#xA;override this.GetRoleAssignment : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentResource&gt;" Usage="mockableAuthorizationArmResource.GetRoleAssignment (roleAssignmentName, tenantId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleAssignmentName" Type="System.String" />
        <Parameter Name="tenantId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="roleAssignmentName"> The name of the role assignment. It can be any valid GUID. </param>
        <param name="tenantId"> Tenant ID for cross-tenant request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get a role assignment by scope and name.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}</description></item><item><term>Operation Id</term><description>RoleAssignments_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleAssignmentName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRoleAssignmentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentResource&gt;&gt; GetRoleAssignmentAsync (string roleAssignmentName, string tenantId = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.RoleAssignmentResource&gt;&gt; GetRoleAssignmentAsync(string roleAssignmentName, string tenantId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmResource.GetRoleAssignmentAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleAssignmentAsync (roleAssignmentName As String, Optional tenantId As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RoleAssignmentResource))" />
      <MemberSignature Language="F#" Value="abstract member GetRoleAssignmentAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentResource&gt;&gt;&#xA;override this.GetRoleAssignmentAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentResource&gt;&gt;" Usage="mockableAuthorizationArmResource.GetRoleAssignmentAsync (roleAssignmentName, tenantId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleAssignmentName" Type="System.String" />
        <Parameter Name="tenantId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="roleAssignmentName"> The name of the role assignment. It can be any valid GUID. </param>
        <param name="tenantId"> Tenant ID for cross-tenant request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get a role assignment by scope and name.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}</description></item><item><term>Operation Id</term><description>RoleAssignments_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleAssignmentName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRoleAssignments">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Authorization.RoleAssignmentCollection GetRoleAssignments ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Authorization.RoleAssignmentCollection GetRoleAssignments() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmResource.GetRoleAssignments" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleAssignments () As RoleAssignmentCollection" />
      <MemberSignature Language="F#" Value="abstract member GetRoleAssignments : unit -&gt; Azure.ResourceManager.Authorization.RoleAssignmentCollection&#xA;override this.GetRoleAssignments : unit -&gt; Azure.ResourceManager.Authorization.RoleAssignmentCollection" Usage="mockableAuthorizationArmResource.GetRoleAssignments " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Authorization.RoleAssignmentCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of RoleAssignmentResources in the ArmResource. </summary>
        <returns> An object representing collection of RoleAssignmentResources and their operations over a RoleAssignmentResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoleAssignmentSchedule">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleResource&gt; GetRoleAssignmentSchedule (string roleAssignmentScheduleName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.RoleAssignmentScheduleResource&gt; GetRoleAssignmentSchedule(string roleAssignmentScheduleName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmResource.GetRoleAssignmentSchedule(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleAssignmentSchedule (roleAssignmentScheduleName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RoleAssignmentScheduleResource)" />
      <MemberSignature Language="F#" Value="abstract member GetRoleAssignmentSchedule : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleResource&gt;&#xA;override this.GetRoleAssignmentSchedule : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleResource&gt;" Usage="mockableAuthorizationArmResource.GetRoleAssignmentSchedule (roleAssignmentScheduleName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleAssignmentScheduleName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="roleAssignmentScheduleName"> The name (guid) of the role assignment schedule to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the specified role assignment schedule for a resource scope
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleAssignmentSchedules/{roleAssignmentScheduleName}</description></item><item><term>Operation Id</term><description>RoleAssignmentSchedules_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleAssignmentScheduleName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleAssignmentScheduleName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRoleAssignmentScheduleAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleResource&gt;&gt; GetRoleAssignmentScheduleAsync (string roleAssignmentScheduleName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.RoleAssignmentScheduleResource&gt;&gt; GetRoleAssignmentScheduleAsync(string roleAssignmentScheduleName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmResource.GetRoleAssignmentScheduleAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleAssignmentScheduleAsync (roleAssignmentScheduleName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RoleAssignmentScheduleResource))" />
      <MemberSignature Language="F#" Value="abstract member GetRoleAssignmentScheduleAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleResource&gt;&gt;&#xA;override this.GetRoleAssignmentScheduleAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleResource&gt;&gt;" Usage="mockableAuthorizationArmResource.GetRoleAssignmentScheduleAsync (roleAssignmentScheduleName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleAssignmentScheduleName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="roleAssignmentScheduleName"> The name (guid) of the role assignment schedule to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the specified role assignment schedule for a resource scope
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleAssignmentSchedules/{roleAssignmentScheduleName}</description></item><item><term>Operation Id</term><description>RoleAssignmentSchedules_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleAssignmentScheduleName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleAssignmentScheduleName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRoleAssignmentScheduleInstance">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceResource&gt; GetRoleAssignmentScheduleInstance (string roleAssignmentScheduleInstanceName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceResource&gt; GetRoleAssignmentScheduleInstance(string roleAssignmentScheduleInstanceName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmResource.GetRoleAssignmentScheduleInstance(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleAssignmentScheduleInstance (roleAssignmentScheduleInstanceName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RoleAssignmentScheduleInstanceResource)" />
      <MemberSignature Language="F#" Value="abstract member GetRoleAssignmentScheduleInstance : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceResource&gt;&#xA;override this.GetRoleAssignmentScheduleInstance : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceResource&gt;" Usage="mockableAuthorizationArmResource.GetRoleAssignmentScheduleInstance (roleAssignmentScheduleInstanceName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleAssignmentScheduleInstanceName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="roleAssignmentScheduleInstanceName"> The name (hash of schedule name + time) of the role assignment schedule to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the specified role assignment schedule instance.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleAssignmentScheduleInstances/{roleAssignmentScheduleInstanceName}</description></item><item><term>Operation Id</term><description>RoleAssignmentScheduleInstances_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleAssignmentScheduleInstanceName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleAssignmentScheduleInstanceName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRoleAssignmentScheduleInstanceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceResource&gt;&gt; GetRoleAssignmentScheduleInstanceAsync (string roleAssignmentScheduleInstanceName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceResource&gt;&gt; GetRoleAssignmentScheduleInstanceAsync(string roleAssignmentScheduleInstanceName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmResource.GetRoleAssignmentScheduleInstanceAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleAssignmentScheduleInstanceAsync (roleAssignmentScheduleInstanceName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RoleAssignmentScheduleInstanceResource))" />
      <MemberSignature Language="F#" Value="abstract member GetRoleAssignmentScheduleInstanceAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceResource&gt;&gt;&#xA;override this.GetRoleAssignmentScheduleInstanceAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceResource&gt;&gt;" Usage="mockableAuthorizationArmResource.GetRoleAssignmentScheduleInstanceAsync (roleAssignmentScheduleInstanceName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleAssignmentScheduleInstanceName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="roleAssignmentScheduleInstanceName"> The name (hash of schedule name + time) of the role assignment schedule to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the specified role assignment schedule instance.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleAssignmentScheduleInstances/{roleAssignmentScheduleInstanceName}</description></item><item><term>Operation Id</term><description>RoleAssignmentScheduleInstances_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleAssignmentScheduleInstanceName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleAssignmentScheduleInstanceName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRoleAssignmentScheduleInstances">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceCollection GetRoleAssignmentScheduleInstances ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceCollection GetRoleAssignmentScheduleInstances() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmResource.GetRoleAssignmentScheduleInstances" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleAssignmentScheduleInstances () As RoleAssignmentScheduleInstanceCollection" />
      <MemberSignature Language="F#" Value="abstract member GetRoleAssignmentScheduleInstances : unit -&gt; Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceCollection&#xA;override this.GetRoleAssignmentScheduleInstances : unit -&gt; Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceCollection" Usage="mockableAuthorizationArmResource.GetRoleAssignmentScheduleInstances " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Authorization.RoleAssignmentScheduleInstanceCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of RoleAssignmentScheduleInstanceResources in the ArmResource. </summary>
        <returns> An object representing collection of RoleAssignmentScheduleInstanceResources and their operations over a RoleAssignmentScheduleInstanceResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoleAssignmentScheduleRequest">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestResource&gt; GetRoleAssignmentScheduleRequest (string roleAssignmentScheduleRequestName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestResource&gt; GetRoleAssignmentScheduleRequest(string roleAssignmentScheduleRequestName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmResource.GetRoleAssignmentScheduleRequest(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleAssignmentScheduleRequest (roleAssignmentScheduleRequestName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RoleAssignmentScheduleRequestResource)" />
      <MemberSignature Language="F#" Value="abstract member GetRoleAssignmentScheduleRequest : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestResource&gt;&#xA;override this.GetRoleAssignmentScheduleRequest : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestResource&gt;" Usage="mockableAuthorizationArmResource.GetRoleAssignmentScheduleRequest (roleAssignmentScheduleRequestName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleAssignmentScheduleRequestName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="roleAssignmentScheduleRequestName"> The name (guid) of the role assignment schedule request to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the specified role assignment schedule request.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleAssignmentScheduleRequests/{roleAssignmentScheduleRequestName}</description></item><item><term>Operation Id</term><description>RoleAssignmentScheduleRequests_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleAssignmentScheduleRequestName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleAssignmentScheduleRequestName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRoleAssignmentScheduleRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestResource&gt;&gt; GetRoleAssignmentScheduleRequestAsync (string roleAssignmentScheduleRequestName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestResource&gt;&gt; GetRoleAssignmentScheduleRequestAsync(string roleAssignmentScheduleRequestName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmResource.GetRoleAssignmentScheduleRequestAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleAssignmentScheduleRequestAsync (roleAssignmentScheduleRequestName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RoleAssignmentScheduleRequestResource))" />
      <MemberSignature Language="F#" Value="abstract member GetRoleAssignmentScheduleRequestAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestResource&gt;&gt;&#xA;override this.GetRoleAssignmentScheduleRequestAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestResource&gt;&gt;" Usage="mockableAuthorizationArmResource.GetRoleAssignmentScheduleRequestAsync (roleAssignmentScheduleRequestName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleAssignmentScheduleRequestName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="roleAssignmentScheduleRequestName"> The name (guid) of the role assignment schedule request to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the specified role assignment schedule request.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleAssignmentScheduleRequests/{roleAssignmentScheduleRequestName}</description></item><item><term>Operation Id</term><description>RoleAssignmentScheduleRequests_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleAssignmentScheduleRequestName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleAssignmentScheduleRequestName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRoleAssignmentScheduleRequests">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestCollection GetRoleAssignmentScheduleRequests ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestCollection GetRoleAssignmentScheduleRequests() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmResource.GetRoleAssignmentScheduleRequests" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleAssignmentScheduleRequests () As RoleAssignmentScheduleRequestCollection" />
      <MemberSignature Language="F#" Value="abstract member GetRoleAssignmentScheduleRequests : unit -&gt; Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestCollection&#xA;override this.GetRoleAssignmentScheduleRequests : unit -&gt; Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestCollection" Usage="mockableAuthorizationArmResource.GetRoleAssignmentScheduleRequests " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Authorization.RoleAssignmentScheduleRequestCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of RoleAssignmentScheduleRequestResources in the ArmResource. </summary>
        <returns> An object representing collection of RoleAssignmentScheduleRequestResources and their operations over a RoleAssignmentScheduleRequestResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoleAssignmentSchedules">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Authorization.RoleAssignmentScheduleCollection GetRoleAssignmentSchedules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Authorization.RoleAssignmentScheduleCollection GetRoleAssignmentSchedules() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmResource.GetRoleAssignmentSchedules" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleAssignmentSchedules () As RoleAssignmentScheduleCollection" />
      <MemberSignature Language="F#" Value="abstract member GetRoleAssignmentSchedules : unit -&gt; Azure.ResourceManager.Authorization.RoleAssignmentScheduleCollection&#xA;override this.GetRoleAssignmentSchedules : unit -&gt; Azure.ResourceManager.Authorization.RoleAssignmentScheduleCollection" Usage="mockableAuthorizationArmResource.GetRoleAssignmentSchedules " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Authorization.RoleAssignmentScheduleCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of RoleAssignmentScheduleResources in the ArmResource. </summary>
        <returns> An object representing collection of RoleAssignmentScheduleResources and their operations over a RoleAssignmentScheduleResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoleEligibilitySchedule">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleResource&gt; GetRoleEligibilitySchedule (string roleEligibilityScheduleName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.RoleEligibilityScheduleResource&gt; GetRoleEligibilitySchedule(string roleEligibilityScheduleName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmResource.GetRoleEligibilitySchedule(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleEligibilitySchedule (roleEligibilityScheduleName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RoleEligibilityScheduleResource)" />
      <MemberSignature Language="F#" Value="abstract member GetRoleEligibilitySchedule : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleResource&gt;&#xA;override this.GetRoleEligibilitySchedule : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleResource&gt;" Usage="mockableAuthorizationArmResource.GetRoleEligibilitySchedule (roleEligibilityScheduleName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleEligibilityScheduleName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="roleEligibilityScheduleName"> The name (guid) of the role eligibility schedule to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the specified role eligibility schedule for a resource scope
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleEligibilitySchedules/{roleEligibilityScheduleName}</description></item><item><term>Operation Id</term><description>RoleEligibilitySchedules_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleEligibilityScheduleName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleEligibilityScheduleName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRoleEligibilityScheduleAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleResource&gt;&gt; GetRoleEligibilityScheduleAsync (string roleEligibilityScheduleName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.RoleEligibilityScheduleResource&gt;&gt; GetRoleEligibilityScheduleAsync(string roleEligibilityScheduleName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmResource.GetRoleEligibilityScheduleAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleEligibilityScheduleAsync (roleEligibilityScheduleName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RoleEligibilityScheduleResource))" />
      <MemberSignature Language="F#" Value="abstract member GetRoleEligibilityScheduleAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleResource&gt;&gt;&#xA;override this.GetRoleEligibilityScheduleAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleResource&gt;&gt;" Usage="mockableAuthorizationArmResource.GetRoleEligibilityScheduleAsync (roleEligibilityScheduleName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleEligibilityScheduleName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="roleEligibilityScheduleName"> The name (guid) of the role eligibility schedule to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the specified role eligibility schedule for a resource scope
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleEligibilitySchedules/{roleEligibilityScheduleName}</description></item><item><term>Operation Id</term><description>RoleEligibilitySchedules_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleEligibilityScheduleName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleEligibilityScheduleName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRoleEligibilityScheduleInstance">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceResource&gt; GetRoleEligibilityScheduleInstance (string roleEligibilityScheduleInstanceName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceResource&gt; GetRoleEligibilityScheduleInstance(string roleEligibilityScheduleInstanceName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmResource.GetRoleEligibilityScheduleInstance(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleEligibilityScheduleInstance (roleEligibilityScheduleInstanceName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RoleEligibilityScheduleInstanceResource)" />
      <MemberSignature Language="F#" Value="abstract member GetRoleEligibilityScheduleInstance : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceResource&gt;&#xA;override this.GetRoleEligibilityScheduleInstance : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceResource&gt;" Usage="mockableAuthorizationArmResource.GetRoleEligibilityScheduleInstance (roleEligibilityScheduleInstanceName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleEligibilityScheduleInstanceName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="roleEligibilityScheduleInstanceName"> The name (hash of schedule name + time) of the role eligibility schedule to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the specified role eligibility schedule instance.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleEligibilityScheduleInstances/{roleEligibilityScheduleInstanceName}</description></item><item><term>Operation Id</term><description>RoleEligibilityScheduleInstances_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleEligibilityScheduleInstanceName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleEligibilityScheduleInstanceName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRoleEligibilityScheduleInstanceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceResource&gt;&gt; GetRoleEligibilityScheduleInstanceAsync (string roleEligibilityScheduleInstanceName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceResource&gt;&gt; GetRoleEligibilityScheduleInstanceAsync(string roleEligibilityScheduleInstanceName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmResource.GetRoleEligibilityScheduleInstanceAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleEligibilityScheduleInstanceAsync (roleEligibilityScheduleInstanceName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RoleEligibilityScheduleInstanceResource))" />
      <MemberSignature Language="F#" Value="abstract member GetRoleEligibilityScheduleInstanceAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceResource&gt;&gt;&#xA;override this.GetRoleEligibilityScheduleInstanceAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceResource&gt;&gt;" Usage="mockableAuthorizationArmResource.GetRoleEligibilityScheduleInstanceAsync (roleEligibilityScheduleInstanceName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleEligibilityScheduleInstanceName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="roleEligibilityScheduleInstanceName"> The name (hash of schedule name + time) of the role eligibility schedule to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the specified role eligibility schedule instance.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleEligibilityScheduleInstances/{roleEligibilityScheduleInstanceName}</description></item><item><term>Operation Id</term><description>RoleEligibilityScheduleInstances_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleEligibilityScheduleInstanceName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleEligibilityScheduleInstanceName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRoleEligibilityScheduleInstances">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceCollection GetRoleEligibilityScheduleInstances ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceCollection GetRoleEligibilityScheduleInstances() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmResource.GetRoleEligibilityScheduleInstances" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleEligibilityScheduleInstances () As RoleEligibilityScheduleInstanceCollection" />
      <MemberSignature Language="F#" Value="abstract member GetRoleEligibilityScheduleInstances : unit -&gt; Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceCollection&#xA;override this.GetRoleEligibilityScheduleInstances : unit -&gt; Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceCollection" Usage="mockableAuthorizationArmResource.GetRoleEligibilityScheduleInstances " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Authorization.RoleEligibilityScheduleInstanceCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of RoleEligibilityScheduleInstanceResources in the ArmResource. </summary>
        <returns> An object representing collection of RoleEligibilityScheduleInstanceResources and their operations over a RoleEligibilityScheduleInstanceResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoleEligibilityScheduleRequest">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestResource&gt; GetRoleEligibilityScheduleRequest (string roleEligibilityScheduleRequestName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestResource&gt; GetRoleEligibilityScheduleRequest(string roleEligibilityScheduleRequestName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmResource.GetRoleEligibilityScheduleRequest(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleEligibilityScheduleRequest (roleEligibilityScheduleRequestName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RoleEligibilityScheduleRequestResource)" />
      <MemberSignature Language="F#" Value="abstract member GetRoleEligibilityScheduleRequest : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestResource&gt;&#xA;override this.GetRoleEligibilityScheduleRequest : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestResource&gt;" Usage="mockableAuthorizationArmResource.GetRoleEligibilityScheduleRequest (roleEligibilityScheduleRequestName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleEligibilityScheduleRequestName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="roleEligibilityScheduleRequestName"> The name (guid) of the role eligibility schedule request to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the specified role eligibility schedule request.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleEligibilityScheduleRequests/{roleEligibilityScheduleRequestName}</description></item><item><term>Operation Id</term><description>RoleEligibilityScheduleRequests_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleEligibilityScheduleRequestName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleEligibilityScheduleRequestName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRoleEligibilityScheduleRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestResource&gt;&gt; GetRoleEligibilityScheduleRequestAsync (string roleEligibilityScheduleRequestName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestResource&gt;&gt; GetRoleEligibilityScheduleRequestAsync(string roleEligibilityScheduleRequestName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmResource.GetRoleEligibilityScheduleRequestAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleEligibilityScheduleRequestAsync (roleEligibilityScheduleRequestName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RoleEligibilityScheduleRequestResource))" />
      <MemberSignature Language="F#" Value="abstract member GetRoleEligibilityScheduleRequestAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestResource&gt;&gt;&#xA;override this.GetRoleEligibilityScheduleRequestAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestResource&gt;&gt;" Usage="mockableAuthorizationArmResource.GetRoleEligibilityScheduleRequestAsync (roleEligibilityScheduleRequestName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleEligibilityScheduleRequestName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="roleEligibilityScheduleRequestName"> The name (guid) of the role eligibility schedule request to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the specified role eligibility schedule request.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleEligibilityScheduleRequests/{roleEligibilityScheduleRequestName}</description></item><item><term>Operation Id</term><description>RoleEligibilityScheduleRequests_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleEligibilityScheduleRequestName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleEligibilityScheduleRequestName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRoleEligibilityScheduleRequests">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestCollection GetRoleEligibilityScheduleRequests ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestCollection GetRoleEligibilityScheduleRequests() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmResource.GetRoleEligibilityScheduleRequests" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleEligibilityScheduleRequests () As RoleEligibilityScheduleRequestCollection" />
      <MemberSignature Language="F#" Value="abstract member GetRoleEligibilityScheduleRequests : unit -&gt; Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestCollection&#xA;override this.GetRoleEligibilityScheduleRequests : unit -&gt; Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestCollection" Usage="mockableAuthorizationArmResource.GetRoleEligibilityScheduleRequests " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Authorization.RoleEligibilityScheduleRequestCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of RoleEligibilityScheduleRequestResources in the ArmResource. </summary>
        <returns> An object representing collection of RoleEligibilityScheduleRequestResources and their operations over a RoleEligibilityScheduleRequestResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoleEligibilitySchedules">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Authorization.RoleEligibilityScheduleCollection GetRoleEligibilitySchedules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Authorization.RoleEligibilityScheduleCollection GetRoleEligibilitySchedules() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmResource.GetRoleEligibilitySchedules" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleEligibilitySchedules () As RoleEligibilityScheduleCollection" />
      <MemberSignature Language="F#" Value="abstract member GetRoleEligibilitySchedules : unit -&gt; Azure.ResourceManager.Authorization.RoleEligibilityScheduleCollection&#xA;override this.GetRoleEligibilitySchedules : unit -&gt; Azure.ResourceManager.Authorization.RoleEligibilityScheduleCollection" Usage="mockableAuthorizationArmResource.GetRoleEligibilitySchedules " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Authorization.RoleEligibilityScheduleCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of RoleEligibilityScheduleResources in the ArmResource. </summary>
        <returns> An object representing collection of RoleEligibilityScheduleResources and their operations over a RoleEligibilityScheduleResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoleManagementPolicies">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Authorization.RoleManagementPolicyCollection GetRoleManagementPolicies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Authorization.RoleManagementPolicyCollection GetRoleManagementPolicies() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmResource.GetRoleManagementPolicies" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleManagementPolicies () As RoleManagementPolicyCollection" />
      <MemberSignature Language="F#" Value="abstract member GetRoleManagementPolicies : unit -&gt; Azure.ResourceManager.Authorization.RoleManagementPolicyCollection&#xA;override this.GetRoleManagementPolicies : unit -&gt; Azure.ResourceManager.Authorization.RoleManagementPolicyCollection" Usage="mockableAuthorizationArmResource.GetRoleManagementPolicies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Authorization.RoleManagementPolicyCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of RoleManagementPolicyResources in the ArmResource. </summary>
        <returns> An object representing collection of RoleManagementPolicyResources and their operations over a RoleManagementPolicyResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoleManagementPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Authorization.RoleManagementPolicyResource&gt; GetRoleManagementPolicy (string roleManagementPolicyName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.RoleManagementPolicyResource&gt; GetRoleManagementPolicy(string roleManagementPolicyName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmResource.GetRoleManagementPolicy(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleManagementPolicy (roleManagementPolicyName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RoleManagementPolicyResource)" />
      <MemberSignature Language="F#" Value="abstract member GetRoleManagementPolicy : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.RoleManagementPolicyResource&gt;&#xA;override this.GetRoleManagementPolicy : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.RoleManagementPolicyResource&gt;" Usage="mockableAuthorizationArmResource.GetRoleManagementPolicy (roleManagementPolicyName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Authorization.RoleManagementPolicyResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleManagementPolicyName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="roleManagementPolicyName"> The name (guid) of the role management policy to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the specified role management policy for a resource scope
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleManagementPolicies/{roleManagementPolicyName}</description></item><item><term>Operation Id</term><description>RoleManagementPolicies_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleManagementPolicyName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleManagementPolicyName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRoleManagementPolicyAssignment">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentResource&gt; GetRoleManagementPolicyAssignment (string roleManagementPolicyAssignmentName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentResource&gt; GetRoleManagementPolicyAssignment(string roleManagementPolicyAssignmentName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmResource.GetRoleManagementPolicyAssignment(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleManagementPolicyAssignment (roleManagementPolicyAssignmentName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RoleManagementPolicyAssignmentResource)" />
      <MemberSignature Language="F#" Value="abstract member GetRoleManagementPolicyAssignment : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentResource&gt;&#xA;override this.GetRoleManagementPolicyAssignment : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentResource&gt;" Usage="mockableAuthorizationArmResource.GetRoleManagementPolicyAssignment (roleManagementPolicyAssignmentName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleManagementPolicyAssignmentName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="roleManagementPolicyAssignmentName"> The name of format {guid_guid} the role management policy assignment to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the specified role management policy assignment for a resource scope
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleManagementPolicyAssignments/{roleManagementPolicyAssignmentName}</description></item><item><term>Operation Id</term><description>RoleManagementPolicyAssignments_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleManagementPolicyAssignmentName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleManagementPolicyAssignmentName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRoleManagementPolicyAssignmentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentResource&gt;&gt; GetRoleManagementPolicyAssignmentAsync (string roleManagementPolicyAssignmentName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentResource&gt;&gt; GetRoleManagementPolicyAssignmentAsync(string roleManagementPolicyAssignmentName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmResource.GetRoleManagementPolicyAssignmentAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleManagementPolicyAssignmentAsync (roleManagementPolicyAssignmentName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RoleManagementPolicyAssignmentResource))" />
      <MemberSignature Language="F#" Value="abstract member GetRoleManagementPolicyAssignmentAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentResource&gt;&gt;&#xA;override this.GetRoleManagementPolicyAssignmentAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentResource&gt;&gt;" Usage="mockableAuthorizationArmResource.GetRoleManagementPolicyAssignmentAsync (roleManagementPolicyAssignmentName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleManagementPolicyAssignmentName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="roleManagementPolicyAssignmentName"> The name of format {guid_guid} the role management policy assignment to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the specified role management policy assignment for a resource scope
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleManagementPolicyAssignments/{roleManagementPolicyAssignmentName}</description></item><item><term>Operation Id</term><description>RoleManagementPolicyAssignments_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleManagementPolicyAssignmentName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleManagementPolicyAssignmentName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRoleManagementPolicyAssignments">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentCollection GetRoleManagementPolicyAssignments ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentCollection GetRoleManagementPolicyAssignments() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmResource.GetRoleManagementPolicyAssignments" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleManagementPolicyAssignments () As RoleManagementPolicyAssignmentCollection" />
      <MemberSignature Language="F#" Value="abstract member GetRoleManagementPolicyAssignments : unit -&gt; Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentCollection&#xA;override this.GetRoleManagementPolicyAssignments : unit -&gt; Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentCollection" Usage="mockableAuthorizationArmResource.GetRoleManagementPolicyAssignments " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Authorization.RoleManagementPolicyAssignmentCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of RoleManagementPolicyAssignmentResources in the ArmResource. </summary>
        <returns> An object representing collection of RoleManagementPolicyAssignmentResources and their operations over a RoleManagementPolicyAssignmentResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoleManagementPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleManagementPolicyResource&gt;&gt; GetRoleManagementPolicyAsync (string roleManagementPolicyName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.RoleManagementPolicyResource&gt;&gt; GetRoleManagementPolicyAsync(string roleManagementPolicyName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.Mocking.MockableAuthorizationArmResource.GetRoleManagementPolicyAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRoleManagementPolicyAsync (roleManagementPolicyName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RoleManagementPolicyResource))" />
      <MemberSignature Language="F#" Value="abstract member GetRoleManagementPolicyAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleManagementPolicyResource&gt;&gt;&#xA;override this.GetRoleManagementPolicyAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleManagementPolicyResource&gt;&gt;" Usage="mockableAuthorizationArmResource.GetRoleManagementPolicyAsync (roleManagementPolicyName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.RoleManagementPolicyResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleManagementPolicyName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="roleManagementPolicyName"> The name (guid) of the role management policy to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the specified role management policy for a resource scope
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Authorization/roleManagementPolicies/{roleManagementPolicyName}</description></item><item><term>Operation Id</term><description>RoleManagementPolicies_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleManagementPolicyName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleManagementPolicyName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
