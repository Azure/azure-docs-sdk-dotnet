<Type Name="SyncAsyncEventArgs" FullName="Azure.SyncAsyncEventArgs">
  <TypeSignature Language="C#" Value="public class SyncAsyncEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SyncAsyncEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:Azure.SyncAsyncEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class SyncAsyncEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="F#" Value="type SyncAsyncEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>Azure.Core</AssemblyName>
    <AssemblyVersion>1.13.0.0</AssemblyVersion>
    <AssemblyVersion>1.14.0.0</AssemblyVersion>
    <AssemblyVersion>1.15.0.0</AssemblyVersion>
    <AssemblyVersion>1.16.0.0</AssemblyVersion>
    <AssemblyVersion>1.17.0.0</AssemblyVersion>
    <AssemblyVersion>1.18.0.0</AssemblyVersion>
    <AssemblyVersion>1.19.0.0</AssemblyVersion>
    <AssemblyVersion>1.20.0.0</AssemblyVersion>
    <AssemblyVersion>1.21.0.0</AssemblyVersion>
    <AssemblyVersion>1.22.0.0</AssemblyVersion>
    <AssemblyVersion>1.23.0.0</AssemblyVersion>
    <AssemblyVersion>1.24.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Provides data for <see cref="T:Azure.Core.SyncAsyncEventHandler`1" />
            events that can be invoked either synchronously or asynchronously.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SyncAsyncEventArgs (bool isRunningSynchronously, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool isRunningSynchronously, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.SyncAsyncEventArgs.#ctor(System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (isRunningSynchronously As Boolean, Optional cancellationToken As CancellationToken = Nothing)" />
      <MemberSignature Language="F#" Value="new Azure.SyncAsyncEventArgs : bool * System.Threading.CancellationToken -&gt; Azure.SyncAsyncEventArgs" Usage="new Azure.SyncAsyncEventArgs (isRunningSynchronously, cancellationToken)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core</AssemblyName>
        <AssemblyVersion>1.13.0.0</AssemblyVersion>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.15.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
        <AssemblyVersion>1.18.0.0</AssemblyVersion>
        <AssemblyVersion>1.19.0.0</AssemblyVersion>
        <AssemblyVersion>1.20.0.0</AssemblyVersion>
        <AssemblyVersion>1.21.0.0</AssemblyVersion>
        <AssemblyVersion>1.22.0.0</AssemblyVersion>
        <AssemblyVersion>1.23.0.0</AssemblyVersion>
        <AssemblyVersion>1.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="isRunningSynchronously" Type="System.Boolean" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="isRunningSynchronously">
            A value indicating whether the event handler was invoked
            synchronously or asynchronously.  Please see
            <see cref="T:Azure.Core.SyncAsyncEventHandler`1" /> for more details.
            </param>
        <param name="cancellationToken">
            A cancellation token related to the original operation that raised
            the event.  It's important for your handler to pass this token
            along to any asynchronous or long-running synchronous operations
            that take a token so cancellation will correctly propagate.  The
            default value is <see cref="P:System.Threading.CancellationToken.None" />.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.SyncAsyncEventArgs" />
            class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancellationToken">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationToken CancellationToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.CancellationToken CancellationToken" />
      <MemberSignature Language="DocId" Value="P:Azure.SyncAsyncEventArgs.CancellationToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CancellationToken As CancellationToken" />
      <MemberSignature Language="F#" Value="member this.CancellationToken : System.Threading.CancellationToken" Usage="Azure.SyncAsyncEventArgs.CancellationToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core</AssemblyName>
        <AssemblyVersion>1.13.0.0</AssemblyVersion>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.15.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
        <AssemblyVersion>1.18.0.0</AssemblyVersion>
        <AssemblyVersion>1.19.0.0</AssemblyVersion>
        <AssemblyVersion>1.20.0.0</AssemblyVersion>
        <AssemblyVersion>1.21.0.0</AssemblyVersion>
        <AssemblyVersion>1.22.0.0</AssemblyVersion>
        <AssemblyVersion>1.23.0.0</AssemblyVersion>
        <AssemblyVersion>1.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a cancellation token related to the original operation that
            raised the event.  It's important for your handler to pass this
            token along to any asynchronous or long-running synchronous
            operations that take a token so cancellation (via something like
            <code>
            new CancellationTokenSource(TimeSpan.FromSeconds(10)).Token
            </code>
            for example) will correctly propagate.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRunningSynchronously">
      <MemberSignature Language="C#" Value="public bool IsRunningSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRunningSynchronously" />
      <MemberSignature Language="DocId" Value="P:Azure.SyncAsyncEventArgs.IsRunningSynchronously" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRunningSynchronously As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsRunningSynchronously : bool" Usage="Azure.SyncAsyncEventArgs.IsRunningSynchronously" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core</AssemblyName>
        <AssemblyVersion>1.13.0.0</AssemblyVersion>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.15.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
        <AssemblyVersion>1.18.0.0</AssemblyVersion>
        <AssemblyVersion>1.19.0.0</AssemblyVersion>
        <AssemblyVersion>1.20.0.0</AssemblyVersion>
        <AssemblyVersion>1.21.0.0</AssemblyVersion>
        <AssemblyVersion>1.22.0.0</AssemblyVersion>
        <AssemblyVersion>1.23.0.0</AssemblyVersion>
        <AssemblyVersion>1.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets a value indicating whether the event handler was invoked
             synchronously or asynchronously.  Please see
             <see cref="T:Azure.Core.SyncAsyncEventHandler`1" /> for more details.
             </summary>
        <value>To be added.</value>
        <remarks>
          <para>
             The same <see cref="T:Azure.Core.SyncAsyncEventHandler`1" />
             event can be raised from both synchronous and asynchronous code
             paths depending on whether you're calling sync or async methods on
             a client.  If you write an async handler but raise it from a sync
             method, the handler will be doing sync-over-async and may cause
             ThreadPool starvation.  See
             <see href="https://docs.microsoft.com/archive/blogs/vancem/diagnosing-net-core-threadpool-starvation-with-perfview-why-my-service-is-not-saturating-all-cores-or-seems-to-stall">
             Diagnosing .NET Core ThreadPool Starvation with PerfView</see> for
             a detailed explanation of how that can cause ThreadPool starvation
             and serious performance problems.
             </para>
          <para>
             You can use this <see cref="P:Azure.SyncAsyncEventArgs.IsRunningSynchronously" /> property to check
             how the event is being raised and implement your handler
             accordingly.  Here's an example handler that's safe to invoke from
             both sync and async code paths.
             <code snippet="Snippet:Azure_Core_Samples_EventSamples_CombinedHandler" language="csharp">
             var client = new AlarmClient();
             client.Ring += async (SyncAsyncEventArgs e) =&gt;
             {
                 if (e.IsRunningSynchronously)
                 {
                     Console.WriteLine("Wake up!");
                 }
                 else
                 {
                     await Console.Out.WriteLineAsync("Wake up!");
                 }
             };
            
             client.Snooze(); // sync call that blocks
             await client.SnoozeAsync(); // async call that doesn't block
             </code></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
