<Type Name="RequestContext" FullName="Azure.RequestContext">
  <TypeSignature Language="C#" Value="public class RequestContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RequestContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.RequestContext" />
  <TypeSignature Language="VB.NET" Value="Public Class RequestContext" />
  <TypeSignature Language="F#" Value="type RequestContext = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Core</AssemblyName>
    <AssemblyVersion>1.21.0.0</AssemblyVersion>
    <AssemblyVersion>1.22.0.0</AssemblyVersion>
    <AssemblyVersion>1.23.0.0</AssemblyVersion>
    <AssemblyVersion>1.24.0.0</AssemblyVersion>
    <AssemblyVersion>1.25.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Options that can be used to control the behavior of a request sent by a client.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RequestContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.RequestContext.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core</AssemblyName>
        <AssemblyVersion>1.21.0.0</AssemblyVersion>
        <AssemblyVersion>1.22.0.0</AssemblyVersion>
        <AssemblyVersion>1.23.0.0</AssemblyVersion>
        <AssemblyVersion>1.24.0.0</AssemblyVersion>
        <AssemblyVersion>1.25.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.RequestContext" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddClassifier">
      <MemberSignature Language="C#" Value="public void AddClassifier (Azure.Core.ResponseClassificationHandler classifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddClassifier(class Azure.Core.ResponseClassificationHandler classifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.RequestContext.AddClassifier(Azure.Core.ResponseClassificationHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddClassifier (classifier As ResponseClassificationHandler)" />
      <MemberSignature Language="F#" Value="member this.AddClassifier : Azure.Core.ResponseClassificationHandler -&gt; unit" Usage="requestContext.AddClassifier classifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core</AssemblyName>
        <AssemblyVersion>1.23.0.0</AssemblyVersion>
        <AssemblyVersion>1.24.0.0</AssemblyVersion>
        <AssemblyVersion>1.25.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classifier" Type="Azure.Core.ResponseClassificationHandler" />
      </Parameters>
      <Docs>
        <param name="classifier">The custom classifier.</param>
        <summary>
            Customizes the <see cref="T:Azure.Core.ResponseClassifier" /> for this operation.
            Adding a <see cref="T:Azure.Core.ResponseClassificationHandler" /> changes the classification
            behavior so that it first tries to classify a response via the handler, and if
            the handler doesn't have an opinion, it instead uses the default classifier.
            Handlers are applied in order so the most recently added takes precedence.
            This is useful for cases where you'd like to prevent specific response status codes from being treated as errors by
            logging and distributed tracing policies -- that is, if a response is not classified as an error, it will not appear as an error in
            logs or distributed traces.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">If this method is called after the <see cref="T:Azure.RequestContext" /> has been
            used in a method call.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddClassifier">
      <MemberSignature Language="C#" Value="public void AddClassifier (int statusCode, bool isError);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddClassifier(int32 statusCode, bool isError) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.RequestContext.AddClassifier(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddClassifier (statusCode As Integer, isError As Boolean)" />
      <MemberSignature Language="F#" Value="member this.AddClassifier : int * bool -&gt; unit" Usage="requestContext.AddClassifier (statusCode, isError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core</AssemblyName>
        <AssemblyVersion>1.23.0.0</AssemblyVersion>
        <AssemblyVersion>1.24.0.0</AssemblyVersion>
        <AssemblyVersion>1.25.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statusCode" Type="System.Int32" />
        <Parameter Name="isError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="statusCode">The status code to customize classification for.</param>
        <param name="isError">Whether the passed-in status code should be classified as an error.</param>
        <summary>
            Customizes the <see cref="T:Azure.Core.ResponseClassifier" /> for this operation to change
            the default <see cref="T:Azure.Response" /> classification behavior so that it considers
            the passed-in status code to be an error or not, as specified.
            Status code classifiers are applied after all <see cref="T:Azure.Core.ResponseClassificationHandler" /> classifiers.
            This is useful for cases where you'd like to prevent specific response status codes from being treated as errors by
            logging and distributed tracing policies -- that is, if a response is not classified as an error, it will not appear as an error in
            logs or distributed traces.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">statusCode is not between 100 and 599 (inclusive).</exception>
        <exception cref="T:System.InvalidOperationException">If this method is called after the <see cref="T:Azure.RequestContext" /> has been
            used in a method call.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddPolicy">
      <MemberSignature Language="C#" Value="public void AddPolicy (Azure.Core.Pipeline.HttpPipelinePolicy policy, Azure.Core.HttpPipelinePosition position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddPolicy(class Azure.Core.Pipeline.HttpPipelinePolicy policy, valuetype Azure.Core.HttpPipelinePosition position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.RequestContext.AddPolicy(Azure.Core.Pipeline.HttpPipelinePolicy,Azure.Core.HttpPipelinePosition)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddPolicy (policy As HttpPipelinePolicy, position As HttpPipelinePosition)" />
      <MemberSignature Language="F#" Value="member this.AddPolicy : Azure.Core.Pipeline.HttpPipelinePolicy * Azure.Core.HttpPipelinePosition -&gt; unit" Usage="requestContext.AddPolicy (policy, position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core</AssemblyName>
        <AssemblyVersion>1.22.0.0</AssemblyVersion>
        <AssemblyVersion>1.23.0.0</AssemblyVersion>
        <AssemblyVersion>1.24.0.0</AssemblyVersion>
        <AssemblyVersion>1.25.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="Azure.Core.Pipeline.HttpPipelinePolicy" />
        <Parameter Name="position" Type="Azure.Core.HttpPipelinePosition" />
      </Parameters>
      <Docs>
        <param name="policy">The <see cref="T:Azure.Core.Pipeline.HttpPipelinePolicy" /> instance to be added to the pipeline.</param>
        <param name="position">The position of the policy in the pipeline.</param>
        <summary>
            Adds an <see cref="T:Azure.Core.Pipeline.HttpPipelinePolicy" /> into the pipeline for the duration of this request.
            The position of policy in the pipeline is controlled by <paramref name="position" /> parameter.
            If you want the policy to execute once per client request use <see cref="F:Azure.Core.HttpPipelinePosition.PerCall" />
            otherwise use <see cref="F:Azure.Core.HttpPipelinePosition.PerRetry" /> to run the policy for every retry.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancellationToken">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationToken CancellationToken { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.CancellationToken CancellationToken" />
      <MemberSignature Language="DocId" Value="P:Azure.RequestContext.CancellationToken" />
      <MemberSignature Language="VB.NET" Value="Public Property CancellationToken As CancellationToken" />
      <MemberSignature Language="F#" Value="member this.CancellationToken : System.Threading.CancellationToken with get, set" Usage="Azure.RequestContext.CancellationToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core</AssemblyName>
        <AssemblyVersion>1.21.0.0</AssemblyVersion>
        <AssemblyVersion>1.22.0.0</AssemblyVersion>
        <AssemblyVersion>1.23.0.0</AssemblyVersion>
        <AssemblyVersion>1.24.0.0</AssemblyVersion>
        <AssemblyVersion>1.25.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The token to check for cancellation.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorOptions">
      <MemberSignature Language="C#" Value="public Azure.ErrorOptions ErrorOptions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Azure.ErrorOptions ErrorOptions" />
      <MemberSignature Language="DocId" Value="P:Azure.RequestContext.ErrorOptions" />
      <MemberSignature Language="VB.NET" Value="Public Property ErrorOptions As ErrorOptions" />
      <MemberSignature Language="F#" Value="member this.ErrorOptions : Azure.ErrorOptions with get, set" Usage="Azure.RequestContext.ErrorOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core</AssemblyName>
        <AssemblyVersion>1.21.0.0</AssemblyVersion>
        <AssemblyVersion>1.22.0.0</AssemblyVersion>
        <AssemblyVersion>1.23.0.0</AssemblyVersion>
        <AssemblyVersion>1.24.0.0</AssemblyVersion>
        <AssemblyVersion>1.25.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ErrorOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Controls under what conditions the operation raises an exception if the underlying response indicates a failure.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator Azure.RequestContext (Azure.ErrorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class Azure.RequestContext op_Implicit(valuetype Azure.ErrorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.RequestContext.op_Implicit(Azure.ErrorOptions)~Azure.RequestContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (options As ErrorOptions) As RequestContext" />
      <MemberSignature Language="F#" Value="static member op_Implicit : Azure.ErrorOptions -&gt; Azure.RequestContext" Usage="Azure.RequestContext.op_Implicit options" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core</AssemblyName>
        <AssemblyVersion>1.21.0.0</AssemblyVersion>
        <AssemblyVersion>1.22.0.0</AssemblyVersion>
        <AssemblyVersion>1.23.0.0</AssemblyVersion>
        <AssemblyVersion>1.24.0.0</AssemblyVersion>
        <AssemblyVersion>1.25.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.RequestContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.ErrorOptions" />
      </Parameters>
      <Docs>
        <param name="options" />
        <summary>
            Initializes a new instance of the <see cref="T:Azure.RequestContext" /> class using the given <see cref="P:Azure.RequestContext.ErrorOptions" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
