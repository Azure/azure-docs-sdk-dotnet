<Type Name="MockableSqlSubscriptionResource" FullName="Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource">
  <TypeSignature Language="C#" Value="public class MockableSqlSubscriptionResource : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MockableSqlSubscriptionResource extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource" />
  <TypeSignature Language="VB.NET" Value="Public Class MockableSqlSubscriptionResource&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type MockableSqlSubscriptionResource = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
    <AssemblyVersion>1.3.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> A class to add extension methods to SubscriptionResource. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MockableSqlSubscriptionResource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckSqlServerNameAvailability">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Sql.Models.SqlNameAvailabilityResponse&gt; CheckSqlServerNameAvailability (Azure.ResourceManager.Sql.Models.SqlNameAvailabilityContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Sql.Models.SqlNameAvailabilityResponse&gt; CheckSqlServerNameAvailability(class Azure.ResourceManager.Sql.Models.SqlNameAvailabilityContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.CheckSqlServerNameAvailability(Azure.ResourceManager.Sql.Models.SqlNameAvailabilityContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckSqlServerNameAvailability (content As SqlNameAvailabilityContent, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SqlNameAvailabilityResponse)" />
      <MemberSignature Language="F#" Value="abstract member CheckSqlServerNameAvailability : Azure.ResourceManager.Sql.Models.SqlNameAvailabilityContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.Models.SqlNameAvailabilityResponse&gt;&#xA;override this.CheckSqlServerNameAvailability : Azure.ResourceManager.Sql.Models.SqlNameAvailabilityContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.Models.SqlNameAvailabilityResponse&gt;" Usage="mockableSqlSubscriptionResource.CheckSqlServerNameAvailability (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Sql.Models.SqlNameAvailabilityResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.Sql.Models.SqlNameAvailabilityContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> The name availability request parameters. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Determines whether a resource can be created with the specified name.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Sql/checkNameAvailability</description></item><item><term>Operation Id</term><description>Servers_CheckNameAvailability</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CheckSqlServerNameAvailabilityAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.Models.SqlNameAvailabilityResponse&gt;&gt; CheckSqlServerNameAvailabilityAsync (Azure.ResourceManager.Sql.Models.SqlNameAvailabilityContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Sql.Models.SqlNameAvailabilityResponse&gt;&gt; CheckSqlServerNameAvailabilityAsync(class Azure.ResourceManager.Sql.Models.SqlNameAvailabilityContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.CheckSqlServerNameAvailabilityAsync(Azure.ResourceManager.Sql.Models.SqlNameAvailabilityContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckSqlServerNameAvailabilityAsync (content As SqlNameAvailabilityContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SqlNameAvailabilityResponse))" />
      <MemberSignature Language="F#" Value="abstract member CheckSqlServerNameAvailabilityAsync : Azure.ResourceManager.Sql.Models.SqlNameAvailabilityContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.Models.SqlNameAvailabilityResponse&gt;&gt;&#xA;override this.CheckSqlServerNameAvailabilityAsync : Azure.ResourceManager.Sql.Models.SqlNameAvailabilityContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.Models.SqlNameAvailabilityResponse&gt;&gt;" Usage="mockableSqlSubscriptionResource.CheckSqlServerNameAvailabilityAsync (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.Models.SqlNameAvailabilityResponse&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.Sql.Models.SqlNameAvailabilityContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> The name availability request parameters. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Determines whether a resource can be created with the specified name.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Sql/checkNameAvailability</description></item><item><term>Operation Id</term><description>Servers_CheckNameAvailability</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetCapabilitiesByLocation">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Sql.Models.SqlLocationCapabilities&gt; GetCapabilitiesByLocation (Azure.Core.AzureLocation locationName, Azure.ResourceManager.Sql.Models.SqlCapabilityGroup? include = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Sql.Models.SqlLocationCapabilities&gt; GetCapabilitiesByLocation(valuetype Azure.Core.AzureLocation locationName, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.Sql.Models.SqlCapabilityGroup&gt; include, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetCapabilitiesByLocation(Azure.Core.AzureLocation,System.Nullable{Azure.ResourceManager.Sql.Models.SqlCapabilityGroup},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCapabilitiesByLocation (locationName As AzureLocation, Optional include As Nullable(Of SqlCapabilityGroup) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SqlLocationCapabilities)" />
      <MemberSignature Language="F#" Value="abstract member GetCapabilitiesByLocation : Azure.Core.AzureLocation * Nullable&lt;Azure.ResourceManager.Sql.Models.SqlCapabilityGroup&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.Models.SqlLocationCapabilities&gt;&#xA;override this.GetCapabilitiesByLocation : Azure.Core.AzureLocation * Nullable&lt;Azure.ResourceManager.Sql.Models.SqlCapabilityGroup&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.Models.SqlLocationCapabilities&gt;" Usage="mockableSqlSubscriptionResource.GetCapabilitiesByLocation (locationName, include, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Sql.Models.SqlLocationCapabilities&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationName" Type="Azure.Core.AzureLocation" />
        <Parameter Name="include" Type="System.Nullable&lt;Azure.ResourceManager.Sql.Models.SqlCapabilityGroup&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="locationName"> The location name whose capabilities are retrieved. </param>
        <param name="include"> If specified, restricts the response to only include the selected item. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the subscription capabilities available for the specified location.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/capabilities</description></item><item><term>Operation Id</term><description>Capabilities_ListByLocation</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCapabilitiesByLocationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.Models.SqlLocationCapabilities&gt;&gt; GetCapabilitiesByLocationAsync (Azure.Core.AzureLocation locationName, Azure.ResourceManager.Sql.Models.SqlCapabilityGroup? include = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Sql.Models.SqlLocationCapabilities&gt;&gt; GetCapabilitiesByLocationAsync(valuetype Azure.Core.AzureLocation locationName, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.Sql.Models.SqlCapabilityGroup&gt; include, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetCapabilitiesByLocationAsync(Azure.Core.AzureLocation,System.Nullable{Azure.ResourceManager.Sql.Models.SqlCapabilityGroup},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCapabilitiesByLocationAsync (locationName As AzureLocation, Optional include As Nullable(Of SqlCapabilityGroup) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SqlLocationCapabilities))" />
      <MemberSignature Language="F#" Value="abstract member GetCapabilitiesByLocationAsync : Azure.Core.AzureLocation * Nullable&lt;Azure.ResourceManager.Sql.Models.SqlCapabilityGroup&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.Models.SqlLocationCapabilities&gt;&gt;&#xA;override this.GetCapabilitiesByLocationAsync : Azure.Core.AzureLocation * Nullable&lt;Azure.ResourceManager.Sql.Models.SqlCapabilityGroup&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.Models.SqlLocationCapabilities&gt;&gt;" Usage="mockableSqlSubscriptionResource.GetCapabilitiesByLocationAsync (locationName, include, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.Models.SqlLocationCapabilities&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationName" Type="Azure.Core.AzureLocation" />
        <Parameter Name="include" Type="System.Nullable&lt;Azure.ResourceManager.Sql.Models.SqlCapabilityGroup&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="locationName"> The location name whose capabilities are retrieved. </param>
        <param name="include"> If specified, restricts the response to only include the selected item. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the subscription capabilities available for the specified location.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/capabilities</description></item><item><term>Operation Id</term><description>Capabilities_ListByLocation</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeletedServer">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Sql.DeletedServerResource&gt; GetDeletedServer (Azure.Core.AzureLocation locationName, string deletedServerName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Sql.DeletedServerResource&gt; GetDeletedServer(valuetype Azure.Core.AzureLocation locationName, string deletedServerName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetDeletedServer(Azure.Core.AzureLocation,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDeletedServer (locationName As AzureLocation, deletedServerName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DeletedServerResource)" />
      <MemberSignature Language="F#" Value="abstract member GetDeletedServer : Azure.Core.AzureLocation * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.DeletedServerResource&gt;&#xA;override this.GetDeletedServer : Azure.Core.AzureLocation * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.DeletedServerResource&gt;" Usage="mockableSqlSubscriptionResource.GetDeletedServer (locationName, deletedServerName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Sql.DeletedServerResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationName" Type="Azure.Core.AzureLocation" />
        <Parameter Name="deletedServerName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="locationName"> The name of the region where the resource is located. </param>
        <param name="deletedServerName"> The name of the deleted server. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a deleted server.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/deletedServers/{deletedServerName}</description></item><item><term>Operation Id</term><description>DeletedServers_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="deletedServerName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="deletedServerName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDeletedServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.DeletedServerResource&gt;&gt; GetDeletedServerAsync (Azure.Core.AzureLocation locationName, string deletedServerName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Sql.DeletedServerResource&gt;&gt; GetDeletedServerAsync(valuetype Azure.Core.AzureLocation locationName, string deletedServerName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetDeletedServerAsync(Azure.Core.AzureLocation,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDeletedServerAsync (locationName As AzureLocation, deletedServerName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DeletedServerResource))" />
      <MemberSignature Language="F#" Value="abstract member GetDeletedServerAsync : Azure.Core.AzureLocation * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.DeletedServerResource&gt;&gt;&#xA;override this.GetDeletedServerAsync : Azure.Core.AzureLocation * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.DeletedServerResource&gt;&gt;" Usage="mockableSqlSubscriptionResource.GetDeletedServerAsync (locationName, deletedServerName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.DeletedServerResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationName" Type="Azure.Core.AzureLocation" />
        <Parameter Name="deletedServerName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="locationName"> The name of the region where the resource is located. </param>
        <param name="deletedServerName"> The name of the deleted server. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a deleted server.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/deletedServers/{deletedServerName}</description></item><item><term>Operation Id</term><description>DeletedServers_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="deletedServerName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="deletedServerName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDeletedServers">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Sql.DeletedServerCollection GetDeletedServers (Azure.Core.AzureLocation locationName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Sql.DeletedServerCollection GetDeletedServers(valuetype Azure.Core.AzureLocation locationName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetDeletedServers(Azure.Core.AzureLocation)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDeletedServers (locationName As AzureLocation) As DeletedServerCollection" />
      <MemberSignature Language="F#" Value="abstract member GetDeletedServers : Azure.Core.AzureLocation -&gt; Azure.ResourceManager.Sql.DeletedServerCollection&#xA;override this.GetDeletedServers : Azure.Core.AzureLocation -&gt; Azure.ResourceManager.Sql.DeletedServerCollection" Usage="mockableSqlSubscriptionResource.GetDeletedServers locationName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Sql.DeletedServerCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationName" Type="Azure.Core.AzureLocation" />
      </Parameters>
      <Docs>
        <param name="locationName"> The name of the region where the resource is located. </param>
        <summary> Gets a collection of DeletedServerResources in the SubscriptionResource. </summary>
        <returns> An object representing collection of DeletedServerResources and their operations over a DeletedServerResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeletedServers">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Sql.DeletedServerResource&gt; GetDeletedServers (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Sql.DeletedServerResource&gt; GetDeletedServers(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetDeletedServers(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDeletedServers (Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of DeletedServerResource)" />
      <MemberSignature Language="F#" Value="abstract member GetDeletedServers : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.DeletedServerResource&gt;&#xA;override this.GetDeletedServers : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.DeletedServerResource&gt;" Usage="mockableSqlSubscriptionResource.GetDeletedServers cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Sql.DeletedServerResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a list of all deleted servers in a subscription.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Sql/deletedServers</description></item><item><term>Operation Id</term><description>DeletedServers_List</description></item></list></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Sql.DeletedServerResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeletedServersAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.DeletedServerResource&gt; GetDeletedServersAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Sql.DeletedServerResource&gt; GetDeletedServersAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetDeletedServersAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDeletedServersAsync (Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of DeletedServerResource)" />
      <MemberSignature Language="F#" Value="abstract member GetDeletedServersAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.DeletedServerResource&gt;&#xA;override this.GetDeletedServersAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.DeletedServerResource&gt;" Usage="mockableSqlSubscriptionResource.GetDeletedServersAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.DeletedServerResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a list of all deleted servers in a subscription.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Sql/deletedServers</description></item><item><term>Operation Id</term><description>DeletedServers_List</description></item></list></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Sql.DeletedServerResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInstancePools">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Sql.InstancePoolResource&gt; GetInstancePools (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Sql.InstancePoolResource&gt; GetInstancePools(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetInstancePools(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetInstancePools (Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of InstancePoolResource)" />
      <MemberSignature Language="F#" Value="abstract member GetInstancePools : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.InstancePoolResource&gt;&#xA;override this.GetInstancePools : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.InstancePoolResource&gt;" Usage="mockableSqlSubscriptionResource.GetInstancePools cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Sql.InstancePoolResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a list of all instance pools in the subscription.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Sql/instancePools</description></item><item><term>Operation Id</term><description>InstancePools_List</description></item></list></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Sql.InstancePoolResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInstancePoolsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.InstancePoolResource&gt; GetInstancePoolsAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Sql.InstancePoolResource&gt; GetInstancePoolsAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetInstancePoolsAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetInstancePoolsAsync (Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of InstancePoolResource)" />
      <MemberSignature Language="F#" Value="abstract member GetInstancePoolsAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.InstancePoolResource&gt;&#xA;override this.GetInstancePoolsAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.InstancePoolResource&gt;" Usage="mockableSqlSubscriptionResource.GetInstancePoolsAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.InstancePoolResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a list of all instance pools in the subscription.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Sql/instancePools</description></item><item><term>Operation Id</term><description>InstancePools_List</description></item></list></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Sql.InstancePoolResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLongTermRetentionBackupsByLocation">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupResource&gt; GetLongTermRetentionBackupsByLocation (Azure.Core.AzureLocation locationName, bool? onlyLatestPerDatabase = default, Azure.ResourceManager.Sql.Models.SqlDatabaseState? databaseState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupResource&gt; GetLongTermRetentionBackupsByLocation(valuetype Azure.Core.AzureLocation locationName, valuetype System.Nullable`1&lt;bool&gt; onlyLatestPerDatabase, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; databaseState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetLongTermRetentionBackupsByLocation(Azure.Core.AzureLocation,System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.Sql.Models.SqlDatabaseState},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLongTermRetentionBackupsByLocation (locationName As AzureLocation, Optional onlyLatestPerDatabase As Nullable(Of Boolean) = Nothing, Optional databaseState As Nullable(Of SqlDatabaseState) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of SubscriptionLongTermRetentionBackupResource)" />
      <MemberSignature Language="F#" Value="abstract member GetLongTermRetentionBackupsByLocation : Azure.Core.AzureLocation * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupResource&gt;&#xA;override this.GetLongTermRetentionBackupsByLocation : Azure.Core.AzureLocation * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupResource&gt;" Usage="mockableSqlSubscriptionResource.GetLongTermRetentionBackupsByLocation (locationName, onlyLatestPerDatabase, databaseState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationName" Type="Azure.Core.AzureLocation" />
        <Parameter Name="onlyLatestPerDatabase" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="databaseState" Type="System.Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="locationName"> The location of the database. </param>
        <param name="onlyLatestPerDatabase"> Whether or not to only get the latest backup for each database. </param>
        <param name="databaseState"> Whether to query against just live databases, just deleted databases, or all databases. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists the long term retention backups for a given location.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionBackups
            Operation Id: LongTermRetentionBackups_ListByLocation
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLongTermRetentionBackupsByLocationAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupResource&gt; GetLongTermRetentionBackupsByLocationAsync (Azure.Core.AzureLocation locationName, bool? onlyLatestPerDatabase = default, Azure.ResourceManager.Sql.Models.SqlDatabaseState? databaseState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupResource&gt; GetLongTermRetentionBackupsByLocationAsync(valuetype Azure.Core.AzureLocation locationName, valuetype System.Nullable`1&lt;bool&gt; onlyLatestPerDatabase, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; databaseState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetLongTermRetentionBackupsByLocationAsync(Azure.Core.AzureLocation,System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.Sql.Models.SqlDatabaseState},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLongTermRetentionBackupsByLocationAsync (locationName As AzureLocation, Optional onlyLatestPerDatabase As Nullable(Of Boolean) = Nothing, Optional databaseState As Nullable(Of SqlDatabaseState) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of SubscriptionLongTermRetentionBackupResource)" />
      <MemberSignature Language="F#" Value="abstract member GetLongTermRetentionBackupsByLocationAsync : Azure.Core.AzureLocation * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupResource&gt;&#xA;override this.GetLongTermRetentionBackupsByLocationAsync : Azure.Core.AzureLocation * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupResource&gt;" Usage="mockableSqlSubscriptionResource.GetLongTermRetentionBackupsByLocationAsync (locationName, onlyLatestPerDatabase, databaseState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationName" Type="Azure.Core.AzureLocation" />
        <Parameter Name="onlyLatestPerDatabase" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="databaseState" Type="System.Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="locationName"> The location of the database. </param>
        <param name="onlyLatestPerDatabase"> Whether or not to only get the latest backup for each database. </param>
        <param name="databaseState"> Whether to query against just live databases, just deleted databases, or all databases. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists the long term retention backups for a given location.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionBackups
            Operation Id: LongTermRetentionBackups_ListByLocation
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLongTermRetentionBackupsByServer">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupResource&gt; GetLongTermRetentionBackupsByServer (Azure.Core.AzureLocation locationName, string longTermRetentionServerName, bool? onlyLatestPerDatabase = default, Azure.ResourceManager.Sql.Models.SqlDatabaseState? databaseState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupResource&gt; GetLongTermRetentionBackupsByServer(valuetype Azure.Core.AzureLocation locationName, string longTermRetentionServerName, valuetype System.Nullable`1&lt;bool&gt; onlyLatestPerDatabase, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; databaseState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetLongTermRetentionBackupsByServer(Azure.Core.AzureLocation,System.String,System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.Sql.Models.SqlDatabaseState},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLongTermRetentionBackupsByServer (locationName As AzureLocation, longTermRetentionServerName As String, Optional onlyLatestPerDatabase As Nullable(Of Boolean) = Nothing, Optional databaseState As Nullable(Of SqlDatabaseState) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of SubscriptionLongTermRetentionBackupResource)" />
      <MemberSignature Language="F#" Value="abstract member GetLongTermRetentionBackupsByServer : Azure.Core.AzureLocation * string * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupResource&gt;&#xA;override this.GetLongTermRetentionBackupsByServer : Azure.Core.AzureLocation * string * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupResource&gt;" Usage="mockableSqlSubscriptionResource.GetLongTermRetentionBackupsByServer (locationName, longTermRetentionServerName, onlyLatestPerDatabase, databaseState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationName" Type="Azure.Core.AzureLocation" />
        <Parameter Name="longTermRetentionServerName" Type="System.String" />
        <Parameter Name="onlyLatestPerDatabase" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="databaseState" Type="System.Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="locationName"> The location of the database. </param>
        <param name="longTermRetentionServerName"> The name of the server. </param>
        <param name="onlyLatestPerDatabase"> Whether or not to only get the latest backup for each database. </param>
        <param name="databaseState"> Whether to query against just live databases, just deleted databases, or all databases. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists the long term retention backups for a given server.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionBackups
            Operation Id: LongTermRetentionBackups_ListByServer
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLongTermRetentionBackupsByServerAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupResource&gt; GetLongTermRetentionBackupsByServerAsync (Azure.Core.AzureLocation locationName, string longTermRetentionServerName, bool? onlyLatestPerDatabase = default, Azure.ResourceManager.Sql.Models.SqlDatabaseState? databaseState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupResource&gt; GetLongTermRetentionBackupsByServerAsync(valuetype Azure.Core.AzureLocation locationName, string longTermRetentionServerName, valuetype System.Nullable`1&lt;bool&gt; onlyLatestPerDatabase, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; databaseState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetLongTermRetentionBackupsByServerAsync(Azure.Core.AzureLocation,System.String,System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.Sql.Models.SqlDatabaseState},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLongTermRetentionBackupsByServerAsync (locationName As AzureLocation, longTermRetentionServerName As String, Optional onlyLatestPerDatabase As Nullable(Of Boolean) = Nothing, Optional databaseState As Nullable(Of SqlDatabaseState) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of SubscriptionLongTermRetentionBackupResource)" />
      <MemberSignature Language="F#" Value="abstract member GetLongTermRetentionBackupsByServerAsync : Azure.Core.AzureLocation * string * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupResource&gt;&#xA;override this.GetLongTermRetentionBackupsByServerAsync : Azure.Core.AzureLocation * string * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupResource&gt;" Usage="mockableSqlSubscriptionResource.GetLongTermRetentionBackupsByServerAsync (locationName, longTermRetentionServerName, onlyLatestPerDatabase, databaseState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationName" Type="Azure.Core.AzureLocation" />
        <Parameter Name="longTermRetentionServerName" Type="System.String" />
        <Parameter Name="onlyLatestPerDatabase" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="databaseState" Type="System.Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="locationName"> The location of the database. </param>
        <param name="longTermRetentionServerName"> The name of the server. </param>
        <param name="onlyLatestPerDatabase"> Whether or not to only get the latest backup for each database. </param>
        <param name="databaseState"> Whether to query against just live databases, just deleted databases, or all databases. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists the long term retention backups for a given server.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionBackups
            Operation Id: LongTermRetentionBackups_ListByServer
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLongTermRetentionBackupsWithLocation">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Sql.LongTermRetentionBackupData&gt; GetLongTermRetentionBackupsWithLocation (Azure.Core.AzureLocation locationName, bool? onlyLatestPerDatabase = default, Azure.ResourceManager.Sql.Models.SqlDatabaseState? databaseState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Sql.LongTermRetentionBackupData&gt; GetLongTermRetentionBackupsWithLocation(valuetype Azure.Core.AzureLocation locationName, valuetype System.Nullable`1&lt;bool&gt; onlyLatestPerDatabase, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; databaseState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetLongTermRetentionBackupsWithLocation(Azure.Core.AzureLocation,System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.Sql.Models.SqlDatabaseState},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLongTermRetentionBackupsWithLocation (locationName As AzureLocation, Optional onlyLatestPerDatabase As Nullable(Of Boolean) = Nothing, Optional databaseState As Nullable(Of SqlDatabaseState) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of LongTermRetentionBackupData)" />
      <MemberSignature Language="F#" Value="abstract member GetLongTermRetentionBackupsWithLocation : Azure.Core.AzureLocation * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.LongTermRetentionBackupData&gt;&#xA;override this.GetLongTermRetentionBackupsWithLocation : Azure.Core.AzureLocation * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.LongTermRetentionBackupData&gt;" Usage="mockableSqlSubscriptionResource.GetLongTermRetentionBackupsWithLocation (locationName, onlyLatestPerDatabase, databaseState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Sql.LongTermRetentionBackupData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationName" Type="Azure.Core.AzureLocation" />
        <Parameter Name="onlyLatestPerDatabase" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="databaseState" Type="System.Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="locationName"> The location of the database. </param>
        <param name="onlyLatestPerDatabase"> Whether or not to only get the latest backup for each database. </param>
        <param name="databaseState"> Whether to query against just live databases, just deleted databases, or all databases. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists the long term retention backups for a given location.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionBackups</description></item><item><term>Operation Id</term><description>LongTermRetentionBackups_ListByLocation</description></item></list></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Sql.LongTermRetentionBackupData" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLongTermRetentionBackupsWithLocationAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.LongTermRetentionBackupData&gt; GetLongTermRetentionBackupsWithLocationAsync (Azure.Core.AzureLocation locationName, bool? onlyLatestPerDatabase = default, Azure.ResourceManager.Sql.Models.SqlDatabaseState? databaseState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Sql.LongTermRetentionBackupData&gt; GetLongTermRetentionBackupsWithLocationAsync(valuetype Azure.Core.AzureLocation locationName, valuetype System.Nullable`1&lt;bool&gt; onlyLatestPerDatabase, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; databaseState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetLongTermRetentionBackupsWithLocationAsync(Azure.Core.AzureLocation,System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.Sql.Models.SqlDatabaseState},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLongTermRetentionBackupsWithLocationAsync (locationName As AzureLocation, Optional onlyLatestPerDatabase As Nullable(Of Boolean) = Nothing, Optional databaseState As Nullable(Of SqlDatabaseState) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of LongTermRetentionBackupData)" />
      <MemberSignature Language="F#" Value="abstract member GetLongTermRetentionBackupsWithLocationAsync : Azure.Core.AzureLocation * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.LongTermRetentionBackupData&gt;&#xA;override this.GetLongTermRetentionBackupsWithLocationAsync : Azure.Core.AzureLocation * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.LongTermRetentionBackupData&gt;" Usage="mockableSqlSubscriptionResource.GetLongTermRetentionBackupsWithLocationAsync (locationName, onlyLatestPerDatabase, databaseState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.LongTermRetentionBackupData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationName" Type="Azure.Core.AzureLocation" />
        <Parameter Name="onlyLatestPerDatabase" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="databaseState" Type="System.Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="locationName"> The location of the database. </param>
        <param name="onlyLatestPerDatabase"> Whether or not to only get the latest backup for each database. </param>
        <param name="databaseState"> Whether to query against just live databases, just deleted databases, or all databases. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists the long term retention backups for a given location.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionBackups</description></item><item><term>Operation Id</term><description>LongTermRetentionBackups_ListByLocation</description></item></list></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Sql.LongTermRetentionBackupData" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLongTermRetentionBackupsWithServer">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Sql.LongTermRetentionBackupData&gt; GetLongTermRetentionBackupsWithServer (Azure.Core.AzureLocation locationName, string longTermRetentionServerName, bool? onlyLatestPerDatabase = default, Azure.ResourceManager.Sql.Models.SqlDatabaseState? databaseState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Sql.LongTermRetentionBackupData&gt; GetLongTermRetentionBackupsWithServer(valuetype Azure.Core.AzureLocation locationName, string longTermRetentionServerName, valuetype System.Nullable`1&lt;bool&gt; onlyLatestPerDatabase, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; databaseState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetLongTermRetentionBackupsWithServer(Azure.Core.AzureLocation,System.String,System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.Sql.Models.SqlDatabaseState},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLongTermRetentionBackupsWithServer (locationName As AzureLocation, longTermRetentionServerName As String, Optional onlyLatestPerDatabase As Nullable(Of Boolean) = Nothing, Optional databaseState As Nullable(Of SqlDatabaseState) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of LongTermRetentionBackupData)" />
      <MemberSignature Language="F#" Value="abstract member GetLongTermRetentionBackupsWithServer : Azure.Core.AzureLocation * string * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.LongTermRetentionBackupData&gt;&#xA;override this.GetLongTermRetentionBackupsWithServer : Azure.Core.AzureLocation * string * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.LongTermRetentionBackupData&gt;" Usage="mockableSqlSubscriptionResource.GetLongTermRetentionBackupsWithServer (locationName, longTermRetentionServerName, onlyLatestPerDatabase, databaseState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Sql.LongTermRetentionBackupData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationName" Type="Azure.Core.AzureLocation" />
        <Parameter Name="longTermRetentionServerName" Type="System.String" />
        <Parameter Name="onlyLatestPerDatabase" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="databaseState" Type="System.Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="locationName"> The location of the database. </param>
        <param name="longTermRetentionServerName"> The name of the server. </param>
        <param name="onlyLatestPerDatabase"> Whether or not to only get the latest backup for each database. </param>
        <param name="databaseState"> Whether to query against just live databases, just deleted databases, or all databases. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists the long term retention backups for a given server.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionBackups</description></item><item><term>Operation Id</term><description>LongTermRetentionBackups_ListByServer</description></item></list></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Sql.LongTermRetentionBackupData" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="longTermRetentionServerName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="longTermRetentionServerName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetLongTermRetentionBackupsWithServerAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.LongTermRetentionBackupData&gt; GetLongTermRetentionBackupsWithServerAsync (Azure.Core.AzureLocation locationName, string longTermRetentionServerName, bool? onlyLatestPerDatabase = default, Azure.ResourceManager.Sql.Models.SqlDatabaseState? databaseState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Sql.LongTermRetentionBackupData&gt; GetLongTermRetentionBackupsWithServerAsync(valuetype Azure.Core.AzureLocation locationName, string longTermRetentionServerName, valuetype System.Nullable`1&lt;bool&gt; onlyLatestPerDatabase, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; databaseState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetLongTermRetentionBackupsWithServerAsync(Azure.Core.AzureLocation,System.String,System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.Sql.Models.SqlDatabaseState},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLongTermRetentionBackupsWithServerAsync (locationName As AzureLocation, longTermRetentionServerName As String, Optional onlyLatestPerDatabase As Nullable(Of Boolean) = Nothing, Optional databaseState As Nullable(Of SqlDatabaseState) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of LongTermRetentionBackupData)" />
      <MemberSignature Language="F#" Value="abstract member GetLongTermRetentionBackupsWithServerAsync : Azure.Core.AzureLocation * string * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.LongTermRetentionBackupData&gt;&#xA;override this.GetLongTermRetentionBackupsWithServerAsync : Azure.Core.AzureLocation * string * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.LongTermRetentionBackupData&gt;" Usage="mockableSqlSubscriptionResource.GetLongTermRetentionBackupsWithServerAsync (locationName, longTermRetentionServerName, onlyLatestPerDatabase, databaseState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.LongTermRetentionBackupData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationName" Type="Azure.Core.AzureLocation" />
        <Parameter Name="longTermRetentionServerName" Type="System.String" />
        <Parameter Name="onlyLatestPerDatabase" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="databaseState" Type="System.Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="locationName"> The location of the database. </param>
        <param name="longTermRetentionServerName"> The name of the server. </param>
        <param name="onlyLatestPerDatabase"> Whether or not to only get the latest backup for each database. </param>
        <param name="databaseState"> Whether to query against just live databases, just deleted databases, or all databases. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists the long term retention backups for a given server.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionBackups</description></item><item><term>Operation Id</term><description>LongTermRetentionBackups_ListByServer</description></item></list></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Sql.LongTermRetentionBackupData" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="longTermRetentionServerName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="longTermRetentionServerName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetLongTermRetentionManagedInstanceBackupsByInstance">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupResource&gt; GetLongTermRetentionManagedInstanceBackupsByInstance (Azure.Core.AzureLocation locationName, string managedInstanceName, bool? onlyLatestPerDatabase = default, Azure.ResourceManager.Sql.Models.SqlDatabaseState? databaseState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupResource&gt; GetLongTermRetentionManagedInstanceBackupsByInstance(valuetype Azure.Core.AzureLocation locationName, string managedInstanceName, valuetype System.Nullable`1&lt;bool&gt; onlyLatestPerDatabase, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; databaseState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetLongTermRetentionManagedInstanceBackupsByInstance(Azure.Core.AzureLocation,System.String,System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.Sql.Models.SqlDatabaseState},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLongTermRetentionManagedInstanceBackupsByInstance (locationName As AzureLocation, managedInstanceName As String, Optional onlyLatestPerDatabase As Nullable(Of Boolean) = Nothing, Optional databaseState As Nullable(Of SqlDatabaseState) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of SubscriptionLongTermRetentionManagedInstanceBackupResource)" />
      <MemberSignature Language="F#" Value="abstract member GetLongTermRetentionManagedInstanceBackupsByInstance : Azure.Core.AzureLocation * string * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupResource&gt;&#xA;override this.GetLongTermRetentionManagedInstanceBackupsByInstance : Azure.Core.AzureLocation * string * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupResource&gt;" Usage="mockableSqlSubscriptionResource.GetLongTermRetentionManagedInstanceBackupsByInstance (locationName, managedInstanceName, onlyLatestPerDatabase, databaseState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationName" Type="Azure.Core.AzureLocation" />
        <Parameter Name="managedInstanceName" Type="System.String" />
        <Parameter Name="onlyLatestPerDatabase" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="databaseState" Type="System.Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="locationName"> The location of the database. </param>
        <param name="managedInstanceName"> The name of the managed instance. </param>
        <param name="onlyLatestPerDatabase"> Whether or not to only get the latest backup for each database. </param>
        <param name="databaseState"> Whether to query against just live databases, just deleted databases, or all databases. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists the long term retention backups for a given managed instance.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstances/{managedInstanceName}/longTermRetentionManagedInstanceBackups
            Operation Id: LongTermRetentionManagedInstanceBackups_ListByInstance
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLongTermRetentionManagedInstanceBackupsByInstanceAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupResource&gt; GetLongTermRetentionManagedInstanceBackupsByInstanceAsync (Azure.Core.AzureLocation locationName, string managedInstanceName, bool? onlyLatestPerDatabase = default, Azure.ResourceManager.Sql.Models.SqlDatabaseState? databaseState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupResource&gt; GetLongTermRetentionManagedInstanceBackupsByInstanceAsync(valuetype Azure.Core.AzureLocation locationName, string managedInstanceName, valuetype System.Nullable`1&lt;bool&gt; onlyLatestPerDatabase, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; databaseState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetLongTermRetentionManagedInstanceBackupsByInstanceAsync(Azure.Core.AzureLocation,System.String,System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.Sql.Models.SqlDatabaseState},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLongTermRetentionManagedInstanceBackupsByInstanceAsync (locationName As AzureLocation, managedInstanceName As String, Optional onlyLatestPerDatabase As Nullable(Of Boolean) = Nothing, Optional databaseState As Nullable(Of SqlDatabaseState) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of SubscriptionLongTermRetentionManagedInstanceBackupResource)" />
      <MemberSignature Language="F#" Value="abstract member GetLongTermRetentionManagedInstanceBackupsByInstanceAsync : Azure.Core.AzureLocation * string * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupResource&gt;&#xA;override this.GetLongTermRetentionManagedInstanceBackupsByInstanceAsync : Azure.Core.AzureLocation * string * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupResource&gt;" Usage="mockableSqlSubscriptionResource.GetLongTermRetentionManagedInstanceBackupsByInstanceAsync (locationName, managedInstanceName, onlyLatestPerDatabase, databaseState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationName" Type="Azure.Core.AzureLocation" />
        <Parameter Name="managedInstanceName" Type="System.String" />
        <Parameter Name="onlyLatestPerDatabase" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="databaseState" Type="System.Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="locationName"> The location of the database. </param>
        <param name="managedInstanceName"> The name of the managed instance. </param>
        <param name="onlyLatestPerDatabase"> Whether or not to only get the latest backup for each database. </param>
        <param name="databaseState"> Whether to query against just live databases, just deleted databases, or all databases. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists the long term retention backups for a given managed instance.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstances/{managedInstanceName}/longTermRetentionManagedInstanceBackups
            Operation Id: LongTermRetentionManagedInstanceBackups_ListByInstance
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLongTermRetentionManagedInstanceBackupsByLocation">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupResource&gt; GetLongTermRetentionManagedInstanceBackupsByLocation (Azure.Core.AzureLocation locationName, bool? onlyLatestPerDatabase = default, Azure.ResourceManager.Sql.Models.SqlDatabaseState? databaseState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupResource&gt; GetLongTermRetentionManagedInstanceBackupsByLocation(valuetype Azure.Core.AzureLocation locationName, valuetype System.Nullable`1&lt;bool&gt; onlyLatestPerDatabase, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; databaseState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetLongTermRetentionManagedInstanceBackupsByLocation(Azure.Core.AzureLocation,System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.Sql.Models.SqlDatabaseState},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLongTermRetentionManagedInstanceBackupsByLocation (locationName As AzureLocation, Optional onlyLatestPerDatabase As Nullable(Of Boolean) = Nothing, Optional databaseState As Nullable(Of SqlDatabaseState) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of SubscriptionLongTermRetentionManagedInstanceBackupResource)" />
      <MemberSignature Language="F#" Value="abstract member GetLongTermRetentionManagedInstanceBackupsByLocation : Azure.Core.AzureLocation * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupResource&gt;&#xA;override this.GetLongTermRetentionManagedInstanceBackupsByLocation : Azure.Core.AzureLocation * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupResource&gt;" Usage="mockableSqlSubscriptionResource.GetLongTermRetentionManagedInstanceBackupsByLocation (locationName, onlyLatestPerDatabase, databaseState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationName" Type="Azure.Core.AzureLocation" />
        <Parameter Name="onlyLatestPerDatabase" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="databaseState" Type="System.Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="locationName"> The location of the database. </param>
        <param name="onlyLatestPerDatabase"> Whether or not to only get the latest backup for each database. </param>
        <param name="databaseState"> Whether to query against just live databases, just deleted databases, or all databases. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists the long term retention backups for managed databases in a given location.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstanceBackups
            Operation Id: LongTermRetentionManagedInstanceBackups_ListByLocation
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLongTermRetentionManagedInstanceBackupsByLocationAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupResource&gt; GetLongTermRetentionManagedInstanceBackupsByLocationAsync (Azure.Core.AzureLocation locationName, bool? onlyLatestPerDatabase = default, Azure.ResourceManager.Sql.Models.SqlDatabaseState? databaseState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupResource&gt; GetLongTermRetentionManagedInstanceBackupsByLocationAsync(valuetype Azure.Core.AzureLocation locationName, valuetype System.Nullable`1&lt;bool&gt; onlyLatestPerDatabase, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; databaseState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetLongTermRetentionManagedInstanceBackupsByLocationAsync(Azure.Core.AzureLocation,System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.Sql.Models.SqlDatabaseState},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLongTermRetentionManagedInstanceBackupsByLocationAsync (locationName As AzureLocation, Optional onlyLatestPerDatabase As Nullable(Of Boolean) = Nothing, Optional databaseState As Nullable(Of SqlDatabaseState) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of SubscriptionLongTermRetentionManagedInstanceBackupResource)" />
      <MemberSignature Language="F#" Value="abstract member GetLongTermRetentionManagedInstanceBackupsByLocationAsync : Azure.Core.AzureLocation * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupResource&gt;&#xA;override this.GetLongTermRetentionManagedInstanceBackupsByLocationAsync : Azure.Core.AzureLocation * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupResource&gt;" Usage="mockableSqlSubscriptionResource.GetLongTermRetentionManagedInstanceBackupsByLocationAsync (locationName, onlyLatestPerDatabase, databaseState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationName" Type="Azure.Core.AzureLocation" />
        <Parameter Name="onlyLatestPerDatabase" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="databaseState" Type="System.Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="locationName"> The location of the database. </param>
        <param name="onlyLatestPerDatabase"> Whether or not to only get the latest backup for each database. </param>
        <param name="databaseState"> Whether to query against just live databases, just deleted databases, or all databases. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists the long term retention backups for managed databases in a given location.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstanceBackups
            Operation Id: LongTermRetentionManagedInstanceBackups_ListByLocation
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLongTermRetentionManagedInstanceBackupsWithInstance">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Sql.ManagedInstanceLongTermRetentionBackupData&gt; GetLongTermRetentionManagedInstanceBackupsWithInstance (Azure.Core.AzureLocation locationName, string managedInstanceName, bool? onlyLatestPerDatabase = default, Azure.ResourceManager.Sql.Models.SqlDatabaseState? databaseState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Sql.ManagedInstanceLongTermRetentionBackupData&gt; GetLongTermRetentionManagedInstanceBackupsWithInstance(valuetype Azure.Core.AzureLocation locationName, string managedInstanceName, valuetype System.Nullable`1&lt;bool&gt; onlyLatestPerDatabase, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; databaseState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetLongTermRetentionManagedInstanceBackupsWithInstance(Azure.Core.AzureLocation,System.String,System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.Sql.Models.SqlDatabaseState},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLongTermRetentionManagedInstanceBackupsWithInstance (locationName As AzureLocation, managedInstanceName As String, Optional onlyLatestPerDatabase As Nullable(Of Boolean) = Nothing, Optional databaseState As Nullable(Of SqlDatabaseState) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of ManagedInstanceLongTermRetentionBackupData)" />
      <MemberSignature Language="F#" Value="abstract member GetLongTermRetentionManagedInstanceBackupsWithInstance : Azure.Core.AzureLocation * string * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.ManagedInstanceLongTermRetentionBackupData&gt;&#xA;override this.GetLongTermRetentionManagedInstanceBackupsWithInstance : Azure.Core.AzureLocation * string * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.ManagedInstanceLongTermRetentionBackupData&gt;" Usage="mockableSqlSubscriptionResource.GetLongTermRetentionManagedInstanceBackupsWithInstance (locationName, managedInstanceName, onlyLatestPerDatabase, databaseState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Sql.ManagedInstanceLongTermRetentionBackupData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationName" Type="Azure.Core.AzureLocation" />
        <Parameter Name="managedInstanceName" Type="System.String" />
        <Parameter Name="onlyLatestPerDatabase" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="databaseState" Type="System.Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="locationName"> The location of the database. </param>
        <param name="managedInstanceName"> The name of the managed instance. </param>
        <param name="onlyLatestPerDatabase"> Whether or not to only get the latest backup for each database. </param>
        <param name="databaseState"> Whether to query against just live databases, just deleted databases, or all databases. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists the long term retention backups for a given managed instance.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstances/{managedInstanceName}/longTermRetentionManagedInstanceBackups</description></item><item><term>Operation Id</term><description>LongTermRetentionManagedInstanceBackups_ListByInstance</description></item></list></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Sql.ManagedInstanceLongTermRetentionBackupData" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="managedInstanceName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="managedInstanceName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetLongTermRetentionManagedInstanceBackupsWithInstanceAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.ManagedInstanceLongTermRetentionBackupData&gt; GetLongTermRetentionManagedInstanceBackupsWithInstanceAsync (Azure.Core.AzureLocation locationName, string managedInstanceName, bool? onlyLatestPerDatabase = default, Azure.ResourceManager.Sql.Models.SqlDatabaseState? databaseState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Sql.ManagedInstanceLongTermRetentionBackupData&gt; GetLongTermRetentionManagedInstanceBackupsWithInstanceAsync(valuetype Azure.Core.AzureLocation locationName, string managedInstanceName, valuetype System.Nullable`1&lt;bool&gt; onlyLatestPerDatabase, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; databaseState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetLongTermRetentionManagedInstanceBackupsWithInstanceAsync(Azure.Core.AzureLocation,System.String,System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.Sql.Models.SqlDatabaseState},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLongTermRetentionManagedInstanceBackupsWithInstanceAsync (locationName As AzureLocation, managedInstanceName As String, Optional onlyLatestPerDatabase As Nullable(Of Boolean) = Nothing, Optional databaseState As Nullable(Of SqlDatabaseState) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of ManagedInstanceLongTermRetentionBackupData)" />
      <MemberSignature Language="F#" Value="abstract member GetLongTermRetentionManagedInstanceBackupsWithInstanceAsync : Azure.Core.AzureLocation * string * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.ManagedInstanceLongTermRetentionBackupData&gt;&#xA;override this.GetLongTermRetentionManagedInstanceBackupsWithInstanceAsync : Azure.Core.AzureLocation * string * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.ManagedInstanceLongTermRetentionBackupData&gt;" Usage="mockableSqlSubscriptionResource.GetLongTermRetentionManagedInstanceBackupsWithInstanceAsync (locationName, managedInstanceName, onlyLatestPerDatabase, databaseState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.ManagedInstanceLongTermRetentionBackupData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationName" Type="Azure.Core.AzureLocation" />
        <Parameter Name="managedInstanceName" Type="System.String" />
        <Parameter Name="onlyLatestPerDatabase" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="databaseState" Type="System.Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="locationName"> The location of the database. </param>
        <param name="managedInstanceName"> The name of the managed instance. </param>
        <param name="onlyLatestPerDatabase"> Whether or not to only get the latest backup for each database. </param>
        <param name="databaseState"> Whether to query against just live databases, just deleted databases, or all databases. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists the long term retention backups for a given managed instance.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstances/{managedInstanceName}/longTermRetentionManagedInstanceBackups</description></item><item><term>Operation Id</term><description>LongTermRetentionManagedInstanceBackups_ListByInstance</description></item></list></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Sql.ManagedInstanceLongTermRetentionBackupData" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="managedInstanceName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="managedInstanceName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetLongTermRetentionManagedInstanceBackupsWithLocation">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Sql.ManagedInstanceLongTermRetentionBackupData&gt; GetLongTermRetentionManagedInstanceBackupsWithLocation (Azure.Core.AzureLocation locationName, bool? onlyLatestPerDatabase = default, Azure.ResourceManager.Sql.Models.SqlDatabaseState? databaseState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Sql.ManagedInstanceLongTermRetentionBackupData&gt; GetLongTermRetentionManagedInstanceBackupsWithLocation(valuetype Azure.Core.AzureLocation locationName, valuetype System.Nullable`1&lt;bool&gt; onlyLatestPerDatabase, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; databaseState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetLongTermRetentionManagedInstanceBackupsWithLocation(Azure.Core.AzureLocation,System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.Sql.Models.SqlDatabaseState},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLongTermRetentionManagedInstanceBackupsWithLocation (locationName As AzureLocation, Optional onlyLatestPerDatabase As Nullable(Of Boolean) = Nothing, Optional databaseState As Nullable(Of SqlDatabaseState) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of ManagedInstanceLongTermRetentionBackupData)" />
      <MemberSignature Language="F#" Value="abstract member GetLongTermRetentionManagedInstanceBackupsWithLocation : Azure.Core.AzureLocation * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.ManagedInstanceLongTermRetentionBackupData&gt;&#xA;override this.GetLongTermRetentionManagedInstanceBackupsWithLocation : Azure.Core.AzureLocation * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.ManagedInstanceLongTermRetentionBackupData&gt;" Usage="mockableSqlSubscriptionResource.GetLongTermRetentionManagedInstanceBackupsWithLocation (locationName, onlyLatestPerDatabase, databaseState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Sql.ManagedInstanceLongTermRetentionBackupData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationName" Type="Azure.Core.AzureLocation" />
        <Parameter Name="onlyLatestPerDatabase" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="databaseState" Type="System.Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="locationName"> The location of the database. </param>
        <param name="onlyLatestPerDatabase"> Whether or not to only get the latest backup for each database. </param>
        <param name="databaseState"> Whether to query against just live databases, just deleted databases, or all databases. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists the long term retention backups for managed databases in a given location.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstanceBackups</description></item><item><term>Operation Id</term><description>LongTermRetentionManagedInstanceBackups_ListByLocation</description></item></list></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Sql.ManagedInstanceLongTermRetentionBackupData" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLongTermRetentionManagedInstanceBackupsWithLocationAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.ManagedInstanceLongTermRetentionBackupData&gt; GetLongTermRetentionManagedInstanceBackupsWithLocationAsync (Azure.Core.AzureLocation locationName, bool? onlyLatestPerDatabase = default, Azure.ResourceManager.Sql.Models.SqlDatabaseState? databaseState = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Sql.ManagedInstanceLongTermRetentionBackupData&gt; GetLongTermRetentionManagedInstanceBackupsWithLocationAsync(valuetype Azure.Core.AzureLocation locationName, valuetype System.Nullable`1&lt;bool&gt; onlyLatestPerDatabase, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; databaseState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetLongTermRetentionManagedInstanceBackupsWithLocationAsync(Azure.Core.AzureLocation,System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.Sql.Models.SqlDatabaseState},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLongTermRetentionManagedInstanceBackupsWithLocationAsync (locationName As AzureLocation, Optional onlyLatestPerDatabase As Nullable(Of Boolean) = Nothing, Optional databaseState As Nullable(Of SqlDatabaseState) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of ManagedInstanceLongTermRetentionBackupData)" />
      <MemberSignature Language="F#" Value="abstract member GetLongTermRetentionManagedInstanceBackupsWithLocationAsync : Azure.Core.AzureLocation * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.ManagedInstanceLongTermRetentionBackupData&gt;&#xA;override this.GetLongTermRetentionManagedInstanceBackupsWithLocationAsync : Azure.Core.AzureLocation * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.ManagedInstanceLongTermRetentionBackupData&gt;" Usage="mockableSqlSubscriptionResource.GetLongTermRetentionManagedInstanceBackupsWithLocationAsync (locationName, onlyLatestPerDatabase, databaseState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.ManagedInstanceLongTermRetentionBackupData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationName" Type="Azure.Core.AzureLocation" />
        <Parameter Name="onlyLatestPerDatabase" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="databaseState" Type="System.Nullable&lt;Azure.ResourceManager.Sql.Models.SqlDatabaseState&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="locationName"> The location of the database. </param>
        <param name="onlyLatestPerDatabase"> Whether or not to only get the latest backup for each database. </param>
        <param name="databaseState"> Whether to query against just live databases, just deleted databases, or all databases. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists the long term retention backups for managed databases in a given location.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstanceBackups</description></item><item><term>Operation Id</term><description>LongTermRetentionManagedInstanceBackups_ListByLocation</description></item></list></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Sql.ManagedInstanceLongTermRetentionBackupData" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetManagedInstances">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Sql.ManagedInstanceResource&gt; GetManagedInstances (string expand = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Sql.ManagedInstanceResource&gt; GetManagedInstances(string expand, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetManagedInstances(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetManagedInstances (Optional expand As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of ManagedInstanceResource)" />
      <MemberSignature Language="F#" Value="abstract member GetManagedInstances : string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.ManagedInstanceResource&gt;&#xA;override this.GetManagedInstances : string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.ManagedInstanceResource&gt;" Usage="mockableSqlSubscriptionResource.GetManagedInstances (expand, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Sql.ManagedInstanceResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expand" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="expand"> The child resources to include in the response. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a list of all managed instances in the subscription.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Sql/managedInstances</description></item><item><term>Operation Id</term><description>ManagedInstances_List</description></item></list></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Sql.ManagedInstanceResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetManagedInstancesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.ManagedInstanceResource&gt; GetManagedInstancesAsync (string expand = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Sql.ManagedInstanceResource&gt; GetManagedInstancesAsync(string expand, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetManagedInstancesAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetManagedInstancesAsync (Optional expand As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of ManagedInstanceResource)" />
      <MemberSignature Language="F#" Value="abstract member GetManagedInstancesAsync : string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.ManagedInstanceResource&gt;&#xA;override this.GetManagedInstancesAsync : string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.ManagedInstanceResource&gt;" Usage="mockableSqlSubscriptionResource.GetManagedInstancesAsync (expand, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.ManagedInstanceResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expand" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="expand"> The child resources to include in the response. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a list of all managed instances in the subscription.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Sql/managedInstances</description></item><item><term>Operation Id</term><description>ManagedInstances_List</description></item></list></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Sql.ManagedInstanceResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlServers">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Sql.SqlServerResource&gt; GetSqlServers (string expand = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Sql.SqlServerResource&gt; GetSqlServers(string expand, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetSqlServers(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlServers (Optional expand As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of SqlServerResource)" />
      <MemberSignature Language="F#" Value="abstract member GetSqlServers : string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.SqlServerResource&gt;&#xA;override this.GetSqlServers : string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.SqlServerResource&gt;" Usage="mockableSqlSubscriptionResource.GetSqlServers (expand, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Sql.SqlServerResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expand" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="expand"> The child resources to include in the response. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a list of all servers in the subscription.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Sql/servers</description></item><item><term>Operation Id</term><description>Servers_List</description></item></list></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Sql.SqlServerResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlServersAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SqlServerResource&gt; GetSqlServersAsync (string expand = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Sql.SqlServerResource&gt; GetSqlServersAsync(string expand, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetSqlServersAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlServersAsync (Optional expand As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of SqlServerResource)" />
      <MemberSignature Language="F#" Value="abstract member GetSqlServersAsync : string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SqlServerResource&gt;&#xA;override this.GetSqlServersAsync : string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SqlServerResource&gt;" Usage="mockableSqlSubscriptionResource.GetSqlServersAsync (expand, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SqlServerResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expand" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="expand"> The child resources to include in the response. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a list of all servers in the subscription.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Sql/servers</description></item><item><term>Operation Id</term><description>Servers_List</description></item></list></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Sql.SqlServerResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlTimeZone">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Sql.SqlTimeZoneResource&gt; GetSqlTimeZone (Azure.Core.AzureLocation locationName, string timeZoneId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Sql.SqlTimeZoneResource&gt; GetSqlTimeZone(valuetype Azure.Core.AzureLocation locationName, string timeZoneId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetSqlTimeZone(Azure.Core.AzureLocation,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlTimeZone (locationName As AzureLocation, timeZoneId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SqlTimeZoneResource)" />
      <MemberSignature Language="F#" Value="abstract member GetSqlTimeZone : Azure.Core.AzureLocation * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.SqlTimeZoneResource&gt;&#xA;override this.GetSqlTimeZone : Azure.Core.AzureLocation * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.SqlTimeZoneResource&gt;" Usage="mockableSqlSubscriptionResource.GetSqlTimeZone (locationName, timeZoneId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Sql.SqlTimeZoneResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationName" Type="Azure.Core.AzureLocation" />
        <Parameter Name="timeZoneId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="locationName"> The <see cref="T:Azure.Core.AzureLocation" /> to use. </param>
        <param name="timeZoneId"> The <see cref="T:System.String" /> to use. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a managed instance time zone.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/timeZones/{timeZoneId}</description></item><item><term>Operation Id</term><description>TimeZones_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="timeZoneId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="timeZoneId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSqlTimeZoneAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlTimeZoneResource&gt;&gt; GetSqlTimeZoneAsync (Azure.Core.AzureLocation locationName, string timeZoneId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Sql.SqlTimeZoneResource&gt;&gt; GetSqlTimeZoneAsync(valuetype Azure.Core.AzureLocation locationName, string timeZoneId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetSqlTimeZoneAsync(Azure.Core.AzureLocation,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlTimeZoneAsync (locationName As AzureLocation, timeZoneId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SqlTimeZoneResource))" />
      <MemberSignature Language="F#" Value="abstract member GetSqlTimeZoneAsync : Azure.Core.AzureLocation * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlTimeZoneResource&gt;&gt;&#xA;override this.GetSqlTimeZoneAsync : Azure.Core.AzureLocation * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlTimeZoneResource&gt;&gt;" Usage="mockableSqlSubscriptionResource.GetSqlTimeZoneAsync (locationName, timeZoneId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlTimeZoneResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationName" Type="Azure.Core.AzureLocation" />
        <Parameter Name="timeZoneId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="locationName"> The <see cref="T:Azure.Core.AzureLocation" /> to use. </param>
        <param name="timeZoneId"> The <see cref="T:System.String" /> to use. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a managed instance time zone.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/timeZones/{timeZoneId}</description></item><item><term>Operation Id</term><description>TimeZones_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="timeZoneId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="timeZoneId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSqlTimeZones">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Sql.SqlTimeZoneCollection GetSqlTimeZones (Azure.Core.AzureLocation locationName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Sql.SqlTimeZoneCollection GetSqlTimeZones(valuetype Azure.Core.AzureLocation locationName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetSqlTimeZones(Azure.Core.AzureLocation)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlTimeZones (locationName As AzureLocation) As SqlTimeZoneCollection" />
      <MemberSignature Language="F#" Value="abstract member GetSqlTimeZones : Azure.Core.AzureLocation -&gt; Azure.ResourceManager.Sql.SqlTimeZoneCollection&#xA;override this.GetSqlTimeZones : Azure.Core.AzureLocation -&gt; Azure.ResourceManager.Sql.SqlTimeZoneCollection" Usage="mockableSqlSubscriptionResource.GetSqlTimeZones locationName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Sql.SqlTimeZoneCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationName" Type="Azure.Core.AzureLocation" />
      </Parameters>
      <Docs>
        <param name="locationName"> The <see cref="T:Azure.Core.AzureLocation" /> to use. </param>
        <summary> Gets a collection of SqlTimeZoneResources in the SubscriptionResource. </summary>
        <returns> An object representing collection of SqlTimeZoneResources and their operations over a SqlTimeZoneResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSubscriptionLongTermRetentionBackup">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupResource&gt; GetSubscriptionLongTermRetentionBackup (Azure.Core.AzureLocation locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupResource&gt; GetSubscriptionLongTermRetentionBackup(valuetype Azure.Core.AzureLocation locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetSubscriptionLongTermRetentionBackup(Azure.Core.AzureLocation,System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSubscriptionLongTermRetentionBackup (locationName As AzureLocation, longTermRetentionServerName As String, longTermRetentionDatabaseName As String, backupName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SubscriptionLongTermRetentionBackupResource)" />
      <MemberSignature Language="F#" Value="abstract member GetSubscriptionLongTermRetentionBackup : Azure.Core.AzureLocation * string * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupResource&gt;&#xA;override this.GetSubscriptionLongTermRetentionBackup : Azure.Core.AzureLocation * string * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupResource&gt;" Usage="mockableSqlSubscriptionResource.GetSubscriptionLongTermRetentionBackup (locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationName" Type="Azure.Core.AzureLocation" />
        <Parameter Name="longTermRetentionServerName" Type="System.String" />
        <Parameter Name="longTermRetentionDatabaseName" Type="System.String" />
        <Parameter Name="backupName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="locationName"> The location of the database. </param>
        <param name="longTermRetentionServerName"> The name of the server. </param>
        <param name="longTermRetentionDatabaseName"> The name of the database. </param>
        <param name="backupName"> The backup name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a long term retention backup.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}</description></item><item><term>Operation Id</term><description>LongTermRetentionBackups_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="longTermRetentionServerName" />, <paramref name="longTermRetentionDatabaseName" /> or <paramref name="backupName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="longTermRetentionServerName" />, <paramref name="longTermRetentionDatabaseName" /> or <paramref name="backupName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSubscriptionLongTermRetentionBackupAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupResource&gt;&gt; GetSubscriptionLongTermRetentionBackupAsync (Azure.Core.AzureLocation locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupResource&gt;&gt; GetSubscriptionLongTermRetentionBackupAsync(valuetype Azure.Core.AzureLocation locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetSubscriptionLongTermRetentionBackupAsync(Azure.Core.AzureLocation,System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSubscriptionLongTermRetentionBackupAsync (locationName As AzureLocation, longTermRetentionServerName As String, longTermRetentionDatabaseName As String, backupName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SubscriptionLongTermRetentionBackupResource))" />
      <MemberSignature Language="F#" Value="abstract member GetSubscriptionLongTermRetentionBackupAsync : Azure.Core.AzureLocation * string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupResource&gt;&gt;&#xA;override this.GetSubscriptionLongTermRetentionBackupAsync : Azure.Core.AzureLocation * string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupResource&gt;&gt;" Usage="mockableSqlSubscriptionResource.GetSubscriptionLongTermRetentionBackupAsync (locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationName" Type="Azure.Core.AzureLocation" />
        <Parameter Name="longTermRetentionServerName" Type="System.String" />
        <Parameter Name="longTermRetentionDatabaseName" Type="System.String" />
        <Parameter Name="backupName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="locationName"> The location of the database. </param>
        <param name="longTermRetentionServerName"> The name of the server. </param>
        <param name="longTermRetentionDatabaseName"> The name of the database. </param>
        <param name="backupName"> The backup name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a long term retention backup.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}</description></item><item><term>Operation Id</term><description>LongTermRetentionBackups_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="longTermRetentionServerName" />, <paramref name="longTermRetentionDatabaseName" /> or <paramref name="backupName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="longTermRetentionServerName" />, <paramref name="longTermRetentionDatabaseName" /> or <paramref name="backupName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSubscriptionLongTermRetentionBackups">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupCollection GetSubscriptionLongTermRetentionBackups (Azure.Core.AzureLocation locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupCollection GetSubscriptionLongTermRetentionBackups(valuetype Azure.Core.AzureLocation locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetSubscriptionLongTermRetentionBackups(Azure.Core.AzureLocation,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSubscriptionLongTermRetentionBackups (locationName As AzureLocation, longTermRetentionServerName As String, longTermRetentionDatabaseName As String) As SubscriptionLongTermRetentionBackupCollection" />
      <MemberSignature Language="F#" Value="abstract member GetSubscriptionLongTermRetentionBackups : Azure.Core.AzureLocation * string * string -&gt; Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupCollection&#xA;override this.GetSubscriptionLongTermRetentionBackups : Azure.Core.AzureLocation * string * string -&gt; Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupCollection" Usage="mockableSqlSubscriptionResource.GetSubscriptionLongTermRetentionBackups (locationName, longTermRetentionServerName, longTermRetentionDatabaseName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Sql.SubscriptionLongTermRetentionBackupCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationName" Type="Azure.Core.AzureLocation" />
        <Parameter Name="longTermRetentionServerName" Type="System.String" />
        <Parameter Name="longTermRetentionDatabaseName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="locationName"> The location of the database. </param>
        <param name="longTermRetentionServerName"> The name of the server. </param>
        <param name="longTermRetentionDatabaseName"> The name of the database. </param>
        <summary> Gets a collection of SubscriptionLongTermRetentionBackupResources in the SubscriptionResource. </summary>
        <returns> An object representing collection of SubscriptionLongTermRetentionBackupResources and their operations over a SubscriptionLongTermRetentionBackupResource. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="longTermRetentionServerName" /> or <paramref name="longTermRetentionDatabaseName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="longTermRetentionServerName" /> or <paramref name="longTermRetentionDatabaseName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSubscriptionLongTermRetentionManagedInstanceBackup">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupResource&gt; GetSubscriptionLongTermRetentionManagedInstanceBackup (Azure.Core.AzureLocation locationName, string managedInstanceName, string databaseName, string backupName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupResource&gt; GetSubscriptionLongTermRetentionManagedInstanceBackup(valuetype Azure.Core.AzureLocation locationName, string managedInstanceName, string databaseName, string backupName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetSubscriptionLongTermRetentionManagedInstanceBackup(Azure.Core.AzureLocation,System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSubscriptionLongTermRetentionManagedInstanceBackup (locationName As AzureLocation, managedInstanceName As String, databaseName As String, backupName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SubscriptionLongTermRetentionManagedInstanceBackupResource)" />
      <MemberSignature Language="F#" Value="abstract member GetSubscriptionLongTermRetentionManagedInstanceBackup : Azure.Core.AzureLocation * string * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupResource&gt;&#xA;override this.GetSubscriptionLongTermRetentionManagedInstanceBackup : Azure.Core.AzureLocation * string * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupResource&gt;" Usage="mockableSqlSubscriptionResource.GetSubscriptionLongTermRetentionManagedInstanceBackup (locationName, managedInstanceName, databaseName, backupName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationName" Type="Azure.Core.AzureLocation" />
        <Parameter Name="managedInstanceName" Type="System.String" />
        <Parameter Name="databaseName" Type="System.String" />
        <Parameter Name="backupName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="locationName"> The location of the database. </param>
        <param name="managedInstanceName"> The name of the managed instance. </param>
        <param name="databaseName"> The name of the managed database. </param>
        <param name="backupName"> The backup name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a long term retention backup for a managed database.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstances/{managedInstanceName}/longTermRetentionDatabases/{databaseName}/longTermRetentionManagedInstanceBackups/{backupName}</description></item><item><term>Operation Id</term><description>LongTermRetentionManagedInstanceBackups_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="managedInstanceName" />, <paramref name="databaseName" /> or <paramref name="backupName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="managedInstanceName" />, <paramref name="databaseName" /> or <paramref name="backupName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSubscriptionLongTermRetentionManagedInstanceBackupAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupResource&gt;&gt; GetSubscriptionLongTermRetentionManagedInstanceBackupAsync (Azure.Core.AzureLocation locationName, string managedInstanceName, string databaseName, string backupName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupResource&gt;&gt; GetSubscriptionLongTermRetentionManagedInstanceBackupAsync(valuetype Azure.Core.AzureLocation locationName, string managedInstanceName, string databaseName, string backupName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetSubscriptionLongTermRetentionManagedInstanceBackupAsync(Azure.Core.AzureLocation,System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSubscriptionLongTermRetentionManagedInstanceBackupAsync (locationName As AzureLocation, managedInstanceName As String, databaseName As String, backupName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SubscriptionLongTermRetentionManagedInstanceBackupResource))" />
      <MemberSignature Language="F#" Value="abstract member GetSubscriptionLongTermRetentionManagedInstanceBackupAsync : Azure.Core.AzureLocation * string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupResource&gt;&gt;&#xA;override this.GetSubscriptionLongTermRetentionManagedInstanceBackupAsync : Azure.Core.AzureLocation * string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupResource&gt;&gt;" Usage="mockableSqlSubscriptionResource.GetSubscriptionLongTermRetentionManagedInstanceBackupAsync (locationName, managedInstanceName, databaseName, backupName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationName" Type="Azure.Core.AzureLocation" />
        <Parameter Name="managedInstanceName" Type="System.String" />
        <Parameter Name="databaseName" Type="System.String" />
        <Parameter Name="backupName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="locationName"> The location of the database. </param>
        <param name="managedInstanceName"> The name of the managed instance. </param>
        <param name="databaseName"> The name of the managed database. </param>
        <param name="backupName"> The backup name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a long term retention backup for a managed database.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstances/{managedInstanceName}/longTermRetentionDatabases/{databaseName}/longTermRetentionManagedInstanceBackups/{backupName}</description></item><item><term>Operation Id</term><description>LongTermRetentionManagedInstanceBackups_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="managedInstanceName" />, <paramref name="databaseName" /> or <paramref name="backupName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="managedInstanceName" />, <paramref name="databaseName" /> or <paramref name="backupName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSubscriptionLongTermRetentionManagedInstanceBackups">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupCollection GetSubscriptionLongTermRetentionManagedInstanceBackups (Azure.Core.AzureLocation locationName, string managedInstanceName, string databaseName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupCollection GetSubscriptionLongTermRetentionManagedInstanceBackups(valuetype Azure.Core.AzureLocation locationName, string managedInstanceName, string databaseName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetSubscriptionLongTermRetentionManagedInstanceBackups(Azure.Core.AzureLocation,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSubscriptionLongTermRetentionManagedInstanceBackups (locationName As AzureLocation, managedInstanceName As String, databaseName As String) As SubscriptionLongTermRetentionManagedInstanceBackupCollection" />
      <MemberSignature Language="F#" Value="abstract member GetSubscriptionLongTermRetentionManagedInstanceBackups : Azure.Core.AzureLocation * string * string -&gt; Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupCollection&#xA;override this.GetSubscriptionLongTermRetentionManagedInstanceBackups : Azure.Core.AzureLocation * string * string -&gt; Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupCollection" Usage="mockableSqlSubscriptionResource.GetSubscriptionLongTermRetentionManagedInstanceBackups (locationName, managedInstanceName, databaseName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Sql.SubscriptionLongTermRetentionManagedInstanceBackupCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationName" Type="Azure.Core.AzureLocation" />
        <Parameter Name="managedInstanceName" Type="System.String" />
        <Parameter Name="databaseName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="locationName"> The location of the database. </param>
        <param name="managedInstanceName"> The name of the managed instance. </param>
        <param name="databaseName"> The name of the managed database. </param>
        <summary> Gets a collection of SubscriptionLongTermRetentionManagedInstanceBackupResources in the SubscriptionResource. </summary>
        <returns> An object representing collection of SubscriptionLongTermRetentionManagedInstanceBackupResources and their operations over a SubscriptionLongTermRetentionManagedInstanceBackupResource. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="managedInstanceName" /> or <paramref name="databaseName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="managedInstanceName" /> or <paramref name="databaseName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSubscriptionUsage">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Sql.SubscriptionUsageResource&gt; GetSubscriptionUsage (Azure.Core.AzureLocation locationName, string usageName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Sql.SubscriptionUsageResource&gt; GetSubscriptionUsage(valuetype Azure.Core.AzureLocation locationName, string usageName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetSubscriptionUsage(Azure.Core.AzureLocation,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSubscriptionUsage (locationName As AzureLocation, usageName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SubscriptionUsageResource)" />
      <MemberSignature Language="F#" Value="abstract member GetSubscriptionUsage : Azure.Core.AzureLocation * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.SubscriptionUsageResource&gt;&#xA;override this.GetSubscriptionUsage : Azure.Core.AzureLocation * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.SubscriptionUsageResource&gt;" Usage="mockableSqlSubscriptionResource.GetSubscriptionUsage (locationName, usageName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Sql.SubscriptionUsageResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationName" Type="Azure.Core.AzureLocation" />
        <Parameter Name="usageName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="locationName"> The name of the region where the resource is located. </param>
        <param name="usageName"> Name of usage metric to return. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a subscription usage metric.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/usages/{usageName}</description></item><item><term>Operation Id</term><description>SubscriptionUsages_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="usageName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="usageName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSubscriptionUsageAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SubscriptionUsageResource&gt;&gt; GetSubscriptionUsageAsync (Azure.Core.AzureLocation locationName, string usageName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Sql.SubscriptionUsageResource&gt;&gt; GetSubscriptionUsageAsync(valuetype Azure.Core.AzureLocation locationName, string usageName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetSubscriptionUsageAsync(Azure.Core.AzureLocation,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSubscriptionUsageAsync (locationName As AzureLocation, usageName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SubscriptionUsageResource))" />
      <MemberSignature Language="F#" Value="abstract member GetSubscriptionUsageAsync : Azure.Core.AzureLocation * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SubscriptionUsageResource&gt;&gt;&#xA;override this.GetSubscriptionUsageAsync : Azure.Core.AzureLocation * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SubscriptionUsageResource&gt;&gt;" Usage="mockableSqlSubscriptionResource.GetSubscriptionUsageAsync (locationName, usageName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SubscriptionUsageResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationName" Type="Azure.Core.AzureLocation" />
        <Parameter Name="usageName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="locationName"> The name of the region where the resource is located. </param>
        <param name="usageName"> Name of usage metric to return. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a subscription usage metric.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/usages/{usageName}</description></item><item><term>Operation Id</term><description>SubscriptionUsages_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="usageName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="usageName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSubscriptionUsages">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Sql.SubscriptionUsageCollection GetSubscriptionUsages (Azure.Core.AzureLocation locationName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Sql.SubscriptionUsageCollection GetSubscriptionUsages(valuetype Azure.Core.AzureLocation locationName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetSubscriptionUsages(Azure.Core.AzureLocation)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSubscriptionUsages (locationName As AzureLocation) As SubscriptionUsageCollection" />
      <MemberSignature Language="F#" Value="abstract member GetSubscriptionUsages : Azure.Core.AzureLocation -&gt; Azure.ResourceManager.Sql.SubscriptionUsageCollection&#xA;override this.GetSubscriptionUsages : Azure.Core.AzureLocation -&gt; Azure.ResourceManager.Sql.SubscriptionUsageCollection" Usage="mockableSqlSubscriptionResource.GetSubscriptionUsages locationName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Sql.SubscriptionUsageCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationName" Type="Azure.Core.AzureLocation" />
      </Parameters>
      <Docs>
        <param name="locationName"> The name of the region where the resource is located. </param>
        <summary> Gets a collection of SubscriptionUsageResources in the SubscriptionResource. </summary>
        <returns> An object representing collection of SubscriptionUsageResources and their operations over a SubscriptionUsageResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSyncDatabaseIdsSyncGroups">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Resources.Models.SubResource&gt; GetSyncDatabaseIdsSyncGroups (Azure.Core.AzureLocation locationName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Resources.Models.SubResource&gt; GetSyncDatabaseIdsSyncGroups(valuetype Azure.Core.AzureLocation locationName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetSyncDatabaseIdsSyncGroups(Azure.Core.AzureLocation,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSyncDatabaseIdsSyncGroups (locationName As AzureLocation, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of SubResource)" />
      <MemberSignature Language="F#" Value="abstract member GetSyncDatabaseIdsSyncGroups : Azure.Core.AzureLocation * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Resources.Models.SubResource&gt;&#xA;override this.GetSyncDatabaseIdsSyncGroups : Azure.Core.AzureLocation * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Resources.Models.SubResource&gt;" Usage="mockableSqlSubscriptionResource.GetSyncDatabaseIdsSyncGroups (locationName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Resources.Models.SubResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationName" Type="Azure.Core.AzureLocation" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="locationName"> The name of the region where the resource is located. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a collection of sync database ids.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/syncDatabaseIds</description></item><item><term>Operation Id</term><description>SyncGroups_ListSyncDatabaseIds</description></item></list></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Resources.Models.SubResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSyncDatabaseIdsSyncGroupsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Resources.Models.SubResource&gt; GetSyncDatabaseIdsSyncGroupsAsync (Azure.Core.AzureLocation locationName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Resources.Models.SubResource&gt; GetSyncDatabaseIdsSyncGroupsAsync(valuetype Azure.Core.AzureLocation locationName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetSyncDatabaseIdsSyncGroupsAsync(Azure.Core.AzureLocation,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSyncDatabaseIdsSyncGroupsAsync (locationName As AzureLocation, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of SubResource)" />
      <MemberSignature Language="F#" Value="abstract member GetSyncDatabaseIdsSyncGroupsAsync : Azure.Core.AzureLocation * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Resources.Models.SubResource&gt;&#xA;override this.GetSyncDatabaseIdsSyncGroupsAsync : Azure.Core.AzureLocation * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Resources.Models.SubResource&gt;" Usage="mockableSqlSubscriptionResource.GetSyncDatabaseIdsSyncGroupsAsync (locationName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Resources.Models.SubResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationName" Type="Azure.Core.AzureLocation" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="locationName"> The name of the region where the resource is located. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a collection of sync database ids.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/syncDatabaseIds</description></item><item><term>Operation Id</term><description>SyncGroups_ListSyncDatabaseIds</description></item></list></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Resources.Models.SubResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVirtualClusters">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Sql.VirtualClusterResource&gt; GetVirtualClusters (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Sql.VirtualClusterResource&gt; GetVirtualClusters(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetVirtualClusters(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVirtualClusters (Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of VirtualClusterResource)" />
      <MemberSignature Language="F#" Value="abstract member GetVirtualClusters : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.VirtualClusterResource&gt;&#xA;override this.GetVirtualClusters : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.VirtualClusterResource&gt;" Usage="mockableSqlSubscriptionResource.GetVirtualClusters cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Sql.VirtualClusterResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a list of all virtualClusters in the subscription.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Sql/virtualClusters</description></item><item><term>Operation Id</term><description>VirtualClusters_List</description></item></list></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Sql.VirtualClusterResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVirtualClustersAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.VirtualClusterResource&gt; GetVirtualClustersAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Sql.VirtualClusterResource&gt; GetVirtualClustersAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.Mocking.MockableSqlSubscriptionResource.GetVirtualClustersAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVirtualClustersAsync (Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of VirtualClusterResource)" />
      <MemberSignature Language="F#" Value="abstract member GetVirtualClustersAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.VirtualClusterResource&gt;&#xA;override this.GetVirtualClustersAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.VirtualClusterResource&gt;" Usage="mockableSqlSubscriptionResource.GetVirtualClustersAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.VirtualClusterResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a list of all virtualClusters in the subscription.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Sql/virtualClusters</description></item><item><term>Operation Id</term><description>VirtualClusters_List</description></item></list></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Sql.VirtualClusterResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
