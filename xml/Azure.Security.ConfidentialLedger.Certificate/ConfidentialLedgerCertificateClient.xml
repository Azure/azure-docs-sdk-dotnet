<Type Name="ConfidentialLedgerCertificateClient" FullName="Azure.Security.ConfidentialLedger.Certificate.ConfidentialLedgerCertificateClient">
  <TypeSignature Language="C#" Value="public class ConfidentialLedgerCertificateClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConfidentialLedgerCertificateClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Security.ConfidentialLedger.Certificate.ConfidentialLedgerCertificateClient" />
  <TypeSignature Language="VB.NET" Value="Public Class ConfidentialLedgerCertificateClient" />
  <TypeSignature Language="F#" Value="type ConfidentialLedgerCertificateClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The ConfidentialLedgerCertificate service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ConfidentialLedgerCertificateClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.Certificate.ConfidentialLedgerCertificateClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of ConfidentialLedgerCertificateClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConfidentialLedgerCertificateClient (Uri certificateEndpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri certificateEndpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.Certificate.ConfidentialLedgerCertificateClient.#ctor(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (certificateEndpoint As Uri)" />
      <MemberSignature Language="F#" Value="new Azure.Security.ConfidentialLedger.Certificate.ConfidentialLedgerCertificateClient : Uri -&gt; Azure.Security.ConfidentialLedger.Certificate.ConfidentialLedgerCertificateClient" Usage="new Azure.Security.ConfidentialLedger.Certificate.ConfidentialLedgerCertificateClient certificateEndpoint" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="certificateEndpoint" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="certificateEndpoint"> The Identity Service URL, for example https://identity.accledger.azure.com. </param>
        <summary> Initializes a new instance of ConfidentialLedgerCertificateClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="certificateEndpoint" />
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConfidentialLedgerCertificateClient (Uri certificateEndpoint, Azure.Security.ConfidentialLedger.Certificate.ConfidentialLedgerCertificateClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri certificateEndpoint, class Azure.Security.ConfidentialLedger.Certificate.ConfidentialLedgerCertificateClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.Certificate.ConfidentialLedgerCertificateClient.#ctor(System.Uri,Azure.Security.ConfidentialLedger.Certificate.ConfidentialLedgerCertificateClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (certificateEndpoint As Uri, options As ConfidentialLedgerCertificateClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Security.ConfidentialLedger.Certificate.ConfidentialLedgerCertificateClient : Uri * Azure.Security.ConfidentialLedger.Certificate.ConfidentialLedgerCertificateClientOptions -&gt; Azure.Security.ConfidentialLedger.Certificate.ConfidentialLedgerCertificateClient" Usage="new Azure.Security.ConfidentialLedger.Certificate.ConfidentialLedgerCertificateClient (certificateEndpoint, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="certificateEndpoint" Type="System.Uri" />
        <Parameter Name="options" Type="Azure.Security.ConfidentialLedger.Certificate.ConfidentialLedgerCertificateClientOptions" />
      </Parameters>
      <Docs>
        <param name="certificateEndpoint"> The Identity Service URL, for example https://identity.accledger.azure.com. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of ConfidentialLedgerCertificateClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="certificateEndpoint" />
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetLedgerIdentity">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetLedgerIdentity (string ledgerId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetLedgerIdentity(string ledgerId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.Certificate.ConfidentialLedgerCertificateClient.GetLedgerIdentity(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLedgerIdentity (ledgerId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetLedgerIdentity : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetLedgerIdentity : string * Azure.RequestContext -&gt; Azure.Response" Usage="confidentialLedgerCertificateClient.GetLedgerIdentity (ledgerId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ledgerId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="ledgerId"> Id of the Confidential Ledger instance to get information for. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets identity information for a Confidential Ledger instance. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>LedgerIdentityInformation</c>:
            <code>{
              ledgerId: string, # Optional. Id for the ledger.
              ledgerTlsCertificate: string, # Required. PEM-encoded certificate used for TLS by the Confidential Ledger.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ledgerId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ledgerId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetLedgerIdentity with required parameters and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentialLedgerCertificateClient(endpoint, credential);
            
            Response response = client.GetLedgerIdentity("<ledgerId>");
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("ledgerId").ToString());
            Console.WriteLine(result.GetProperty("ledgerTlsCertificate").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetLedgerIdentityAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetLedgerIdentityAsync (string ledgerId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetLedgerIdentityAsync(string ledgerId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.Certificate.ConfidentialLedgerCertificateClient.GetLedgerIdentityAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLedgerIdentityAsync (ledgerId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetLedgerIdentityAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetLedgerIdentityAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="confidentialLedgerCertificateClient.GetLedgerIdentityAsync (ledgerId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ledgerId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="ledgerId"> Id of the Confidential Ledger instance to get information for. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets identity information for a Confidential Ledger instance. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>LedgerIdentityInformation</c>:
            <code>{
              ledgerId: string, # Optional. Id for the ledger.
              ledgerTlsCertificate: string, # Required. PEM-encoded certificate used for TLS by the Confidential Ledger.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ledgerId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ledgerId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetLedgerIdentityAsync with required parameters and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentialLedgerCertificateClient(endpoint, credential);
            
            Response response = await client.GetLedgerIdentityAsync("<ledgerId>");
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("ledgerId").ToString());
            Console.WriteLine(result.GetProperty("ledgerTlsCertificate").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Security.ConfidentialLedger.Certificate.ConfidentialLedgerCertificateClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Security.ConfidentialLedger.Certificate.ConfidentialLedgerCertificateClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
