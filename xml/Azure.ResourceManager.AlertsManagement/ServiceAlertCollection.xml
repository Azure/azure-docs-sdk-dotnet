<Type Name="ServiceAlertCollection" FullName="Azure.ResourceManager.AlertsManagement.ServiceAlertCollection">
  <TypeSignature Language="C#" Value="public class ServiceAlertCollection : Azure.ResourceManager.ArmCollection, System.Collections.Generic.IAsyncEnumerable&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceAlertCollection extends Azure.ResourceManager.ArmCollection implements class System.Collections.Generic.IAsyncEnumerable`1&lt;class Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;, class System.Collections.Generic.IEnumerable`1&lt;class Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.AlertsManagement.ServiceAlertCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceAlertCollection&#xA;Inherits ArmCollection&#xA;Implements IAsyncEnumerable(Of ServiceAlertResource), IEnumerable(Of ServiceAlertResource)" />
  <TypeSignature Language="F#" Value="type ServiceAlertCollection = class&#xA;    inherit ArmCollection&#xA;    interface seq&lt;ServiceAlertResource&gt;&#xA;    interface IEnumerable&#xA;    interface IAsyncEnumerable&lt;ServiceAlertResource&gt;" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.AlertsManagement</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmCollection</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IAsyncEnumerable&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            A class representing a collection of <see cref="T:Azure.ResourceManager.AlertsManagement.ServiceAlertResource" /> and their operations.
            Each <see cref="T:Azure.ResourceManager.AlertsManagement.ServiceAlertResource" /> in the collection will belong to the same instance of <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" />.
            To get a <see cref="T:Azure.ResourceManager.AlertsManagement.ServiceAlertCollection" /> instance call the GetServiceAlerts method from an instance of <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ServiceAlertCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.AlertsManagement.ServiceAlertCollection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.AlertsManagement.ServiceAlertCollection" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;bool&gt; Exists (string alertId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;bool&gt; Exists(string alertId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.AlertsManagement.ServiceAlertCollection.Exists(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Exists (alertId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Exists : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;bool&gt;&#xA;override this.Exists : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;bool&gt;" Usage="serviceAlertCollection.Exists (alertId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alertId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="alertId"> Unique ID of an alert instance. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Checks to see if the resource exists in azure.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts/{alertId}
            Operation Id: Alerts_GetById
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="alertId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="alertId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ExistsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt; ExistsAsync (string alertId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;bool&gt;&gt; ExistsAsync(string alertId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.AlertsManagement.ServiceAlertCollection.ExistsAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExistsAsync (alertId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of Boolean))" />
      <MemberSignature Language="F#" Value="abstract member ExistsAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt;&#xA;override this.ExistsAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt;" Usage="serviceAlertCollection.ExistsAsync (alertId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Boolean&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alertId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="alertId"> Unique ID of an alert instance. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Checks to see if the resource exists in azure.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts/{alertId}
            Operation Id: Alerts_GetById
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="alertId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="alertId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt; Get (string alertId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt; Get(string alertId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.AlertsManagement.ServiceAlertCollection.Get(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Get (alertId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ServiceAlertResource)" />
      <MemberSignature Language="F#" Value="abstract member Get : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;&#xA;override this.Get : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;" Usage="serviceAlertCollection.Get (alertId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alertId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="alertId"> Unique ID of an alert instance. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get information related to a specific alert
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts/{alertId}
            Operation Id: Alerts_GetById
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="alertId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="alertId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAll">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt; GetAll (string targetResource = default, string targetResourceType = default, string targetResourceGroup = default, Azure.ResourceManager.AlertsManagement.Models.MonitorService? monitorService = default, Azure.ResourceManager.AlertsManagement.Models.MonitorCondition? monitorCondition = default, Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSeverity? severity = default, Azure.ResourceManager.AlertsManagement.Models.AlertState? alertState = default, string alertRule = default, string smartGroupId = default, bool? includeContext = default, bool? includeEgressConfig = default, long? pageCount = default, Azure.ResourceManager.AlertsManagement.Models.AlertsSortByField? sortBy = default, Azure.ResourceManager.AlertsManagement.Models.SortOrder? sortOrder = default, string select = default, Azure.ResourceManager.AlertsManagement.Models.TimeRangeFilter? timeRange = default, string customTimeRange = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt; GetAll(string targetResource, string targetResourceType, string targetResourceGroup, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.AlertsManagement.Models.MonitorService&gt; monitorService, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.AlertsManagement.Models.MonitorCondition&gt; monitorCondition, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSeverity&gt; severity, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.AlertsManagement.Models.AlertState&gt; alertState, string alertRule, string smartGroupId, valuetype System.Nullable`1&lt;bool&gt; includeContext, valuetype System.Nullable`1&lt;bool&gt; includeEgressConfig, valuetype System.Nullable`1&lt;int64&gt; pageCount, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.AlertsManagement.Models.AlertsSortByField&gt; sortBy, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.AlertsManagement.Models.SortOrder&gt; sortOrder, string select, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.AlertsManagement.Models.TimeRangeFilter&gt; timeRange, string customTimeRange, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.AlertsManagement.ServiceAlertCollection.GetAll(System.String,System.String,System.String,System.Nullable{Azure.ResourceManager.AlertsManagement.Models.MonitorService},System.Nullable{Azure.ResourceManager.AlertsManagement.Models.MonitorCondition},System.Nullable{Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSeverity},System.Nullable{Azure.ResourceManager.AlertsManagement.Models.AlertState},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{Azure.ResourceManager.AlertsManagement.Models.AlertsSortByField},System.Nullable{Azure.ResourceManager.AlertsManagement.Models.SortOrder},System.String,System.Nullable{Azure.ResourceManager.AlertsManagement.Models.TimeRangeFilter},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAll (Optional targetResource As String = Nothing, Optional targetResourceType As String = Nothing, Optional targetResourceGroup As String = Nothing, Optional monitorService As Nullable(Of MonitorService) = Nothing, Optional monitorCondition As Nullable(Of MonitorCondition) = Nothing, Optional severity As Nullable(Of ServiceAlertSeverity) = Nothing, Optional alertState As Nullable(Of AlertState) = Nothing, Optional alertRule As String = Nothing, Optional smartGroupId As String = Nothing, Optional includeContext As Nullable(Of Boolean) = Nothing, Optional includeEgressConfig As Nullable(Of Boolean) = Nothing, Optional pageCount As Nullable(Of Long) = Nothing, Optional sortBy As Nullable(Of AlertsSortByField) = Nothing, Optional sortOrder As Nullable(Of SortOrder) = Nothing, Optional select As String = Nothing, Optional timeRange As Nullable(Of TimeRangeFilter) = Nothing, Optional customTimeRange As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of ServiceAlertResource)" />
      <MemberSignature Language="F#" Value="abstract member GetAll : string * string * string * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.MonitorService&gt; * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.MonitorCondition&gt; * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSeverity&gt; * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.AlertState&gt; * string * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;int64&gt; * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.AlertsSortByField&gt; * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.SortOrder&gt; * string * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.TimeRangeFilter&gt; * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;&#xA;override this.GetAll : string * string * string * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.MonitorService&gt; * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.MonitorCondition&gt; * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSeverity&gt; * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.AlertState&gt; * string * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;int64&gt; * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.AlertsSortByField&gt; * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.SortOrder&gt; * string * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.TimeRangeFilter&gt; * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;" Usage="serviceAlertCollection.GetAll (targetResource, targetResourceType, targetResourceGroup, monitorService, monitorCondition, severity, alertState, alertRule, smartGroupId, includeContext, includeEgressConfig, pageCount, sortBy, sortOrder, select, timeRange, customTimeRange, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetResource" Type="System.String" />
        <Parameter Name="targetResourceType" Type="System.String" />
        <Parameter Name="targetResourceGroup" Type="System.String" />
        <Parameter Name="monitorService" Type="System.Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.MonitorService&gt;" />
        <Parameter Name="monitorCondition" Type="System.Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.MonitorCondition&gt;" />
        <Parameter Name="severity" Type="System.Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSeverity&gt;" />
        <Parameter Name="alertState" Type="System.Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.AlertState&gt;" />
        <Parameter Name="alertRule" Type="System.String" />
        <Parameter Name="smartGroupId" Type="System.String" />
        <Parameter Name="includeContext" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeEgressConfig" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="pageCount" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="sortBy" Type="System.Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.AlertsSortByField&gt;" />
        <Parameter Name="sortOrder" Type="System.Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.SortOrder&gt;" />
        <Parameter Name="select" Type="System.String" />
        <Parameter Name="timeRange" Type="System.Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.TimeRangeFilter&gt;" />
        <Parameter Name="customTimeRange" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="targetResource"> Filter by target resource( which is full ARM ID) Default value is select all. </param>
        <param name="targetResourceType"> Filter by target resource type. Default value is select all. </param>
        <param name="targetResourceGroup"> Filter by target resource group name. Default value is select all. </param>
        <param name="monitorService"> Filter by monitor service which generates the alert instance. Default value is select all. </param>
        <param name="monitorCondition"> Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all. </param>
        <param name="severity"> Filter by severity.  Default value is select all. </param>
        <param name="alertState"> Filter by state of the alert instance. Default value is to select all. </param>
        <param name="alertRule"> Filter by specific alert rule.  Default value is to select all. </param>
        <param name="smartGroupId"> Filter the alerts list by the Smart Group Id. Default value is none. </param>
        <param name="includeContext"> Include context which has contextual data specific to the monitor service. Default value is false'. </param>
        <param name="includeEgressConfig"> Include egress config which would be used for displaying the content in portal.  Default value is 'false'. </param>
        <param name="pageCount"> Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the "includeContent"  filter is selected, maximum value allowed is 25. Default value is 25. </param>
        <param name="sortBy"> Sort the query results by input field,  Default value is 'lastModifiedDateTime'. </param>
        <param name="sortOrder"> Sort the query results order in either ascending or descending.  Default value is 'desc' for time fields and 'asc' for others. </param>
        <param name="select"> This filter allows to selection of the fields(comma separated) which would  be part of the essential section. This would allow to project only the  required fields rather than getting entire content.  Default is to fetch all the fields in the essentials section. </param>
        <param name="timeRange"> Filter by time range by below listed values. Default value is 1 day. </param>
        <param name="customTimeRange"> Filter by custom time range in the format &lt;start-time&gt;/&lt;end-time&gt;  where time is in (ISO-8601 format)'. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            List all existing alerts, where the results can be filtered on the basis of multiple parameters (e.g. time range). The results can then be sorted on the basis specific fields, with the default being lastModifiedDateTime. 
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts
            Operation Id: Alerts_GetAll
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.AlertsManagement.ServiceAlertResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt; GetAllAsync (string targetResource = default, string targetResourceType = default, string targetResourceGroup = default, Azure.ResourceManager.AlertsManagement.Models.MonitorService? monitorService = default, Azure.ResourceManager.AlertsManagement.Models.MonitorCondition? monitorCondition = default, Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSeverity? severity = default, Azure.ResourceManager.AlertsManagement.Models.AlertState? alertState = default, string alertRule = default, string smartGroupId = default, bool? includeContext = default, bool? includeEgressConfig = default, long? pageCount = default, Azure.ResourceManager.AlertsManagement.Models.AlertsSortByField? sortBy = default, Azure.ResourceManager.AlertsManagement.Models.SortOrder? sortOrder = default, string select = default, Azure.ResourceManager.AlertsManagement.Models.TimeRangeFilter? timeRange = default, string customTimeRange = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt; GetAllAsync(string targetResource, string targetResourceType, string targetResourceGroup, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.AlertsManagement.Models.MonitorService&gt; monitorService, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.AlertsManagement.Models.MonitorCondition&gt; monitorCondition, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSeverity&gt; severity, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.AlertsManagement.Models.AlertState&gt; alertState, string alertRule, string smartGroupId, valuetype System.Nullable`1&lt;bool&gt; includeContext, valuetype System.Nullable`1&lt;bool&gt; includeEgressConfig, valuetype System.Nullable`1&lt;int64&gt; pageCount, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.AlertsManagement.Models.AlertsSortByField&gt; sortBy, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.AlertsManagement.Models.SortOrder&gt; sortOrder, string select, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.AlertsManagement.Models.TimeRangeFilter&gt; timeRange, string customTimeRange, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.AlertsManagement.ServiceAlertCollection.GetAllAsync(System.String,System.String,System.String,System.Nullable{Azure.ResourceManager.AlertsManagement.Models.MonitorService},System.Nullable{Azure.ResourceManager.AlertsManagement.Models.MonitorCondition},System.Nullable{Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSeverity},System.Nullable{Azure.ResourceManager.AlertsManagement.Models.AlertState},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{Azure.ResourceManager.AlertsManagement.Models.AlertsSortByField},System.Nullable{Azure.ResourceManager.AlertsManagement.Models.SortOrder},System.String,System.Nullable{Azure.ResourceManager.AlertsManagement.Models.TimeRangeFilter},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllAsync (Optional targetResource As String = Nothing, Optional targetResourceType As String = Nothing, Optional targetResourceGroup As String = Nothing, Optional monitorService As Nullable(Of MonitorService) = Nothing, Optional monitorCondition As Nullable(Of MonitorCondition) = Nothing, Optional severity As Nullable(Of ServiceAlertSeverity) = Nothing, Optional alertState As Nullable(Of AlertState) = Nothing, Optional alertRule As String = Nothing, Optional smartGroupId As String = Nothing, Optional includeContext As Nullable(Of Boolean) = Nothing, Optional includeEgressConfig As Nullable(Of Boolean) = Nothing, Optional pageCount As Nullable(Of Long) = Nothing, Optional sortBy As Nullable(Of AlertsSortByField) = Nothing, Optional sortOrder As Nullable(Of SortOrder) = Nothing, Optional select As String = Nothing, Optional timeRange As Nullable(Of TimeRangeFilter) = Nothing, Optional customTimeRange As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of ServiceAlertResource)" />
      <MemberSignature Language="F#" Value="abstract member GetAllAsync : string * string * string * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.MonitorService&gt; * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.MonitorCondition&gt; * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSeverity&gt; * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.AlertState&gt; * string * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;int64&gt; * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.AlertsSortByField&gt; * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.SortOrder&gt; * string * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.TimeRangeFilter&gt; * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;&#xA;override this.GetAllAsync : string * string * string * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.MonitorService&gt; * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.MonitorCondition&gt; * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSeverity&gt; * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.AlertState&gt; * string * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;int64&gt; * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.AlertsSortByField&gt; * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.SortOrder&gt; * string * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.TimeRangeFilter&gt; * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;" Usage="serviceAlertCollection.GetAllAsync (targetResource, targetResourceType, targetResourceGroup, monitorService, monitorCondition, severity, alertState, alertRule, smartGroupId, includeContext, includeEgressConfig, pageCount, sortBy, sortOrder, select, timeRange, customTimeRange, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetResource" Type="System.String" />
        <Parameter Name="targetResourceType" Type="System.String" />
        <Parameter Name="targetResourceGroup" Type="System.String" />
        <Parameter Name="monitorService" Type="System.Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.MonitorService&gt;" />
        <Parameter Name="monitorCondition" Type="System.Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.MonitorCondition&gt;" />
        <Parameter Name="severity" Type="System.Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSeverity&gt;" />
        <Parameter Name="alertState" Type="System.Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.AlertState&gt;" />
        <Parameter Name="alertRule" Type="System.String" />
        <Parameter Name="smartGroupId" Type="System.String" />
        <Parameter Name="includeContext" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeEgressConfig" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="pageCount" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="sortBy" Type="System.Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.AlertsSortByField&gt;" />
        <Parameter Name="sortOrder" Type="System.Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.SortOrder&gt;" />
        <Parameter Name="select" Type="System.String" />
        <Parameter Name="timeRange" Type="System.Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.TimeRangeFilter&gt;" />
        <Parameter Name="customTimeRange" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="targetResource"> Filter by target resource( which is full ARM ID) Default value is select all. </param>
        <param name="targetResourceType"> Filter by target resource type. Default value is select all. </param>
        <param name="targetResourceGroup"> Filter by target resource group name. Default value is select all. </param>
        <param name="monitorService"> Filter by monitor service which generates the alert instance. Default value is select all. </param>
        <param name="monitorCondition"> Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all. </param>
        <param name="severity"> Filter by severity.  Default value is select all. </param>
        <param name="alertState"> Filter by state of the alert instance. Default value is to select all. </param>
        <param name="alertRule"> Filter by specific alert rule.  Default value is to select all. </param>
        <param name="smartGroupId"> Filter the alerts list by the Smart Group Id. Default value is none. </param>
        <param name="includeContext"> Include context which has contextual data specific to the monitor service. Default value is false'. </param>
        <param name="includeEgressConfig"> Include egress config which would be used for displaying the content in portal.  Default value is 'false'. </param>
        <param name="pageCount"> Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the "includeContent"  filter is selected, maximum value allowed is 25. Default value is 25. </param>
        <param name="sortBy"> Sort the query results by input field,  Default value is 'lastModifiedDateTime'. </param>
        <param name="sortOrder"> Sort the query results order in either ascending or descending.  Default value is 'desc' for time fields and 'asc' for others. </param>
        <param name="select"> This filter allows to selection of the fields(comma separated) which would  be part of the essential section. This would allow to project only the  required fields rather than getting entire content.  Default is to fetch all the fields in the essentials section. </param>
        <param name="timeRange"> Filter by time range by below listed values. Default value is 1 day. </param>
        <param name="customTimeRange"> Filter by custom time range in the format &lt;start-time&gt;/&lt;end-time&gt;  where time is in (ISO-8601 format)'. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            List all existing alerts, where the results can be filtered on the basis of multiple parameters (e.g. time range). The results can then be sorted on the basis specific fields, with the default being lastModifiedDateTime. 
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts
            Operation Id: Alerts_GetAll
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.AlertsManagement.ServiceAlertResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;&gt; GetAsync (string alertId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;&gt; GetAsync(string alertId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.AlertsManagement.ServiceAlertCollection.GetAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAsync (alertId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ServiceAlertResource))" />
      <MemberSignature Language="F#" Value="abstract member GetAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;&gt;&#xA;override this.GetAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;&gt;" Usage="serviceAlertCollection.GetAsync (alertId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alertId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="alertId"> Unique ID of an alert instance. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get information related to a specific alert
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts/{alertId}
            Operation Id: Alerts_GetById
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="alertId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="alertId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IAsyncEnumerable&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;.GetAsyncEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IAsyncEnumerator&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt; IAsyncEnumerable&lt;ServiceAlertResource&gt;.GetAsyncEnumerator (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerator`1&lt;class Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt; System.Collections.Generic.IAsyncEnumerable&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;.GetAsyncEnumerator(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.AlertsManagement.ServiceAlertCollection.System#Collections#Generic#IAsyncEnumerable&lt;Azure#ResourceManager#AlertsManagement#ServiceAlertResource&gt;#GetAsyncEnumerator(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Function GetAsyncEnumerator (cancellationToken As CancellationToken) As IAsyncEnumerator(Of ServiceAlertResource) Implements IAsyncEnumerable(Of ServiceAlertResource).GetAsyncEnumerator" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.IAsyncEnumerable&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;.GetAsyncEnumerator : System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerator&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;&#xA;override this.System.Collections.Generic.IAsyncEnumerable&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;.GetAsyncEnumerator : System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerator&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;" Usage="serviceAlertCollection.System.Collections.Generic.IAsyncEnumerable&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;.GetAsyncEnumerator cancellationToken" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerator&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that may be used to cancel the asynchronous iteration.</param>
        <summary>Returns an enumerator that iterates asynchronously through the collection.</summary>
        <returns>An enumerator that can be used to iterate asynchronously through the collection.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt; IEnumerable&lt;ServiceAlertResource&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt; System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.AlertsManagement.ServiceAlertCollection.System#Collections#Generic#IEnumerable&lt;Azure#ResourceManager#AlertsManagement#ServiceAlertResource&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of ServiceAlertResource) Implements IEnumerable(Of ServiceAlertResource).GetEnumerator" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;&#xA;override this.System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;" Usage="serviceAlertCollection.System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an enumerator that iterates through the collection.</summary>
        <returns>An enumerator that can be used to iterate through the collection.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.AlertsManagement.ServiceAlertCollection.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="serviceAlertCollection.System.Collections.IEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an enumerator that iterates through a collection.</summary>
        <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
