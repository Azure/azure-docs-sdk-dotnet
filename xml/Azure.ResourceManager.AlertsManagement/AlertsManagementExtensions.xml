<Type Name="AlertsManagementExtensions" FullName="Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions">
  <TypeSignature Language="C#" Value="public static class AlertsManagementExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AlertsManagementExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module AlertsManagementExtensions" />
  <TypeSignature Language="F#" Value="type AlertsManagementExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.AlertsManagement</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.1.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> A class to add extension methods to Azure.ResourceManager.AlertsManagement. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetAlertProcessingRule">
      <MemberSignature Language="C#" Value="public static Azure.Response&lt;Azure.ResourceManager.AlertsManagement.AlertProcessingRuleResource&gt; GetAlertProcessingRule (this Azure.ResourceManager.Resources.ResourceGroupResource resourceGroupResource, string alertProcessingRuleName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Response`1&lt;class Azure.ResourceManager.AlertsManagement.AlertProcessingRuleResource&gt; GetAlertProcessingRule(class Azure.ResourceManager.Resources.ResourceGroupResource resourceGroupResource, string alertProcessingRuleName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetAlertProcessingRule(Azure.ResourceManager.Resources.ResourceGroupResource,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAlertProcessingRule (resourceGroupResource As ResourceGroupResource, alertProcessingRuleName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AlertProcessingRuleResource)" />
      <MemberSignature Language="F#" Value="static member GetAlertProcessingRule : Azure.ResourceManager.Resources.ResourceGroupResource * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.AlertsManagement.AlertProcessingRuleResource&gt;" Usage="Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetAlertProcessingRule (resourceGroupResource, alertProcessingRuleName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.AlertsManagement.AlertProcessingRuleResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupResource" Type="Azure.ResourceManager.Resources.ResourceGroupResource" RefType="this" />
        <Parameter Name="alertProcessingRuleName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupResource"> The <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> instance the method will execute against. </param>
        <param name="alertProcessingRuleName"> The name of the alert processing rule that needs to be fetched. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get an alert processing rule by name.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlertsManagement/actionRules/{alertProcessingRuleName}</description></item><item><term>Operation Id</term><description>AlertProcessingRules_GetByName</description></item></list><item><term>Mocking</term><description>To mock this method, please mock <see cref="M:Azure.ResourceManager.AlertsManagement.Mocking.MockableAlertsManagementResourceGroupResource.GetAlertProcessingRule(System.String,System.Threading.CancellationToken)" /> instead.</description></item></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceGroupResource" /> or <paramref name="alertProcessingRuleName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="alertProcessingRuleName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAlertProcessingRuleAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.AlertsManagement.AlertProcessingRuleResource&gt;&gt; GetAlertProcessingRuleAsync (this Azure.ResourceManager.Resources.ResourceGroupResource resourceGroupResource, string alertProcessingRuleName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.AlertsManagement.AlertProcessingRuleResource&gt;&gt; GetAlertProcessingRuleAsync(class Azure.ResourceManager.Resources.ResourceGroupResource resourceGroupResource, string alertProcessingRuleName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetAlertProcessingRuleAsync(Azure.ResourceManager.Resources.ResourceGroupResource,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAlertProcessingRuleAsync (resourceGroupResource As ResourceGroupResource, alertProcessingRuleName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AlertProcessingRuleResource))" />
      <MemberSignature Language="F#" Value="static member GetAlertProcessingRuleAsync : Azure.ResourceManager.Resources.ResourceGroupResource * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.AlertsManagement.AlertProcessingRuleResource&gt;&gt;" Usage="Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetAlertProcessingRuleAsync (resourceGroupResource, alertProcessingRuleName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.AlertsManagement.AlertProcessingRuleResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupResource" Type="Azure.ResourceManager.Resources.ResourceGroupResource" RefType="this" />
        <Parameter Name="alertProcessingRuleName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupResource"> The <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> instance the method will execute against. </param>
        <param name="alertProcessingRuleName"> The name of the alert processing rule that needs to be fetched. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get an alert processing rule by name.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlertsManagement/actionRules/{alertProcessingRuleName}</description></item><item><term>Operation Id</term><description>AlertProcessingRules_GetByName</description></item></list><item><term>Mocking</term><description>To mock this method, please mock <see cref="M:Azure.ResourceManager.AlertsManagement.Mocking.MockableAlertsManagementResourceGroupResource.GetAlertProcessingRuleAsync(System.String,System.Threading.CancellationToken)" /> instead.</description></item></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceGroupResource" /> or <paramref name="alertProcessingRuleName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="alertProcessingRuleName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAlertProcessingRuleResource">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.AlertsManagement.AlertProcessingRuleResource GetAlertProcessingRuleResource (this Azure.ResourceManager.ArmClient client, Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.AlertsManagement.AlertProcessingRuleResource GetAlertProcessingRuleResource(class Azure.ResourceManager.ArmClient client, class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetAlertProcessingRuleResource(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAlertProcessingRuleResource (client As ArmClient, id As ResourceIdentifier) As AlertProcessingRuleResource" />
      <MemberSignature Language="F#" Value="static member GetAlertProcessingRuleResource : Azure.ResourceManager.ArmClient * Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.AlertsManagement.AlertProcessingRuleResource" Usage="Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetAlertProcessingRuleResource (client, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.AlertsManagement.AlertProcessingRuleResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="Azure.ResourceManager.ArmClient" RefType="this" />
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="client"> The <see cref="T:Azure.ResourceManager.ArmClient" /> instance the method will execute against. </param>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.AlertsManagement.AlertProcessingRuleResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.AlertsManagement.AlertProcessingRuleResource.CreateResourceIdentifier(System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.AlertsManagement.AlertProcessingRuleResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            <item><term>Mocking</term><description>To mock this method, please mock <see cref="M:Azure.ResourceManager.AlertsManagement.Mocking.MockableAlertsManagementArmClient.GetAlertProcessingRuleResource(Azure.Core.ResourceIdentifier)" /> instead.</description></item></summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.AlertsManagement.AlertProcessingRuleResource" /> object. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="client" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAlertProcessingRules">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.AlertsManagement.AlertProcessingRuleCollection GetAlertProcessingRules (this Azure.ResourceManager.Resources.ResourceGroupResource resourceGroupResource);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.AlertsManagement.AlertProcessingRuleCollection GetAlertProcessingRules(class Azure.ResourceManager.Resources.ResourceGroupResource resourceGroupResource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetAlertProcessingRules(Azure.ResourceManager.Resources.ResourceGroupResource)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAlertProcessingRules (resourceGroupResource As ResourceGroupResource) As AlertProcessingRuleCollection" />
      <MemberSignature Language="F#" Value="static member GetAlertProcessingRules : Azure.ResourceManager.Resources.ResourceGroupResource -&gt; Azure.ResourceManager.AlertsManagement.AlertProcessingRuleCollection" Usage="Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetAlertProcessingRules resourceGroupResource" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.AlertsManagement.AlertProcessingRuleCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupResource" Type="Azure.ResourceManager.Resources.ResourceGroupResource" RefType="this" />
      </Parameters>
      <Docs>
        <param name="resourceGroupResource"> The <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> instance the method will execute against. </param>
        <summary>
            Gets a collection of AlertProcessingRuleResources in the ResourceGroupResource.
            <item><term>Mocking</term><description>To mock this method, please mock <see cref="M:Azure.ResourceManager.AlertsManagement.Mocking.MockableAlertsManagementResourceGroupResource.GetAlertProcessingRules" /> instead.</description></item></summary>
        <returns> An object representing collection of AlertProcessingRuleResources and their operations over a AlertProcessingRuleResource. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceGroupResource" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAlertProcessingRules">
      <MemberSignature Language="C#" Value="public static Azure.Pageable&lt;Azure.ResourceManager.AlertsManagement.AlertProcessingRuleResource&gt; GetAlertProcessingRules (this Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Pageable`1&lt;class Azure.ResourceManager.AlertsManagement.AlertProcessingRuleResource&gt; GetAlertProcessingRules(class Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetAlertProcessingRules(Azure.ResourceManager.Resources.SubscriptionResource,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAlertProcessingRules (subscriptionResource As SubscriptionResource, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of AlertProcessingRuleResource)" />
      <MemberSignature Language="F#" Value="static member GetAlertProcessingRules : Azure.ResourceManager.Resources.SubscriptionResource * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.AlertsManagement.AlertProcessingRuleResource&gt;" Usage="Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetAlertProcessingRules (subscriptionResource, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.AlertsManagement.AlertProcessingRuleResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionResource" Type="Azure.ResourceManager.Resources.SubscriptionResource" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="subscriptionResource"> The <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            List all alert processing rules in a subscription.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/actionRules</description></item><item><term>Operation Id</term><description>AlertProcessingRules_ListBySubscription</description></item></list><item><term>Mocking</term><description>To mock this method, please mock <see cref="M:Azure.ResourceManager.AlertsManagement.Mocking.MockableAlertsManagementSubscriptionResource.GetAlertProcessingRules(System.Threading.CancellationToken)" /> instead.</description></item></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.AlertsManagement.AlertProcessingRuleResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="subscriptionResource" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAlertProcessingRulesAsync">
      <MemberSignature Language="C#" Value="public static Azure.AsyncPageable&lt;Azure.ResourceManager.AlertsManagement.AlertProcessingRuleResource&gt; GetAlertProcessingRulesAsync (this Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.AlertsManagement.AlertProcessingRuleResource&gt; GetAlertProcessingRulesAsync(class Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetAlertProcessingRulesAsync(Azure.ResourceManager.Resources.SubscriptionResource,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAlertProcessingRulesAsync (subscriptionResource As SubscriptionResource, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of AlertProcessingRuleResource)" />
      <MemberSignature Language="F#" Value="static member GetAlertProcessingRulesAsync : Azure.ResourceManager.Resources.SubscriptionResource * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.AlertsManagement.AlertProcessingRuleResource&gt;" Usage="Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetAlertProcessingRulesAsync (subscriptionResource, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.AlertsManagement.AlertProcessingRuleResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionResource" Type="Azure.ResourceManager.Resources.SubscriptionResource" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="subscriptionResource"> The <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            List all alert processing rules in a subscription.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/actionRules</description></item><item><term>Operation Id</term><description>AlertProcessingRules_ListBySubscription</description></item></list><item><term>Mocking</term><description>To mock this method, please mock <see cref="M:Azure.ResourceManager.AlertsManagement.Mocking.MockableAlertsManagementSubscriptionResource.GetAlertProcessingRules(System.Threading.CancellationToken)" /> instead.</description></item></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.AlertsManagement.AlertProcessingRuleResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="subscriptionResource" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetServiceAlert">
      <MemberSignature Language="C#" Value="public static Azure.Response&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt; GetServiceAlert (this Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, Guid alertId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Response`1&lt;class Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt; GetServiceAlert(class Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, valuetype System.Guid alertId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetServiceAlert(Azure.ResourceManager.Resources.SubscriptionResource,System.Guid,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetServiceAlert (subscriptionResource As SubscriptionResource, alertId As Guid, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ServiceAlertResource)" />
      <MemberSignature Language="F#" Value="static member GetServiceAlert : Azure.ResourceManager.Resources.SubscriptionResource * Guid * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;" Usage="Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetServiceAlert (subscriptionResource, alertId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionResource" Type="Azure.ResourceManager.Resources.SubscriptionResource" RefType="this" />
        <Parameter Name="alertId" Type="System.Guid" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="subscriptionResource"> The <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        <param name="alertId"> Unique ID of an alert instance. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get information related to a specific alert
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts/{alertId}</description></item><item><term>Operation Id</term><description>Alerts_GetById</description></item></list><item><term>Mocking</term><description>To mock this method, please mock <see cref="M:Azure.ResourceManager.AlertsManagement.Mocking.MockableAlertsManagementSubscriptionResource.GetServiceAlert(System.Guid,System.Threading.CancellationToken)" /> instead.</description></item></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="subscriptionResource" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetServiceAlertAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;&gt; GetServiceAlertAsync (this Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, Guid alertId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;&gt; GetServiceAlertAsync(class Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, valuetype System.Guid alertId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetServiceAlertAsync(Azure.ResourceManager.Resources.SubscriptionResource,System.Guid,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetServiceAlertAsync (subscriptionResource As SubscriptionResource, alertId As Guid, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ServiceAlertResource))" />
      <MemberSignature Language="F#" Value="static member GetServiceAlertAsync : Azure.ResourceManager.Resources.SubscriptionResource * Guid * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;&gt;" Usage="Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetServiceAlertAsync (subscriptionResource, alertId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.AlertsManagement.ServiceAlertResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionResource" Type="Azure.ResourceManager.Resources.SubscriptionResource" RefType="this" />
        <Parameter Name="alertId" Type="System.Guid" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="subscriptionResource"> The <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        <param name="alertId"> Unique ID of an alert instance. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get information related to a specific alert
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts/{alertId}</description></item><item><term>Operation Id</term><description>Alerts_GetById</description></item></list><item><term>Mocking</term><description>To mock this method, please mock <see cref="M:Azure.ResourceManager.AlertsManagement.Mocking.MockableAlertsManagementSubscriptionResource.GetServiceAlertAsync(System.Guid,System.Threading.CancellationToken)" /> instead.</description></item></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="subscriptionResource" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetServiceAlertMetadata">
      <MemberSignature Language="C#" Value="public static Azure.Response&lt;Azure.ResourceManager.AlertsManagement.Models.ServiceAlertMetadata&gt; GetServiceAlertMetadata (this Azure.ResourceManager.Resources.TenantResource tenantResource, Azure.ResourceManager.AlertsManagement.Models.RetrievedInformationIdentifier identifier, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Response`1&lt;class Azure.ResourceManager.AlertsManagement.Models.ServiceAlertMetadata&gt; GetServiceAlertMetadata(class Azure.ResourceManager.Resources.TenantResource tenantResource, valuetype Azure.ResourceManager.AlertsManagement.Models.RetrievedInformationIdentifier identifier, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetServiceAlertMetadata(Azure.ResourceManager.Resources.TenantResource,Azure.ResourceManager.AlertsManagement.Models.RetrievedInformationIdentifier,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetServiceAlertMetadata (tenantResource As TenantResource, identifier As RetrievedInformationIdentifier, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ServiceAlertMetadata)" />
      <MemberSignature Language="F#" Value="static member GetServiceAlertMetadata : Azure.ResourceManager.Resources.TenantResource * Azure.ResourceManager.AlertsManagement.Models.RetrievedInformationIdentifier * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.AlertsManagement.Models.ServiceAlertMetadata&gt;" Usage="Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetServiceAlertMetadata (tenantResource, identifier, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.AlertsManagement.Models.ServiceAlertMetadata&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tenantResource" Type="Azure.ResourceManager.Resources.TenantResource" RefType="this" />
        <Parameter Name="identifier" Type="Azure.ResourceManager.AlertsManagement.Models.RetrievedInformationIdentifier" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tenantResource"> The <see cref="T:Azure.ResourceManager.Resources.TenantResource" /> instance the method will execute against. </param>
        <param name="identifier"> Identification of the information to be retrieved by API call. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            List alerts meta data information based on value of identifier parameter.
            <list type="bullet"><item><term>Request Path</term><description>/providers/Microsoft.AlertsManagement/alertsMetaData</description></item><item><term>Operation Id</term><description>Alerts_MetaData</description></item></list><item><term>Mocking</term><description>To mock this method, please mock <see cref="M:Azure.ResourceManager.AlertsManagement.Mocking.MockableAlertsManagementTenantResource.GetServiceAlertMetadata(Azure.ResourceManager.AlertsManagement.Models.RetrievedInformationIdentifier,System.Threading.CancellationToken)" /> instead.</description></item></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tenantResource" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetServiceAlertMetadataAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.AlertsManagement.Models.ServiceAlertMetadata&gt;&gt; GetServiceAlertMetadataAsync (this Azure.ResourceManager.Resources.TenantResource tenantResource, Azure.ResourceManager.AlertsManagement.Models.RetrievedInformationIdentifier identifier, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.AlertsManagement.Models.ServiceAlertMetadata&gt;&gt; GetServiceAlertMetadataAsync(class Azure.ResourceManager.Resources.TenantResource tenantResource, valuetype Azure.ResourceManager.AlertsManagement.Models.RetrievedInformationIdentifier identifier, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetServiceAlertMetadataAsync(Azure.ResourceManager.Resources.TenantResource,Azure.ResourceManager.AlertsManagement.Models.RetrievedInformationIdentifier,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetServiceAlertMetadataAsync (tenantResource As TenantResource, identifier As RetrievedInformationIdentifier, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ServiceAlertMetadata))" />
      <MemberSignature Language="F#" Value="static member GetServiceAlertMetadataAsync : Azure.ResourceManager.Resources.TenantResource * Azure.ResourceManager.AlertsManagement.Models.RetrievedInformationIdentifier * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.AlertsManagement.Models.ServiceAlertMetadata&gt;&gt;" Usage="Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetServiceAlertMetadataAsync (tenantResource, identifier, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.AlertsManagement.Models.ServiceAlertMetadata&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tenantResource" Type="Azure.ResourceManager.Resources.TenantResource" RefType="this" />
        <Parameter Name="identifier" Type="Azure.ResourceManager.AlertsManagement.Models.RetrievedInformationIdentifier" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tenantResource"> The <see cref="T:Azure.ResourceManager.Resources.TenantResource" /> instance the method will execute against. </param>
        <param name="identifier"> Identification of the information to be retrieved by API call. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            List alerts meta data information based on value of identifier parameter.
            <list type="bullet"><item><term>Request Path</term><description>/providers/Microsoft.AlertsManagement/alertsMetaData</description></item><item><term>Operation Id</term><description>Alerts_MetaData</description></item></list><item><term>Mocking</term><description>To mock this method, please mock <see cref="M:Azure.ResourceManager.AlertsManagement.Mocking.MockableAlertsManagementTenantResource.GetServiceAlertMetadata(Azure.ResourceManager.AlertsManagement.Models.RetrievedInformationIdentifier,System.Threading.CancellationToken)" /> instead.</description></item></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tenantResource" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetServiceAlertResource">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.AlertsManagement.ServiceAlertResource GetServiceAlertResource (this Azure.ResourceManager.ArmClient client, Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.AlertsManagement.ServiceAlertResource GetServiceAlertResource(class Azure.ResourceManager.ArmClient client, class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetServiceAlertResource(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetServiceAlertResource (client As ArmClient, id As ResourceIdentifier) As ServiceAlertResource" />
      <MemberSignature Language="F#" Value="static member GetServiceAlertResource : Azure.ResourceManager.ArmClient * Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.AlertsManagement.ServiceAlertResource" Usage="Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetServiceAlertResource (client, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.AlertsManagement.ServiceAlertResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="Azure.ResourceManager.ArmClient" RefType="this" />
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="client"> The <see cref="T:Azure.ResourceManager.ArmClient" /> instance the method will execute against. </param>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.AlertsManagement.ServiceAlertResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.AlertsManagement.ServiceAlertResource.CreateResourceIdentifier(System.String,System.Guid)" /> to create a <see cref="T:Azure.ResourceManager.AlertsManagement.ServiceAlertResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            <item><term>Mocking</term><description>To mock this method, please mock <see cref="M:Azure.ResourceManager.AlertsManagement.Mocking.MockableAlertsManagementArmClient.GetServiceAlertResource(Azure.Core.ResourceIdentifier)" /> instead.</description></item></summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.AlertsManagement.ServiceAlertResource" /> object. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="client" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetServiceAlerts">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.AlertsManagement.ServiceAlertCollection GetServiceAlerts (this Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.AlertsManagement.ServiceAlertCollection GetServiceAlerts(class Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetServiceAlerts(Azure.ResourceManager.Resources.SubscriptionResource)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetServiceAlerts (subscriptionResource As SubscriptionResource) As ServiceAlertCollection" />
      <MemberSignature Language="F#" Value="static member GetServiceAlerts : Azure.ResourceManager.Resources.SubscriptionResource -&gt; Azure.ResourceManager.AlertsManagement.ServiceAlertCollection" Usage="Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetServiceAlerts subscriptionResource" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.AlertsManagement.ServiceAlertCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionResource" Type="Azure.ResourceManager.Resources.SubscriptionResource" RefType="this" />
      </Parameters>
      <Docs>
        <param name="subscriptionResource"> The <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        <summary>
            Gets a collection of ServiceAlertResources in the SubscriptionResource.
            <item><term>Mocking</term><description>To mock this method, please mock <see cref="M:Azure.ResourceManager.AlertsManagement.Mocking.MockableAlertsManagementSubscriptionResource.GetServiceAlerts" /> instead.</description></item></summary>
        <returns> An object representing collection of ServiceAlertResources and their operations over a ServiceAlertResource. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="subscriptionResource" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetServiceAlertSummary">
      <MemberSignature Language="C#" Value="public static Azure.Response&lt;Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSummary&gt; GetServiceAlertSummary (this Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, Azure.ResourceManager.AlertsManagement.Models.SubscriptionResourceGetServiceAlertSummaryOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Response`1&lt;class Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSummary&gt; GetServiceAlertSummary(class Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, class Azure.ResourceManager.AlertsManagement.Models.SubscriptionResourceGetServiceAlertSummaryOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetServiceAlertSummary(Azure.ResourceManager.Resources.SubscriptionResource,Azure.ResourceManager.AlertsManagement.Models.SubscriptionResourceGetServiceAlertSummaryOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetServiceAlertSummary (subscriptionResource As SubscriptionResource, options As SubscriptionResourceGetServiceAlertSummaryOptions, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ServiceAlertSummary)" />
      <MemberSignature Language="F#" Value="static member GetServiceAlertSummary : Azure.ResourceManager.Resources.SubscriptionResource * Azure.ResourceManager.AlertsManagement.Models.SubscriptionResourceGetServiceAlertSummaryOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSummary&gt;" Usage="Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetServiceAlertSummary (subscriptionResource, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSummary&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionResource" Type="Azure.ResourceManager.Resources.SubscriptionResource" RefType="this" />
        <Parameter Name="options" Type="Azure.ResourceManager.AlertsManagement.Models.SubscriptionResourceGetServiceAlertSummaryOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="subscriptionResource"> The <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        <param name="options"> A property bag which contains all the parameters of this method except the LRO qualifier and request context parameter. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get a summarized count of your alerts grouped by various parameters (e.g. grouping by 'Severity' returns the count of alerts for each severity).
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alertsSummary</description></item><item><term>Operation Id</term><description>Alerts_GetSummary</description></item></list><item><term>Mocking</term><description>To mock this method, please mock <see cref="M:Azure.ResourceManager.AlertsManagement.Mocking.MockableAlertsManagementSubscriptionResource.GetServiceAlertSummary(Azure.ResourceManager.AlertsManagement.Models.SubscriptionResourceGetServiceAlertSummaryOptions,System.Threading.CancellationToken)" /> instead.</description></item></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="subscriptionResource" /> or <paramref name="options" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetServiceAlertSummary">
      <MemberSignature Language="C#" Value="public static Azure.Response&lt;Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSummary&gt; GetServiceAlertSummary (this Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, Azure.ResourceManager.AlertsManagement.Models.AlertsSummaryGroupByField groupby, bool? includeSmartGroupsCount = default, string targetResource = default, string targetResourceType = default, string targetResourceGroup = default, Azure.ResourceManager.AlertsManagement.Models.MonitorServiceSourceForAlert? monitorService = default, Azure.ResourceManager.AlertsManagement.Models.MonitorCondition? monitorCondition = default, Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSeverity? severity = default, Azure.ResourceManager.AlertsManagement.Models.ServiceAlertState? alertState = default, string alertRule = default, Azure.ResourceManager.AlertsManagement.Models.TimeRangeFilter? timeRange = default, string customTimeRange = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Response`1&lt;class Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSummary&gt; GetServiceAlertSummary(class Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, valuetype Azure.ResourceManager.AlertsManagement.Models.AlertsSummaryGroupByField groupby, valuetype System.Nullable`1&lt;bool&gt; includeSmartGroupsCount, string targetResource, string targetResourceType, string targetResourceGroup, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.AlertsManagement.Models.MonitorServiceSourceForAlert&gt; monitorService, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.AlertsManagement.Models.MonitorCondition&gt; monitorCondition, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSeverity&gt; severity, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.AlertsManagement.Models.ServiceAlertState&gt; alertState, string alertRule, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.AlertsManagement.Models.TimeRangeFilter&gt; timeRange, string customTimeRange, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetServiceAlertSummary(Azure.ResourceManager.Resources.SubscriptionResource,Azure.ResourceManager.AlertsManagement.Models.AlertsSummaryGroupByField,System.Nullable{System.Boolean},System.String,System.String,System.String,System.Nullable{Azure.ResourceManager.AlertsManagement.Models.MonitorServiceSourceForAlert},System.Nullable{Azure.ResourceManager.AlertsManagement.Models.MonitorCondition},System.Nullable{Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSeverity},System.Nullable{Azure.ResourceManager.AlertsManagement.Models.ServiceAlertState},System.String,System.Nullable{Azure.ResourceManager.AlertsManagement.Models.TimeRangeFilter},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetServiceAlertSummary (subscriptionResource As SubscriptionResource, groupby As AlertsSummaryGroupByField, Optional includeSmartGroupsCount As Nullable(Of Boolean) = Nothing, Optional targetResource As String = Nothing, Optional targetResourceType As String = Nothing, Optional targetResourceGroup As String = Nothing, Optional monitorService As Nullable(Of MonitorServiceSourceForAlert) = Nothing, Optional monitorCondition As Nullable(Of MonitorCondition) = Nothing, Optional severity As Nullable(Of ServiceAlertSeverity) = Nothing, Optional alertState As Nullable(Of ServiceAlertState) = Nothing, Optional alertRule As String = Nothing, Optional timeRange As Nullable(Of TimeRangeFilter) = Nothing, Optional customTimeRange As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ServiceAlertSummary)" />
      <MemberSignature Language="F#" Value="static member GetServiceAlertSummary : Azure.ResourceManager.Resources.SubscriptionResource * Azure.ResourceManager.AlertsManagement.Models.AlertsSummaryGroupByField * Nullable&lt;bool&gt; * string * string * string * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.MonitorServiceSourceForAlert&gt; * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.MonitorCondition&gt; * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSeverity&gt; * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.ServiceAlertState&gt; * string * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.TimeRangeFilter&gt; * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSummary&gt;" Usage="Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetServiceAlertSummary (subscriptionResource, groupby, includeSmartGroupsCount, targetResource, targetResourceType, targetResourceGroup, monitorService, monitorCondition, severity, alertState, alertRule, timeRange, customTimeRange, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSummary&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionResource" Type="Azure.ResourceManager.Resources.SubscriptionResource" RefType="this" />
        <Parameter Name="groupby" Type="Azure.ResourceManager.AlertsManagement.Models.AlertsSummaryGroupByField" />
        <Parameter Name="includeSmartGroupsCount" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="targetResource" Type="System.String" />
        <Parameter Name="targetResourceType" Type="System.String" />
        <Parameter Name="targetResourceGroup" Type="System.String" />
        <Parameter Name="monitorService" Type="System.Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.MonitorServiceSourceForAlert&gt;" />
        <Parameter Name="monitorCondition" Type="System.Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.MonitorCondition&gt;" />
        <Parameter Name="severity" Type="System.Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSeverity&gt;" />
        <Parameter Name="alertState" Type="System.Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.ServiceAlertState&gt;" />
        <Parameter Name="alertRule" Type="System.String" />
        <Parameter Name="timeRange" Type="System.Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.TimeRangeFilter&gt;" />
        <Parameter Name="customTimeRange" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="subscriptionResource"> The <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        <param name="groupby"> This parameter allows the result set to be grouped by input fields (Maximum 2 comma separated fields supported). For example, groupby=severity or groupby=severity,alertstate. </param>
        <param name="includeSmartGroupsCount"> Include count of the SmartGroups as part of the summary. Default value is 'false'. </param>
        <param name="targetResource"> Filter by target resource( which is full ARM ID) Default value is select all. </param>
        <param name="targetResourceType"> Filter by target resource type. Default value is select all. </param>
        <param name="targetResourceGroup"> Filter by target resource group name. Default value is select all. </param>
        <param name="monitorService"> Filter by monitor service which generates the alert instance. Default value is select all. </param>
        <param name="monitorCondition"> Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all. </param>
        <param name="severity"> Filter by severity.  Default value is select all. </param>
        <param name="alertState"> Filter by state of the alert instance. Default value is to select all. </param>
        <param name="alertRule"> Filter by specific alert rule.  Default value is to select all. </param>
        <param name="timeRange"> Filter by time range by below listed values. Default value is 1 day. </param>
        <param name="customTimeRange"> Filter by custom time range in the format &lt;start-time&gt;/&lt;end-time&gt;  where time is in (ISO-8601 format)'. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get a summarized count of your alerts grouped by various parameters (e.g. grouping by 'Severity' returns the count of alerts for each severity).
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alertsSummary</description></item><item><term>Operation Id</term><description>Alerts_GetSummary</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetServiceAlertSummaryAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSummary&gt;&gt; GetServiceAlertSummaryAsync (this Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, Azure.ResourceManager.AlertsManagement.Models.SubscriptionResourceGetServiceAlertSummaryOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSummary&gt;&gt; GetServiceAlertSummaryAsync(class Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, class Azure.ResourceManager.AlertsManagement.Models.SubscriptionResourceGetServiceAlertSummaryOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetServiceAlertSummaryAsync(Azure.ResourceManager.Resources.SubscriptionResource,Azure.ResourceManager.AlertsManagement.Models.SubscriptionResourceGetServiceAlertSummaryOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetServiceAlertSummaryAsync (subscriptionResource As SubscriptionResource, options As SubscriptionResourceGetServiceAlertSummaryOptions, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ServiceAlertSummary))" />
      <MemberSignature Language="F#" Value="static member GetServiceAlertSummaryAsync : Azure.ResourceManager.Resources.SubscriptionResource * Azure.ResourceManager.AlertsManagement.Models.SubscriptionResourceGetServiceAlertSummaryOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSummary&gt;&gt;" Usage="Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetServiceAlertSummaryAsync (subscriptionResource, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSummary&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionResource" Type="Azure.ResourceManager.Resources.SubscriptionResource" RefType="this" />
        <Parameter Name="options" Type="Azure.ResourceManager.AlertsManagement.Models.SubscriptionResourceGetServiceAlertSummaryOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="subscriptionResource"> The <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        <param name="options"> A property bag which contains all the parameters of this method except the LRO qualifier and request context parameter. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get a summarized count of your alerts grouped by various parameters (e.g. grouping by 'Severity' returns the count of alerts for each severity).
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alertsSummary</description></item><item><term>Operation Id</term><description>Alerts_GetSummary</description></item></list><item><term>Mocking</term><description>To mock this method, please mock <see cref="M:Azure.ResourceManager.AlertsManagement.Mocking.MockableAlertsManagementSubscriptionResource.GetServiceAlertSummary(Azure.ResourceManager.AlertsManagement.Models.SubscriptionResourceGetServiceAlertSummaryOptions,System.Threading.CancellationToken)" /> instead.</description></item></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="subscriptionResource" /> or <paramref name="options" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetServiceAlertSummaryAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSummary&gt;&gt; GetServiceAlertSummaryAsync (this Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, Azure.ResourceManager.AlertsManagement.Models.AlertsSummaryGroupByField groupby, bool? includeSmartGroupsCount = default, string targetResource = default, string targetResourceType = default, string targetResourceGroup = default, Azure.ResourceManager.AlertsManagement.Models.MonitorServiceSourceForAlert? monitorService = default, Azure.ResourceManager.AlertsManagement.Models.MonitorCondition? monitorCondition = default, Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSeverity? severity = default, Azure.ResourceManager.AlertsManagement.Models.ServiceAlertState? alertState = default, string alertRule = default, Azure.ResourceManager.AlertsManagement.Models.TimeRangeFilter? timeRange = default, string customTimeRange = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSummary&gt;&gt; GetServiceAlertSummaryAsync(class Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, valuetype Azure.ResourceManager.AlertsManagement.Models.AlertsSummaryGroupByField groupby, valuetype System.Nullable`1&lt;bool&gt; includeSmartGroupsCount, string targetResource, string targetResourceType, string targetResourceGroup, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.AlertsManagement.Models.MonitorServiceSourceForAlert&gt; monitorService, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.AlertsManagement.Models.MonitorCondition&gt; monitorCondition, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSeverity&gt; severity, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.AlertsManagement.Models.ServiceAlertState&gt; alertState, string alertRule, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.AlertsManagement.Models.TimeRangeFilter&gt; timeRange, string customTimeRange, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetServiceAlertSummaryAsync(Azure.ResourceManager.Resources.SubscriptionResource,Azure.ResourceManager.AlertsManagement.Models.AlertsSummaryGroupByField,System.Nullable{System.Boolean},System.String,System.String,System.String,System.Nullable{Azure.ResourceManager.AlertsManagement.Models.MonitorServiceSourceForAlert},System.Nullable{Azure.ResourceManager.AlertsManagement.Models.MonitorCondition},System.Nullable{Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSeverity},System.Nullable{Azure.ResourceManager.AlertsManagement.Models.ServiceAlertState},System.String,System.Nullable{Azure.ResourceManager.AlertsManagement.Models.TimeRangeFilter},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetServiceAlertSummaryAsync (subscriptionResource As SubscriptionResource, groupby As AlertsSummaryGroupByField, Optional includeSmartGroupsCount As Nullable(Of Boolean) = Nothing, Optional targetResource As String = Nothing, Optional targetResourceType As String = Nothing, Optional targetResourceGroup As String = Nothing, Optional monitorService As Nullable(Of MonitorServiceSourceForAlert) = Nothing, Optional monitorCondition As Nullable(Of MonitorCondition) = Nothing, Optional severity As Nullable(Of ServiceAlertSeverity) = Nothing, Optional alertState As Nullable(Of ServiceAlertState) = Nothing, Optional alertRule As String = Nothing, Optional timeRange As Nullable(Of TimeRangeFilter) = Nothing, Optional customTimeRange As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ServiceAlertSummary))" />
      <MemberSignature Language="F#" Value="static member GetServiceAlertSummaryAsync : Azure.ResourceManager.Resources.SubscriptionResource * Azure.ResourceManager.AlertsManagement.Models.AlertsSummaryGroupByField * Nullable&lt;bool&gt; * string * string * string * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.MonitorServiceSourceForAlert&gt; * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.MonitorCondition&gt; * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSeverity&gt; * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.ServiceAlertState&gt; * string * Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.TimeRangeFilter&gt; * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSummary&gt;&gt;" Usage="Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetServiceAlertSummaryAsync (subscriptionResource, groupby, includeSmartGroupsCount, targetResource, targetResourceType, targetResourceGroup, monitorService, monitorCondition, severity, alertState, alertRule, timeRange, customTimeRange, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSummary&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionResource" Type="Azure.ResourceManager.Resources.SubscriptionResource" RefType="this" />
        <Parameter Name="groupby" Type="Azure.ResourceManager.AlertsManagement.Models.AlertsSummaryGroupByField" />
        <Parameter Name="includeSmartGroupsCount" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="targetResource" Type="System.String" />
        <Parameter Name="targetResourceType" Type="System.String" />
        <Parameter Name="targetResourceGroup" Type="System.String" />
        <Parameter Name="monitorService" Type="System.Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.MonitorServiceSourceForAlert&gt;" />
        <Parameter Name="monitorCondition" Type="System.Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.MonitorCondition&gt;" />
        <Parameter Name="severity" Type="System.Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.ServiceAlertSeverity&gt;" />
        <Parameter Name="alertState" Type="System.Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.ServiceAlertState&gt;" />
        <Parameter Name="alertRule" Type="System.String" />
        <Parameter Name="timeRange" Type="System.Nullable&lt;Azure.ResourceManager.AlertsManagement.Models.TimeRangeFilter&gt;" />
        <Parameter Name="customTimeRange" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="subscriptionResource"> The <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        <param name="groupby"> This parameter allows the result set to be grouped by input fields (Maximum 2 comma separated fields supported). For example, groupby=severity or groupby=severity,alertstate. </param>
        <param name="includeSmartGroupsCount"> Include count of the SmartGroups as part of the summary. Default value is 'false'. </param>
        <param name="targetResource"> Filter by target resource( which is full ARM ID) Default value is select all. </param>
        <param name="targetResourceType"> Filter by target resource type. Default value is select all. </param>
        <param name="targetResourceGroup"> Filter by target resource group name. Default value is select all. </param>
        <param name="monitorService"> Filter by monitor service which generates the alert instance. Default value is select all. </param>
        <param name="monitorCondition"> Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all. </param>
        <param name="severity"> Filter by severity.  Default value is select all. </param>
        <param name="alertState"> Filter by state of the alert instance. Default value is to select all. </param>
        <param name="alertRule"> Filter by specific alert rule.  Default value is to select all. </param>
        <param name="timeRange"> Filter by time range by below listed values. Default value is 1 day. </param>
        <param name="customTimeRange"> Filter by custom time range in the format &lt;start-time&gt;/&lt;end-time&gt;  where time is in (ISO-8601 format)'. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get a summarized count of your alerts grouped by various parameters (e.g. grouping by 'Severity' returns the count of alerts for each severity).
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alertsSummary</description></item><item><term>Operation Id</term><description>Alerts_GetSummary</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSmartGroup">
      <MemberSignature Language="C#" Value="public static Azure.Response&lt;Azure.ResourceManager.AlertsManagement.SmartGroupResource&gt; GetSmartGroup (this Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, Guid smartGroupId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Response`1&lt;class Azure.ResourceManager.AlertsManagement.SmartGroupResource&gt; GetSmartGroup(class Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, valuetype System.Guid smartGroupId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetSmartGroup(Azure.ResourceManager.Resources.SubscriptionResource,System.Guid,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSmartGroup (subscriptionResource As SubscriptionResource, smartGroupId As Guid, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SmartGroupResource)" />
      <MemberSignature Language="F#" Value="static member GetSmartGroup : Azure.ResourceManager.Resources.SubscriptionResource * Guid * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.AlertsManagement.SmartGroupResource&gt;" Usage="Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetSmartGroup (subscriptionResource, smartGroupId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.AlertsManagement.SmartGroupResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionResource" Type="Azure.ResourceManager.Resources.SubscriptionResource" RefType="this" />
        <Parameter Name="smartGroupId" Type="System.Guid" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="subscriptionResource"> The <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        <param name="smartGroupId"> Smart group unique id. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get information related to a specific Smart Group.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups/{smartGroupId}</description></item><item><term>Operation Id</term><description>SmartGroups_GetById</description></item></list><item><term>Mocking</term><description>To mock this method, please mock <see cref="M:Azure.ResourceManager.AlertsManagement.Mocking.MockableAlertsManagementSubscriptionResource.GetSmartGroup(System.Guid,System.Threading.CancellationToken)" /> instead.</description></item></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="subscriptionResource" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSmartGroupAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.AlertsManagement.SmartGroupResource&gt;&gt; GetSmartGroupAsync (this Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, Guid smartGroupId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.AlertsManagement.SmartGroupResource&gt;&gt; GetSmartGroupAsync(class Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, valuetype System.Guid smartGroupId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetSmartGroupAsync(Azure.ResourceManager.Resources.SubscriptionResource,System.Guid,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSmartGroupAsync (subscriptionResource As SubscriptionResource, smartGroupId As Guid, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SmartGroupResource))" />
      <MemberSignature Language="F#" Value="static member GetSmartGroupAsync : Azure.ResourceManager.Resources.SubscriptionResource * Guid * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.AlertsManagement.SmartGroupResource&gt;&gt;" Usage="Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetSmartGroupAsync (subscriptionResource, smartGroupId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.AlertsManagement.SmartGroupResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionResource" Type="Azure.ResourceManager.Resources.SubscriptionResource" RefType="this" />
        <Parameter Name="smartGroupId" Type="System.Guid" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="subscriptionResource"> The <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        <param name="smartGroupId"> Smart group unique id. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get information related to a specific Smart Group.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups/{smartGroupId}</description></item><item><term>Operation Id</term><description>SmartGroups_GetById</description></item></list><item><term>Mocking</term><description>To mock this method, please mock <see cref="M:Azure.ResourceManager.AlertsManagement.Mocking.MockableAlertsManagementSubscriptionResource.GetSmartGroupAsync(System.Guid,System.Threading.CancellationToken)" /> instead.</description></item></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="subscriptionResource" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSmartGroupResource">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.AlertsManagement.SmartGroupResource GetSmartGroupResource (this Azure.ResourceManager.ArmClient client, Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.AlertsManagement.SmartGroupResource GetSmartGroupResource(class Azure.ResourceManager.ArmClient client, class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetSmartGroupResource(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSmartGroupResource (client As ArmClient, id As ResourceIdentifier) As SmartGroupResource" />
      <MemberSignature Language="F#" Value="static member GetSmartGroupResource : Azure.ResourceManager.ArmClient * Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.AlertsManagement.SmartGroupResource" Usage="Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetSmartGroupResource (client, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.AlertsManagement.SmartGroupResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="Azure.ResourceManager.ArmClient" RefType="this" />
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="client"> The <see cref="T:Azure.ResourceManager.ArmClient" /> instance the method will execute against. </param>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.AlertsManagement.SmartGroupResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.AlertsManagement.SmartGroupResource.CreateResourceIdentifier(System.String,System.Guid)" /> to create a <see cref="T:Azure.ResourceManager.AlertsManagement.SmartGroupResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            <item><term>Mocking</term><description>To mock this method, please mock <see cref="M:Azure.ResourceManager.AlertsManagement.Mocking.MockableAlertsManagementArmClient.GetSmartGroupResource(Azure.Core.ResourceIdentifier)" /> instead.</description></item></summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.AlertsManagement.SmartGroupResource" /> object. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="client" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSmartGroups">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.AlertsManagement.SmartGroupCollection GetSmartGroups (this Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.AlertsManagement.SmartGroupCollection GetSmartGroups(class Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetSmartGroups(Azure.ResourceManager.Resources.SubscriptionResource)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSmartGroups (subscriptionResource As SubscriptionResource) As SmartGroupCollection" />
      <MemberSignature Language="F#" Value="static member GetSmartGroups : Azure.ResourceManager.Resources.SubscriptionResource -&gt; Azure.ResourceManager.AlertsManagement.SmartGroupCollection" Usage="Azure.ResourceManager.AlertsManagement.AlertsManagementExtensions.GetSmartGroups subscriptionResource" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.AlertsManagement.SmartGroupCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionResource" Type="Azure.ResourceManager.Resources.SubscriptionResource" RefType="this" />
      </Parameters>
      <Docs>
        <param name="subscriptionResource"> The <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        <summary>
            Gets a collection of SmartGroupResources in the SubscriptionResource.
            <item><term>Mocking</term><description>To mock this method, please mock <see cref="M:Azure.ResourceManager.AlertsManagement.Mocking.MockableAlertsManagementSubscriptionResource.GetSmartGroups" /> instead.</description></item></summary>
        <returns> An object representing collection of SmartGroupResources and their operations over a SmartGroupResource. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="subscriptionResource" /> is null. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
