<Type Name="AsyncInitializer" FullName="Mono.CSharp.AsyncInitializer">
  <TypeSignature Language="C#" Value="public class AsyncInitializer : Mono.CSharp.StateMachineInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AsyncInitializer extends Mono.CSharp.StateMachineInitializer" />
  <TypeSignature Language="DocId" Value="T:Mono.CSharp.AsyncInitializer" />
  <AssemblyInfo>
    <AssemblyName>Mono.CSharp</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Mono.CSharp.StateMachineInitializer</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AsyncInitializer (Mono.CSharp.ParametersBlock block, Mono.CSharp.TypeDefinition host, Mono.CSharp.TypeSpec returnType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Mono.CSharp.ParametersBlock block, class Mono.CSharp.TypeDefinition host, class Mono.CSharp.TypeSpec returnType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.AsyncInitializer.#ctor(Mono.CSharp.ParametersBlock,Mono.CSharp.TypeDefinition,Mono.CSharp.TypeSpec)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="block" Type="Mono.CSharp.ParametersBlock" />
        <Parameter Name="host" Type="Mono.CSharp.TypeDefinition" />
        <Parameter Name="returnType" Type="Mono.CSharp.TypeSpec" />
      </Parameters>
      <Docs>
        <param name="block">To be added.</param>
        <param name="host">To be added.</param>
        <param name="returnType">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainerType">
      <MemberSignature Language="C#" Value="public override string ContainerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContainerType" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.AsyncInitializer.ContainerType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateBlockContext">
      <MemberSignature Language="C#" Value="protected override Mono.CSharp.BlockContext CreateBlockContext (Mono.CSharp.BlockContext bc);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Mono.CSharp.BlockContext CreateBlockContext(class Mono.CSharp.BlockContext bc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.AsyncInitializer.CreateBlockContext(Mono.CSharp.BlockContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.BlockContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bc" Type="Mono.CSharp.BlockContext" />
      </Parameters>
      <Docs>
        <param name="bc">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DelegateType">
      <MemberSignature Language="C#" Value="public Mono.CSharp.TypeSpec DelegateType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Mono.CSharp.TypeSpec DelegateType" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.AsyncInitializer.DelegateType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.TypeSpec</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Emit">
      <MemberSignature Language="C#" Value="public override void Emit (Mono.CSharp.EmitContext ec);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Emit(class Mono.CSharp.EmitContext ec) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.AsyncInitializer.Emit(Mono.CSharp.EmitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.EmitContext" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EmitCatchBlock">
      <MemberSignature Language="C#" Value="public void EmitCatchBlock (Mono.CSharp.EmitContext ec);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmitCatchBlock(class Mono.CSharp.EmitContext ec) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.AsyncInitializer.EmitCatchBlock(Mono.CSharp.EmitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.EmitContext" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EmitMoveNextEpilogue">
      <MemberSignature Language="C#" Value="protected override void EmitMoveNextEpilogue (Mono.CSharp.EmitContext ec);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void EmitMoveNextEpilogue(class Mono.CSharp.EmitContext ec) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.AsyncInitializer.EmitMoveNextEpilogue(Mono.CSharp.EmitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.EmitContext" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EmitStatement">
      <MemberSignature Language="C#" Value="public override void EmitStatement (Mono.CSharp.EmitContext ec);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EmitStatement(class Mono.CSharp.EmitContext ec) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.AsyncInitializer.EmitStatement(Mono.CSharp.EmitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.EmitContext" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HoistedReturnState">
      <MemberSignature Language="C#" Value="public Mono.CSharp.StackFieldExpr HoistedReturnState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Mono.CSharp.StackFieldExpr HoistedReturnState" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.AsyncInitializer.HoistedReturnState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.StackFieldExpr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIterator">
      <MemberSignature Language="C#" Value="public override bool IsIterator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsIterator" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.AsyncInitializer.IsIterator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarkReachable">
      <MemberSignature Language="C#" Value="public override void MarkReachable (Mono.CSharp.Reachability rc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void MarkReachable(valuetype Mono.CSharp.Reachability rc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.AsyncInitializer.MarkReachable(Mono.CSharp.Reachability)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rc" Type="Mono.CSharp.Reachability" />
      </Parameters>
      <Docs>
        <param name="rc">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnTypeInference">
      <MemberSignature Language="C#" Value="public Mono.CSharp.TypeInferenceContext ReturnTypeInference { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Mono.CSharp.TypeInferenceContext ReturnTypeInference" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.AsyncInitializer.ReturnTypeInference" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.TypeInferenceContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>