<Type Name="Binary" FullName="Mono.CSharp.Binary">
  <TypeSignature Language="C#" Value="public class Binary : Mono.CSharp.Expression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Binary extends Mono.CSharp.Expression" />
  <TypeSignature Language="DocId" Value="T:Mono.CSharp.Binary" />
  <AssemblyInfo>
    <AssemblyName>Mono.CSharp</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Mono.CSharp.Expression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binary (Mono.CSharp.Binary.Operator oper, Mono.CSharp.Expression left, Mono.CSharp.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype Mono.CSharp.Binary/Operator oper, class Mono.CSharp.Expression left, class Mono.CSharp.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Binary.#ctor(Mono.CSharp.Binary.Operator,Mono.CSharp.Expression,Mono.CSharp.Expression)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="oper" Type="Mono.CSharp.Binary+Operator" />
        <Parameter Name="left" Type="Mono.CSharp.Expression" />
        <Parameter Name="right" Type="Mono.CSharp.Expression" />
      </Parameters>
      <Docs>
        <param name="oper">To be added.</param>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binary (Mono.CSharp.Binary.Operator oper, Mono.CSharp.Expression left, Mono.CSharp.Expression right, Mono.CSharp.Binary.State state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype Mono.CSharp.Binary/Operator oper, class Mono.CSharp.Expression left, class Mono.CSharp.Expression right, valuetype Mono.CSharp.Binary/State state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Binary.#ctor(Mono.CSharp.Binary.Operator,Mono.CSharp.Expression,Mono.CSharp.Expression,Mono.CSharp.Binary.State)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="oper" Type="Mono.CSharp.Binary+Operator" />
        <Parameter Name="left" Type="Mono.CSharp.Expression" />
        <Parameter Name="right" Type="Mono.CSharp.Expression" />
        <Parameter Name="state" Type="Mono.CSharp.Binary+State" />
      </Parameters>
      <Docs>
        <param name="oper">To be added.</param>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="state">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binary (Mono.CSharp.Binary.Operator oper, Mono.CSharp.Expression left, Mono.CSharp.Expression right, Mono.CSharp.Location loc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype Mono.CSharp.Binary/Operator oper, class Mono.CSharp.Expression left, class Mono.CSharp.Expression right, valuetype Mono.CSharp.Location loc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Binary.#ctor(Mono.CSharp.Binary.Operator,Mono.CSharp.Expression,Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="oper" Type="Mono.CSharp.Binary+Operator" />
        <Parameter Name="left" Type="Mono.CSharp.Expression" />
        <Parameter Name="right" Type="Mono.CSharp.Expression" />
        <Parameter Name="loc" Type="Mono.CSharp.Location" />
      </Parameters>
      <Docs>
        <param name="oper">To be added.</param>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="loc">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binary (Mono.CSharp.Binary.Operator oper, Mono.CSharp.Expression left, Mono.CSharp.Expression right, bool isCompound);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype Mono.CSharp.Binary/Operator oper, class Mono.CSharp.Expression left, class Mono.CSharp.Expression right, bool isCompound) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Binary.#ctor(Mono.CSharp.Binary.Operator,Mono.CSharp.Expression,Mono.CSharp.Expression,System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="oper" Type="Mono.CSharp.Binary+Operator" />
        <Parameter Name="left" Type="Mono.CSharp.Expression" />
        <Parameter Name="right" Type="Mono.CSharp.Expression" />
        <Parameter Name="isCompound" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="oper">To be added.</param>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="isCompound">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="public override object Accept (Mono.CSharp.StructuralVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object Accept(class Mono.CSharp.StructuralVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Binary.Accept(Mono.CSharp.StructuralVisitor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="Mono.CSharp.StructuralVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneTo">
      <MemberSignature Language="C#" Value="protected override void CloneTo (Mono.CSharp.CloneContext clonectx, Mono.CSharp.Expression t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CloneTo(class Mono.CSharp.CloneContext clonectx, class Mono.CSharp.Expression t) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Binary.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clonectx" Type="Mono.CSharp.CloneContext" />
        <Parameter Name="t" Type="Mono.CSharp.Expression" />
      </Parameters>
      <Docs>
        <param name="clonectx">To be added.</param>
        <param name="t">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsEmitWithAwait">
      <MemberSignature Language="C#" Value="public override bool ContainsEmitWithAwait ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool ContainsEmitWithAwait() cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Binary.ContainsEmitWithAwait" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCallSiteBinder">
      <MemberSignature Language="C#" Value="public Mono.CSharp.Expression CreateCallSiteBinder (Mono.CSharp.ResolveContext ec, Mono.CSharp.Arguments args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Mono.CSharp.Expression CreateCallSiteBinder(class Mono.CSharp.ResolveContext ec, class Mono.CSharp.Arguments args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Binary.CreateCallSiteBinder(Mono.CSharp.ResolveContext,Mono.CSharp.Arguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.ResolveContext" />
        <Parameter Name="args" Type="Mono.CSharp.Arguments" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEqualityLiftedOperatorsTable">
      <MemberSignature Language="C#" Value="public static Mono.CSharp.Binary.PredefinedOperator[] CreateEqualityLiftedOperatorsTable (Mono.CSharp.ModuleContainer module);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Mono.CSharp.Binary/PredefinedOperator[] CreateEqualityLiftedOperatorsTable(class Mono.CSharp.ModuleContainer module) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Binary.CreateEqualityLiftedOperatorsTable(Mono.CSharp.ModuleContainer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.Binary+PredefinedOperator[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="module" Type="Mono.CSharp.ModuleContainer" />
      </Parameters>
      <Docs>
        <param name="module">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEqualityOperatorsTable">
      <MemberSignature Language="C#" Value="public static Mono.CSharp.Binary.PredefinedOperator[] CreateEqualityOperatorsTable (Mono.CSharp.BuiltinTypes types);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Mono.CSharp.Binary/PredefinedOperator[] CreateEqualityOperatorsTable(class Mono.CSharp.BuiltinTypes types) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Binary.CreateEqualityOperatorsTable(Mono.CSharp.BuiltinTypes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.Binary+PredefinedOperator[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="Mono.CSharp.BuiltinTypes" />
      </Parameters>
      <Docs>
        <param name="types">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateExpressionTree">
      <MemberSignature Language="C#" Value="public override Mono.CSharp.Expression CreateExpressionTree (Mono.CSharp.ResolveContext ec);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Mono.CSharp.Expression CreateExpressionTree(class Mono.CSharp.ResolveContext ec) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Binary.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.ResolveContext" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateExpressionTree">
      <MemberSignature Language="C#" Value="public Mono.CSharp.Expression CreateExpressionTree (Mono.CSharp.ResolveContext ec, Mono.CSharp.Expression method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Mono.CSharp.Expression CreateExpressionTree(class Mono.CSharp.ResolveContext ec, class Mono.CSharp.Expression method) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Binary.CreateExpressionTree(Mono.CSharp.ResolveContext,Mono.CSharp.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.ResolveContext" />
        <Parameter Name="method" Type="Mono.CSharp.Expression" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <param name="method">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateLiftedValueTypeResult">
      <MemberSignature Language="C#" Value="public Mono.CSharp.Expression CreateLiftedValueTypeResult (Mono.CSharp.ResolveContext rc, Mono.CSharp.TypeSpec valueType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Mono.CSharp.Expression CreateLiftedValueTypeResult(class Mono.CSharp.ResolveContext rc, class Mono.CSharp.TypeSpec valueType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Binary.CreateLiftedValueTypeResult(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rc" Type="Mono.CSharp.ResolveContext" />
        <Parameter Name="valueType" Type="Mono.CSharp.TypeSpec" />
      </Parameters>
      <Docs>
        <param name="rc">To be added.</param>
        <param name="valueType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePointerOperatorsTable">
      <MemberSignature Language="C#" Value="public static Mono.CSharp.Binary.PredefinedOperator[] CreatePointerOperatorsTable (Mono.CSharp.BuiltinTypes types);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Mono.CSharp.Binary/PredefinedOperator[] CreatePointerOperatorsTable(class Mono.CSharp.BuiltinTypes types) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Binary.CreatePointerOperatorsTable(Mono.CSharp.BuiltinTypes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.Binary+PredefinedOperator[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="Mono.CSharp.BuiltinTypes" />
      </Parameters>
      <Docs>
        <param name="types">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateStandardLiftedOperatorsTable">
      <MemberSignature Language="C#" Value="public static Mono.CSharp.Binary.PredefinedOperator[] CreateStandardLiftedOperatorsTable (Mono.CSharp.ModuleContainer module);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Mono.CSharp.Binary/PredefinedOperator[] CreateStandardLiftedOperatorsTable(class Mono.CSharp.ModuleContainer module) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Binary.CreateStandardLiftedOperatorsTable(Mono.CSharp.ModuleContainer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.Binary+PredefinedOperator[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="module" Type="Mono.CSharp.ModuleContainer" />
      </Parameters>
      <Docs>
        <param name="module">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateStandardOperatorsTable">
      <MemberSignature Language="C#" Value="public static Mono.CSharp.Binary.PredefinedOperator[] CreateStandardOperatorsTable (Mono.CSharp.BuiltinTypes types);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Mono.CSharp.Binary/PredefinedOperator[] CreateStandardOperatorsTable(class Mono.CSharp.BuiltinTypes types) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Binary.CreateStandardOperatorsTable(Mono.CSharp.BuiltinTypes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.Binary+PredefinedOperator[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="Mono.CSharp.BuiltinTypes" />
      </Parameters>
      <Docs>
        <param name="types">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoResolve">
      <MemberSignature Language="C#" Value="protected override Mono.CSharp.Expression DoResolve (Mono.CSharp.ResolveContext ec);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Mono.CSharp.Expression DoResolve(class Mono.CSharp.ResolveContext ec) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Binary.DoResolve(Mono.CSharp.ResolveContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.ResolveContext" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Emit">
      <MemberSignature Language="C#" Value="public override void Emit (Mono.CSharp.EmitContext ec);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Emit(class Mono.CSharp.EmitContext ec) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Binary.Emit(Mono.CSharp.EmitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.EmitContext" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EmitBranchable">
      <MemberSignature Language="C#" Value="public override void EmitBranchable (Mono.CSharp.EmitContext ec, System.Reflection.Emit.Label target, bool on_true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EmitBranchable(class Mono.CSharp.EmitContext ec, valuetype System.Reflection.Emit.Label target, bool on_true) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Binary.EmitBranchable(Mono.CSharp.EmitContext,System.Reflection.Emit.Label,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.EmitContext" />
        <Parameter Name="target" Type="System.Reflection.Emit.Label" />
        <Parameter Name="on_true" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <param name="target">To be added.</param>
        <param name="on_true">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EmitOperator">
      <MemberSignature Language="C#" Value="public void EmitOperator (Mono.CSharp.EmitContext ec, Mono.CSharp.Expression left, Mono.CSharp.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmitOperator(class Mono.CSharp.EmitContext ec, class Mono.CSharp.Expression left, class Mono.CSharp.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Binary.EmitOperator(Mono.CSharp.EmitContext,Mono.CSharp.Expression,Mono.CSharp.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.EmitContext" />
        <Parameter Name="left" Type="Mono.CSharp.Expression" />
        <Parameter Name="right" Type="Mono.CSharp.Expression" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EmitOperatorOpcode">
      <MemberSignature Language="C#" Value="public static void EmitOperatorOpcode (Mono.CSharp.EmitContext ec, Mono.CSharp.Binary.Operator oper, Mono.CSharp.TypeSpec l, Mono.CSharp.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EmitOperatorOpcode(class Mono.CSharp.EmitContext ec, valuetype Mono.CSharp.Binary/Operator oper, class Mono.CSharp.TypeSpec l, class Mono.CSharp.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Binary.EmitOperatorOpcode(Mono.CSharp.EmitContext,Mono.CSharp.Binary.Operator,Mono.CSharp.TypeSpec,Mono.CSharp.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.EmitContext" />
        <Parameter Name="oper" Type="Mono.CSharp.Binary+Operator" />
        <Parameter Name="l" Type="Mono.CSharp.TypeSpec" />
        <Parameter Name="right" Type="Mono.CSharp.Expression" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <param name="oper">To be added.</param>
        <param name="l">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EmitSideEffect">
      <MemberSignature Language="C#" Value="public override void EmitSideEffect (Mono.CSharp.EmitContext ec);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EmitSideEffect(class Mono.CSharp.EmitContext ec) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Binary.EmitSideEffect(Mono.CSharp.EmitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.EmitContext" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EmitToField">
      <MemberSignature Language="C#" Value="public override Mono.CSharp.Expression EmitToField (Mono.CSharp.EmitContext ec);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Mono.CSharp.Expression EmitToField(class Mono.CSharp.EmitContext ec) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Binary.EmitToField(Mono.CSharp.EmitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.EmitContext" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Error_OperatorCannotBeApplied">
      <MemberSignature Language="C#" Value="public static void Error_OperatorCannotBeApplied (Mono.CSharp.ResolveContext ec, Mono.CSharp.Expression left, Mono.CSharp.Expression right, Mono.CSharp.Binary.Operator oper, Mono.CSharp.Location loc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Error_OperatorCannotBeApplied(class Mono.CSharp.ResolveContext ec, class Mono.CSharp.Expression left, class Mono.CSharp.Expression right, valuetype Mono.CSharp.Binary/Operator oper, valuetype Mono.CSharp.Location loc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Binary.Error_OperatorCannotBeApplied(Mono.CSharp.ResolveContext,Mono.CSharp.Expression,Mono.CSharp.Expression,Mono.CSharp.Binary.Operator,Mono.CSharp.Location)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.ResolveContext" />
        <Parameter Name="left" Type="Mono.CSharp.Expression" />
        <Parameter Name="right" Type="Mono.CSharp.Expression" />
        <Parameter Name="oper" Type="Mono.CSharp.Binary+Operator" />
        <Parameter Name="loc" Type="Mono.CSharp.Location" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="oper">To be added.</param>
        <param name="loc">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Error_OperatorCannotBeApplied">
      <MemberSignature Language="C#" Value="public static void Error_OperatorCannotBeApplied (Mono.CSharp.ResolveContext ec, Mono.CSharp.Expression left, Mono.CSharp.Expression right, string oper, Mono.CSharp.Location loc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Error_OperatorCannotBeApplied(class Mono.CSharp.ResolveContext ec, class Mono.CSharp.Expression left, class Mono.CSharp.Expression right, string oper, valuetype Mono.CSharp.Location loc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Binary.Error_OperatorCannotBeApplied(Mono.CSharp.ResolveContext,Mono.CSharp.Expression,Mono.CSharp.Expression,System.String,Mono.CSharp.Location)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.ResolveContext" />
        <Parameter Name="left" Type="Mono.CSharp.Expression" />
        <Parameter Name="right" Type="Mono.CSharp.Expression" />
        <Parameter Name="oper" Type="System.String" />
        <Parameter Name="loc" Type="Mono.CSharp.Location" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <param name="oper">To be added.</param>
        <param name="loc">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FlowAnalysis">
      <MemberSignature Language="C#" Value="public override void FlowAnalysis (Mono.CSharp.FlowAnalysisContext fc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void FlowAnalysis(class Mono.CSharp.FlowAnalysisContext fc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Binary.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fc" Type="Mono.CSharp.FlowAnalysisContext" />
      </Parameters>
      <Docs>
        <param name="fc">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FlowAnalysisConditional">
      <MemberSignature Language="C#" Value="public override void FlowAnalysisConditional (Mono.CSharp.FlowAnalysisContext fc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void FlowAnalysisConditional(class Mono.CSharp.FlowAnalysisContext fc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Binary.FlowAnalysisConditional(Mono.CSharp.FlowAnalysisContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fc" Type="Mono.CSharp.FlowAnalysisContext" />
      </Parameters>
      <Docs>
        <param name="fc">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumResultCast">
      <MemberSignature Language="C#" Value="public static Mono.CSharp.ConvCast.Mode GetEnumResultCast (Mono.CSharp.TypeSpec type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Mono.CSharp.ConvCast/Mode GetEnumResultCast(class Mono.CSharp.TypeSpec type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Binary.GetEnumResultCast(Mono.CSharp.TypeSpec)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.ConvCast+Mode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Mono.CSharp.TypeSpec" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompound">
      <MemberSignature Language="C#" Value="public bool IsCompound { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompound" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.Binary.IsCompound" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public Mono.CSharp.Expression Left { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Mono.CSharp.Expression Left" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.Binary.Left" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeExpression">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression MakeExpression (Mono.CSharp.BuilderContext ctx);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression MakeExpression(class Mono.CSharp.BuilderContext ctx) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Binary.MakeExpression(Mono.CSharp.BuilderContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctx" Type="Mono.CSharp.BuilderContext" />
      </Parameters>
      <Docs>
        <param name="ctx">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeExpression">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression MakeExpression (Mono.CSharp.BuilderContext ctx, Mono.CSharp.Expression left, Mono.CSharp.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression MakeExpression(class Mono.CSharp.BuilderContext ctx, class Mono.CSharp.Expression left, class Mono.CSharp.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Binary.MakeExpression(Mono.CSharp.BuilderContext,Mono.CSharp.Expression,Mono.CSharp.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctx" Type="Mono.CSharp.BuilderContext" />
        <Parameter Name="left" Type="Mono.CSharp.Expression" />
        <Parameter Name="right" Type="Mono.CSharp.Expression" />
      </Parameters>
      <Docs>
        <param name="ctx">To be added.</param>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Oper">
      <MemberSignature Language="C#" Value="public Mono.CSharp.Binary.Operator Oper { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Mono.CSharp.Binary/Operator Oper" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.Binary.Oper" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.Binary+Operator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveOperator">
      <MemberSignature Language="C#" Value="public Mono.CSharp.Expression ResolveOperator (Mono.CSharp.ResolveContext rc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Mono.CSharp.Expression ResolveOperator(class Mono.CSharp.ResolveContext rc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Binary.ResolveOperator(Mono.CSharp.ResolveContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rc" Type="Mono.CSharp.ResolveContext" />
      </Parameters>
      <Docs>
        <param name="rc">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public Mono.CSharp.Expression Right { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Mono.CSharp.Expression Right" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.Binary.Right" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartLocation">
      <MemberSignature Language="C#" Value="public override Mono.CSharp.Location StartLocation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Mono.CSharp.Location StartLocation" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.Binary.StartLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.Location</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>