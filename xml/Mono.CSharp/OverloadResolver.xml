<Type Name="OverloadResolver" FullName="Mono.CSharp.OverloadResolver">
  <TypeSignature Language="C#" Value="public struct OverloadResolver" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit OverloadResolver extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:Mono.CSharp.OverloadResolver" />
  <AssemblyInfo>
    <AssemblyName>Mono.CSharp</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OverloadResolver (System.Collections.Generic.IList&lt;Mono.CSharp.MemberSpec&gt; members, Mono.CSharp.OverloadResolver.Restrictions restrictions, Mono.CSharp.Location loc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IList`1&lt;class Mono.CSharp.MemberSpec&gt; members, valuetype Mono.CSharp.OverloadResolver/Restrictions restrictions, valuetype Mono.CSharp.Location loc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.OverloadResolver.#ctor(System.Collections.Generic.IList{Mono.CSharp.MemberSpec},Mono.CSharp.OverloadResolver.Restrictions,Mono.CSharp.Location)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="members" Type="System.Collections.Generic.IList&lt;Mono.CSharp.MemberSpec&gt;" />
        <Parameter Name="restrictions" Type="Mono.CSharp.OverloadResolver+Restrictions" />
        <Parameter Name="loc" Type="Mono.CSharp.Location" />
      </Parameters>
      <Docs>
        <param name="members">To be added.</param>
        <param name="restrictions">To be added.</param>
        <param name="loc">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OverloadResolver (System.Collections.Generic.IList&lt;Mono.CSharp.MemberSpec&gt; members, Mono.CSharp.TypeArguments targs, Mono.CSharp.OverloadResolver.Restrictions restrictions, Mono.CSharp.Location loc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IList`1&lt;class Mono.CSharp.MemberSpec&gt; members, class Mono.CSharp.TypeArguments targs, valuetype Mono.CSharp.OverloadResolver/Restrictions restrictions, valuetype Mono.CSharp.Location loc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.OverloadResolver.#ctor(System.Collections.Generic.IList{Mono.CSharp.MemberSpec},Mono.CSharp.TypeArguments,Mono.CSharp.OverloadResolver.Restrictions,Mono.CSharp.Location)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="members" Type="System.Collections.Generic.IList&lt;Mono.CSharp.MemberSpec&gt;" />
        <Parameter Name="targs" Type="Mono.CSharp.TypeArguments" />
        <Parameter Name="restrictions" Type="Mono.CSharp.OverloadResolver+Restrictions" />
        <Parameter Name="loc" Type="Mono.CSharp.Location" />
      </Parameters>
      <Docs>
        <param name="members">To be added.</param>
        <param name="targs">To be added.</param>
        <param name="restrictions">To be added.</param>
        <param name="loc">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseMembersProvider">
      <MemberSignature Language="C#" Value="public Mono.CSharp.OverloadResolver.IBaseMembersProvider BaseMembersProvider { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Mono.CSharp.OverloadResolver/IBaseMembersProvider BaseMembersProvider" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.OverloadResolver.BaseMembersProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.OverloadResolver+IBaseMembersProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BestCandidateIsDynamic">
      <MemberSignature Language="C#" Value="public bool BestCandidateIsDynamic { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BestCandidateIsDynamic" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.OverloadResolver.BestCandidateIsDynamic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BestCandidateNewMethodGroup">
      <MemberSignature Language="C#" Value="public Mono.CSharp.MethodGroupExpr BestCandidateNewMethodGroup { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Mono.CSharp.MethodGroupExpr BestCandidateNewMethodGroup" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.OverloadResolver.BestCandidateNewMethodGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.MethodGroupExpr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BestCandidateReturnType">
      <MemberSignature Language="C#" Value="public Mono.CSharp.TypeSpec BestCandidateReturnType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Mono.CSharp.TypeSpec BestCandidateReturnType" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.OverloadResolver.BestCandidateReturnType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.TypeSpec</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BetterTypeConversion">
      <MemberSignature Language="C#" Value="public static int BetterTypeConversion (Mono.CSharp.ResolveContext ec, Mono.CSharp.TypeSpec p, Mono.CSharp.TypeSpec q);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 BetterTypeConversion(class Mono.CSharp.ResolveContext ec, class Mono.CSharp.TypeSpec p, class Mono.CSharp.TypeSpec q) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.OverloadResolver.BetterTypeConversion(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.ResolveContext" />
        <Parameter Name="p" Type="Mono.CSharp.TypeSpec" />
        <Parameter Name="q" Type="Mono.CSharp.TypeSpec" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <param name="p">To be added.</param>
        <param name="q">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomErrors">
      <MemberSignature Language="C#" Value="public Mono.CSharp.OverloadResolver.IErrorHandler CustomErrors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Mono.CSharp.OverloadResolver/IErrorHandler CustomErrors" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.OverloadResolver.CustomErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.OverloadResolver+IErrorHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Error_ConstructorMismatch">
      <MemberSignature Language="C#" Value="public static void Error_ConstructorMismatch (Mono.CSharp.ResolveContext rc, Mono.CSharp.TypeSpec type, int argCount, Mono.CSharp.Location loc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Error_ConstructorMismatch(class Mono.CSharp.ResolveContext rc, class Mono.CSharp.TypeSpec type, int32 argCount, valuetype Mono.CSharp.Location loc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.OverloadResolver.Error_ConstructorMismatch(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec,System.Int32,Mono.CSharp.Location)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rc" Type="Mono.CSharp.ResolveContext" />
        <Parameter Name="type" Type="Mono.CSharp.TypeSpec" />
        <Parameter Name="argCount" Type="System.Int32" />
        <Parameter Name="loc" Type="Mono.CSharp.Location" />
      </Parameters>
      <Docs>
        <param name="rc">To be added.</param>
        <param name="type">To be added.</param>
        <param name="argCount">To be added.</param>
        <param name="loc">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InstanceQualifier">
      <MemberSignature Language="C#" Value="public Mono.CSharp.OverloadResolver.IInstanceQualifier InstanceQualifier { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Mono.CSharp.OverloadResolver/IInstanceQualifier InstanceQualifier" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.OverloadResolver.InstanceQualifier" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.OverloadResolver+IInstanceQualifier</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveDefaultValueArgument">
      <MemberSignature Language="C#" Value="public static Mono.CSharp.Expression ResolveDefaultValueArgument (Mono.CSharp.ResolveContext ec, Mono.CSharp.TypeSpec ptype, Mono.CSharp.Expression e, Mono.CSharp.Location loc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Mono.CSharp.Expression ResolveDefaultValueArgument(class Mono.CSharp.ResolveContext ec, class Mono.CSharp.TypeSpec ptype, class Mono.CSharp.Expression e, valuetype Mono.CSharp.Location loc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.OverloadResolver.ResolveDefaultValueArgument(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec,Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.ResolveContext" />
        <Parameter Name="ptype" Type="Mono.CSharp.TypeSpec" />
        <Parameter Name="e" Type="Mono.CSharp.Expression" />
        <Parameter Name="loc" Type="Mono.CSharp.Location" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <param name="ptype">To be added.</param>
        <param name="e">To be added.</param>
        <param name="loc">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveMember&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T ResolveMember&lt;T&gt; (Mono.CSharp.ResolveContext rc, ref Mono.CSharp.Arguments args) where T : Mono.CSharp.MemberSpec, Mono.CSharp.IParametersMember;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T ResolveMember&lt;(class Mono.CSharp.MemberSpec, class Mono.CSharp.IParametersMember) T&gt;(class Mono.CSharp.ResolveContext rc, class Mono.CSharp.Arguments args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.OverloadResolver.ResolveMember``1(Mono.CSharp.ResolveContext,Mono.CSharp.Arguments@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>Mono.CSharp.MemberSpec</BaseTypeName>
            <InterfaceName>Mono.CSharp.IParametersMember</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="rc" Type="Mono.CSharp.ResolveContext" />
        <Parameter Name="args" Type="Mono.CSharp.Arguments&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="rc">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveOperator">
      <MemberSignature Language="C#" Value="public Mono.CSharp.MethodSpec ResolveOperator (Mono.CSharp.ResolveContext rc, ref Mono.CSharp.Arguments args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Mono.CSharp.MethodSpec ResolveOperator(class Mono.CSharp.ResolveContext rc, class Mono.CSharp.Arguments args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.OverloadResolver.ResolveOperator(Mono.CSharp.ResolveContext,Mono.CSharp.Arguments@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.MethodSpec</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rc" Type="Mono.CSharp.ResolveContext" />
        <Parameter Name="args" Type="Mono.CSharp.Arguments&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="rc">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>