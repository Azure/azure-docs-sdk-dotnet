<Type Name="AnonymousMethodExpression" FullName="Mono.CSharp.AnonymousMethodExpression">
  <TypeSignature Language="C#" Value="public class AnonymousMethodExpression : Mono.CSharp.Expression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AnonymousMethodExpression extends Mono.CSharp.Expression" />
  <TypeSignature Language="DocId" Value="T:Mono.CSharp.AnonymousMethodExpression" />
  <AssemblyInfo>
    <AssemblyName>Mono.CSharp</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Mono.CSharp.Expression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AnonymousMethodExpression (Mono.CSharp.Location loc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype Mono.CSharp.Location loc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.AnonymousMethodExpression.#ctor(Mono.CSharp.Location)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="loc" Type="Mono.CSharp.Location" />
      </Parameters>
      <Docs>
        <param name="loc">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="public override object Accept (Mono.CSharp.StructuralVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object Accept(class Mono.CSharp.StructuralVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.AnonymousMethodExpression.Accept(Mono.CSharp.StructuralVisitor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="Mono.CSharp.StructuralVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public Mono.CSharp.ParametersBlock Block;" />
      <MemberSignature Language="ILAsm" Value=".field public class Mono.CSharp.ParametersBlock Block" />
      <MemberSignature Language="DocId" Value="F:Mono.CSharp.AnonymousMethodExpression.Block" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.ParametersBlock</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneTo">
      <MemberSignature Language="C#" Value="protected override void CloneTo (Mono.CSharp.CloneContext clonectx, Mono.CSharp.Expression t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CloneTo(class Mono.CSharp.CloneContext clonectx, class Mono.CSharp.Expression t) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.AnonymousMethodExpression.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clonectx" Type="Mono.CSharp.CloneContext" />
        <Parameter Name="t" Type="Mono.CSharp.Expression" />
      </Parameters>
      <Docs>
        <param name="clonectx">To be added.</param>
        <param name="t">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Compatible">
      <MemberSignature Language="C#" Value="public Mono.CSharp.Expression Compatible (Mono.CSharp.ResolveContext ec, Mono.CSharp.TypeSpec type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Mono.CSharp.Expression Compatible(class Mono.CSharp.ResolveContext ec, class Mono.CSharp.TypeSpec type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.AnonymousMethodExpression.Compatible(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.ResolveContext" />
        <Parameter Name="type" Type="Mono.CSharp.TypeSpec" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <param name="type">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompatibleMethodFactory">
      <MemberSignature Language="C#" Value="protected virtual Mono.CSharp.AnonymousMethodBody CompatibleMethodFactory (Mono.CSharp.TypeSpec return_type, Mono.CSharp.TypeSpec delegate_type, Mono.CSharp.ParametersCompiled p, Mono.CSharp.ParametersBlock b);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Mono.CSharp.AnonymousMethodBody CompatibleMethodFactory(class Mono.CSharp.TypeSpec return_type, class Mono.CSharp.TypeSpec delegate_type, class Mono.CSharp.ParametersCompiled p, class Mono.CSharp.ParametersBlock b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.AnonymousMethodExpression.CompatibleMethodFactory(Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec,Mono.CSharp.ParametersCompiled,Mono.CSharp.ParametersBlock)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.AnonymousMethodBody</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="return_type" Type="Mono.CSharp.TypeSpec" />
        <Parameter Name="delegate_type" Type="Mono.CSharp.TypeSpec" />
        <Parameter Name="p" Type="Mono.CSharp.ParametersCompiled" />
        <Parameter Name="b" Type="Mono.CSharp.ParametersBlock" />
      </Parameters>
      <Docs>
        <param name="return_type">To be added.</param>
        <param name="delegate_type">To be added.</param>
        <param name="p">To be added.</param>
        <param name="b">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsEmitWithAwait">
      <MemberSignature Language="C#" Value="public override bool ContainsEmitWithAwait ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool ContainsEmitWithAwait() cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.AnonymousMethodExpression.ContainsEmitWithAwait" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateExpressionTree">
      <MemberSignature Language="C#" Value="public override Mono.CSharp.Expression CreateExpressionTree (Mono.CSharp.ResolveContext ec);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Mono.CSharp.Expression CreateExpressionTree(class Mono.CSharp.ResolveContext ec) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.AnonymousMethodExpression.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.ResolveContext" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateExpressionTree">
      <MemberSignature Language="C#" Value="protected virtual Mono.CSharp.Expression CreateExpressionTree (Mono.CSharp.ResolveContext ec, Mono.CSharp.TypeSpec delegate_type);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Mono.CSharp.Expression CreateExpressionTree(class Mono.CSharp.ResolveContext ec, class Mono.CSharp.TypeSpec delegate_type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.AnonymousMethodExpression.CreateExpressionTree(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.ResolveContext" />
        <Parameter Name="delegate_type" Type="Mono.CSharp.TypeSpec" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <param name="delegate_type">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoResolve">
      <MemberSignature Language="C#" Value="protected override Mono.CSharp.Expression DoResolve (Mono.CSharp.ResolveContext rc);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Mono.CSharp.Expression DoResolve(class Mono.CSharp.ResolveContext rc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.AnonymousMethodExpression.DoResolve(Mono.CSharp.ResolveContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rc" Type="Mono.CSharp.ResolveContext" />
      </Parameters>
      <Docs>
        <param name="rc">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoResolveParameters">
      <MemberSignature Language="C#" Value="protected virtual bool DoResolveParameters (Mono.CSharp.ResolveContext rc);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool DoResolveParameters(class Mono.CSharp.ResolveContext rc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.AnonymousMethodExpression.DoResolveParameters(Mono.CSharp.ResolveContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rc" Type="Mono.CSharp.ResolveContext" />
      </Parameters>
      <Docs>
        <param name="rc">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Emit">
      <MemberSignature Language="C#" Value="public override void Emit (Mono.CSharp.EmitContext ec);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Emit(class Mono.CSharp.EmitContext ec) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.AnonymousMethodExpression.Emit(Mono.CSharp.EmitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.EmitContext" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Error_AddressOfCapturedVar">
      <MemberSignature Language="C#" Value="public static void Error_AddressOfCapturedVar (Mono.CSharp.ResolveContext rc, Mono.CSharp.IVariableReference var, Mono.CSharp.Location loc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Error_AddressOfCapturedVar(class Mono.CSharp.ResolveContext rc, class Mono.CSharp.IVariableReference var, valuetype Mono.CSharp.Location loc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.AnonymousMethodExpression.Error_AddressOfCapturedVar(Mono.CSharp.ResolveContext,Mono.CSharp.IVariableReference,Mono.CSharp.Location)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rc" Type="Mono.CSharp.ResolveContext" />
        <Parameter Name="var" Type="Mono.CSharp.IVariableReference" />
        <Parameter Name="loc" Type="Mono.CSharp.Location" />
      </Parameters>
      <Docs>
        <param name="rc">To be added.</param>
        <param name="var">To be added.</param>
        <param name="loc">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExplicitTypeInference">
      <MemberSignature Language="C#" Value="public bool ExplicitTypeInference (Mono.CSharp.TypeInferenceContext type_inference, Mono.CSharp.TypeSpec delegate_type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ExplicitTypeInference(class Mono.CSharp.TypeInferenceContext type_inference, class Mono.CSharp.TypeSpec delegate_type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.AnonymousMethodExpression.ExplicitTypeInference(Mono.CSharp.TypeInferenceContext,Mono.CSharp.TypeSpec)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type_inference" Type="Mono.CSharp.TypeInferenceContext" />
        <Parameter Name="delegate_type" Type="Mono.CSharp.TypeSpec" />
      </Parameters>
      <Docs>
        <param name="type_inference">To be added.</param>
        <param name="delegate_type">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExprClassName">
      <MemberSignature Language="C#" Value="public override string ExprClassName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ExprClassName" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.AnonymousMethodExpression.ExprClassName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSignatureForError">
      <MemberSignature Language="C#" Value="public override string GetSignatureForError ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetSignatureForError() cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.AnonymousMethodExpression.GetSignatureForError" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasExplicitParameters">
      <MemberSignature Language="C#" Value="public virtual bool HasExplicitParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasExplicitParameters" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.AnonymousMethodExpression.HasExplicitParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImplicitStandardConversionExists">
      <MemberSignature Language="C#" Value="public bool ImplicitStandardConversionExists (Mono.CSharp.ResolveContext ec, Mono.CSharp.TypeSpec delegate_type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ImplicitStandardConversionExists(class Mono.CSharp.ResolveContext ec, class Mono.CSharp.TypeSpec delegate_type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.AnonymousMethodExpression.ImplicitStandardConversionExists(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.ResolveContext" />
        <Parameter Name="delegate_type" Type="Mono.CSharp.TypeSpec" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <param name="delegate_type">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InferReturnType">
      <MemberSignature Language="C#" Value="public Mono.CSharp.TypeSpec InferReturnType (Mono.CSharp.ResolveContext ec, Mono.CSharp.TypeInferenceContext tic, Mono.CSharp.TypeSpec delegate_type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Mono.CSharp.TypeSpec InferReturnType(class Mono.CSharp.ResolveContext ec, class Mono.CSharp.TypeInferenceContext tic, class Mono.CSharp.TypeSpec delegate_type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.AnonymousMethodExpression.InferReturnType(Mono.CSharp.ResolveContext,Mono.CSharp.TypeInferenceContext,Mono.CSharp.TypeSpec)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.TypeSpec</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.ResolveContext" />
        <Parameter Name="tic" Type="Mono.CSharp.TypeInferenceContext" />
        <Parameter Name="delegate_type" Type="Mono.CSharp.TypeSpec" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <param name="tic">To be added.</param>
        <param name="delegate_type">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSideEffectFree">
      <MemberSignature Language="C#" Value="public override bool IsSideEffectFree { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSideEffectFree" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.AnonymousMethodExpression.IsSideEffectFree" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameters">
      <MemberSignature Language="C#" Value="public Mono.CSharp.ParametersCompiled Parameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Mono.CSharp.ParametersCompiled Parameters" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.AnonymousMethodExpression.Parameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.ParametersCompiled</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveParameters">
      <MemberSignature Language="C#" Value="protected virtual Mono.CSharp.ParametersCompiled ResolveParameters (Mono.CSharp.ResolveContext ec, Mono.CSharp.TypeInferenceContext tic, Mono.CSharp.TypeSpec delegate_type);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Mono.CSharp.ParametersCompiled ResolveParameters(class Mono.CSharp.ResolveContext ec, class Mono.CSharp.TypeInferenceContext tic, class Mono.CSharp.TypeSpec delegate_type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.AnonymousMethodExpression.ResolveParameters(Mono.CSharp.ResolveContext,Mono.CSharp.TypeInferenceContext,Mono.CSharp.TypeSpec)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.ParametersCompiled</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.ResolveContext" />
        <Parameter Name="tic" Type="Mono.CSharp.TypeInferenceContext" />
        <Parameter Name="delegate_type" Type="Mono.CSharp.TypeSpec" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <param name="tic">To be added.</param>
        <param name="delegate_type">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeInferenceReportPrinter">
      <MemberSignature Language="C#" Value="public Mono.CSharp.ReportPrinter TypeInferenceReportPrinter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Mono.CSharp.ReportPrinter TypeInferenceReportPrinter" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.AnonymousMethodExpression.TypeInferenceReportPrinter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.ReportPrinter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyExplicitParameters">
      <MemberSignature Language="C#" Value="protected bool VerifyExplicitParameters (Mono.CSharp.ResolveContext ec, Mono.CSharp.TypeInferenceContext tic, Mono.CSharp.TypeSpec delegate_type, Mono.CSharp.AParametersCollection parameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool VerifyExplicitParameters(class Mono.CSharp.ResolveContext ec, class Mono.CSharp.TypeInferenceContext tic, class Mono.CSharp.TypeSpec delegate_type, class Mono.CSharp.AParametersCollection parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.AnonymousMethodExpression.VerifyExplicitParameters(Mono.CSharp.ResolveContext,Mono.CSharp.TypeInferenceContext,Mono.CSharp.TypeSpec,Mono.CSharp.AParametersCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.ResolveContext" />
        <Parameter Name="tic" Type="Mono.CSharp.TypeInferenceContext" />
        <Parameter Name="delegate_type" Type="Mono.CSharp.TypeSpec" />
        <Parameter Name="parameters" Type="Mono.CSharp.AParametersCollection" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <param name="tic">To be added.</param>
        <param name="delegate_type">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyParameterCompatibility">
      <MemberSignature Language="C#" Value="protected bool VerifyParameterCompatibility (Mono.CSharp.ResolveContext ec, Mono.CSharp.TypeInferenceContext tic, Mono.CSharp.TypeSpec delegate_type, Mono.CSharp.AParametersCollection invoke_pd, bool ignore_errors);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool VerifyParameterCompatibility(class Mono.CSharp.ResolveContext ec, class Mono.CSharp.TypeInferenceContext tic, class Mono.CSharp.TypeSpec delegate_type, class Mono.CSharp.AParametersCollection invoke_pd, bool ignore_errors) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.AnonymousMethodExpression.VerifyParameterCompatibility(Mono.CSharp.ResolveContext,Mono.CSharp.TypeInferenceContext,Mono.CSharp.TypeSpec,Mono.CSharp.AParametersCollection,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.ResolveContext" />
        <Parameter Name="tic" Type="Mono.CSharp.TypeInferenceContext" />
        <Parameter Name="delegate_type" Type="Mono.CSharp.TypeSpec" />
        <Parameter Name="invoke_pd" Type="Mono.CSharp.AParametersCollection" />
        <Parameter Name="ignore_errors" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <param name="tic">To be added.</param>
        <param name="delegate_type">To be added.</param>
        <param name="invoke_pd">To be added.</param>
        <param name="ignore_errors">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>