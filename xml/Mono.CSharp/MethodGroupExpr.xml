<Type Name="MethodGroupExpr" FullName="Mono.CSharp.MethodGroupExpr">
  <TypeSignature Language="C#" Value="public class MethodGroupExpr : Mono.CSharp.MemberExpr, Mono.CSharp.OverloadResolver.IBaseMembersProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MethodGroupExpr extends Mono.CSharp.MemberExpr implements class Mono.CSharp.OverloadResolver/IBaseMembersProvider" />
  <TypeSignature Language="DocId" Value="T:Mono.CSharp.MethodGroupExpr" />
  <AssemblyInfo>
    <AssemblyName>Mono.CSharp</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Mono.CSharp.MemberExpr</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Mono.CSharp.OverloadResolver+IBaseMembersProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MethodGroupExpr (Mono.CSharp.MethodSpec m, Mono.CSharp.TypeSpec type, Mono.CSharp.Location loc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Mono.CSharp.MethodSpec m, class Mono.CSharp.TypeSpec type, valuetype Mono.CSharp.Location loc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.MethodGroupExpr.#ctor(Mono.CSharp.MethodSpec,Mono.CSharp.TypeSpec,Mono.CSharp.Location)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="m" Type="Mono.CSharp.MethodSpec" />
        <Parameter Name="type" Type="Mono.CSharp.TypeSpec" />
        <Parameter Name="loc" Type="Mono.CSharp.Location" />
      </Parameters>
      <Docs>
        <param name="m">To be added.</param>
        <param name="type">To be added.</param>
        <param name="loc">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MethodGroupExpr (System.Collections.Generic.IList&lt;Mono.CSharp.MemberSpec&gt; mi, Mono.CSharp.TypeSpec type, Mono.CSharp.Location loc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IList`1&lt;class Mono.CSharp.MemberSpec&gt; mi, class Mono.CSharp.TypeSpec type, valuetype Mono.CSharp.Location loc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.MethodGroupExpr.#ctor(System.Collections.Generic.IList{Mono.CSharp.MemberSpec},Mono.CSharp.TypeSpec,Mono.CSharp.Location)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mi" Type="System.Collections.Generic.IList&lt;Mono.CSharp.MemberSpec&gt;" />
        <Parameter Name="type" Type="Mono.CSharp.TypeSpec" />
        <Parameter Name="loc" Type="Mono.CSharp.Location" />
      </Parameters>
      <Docs>
        <param name="mi">To be added.</param>
        <param name="type">To be added.</param>
        <param name="loc">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BestCandidate">
      <MemberSignature Language="C#" Value="public Mono.CSharp.MethodSpec BestCandidate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Mono.CSharp.MethodSpec BestCandidate" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.MethodGroupExpr.BestCandidate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.MethodSpec</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BestCandidateReturnType">
      <MemberSignature Language="C#" Value="public Mono.CSharp.TypeSpec BestCandidateReturnType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Mono.CSharp.TypeSpec BestCandidateReturnType" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.MethodGroupExpr.BestCandidateReturnType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.TypeSpec</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Candidates">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;Mono.CSharp.MemberSpec&gt; Candidates { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class Mono.CSharp.MemberSpec&gt; Candidates" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.MethodGroupExpr.Candidates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Mono.CSharp.MemberSpec&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateExpressionTree">
      <MemberSignature Language="C#" Value="public override Mono.CSharp.Expression CreateExpressionTree (Mono.CSharp.ResolveContext ec);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Mono.CSharp.Expression CreateExpressionTree(class Mono.CSharp.ResolveContext ec) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.MethodGroupExpr.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.ResolveContext" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePredefined">
      <MemberSignature Language="C#" Value="public static Mono.CSharp.MethodGroupExpr CreatePredefined (Mono.CSharp.MethodSpec best, Mono.CSharp.TypeSpec queriedType, Mono.CSharp.Location loc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Mono.CSharp.MethodGroupExpr CreatePredefined(class Mono.CSharp.MethodSpec best, class Mono.CSharp.TypeSpec queriedType, valuetype Mono.CSharp.Location loc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.MethodGroupExpr.CreatePredefined(Mono.CSharp.MethodSpec,Mono.CSharp.TypeSpec,Mono.CSharp.Location)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.MethodGroupExpr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="best" Type="Mono.CSharp.MethodSpec" />
        <Parameter Name="queriedType" Type="Mono.CSharp.TypeSpec" />
        <Parameter Name="loc" Type="Mono.CSharp.Location" />
      </Parameters>
      <Docs>
        <param name="best">To be added.</param>
        <param name="queriedType">To be added.</param>
        <param name="loc">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="protected override Mono.CSharp.TypeSpec DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Mono.CSharp.TypeSpec DeclaringType" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.MethodGroupExpr.DeclaringType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.TypeSpec</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoResolve">
      <MemberSignature Language="C#" Value="protected override Mono.CSharp.Expression DoResolve (Mono.CSharp.ResolveContext ec);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Mono.CSharp.Expression DoResolve(class Mono.CSharp.ResolveContext ec) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.MethodGroupExpr.DoResolve(Mono.CSharp.ResolveContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.ResolveContext" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Emit">
      <MemberSignature Language="C#" Value="public override void Emit (Mono.CSharp.EmitContext ec);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Emit(class Mono.CSharp.EmitContext ec) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.MethodGroupExpr.Emit(Mono.CSharp.EmitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.EmitContext" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EmitCall">
      <MemberSignature Language="C#" Value="public void EmitCall (Mono.CSharp.EmitContext ec, Mono.CSharp.Arguments arguments, bool statement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmitCall(class Mono.CSharp.EmitContext ec, class Mono.CSharp.Arguments arguments, bool statement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.MethodGroupExpr.EmitCall(Mono.CSharp.EmitContext,Mono.CSharp.Arguments,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.EmitContext" />
        <Parameter Name="arguments" Type="Mono.CSharp.Arguments" />
        <Parameter Name="statement" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <param name="arguments">To be added.</param>
        <param name="statement">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EmitCall">
      <MemberSignature Language="C#" Value="public void EmitCall (Mono.CSharp.EmitContext ec, Mono.CSharp.Arguments arguments, Mono.CSharp.TypeSpec conditionalAccessReceiver, bool statement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmitCall(class Mono.CSharp.EmitContext ec, class Mono.CSharp.Arguments arguments, class Mono.CSharp.TypeSpec conditionalAccessReceiver, bool statement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.MethodGroupExpr.EmitCall(Mono.CSharp.EmitContext,Mono.CSharp.Arguments,Mono.CSharp.TypeSpec,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.EmitContext" />
        <Parameter Name="arguments" Type="Mono.CSharp.Arguments" />
        <Parameter Name="conditionalAccessReceiver" Type="Mono.CSharp.TypeSpec" />
        <Parameter Name="statement" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <param name="arguments">To be added.</param>
        <param name="conditionalAccessReceiver">To be added.</param>
        <param name="statement">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Error_ValueCannotBeConverted">
      <MemberSignature Language="C#" Value="public override void Error_ValueCannotBeConverted (Mono.CSharp.ResolveContext ec, Mono.CSharp.TypeSpec target, bool expl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Error_ValueCannotBeConverted(class Mono.CSharp.ResolveContext ec, class Mono.CSharp.TypeSpec target, bool expl) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.MethodGroupExpr.Error_ValueCannotBeConverted(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.ResolveContext" />
        <Parameter Name="target" Type="Mono.CSharp.TypeSpec" />
        <Parameter Name="expl" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <param name="target">To be added.</param>
        <param name="expl">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBaseMembers">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;Mono.CSharp.MemberSpec&gt; GetBaseMembers (Mono.CSharp.TypeSpec type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class Mono.CSharp.MemberSpec&gt; GetBaseMembers(class Mono.CSharp.TypeSpec type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.MethodGroupExpr.GetBaseMembers(Mono.CSharp.TypeSpec)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Mono.CSharp.MemberSpec&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Mono.CSharp.TypeSpec" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOverrideMemberParameters">
      <MemberSignature Language="C#" Value="public Mono.CSharp.IParametersMember GetOverrideMemberParameters (Mono.CSharp.MemberSpec member);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Mono.CSharp.IParametersMember GetOverrideMemberParameters(class Mono.CSharp.MemberSpec member) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.MethodGroupExpr.GetOverrideMemberParameters(Mono.CSharp.MemberSpec)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.IParametersMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="Mono.CSharp.MemberSpec" />
      </Parameters>
      <Docs>
        <param name="member">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSignatureForError">
      <MemberSignature Language="C#" Value="public override string GetSignatureForError ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetSignatureForError() cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.MethodGroupExpr.GetSignatureForError" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAccessibleCandidate">
      <MemberSignature Language="C#" Value="public bool HasAccessibleCandidate (Mono.CSharp.ResolveContext rc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasAccessibleCandidate(class Mono.CSharp.ResolveContext rc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.MethodGroupExpr.HasAccessibleCandidate(Mono.CSharp.ResolveContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rc" Type="Mono.CSharp.ResolveContext" />
      </Parameters>
      <Docs>
        <param name="rc">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConditionallyExcluded">
      <MemberSignature Language="C#" Value="public bool IsConditionallyExcluded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConditionallyExcluded" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.MethodGroupExpr.IsConditionallyExcluded" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsExtensionMethodArgument">
      <MemberSignature Language="C#" Value="public static bool IsExtensionMethodArgument (Mono.CSharp.Expression expr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsExtensionMethodArgument(class Mono.CSharp.Expression expr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.MethodGroupExpr.IsExtensionMethodArgument(Mono.CSharp.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expr" Type="Mono.CSharp.Expression" />
      </Parameters>
      <Docs>
        <param name="expr">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInstance">
      <MemberSignature Language="C#" Value="public override bool IsInstance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInstance" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.MethodGroupExpr.IsInstance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSideEffectFree">
      <MemberSignature Language="C#" Value="public override bool IsSideEffectFree { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSideEffectFree" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.MethodGroupExpr.IsSideEffectFree" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStatic">
      <MemberSignature Language="C#" Value="public override bool IsStatic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStatic" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.MethodGroupExpr.IsStatic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KindName">
      <MemberSignature Language="C#" Value="public override string KindName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string KindName" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.MethodGroupExpr.KindName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupExtensionMethod">
      <MemberSignature Language="C#" Value="public virtual Mono.CSharp.MethodGroupExpr LookupExtensionMethod (Mono.CSharp.ResolveContext rc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Mono.CSharp.MethodGroupExpr LookupExtensionMethod(class Mono.CSharp.ResolveContext rc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.MethodGroupExpr.LookupExtensionMethod(Mono.CSharp.ResolveContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.MethodGroupExpr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rc" Type="Mono.CSharp.ResolveContext" />
      </Parameters>
      <Docs>
        <param name="rc">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Methods">
      <MemberSignature Language="C#" Value="protected System.Collections.Generic.IList&lt;Mono.CSharp.MemberSpec&gt; Methods;" />
      <MemberSignature Language="ILAsm" Value=".field family class System.Collections.Generic.IList`1&lt;class Mono.CSharp.MemberSpec&gt; Methods" />
      <MemberSignature Language="DocId" Value="F:Mono.CSharp.MethodGroupExpr.Methods" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Mono.CSharp.MemberSpec&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.MethodGroupExpr.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OverloadResolve">
      <MemberSignature Language="C#" Value="public virtual Mono.CSharp.MethodGroupExpr OverloadResolve (Mono.CSharp.ResolveContext ec, ref Mono.CSharp.Arguments args, Mono.CSharp.OverloadResolver.IErrorHandler cerrors, Mono.CSharp.OverloadResolver.Restrictions restr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Mono.CSharp.MethodGroupExpr OverloadResolve(class Mono.CSharp.ResolveContext ec, class Mono.CSharp.Arguments args, class Mono.CSharp.OverloadResolver/IErrorHandler cerrors, valuetype Mono.CSharp.OverloadResolver/Restrictions restr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.MethodGroupExpr.OverloadResolve(Mono.CSharp.ResolveContext,Mono.CSharp.Arguments@,Mono.CSharp.OverloadResolver.IErrorHandler,Mono.CSharp.OverloadResolver.Restrictions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.MethodGroupExpr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.ResolveContext" />
        <Parameter Name="args" Type="Mono.CSharp.Arguments&amp;" RefType="ref" />
        <Parameter Name="cerrors" Type="Mono.CSharp.OverloadResolver+IErrorHandler" />
        <Parameter Name="restr" Type="Mono.CSharp.OverloadResolver+Restrictions" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <param name="args">To be added.</param>
        <param name="cerrors">To be added.</param>
        <param name="restr">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="queried_type">
      <MemberSignature Language="C#" Value="protected Mono.CSharp.TypeSpec queried_type;" />
      <MemberSignature Language="ILAsm" Value=".field family class Mono.CSharp.TypeSpec queried_type" />
      <MemberSignature Language="DocId" Value="F:Mono.CSharp.MethodGroupExpr.queried_type" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.TypeSpec</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveMemberAccess">
      <MemberSignature Language="C#" Value="public override Mono.CSharp.MemberExpr ResolveMemberAccess (Mono.CSharp.ResolveContext ec, Mono.CSharp.Expression left, Mono.CSharp.SimpleName original);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Mono.CSharp.MemberExpr ResolveMemberAccess(class Mono.CSharp.ResolveContext ec, class Mono.CSharp.Expression left, class Mono.CSharp.SimpleName original) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.MethodGroupExpr.ResolveMemberAccess(Mono.CSharp.ResolveContext,Mono.CSharp.Expression,Mono.CSharp.SimpleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.MemberExpr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.ResolveContext" />
        <Parameter Name="left" Type="Mono.CSharp.Expression" />
        <Parameter Name="original" Type="Mono.CSharp.SimpleName" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <param name="left">To be added.</param>
        <param name="original">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveNameOf">
      <MemberSignature Language="C#" Value="public override void ResolveNameOf (Mono.CSharp.ResolveContext rc, Mono.CSharp.ATypeNameExpression expr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ResolveNameOf(class Mono.CSharp.ResolveContext rc, class Mono.CSharp.ATypeNameExpression expr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.MethodGroupExpr.ResolveNameOf(Mono.CSharp.ResolveContext,Mono.CSharp.ATypeNameExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rc" Type="Mono.CSharp.ResolveContext" />
        <Parameter Name="expr" Type="Mono.CSharp.ATypeNameExpression" />
      </Parameters>
      <Docs>
        <param name="rc">To be added.</param>
        <param name="expr">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTypeArguments">
      <MemberSignature Language="C#" Value="public override void SetTypeArguments (Mono.CSharp.ResolveContext ec, Mono.CSharp.TypeArguments ta);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetTypeArguments(class Mono.CSharp.ResolveContext ec, class Mono.CSharp.TypeArguments ta) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.MethodGroupExpr.SetTypeArguments(Mono.CSharp.ResolveContext,Mono.CSharp.TypeArguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.ResolveContext" />
        <Parameter Name="ta" Type="Mono.CSharp.TypeArguments" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <param name="ta">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="type_arguments">
      <MemberSignature Language="C#" Value="protected Mono.CSharp.TypeArguments type_arguments;" />
      <MemberSignature Language="ILAsm" Value=".field family class Mono.CSharp.TypeArguments type_arguments" />
      <MemberSignature Language="DocId" Value="F:Mono.CSharp.MethodGroupExpr.type_arguments" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.TypeArguments</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>