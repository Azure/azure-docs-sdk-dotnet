<Type Name="Constant" FullName="Mono.CSharp.Constant">
  <TypeSignature Language="C#" Value="public abstract class Constant : Mono.CSharp.Expression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Constant extends Mono.CSharp.Expression" />
  <TypeSignature Language="DocId" Value="T:Mono.CSharp.Constant" />
  <AssemblyInfo>
    <AssemblyName>Mono.CSharp</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Mono.CSharp.Expression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Constant (Mono.CSharp.Location loc);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype Mono.CSharp.Location loc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Constant.#ctor(Mono.CSharp.Location)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="loc" Type="Mono.CSharp.Location" />
      </Parameters>
      <Docs>
        <param name="loc">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public override sealed Mono.CSharp.Expression Clone (Mono.CSharp.CloneContext clonectx);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Mono.CSharp.Expression Clone(class Mono.CSharp.CloneContext clonectx) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Constant.Clone(Mono.CSharp.CloneContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clonectx" Type="Mono.CSharp.CloneContext" />
      </Parameters>
      <Docs>
        <param name="clonectx">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneTo">
      <MemberSignature Language="C#" Value="protected override void CloneTo (Mono.CSharp.CloneContext clonectx, Mono.CSharp.Expression target);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CloneTo(class Mono.CSharp.CloneContext clonectx, class Mono.CSharp.Expression target) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Constant.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clonectx" Type="Mono.CSharp.CloneContext" />
        <Parameter Name="target" Type="Mono.CSharp.Expression" />
      </Parameters>
      <Docs>
        <param name="clonectx">To be added.</param>
        <param name="target">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsEmitWithAwait">
      <MemberSignature Language="C#" Value="public override bool ContainsEmitWithAwait ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool ContainsEmitWithAwait() cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Constant.ContainsEmitWithAwait" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertExplicitly">
      <MemberSignature Language="C#" Value="public abstract Mono.CSharp.Constant ConvertExplicitly (bool in_checked_context, Mono.CSharp.TypeSpec target_type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Mono.CSharp.Constant ConvertExplicitly(bool in_checked_context, class Mono.CSharp.TypeSpec target_type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Constant.ConvertExplicitly(System.Boolean,Mono.CSharp.TypeSpec)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.Constant</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="in_checked_context" Type="System.Boolean" />
        <Parameter Name="target_type" Type="Mono.CSharp.TypeSpec" />
      </Parameters>
      <Docs>
        <param name="in_checked_context">To be added.</param>
        <param name="target_type">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertImplicitly">
      <MemberSignature Language="C#" Value="public virtual Mono.CSharp.Constant ConvertImplicitly (Mono.CSharp.TypeSpec type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Mono.CSharp.Constant ConvertImplicitly(class Mono.CSharp.TypeSpec type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Constant.ConvertImplicitly(Mono.CSharp.TypeSpec)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.Constant</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Mono.CSharp.TypeSpec" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateConstantFromValue">
      <MemberSignature Language="C#" Value="public static Mono.CSharp.Constant CreateConstantFromValue (Mono.CSharp.TypeSpec t, object v, Mono.CSharp.Location loc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Mono.CSharp.Constant CreateConstantFromValue(class Mono.CSharp.TypeSpec t, object v, valuetype Mono.CSharp.Location loc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Constant.CreateConstantFromValue(Mono.CSharp.TypeSpec,System.Object,Mono.CSharp.Location)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.Constant</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="Mono.CSharp.TypeSpec" />
        <Parameter Name="v" Type="System.Object" />
        <Parameter Name="loc" Type="Mono.CSharp.Location" />
      </Parameters>
      <Docs>
        <param name="t">To be added.</param>
        <param name="v">To be added.</param>
        <param name="loc">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateExpressionTree">
      <MemberSignature Language="C#" Value="public override Mono.CSharp.Expression CreateExpressionTree (Mono.CSharp.ResolveContext ec);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Mono.CSharp.Expression CreateExpressionTree(class Mono.CSharp.ResolveContext ec) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Constant.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.ResolveContext" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoResolve">
      <MemberSignature Language="C#" Value="protected override Mono.CSharp.Expression DoResolve (Mono.CSharp.ResolveContext rc);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Mono.CSharp.Expression DoResolve(class Mono.CSharp.ResolveContext rc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Constant.DoResolve(Mono.CSharp.ResolveContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rc" Type="Mono.CSharp.ResolveContext" />
      </Parameters>
      <Docs>
        <param name="rc">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EmitSideEffect">
      <MemberSignature Language="C#" Value="public override void EmitSideEffect (Mono.CSharp.EmitContext ec);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EmitSideEffect(class Mono.CSharp.EmitContext ec) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Constant.EmitSideEffect(Mono.CSharp.EmitContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.EmitContext" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Error_ValueCannotBeConverted">
      <MemberSignature Language="C#" Value="public override void Error_ValueCannotBeConverted (Mono.CSharp.ResolveContext ec, Mono.CSharp.TypeSpec target, bool expl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Error_ValueCannotBeConverted(class Mono.CSharp.ResolveContext ec, class Mono.CSharp.TypeSpec target, bool expl) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Constant.Error_ValueCannotBeConverted(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.ResolveContext" />
        <Parameter Name="target" Type="Mono.CSharp.TypeSpec" />
        <Parameter Name="expl" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <param name="target">To be added.</param>
        <param name="expl">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtractConstantFromValue">
      <MemberSignature Language="C#" Value="public static Mono.CSharp.Constant ExtractConstantFromValue (Mono.CSharp.TypeSpec t, object v, Mono.CSharp.Location loc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Mono.CSharp.Constant ExtractConstantFromValue(class Mono.CSharp.TypeSpec t, object v, valuetype Mono.CSharp.Location loc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Constant.ExtractConstantFromValue(Mono.CSharp.TypeSpec,System.Object,Mono.CSharp.Location)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.Constant</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="Mono.CSharp.TypeSpec" />
        <Parameter Name="v" Type="System.Object" />
        <Parameter Name="loc" Type="Mono.CSharp.Location" />
      </Parameters>
      <Docs>
        <param name="t">To be added.</param>
        <param name="v">To be added.</param>
        <param name="loc">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypedValue">
      <MemberSignature Language="C#" Value="public virtual object GetTypedValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetTypedValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Constant.GetTypedValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public abstract object GetValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Constant.GetValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValueAsLiteral">
      <MemberSignature Language="C#" Value="public abstract string GetValueAsLiteral ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetValueAsLiteral() cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Constant.GetValueAsLiteral" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValueAsLong">
      <MemberSignature Language="C#" Value="public abstract long GetValueAsLong ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 GetValueAsLong() cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Constant.GetValueAsLong" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImplicitConversionRequired">
      <MemberSignature Language="C#" Value="public Mono.CSharp.Constant ImplicitConversionRequired (Mono.CSharp.ResolveContext ec, Mono.CSharp.TypeSpec type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Mono.CSharp.Constant ImplicitConversionRequired(class Mono.CSharp.ResolveContext ec, class Mono.CSharp.TypeSpec type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Constant.ImplicitConversionRequired(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.Constant</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.ResolveContext" />
        <Parameter Name="type" Type="Mono.CSharp.TypeSpec" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <param name="type">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefaultInitializer">
      <MemberSignature Language="C#" Value="public bool IsDefaultInitializer (Mono.CSharp.TypeSpec type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDefaultInitializer(class Mono.CSharp.TypeSpec type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Constant.IsDefaultInitializer(Mono.CSharp.TypeSpec)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Mono.CSharp.TypeSpec" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefaultValue">
      <MemberSignature Language="C#" Value="public abstract bool IsDefaultValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDefaultValue" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.Constant.IsDefaultValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLiteral">
      <MemberSignature Language="C#" Value="public virtual bool IsLiteral { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLiteral" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.Constant.IsLiteral" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNegative">
      <MemberSignature Language="C#" Value="public abstract bool IsNegative { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNegative" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.Constant.IsNegative" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOneInteger">
      <MemberSignature Language="C#" Value="public virtual bool IsOneInteger { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOneInteger" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.Constant.IsOneInteger" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSideEffectFree">
      <MemberSignature Language="C#" Value="public override bool IsSideEffectFree { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSideEffectFree" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.Constant.IsSideEffectFree" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsZeroInteger">
      <MemberSignature Language="C#" Value="public virtual bool IsZeroInteger { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsZeroInteger" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.Constant.IsZeroInteger" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeExpression">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression MakeExpression (Mono.CSharp.BuilderContext ctx);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression MakeExpression(class Mono.CSharp.BuilderContext ctx) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Constant.MakeExpression(Mono.CSharp.BuilderContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctx" Type="Mono.CSharp.BuilderContext" />
      </Parameters>
      <Docs>
        <param name="ctx">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reduce">
      <MemberSignature Language="C#" Value="public Mono.CSharp.Constant Reduce (Mono.CSharp.ResolveContext ec, Mono.CSharp.TypeSpec target_type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Mono.CSharp.Constant Reduce(class Mono.CSharp.ResolveContext ec, class Mono.CSharp.TypeSpec target_type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Constant.Reduce(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.Constant</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.ResolveContext" />
        <Parameter Name="target_type" Type="Mono.CSharp.TypeSpec" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <param name="target_type">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public bool Resolve (Mono.CSharp.ResolveContext rc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Resolve(class Mono.CSharp.ResolveContext rc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Constant.Resolve(Mono.CSharp.ResolveContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rc" Type="Mono.CSharp.ResolveContext" />
      </Parameters>
      <Docs>
        <param name="rc">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Constant.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReduce">
      <MemberSignature Language="C#" Value="public Mono.CSharp.Constant TryReduce (Mono.CSharp.ResolveContext rc, Mono.CSharp.TypeSpec targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Mono.CSharp.Constant TryReduce(class Mono.CSharp.ResolveContext rc, class Mono.CSharp.TypeSpec targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Constant.TryReduce(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.Constant</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rc" Type="Mono.CSharp.ResolveContext" />
        <Parameter Name="targetType" Type="Mono.CSharp.TypeSpec" />
      </Parameters>
      <Docs>
        <param name="rc">To be added.</param>
        <param name="targetType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>