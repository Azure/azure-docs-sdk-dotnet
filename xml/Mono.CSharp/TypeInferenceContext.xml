<Type Name="TypeInferenceContext" FullName="Mono.CSharp.TypeInferenceContext">
  <TypeSignature Language="C#" Value="public class TypeInferenceContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TypeInferenceContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Mono.CSharp.TypeInferenceContext" />
  <AssemblyInfo>
    <AssemblyName>Mono.CSharp</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeInferenceContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.TypeInferenceContext.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeInferenceContext (Mono.CSharp.TypeSpec[] typeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Mono.CSharp.TypeSpec[] typeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.TypeInferenceContext.#ctor(Mono.CSharp.TypeSpec[])" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeArguments" Type="Mono.CSharp.TypeSpec[]" />
      </Parameters>
      <Docs>
        <param name="typeArguments">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCommonTypeBound">
      <MemberSignature Language="C#" Value="public void AddCommonTypeBound (Mono.CSharp.TypeSpec type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCommonTypeBound(class Mono.CSharp.TypeSpec type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.TypeInferenceContext.AddCommonTypeBound(Mono.CSharp.TypeSpec)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Mono.CSharp.TypeSpec" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCommonTypeBoundAsync">
      <MemberSignature Language="C#" Value="public void AddCommonTypeBoundAsync (Mono.CSharp.TypeSpec type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCommonTypeBoundAsync(class Mono.CSharp.TypeSpec type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.TypeInferenceContext.AddCommonTypeBoundAsync(Mono.CSharp.TypeSpec)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Mono.CSharp.TypeSpec" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExactInference">
      <MemberSignature Language="C#" Value="public int ExactInference (Mono.CSharp.TypeSpec u, Mono.CSharp.TypeSpec v);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExactInference(class Mono.CSharp.TypeSpec u, class Mono.CSharp.TypeSpec v) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.TypeInferenceContext.ExactInference(Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="u" Type="Mono.CSharp.TypeSpec" />
        <Parameter Name="v" Type="Mono.CSharp.TypeSpec" />
      </Parameters>
      <Docs>
        <param name="u">To be added.</param>
        <param name="v">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FixAllTypes">
      <MemberSignature Language="C#" Value="public bool FixAllTypes (Mono.CSharp.ResolveContext ec);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool FixAllTypes(class Mono.CSharp.ResolveContext ec) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.TypeInferenceContext.FixAllTypes(Mono.CSharp.ResolveContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.ResolveContext" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FixDependentTypes">
      <MemberSignature Language="C#" Value="public bool FixDependentTypes (Mono.CSharp.ResolveContext ec, ref bool fixed_any);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool FixDependentTypes(class Mono.CSharp.ResolveContext ec, bool fixed_any) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.TypeInferenceContext.FixDependentTypes(Mono.CSharp.ResolveContext,System.Boolean@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.ResolveContext" />
        <Parameter Name="fixed_any" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <param name="fixed_any">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FixIndependentTypeArguments">
      <MemberSignature Language="C#" Value="public bool FixIndependentTypeArguments (Mono.CSharp.ResolveContext ec, Mono.CSharp.TypeSpec[] methodParameters, ref bool fixed_any);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool FixIndependentTypeArguments(class Mono.CSharp.ResolveContext ec, class Mono.CSharp.TypeSpec[] methodParameters, bool fixed_any) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.TypeInferenceContext.FixIndependentTypeArguments(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec[],System.Boolean@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.ResolveContext" />
        <Parameter Name="methodParameters" Type="Mono.CSharp.TypeSpec[]" />
        <Parameter Name="fixed_any" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <param name="methodParameters">To be added.</param>
        <param name="fixed_any">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FixType">
      <MemberSignature Language="C#" Value="public bool FixType (Mono.CSharp.ResolveContext ec, int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool FixType(class Mono.CSharp.ResolveContext ec, int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.TypeInferenceContext.FixType(Mono.CSharp.ResolveContext,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.ResolveContext" />
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <param name="i">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasBounds">
      <MemberSignature Language="C#" Value="public bool HasBounds (int pos);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasBounds(int32 pos) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.TypeInferenceContext.HasBounds(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pos" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pos">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InferredTypeArguments">
      <MemberSignature Language="C#" Value="public Mono.CSharp.TypeSpec[] InferredTypeArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Mono.CSharp.TypeSpec[] InferredTypeArguments" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.TypeInferenceContext.InferredTypeArguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.TypeSpec[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InflateGenericArgument">
      <MemberSignature Language="C#" Value="public Mono.CSharp.TypeSpec InflateGenericArgument (Mono.CSharp.IModuleContext context, Mono.CSharp.TypeSpec parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Mono.CSharp.TypeSpec InflateGenericArgument(class Mono.CSharp.IModuleContext context, class Mono.CSharp.TypeSpec parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.TypeInferenceContext.InflateGenericArgument(Mono.CSharp.IModuleContext,Mono.CSharp.TypeSpec)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.TypeSpec</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Mono.CSharp.IModuleContext" />
        <Parameter Name="parameter" Type="Mono.CSharp.TypeSpec" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="parameter">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReturnTypeNonDependent">
      <MemberSignature Language="C#" Value="public bool IsReturnTypeNonDependent (Mono.CSharp.MethodSpec invoke, Mono.CSharp.TypeSpec returnType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsReturnTypeNonDependent(class Mono.CSharp.MethodSpec invoke, class Mono.CSharp.TypeSpec returnType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.TypeInferenceContext.IsReturnTypeNonDependent(Mono.CSharp.MethodSpec,Mono.CSharp.TypeSpec)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="invoke" Type="Mono.CSharp.MethodSpec" />
        <Parameter Name="returnType" Type="Mono.CSharp.TypeSpec" />
      </Parameters>
      <Docs>
        <param name="invoke">To be added.</param>
        <param name="returnType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LowerBoundInference">
      <MemberSignature Language="C#" Value="public int LowerBoundInference (Mono.CSharp.TypeSpec u, Mono.CSharp.TypeSpec v);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LowerBoundInference(class Mono.CSharp.TypeSpec u, class Mono.CSharp.TypeSpec v) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.TypeInferenceContext.LowerBoundInference(Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="u" Type="Mono.CSharp.TypeSpec" />
        <Parameter Name="v" Type="Mono.CSharp.TypeSpec" />
      </Parameters>
      <Docs>
        <param name="u">To be added.</param>
        <param name="v">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputTypeInference">
      <MemberSignature Language="C#" Value="public int OutputTypeInference (Mono.CSharp.ResolveContext ec, Mono.CSharp.Expression e, Mono.CSharp.TypeSpec t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 OutputTypeInference(class Mono.CSharp.ResolveContext ec, class Mono.CSharp.Expression e, class Mono.CSharp.TypeSpec t) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.TypeInferenceContext.OutputTypeInference(Mono.CSharp.ResolveContext,Mono.CSharp.Expression,Mono.CSharp.TypeSpec)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.ResolveContext" />
        <Parameter Name="e" Type="Mono.CSharp.Expression" />
        <Parameter Name="t" Type="Mono.CSharp.TypeSpec" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <param name="e">To be added.</param>
        <param name="t">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnfixedVariableExists">
      <MemberSignature Language="C#" Value="public bool UnfixedVariableExists { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UnfixedVariableExists" />
      <MemberSignature Language="DocId" Value="P:Mono.CSharp.TypeInferenceContext.UnfixedVariableExists" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>