<Type Name="DataLakeStoreFrontEndAdapter" FullName="Microsoft.Azure.Management.DataLake.Store.DataLakeStoreFrontEndAdapter">
  <TypeSignature Language="C#" Value="public class DataLakeStoreFrontEndAdapter : Microsoft.Azure.Management.DataLake.Store.IFrontEndAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataLakeStoreFrontEndAdapter extends System.Object implements class Microsoft.Azure.Management.DataLake.Store.IFrontEndAdapter" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Management.DataLake.Store.DataLakeStoreFrontEndAdapter" />
  <TypeSignature Language="VB.NET" Value="Public Class DataLakeStoreFrontEndAdapter&#xA;Implements IFrontEndAdapter" />
  <TypeSignature Language="F#" Value="type DataLakeStoreFrontEndAdapter = class&#xA;    interface IFrontEndAdapter" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataLakeStoreFrontEndAdapter : Microsoft::Azure::Management::DataLake::Store::IFrontEndAdapter" />
  <TypeSignature Language="C++ WINRT" Value="[Windows::Foundation::Metadata::WebHostHidden]&#xA;class DataLakeStoreFrontEndAdapter : Microsoft::Azure::Management::DataLake::Store::IFrontEndAdapter" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Management.DataLake.Store</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Azure.Management.DataLake.Store.IFrontEndAdapter</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            A front end adapter that communicates with the DataLake Store.
            This is a syncrhonous call adapter, which has certain efficiency limitations.
            In the future, new adapters that are created should consider implementing the methods
            asynchronously.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataLakeStoreFrontEndAdapter (string accountName, Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreFileSystemManagementClient client);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string accountName, class Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreFileSystemManagementClient client) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.DataLake.Store.DataLakeStoreFrontEndAdapter.#ctor(System.String,Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreFileSystemManagementClient)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (accountName As String, client As IDataLakeStoreFileSystemManagementClient)" />
      <MemberSignature Language="F#" Value="new Microsoft.Azure.Management.DataLake.Store.DataLakeStoreFrontEndAdapter : string * Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreFileSystemManagementClient -&gt; Microsoft.Azure.Management.DataLake.Store.DataLakeStoreFrontEndAdapter" Usage="new Microsoft.Azure.Management.DataLake.Store.DataLakeStoreFrontEndAdapter (accountName, client)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataLakeStoreFrontEndAdapter(System::String ^ accountName, Microsoft::Azure::Management::DataLake::Store::IDataLakeStoreFileSystemManagementClient ^ client);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.DataLake.Store</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="accountName" Type="System.String" />
        <Parameter Name="client" Type="Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreFileSystemManagementClient" />
      </Parameters>
      <Docs>
        <param name="accountName">Name of the account.</param>
        <param name="client">The client.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Management.DataLake.Store.DataLakeStoreFrontEndAdapter" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataLakeStoreFrontEndAdapter (string accountName, Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreFileSystemManagementClient client, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string accountName, class Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreFileSystemManagementClient client, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.DataLake.Store.DataLakeStoreFrontEndAdapter.#ctor(System.String,Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreFileSystemManagementClient,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (accountName As String, client As IDataLakeStoreFileSystemManagementClient, token As CancellationToken)" />
      <MemberSignature Language="F#" Value="new Microsoft.Azure.Management.DataLake.Store.DataLakeStoreFrontEndAdapter : string * Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreFileSystemManagementClient * System.Threading.CancellationToken -&gt; Microsoft.Azure.Management.DataLake.Store.DataLakeStoreFrontEndAdapter" Usage="new Microsoft.Azure.Management.DataLake.Store.DataLakeStoreFrontEndAdapter (accountName, client, token)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataLakeStoreFrontEndAdapter(System::String ^ accountName, Microsoft::Azure::Management::DataLake::Store::IDataLakeStoreFileSystemManagementClient ^ client, System::Threading::CancellationToken token);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.DataLake.Store</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="accountName" Type="System.String" />
        <Parameter Name="client" Type="Microsoft.Azure.Management.DataLake.Store.IDataLakeStoreFileSystemManagementClient" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="accountName">Name of the account.</param>
        <param name="client">The client.</param>
        <param name="token">The token.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Management.DataLake.Store.DataLakeStoreFrontEndAdapter" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendToStream">
      <MemberSignature Language="C#" Value="public void AppendToStream (string streamPath, byte[] data, long offset, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AppendToStream(string streamPath, unsigned int8[] data, int64 offset, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.DataLake.Store.DataLakeStoreFrontEndAdapter.AppendToStream(System.String,System.Byte[],System.Int64,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendToStream (streamPath As String, data As Byte(), offset As Long, byteCount As Integer)" />
      <MemberSignature Language="F#" Value="abstract member AppendToStream : string * byte[] * int64 * int -&gt; unit&#xA;override this.AppendToStream : string * byte[] * int64 * int -&gt; unit" Usage="dataLakeStoreFrontEndAdapter.AppendToStream (streamPath, data, offset, byteCount)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AppendToStream(System::String ^ streamPath, cli::array &lt;System::Byte&gt; ^ data, long offset, int byteCount);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; void AppendToStream(Platform::String ^ streamPath, Platform::Array &lt;byte&gt; ^ data, long long offset, int byteCount);" />
      <MemberSignature Language="C++ WINRT" Value="void AppendToStream(std::wstring const &amp; streamPath, std::Array &lt;byte&gt; const &amp; data, long offset, int byteCount);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Management.DataLake.Store.IFrontEndAdapter.AppendToStream(System.String,System.Byte[],System.Int64,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.DataLake.Store</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamPath" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="streamPath">The stream path.</param>
        <param name="data">The data.</param>
        <param name="offset">The offset.</param>
        <param name="byteCount">The byte count.</param>
        <summary>
            Appends to stream.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException" />
      </Docs>
    </Member>
    <Member MemberName="Concatenate">
      <MemberSignature Language="C#" Value="public void Concatenate (string targetStreamPath, string[] inputStreamPaths, bool isDownload = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Concatenate(string targetStreamPath, string[] inputStreamPaths, bool isDownload) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.DataLake.Store.DataLakeStoreFrontEndAdapter.Concatenate(System.String,System.String[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Concatenate (targetStreamPath As String, inputStreamPaths As String(), Optional isDownload As Boolean = false)" />
      <MemberSignature Language="F#" Value="abstract member Concatenate : string * string[] * bool -&gt; unit&#xA;override this.Concatenate : string * string[] * bool -&gt; unit" Usage="dataLakeStoreFrontEndAdapter.Concatenate (targetStreamPath, inputStreamPaths, isDownload)" />
      <MemberSignature Language="C++ WINRT" Value="void Concatenate(std::wstring const &amp; targetStreamPath, std::Array &lt;std::wstring const &amp;&gt; const &amp; inputStreamPaths, bool isDownload = false);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Management.DataLake.Store.IFrontEndAdapter.Concatenate(System.String,System.String[],System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.DataLake.Store</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetStreamPath" Type="System.String" />
        <Parameter Name="inputStreamPaths" Type="System.String[]" />
        <Parameter Name="isDownload" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="targetStreamPath">The relative path to the target stream.</param>
        <param name="inputStreamPaths">An ordered array of paths to the input streams.</param>
        <param name="isDownload">if set to <c>true</c> [is download], meaning we will concatenate the streams on the local machine instead of on the server.</param>
        <summary>
            Concatenates the given input streams (in order) into the given target stream.
            At the end of this operation, input streams will be deleted.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException" />
      </Docs>
    </Member>
    <Member MemberName="CreateStream">
      <MemberSignature Language="C#" Value="public void CreateStream (string streamPath, bool overwrite, byte[] data, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateStream(string streamPath, bool overwrite, unsigned int8[] data, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.DataLake.Store.DataLakeStoreFrontEndAdapter.CreateStream(System.String,System.Boolean,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateStream (streamPath As String, overwrite As Boolean, data As Byte(), byteCount As Integer)" />
      <MemberSignature Language="F#" Value="abstract member CreateStream : string * bool * byte[] * int -&gt; unit&#xA;override this.CreateStream : string * bool * byte[] * int -&gt; unit" Usage="dataLakeStoreFrontEndAdapter.CreateStream (streamPath, overwrite, data, byteCount)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CreateStream(System::String ^ streamPath, bool overwrite, cli::array &lt;System::Byte&gt; ^ data, int byteCount);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; void CreateStream(Platform::String ^ streamPath, bool overwrite, Platform::Array &lt;byte&gt; ^ data, int byteCount);" />
      <MemberSignature Language="C++ WINRT" Value="void CreateStream(std::wstring const &amp; streamPath, bool overwrite, std::Array &lt;byte&gt; const &amp; data, int byteCount);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Management.DataLake.Store.IFrontEndAdapter.CreateStream(System.String,System.Boolean,System.Byte[],System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.DataLake.Store</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamPath" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="streamPath">The relative path to the stream.</param>
        <param name="overwrite">Whether to overwrite an existing stream.</param>
        <param name="data">The data.</param>
        <param name="byteCount">The byte count.</param>
        <summary>
            Creates a new, empty stream at the given path.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException" />
      </Docs>
    </Member>
    <Member MemberName="DeleteStream">
      <MemberSignature Language="C#" Value="public void DeleteStream (string streamPath, bool recurse = false, bool isDownload = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteStream(string streamPath, bool recurse, bool isDownload) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.DataLake.Store.DataLakeStoreFrontEndAdapter.DeleteStream(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteStream (streamPath As String, Optional recurse As Boolean = false, Optional isDownload As Boolean = false)" />
      <MemberSignature Language="F#" Value="abstract member DeleteStream : string * bool * bool -&gt; unit&#xA;override this.DeleteStream : string * bool * bool -&gt; unit" Usage="dataLakeStoreFrontEndAdapter.DeleteStream (streamPath, recurse, isDownload)" />
      <MemberSignature Language="C++ WINRT" Value="void DeleteStream(std::wstring const &amp; streamPath, bool recurse = false, bool isDownload = false);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Management.DataLake.Store.IFrontEndAdapter.DeleteStream(System.String,System.Boolean,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.DataLake.Store</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamPath" Type="System.String" />
        <Parameter Name="recurse" Type="System.Boolean" />
        <Parameter Name="isDownload" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="streamPath">The relative path to the stream.</param>
        <param name="recurse">if set to <c>true</c> [recurse]. This is used for folder streams only.</param>
        <param name="isDownload">if set to <c>true</c> [is download], meaning we will delete a stream on the local machine instead of on the server.</param>
        <summary>
            Deletes an existing stream at the given path.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException" />
      </Docs>
    </Member>
    <Member MemberName="GetStreamLength">
      <MemberSignature Language="C#" Value="public long GetStreamLength (string streamPath, bool isDownload = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 GetStreamLength(string streamPath, bool isDownload) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.DataLake.Store.DataLakeStoreFrontEndAdapter.GetStreamLength(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStreamLength (streamPath As String, Optional isDownload As Boolean = false) As Long" />
      <MemberSignature Language="F#" Value="abstract member GetStreamLength : string * bool -&gt; int64&#xA;override this.GetStreamLength : string * bool -&gt; int64" Usage="dataLakeStoreFrontEndAdapter.GetStreamLength (streamPath, isDownload)" />
      <MemberSignature Language="C++ WINRT" Value="long GetStreamLength(std::wstring const &amp; streamPath, bool isDownload = false);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Management.DataLake.Store.IFrontEndAdapter.GetStreamLength(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.DataLake.Store</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamPath" Type="System.String" />
        <Parameter Name="isDownload" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="streamPath">The relative path to the stream.</param>
        <param name="isDownload">if set to <c>true</c> [is download], meaning we will get the stream length on the local machine instead of on the server.</param>
        <summary>
            Gets a value indicating the length of a stream, in bytes.
            </summary>
        <returns>
            The length of the stream, in bytes.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException" />
      </Docs>
    </Member>
    <Member MemberName="IsDirectory">
      <MemberSignature Language="C#" Value="public bool IsDirectory (string streamPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsDirectory(string streamPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.DataLake.Store.DataLakeStoreFrontEndAdapter.IsDirectory(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDirectory (streamPath As String) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsDirectory : string -&gt; bool&#xA;override this.IsDirectory : string -&gt; bool" Usage="dataLakeStoreFrontEndAdapter.IsDirectory streamPath" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsDirectory(System::String ^ streamPath);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; bool IsDirectory(Platform::String ^ streamPath);" />
      <MemberSignature Language="C++ WINRT" Value="bool IsDirectory(std::wstring const &amp; streamPath);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Management.DataLake.Store.IFrontEndAdapter.IsDirectory(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.DataLake.Store</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="streamPath">The relative path to the stream.</param>
        <summary>
            Determines if the stream with given path on the server is a directory or a terminating file.
            This is used exclusively for download.
            </summary>
        <returns>
            True if the stream is a directory, false otherwise.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException" />
      </Docs>
    </Member>
    <Member MemberName="ListDirectory">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,long&gt; ListDirectory (string directoryPath, bool recursive);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;string, int64&gt; ListDirectory(string directoryPath, bool recursive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.DataLake.Store.DataLakeStoreFrontEndAdapter.ListDirectory(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ListDirectory (directoryPath As String, recursive As Boolean) As IDictionary(Of String, Long)" />
      <MemberSignature Language="F#" Value="abstract member ListDirectory : string * bool -&gt; System.Collections.Generic.IDictionary&lt;string, int64&gt;&#xA;override this.ListDirectory : string * bool -&gt; System.Collections.Generic.IDictionary&lt;string, int64&gt;" Usage="dataLakeStoreFrontEndAdapter.ListDirectory (directoryPath, recursive)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IDictionary&lt;System::String ^, long&gt; ^ ListDirectory(System::String ^ directoryPath, bool recursive);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Management.DataLake.Store.IFrontEndAdapter.ListDirectory(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.DataLake.Store</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directoryPath" Type="System.String" />
        <Parameter Name="recursive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="directoryPath">The directory path.</param>
        <param name="recursive">if set to <c>true</c> [recursive].</param>
        <summary>
            Lists the Data Lake Store directory specified.
            </summary>
        <returns>
            The list of string paths and their corresponding file sizes, in bytes.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream ReadStream (string streamPath, long offset, long length, bool isDownload = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream ReadStream(string streamPath, int64 offset, int64 length, bool isDownload) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.DataLake.Store.DataLakeStoreFrontEndAdapter.ReadStream(System.String,System.Int64,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadStream (streamPath As String, offset As Long, length As Long, Optional isDownload As Boolean = false) As Stream" />
      <MemberSignature Language="F#" Value="abstract member ReadStream : string * int64 * int64 * bool -&gt; System.IO.Stream&#xA;override this.ReadStream : string * int64 * int64 * bool -&gt; System.IO.Stream" Usage="dataLakeStoreFrontEndAdapter.ReadStream (streamPath, offset, length, isDownload)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Management.DataLake.Store.IFrontEndAdapter.ReadStream(System.String,System.Int64,System.Int64,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.DataLake.Store</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamPath" Type="System.String" />
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="length" Type="System.Int64" />
        <Parameter Name="isDownload" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="streamPath">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="length">To be added.</param>
        <param name="isDownload">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StreamExists">
      <MemberSignature Language="C#" Value="public bool StreamExists (string streamPath, bool isDownload = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool StreamExists(string streamPath, bool isDownload) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.DataLake.Store.DataLakeStoreFrontEndAdapter.StreamExists(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function StreamExists (streamPath As String, Optional isDownload As Boolean = false) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member StreamExists : string * bool -&gt; bool&#xA;override this.StreamExists : string * bool -&gt; bool" Usage="dataLakeStoreFrontEndAdapter.StreamExists (streamPath, isDownload)" />
      <MemberSignature Language="C++ WINRT" Value="bool StreamExists(std::wstring const &amp; streamPath, bool isDownload = false);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.Management.DataLake.Store.IFrontEndAdapter.StreamExists(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.DataLake.Store</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamPath" Type="System.String" />
        <Parameter Name="isDownload" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="streamPath">The relative path to the stream.</param>
        <param name="isDownload">if set to <c>true</c> [is download], meaning we will test if the stream exists on the local machine instead of on the server.</param>
        <summary>
            Determines if the stream with given path exists.
            </summary>
        <returns>
            True if the stream exists, false otherwise.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException" />
      </Docs>
    </Member>
  </Members>
</Type>