<Type Name="EventProcessorHost" FullName="Microsoft.ServiceBus.Messaging.EventProcessorHost">
  <TypeSignature Language="C#" Value="public class EventProcessorHost : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventProcessorHost extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ServiceBus.Messaging.EventProcessorHost" />
  <TypeSignature Language="VB.NET" Value="Public Class EventProcessorHost&#xA;Implements IDisposable" />
  <TypeSignature Language="F#" Value="type EventProcessorHost = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ServiceBus.Messaging.EventProcessorHost</AssemblyName>
    <AssemblyVersion>0.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            A very simple host for processing EventHub messages.  It takes care of distributing EventHub partitions among EventProcessorHost
            instances.  It creates an Azure Block Blob for each partition in EventHub and use these blobs for managing lease for a partition.
            Every EventProcessorHost instance is performing the following two tasks:
                1) Renew Leases: It keeps track of leases currently owned by the host and continuously keeps on renewing the leases.
                2) Acquire Leases: Each instance continuously polls all the lease blobs to check if there are any leases it should acquire 
                for the system to get into balanced state.
            Client application needs to implement <see cref="T:Microsoft.ServiceBus.Messaging.IEventProcessor" /> and register processor implementation with EventProcessorHost.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventProcessorHost (string eventHubPath, string consumerGroupName, string eventHubConnectionString, string storageConnectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string eventHubPath, string consumerGroupName, string eventHubConnectionString, string storageConnectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.Messaging.EventProcessorHost.#ctor(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (eventHubPath As String, consumerGroupName As String, eventHubConnectionString As String, storageConnectionString As String)" />
      <MemberSignature Language="F#" Value="new Microsoft.ServiceBus.Messaging.EventProcessorHost : string * string * string * string -&gt; Microsoft.ServiceBus.Messaging.EventProcessorHost" Usage="new Microsoft.ServiceBus.Messaging.EventProcessorHost (eventHubPath, consumerGroupName, eventHubConnectionString, storageConnectionString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceBus.Messaging.EventProcessorHost</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="eventHubPath" Type="System.String" />
        <Parameter Name="consumerGroupName" Type="System.String" />
        <Parameter Name="eventHubConnectionString" Type="System.String" />
        <Parameter Name="storageConnectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventHubPath">Event Hub path to start receiving messages from.</param>
        <param name="consumerGroupName">Name of Event Hub consumer group to start receiving messages from.</param>
        <param name="eventHubConnectionString">Connection string for Event Hub.</param>
        <param name="storageConnectionString">Connection string of Azure Blob storage account to use for partition distribution.</param>
        <summary>
            Creates new instance of EventProcessorHost.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventProcessorHost (string hostName, string eventHubPath, string consumerGroupName, Func&lt;Microsoft.ServiceBus.Messaging.EventProcessorOptions,Microsoft.ServiceBus.Messaging.MessagingFactory&gt; eventHubClientFactory, Func&lt;Microsoft.WindowsAzure.Storage.Blob.CloudBlobClient&gt; storageClientFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string hostName, string eventHubPath, string consumerGroupName, class System.Func`2&lt;class Microsoft.ServiceBus.Messaging.EventProcessorOptions, class Microsoft.ServiceBus.Messaging.MessagingFactory&gt; eventHubClientFactory, class System.Func`1&lt;class Microsoft.WindowsAzure.Storage.Blob.CloudBlobClient&gt; storageClientFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.Messaging.EventProcessorHost.#ctor(System.String,System.String,System.String,System.Func{Microsoft.ServiceBus.Messaging.EventProcessorOptions,Microsoft.ServiceBus.Messaging.MessagingFactory},System.Func{Microsoft.WindowsAzure.Storage.Blob.CloudBlobClient})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (hostName As String, eventHubPath As String, consumerGroupName As String, eventHubClientFactory As Func(Of EventProcessorOptions, MessagingFactory), storageClientFactory As Func(Of CloudBlobClient))" />
      <MemberSignature Language="F#" Value="new Microsoft.ServiceBus.Messaging.EventProcessorHost : string * string * string * Func&lt;Microsoft.ServiceBus.Messaging.EventProcessorOptions, Microsoft.ServiceBus.Messaging.MessagingFactory&gt; * Func&lt;Microsoft.WindowsAzure.Storage.Blob.CloudBlobClient&gt; -&gt; Microsoft.ServiceBus.Messaging.EventProcessorHost" Usage="new Microsoft.ServiceBus.Messaging.EventProcessorHost (hostName, eventHubPath, consumerGroupName, eventHubClientFactory, storageClientFactory)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceBus.Messaging.EventProcessorHost</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="hostName" Type="System.String" />
        <Parameter Name="eventHubPath" Type="System.String" />
        <Parameter Name="consumerGroupName" Type="System.String" />
        <Parameter Name="eventHubClientFactory" Type="System.Func&lt;Microsoft.ServiceBus.Messaging.EventProcessorOptions,Microsoft.ServiceBus.Messaging.MessagingFactory&gt;" />
        <Parameter Name="storageClientFactory" Type="System.Func&lt;Microsoft.WindowsAzure.Storage.Blob.CloudBlobClient&gt;" />
      </Parameters>
      <Docs>
        <param name="hostName">Name for EventProcessorHost instance.  This must be unique for each instance of the host.</param>
        <param name="eventHubPath">EventHub path to start receiving messages from.</param>
        <param name="consumerGroupName">Name of EventHub consumer group to start receiving messages from.</param>
        <param name="eventHubClientFactory">Factory to initialize <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactory" /> to be used by EventProcessorHost for creating <see cref="T:Microsoft.ServiceBus.Messaging.EventHubClient" />
            and eventually <see cref="T:Microsoft.ServiceBus.Messaging.EventHubReceiver" />.  EventProcessorHost maintains a pool of these <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactory" /> objects and will use provided factory whenever
            a new instance needs to be created based on <see cref="P:Microsoft.ServiceBus.Messaging.PartitionManagerOptions.MaxReceiveClients" /> option.</param>
        <param name="storageClientFactory">Factory to initialize <see cref="P:Microsoft.ServiceBus.Messaging.EventProcessorHost.CloudBlobClient" /> which is used by EventProcessorHost for lease management and partition 
            distribution among available hosts.</param>
        <summary>
            Creates new instance of EventProcessorHost.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventProcessorHost (string hostName, string eventHubPath, string consumerGroupName, string eventHubConnectionString, string storageConnectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string hostName, string eventHubPath, string consumerGroupName, string eventHubConnectionString, string storageConnectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.Messaging.EventProcessorHost.#ctor(System.String,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (hostName As String, eventHubPath As String, consumerGroupName As String, eventHubConnectionString As String, storageConnectionString As String)" />
      <MemberSignature Language="F#" Value="new Microsoft.ServiceBus.Messaging.EventProcessorHost : string * string * string * string * string -&gt; Microsoft.ServiceBus.Messaging.EventProcessorHost" Usage="new Microsoft.ServiceBus.Messaging.EventProcessorHost (hostName, eventHubPath, consumerGroupName, eventHubConnectionString, storageConnectionString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceBus.Messaging.EventProcessorHost</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="hostName" Type="System.String" />
        <Parameter Name="eventHubPath" Type="System.String" />
        <Parameter Name="consumerGroupName" Type="System.String" />
        <Parameter Name="eventHubConnectionString" Type="System.String" />
        <Parameter Name="storageConnectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hostName">The name of the 
            <see cref="T:Microsoft.ServiceBus.Messaging.EventProcessorHost" /> instance. This name must be unique for each instance of the host.</param>
        <param name="eventHubPath">The path to the Event Hub from which to start receiving event data.</param>
        <param name="consumerGroupName">The name of the Event Hubs consumer group from which to start receiving event data.</param>
        <param name="eventHubConnectionString">The connection string for the Event Hub.</param>
        <param name="storageConnectionString">The connection string for the Azure Blob storage account to use for partition distribution.</param>
        <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.EventProcessorHost" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventProcessorHost (string hostName, string eventHubPath, string consumerGroupName, Func&lt;Microsoft.ServiceBus.Messaging.EventProcessorOptions,Microsoft.ServiceBus.Messaging.MessagingFactory&gt; eventHubClientFactory, Func&lt;Microsoft.WindowsAzure.Storage.Blob.CloudBlobClient&gt; storageClientFactory, string leaseContainerName, string leaseBlobPrefix = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string hostName, string eventHubPath, string consumerGroupName, class System.Func`2&lt;class Microsoft.ServiceBus.Messaging.EventProcessorOptions, class Microsoft.ServiceBus.Messaging.MessagingFactory&gt; eventHubClientFactory, class System.Func`1&lt;class Microsoft.WindowsAzure.Storage.Blob.CloudBlobClient&gt; storageClientFactory, string leaseContainerName, string leaseBlobPrefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.Messaging.EventProcessorHost.#ctor(System.String,System.String,System.String,System.Func{Microsoft.ServiceBus.Messaging.EventProcessorOptions,Microsoft.ServiceBus.Messaging.MessagingFactory},System.Func{Microsoft.WindowsAzure.Storage.Blob.CloudBlobClient},System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (hostName As String, eventHubPath As String, consumerGroupName As String, eventHubClientFactory As Func(Of EventProcessorOptions, MessagingFactory), storageClientFactory As Func(Of CloudBlobClient), leaseContainerName As String, Optional leaseBlobPrefix As String = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.ServiceBus.Messaging.EventProcessorHost : string * string * string * Func&lt;Microsoft.ServiceBus.Messaging.EventProcessorOptions, Microsoft.ServiceBus.Messaging.MessagingFactory&gt; * Func&lt;Microsoft.WindowsAzure.Storage.Blob.CloudBlobClient&gt; * string * string -&gt; Microsoft.ServiceBus.Messaging.EventProcessorHost" Usage="new Microsoft.ServiceBus.Messaging.EventProcessorHost (hostName, eventHubPath, consumerGroupName, eventHubClientFactory, storageClientFactory, leaseContainerName, leaseBlobPrefix)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceBus.Messaging.EventProcessorHost</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="hostName" Type="System.String" />
        <Parameter Name="eventHubPath" Type="System.String" />
        <Parameter Name="consumerGroupName" Type="System.String" />
        <Parameter Name="eventHubClientFactory" Type="System.Func&lt;Microsoft.ServiceBus.Messaging.EventProcessorOptions,Microsoft.ServiceBus.Messaging.MessagingFactory&gt;" />
        <Parameter Name="storageClientFactory" Type="System.Func&lt;Microsoft.WindowsAzure.Storage.Blob.CloudBlobClient&gt;" />
        <Parameter Name="leaseContainerName" Type="System.String" />
        <Parameter Name="leaseBlobPrefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hostName">Name for EventProcessorHost instance.  This must be unique for each instance of the host.</param>
        <param name="eventHubPath">EventHub path to start receiving messages from.</param>
        <param name="consumerGroupName">Name of EventHub consumer group to start receiving messages from.</param>
        <param name="eventHubClientFactory">Factory to initialize <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactory" /> to be used by EventProcessorHost for creating <see cref="T:Microsoft.ServiceBus.Messaging.EventHubClient" />
            and eventually <see cref="T:Microsoft.ServiceBus.Messaging.EventHubReceiver" />.  EventProcessorHost maintains a pool of these <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactory" /> objects and will use provided factory whenever
            a new instance needs to be created based on <see cref="P:Microsoft.ServiceBus.Messaging.PartitionManagerOptions.MaxReceiveClients" /> option.</param>
        <param name="storageClientFactory">Factory to initialize <see cref="P:Microsoft.ServiceBus.Messaging.EventProcessorHost.CloudBlobClient" /> which is used by EventProcessorHost for lease management and partition 
            distribution among available hosts.</param>
        <param name="leaseContainerName">Name of Azure Blob container where all lease blobs are created.  If this is not passed in then EventHub path 
            is used as the name of Azure Blob container.</param>
        <param name="leaseBlobPrefix">The prefix of lease blob files.</param>
        <summary>
            Creates new instance of EventProcessorHost.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventProcessorHost (string hostName, string eventHubPath, string consumerGroupName, string eventHubConnectionString, string storageConnectionString, string leaseContainerName, string leaseBlobPrefix = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string hostName, string eventHubPath, string consumerGroupName, string eventHubConnectionString, string storageConnectionString, string leaseContainerName, string leaseBlobPrefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.Messaging.EventProcessorHost.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (hostName As String, eventHubPath As String, consumerGroupName As String, eventHubConnectionString As String, storageConnectionString As String, leaseContainerName As String, Optional leaseBlobPrefix As String = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.ServiceBus.Messaging.EventProcessorHost : string * string * string * string * string * string * string -&gt; Microsoft.ServiceBus.Messaging.EventProcessorHost" Usage="new Microsoft.ServiceBus.Messaging.EventProcessorHost (hostName, eventHubPath, consumerGroupName, eventHubConnectionString, storageConnectionString, leaseContainerName, leaseBlobPrefix)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceBus.Messaging.EventProcessorHost</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="hostName" Type="System.String" />
        <Parameter Name="eventHubPath" Type="System.String" />
        <Parameter Name="consumerGroupName" Type="System.String" />
        <Parameter Name="eventHubConnectionString" Type="System.String" />
        <Parameter Name="storageConnectionString" Type="System.String" />
        <Parameter Name="leaseContainerName" Type="System.String" />
        <Parameter Name="leaseBlobPrefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hostName">The name of the 
            <see cref="T:Microsoft.ServiceBus.Messaging.EventProcessorHost" /> instance. This name must be unique for each instance of the host.</param>
        <param name="eventHubPath">The path to the Event Hub from which to start receiving event data.</param>
        <param name="consumerGroupName">The name of the Event Hubs consumer group from which to start receiving event data.</param>
        <param name="eventHubConnectionString">The connection string for the Event Hub.</param>
        <param name="storageConnectionString">The connection string for the Azure Blob storage account to use for partition distribution.</param>
        <param name="leaseContainerName">The name of the Azure Blob container in which all lease blobs are created. If this 
            parameter is not supplied, then the Event Hubs path is used as the name of the Azure Blob container.</param>
        <param name="leaseBlobPrefix">The prefix of lease blob files.</param>
        <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.EventProcessorHost" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.Messaging.EventProcessorHost.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="eventProcessorHost.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceBus.Messaging.EventProcessorHost</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.Messaging.EventProcessorHost.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="eventProcessorHost.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceBus.Messaging.EventProcessorHost</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HostName">
      <MemberSignature Language="C#" Value="public string HostName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HostName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ServiceBus.Messaging.EventProcessorHost.HostName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HostName As String" />
      <MemberSignature Language="F#" Value="member this.HostName : string" Usage="Microsoft.ServiceBus.Messaging.EventProcessorHost.HostName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceBus.Messaging.EventProcessorHost</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the host name, which is a unique name for the <see cref="T:Microsoft.ServiceBus.Messaging.EventProcessorHost" /> instance.</summary>
        <value>The host name.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PartitionManagerOptions">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.PartitionManagerOptions PartitionManagerOptions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ServiceBus.Messaging.PartitionManagerOptions PartitionManagerOptions" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ServiceBus.Messaging.EventProcessorHost.PartitionManagerOptions" />
      <MemberSignature Language="VB.NET" Value="Public Property PartitionManagerOptions As PartitionManagerOptions" />
      <MemberSignature Language="F#" Value="member this.PartitionManagerOptions : Microsoft.ServiceBus.Messaging.PartitionManagerOptions with get, set" Usage="Microsoft.ServiceBus.Messaging.EventProcessorHost.PartitionManagerOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceBus.Messaging.EventProcessorHost</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.PartitionManagerOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the 
            <see cref="T:Microsoft.ServiceBus.Messaging.PartitionManagerOptions" /> instance used by the 
            <see cref="T:Microsoft.ServiceBus.Messaging.EventProcessorHost" /> object.</summary>
        <value>The <see cref="T:Microsoft.ServiceBus.Messaging.PartitionManagerOptions" /> instance.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterEventProcessorAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task RegisterEventProcessorAsync&lt;T&gt; () where T : Microsoft.ServiceBus.Messaging.IEventProcessor;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task RegisterEventProcessorAsync&lt;(class Microsoft.ServiceBus.Messaging.IEventProcessor) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.Messaging.EventProcessorHost.RegisterEventProcessorAsync``1" />
      <MemberSignature Language="VB.NET" Value="Public Function RegisterEventProcessorAsync(Of T As IEventProcessor) () As Task" />
      <MemberSignature Language="F#" Value="member this.RegisterEventProcessorAsync : unit -&gt; System.Threading.Tasks.Task (requires 'T :&gt; Microsoft.ServiceBus.Messaging.IEventProcessor)" Usage="eventProcessorHost.RegisterEventProcessorAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceBus.Messaging.EventProcessorHost</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>Microsoft.ServiceBus.Messaging.IEventProcessor</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Implementation of your application-specific <see cref="T:Microsoft.ServiceBus.Messaging.IEventProcessor" />.</typeparam>
        <summary>Asynchronously registers the 
            <see cref="T:Microsoft.ServiceBus.Messaging.IEventProcessor" /> interface implementation with the host using the 
            <see cref="T:Microsoft.ServiceBus.Messaging.DefaultEventProcessorFactory`1" /> factory. This method also starts the host and enables it to start participating in the partition distribution process.</summary>
        <returns>A task indicating that the <see cref="T:Microsoft.ServiceBus.Messaging.EventProcessorHost" /> instance has started.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterEventProcessorAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task RegisterEventProcessorAsync&lt;T&gt; (Microsoft.ServiceBus.Messaging.EventProcessorOptions processorOptions) where T : Microsoft.ServiceBus.Messaging.IEventProcessor;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task RegisterEventProcessorAsync&lt;(class Microsoft.ServiceBus.Messaging.IEventProcessor) T&gt;(class Microsoft.ServiceBus.Messaging.EventProcessorOptions processorOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.Messaging.EventProcessorHost.RegisterEventProcessorAsync``1(Microsoft.ServiceBus.Messaging.EventProcessorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function RegisterEventProcessorAsync(Of T As IEventProcessor) (processorOptions As EventProcessorOptions) As Task" />
      <MemberSignature Language="F#" Value="member this.RegisterEventProcessorAsync : Microsoft.ServiceBus.Messaging.EventProcessorOptions -&gt; System.Threading.Tasks.Task (requires 'T :&gt; Microsoft.ServiceBus.Messaging.IEventProcessor)" Usage="eventProcessorHost.RegisterEventProcessorAsync processorOptions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceBus.Messaging.EventProcessorHost</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>Microsoft.ServiceBus.Messaging.IEventProcessor</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="processorOptions" Type="Microsoft.ServiceBus.Messaging.EventProcessorOptions" />
      </Parameters>
      <Docs>
        <typeparam name="T">Implementation of your application specific <see cref="T:Microsoft.ServiceBus.Messaging.IEventProcessor" />.</typeparam>
        <param name="processorOptions">
          <see cref="T:Microsoft.ServiceBus.Messaging.EventProcessorOptions" /> to control various aspects of message pump created when ownership 
            is acquired for a particular partition of EventHub.</param>
        <summary>
            This registers <see cref="T:Microsoft.ServiceBus.Messaging.IEventProcessor" /> implementation with the host using <see cref="T:Microsoft.ServiceBus.Messaging.DefaultEventProcessorFactory`1" />.  
            This also starts the host and causes it to start participating in the partition distribution process.
            </summary>
        <returns>A task to indicate EventProcessorHost instance is started.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterEventProcessorFactoryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task RegisterEventProcessorFactoryAsync (Microsoft.ServiceBus.Messaging.IEventProcessorFactory factory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task RegisterEventProcessorFactoryAsync(class Microsoft.ServiceBus.Messaging.IEventProcessorFactory factory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.Messaging.EventProcessorHost.RegisterEventProcessorFactoryAsync(Microsoft.ServiceBus.Messaging.IEventProcessorFactory)" />
      <MemberSignature Language="VB.NET" Value="Public Function RegisterEventProcessorFactoryAsync (factory As IEventProcessorFactory) As Task" />
      <MemberSignature Language="F#" Value="member this.RegisterEventProcessorFactoryAsync : Microsoft.ServiceBus.Messaging.IEventProcessorFactory -&gt; System.Threading.Tasks.Task" Usage="eventProcessorHost.RegisterEventProcessorFactoryAsync factory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceBus.Messaging.EventProcessorHost</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factory" Type="Microsoft.ServiceBus.Messaging.IEventProcessorFactory" />
      </Parameters>
      <Docs>
        <param name="factory">Instance of <see cref="T:Microsoft.ServiceBus.Messaging.IEventProcessorFactory" /> implementation.</param>
        <summary>
            This registers <see cref="T:Microsoft.ServiceBus.Messaging.IEventProcessorFactory" /> implementation with the host which is used to create an instance of 
            <see cref="T:Microsoft.ServiceBus.Messaging.IEventProcessor" /> when it takes ownership of a partition.  This also starts the host and causes it to start participating 
            in the partition distribution process.
            </summary>
        <returns>A task to indicate EventProcessorHost instance is started.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterEventProcessorFactoryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task RegisterEventProcessorFactoryAsync (Microsoft.ServiceBus.Messaging.IEventProcessorFactory factory, Microsoft.ServiceBus.Messaging.EventProcessorOptions processorOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task RegisterEventProcessorFactoryAsync(class Microsoft.ServiceBus.Messaging.IEventProcessorFactory factory, class Microsoft.ServiceBus.Messaging.EventProcessorOptions processorOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.Messaging.EventProcessorHost.RegisterEventProcessorFactoryAsync(Microsoft.ServiceBus.Messaging.IEventProcessorFactory,Microsoft.ServiceBus.Messaging.EventProcessorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function RegisterEventProcessorFactoryAsync (factory As IEventProcessorFactory, processorOptions As EventProcessorOptions) As Task" />
      <MemberSignature Language="F#" Value="member this.RegisterEventProcessorFactoryAsync : Microsoft.ServiceBus.Messaging.IEventProcessorFactory * Microsoft.ServiceBus.Messaging.EventProcessorOptions -&gt; System.Threading.Tasks.Task" Usage="eventProcessorHost.RegisterEventProcessorFactoryAsync (factory, processorOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceBus.Messaging.EventProcessorHost</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factory" Type="Microsoft.ServiceBus.Messaging.IEventProcessorFactory" />
        <Parameter Name="processorOptions" Type="Microsoft.ServiceBus.Messaging.EventProcessorOptions" />
      </Parameters>
      <Docs>
        <param name="factory">Instance of <see cref="T:Microsoft.ServiceBus.Messaging.IEventProcessorFactory" /> implementation.</param>
        <param name="processorOptions">
          <see cref="T:Microsoft.ServiceBus.Messaging.EventProcessorOptions" /> to control various aspects of message pump created when ownership 
            is acquired for a particular partition of EventHub.</param>
        <summary>
            This registers <see cref="T:Microsoft.ServiceBus.Messaging.IEventProcessorFactory" /> implementation with the host which is used to create an instance of 
            <see cref="T:Microsoft.ServiceBus.Messaging.IEventProcessor" /> when it takes ownership of a partition.  This also starts the host and causes it to start participating 
            in the partition distribution process.
            </summary>
        <returns>A task to indicate EventProcessorHost instance is started.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetAllConnections">
      <MemberSignature Language="C#" Value="public void ResetAllConnections ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetAllConnections() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.Messaging.EventProcessorHost.ResetAllConnections" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetAllConnections ()" />
      <MemberSignature Language="F#" Value="member this.ResetAllConnections : unit -&gt; unit" Usage="eventProcessorHost.ResetAllConnections " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceBus.Messaging.EventProcessorHost</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Reset all Event Hubs receiver connections used by this instance of EventProcessorHost.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetConnection">
      <MemberSignature Language="C#" Value="public void ResetConnection (string partitionId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetConnection(string partitionId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.Messaging.EventProcessorHost.ResetConnection(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetConnection (partitionId As String)" />
      <MemberSignature Language="F#" Value="member this.ResetConnection : string -&gt; unit" Usage="eventProcessorHost.ResetConnection partitionId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceBus.Messaging.EventProcessorHost</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="partitionId" />
        <summary />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterEventProcessorAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task UnregisterEventProcessorAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task UnregisterEventProcessorAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.Messaging.EventProcessorHost.UnregisterEventProcessorAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function UnregisterEventProcessorAsync () As Task" />
      <MemberSignature Language="F#" Value="member this.UnregisterEventProcessorAsync : unit -&gt; System.Threading.Tasks.Task" Usage="eventProcessorHost.UnregisterEventProcessorAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceBus.Messaging.EventProcessorHost</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Asynchronously shuts down the 
            <see cref="T:Microsoft.ServiceBus.Messaging.EventProcessorHost" /> instance. This method maintains the leases on all partitions currently held, and enables each 
            <see cref="T:Microsoft.ServiceBus.Messaging.IEventProcessor" /> instance to shut down cleanly by invoking the 
            <see cref="M:Microsoft.ServiceBus.Messaging.IEventProcessor.CloseAsync(Microsoft.ServiceBus.Messaging.PartitionContext,Microsoft.ServiceBus.Messaging.CloseReason)" /> method with a 
            <see cref="F:Microsoft.ServiceBus.Messaging.CloseReason.Shutdown" /> object after current execution of 
            <see cref="M:Microsoft.ServiceBus.Messaging.IEventProcessor.ProcessEventsAsync(Microsoft.ServiceBus.Messaging.PartitionContext,System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.EventData})" /> completes.
            </summary>
        <returns>A task that indicates the <see cref="T:Microsoft.ServiceBus.Messaging.EventProcessorHost" /> instance has stopped.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
