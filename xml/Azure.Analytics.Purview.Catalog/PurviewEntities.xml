<Type Name="PurviewEntities" FullName="Azure.Analytics.Purview.Catalog.PurviewEntities">
  <TypeSignature Language="C#" Value="public class PurviewEntities" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PurviewEntities extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Analytics.Purview.Catalog.PurviewEntities" />
  <TypeSignature Language="VB.NET" Value="Public Class PurviewEntities" />
  <TypeSignature Language="F#" Value="type PurviewEntities = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The PurviewEntities service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PurviewEntities ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of PurviewEntities for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddClassification">
      <MemberSignature Language="C#" Value="public virtual Azure.Response AddClassification (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response AddClassification(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.AddClassification(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddClassification (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member AddClassification : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.AddClassification : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="purviewEntities.AddClassification (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Associate a classification to multiple entities in bulk. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              classification: {
                attributes: Dictionary&lt;string, AnyObject&gt;,
                typeName: string,
                lastModifiedTS: string,
                entityGuid: string,
                entityStatus: "ACTIVE" | "DELETED",
                removePropagationsOnEntityDelete: boolean,
                validityPeriods: [
                  {
                    endTime: string,
                    startTime: string,
                    timeZone: string
                  }
                ],
                source: string,
                sourceDetails: Dictionary&lt;string, AnyObject&gt;
              },
              entityGuids: [string]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddClassificationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; AddClassificationAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; AddClassificationAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.AddClassificationAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddClassificationAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member AddClassificationAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.AddClassificationAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewEntities.AddClassificationAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Associate a classification to multiple entities in bulk. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              classification: {
                attributes: Dictionary&lt;string, AnyObject&gt;,
                typeName: string,
                lastModifiedTS: string,
                entityGuid: string,
                entityStatus: "ACTIVE" | "DELETED",
                removePropagationsOnEntityDelete: boolean,
                validityPeriods: [
                  {
                    endTime: string,
                    startTime: string,
                    timeZone: string
                  }
                ],
                source: string,
                sourceDetails: Dictionary&lt;string, AnyObject&gt;
              },
              entityGuids: [string]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddClassifications">
      <MemberSignature Language="C#" Value="public virtual Azure.Response AddClassifications (string guid, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response AddClassifications(string guid, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.AddClassifications(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddClassifications (guid As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member AddClassifications : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.AddClassifications : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="purviewEntities.AddClassifications (guid, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the entity. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Add classifications to an existing entity represented by a GUID. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              attributes: Dictionary&lt;string, AnyObject&gt;,
              typeName: string,
              lastModifiedTS: string,
              entityGuid: string,
              entityStatus: "ACTIVE" | "DELETED",
              removePropagationsOnEntityDelete: boolean,
              validityPeriods: [
                {
                  endTime: string,
                  startTime: string,
                  timeZone: string
                }
              ],
              source: string,
              sourceDetails: Dictionary&lt;string, AnyObject&gt;
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddClassificationsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; AddClassificationsAsync (string guid, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; AddClassificationsAsync(string guid, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.AddClassificationsAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddClassificationsAsync (guid As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member AddClassificationsAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.AddClassificationsAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewEntities.AddClassificationsAsync (guid, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the entity. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Add classifications to an existing entity represented by a GUID. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              attributes: Dictionary&lt;string, AnyObject&gt;,
              typeName: string,
              lastModifiedTS: string,
              entityGuid: string,
              entityStatus: "ACTIVE" | "DELETED",
              removePropagationsOnEntityDelete: boolean,
              validityPeriods: [
                {
                  endTime: string,
                  startTime: string,
                  timeZone: string
                }
              ],
              source: string,
              sourceDetails: Dictionary&lt;string, AnyObject&gt;
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddClassificationsByUniqueAttribute">
      <MemberSignature Language="C#" Value="public virtual Azure.Response AddClassificationsByUniqueAttribute (string typeName, Azure.Core.RequestContent content, string attrQualifiedName = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response AddClassificationsByUniqueAttribute(string typeName, class Azure.Core.RequestContent content, string attrQualifiedName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.AddClassificationsByUniqueAttribute(System.String,Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddClassificationsByUniqueAttribute (typeName As String, content As RequestContent, Optional attrQualifiedName As String = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member AddClassificationsByUniqueAttribute : string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.AddClassificationsByUniqueAttribute : string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewEntities.AddClassificationsByUniqueAttribute (typeName, content, attrQualifiedName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="attrQualifiedName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="typeName"> The name of the type. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="attrQualifiedName"> The qualified name of the entity. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Add classification to the entity identified by its type and unique attributes. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              attributes: Dictionary&lt;string, AnyObject&gt;,
              typeName: string,
              lastModifiedTS: string,
              entityGuid: string,
              entityStatus: "ACTIVE" | "DELETED",
              removePropagationsOnEntityDelete: boolean,
              validityPeriods: [
                {
                  endTime: string,
                  startTime: string,
                  timeZone: string
                }
              ],
              source: string,
              sourceDetails: Dictionary&lt;string, AnyObject&gt;
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="typeName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddClassificationsByUniqueAttributeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; AddClassificationsByUniqueAttributeAsync (string typeName, Azure.Core.RequestContent content, string attrQualifiedName = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; AddClassificationsByUniqueAttributeAsync(string typeName, class Azure.Core.RequestContent content, string attrQualifiedName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.AddClassificationsByUniqueAttributeAsync(System.String,Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddClassificationsByUniqueAttributeAsync (typeName As String, content As RequestContent, Optional attrQualifiedName As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member AddClassificationsByUniqueAttributeAsync : string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.AddClassificationsByUniqueAttributeAsync : string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewEntities.AddClassificationsByUniqueAttributeAsync (typeName, content, attrQualifiedName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="attrQualifiedName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="typeName"> The name of the type. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="attrQualifiedName"> The qualified name of the entity. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Add classification to the entity identified by its type and unique attributes. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              attributes: Dictionary&lt;string, AnyObject&gt;,
              typeName: string,
              lastModifiedTS: string,
              entityGuid: string,
              entityStatus: "ACTIVE" | "DELETED",
              removePropagationsOnEntityDelete: boolean,
              validityPeriods: [
                {
                  endTime: string,
                  startTime: string,
                  timeZone: string
                }
              ],
              source: string,
              sourceDetails: Dictionary&lt;string, AnyObject&gt;
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="typeName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddLabel">
      <MemberSignature Language="C#" Value="public virtual Azure.Response AddLabel (string guid, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response AddLabel(string guid, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.AddLabel(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddLabel (guid As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member AddLabel : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.AddLabel : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="purviewEntities.AddLabel (guid, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the entity. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> add given labels to a given entity. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddLabelAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; AddLabelAsync (string guid, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; AddLabelAsync(string guid, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.AddLabelAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddLabelAsync (guid As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member AddLabelAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.AddLabelAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewEntities.AddLabelAsync (guid, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the entity. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> add given labels to a given entity. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddLabelsByUniqueAttribute">
      <MemberSignature Language="C#" Value="public virtual Azure.Response AddLabelsByUniqueAttribute (string typeName, Azure.Core.RequestContent content, string attrQualifiedName = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response AddLabelsByUniqueAttribute(string typeName, class Azure.Core.RequestContent content, string attrQualifiedName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.AddLabelsByUniqueAttribute(System.String,Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddLabelsByUniqueAttribute (typeName As String, content As RequestContent, Optional attrQualifiedName As String = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member AddLabelsByUniqueAttribute : string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.AddLabelsByUniqueAttribute : string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewEntities.AddLabelsByUniqueAttribute (typeName, content, attrQualifiedName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="attrQualifiedName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="typeName"> The name of the type. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="attrQualifiedName"> The qualified name of the entity. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Add given labels to a given entity identified by its type and unique attributes, if labels is null/empty, no labels will be added. In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format: attr:&lt;attrName&gt;=&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName. The REST request would look something like this: PUT /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="typeName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddLabelsByUniqueAttributeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; AddLabelsByUniqueAttributeAsync (string typeName, Azure.Core.RequestContent content, string attrQualifiedName = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; AddLabelsByUniqueAttributeAsync(string typeName, class Azure.Core.RequestContent content, string attrQualifiedName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.AddLabelsByUniqueAttributeAsync(System.String,Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddLabelsByUniqueAttributeAsync (typeName As String, content As RequestContent, Optional attrQualifiedName As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member AddLabelsByUniqueAttributeAsync : string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.AddLabelsByUniqueAttributeAsync : string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewEntities.AddLabelsByUniqueAttributeAsync (typeName, content, attrQualifiedName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="attrQualifiedName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="typeName"> The name of the type. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="attrQualifiedName"> The qualified name of the entity. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Add given labels to a given entity identified by its type and unique attributes, if labels is null/empty, no labels will be added. In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format: attr:&lt;attrName&gt;=&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName. The REST request would look something like this: PUT /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="typeName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddOrUpdateBusinessMetadata">
      <MemberSignature Language="C#" Value="public virtual Azure.Response AddOrUpdateBusinessMetadata (string guid, Azure.Core.RequestContent content, bool? isOverwrite = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response AddOrUpdateBusinessMetadata(string guid, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;bool&gt; isOverwrite, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.AddOrUpdateBusinessMetadata(System.String,Azure.Core.RequestContent,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddOrUpdateBusinessMetadata (guid As String, content As RequestContent, Optional isOverwrite As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member AddOrUpdateBusinessMetadata : string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.AddOrUpdateBusinessMetadata : string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="purviewEntities.AddOrUpdateBusinessMetadata (guid, content, isOverwrite, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="isOverwrite" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the entity. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="isOverwrite"> Whether to overwrite the existing business metadata on the entity or not, default is false. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Add business metadata to an entity. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddOrUpdateBusinessMetadataAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; AddOrUpdateBusinessMetadataAsync (string guid, Azure.Core.RequestContent content, bool? isOverwrite = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; AddOrUpdateBusinessMetadataAsync(string guid, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;bool&gt; isOverwrite, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.AddOrUpdateBusinessMetadataAsync(System.String,Azure.Core.RequestContent,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddOrUpdateBusinessMetadataAsync (guid As String, content As RequestContent, Optional isOverwrite As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member AddOrUpdateBusinessMetadataAsync : string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.AddOrUpdateBusinessMetadataAsync : string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewEntities.AddOrUpdateBusinessMetadataAsync (guid, content, isOverwrite, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="isOverwrite" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the entity. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="isOverwrite"> Whether to overwrite the existing business metadata on the entity or not, default is false. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Add business metadata to an entity. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddOrUpdateBusinessMetadataAttributes">
      <MemberSignature Language="C#" Value="public virtual Azure.Response AddOrUpdateBusinessMetadataAttributes (string guid, string bmName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response AddOrUpdateBusinessMetadataAttributes(string guid, string bmName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.AddOrUpdateBusinessMetadataAttributes(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddOrUpdateBusinessMetadataAttributes (guid As String, bmName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member AddOrUpdateBusinessMetadataAttributes : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.AddOrUpdateBusinessMetadataAttributes : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="purviewEntities.AddOrUpdateBusinessMetadataAttributes (guid, bmName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="bmName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the entity. </param>
        <param name="bmName"> BusinessMetadata name. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Add or update business metadata attributes. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> or <paramref name="bmName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> or <paramref name="bmName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddOrUpdateBusinessMetadataAttributesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; AddOrUpdateBusinessMetadataAttributesAsync (string guid, string bmName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; AddOrUpdateBusinessMetadataAttributesAsync(string guid, string bmName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.AddOrUpdateBusinessMetadataAttributesAsync(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddOrUpdateBusinessMetadataAttributesAsync (guid As String, bmName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member AddOrUpdateBusinessMetadataAttributesAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.AddOrUpdateBusinessMetadataAttributesAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewEntities.AddOrUpdateBusinessMetadataAttributesAsync (guid, bmName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="bmName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the entity. </param>
        <param name="bmName"> BusinessMetadata name. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Add or update business metadata attributes. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> or <paramref name="bmName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> or <paramref name="bmName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdate">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateOrUpdate (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateOrUpdate(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.CreateOrUpdate(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdate (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdate : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateOrUpdate : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="purviewEntities.CreateOrUpdate (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary>
            Create or update an entity in Atlas.
            Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
            Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              referredEntities: Dictionary&lt;string, AtlasEntity&gt;,
              entity: {
                attributes: Dictionary&lt;string, AnyObject&gt;,
                typeName: string,
                lastModifiedTS: string,
                businessAttributes: Dictionary&lt;string, AnyObject&gt;,
                classifications: [
                  {
                    attributes: Dictionary&lt;string, AnyObject&gt;,
                    typeName: string,
                    lastModifiedTS: string,
                    entityGuid: string,
                    entityStatus: "ACTIVE" | "DELETED",
                    removePropagationsOnEntityDelete: boolean,
                    validityPeriods: [
                      {
                        endTime: string,
                        startTime: string,
                        timeZone: string
                      }
                    ],
                    source: string,
                    sourceDetails: Dictionary&lt;string, AnyObject&gt;
                  }
                ],
                createTime: number,
                createdBy: string,
                customAttributes: Dictionary&lt;string, string&gt;,
                guid: string,
                homeId: string,
                isIncomplete: boolean,
                labels: [string],
                meanings: [
                  {
                    confidence: number,
                    createdBy: string,
                    description: string,
                    displayText: string,
                    expression: string,
                    relationGuid: string,
                    source: string,
                    status: "DISCOVERED" | "PROPOSED" | "IMPORTED" | "VALIDATED" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                    steward: string,
                    termGuid: string
                  }
                ],
                provenanceType: number,
                proxy: boolean,
                relationshipAttributes: Dictionary&lt;string, AnyObject&gt;,
                status: "ACTIVE" | "DELETED",
                updateTime: number,
                updatedBy: string,
                version: number,
                source: string,
                sourceDetails: Dictionary&lt;string, AnyObject&gt;,
                contacts: Dictionary&lt;string, ContactBasic[]&gt;
              }
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              guidAssignments: Dictionary&lt;string, string&gt;,
              mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;,
              partialUpdatedEntities: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  classificationNames: [string],
                  classifications: [
                    {
                      attributes: Dictionary&lt;string, AnyObject&gt;,
                      typeName: string,
                      lastModifiedTS: string,
                      entityGuid: string,
                      entityStatus: "ACTIVE" | "DELETED",
                      removePropagationsOnEntityDelete: boolean,
                      validityPeriods: [
                        {
                          endTime: string,
                          startTime: string,
                          timeZone: string
                        }
                      ],
                      source: string,
                      sourceDetails: Dictionary&lt;string, AnyObject&gt;
                    }
                  ],
                  displayText: string,
                  guid: string,
                  isIncomplete: boolean,
                  labels: [string],
                  meaningNames: [string],
                  meanings: [
                    {
                      confidence: number,
                      createdBy: string,
                      description: string,
                      displayText: string,
                      expression: string,
                      relationGuid: string,
                      source: string,
                      status: "DISCOVERED" | "PROPOSED" | "IMPORTED" | "VALIDATED" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                      steward: string,
                      termGuid: string
                    }
                  ],
                  status: "ACTIVE" | "DELETED"
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateOrUpdateAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateOrUpdateAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.CreateOrUpdateAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdateAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdateAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateOrUpdateAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewEntities.CreateOrUpdateAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary>
            Create or update an entity in Atlas.
            Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
            Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              referredEntities: Dictionary&lt;string, AtlasEntity&gt;,
              entity: {
                attributes: Dictionary&lt;string, AnyObject&gt;,
                typeName: string,
                lastModifiedTS: string,
                businessAttributes: Dictionary&lt;string, AnyObject&gt;,
                classifications: [
                  {
                    attributes: Dictionary&lt;string, AnyObject&gt;,
                    typeName: string,
                    lastModifiedTS: string,
                    entityGuid: string,
                    entityStatus: "ACTIVE" | "DELETED",
                    removePropagationsOnEntityDelete: boolean,
                    validityPeriods: [
                      {
                        endTime: string,
                        startTime: string,
                        timeZone: string
                      }
                    ],
                    source: string,
                    sourceDetails: Dictionary&lt;string, AnyObject&gt;
                  }
                ],
                createTime: number,
                createdBy: string,
                customAttributes: Dictionary&lt;string, string&gt;,
                guid: string,
                homeId: string,
                isIncomplete: boolean,
                labels: [string],
                meanings: [
                  {
                    confidence: number,
                    createdBy: string,
                    description: string,
                    displayText: string,
                    expression: string,
                    relationGuid: string,
                    source: string,
                    status: "DISCOVERED" | "PROPOSED" | "IMPORTED" | "VALIDATED" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                    steward: string,
                    termGuid: string
                  }
                ],
                provenanceType: number,
                proxy: boolean,
                relationshipAttributes: Dictionary&lt;string, AnyObject&gt;,
                status: "ACTIVE" | "DELETED",
                updateTime: number,
                updatedBy: string,
                version: number,
                source: string,
                sourceDetails: Dictionary&lt;string, AnyObject&gt;,
                contacts: Dictionary&lt;string, ContactBasic[]&gt;
              }
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              guidAssignments: Dictionary&lt;string, string&gt;,
              mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;,
              partialUpdatedEntities: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  classificationNames: [string],
                  classifications: [
                    {
                      attributes: Dictionary&lt;string, AnyObject&gt;,
                      typeName: string,
                      lastModifiedTS: string,
                      entityGuid: string,
                      entityStatus: "ACTIVE" | "DELETED",
                      removePropagationsOnEntityDelete: boolean,
                      validityPeriods: [
                        {
                          endTime: string,
                          startTime: string,
                          timeZone: string
                        }
                      ],
                      source: string,
                      sourceDetails: Dictionary&lt;string, AnyObject&gt;
                    }
                  ],
                  displayText: string,
                  guid: string,
                  isIncomplete: boolean,
                  labels: [string],
                  meaningNames: [string],
                  meanings: [
                    {
                      confidence: number,
                      createdBy: string,
                      description: string,
                      displayText: string,
                      expression: string,
                      relationGuid: string,
                      source: string,
                      status: "DISCOVERED" | "PROPOSED" | "IMPORTED" | "VALIDATED" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                      steward: string,
                      termGuid: string
                    }
                  ],
                  status: "ACTIVE" | "DELETED"
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdateEntities">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateOrUpdateEntities (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateOrUpdateEntities(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.CreateOrUpdateEntities(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdateEntities (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdateEntities : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateOrUpdateEntities : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="purviewEntities.CreateOrUpdateEntities (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary>
            Create or update entities in Atlas in bulk.
            Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
            Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              referredEntities: Dictionary&lt;string, AtlasEntity&gt;,
              entities: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  businessAttributes: Dictionary&lt;string, AnyObject&gt;,
                  classifications: [
                    {
                      attributes: Dictionary&lt;string, AnyObject&gt;,
                      typeName: string,
                      lastModifiedTS: string,
                      entityGuid: string,
                      entityStatus: "ACTIVE" | "DELETED",
                      removePropagationsOnEntityDelete: boolean,
                      validityPeriods: [
                        {
                          endTime: string,
                          startTime: string,
                          timeZone: string
                        }
                      ],
                      source: string,
                      sourceDetails: Dictionary&lt;string, AnyObject&gt;
                    }
                  ],
                  createTime: number,
                  createdBy: string,
                  customAttributes: Dictionary&lt;string, string&gt;,
                  guid: string,
                  homeId: string,
                  isIncomplete: boolean,
                  labels: [string],
                  meanings: [
                    {
                      confidence: number,
                      createdBy: string,
                      description: string,
                      displayText: string,
                      expression: string,
                      relationGuid: string,
                      source: string,
                      status: "DISCOVERED" | "PROPOSED" | "IMPORTED" | "VALIDATED" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                      steward: string,
                      termGuid: string
                    }
                  ],
                  provenanceType: number,
                  proxy: boolean,
                  relationshipAttributes: Dictionary&lt;string, AnyObject&gt;,
                  status: "ACTIVE" | "DELETED",
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;,
                  contacts: Dictionary&lt;string, ContactBasic[]&gt;
                }
              ]
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              guidAssignments: Dictionary&lt;string, string&gt;,
              mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;,
              partialUpdatedEntities: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  classificationNames: [string],
                  classifications: [
                    {
                      attributes: Dictionary&lt;string, AnyObject&gt;,
                      typeName: string,
                      lastModifiedTS: string,
                      entityGuid: string,
                      entityStatus: "ACTIVE" | "DELETED",
                      removePropagationsOnEntityDelete: boolean,
                      validityPeriods: [
                        {
                          endTime: string,
                          startTime: string,
                          timeZone: string
                        }
                      ],
                      source: string,
                      sourceDetails: Dictionary&lt;string, AnyObject&gt;
                    }
                  ],
                  displayText: string,
                  guid: string,
                  isIncomplete: boolean,
                  labels: [string],
                  meaningNames: [string],
                  meanings: [
                    {
                      confidence: number,
                      createdBy: string,
                      description: string,
                      displayText: string,
                      expression: string,
                      relationGuid: string,
                      source: string,
                      status: "DISCOVERED" | "PROPOSED" | "IMPORTED" | "VALIDATED" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                      steward: string,
                      termGuid: string
                    }
                  ],
                  status: "ACTIVE" | "DELETED"
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdateEntitiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateOrUpdateEntitiesAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateOrUpdateEntitiesAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.CreateOrUpdateEntitiesAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdateEntitiesAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdateEntitiesAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateOrUpdateEntitiesAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewEntities.CreateOrUpdateEntitiesAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary>
            Create or update entities in Atlas in bulk.
            Existing entity is matched using its unique guid if supplied or by its unique attributes eg: qualifiedName.
            Map and array of collections are not well supported. E.g., array&lt;array&lt;int&gt;&gt;, array&lt;map&lt;string, int&gt;&gt;.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              referredEntities: Dictionary&lt;string, AtlasEntity&gt;,
              entities: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  businessAttributes: Dictionary&lt;string, AnyObject&gt;,
                  classifications: [
                    {
                      attributes: Dictionary&lt;string, AnyObject&gt;,
                      typeName: string,
                      lastModifiedTS: string,
                      entityGuid: string,
                      entityStatus: "ACTIVE" | "DELETED",
                      removePropagationsOnEntityDelete: boolean,
                      validityPeriods: [
                        {
                          endTime: string,
                          startTime: string,
                          timeZone: string
                        }
                      ],
                      source: string,
                      sourceDetails: Dictionary&lt;string, AnyObject&gt;
                    }
                  ],
                  createTime: number,
                  createdBy: string,
                  customAttributes: Dictionary&lt;string, string&gt;,
                  guid: string,
                  homeId: string,
                  isIncomplete: boolean,
                  labels: [string],
                  meanings: [
                    {
                      confidence: number,
                      createdBy: string,
                      description: string,
                      displayText: string,
                      expression: string,
                      relationGuid: string,
                      source: string,
                      status: "DISCOVERED" | "PROPOSED" | "IMPORTED" | "VALIDATED" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                      steward: string,
                      termGuid: string
                    }
                  ],
                  provenanceType: number,
                  proxy: boolean,
                  relationshipAttributes: Dictionary&lt;string, AnyObject&gt;,
                  status: "ACTIVE" | "DELETED",
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;,
                  contacts: Dictionary&lt;string, ContactBasic[]&gt;
                }
              ]
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              guidAssignments: Dictionary&lt;string, string&gt;,
              mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;,
              partialUpdatedEntities: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  classificationNames: [string],
                  classifications: [
                    {
                      attributes: Dictionary&lt;string, AnyObject&gt;,
                      typeName: string,
                      lastModifiedTS: string,
                      entityGuid: string,
                      entityStatus: "ACTIVE" | "DELETED",
                      removePropagationsOnEntityDelete: boolean,
                      validityPeriods: [
                        {
                          endTime: string,
                          startTime: string,
                          timeZone: string
                        }
                      ],
                      source: string,
                      sourceDetails: Dictionary&lt;string, AnyObject&gt;
                    }
                  ],
                  displayText: string,
                  guid: string,
                  isIncomplete: boolean,
                  labels: [string],
                  meaningNames: [string],
                  meanings: [
                    {
                      confidence: number,
                      createdBy: string,
                      description: string,
                      displayText: string,
                      expression: string,
                      relationGuid: string,
                      source: string,
                      status: "DISCOVERED" | "PROPOSED" | "IMPORTED" | "VALIDATED" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                      steward: string,
                      termGuid: string
                    }
                  ],
                  status: "ACTIVE" | "DELETED"
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteBusinessMetadata">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteBusinessMetadata (string guid, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteBusinessMetadata(string guid, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.DeleteBusinessMetadata(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteBusinessMetadata (guid As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteBusinessMetadata : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteBusinessMetadata : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="purviewEntities.DeleteBusinessMetadata (guid, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the entity. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Remove business metadata from an entity. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteBusinessMetadataAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteBusinessMetadataAsync (string guid, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteBusinessMetadataAsync(string guid, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.DeleteBusinessMetadataAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteBusinessMetadataAsync (guid As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteBusinessMetadataAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteBusinessMetadataAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewEntities.DeleteBusinessMetadataAsync (guid, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the entity. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Remove business metadata from an entity. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteBusinessMetadataAttributes">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteBusinessMetadataAttributes (string guid, string bmName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteBusinessMetadataAttributes(string guid, string bmName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.DeleteBusinessMetadataAttributes(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteBusinessMetadataAttributes (guid As String, bmName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteBusinessMetadataAttributes : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteBusinessMetadataAttributes : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="purviewEntities.DeleteBusinessMetadataAttributes (guid, bmName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="bmName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the entity. </param>
        <param name="bmName"> BusinessMetadata name. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Delete business metadata attributes from an entity. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> or <paramref name="bmName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> or <paramref name="bmName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteBusinessMetadataAttributesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteBusinessMetadataAttributesAsync (string guid, string bmName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteBusinessMetadataAttributesAsync(string guid, string bmName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.DeleteBusinessMetadataAttributesAsync(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteBusinessMetadataAttributesAsync (guid As String, bmName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteBusinessMetadataAttributesAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteBusinessMetadataAttributesAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewEntities.DeleteBusinessMetadataAttributesAsync (guid, bmName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="bmName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the entity. </param>
        <param name="bmName"> BusinessMetadata name. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Delete business metadata attributes from an entity. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> or <paramref name="bmName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> or <paramref name="bmName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteByGuid">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteByGuid (string guid, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteByGuid(string guid, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.DeleteByGuid(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteByGuid (guid As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteByGuid : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteByGuid : string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewEntities.DeleteByGuid (guid, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the entity. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Delete an entity identified by its GUID. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              guidAssignments: Dictionary&lt;string, string&gt;,
              mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;,
              partialUpdatedEntities: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  classificationNames: [string],
                  classifications: [
                    {
                      attributes: Dictionary&lt;string, AnyObject&gt;,
                      typeName: string,
                      lastModifiedTS: string,
                      entityGuid: string,
                      entityStatus: "ACTIVE" | "DELETED",
                      removePropagationsOnEntityDelete: boolean,
                      validityPeriods: [
                        {
                          endTime: string,
                          startTime: string,
                          timeZone: string
                        }
                      ],
                      source: string,
                      sourceDetails: Dictionary&lt;string, AnyObject&gt;
                    }
                  ],
                  displayText: string,
                  guid: string,
                  isIncomplete: boolean,
                  labels: [string],
                  meaningNames: [string],
                  meanings: [
                    {
                      confidence: number,
                      createdBy: string,
                      description: string,
                      displayText: string,
                      expression: string,
                      relationGuid: string,
                      source: string,
                      status: "DISCOVERED" | "PROPOSED" | "IMPORTED" | "VALIDATED" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                      steward: string,
                      termGuid: string
                    }
                  ],
                  status: "ACTIVE" | "DELETED"
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteByGuidAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteByGuidAsync (string guid, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteByGuidAsync(string guid, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.DeleteByGuidAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteByGuidAsync (guid As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteByGuidAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteByGuidAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewEntities.DeleteByGuidAsync (guid, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the entity. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Delete an entity identified by its GUID. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              guidAssignments: Dictionary&lt;string, string&gt;,
              mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;,
              partialUpdatedEntities: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  classificationNames: [string],
                  classifications: [
                    {
                      attributes: Dictionary&lt;string, AnyObject&gt;,
                      typeName: string,
                      lastModifiedTS: string,
                      entityGuid: string,
                      entityStatus: "ACTIVE" | "DELETED",
                      removePropagationsOnEntityDelete: boolean,
                      validityPeriods: [
                        {
                          endTime: string,
                          startTime: string,
                          timeZone: string
                        }
                      ],
                      source: string,
                      sourceDetails: Dictionary&lt;string, AnyObject&gt;
                    }
                  ],
                  displayText: string,
                  guid: string,
                  isIncomplete: boolean,
                  labels: [string],
                  meaningNames: [string],
                  meanings: [
                    {
                      confidence: number,
                      createdBy: string,
                      description: string,
                      displayText: string,
                      expression: string,
                      relationGuid: string,
                      source: string,
                      status: "DISCOVERED" | "PROPOSED" | "IMPORTED" | "VALIDATED" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                      steward: string,
                      termGuid: string
                    }
                  ],
                  status: "ACTIVE" | "DELETED"
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteByGuids">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteByGuids (System.Collections.Generic.IEnumerable&lt;string&gt; guids, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteByGuids(class System.Collections.Generic.IEnumerable`1&lt;string&gt; guids, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.DeleteByGuids(System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteByGuids (guids As IEnumerable(Of String), Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteByGuids : seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteByGuids : seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="purviewEntities.DeleteByGuids (guids, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guids" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guids"> An array of GUIDs of entities to delete. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Delete a list of entities in bulk identified by their GUIDs or unique attributes. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              guidAssignments: Dictionary&lt;string, string&gt;,
              mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;,
              partialUpdatedEntities: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  classificationNames: [string],
                  classifications: [
                    {
                      attributes: Dictionary&lt;string, AnyObject&gt;,
                      typeName: string,
                      lastModifiedTS: string,
                      entityGuid: string,
                      entityStatus: "ACTIVE" | "DELETED",
                      removePropagationsOnEntityDelete: boolean,
                      validityPeriods: [
                        {
                          endTime: string,
                          startTime: string,
                          timeZone: string
                        }
                      ],
                      source: string,
                      sourceDetails: Dictionary&lt;string, AnyObject&gt;
                    }
                  ],
                  displayText: string,
                  guid: string,
                  isIncomplete: boolean,
                  labels: [string],
                  meaningNames: [string],
                  meanings: [
                    {
                      confidence: number,
                      createdBy: string,
                      description: string,
                      displayText: string,
                      expression: string,
                      relationGuid: string,
                      source: string,
                      status: "DISCOVERED" | "PROPOSED" | "IMPORTED" | "VALIDATED" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                      steward: string,
                      termGuid: string
                    }
                  ],
                  status: "ACTIVE" | "DELETED"
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guids" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteByGuidsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteByGuidsAsync (System.Collections.Generic.IEnumerable&lt;string&gt; guids, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteByGuidsAsync(class System.Collections.Generic.IEnumerable`1&lt;string&gt; guids, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.DeleteByGuidsAsync(System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteByGuidsAsync (guids As IEnumerable(Of String), Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteByGuidsAsync : seq&lt;string&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteByGuidsAsync : seq&lt;string&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewEntities.DeleteByGuidsAsync (guids, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guids" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guids"> An array of GUIDs of entities to delete. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Delete a list of entities in bulk identified by their GUIDs or unique attributes. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              guidAssignments: Dictionary&lt;string, string&gt;,
              mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;,
              partialUpdatedEntities: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  classificationNames: [string],
                  classifications: [
                    {
                      attributes: Dictionary&lt;string, AnyObject&gt;,
                      typeName: string,
                      lastModifiedTS: string,
                      entityGuid: string,
                      entityStatus: "ACTIVE" | "DELETED",
                      removePropagationsOnEntityDelete: boolean,
                      validityPeriods: [
                        {
                          endTime: string,
                          startTime: string,
                          timeZone: string
                        }
                      ],
                      source: string,
                      sourceDetails: Dictionary&lt;string, AnyObject&gt;
                    }
                  ],
                  displayText: string,
                  guid: string,
                  isIncomplete: boolean,
                  labels: [string],
                  meaningNames: [string],
                  meanings: [
                    {
                      confidence: number,
                      createdBy: string,
                      description: string,
                      displayText: string,
                      expression: string,
                      relationGuid: string,
                      source: string,
                      status: "DISCOVERED" | "PROPOSED" | "IMPORTED" | "VALIDATED" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                      steward: string,
                      termGuid: string
                    }
                  ],
                  status: "ACTIVE" | "DELETED"
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guids" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteByUniqueAttribute">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteByUniqueAttribute (string typeName, string attrQualifiedName = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteByUniqueAttribute(string typeName, string attrQualifiedName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.DeleteByUniqueAttribute(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteByUniqueAttribute (typeName As String, Optional attrQualifiedName As String = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteByUniqueAttribute : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteByUniqueAttribute : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewEntities.DeleteByUniqueAttribute (typeName, attrQualifiedName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="attrQualifiedName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="typeName"> The name of the type. </param>
        <param name="attrQualifiedName"> The qualified name of the entity. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary>
            Delete an entity identified by its type and unique attributes.
            In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
            attr:\&lt;attrName&gt;=\&lt;attrValue&gt;.
            NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
            The REST request would look something like this:
            DELETE /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              guidAssignments: Dictionary&lt;string, string&gt;,
              mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;,
              partialUpdatedEntities: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  classificationNames: [string],
                  classifications: [
                    {
                      attributes: Dictionary&lt;string, AnyObject&gt;,
                      typeName: string,
                      lastModifiedTS: string,
                      entityGuid: string,
                      entityStatus: "ACTIVE" | "DELETED",
                      removePropagationsOnEntityDelete: boolean,
                      validityPeriods: [
                        {
                          endTime: string,
                          startTime: string,
                          timeZone: string
                        }
                      ],
                      source: string,
                      sourceDetails: Dictionary&lt;string, AnyObject&gt;
                    }
                  ],
                  displayText: string,
                  guid: string,
                  isIncomplete: boolean,
                  labels: [string],
                  meaningNames: [string],
                  meanings: [
                    {
                      confidence: number,
                      createdBy: string,
                      description: string,
                      displayText: string,
                      expression: string,
                      relationGuid: string,
                      source: string,
                      status: "DISCOVERED" | "PROPOSED" | "IMPORTED" | "VALIDATED" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                      steward: string,
                      termGuid: string
                    }
                  ],
                  status: "ACTIVE" | "DELETED"
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="typeName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteByUniqueAttributeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteByUniqueAttributeAsync (string typeName, string attrQualifiedName = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteByUniqueAttributeAsync(string typeName, string attrQualifiedName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.DeleteByUniqueAttributeAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteByUniqueAttributeAsync (typeName As String, Optional attrQualifiedName As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteByUniqueAttributeAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteByUniqueAttributeAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewEntities.DeleteByUniqueAttributeAsync (typeName, attrQualifiedName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="attrQualifiedName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="typeName"> The name of the type. </param>
        <param name="attrQualifiedName"> The qualified name of the entity. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary>
            Delete an entity identified by its type and unique attributes.
            In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
            attr:\&lt;attrName&gt;=\&lt;attrValue&gt;.
            NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
            The REST request would look something like this:
            DELETE /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              guidAssignments: Dictionary&lt;string, string&gt;,
              mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;,
              partialUpdatedEntities: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  classificationNames: [string],
                  classifications: [
                    {
                      attributes: Dictionary&lt;string, AnyObject&gt;,
                      typeName: string,
                      lastModifiedTS: string,
                      entityGuid: string,
                      entityStatus: "ACTIVE" | "DELETED",
                      removePropagationsOnEntityDelete: boolean,
                      validityPeriods: [
                        {
                          endTime: string,
                          startTime: string,
                          timeZone: string
                        }
                      ],
                      source: string,
                      sourceDetails: Dictionary&lt;string, AnyObject&gt;
                    }
                  ],
                  displayText: string,
                  guid: string,
                  isIncomplete: boolean,
                  labels: [string],
                  meaningNames: [string],
                  meanings: [
                    {
                      confidence: number,
                      createdBy: string,
                      description: string,
                      displayText: string,
                      expression: string,
                      relationGuid: string,
                      source: string,
                      status: "DISCOVERED" | "PROPOSED" | "IMPORTED" | "VALIDATED" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                      steward: string,
                      termGuid: string
                    }
                  ],
                  status: "ACTIVE" | "DELETED"
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="typeName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteClassification">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteClassification (string guid, string classificationName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteClassification(string guid, string classificationName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.DeleteClassification(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteClassification (guid As String, classificationName As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteClassification : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteClassification : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewEntities.DeleteClassification (guid, classificationName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="classificationName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the entity. </param>
        <param name="classificationName"> The name of the classification. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Delete a given classification from an existing entity represented by a GUID. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> or <paramref name="classificationName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> or <paramref name="classificationName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteClassificationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteClassificationAsync (string guid, string classificationName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteClassificationAsync(string guid, string classificationName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.DeleteClassificationAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteClassificationAsync (guid As String, classificationName As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteClassificationAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteClassificationAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewEntities.DeleteClassificationAsync (guid, classificationName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="classificationName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the entity. </param>
        <param name="classificationName"> The name of the classification. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Delete a given classification from an existing entity represented by a GUID. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> or <paramref name="classificationName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> or <paramref name="classificationName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteClassificationByUniqueAttribute">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteClassificationByUniqueAttribute (string typeName, string classificationName, string attrQualifiedName = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteClassificationByUniqueAttribute(string typeName, string classificationName, string attrQualifiedName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.DeleteClassificationByUniqueAttribute(System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteClassificationByUniqueAttribute (typeName As String, classificationName As String, Optional attrQualifiedName As String = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteClassificationByUniqueAttribute : string * string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteClassificationByUniqueAttribute : string * string * string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewEntities.DeleteClassificationByUniqueAttribute (typeName, classificationName, attrQualifiedName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="classificationName" Type="System.String" />
        <Parameter Name="attrQualifiedName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="typeName"> The name of the type. </param>
        <param name="classificationName"> The name of the classification. </param>
        <param name="attrQualifiedName"> The qualified name of the entity. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Delete a given classification from an entity identified by its type and unique attributes. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeName" /> or <paramref name="classificationName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="typeName" /> or <paramref name="classificationName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteClassificationByUniqueAttributeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteClassificationByUniqueAttributeAsync (string typeName, string classificationName, string attrQualifiedName = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteClassificationByUniqueAttributeAsync(string typeName, string classificationName, string attrQualifiedName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.DeleteClassificationByUniqueAttributeAsync(System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteClassificationByUniqueAttributeAsync (typeName As String, classificationName As String, Optional attrQualifiedName As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteClassificationByUniqueAttributeAsync : string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteClassificationByUniqueAttributeAsync : string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewEntities.DeleteClassificationByUniqueAttributeAsync (typeName, classificationName, attrQualifiedName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="classificationName" Type="System.String" />
        <Parameter Name="attrQualifiedName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="typeName"> The name of the type. </param>
        <param name="classificationName"> The name of the classification. </param>
        <param name="attrQualifiedName"> The qualified name of the entity. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Delete a given classification from an entity identified by its type and unique attributes. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeName" /> or <paramref name="classificationName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="typeName" /> or <paramref name="classificationName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteLabels">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteLabels (string guid, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteLabels(string guid, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.DeleteLabels(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteLabels (guid As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteLabels : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteLabels : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="purviewEntities.DeleteLabels (guid, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the entity. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> delete given labels to a given entity. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteLabelsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteLabelsAsync (string guid, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteLabelsAsync(string guid, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.DeleteLabelsAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteLabelsAsync (guid As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteLabelsAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteLabelsAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewEntities.DeleteLabelsAsync (guid, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the entity. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> delete given labels to a given entity. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteLabelsByUniqueAttribute">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteLabelsByUniqueAttribute (string typeName, Azure.Core.RequestContent content, string attrQualifiedName = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteLabelsByUniqueAttribute(string typeName, class Azure.Core.RequestContent content, string attrQualifiedName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.DeleteLabelsByUniqueAttribute(System.String,Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteLabelsByUniqueAttribute (typeName As String, content As RequestContent, Optional attrQualifiedName As String = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteLabelsByUniqueAttribute : string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteLabelsByUniqueAttribute : string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewEntities.DeleteLabelsByUniqueAttribute (typeName, content, attrQualifiedName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="attrQualifiedName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="typeName"> The name of the type. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="attrQualifiedName"> The qualified name of the entity. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Delete given labels to a given entity identified by its type and unique attributes, if labels is null/empty, no labels will be removed. If any labels in labels set are non-existing labels, they will be ignored, only existing labels will be removed. In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format: attr:&lt;attrName&gt;=&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName. The REST request would look something like this: DELETE /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="typeName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteLabelsByUniqueAttributeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteLabelsByUniqueAttributeAsync (string typeName, Azure.Core.RequestContent content, string attrQualifiedName = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteLabelsByUniqueAttributeAsync(string typeName, class Azure.Core.RequestContent content, string attrQualifiedName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.DeleteLabelsByUniqueAttributeAsync(System.String,Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteLabelsByUniqueAttributeAsync (typeName As String, content As RequestContent, Optional attrQualifiedName As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteLabelsByUniqueAttributeAsync : string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteLabelsByUniqueAttributeAsync : string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewEntities.DeleteLabelsByUniqueAttributeAsync (typeName, content, attrQualifiedName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="attrQualifiedName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="typeName"> The name of the type. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="attrQualifiedName"> The qualified name of the entity. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Delete given labels to a given entity identified by its type and unique attributes, if labels is null/empty, no labels will be removed. If any labels in labels set are non-existing labels, they will be ignored, only existing labels will be removed. In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format: attr:&lt;attrName&gt;=&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName. The REST request would look something like this: DELETE /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="typeName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetByGuid">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetByGuid (string guid, bool? minExtInfo = default, bool? ignoreRelationships = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetByGuid(string guid, valuetype System.Nullable`1&lt;bool&gt; minExtInfo, valuetype System.Nullable`1&lt;bool&gt; ignoreRelationships, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.GetByGuid(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetByGuid (guid As String, Optional minExtInfo As Nullable(Of Boolean) = Nothing, Optional ignoreRelationships As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetByGuid : string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetByGuid : string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="purviewEntities.GetByGuid (guid, minExtInfo, ignoreRelationships, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="minExtInfo" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="ignoreRelationships" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the entity. </param>
        <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Get complete definition of an entity given its GUID. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              referredEntities: Dictionary&lt;string, AtlasEntity&gt;,
              entity: {
                attributes: Dictionary&lt;string, AnyObject&gt;,
                typeName: string,
                lastModifiedTS: string,
                businessAttributes: Dictionary&lt;string, AnyObject&gt;,
                classifications: [
                  {
                    attributes: Dictionary&lt;string, AnyObject&gt;,
                    typeName: string,
                    lastModifiedTS: string,
                    entityGuid: string,
                    entityStatus: "ACTIVE" | "DELETED",
                    removePropagationsOnEntityDelete: boolean,
                    validityPeriods: [
                      {
                        endTime: string,
                        startTime: string,
                        timeZone: string
                      }
                    ],
                    source: string,
                    sourceDetails: Dictionary&lt;string, AnyObject&gt;
                  }
                ],
                createTime: number,
                createdBy: string,
                customAttributes: Dictionary&lt;string, string&gt;,
                guid: string,
                homeId: string,
                isIncomplete: boolean,
                labels: [string],
                meanings: [
                  {
                    confidence: number,
                    createdBy: string,
                    description: string,
                    displayText: string,
                    expression: string,
                    relationGuid: string,
                    source: string,
                    status: "DISCOVERED" | "PROPOSED" | "IMPORTED" | "VALIDATED" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                    steward: string,
                    termGuid: string
                  }
                ],
                provenanceType: number,
                proxy: boolean,
                relationshipAttributes: Dictionary&lt;string, AnyObject&gt;,
                status: "ACTIVE" | "DELETED",
                updateTime: number,
                updatedBy: string,
                version: number,
                source: string,
                sourceDetails: Dictionary&lt;string, AnyObject&gt;,
                contacts: Dictionary&lt;string, ContactBasic[]&gt;
              }
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetByGuidAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetByGuidAsync (string guid, bool? minExtInfo = default, bool? ignoreRelationships = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetByGuidAsync(string guid, valuetype System.Nullable`1&lt;bool&gt; minExtInfo, valuetype System.Nullable`1&lt;bool&gt; ignoreRelationships, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.GetByGuidAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetByGuidAsync (guid As String, Optional minExtInfo As Nullable(Of Boolean) = Nothing, Optional ignoreRelationships As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetByGuidAsync : string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetByGuidAsync : string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewEntities.GetByGuidAsync (guid, minExtInfo, ignoreRelationships, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="minExtInfo" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="ignoreRelationships" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the entity. </param>
        <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Get complete definition of an entity given its GUID. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              referredEntities: Dictionary&lt;string, AtlasEntity&gt;,
              entity: {
                attributes: Dictionary&lt;string, AnyObject&gt;,
                typeName: string,
                lastModifiedTS: string,
                businessAttributes: Dictionary&lt;string, AnyObject&gt;,
                classifications: [
                  {
                    attributes: Dictionary&lt;string, AnyObject&gt;,
                    typeName: string,
                    lastModifiedTS: string,
                    entityGuid: string,
                    entityStatus: "ACTIVE" | "DELETED",
                    removePropagationsOnEntityDelete: boolean,
                    validityPeriods: [
                      {
                        endTime: string,
                        startTime: string,
                        timeZone: string
                      }
                    ],
                    source: string,
                    sourceDetails: Dictionary&lt;string, AnyObject&gt;
                  }
                ],
                createTime: number,
                createdBy: string,
                customAttributes: Dictionary&lt;string, string&gt;,
                guid: string,
                homeId: string,
                isIncomplete: boolean,
                labels: [string],
                meanings: [
                  {
                    confidence: number,
                    createdBy: string,
                    description: string,
                    displayText: string,
                    expression: string,
                    relationGuid: string,
                    source: string,
                    status: "DISCOVERED" | "PROPOSED" | "IMPORTED" | "VALIDATED" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                    steward: string,
                    termGuid: string
                  }
                ],
                provenanceType: number,
                proxy: boolean,
                relationshipAttributes: Dictionary&lt;string, AnyObject&gt;,
                status: "ACTIVE" | "DELETED",
                updateTime: number,
                updatedBy: string,
                version: number,
                source: string,
                sourceDetails: Dictionary&lt;string, AnyObject&gt;,
                contacts: Dictionary&lt;string, ContactBasic[]&gt;
              }
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetByGuids">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetByGuids (System.Collections.Generic.IEnumerable&lt;string&gt; guids, bool? minExtInfo = default, bool? ignoreRelationships = default, System.Collections.Generic.IEnumerable&lt;string&gt; excludeRelationshipTypes = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetByGuids(class System.Collections.Generic.IEnumerable`1&lt;string&gt; guids, valuetype System.Nullable`1&lt;bool&gt; minExtInfo, valuetype System.Nullable`1&lt;bool&gt; ignoreRelationships, class System.Collections.Generic.IEnumerable`1&lt;string&gt; excludeRelationshipTypes, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.GetByGuids(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetByGuids (guids As IEnumerable(Of String), Optional minExtInfo As Nullable(Of Boolean) = Nothing, Optional ignoreRelationships As Nullable(Of Boolean) = Nothing, Optional excludeRelationshipTypes As IEnumerable(Of String) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetByGuids : seq&lt;string&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetByGuids : seq&lt;string&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="purviewEntities.GetByGuids (guids, minExtInfo, ignoreRelationships, excludeRelationshipTypes, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guids" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="minExtInfo" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="ignoreRelationships" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="excludeRelationshipTypes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guids"> An array of GUIDs of entities to list. </param>
        <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        <param name="excludeRelationshipTypes"> An array of the relationship types need to be excluded from the response. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> List entities in bulk identified by its GUIDs. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              referredEntities: Dictionary&lt;string, AtlasEntity&gt;,
              entities: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  businessAttributes: Dictionary&lt;string, AnyObject&gt;,
                  classifications: [
                    {
                      attributes: Dictionary&lt;string, AnyObject&gt;,
                      typeName: string,
                      lastModifiedTS: string,
                      entityGuid: string,
                      entityStatus: "ACTIVE" | "DELETED",
                      removePropagationsOnEntityDelete: boolean,
                      validityPeriods: [
                        {
                          endTime: string,
                          startTime: string,
                          timeZone: string
                        }
                      ],
                      source: string,
                      sourceDetails: Dictionary&lt;string, AnyObject&gt;
                    }
                  ],
                  createTime: number,
                  createdBy: string,
                  customAttributes: Dictionary&lt;string, string&gt;,
                  guid: string,
                  homeId: string,
                  isIncomplete: boolean,
                  labels: [string],
                  meanings: [
                    {
                      confidence: number,
                      createdBy: string,
                      description: string,
                      displayText: string,
                      expression: string,
                      relationGuid: string,
                      source: string,
                      status: "DISCOVERED" | "PROPOSED" | "IMPORTED" | "VALIDATED" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                      steward: string,
                      termGuid: string
                    }
                  ],
                  provenanceType: number,
                  proxy: boolean,
                  relationshipAttributes: Dictionary&lt;string, AnyObject&gt;,
                  status: "ACTIVE" | "DELETED",
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;,
                  contacts: Dictionary&lt;string, ContactBasic[]&gt;
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guids" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetByGuidsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetByGuidsAsync (System.Collections.Generic.IEnumerable&lt;string&gt; guids, bool? minExtInfo = default, bool? ignoreRelationships = default, System.Collections.Generic.IEnumerable&lt;string&gt; excludeRelationshipTypes = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetByGuidsAsync(class System.Collections.Generic.IEnumerable`1&lt;string&gt; guids, valuetype System.Nullable`1&lt;bool&gt; minExtInfo, valuetype System.Nullable`1&lt;bool&gt; ignoreRelationships, class System.Collections.Generic.IEnumerable`1&lt;string&gt; excludeRelationshipTypes, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.GetByGuidsAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetByGuidsAsync (guids As IEnumerable(Of String), Optional minExtInfo As Nullable(Of Boolean) = Nothing, Optional ignoreRelationships As Nullable(Of Boolean) = Nothing, Optional excludeRelationshipTypes As IEnumerable(Of String) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetByGuidsAsync : seq&lt;string&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetByGuidsAsync : seq&lt;string&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewEntities.GetByGuidsAsync (guids, minExtInfo, ignoreRelationships, excludeRelationshipTypes, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guids" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="minExtInfo" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="ignoreRelationships" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="excludeRelationshipTypes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guids"> An array of GUIDs of entities to list. </param>
        <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        <param name="excludeRelationshipTypes"> An array of the relationship types need to be excluded from the response. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> List entities in bulk identified by its GUIDs. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              referredEntities: Dictionary&lt;string, AtlasEntity&gt;,
              entities: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  businessAttributes: Dictionary&lt;string, AnyObject&gt;,
                  classifications: [
                    {
                      attributes: Dictionary&lt;string, AnyObject&gt;,
                      typeName: string,
                      lastModifiedTS: string,
                      entityGuid: string,
                      entityStatus: "ACTIVE" | "DELETED",
                      removePropagationsOnEntityDelete: boolean,
                      validityPeriods: [
                        {
                          endTime: string,
                          startTime: string,
                          timeZone: string
                        }
                      ],
                      source: string,
                      sourceDetails: Dictionary&lt;string, AnyObject&gt;
                    }
                  ],
                  createTime: number,
                  createdBy: string,
                  customAttributes: Dictionary&lt;string, string&gt;,
                  guid: string,
                  homeId: string,
                  isIncomplete: boolean,
                  labels: [string],
                  meanings: [
                    {
                      confidence: number,
                      createdBy: string,
                      description: string,
                      displayText: string,
                      expression: string,
                      relationGuid: string,
                      source: string,
                      status: "DISCOVERED" | "PROPOSED" | "IMPORTED" | "VALIDATED" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                      steward: string,
                      termGuid: string
                    }
                  ],
                  provenanceType: number,
                  proxy: boolean,
                  relationshipAttributes: Dictionary&lt;string, AnyObject&gt;,
                  status: "ACTIVE" | "DELETED",
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;,
                  contacts: Dictionary&lt;string, ContactBasic[]&gt;
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guids" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetByUniqueAttributes">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetByUniqueAttributes (string typeName, bool? minExtInfo = default, bool? ignoreRelationships = default, string attrQualifiedName = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetByUniqueAttributes(string typeName, valuetype System.Nullable`1&lt;bool&gt; minExtInfo, valuetype System.Nullable`1&lt;bool&gt; ignoreRelationships, string attrQualifiedName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.GetByUniqueAttributes(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetByUniqueAttributes (typeName As String, Optional minExtInfo As Nullable(Of Boolean) = Nothing, Optional ignoreRelationships As Nullable(Of Boolean) = Nothing, Optional attrQualifiedName As String = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetByUniqueAttributes : string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetByUniqueAttributes : string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewEntities.GetByUniqueAttributes (typeName, minExtInfo, ignoreRelationships, attrQualifiedName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="minExtInfo" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="ignoreRelationships" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="attrQualifiedName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="typeName"> The name of the type. </param>
        <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        <param name="attrQualifiedName"> The qualified name of the entity. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary>
            Get complete definition of an entity given its type and unique attribute.
            In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
            attr:\&lt;attrName&gt;=&lt;attrValue&gt;. 
            NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
            The REST request would look something like this:
            GET /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              referredEntities: Dictionary&lt;string, AtlasEntity&gt;,
              entity: {
                attributes: Dictionary&lt;string, AnyObject&gt;,
                typeName: string,
                lastModifiedTS: string,
                businessAttributes: Dictionary&lt;string, AnyObject&gt;,
                classifications: [
                  {
                    attributes: Dictionary&lt;string, AnyObject&gt;,
                    typeName: string,
                    lastModifiedTS: string,
                    entityGuid: string,
                    entityStatus: "ACTIVE" | "DELETED",
                    removePropagationsOnEntityDelete: boolean,
                    validityPeriods: [
                      {
                        endTime: string,
                        startTime: string,
                        timeZone: string
                      }
                    ],
                    source: string,
                    sourceDetails: Dictionary&lt;string, AnyObject&gt;
                  }
                ],
                createTime: number,
                createdBy: string,
                customAttributes: Dictionary&lt;string, string&gt;,
                guid: string,
                homeId: string,
                isIncomplete: boolean,
                labels: [string],
                meanings: [
                  {
                    confidence: number,
                    createdBy: string,
                    description: string,
                    displayText: string,
                    expression: string,
                    relationGuid: string,
                    source: string,
                    status: "DISCOVERED" | "PROPOSED" | "IMPORTED" | "VALIDATED" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                    steward: string,
                    termGuid: string
                  }
                ],
                provenanceType: number,
                proxy: boolean,
                relationshipAttributes: Dictionary&lt;string, AnyObject&gt;,
                status: "ACTIVE" | "DELETED",
                updateTime: number,
                updatedBy: string,
                version: number,
                source: string,
                sourceDetails: Dictionary&lt;string, AnyObject&gt;,
                contacts: Dictionary&lt;string, ContactBasic[]&gt;
              }
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="typeName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetByUniqueAttributesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetByUniqueAttributesAsync (string typeName, bool? minExtInfo = default, bool? ignoreRelationships = default, string attrQualifiedName = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetByUniqueAttributesAsync(string typeName, valuetype System.Nullable`1&lt;bool&gt; minExtInfo, valuetype System.Nullable`1&lt;bool&gt; ignoreRelationships, string attrQualifiedName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.GetByUniqueAttributesAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetByUniqueAttributesAsync (typeName As String, Optional minExtInfo As Nullable(Of Boolean) = Nothing, Optional ignoreRelationships As Nullable(Of Boolean) = Nothing, Optional attrQualifiedName As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetByUniqueAttributesAsync : string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetByUniqueAttributesAsync : string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewEntities.GetByUniqueAttributesAsync (typeName, minExtInfo, ignoreRelationships, attrQualifiedName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="minExtInfo" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="ignoreRelationships" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="attrQualifiedName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="typeName"> The name of the type. </param>
        <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        <param name="attrQualifiedName"> The qualified name of the entity. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary>
            Get complete definition of an entity given its type and unique attribute.
            In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
            attr:\&lt;attrName&gt;=&lt;attrValue&gt;. 
            NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
            The REST request would look something like this:
            GET /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              referredEntities: Dictionary&lt;string, AtlasEntity&gt;,
              entity: {
                attributes: Dictionary&lt;string, AnyObject&gt;,
                typeName: string,
                lastModifiedTS: string,
                businessAttributes: Dictionary&lt;string, AnyObject&gt;,
                classifications: [
                  {
                    attributes: Dictionary&lt;string, AnyObject&gt;,
                    typeName: string,
                    lastModifiedTS: string,
                    entityGuid: string,
                    entityStatus: "ACTIVE" | "DELETED",
                    removePropagationsOnEntityDelete: boolean,
                    validityPeriods: [
                      {
                        endTime: string,
                        startTime: string,
                        timeZone: string
                      }
                    ],
                    source: string,
                    sourceDetails: Dictionary&lt;string, AnyObject&gt;
                  }
                ],
                createTime: number,
                createdBy: string,
                customAttributes: Dictionary&lt;string, string&gt;,
                guid: string,
                homeId: string,
                isIncomplete: boolean,
                labels: [string],
                meanings: [
                  {
                    confidence: number,
                    createdBy: string,
                    description: string,
                    displayText: string,
                    expression: string,
                    relationGuid: string,
                    source: string,
                    status: "DISCOVERED" | "PROPOSED" | "IMPORTED" | "VALIDATED" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                    steward: string,
                    termGuid: string
                  }
                ],
                provenanceType: number,
                proxy: boolean,
                relationshipAttributes: Dictionary&lt;string, AnyObject&gt;,
                status: "ACTIVE" | "DELETED",
                updateTime: number,
                updatedBy: string,
                version: number,
                source: string,
                sourceDetails: Dictionary&lt;string, AnyObject&gt;,
                contacts: Dictionary&lt;string, ContactBasic[]&gt;
              }
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="typeName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetClassification">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetClassification (string guid, string classificationName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetClassification(string guid, string classificationName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.GetClassification(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetClassification (guid As String, classificationName As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetClassification : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetClassification : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewEntities.GetClassification (guid, classificationName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="classificationName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the entity. </param>
        <param name="classificationName"> The name of the classification. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> List classifications for a given entity represented by a GUID. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              attributes: Dictionary&lt;string, AnyObject&gt;,
              typeName: string,
              lastModifiedTS: string,
              entityGuid: string,
              entityStatus: "ACTIVE" | "DELETED",
              removePropagationsOnEntityDelete: boolean,
              validityPeriods: [
                {
                  endTime: string,
                  startTime: string,
                  timeZone: string
                }
              ],
              source: string,
              sourceDetails: Dictionary&lt;string, AnyObject&gt;
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> or <paramref name="classificationName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> or <paramref name="classificationName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetClassificationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetClassificationAsync (string guid, string classificationName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetClassificationAsync(string guid, string classificationName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.GetClassificationAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetClassificationAsync (guid As String, classificationName As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetClassificationAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetClassificationAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewEntities.GetClassificationAsync (guid, classificationName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="classificationName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the entity. </param>
        <param name="classificationName"> The name of the classification. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> List classifications for a given entity represented by a GUID. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              attributes: Dictionary&lt;string, AnyObject&gt;,
              typeName: string,
              lastModifiedTS: string,
              entityGuid: string,
              entityStatus: "ACTIVE" | "DELETED",
              removePropagationsOnEntityDelete: boolean,
              validityPeriods: [
                {
                  endTime: string,
                  startTime: string,
                  timeZone: string
                }
              ],
              source: string,
              sourceDetails: Dictionary&lt;string, AnyObject&gt;
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> or <paramref name="classificationName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> or <paramref name="classificationName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetClassifications">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetClassifications (string guid, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetClassifications(string guid, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.GetClassifications(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetClassifications (guid As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetClassifications : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetClassifications : string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewEntities.GetClassifications (guid, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the entity. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> List classifications for a given entity represented by a GUID. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              list: [AnyObject],
              pageSize: number,
              sortBy: string,
              sortType: "NONE" | "ASC" | "DESC",
              startIndex: number,
              totalCount: number
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetClassificationsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetClassificationsAsync (string guid, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetClassificationsAsync(string guid, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.GetClassificationsAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetClassificationsAsync (guid As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetClassificationsAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetClassificationsAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewEntities.GetClassificationsAsync (guid, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the entity. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> List classifications for a given entity represented by a GUID. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              list: [AnyObject],
              pageSize: number,
              sortBy: string,
              sortType: "NONE" | "ASC" | "DESC",
              startIndex: number,
              totalCount: number
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEntitiesByUniqueAttributes">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetEntitiesByUniqueAttributes (string typeName, bool? minExtInfo = default, bool? ignoreRelationships = default, string attrNQualifiedName = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetEntitiesByUniqueAttributes(string typeName, valuetype System.Nullable`1&lt;bool&gt; minExtInfo, valuetype System.Nullable`1&lt;bool&gt; ignoreRelationships, string attrNQualifiedName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.GetEntitiesByUniqueAttributes(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntitiesByUniqueAttributes (typeName As String, Optional minExtInfo As Nullable(Of Boolean) = Nothing, Optional ignoreRelationships As Nullable(Of Boolean) = Nothing, Optional attrNQualifiedName As String = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetEntitiesByUniqueAttributes : string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetEntitiesByUniqueAttributes : string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewEntities.GetEntitiesByUniqueAttributes (typeName, minExtInfo, ignoreRelationships, attrNQualifiedName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="minExtInfo" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="ignoreRelationships" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="attrNQualifiedName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="typeName"> The name of the type. </param>
        <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        <param name="attrNQualifiedName"> Qualified name of an entity. E.g. to find 2 entities you can set attrs_0:qualifiedName=db1@cl1&amp;attrs_2:qualifiedName=db2@cl1. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary>
            Bulk API to retrieve list of entities identified by its unique attributes.
            
            In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format
            
            typeName=\&lt;typeName&gt;&amp;attr_1:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_2:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_3:\&lt;attrName&gt;=\&lt;attrValue&gt;
            
            NOTE: The attrName should be an unique attribute for the given entity-type
            
            The REST request would look something like this
            
            GET /v2/entity/bulk/uniqueAttribute/type/hive_db?attr_0:qualifiedName=db1@cl1&amp;attr_2:qualifiedName=db2@cl1
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              referredEntities: Dictionary&lt;string, AtlasEntity&gt;,
              entities: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  businessAttributes: Dictionary&lt;string, AnyObject&gt;,
                  classifications: [
                    {
                      attributes: Dictionary&lt;string, AnyObject&gt;,
                      typeName: string,
                      lastModifiedTS: string,
                      entityGuid: string,
                      entityStatus: "ACTIVE" | "DELETED",
                      removePropagationsOnEntityDelete: boolean,
                      validityPeriods: [
                        {
                          endTime: string,
                          startTime: string,
                          timeZone: string
                        }
                      ],
                      source: string,
                      sourceDetails: Dictionary&lt;string, AnyObject&gt;
                    }
                  ],
                  createTime: number,
                  createdBy: string,
                  customAttributes: Dictionary&lt;string, string&gt;,
                  guid: string,
                  homeId: string,
                  isIncomplete: boolean,
                  labels: [string],
                  meanings: [
                    {
                      confidence: number,
                      createdBy: string,
                      description: string,
                      displayText: string,
                      expression: string,
                      relationGuid: string,
                      source: string,
                      status: "DISCOVERED" | "PROPOSED" | "IMPORTED" | "VALIDATED" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                      steward: string,
                      termGuid: string
                    }
                  ],
                  provenanceType: number,
                  proxy: boolean,
                  relationshipAttributes: Dictionary&lt;string, AnyObject&gt;,
                  status: "ACTIVE" | "DELETED",
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;,
                  contacts: Dictionary&lt;string, ContactBasic[]&gt;
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="typeName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEntitiesByUniqueAttributesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetEntitiesByUniqueAttributesAsync (string typeName, bool? minExtInfo = default, bool? ignoreRelationships = default, string attrNQualifiedName = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetEntitiesByUniqueAttributesAsync(string typeName, valuetype System.Nullable`1&lt;bool&gt; minExtInfo, valuetype System.Nullable`1&lt;bool&gt; ignoreRelationships, string attrNQualifiedName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.GetEntitiesByUniqueAttributesAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntitiesByUniqueAttributesAsync (typeName As String, Optional minExtInfo As Nullable(Of Boolean) = Nothing, Optional ignoreRelationships As Nullable(Of Boolean) = Nothing, Optional attrNQualifiedName As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetEntitiesByUniqueAttributesAsync : string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetEntitiesByUniqueAttributesAsync : string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewEntities.GetEntitiesByUniqueAttributesAsync (typeName, minExtInfo, ignoreRelationships, attrNQualifiedName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="minExtInfo" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="ignoreRelationships" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="attrNQualifiedName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="typeName"> The name of the type. </param>
        <param name="minExtInfo"> Whether to return minimal information for referred entities. </param>
        <param name="ignoreRelationships"> Whether to ignore relationship attributes. </param>
        <param name="attrNQualifiedName"> Qualified name of an entity. E.g. to find 2 entities you can set attrs_0:qualifiedName=db1@cl1&amp;attrs_2:qualifiedName=db2@cl1. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary>
            Bulk API to retrieve list of entities identified by its unique attributes.
            
            In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format
            
            typeName=\&lt;typeName&gt;&amp;attr_1:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_2:\&lt;attrName&gt;=\&lt;attrValue&gt;&amp;attr_3:\&lt;attrName&gt;=\&lt;attrValue&gt;
            
            NOTE: The attrName should be an unique attribute for the given entity-type
            
            The REST request would look something like this
            
            GET /v2/entity/bulk/uniqueAttribute/type/hive_db?attr_0:qualifiedName=db1@cl1&amp;attr_2:qualifiedName=db2@cl1
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              referredEntities: Dictionary&lt;string, AtlasEntity&gt;,
              entities: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  businessAttributes: Dictionary&lt;string, AnyObject&gt;,
                  classifications: [
                    {
                      attributes: Dictionary&lt;string, AnyObject&gt;,
                      typeName: string,
                      lastModifiedTS: string,
                      entityGuid: string,
                      entityStatus: "ACTIVE" | "DELETED",
                      removePropagationsOnEntityDelete: boolean,
                      validityPeriods: [
                        {
                          endTime: string,
                          startTime: string,
                          timeZone: string
                        }
                      ],
                      source: string,
                      sourceDetails: Dictionary&lt;string, AnyObject&gt;
                    }
                  ],
                  createTime: number,
                  createdBy: string,
                  customAttributes: Dictionary&lt;string, string&gt;,
                  guid: string,
                  homeId: string,
                  isIncomplete: boolean,
                  labels: [string],
                  meanings: [
                    {
                      confidence: number,
                      createdBy: string,
                      description: string,
                      displayText: string,
                      expression: string,
                      relationGuid: string,
                      source: string,
                      status: "DISCOVERED" | "PROPOSED" | "IMPORTED" | "VALIDATED" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                      steward: string,
                      termGuid: string
                    }
                  ],
                  provenanceType: number,
                  proxy: boolean,
                  relationshipAttributes: Dictionary&lt;string, AnyObject&gt;,
                  status: "ACTIVE" | "DELETED",
                  updateTime: number,
                  updatedBy: string,
                  version: number,
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;,
                  contacts: Dictionary&lt;string, ContactBasic[]&gt;
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="typeName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetHeader">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetHeader (string guid, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetHeader(string guid, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.GetHeader(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHeader (guid As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetHeader : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetHeader : string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewEntities.GetHeader (guid, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the entity. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Get entity header given its GUID. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              attributes: Dictionary&lt;string, AnyObject&gt;,
              typeName: string,
              lastModifiedTS: string,
              classificationNames: [string],
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              displayText: string,
              guid: string,
              isIncomplete: boolean,
              labels: [string],
              meaningNames: [string],
              meanings: [
                {
                  confidence: number,
                  createdBy: string,
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DISCOVERED" | "PROPOSED" | "IMPORTED" | "VALIDATED" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              status: "ACTIVE" | "DELETED"
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetHeaderAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetHeaderAsync (string guid, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetHeaderAsync(string guid, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.GetHeaderAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHeaderAsync (guid As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetHeaderAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetHeaderAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewEntities.GetHeaderAsync (guid, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the entity. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Get entity header given its GUID. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              attributes: Dictionary&lt;string, AnyObject&gt;,
              typeName: string,
              lastModifiedTS: string,
              classificationNames: [string],
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              displayText: string,
              guid: string,
              isIncomplete: boolean,
              labels: [string],
              meaningNames: [string],
              meanings: [
                {
                  confidence: number,
                  createdBy: string,
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DISCOVERED" | "PROPOSED" | "IMPORTED" | "VALIDATED" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              status: "ACTIVE" | "DELETED"
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSampleBusinessMetadataTemplate">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetSampleBusinessMetadataTemplate (Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetSampleBusinessMetadataTemplate(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.GetSampleBusinessMetadataTemplate(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSampleBusinessMetadataTemplate (Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetSampleBusinessMetadataTemplate : Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetSampleBusinessMetadataTemplate : Azure.RequestContext -&gt; Azure.Response" Usage="purviewEntities.GetSampleBusinessMetadataTemplate context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Get the sample Template for uploading/creating bulk BusinessMetaData. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSampleBusinessMetadataTemplateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetSampleBusinessMetadataTemplateAsync (Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetSampleBusinessMetadataTemplateAsync(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.GetSampleBusinessMetadataTemplateAsync(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSampleBusinessMetadataTemplateAsync (Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetSampleBusinessMetadataTemplateAsync : Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetSampleBusinessMetadataTemplateAsync : Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewEntities.GetSampleBusinessMetadataTemplateAsync context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Get the sample Template for uploading/creating bulk BusinessMetaData. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportBusinessMetadata">
      <MemberSignature Language="C#" Value="public virtual Azure.Response ImportBusinessMetadata (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response ImportBusinessMetadata(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.ImportBusinessMetadata(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportBusinessMetadata (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member ImportBusinessMetadata : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.ImportBusinessMetadata : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="purviewEntities.ImportBusinessMetadata (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Upload the file for creating Business Metadata in BULK. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              failedImportInfoList: [
                {
                  childObjectName: string,
                  importStatus: "SUCCESS" | "FAILED",
                  parentObjectName: string,
                  remarks: string
                }
              ],
              successImportInfoList: [ImportInfo]
            }
            </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportBusinessMetadataAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; ImportBusinessMetadataAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; ImportBusinessMetadataAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.ImportBusinessMetadataAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportBusinessMetadataAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member ImportBusinessMetadataAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.ImportBusinessMetadataAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewEntities.ImportBusinessMetadataAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Upload the file for creating Business Metadata in BULK. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              failedImportInfoList: [
                {
                  childObjectName: string,
                  importStatus: "SUCCESS" | "FAILED",
                  parentObjectName: string,
                  remarks: string
                }
              ],
              successImportInfoList: [ImportInfo]
            }
            </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="PartialUpdateEntityAttributeByGuid">
      <MemberSignature Language="C#" Value="public virtual Azure.Response PartialUpdateEntityAttributeByGuid (string guid, string name, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response PartialUpdateEntityAttributeByGuid(string guid, string name, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.PartialUpdateEntityAttributeByGuid(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PartialUpdateEntityAttributeByGuid (guid As String, name As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member PartialUpdateEntityAttributeByGuid : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.PartialUpdateEntityAttributeByGuid : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="purviewEntities.PartialUpdateEntityAttributeByGuid (guid, name, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the entity. </param>
        <param name="name"> The name of the attribute. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary>
            Update entity partially - create or update entity attribute identified by its GUID.
            Supports only primitive attribute type and entity references.
            It does not support updating complex types like arrays, and maps.
            Null updates are not possible.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              guidAssignments: Dictionary&lt;string, string&gt;,
              mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;,
              partialUpdatedEntities: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  classificationNames: [string],
                  classifications: [
                    {
                      attributes: Dictionary&lt;string, AnyObject&gt;,
                      typeName: string,
                      lastModifiedTS: string,
                      entityGuid: string,
                      entityStatus: "ACTIVE" | "DELETED",
                      removePropagationsOnEntityDelete: boolean,
                      validityPeriods: [
                        {
                          endTime: string,
                          startTime: string,
                          timeZone: string
                        }
                      ],
                      source: string,
                      sourceDetails: Dictionary&lt;string, AnyObject&gt;
                    }
                  ],
                  displayText: string,
                  guid: string,
                  isIncomplete: boolean,
                  labels: [string],
                  meaningNames: [string],
                  meanings: [
                    {
                      confidence: number,
                      createdBy: string,
                      description: string,
                      displayText: string,
                      expression: string,
                      relationGuid: string,
                      source: string,
                      status: "DISCOVERED" | "PROPOSED" | "IMPORTED" | "VALIDATED" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                      steward: string,
                      termGuid: string
                    }
                  ],
                  status: "ACTIVE" | "DELETED"
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" />, <paramref name="name" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="PartialUpdateEntityAttributeByGuidAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; PartialUpdateEntityAttributeByGuidAsync (string guid, string name, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; PartialUpdateEntityAttributeByGuidAsync(string guid, string name, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.PartialUpdateEntityAttributeByGuidAsync(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PartialUpdateEntityAttributeByGuidAsync (guid As String, name As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member PartialUpdateEntityAttributeByGuidAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.PartialUpdateEntityAttributeByGuidAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewEntities.PartialUpdateEntityAttributeByGuidAsync (guid, name, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the entity. </param>
        <param name="name"> The name of the attribute. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary>
            Update entity partially - create or update entity attribute identified by its GUID.
            Supports only primitive attribute type and entity references.
            It does not support updating complex types like arrays, and maps.
            Null updates are not possible.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              guidAssignments: Dictionary&lt;string, string&gt;,
              mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;,
              partialUpdatedEntities: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  classificationNames: [string],
                  classifications: [
                    {
                      attributes: Dictionary&lt;string, AnyObject&gt;,
                      typeName: string,
                      lastModifiedTS: string,
                      entityGuid: string,
                      entityStatus: "ACTIVE" | "DELETED",
                      removePropagationsOnEntityDelete: boolean,
                      validityPeriods: [
                        {
                          endTime: string,
                          startTime: string,
                          timeZone: string
                        }
                      ],
                      source: string,
                      sourceDetails: Dictionary&lt;string, AnyObject&gt;
                    }
                  ],
                  displayText: string,
                  guid: string,
                  isIncomplete: boolean,
                  labels: [string],
                  meaningNames: [string],
                  meanings: [
                    {
                      confidence: number,
                      createdBy: string,
                      description: string,
                      displayText: string,
                      expression: string,
                      relationGuid: string,
                      source: string,
                      status: "DISCOVERED" | "PROPOSED" | "IMPORTED" | "VALIDATED" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                      steward: string,
                      termGuid: string
                    }
                  ],
                  status: "ACTIVE" | "DELETED"
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" />, <paramref name="name" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="PartialUpdateEntityByUniqueAttributes">
      <MemberSignature Language="C#" Value="public virtual Azure.Response PartialUpdateEntityByUniqueAttributes (string typeName, Azure.Core.RequestContent content, string attrQualifiedName = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response PartialUpdateEntityByUniqueAttributes(string typeName, class Azure.Core.RequestContent content, string attrQualifiedName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.PartialUpdateEntityByUniqueAttributes(System.String,Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PartialUpdateEntityByUniqueAttributes (typeName As String, content As RequestContent, Optional attrQualifiedName As String = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member PartialUpdateEntityByUniqueAttributes : string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.PartialUpdateEntityByUniqueAttributes : string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewEntities.PartialUpdateEntityByUniqueAttributes (typeName, content, attrQualifiedName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="attrQualifiedName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="typeName"> The name of the type. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="attrQualifiedName"> The qualified name of the entity. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary>
            Update entity partially - Allow a subset of attributes to be updated on
            an entity which is identified by its type and unique attribute  eg: Referenceable.qualifiedName.
            Null updates are not possible.
            In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
            attr:&lt;attrName&gt;=&lt;attrValue&gt;.
            NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
            The REST request would look something like this:
            PUT /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              referredEntities: Dictionary&lt;string, AtlasEntity&gt;,
              entity: {
                attributes: Dictionary&lt;string, AnyObject&gt;,
                typeName: string,
                lastModifiedTS: string,
                businessAttributes: Dictionary&lt;string, AnyObject&gt;,
                classifications: [
                  {
                    attributes: Dictionary&lt;string, AnyObject&gt;,
                    typeName: string,
                    lastModifiedTS: string,
                    entityGuid: string,
                    entityStatus: "ACTIVE" | "DELETED",
                    removePropagationsOnEntityDelete: boolean,
                    validityPeriods: [
                      {
                        endTime: string,
                        startTime: string,
                        timeZone: string
                      }
                    ],
                    source: string,
                    sourceDetails: Dictionary&lt;string, AnyObject&gt;
                  }
                ],
                createTime: number,
                createdBy: string,
                customAttributes: Dictionary&lt;string, string&gt;,
                guid: string,
                homeId: string,
                isIncomplete: boolean,
                labels: [string],
                meanings: [
                  {
                    confidence: number,
                    createdBy: string,
                    description: string,
                    displayText: string,
                    expression: string,
                    relationGuid: string,
                    source: string,
                    status: "DISCOVERED" | "PROPOSED" | "IMPORTED" | "VALIDATED" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                    steward: string,
                    termGuid: string
                  }
                ],
                provenanceType: number,
                proxy: boolean,
                relationshipAttributes: Dictionary&lt;string, AnyObject&gt;,
                status: "ACTIVE" | "DELETED",
                updateTime: number,
                updatedBy: string,
                version: number,
                source: string,
                sourceDetails: Dictionary&lt;string, AnyObject&gt;,
                contacts: Dictionary&lt;string, ContactBasic[]&gt;
              }
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              guidAssignments: Dictionary&lt;string, string&gt;,
              mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;,
              partialUpdatedEntities: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  classificationNames: [string],
                  classifications: [
                    {
                      attributes: Dictionary&lt;string, AnyObject&gt;,
                      typeName: string,
                      lastModifiedTS: string,
                      entityGuid: string,
                      entityStatus: "ACTIVE" | "DELETED",
                      removePropagationsOnEntityDelete: boolean,
                      validityPeriods: [
                        {
                          endTime: string,
                          startTime: string,
                          timeZone: string
                        }
                      ],
                      source: string,
                      sourceDetails: Dictionary&lt;string, AnyObject&gt;
                    }
                  ],
                  displayText: string,
                  guid: string,
                  isIncomplete: boolean,
                  labels: [string],
                  meaningNames: [string],
                  meanings: [
                    {
                      confidence: number,
                      createdBy: string,
                      description: string,
                      displayText: string,
                      expression: string,
                      relationGuid: string,
                      source: string,
                      status: "DISCOVERED" | "PROPOSED" | "IMPORTED" | "VALIDATED" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                      steward: string,
                      termGuid: string
                    }
                  ],
                  status: "ACTIVE" | "DELETED"
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="typeName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="PartialUpdateEntityByUniqueAttributesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; PartialUpdateEntityByUniqueAttributesAsync (string typeName, Azure.Core.RequestContent content, string attrQualifiedName = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; PartialUpdateEntityByUniqueAttributesAsync(string typeName, class Azure.Core.RequestContent content, string attrQualifiedName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.PartialUpdateEntityByUniqueAttributesAsync(System.String,Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PartialUpdateEntityByUniqueAttributesAsync (typeName As String, content As RequestContent, Optional attrQualifiedName As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member PartialUpdateEntityByUniqueAttributesAsync : string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.PartialUpdateEntityByUniqueAttributesAsync : string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewEntities.PartialUpdateEntityByUniqueAttributesAsync (typeName, content, attrQualifiedName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="attrQualifiedName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="typeName"> The name of the type. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="attrQualifiedName"> The qualified name of the entity. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary>
            Update entity partially - Allow a subset of attributes to be updated on
            an entity which is identified by its type and unique attribute  eg: Referenceable.qualifiedName.
            Null updates are not possible.
            In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format:
            attr:&lt;attrName&gt;=&lt;attrValue&gt;.
            NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.
            The REST request would look something like this:
            PUT /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              referredEntities: Dictionary&lt;string, AtlasEntity&gt;,
              entity: {
                attributes: Dictionary&lt;string, AnyObject&gt;,
                typeName: string,
                lastModifiedTS: string,
                businessAttributes: Dictionary&lt;string, AnyObject&gt;,
                classifications: [
                  {
                    attributes: Dictionary&lt;string, AnyObject&gt;,
                    typeName: string,
                    lastModifiedTS: string,
                    entityGuid: string,
                    entityStatus: "ACTIVE" | "DELETED",
                    removePropagationsOnEntityDelete: boolean,
                    validityPeriods: [
                      {
                        endTime: string,
                        startTime: string,
                        timeZone: string
                      }
                    ],
                    source: string,
                    sourceDetails: Dictionary&lt;string, AnyObject&gt;
                  }
                ],
                createTime: number,
                createdBy: string,
                customAttributes: Dictionary&lt;string, string&gt;,
                guid: string,
                homeId: string,
                isIncomplete: boolean,
                labels: [string],
                meanings: [
                  {
                    confidence: number,
                    createdBy: string,
                    description: string,
                    displayText: string,
                    expression: string,
                    relationGuid: string,
                    source: string,
                    status: "DISCOVERED" | "PROPOSED" | "IMPORTED" | "VALIDATED" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                    steward: string,
                    termGuid: string
                  }
                ],
                provenanceType: number,
                proxy: boolean,
                relationshipAttributes: Dictionary&lt;string, AnyObject&gt;,
                status: "ACTIVE" | "DELETED",
                updateTime: number,
                updatedBy: string,
                version: number,
                source: string,
                sourceDetails: Dictionary&lt;string, AnyObject&gt;,
                contacts: Dictionary&lt;string, ContactBasic[]&gt;
              }
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              guidAssignments: Dictionary&lt;string, string&gt;,
              mutatedEntities: Dictionary&lt;string, AtlasEntityHeader[]&gt;,
              partialUpdatedEntities: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  classificationNames: [string],
                  classifications: [
                    {
                      attributes: Dictionary&lt;string, AnyObject&gt;,
                      typeName: string,
                      lastModifiedTS: string,
                      entityGuid: string,
                      entityStatus: "ACTIVE" | "DELETED",
                      removePropagationsOnEntityDelete: boolean,
                      validityPeriods: [
                        {
                          endTime: string,
                          startTime: string,
                          timeZone: string
                        }
                      ],
                      source: string,
                      sourceDetails: Dictionary&lt;string, AnyObject&gt;
                    }
                  ],
                  displayText: string,
                  guid: string,
                  isIncomplete: boolean,
                  labels: [string],
                  meaningNames: [string],
                  meanings: [
                    {
                      confidence: number,
                      createdBy: string,
                      description: string,
                      displayText: string,
                      expression: string,
                      relationGuid: string,
                      source: string,
                      status: "DISCOVERED" | "PROPOSED" | "IMPORTED" | "VALIDATED" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                      steward: string,
                      termGuid: string
                    }
                  ],
                  status: "ACTIVE" | "DELETED"
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="typeName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Analytics.Purview.Catalog.PurviewEntities.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Analytics.Purview.Catalog.PurviewEntities.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClassifications">
      <MemberSignature Language="C#" Value="public virtual Azure.Response SetClassifications (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response SetClassifications(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.SetClassifications(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetClassifications (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member SetClassifications : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.SetClassifications : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="purviewEntities.SetClassifications (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Set classifications on entities in bulk. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              guidHeaderMap: Dictionary&lt;string, AtlasEntityHeader&gt;
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="SetClassificationsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; SetClassificationsAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; SetClassificationsAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.SetClassificationsAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetClassificationsAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member SetClassificationsAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.SetClassificationsAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewEntities.SetClassificationsAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Set classifications on entities in bulk. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              guidHeaderMap: Dictionary&lt;string, AtlasEntityHeader&gt;
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="SetLabels">
      <MemberSignature Language="C#" Value="public virtual Azure.Response SetLabels (string guid, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response SetLabels(string guid, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.SetLabels(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetLabels (guid As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member SetLabels : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.SetLabels : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="purviewEntities.SetLabels (guid, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the entity. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Set labels to a given entity. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="SetLabelsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; SetLabelsAsync (string guid, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; SetLabelsAsync(string guid, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.SetLabelsAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetLabelsAsync (guid As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member SetLabelsAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.SetLabelsAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewEntities.SetLabelsAsync (guid, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the entity. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Set labels to a given entity. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="SetLabelsByUniqueAttribute">
      <MemberSignature Language="C#" Value="public virtual Azure.Response SetLabelsByUniqueAttribute (string typeName, Azure.Core.RequestContent content, string attrQualifiedName = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response SetLabelsByUniqueAttribute(string typeName, class Azure.Core.RequestContent content, string attrQualifiedName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.SetLabelsByUniqueAttribute(System.String,Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetLabelsByUniqueAttribute (typeName As String, content As RequestContent, Optional attrQualifiedName As String = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member SetLabelsByUniqueAttribute : string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.SetLabelsByUniqueAttribute : string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewEntities.SetLabelsByUniqueAttribute (typeName, content, attrQualifiedName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="attrQualifiedName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="typeName"> The name of the type. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="attrQualifiedName"> The qualified name of the entity. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Set labels to a given entity identified by its type and unique attributes, if labels is null/empty, existing labels will all be removed. In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format: attr:&lt;attrName&gt;=&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName. The REST request would look something like this: POST /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="typeName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="SetLabelsByUniqueAttributeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; SetLabelsByUniqueAttributeAsync (string typeName, Azure.Core.RequestContent content, string attrQualifiedName = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; SetLabelsByUniqueAttributeAsync(string typeName, class Azure.Core.RequestContent content, string attrQualifiedName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.SetLabelsByUniqueAttributeAsync(System.String,Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetLabelsByUniqueAttributeAsync (typeName As String, content As RequestContent, Optional attrQualifiedName As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member SetLabelsByUniqueAttributeAsync : string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.SetLabelsByUniqueAttributeAsync : string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewEntities.SetLabelsByUniqueAttributeAsync (typeName, content, attrQualifiedName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="attrQualifiedName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="typeName"> The name of the type. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="attrQualifiedName"> The qualified name of the entity. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Set labels to a given entity identified by its type and unique attributes, if labels is null/empty, existing labels will all be removed. In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the following format: attr:&lt;attrName&gt;=&lt;attrValue&gt;. NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName. The REST request would look something like this: POST /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="typeName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateClassifications">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateClassifications (string guid, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateClassifications(string guid, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.UpdateClassifications(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateClassifications (guid As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateClassifications : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.UpdateClassifications : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="purviewEntities.UpdateClassifications (guid, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the entity. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Update classifications to an existing entity represented by a guid. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              attributes: Dictionary&lt;string, AnyObject&gt;,
              typeName: string,
              lastModifiedTS: string,
              entityGuid: string,
              entityStatus: "ACTIVE" | "DELETED",
              removePropagationsOnEntityDelete: boolean,
              validityPeriods: [
                {
                  endTime: string,
                  startTime: string,
                  timeZone: string
                }
              ],
              source: string,
              sourceDetails: Dictionary&lt;string, AnyObject&gt;
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateClassificationsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateClassificationsAsync (string guid, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateClassificationsAsync(string guid, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.UpdateClassificationsAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateClassificationsAsync (guid As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateClassificationsAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateClassificationsAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewEntities.UpdateClassificationsAsync (guid, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="guid"> The globally unique identifier of the entity. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Update classifications to an existing entity represented by a guid. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              attributes: Dictionary&lt;string, AnyObject&gt;,
              typeName: string,
              lastModifiedTS: string,
              entityGuid: string,
              entityStatus: "ACTIVE" | "DELETED",
              removePropagationsOnEntityDelete: boolean,
              validityPeriods: [
                {
                  endTime: string,
                  startTime: string,
                  timeZone: string
                }
              ],
              source: string,
              sourceDetails: Dictionary&lt;string, AnyObject&gt;
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="guid" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="guid" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateClassificationsByUniqueAttribute">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateClassificationsByUniqueAttribute (string typeName, Azure.Core.RequestContent content, string attrQualifiedName = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateClassificationsByUniqueAttribute(string typeName, class Azure.Core.RequestContent content, string attrQualifiedName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.UpdateClassificationsByUniqueAttribute(System.String,Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateClassificationsByUniqueAttribute (typeName As String, content As RequestContent, Optional attrQualifiedName As String = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateClassificationsByUniqueAttribute : string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.UpdateClassificationsByUniqueAttribute : string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewEntities.UpdateClassificationsByUniqueAttribute (typeName, content, attrQualifiedName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="attrQualifiedName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="typeName"> The name of the type. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="attrQualifiedName"> The qualified name of the entity. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Update classification on an entity identified by its type and unique attributes. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              attributes: Dictionary&lt;string, AnyObject&gt;,
              typeName: string,
              lastModifiedTS: string,
              entityGuid: string,
              entityStatus: "ACTIVE" | "DELETED",
              removePropagationsOnEntityDelete: boolean,
              validityPeriods: [
                {
                  endTime: string,
                  startTime: string,
                  timeZone: string
                }
              ],
              source: string,
              sourceDetails: Dictionary&lt;string, AnyObject&gt;
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="typeName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateClassificationsByUniqueAttributeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateClassificationsByUniqueAttributeAsync (string typeName, Azure.Core.RequestContent content, string attrQualifiedName = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateClassificationsByUniqueAttributeAsync(string typeName, class Azure.Core.RequestContent content, string attrQualifiedName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewEntities.UpdateClassificationsByUniqueAttributeAsync(System.String,Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateClassificationsByUniqueAttributeAsync (typeName As String, content As RequestContent, Optional attrQualifiedName As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateClassificationsByUniqueAttributeAsync : string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateClassificationsByUniqueAttributeAsync : string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewEntities.UpdateClassificationsByUniqueAttributeAsync (typeName, content, attrQualifiedName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="attrQualifiedName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="typeName"> The name of the type. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="attrQualifiedName"> The qualified name of the entity. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Update classification on an entity identified by its type and unique attributes. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              attributes: Dictionary&lt;string, AnyObject&gt;,
              typeName: string,
              lastModifiedTS: string,
              entityGuid: string,
              entityStatus: "ACTIVE" | "DELETED",
              removePropagationsOnEntityDelete: boolean,
              validityPeriods: [
                {
                  endTime: string,
                  startTime: string,
                  timeZone: string
                }
              ],
              source: string,
              sourceDetails: Dictionary&lt;string, AnyObject&gt;
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="typeName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
