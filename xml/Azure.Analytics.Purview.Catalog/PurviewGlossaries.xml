<Type Name="PurviewGlossaries" FullName="Azure.Analytics.Purview.Catalog.PurviewGlossaries">
  <TypeSignature Language="C#" Value="public class PurviewGlossaries" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PurviewGlossaries extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Analytics.Purview.Catalog.PurviewGlossaries" />
  <TypeSignature Language="VB.NET" Value="Public Class PurviewGlossaries" />
  <TypeSignature Language="F#" Value="type PurviewGlossaries = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The PurviewGlossaries sub-client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PurviewGlossaries ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of PurviewGlossaries for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssignTermToEntities">
      <MemberSignature Language="C#" Value="public virtual Azure.Response AssignTermToEntities (string termGuid, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response AssignTermToEntities(string termGuid, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.AssignTermToEntities(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AssignTermToEntities (termGuid As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member AssignTermToEntities : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.AssignTermToEntities : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="purviewGlossaries.AssignTermToEntities (termGuid, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termGuid" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="termGuid"> The globally unique identifier for glossary term. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Assign the given term to the provided list of related objects.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              guid: string,
              typeName: string,
              uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
              displayText: string,
              entityStatus: "ACTIVE" | "DELETED",
              relationshipType: string,
              relationshipAttributes: {
                attributes: Dictionary&lt;string, AnyObject&gt;,
                typeName: string,
                lastModifiedTS: string
              },
              relationshipGuid: string,
              relationshipStatus: "ACTIVE" | "DELETED"
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termGuid" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call AssignTermToEntities.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new object()
});
Response response = client.AssignTermToEntities("<termGuid>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call AssignTermToEntities with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        displayText = "<displayText>",
        entityStatus = "ACTIVE",
        relationshipType = "<relationshipType>",
        relationshipAttributes = new
        {
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        },
        relationshipGuid = "<relationshipGuid>",
        relationshipStatus = "ACTIVE",
        guid = "<guid>",
        typeName = "<typeName>",
        uniqueAttributes = new
        {
            key = new object(),
        },
    }
});
Response response = client.AssignTermToEntities("<termGuid>", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="AssignTermToEntitiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; AssignTermToEntitiesAsync (string termGuid, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; AssignTermToEntitiesAsync(string termGuid, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.AssignTermToEntitiesAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AssignTermToEntitiesAsync (termGuid As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member AssignTermToEntitiesAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.AssignTermToEntitiesAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewGlossaries.AssignTermToEntitiesAsync (termGuid, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termGuid" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="termGuid"> The globally unique identifier for glossary term. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Assign the given term to the provided list of related objects.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              guid: string,
              typeName: string,
              uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
              displayText: string,
              entityStatus: "ACTIVE" | "DELETED",
              relationshipType: string,
              relationshipAttributes: {
                attributes: Dictionary&lt;string, AnyObject&gt;,
                typeName: string,
                lastModifiedTS: string
              },
              relationshipGuid: string,
              relationshipStatus: "ACTIVE" | "DELETED"
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termGuid" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call AssignTermToEntitiesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new object()
});
Response response = await client.AssignTermToEntitiesAsync("<termGuid>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call AssignTermToEntitiesAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        displayText = "<displayText>",
        entityStatus = "ACTIVE",
        relationshipType = "<relationshipType>",
        relationshipAttributes = new
        {
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        },
        relationshipGuid = "<relationshipGuid>",
        relationshipStatus = "ACTIVE",
        guid = "<guid>",
        typeName = "<typeName>",
        uniqueAttributes = new
        {
            key = new object(),
        },
    }
});
Response response = await client.AssignTermToEntitiesAsync("<termGuid>", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateGlossary">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateGlossary (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateGlossary(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.CreateGlossary(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateGlossary (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateGlossary : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateGlossary : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="purviewGlossaries.CreateGlossary (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create a glossary.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              categories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  parentCategoryGuid: string,
                  relationGuid: string
                }
              ],
              language: string,
              terms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              usage: string
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              categories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  parentCategoryGuid: string,
                  relationGuid: string
                }
              ],
              language: string,
              terms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              usage: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateGlossary and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object());
Response response = client.CreateGlossary(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateGlossary with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    categories = new object[]
    {
        new
        {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
    language = "<language>",
    terms = new object[]
    {
        new
        {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    usage = "<usage>",
    classifications = new object[]
    {
        new
        {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new object[]
            {
                new
                {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new
            {
                key = new object(),
            },
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    guid = "<guid>",
});
Response response = client.CreateGlossary(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateGlossaryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateGlossaryAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateGlossaryAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.CreateGlossaryAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateGlossaryAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateGlossaryAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateGlossaryAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewGlossaries.CreateGlossaryAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create a glossary.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              categories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  parentCategoryGuid: string,
                  relationGuid: string
                }
              ],
              language: string,
              terms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              usage: string
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              categories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  parentCategoryGuid: string,
                  relationGuid: string
                }
              ],
              language: string,
              terms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              usage: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateGlossaryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object());
Response response = await client.CreateGlossaryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateGlossaryAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    categories = new object[]
    {
        new
        {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
    language = "<language>",
    terms = new object[]
    {
        new
        {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    usage = "<usage>",
    classifications = new object[]
    {
        new
        {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new object[]
            {
                new
                {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new
            {
                key = new object(),
            },
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    guid = "<guid>",
});
Response response = await client.CreateGlossaryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateGlossaryCategories">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateGlossaryCategories (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateGlossaryCategories(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.CreateGlossaryCategories(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateGlossaryCategories (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateGlossaryCategories : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateGlossaryCategories : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="purviewGlossaries.CreateGlossaryCategories (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create glossary category in bulk.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              childrenCategories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  parentCategoryGuid: string,
                  relationGuid: string
                }
              ],
              parentCategory: AtlasRelatedCategoryHeader,
              terms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ]
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              childrenCategories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  parentCategoryGuid: string,
                  relationGuid: string
                }
              ],
              parentCategory: AtlasRelatedCategoryHeader,
              terms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateGlossaryCategories and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new object()
});
Response response = client.CreateGlossaryCategories(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call CreateGlossaryCategories with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        anchor = new
        {
            displayText = "<displayText>",
            glossaryGuid = "<glossaryGuid>",
            relationGuid = "<relationGuid>",
        },
        childrenCategories = new object[]
        {
            new
            {
                categoryGuid = "<categoryGuid>",
                description = "<description>",
                displayText = "<displayText>",
                parentCategoryGuid = "<parentCategoryGuid>",
                relationGuid = "<relationGuid>",
            }
        },
        terms = new object[]
        {
            new
            {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        classifications = new object[]
        {
            new
            {
                entityGuid = "<entityGuid>",
                entityStatus = "ACTIVE",
                removePropagationsOnEntityDelete = true,
                validityPeriods = new object[]
                {
                    new
                    {
                        endTime = "<endTime>",
                        startTime = "<startTime>",
                        timeZone = "<timeZone>",
                    }
                },
                source = "<source>",
                sourceDetails = new
                {
                    key = new object(),
                },
                attributes = new
                {
                    key = new object(),
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            }
        },
        longDescription = "<longDescription>",
        name = "<name>",
        qualifiedName = "<qualifiedName>",
        shortDescription = "<shortDescription>",
        lastModifiedTS = "<lastModifiedTS>",
        guid = "<guid>",
    }
});
Response response = client.CreateGlossaryCategories(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateGlossaryCategoriesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateGlossaryCategoriesAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateGlossaryCategoriesAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.CreateGlossaryCategoriesAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateGlossaryCategoriesAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateGlossaryCategoriesAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateGlossaryCategoriesAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewGlossaries.CreateGlossaryCategoriesAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create glossary category in bulk.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              childrenCategories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  parentCategoryGuid: string,
                  relationGuid: string
                }
              ],
              parentCategory: AtlasRelatedCategoryHeader,
              terms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ]
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              childrenCategories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  parentCategoryGuid: string,
                  relationGuid: string
                }
              ],
              parentCategory: AtlasRelatedCategoryHeader,
              terms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateGlossaryCategoriesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new object()
});
Response response = await client.CreateGlossaryCategoriesAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call CreateGlossaryCategoriesAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        anchor = new
        {
            displayText = "<displayText>",
            glossaryGuid = "<glossaryGuid>",
            relationGuid = "<relationGuid>",
        },
        childrenCategories = new object[]
        {
            new
            {
                categoryGuid = "<categoryGuid>",
                description = "<description>",
                displayText = "<displayText>",
                parentCategoryGuid = "<parentCategoryGuid>",
                relationGuid = "<relationGuid>",
            }
        },
        terms = new object[]
        {
            new
            {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        classifications = new object[]
        {
            new
            {
                entityGuid = "<entityGuid>",
                entityStatus = "ACTIVE",
                removePropagationsOnEntityDelete = true,
                validityPeriods = new object[]
                {
                    new
                    {
                        endTime = "<endTime>",
                        startTime = "<startTime>",
                        timeZone = "<timeZone>",
                    }
                },
                source = "<source>",
                sourceDetails = new
                {
                    key = new object(),
                },
                attributes = new
                {
                    key = new object(),
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            }
        },
        longDescription = "<longDescription>",
        name = "<name>",
        qualifiedName = "<qualifiedName>",
        shortDescription = "<shortDescription>",
        lastModifiedTS = "<lastModifiedTS>",
        guid = "<guid>",
    }
});
Response response = await client.CreateGlossaryCategoriesAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateGlossaryCategory">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateGlossaryCategory (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateGlossaryCategory(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.CreateGlossaryCategory(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateGlossaryCategory (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateGlossaryCategory : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateGlossaryCategory : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="purviewGlossaries.CreateGlossaryCategory (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create a glossary category.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              childrenCategories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  parentCategoryGuid: string,
                  relationGuid: string
                }
              ],
              parentCategory: AtlasRelatedCategoryHeader,
              terms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ]
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              childrenCategories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  parentCategoryGuid: string,
                  relationGuid: string
                }
              ],
              parentCategory: AtlasRelatedCategoryHeader,
              terms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateGlossaryCategory and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object());
Response response = client.CreateGlossaryCategory(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateGlossaryCategory with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    anchor = new
    {
        displayText = "<displayText>",
        glossaryGuid = "<glossaryGuid>",
        relationGuid = "<relationGuid>",
    },
    childrenCategories = new object[]
    {
        new
        {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
    terms = new object[]
    {
        new
        {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    classifications = new object[]
    {
        new
        {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new object[]
            {
                new
                {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new
            {
                key = new object(),
            },
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    guid = "<guid>",
});
Response response = client.CreateGlossaryCategory(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateGlossaryCategoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateGlossaryCategoryAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateGlossaryCategoryAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.CreateGlossaryCategoryAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateGlossaryCategoryAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateGlossaryCategoryAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateGlossaryCategoryAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewGlossaries.CreateGlossaryCategoryAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create a glossary category.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              childrenCategories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  parentCategoryGuid: string,
                  relationGuid: string
                }
              ],
              parentCategory: AtlasRelatedCategoryHeader,
              terms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ]
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              childrenCategories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  parentCategoryGuid: string,
                  relationGuid: string
                }
              ],
              parentCategory: AtlasRelatedCategoryHeader,
              terms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateGlossaryCategoryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object());
Response response = await client.CreateGlossaryCategoryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateGlossaryCategoryAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    anchor = new
    {
        displayText = "<displayText>",
        glossaryGuid = "<glossaryGuid>",
        relationGuid = "<relationGuid>",
    },
    childrenCategories = new object[]
    {
        new
        {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
    terms = new object[]
    {
        new
        {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    classifications = new object[]
    {
        new
        {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new object[]
            {
                new
                {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new
            {
                key = new object(),
            },
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    guid = "<guid>",
});
Response response = await client.CreateGlossaryCategoryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateGlossaryTerm">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateGlossaryTerm (Azure.Core.RequestContent content, bool? includeTermHierarchy = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateGlossaryTerm(class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.CreateGlossaryTerm(Azure.Core.RequestContent,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateGlossaryTerm (content As RequestContent, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateGlossaryTerm : Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateGlossaryTerm : Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="purviewGlossaries.CreateGlossaryTerm (content, includeTermHierarchy, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create a glossary term.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              abbreviation: string,
              templateName: [AnyObject],
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              antonyms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              createTime: number,
              createdBy: string,
              updateTime: number,
              updatedBy: string,
              status: "Draft" | "Approved" | "Alert" | "Expired",
              resources: [
                {
                  displayName: string,
                  url: string
                }
              ],
              contacts: Dictionary&lt;string, ContactBasic[]&gt;,
              attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
              assignedEntities: [
                {
                  guid: string,
                  typeName: string,
                  uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
                  displayText: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  relationshipType: string,
                  relationshipAttributes: {
                    attributes: Dictionary&lt;string, AnyObject&gt;,
                    typeName: string,
                    lastModifiedTS: string
                  },
                  relationshipGuid: string,
                  relationshipStatus: "ACTIVE" | "DELETED"
                }
              ],
              categories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  relationGuid: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER"
                }
              ],
              classifies: [AtlasRelatedTermHeader],
              examples: [string],
              isA: [AtlasRelatedTermHeader],
              preferredTerms: [AtlasRelatedTermHeader],
              preferredToTerms: [AtlasRelatedTermHeader],
              replacedBy: [AtlasRelatedTermHeader],
              replacementTerms: [AtlasRelatedTermHeader],
              seeAlso: [AtlasRelatedTermHeader],
              synonyms: [AtlasRelatedTermHeader],
              translatedTerms: [AtlasRelatedTermHeader],
              translationTerms: [AtlasRelatedTermHeader],
              usage: string,
              validValues: [AtlasRelatedTermHeader],
              validValuesFor: [AtlasRelatedTermHeader]
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              abbreviation: string,
              templateName: [AnyObject],
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              antonyms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              createTime: number,
              createdBy: string,
              updateTime: number,
              updatedBy: string,
              status: "Draft" | "Approved" | "Alert" | "Expired",
              resources: [
                {
                  displayName: string,
                  url: string
                }
              ],
              contacts: Dictionary&lt;string, ContactBasic[]&gt;,
              attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
              assignedEntities: [
                {
                  guid: string,
                  typeName: string,
                  uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
                  displayText: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  relationshipType: string,
                  relationshipAttributes: {
                    attributes: Dictionary&lt;string, AnyObject&gt;,
                    typeName: string,
                    lastModifiedTS: string
                  },
                  relationshipGuid: string,
                  relationshipStatus: "ACTIVE" | "DELETED"
                }
              ],
              categories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  relationGuid: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER"
                }
              ],
              classifies: [AtlasRelatedTermHeader],
              examples: [string],
              isA: [AtlasRelatedTermHeader],
              preferredTerms: [AtlasRelatedTermHeader],
              preferredToTerms: [AtlasRelatedTermHeader],
              replacedBy: [AtlasRelatedTermHeader],
              replacementTerms: [AtlasRelatedTermHeader],
              seeAlso: [AtlasRelatedTermHeader],
              synonyms: [AtlasRelatedTermHeader],
              translatedTerms: [AtlasRelatedTermHeader],
              translationTerms: [AtlasRelatedTermHeader],
              usage: string,
              validValues: [AtlasRelatedTermHeader],
              validValuesFor: [AtlasRelatedTermHeader]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateGlossaryTerm and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object());
Response response = client.CreateGlossaryTerm(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateGlossaryTerm with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    abbreviation = "<abbreviation>",
    templateName = new object[]
    {
        new object()
    },
    anchor = new
    {
        displayText = "<displayText>",
        glossaryGuid = "<glossaryGuid>",
        relationGuid = "<relationGuid>",
    },
    antonyms = new object[]
    {
        new
        {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    createTime = 123.45F,
    createdBy = "<createdBy>",
    updateTime = 123.45F,
    updatedBy = "<updatedBy>",
    status = "Draft",
    resources = new object[]
    {
        new
        {
            displayName = "<displayName>",
            url = "<url>",
        }
    },
    contacts = new
    {
        key = new object[]
        {
            new
            {
                id = "<id>",
                info = "<info>",
            }
        },
    },
    attributes = new
    {
        key = new
        {
            key = new object(),
        },
    },
    assignedEntities = new object[]
    {
        new
        {
            displayText = "<displayText>",
            entityStatus = "ACTIVE",
            relationshipType = "<relationshipType>",
            relationshipAttributes = new
            {
                attributes = new
                {
                    key = new object(),
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            },
            relationshipGuid = "<relationshipGuid>",
            relationshipStatus = "ACTIVE",
            guid = "<guid>",
            typeName = "<typeName>",
            uniqueAttributes = new
            {
                key = new object(),
            },
        }
    },
    categories = new object[]
    {
        new
        {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            relationGuid = "<relationGuid>",
            status = "DRAFT",
        }
    },
    classifies = new object[]
    {
        null
    },
    examples = new object[]
    {
        "<examples>"
    },
    isA = new object[]
    {
        null
    },
    preferredTerms = new object[]
    {
        null
    },
    preferredToTerms = new object[]
    {
        null
    },
    replacedBy = new object[]
    {
        null
    },
    replacementTerms = new object[]
    {
        null
    },
    seeAlso = new object[]
    {
        null
    },
    synonyms = new object[]
    {
        null
    },
    translatedTerms = new object[]
    {
        null
    },
    translationTerms = new object[]
    {
        null
    },
    usage = "<usage>",
    validValues = new object[]
    {
        null
    },
    validValuesFor = new object[]
    {
        null
    },
    classifications = new object[]
    {
        new
        {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new object[]
            {
                new
                {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new
            {
                key = new object(),
            },
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    guid = "<guid>",
});
Response response = client.CreateGlossaryTerm(content, includeTermHierarchy: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateGlossaryTermAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateGlossaryTermAsync (Azure.Core.RequestContent content, bool? includeTermHierarchy = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateGlossaryTermAsync(class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.CreateGlossaryTermAsync(Azure.Core.RequestContent,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateGlossaryTermAsync (content As RequestContent, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateGlossaryTermAsync : Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateGlossaryTermAsync : Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewGlossaries.CreateGlossaryTermAsync (content, includeTermHierarchy, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create a glossary term.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              abbreviation: string,
              templateName: [AnyObject],
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              antonyms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              createTime: number,
              createdBy: string,
              updateTime: number,
              updatedBy: string,
              status: "Draft" | "Approved" | "Alert" | "Expired",
              resources: [
                {
                  displayName: string,
                  url: string
                }
              ],
              contacts: Dictionary&lt;string, ContactBasic[]&gt;,
              attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
              assignedEntities: [
                {
                  guid: string,
                  typeName: string,
                  uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
                  displayText: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  relationshipType: string,
                  relationshipAttributes: {
                    attributes: Dictionary&lt;string, AnyObject&gt;,
                    typeName: string,
                    lastModifiedTS: string
                  },
                  relationshipGuid: string,
                  relationshipStatus: "ACTIVE" | "DELETED"
                }
              ],
              categories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  relationGuid: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER"
                }
              ],
              classifies: [AtlasRelatedTermHeader],
              examples: [string],
              isA: [AtlasRelatedTermHeader],
              preferredTerms: [AtlasRelatedTermHeader],
              preferredToTerms: [AtlasRelatedTermHeader],
              replacedBy: [AtlasRelatedTermHeader],
              replacementTerms: [AtlasRelatedTermHeader],
              seeAlso: [AtlasRelatedTermHeader],
              synonyms: [AtlasRelatedTermHeader],
              translatedTerms: [AtlasRelatedTermHeader],
              translationTerms: [AtlasRelatedTermHeader],
              usage: string,
              validValues: [AtlasRelatedTermHeader],
              validValuesFor: [AtlasRelatedTermHeader]
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              abbreviation: string,
              templateName: [AnyObject],
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              antonyms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              createTime: number,
              createdBy: string,
              updateTime: number,
              updatedBy: string,
              status: "Draft" | "Approved" | "Alert" | "Expired",
              resources: [
                {
                  displayName: string,
                  url: string
                }
              ],
              contacts: Dictionary&lt;string, ContactBasic[]&gt;,
              attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
              assignedEntities: [
                {
                  guid: string,
                  typeName: string,
                  uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
                  displayText: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  relationshipType: string,
                  relationshipAttributes: {
                    attributes: Dictionary&lt;string, AnyObject&gt;,
                    typeName: string,
                    lastModifiedTS: string
                  },
                  relationshipGuid: string,
                  relationshipStatus: "ACTIVE" | "DELETED"
                }
              ],
              categories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  relationGuid: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER"
                }
              ],
              classifies: [AtlasRelatedTermHeader],
              examples: [string],
              isA: [AtlasRelatedTermHeader],
              preferredTerms: [AtlasRelatedTermHeader],
              preferredToTerms: [AtlasRelatedTermHeader],
              replacedBy: [AtlasRelatedTermHeader],
              replacementTerms: [AtlasRelatedTermHeader],
              seeAlso: [AtlasRelatedTermHeader],
              synonyms: [AtlasRelatedTermHeader],
              translatedTerms: [AtlasRelatedTermHeader],
              translationTerms: [AtlasRelatedTermHeader],
              usage: string,
              validValues: [AtlasRelatedTermHeader],
              validValuesFor: [AtlasRelatedTermHeader]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateGlossaryTermAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object());
Response response = await client.CreateGlossaryTermAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateGlossaryTermAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    abbreviation = "<abbreviation>",
    templateName = new object[]
    {
        new object()
    },
    anchor = new
    {
        displayText = "<displayText>",
        glossaryGuid = "<glossaryGuid>",
        relationGuid = "<relationGuid>",
    },
    antonyms = new object[]
    {
        new
        {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    createTime = 123.45F,
    createdBy = "<createdBy>",
    updateTime = 123.45F,
    updatedBy = "<updatedBy>",
    status = "Draft",
    resources = new object[]
    {
        new
        {
            displayName = "<displayName>",
            url = "<url>",
        }
    },
    contacts = new
    {
        key = new object[]
        {
            new
            {
                id = "<id>",
                info = "<info>",
            }
        },
    },
    attributes = new
    {
        key = new
        {
            key = new object(),
        },
    },
    assignedEntities = new object[]
    {
        new
        {
            displayText = "<displayText>",
            entityStatus = "ACTIVE",
            relationshipType = "<relationshipType>",
            relationshipAttributes = new
            {
                attributes = new
                {
                    key = new object(),
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            },
            relationshipGuid = "<relationshipGuid>",
            relationshipStatus = "ACTIVE",
            guid = "<guid>",
            typeName = "<typeName>",
            uniqueAttributes = new
            {
                key = new object(),
            },
        }
    },
    categories = new object[]
    {
        new
        {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            relationGuid = "<relationGuid>",
            status = "DRAFT",
        }
    },
    classifies = new object[]
    {
        null
    },
    examples = new object[]
    {
        "<examples>"
    },
    isA = new object[]
    {
        null
    },
    preferredTerms = new object[]
    {
        null
    },
    preferredToTerms = new object[]
    {
        null
    },
    replacedBy = new object[]
    {
        null
    },
    replacementTerms = new object[]
    {
        null
    },
    seeAlso = new object[]
    {
        null
    },
    synonyms = new object[]
    {
        null
    },
    translatedTerms = new object[]
    {
        null
    },
    translationTerms = new object[]
    {
        null
    },
    usage = "<usage>",
    validValues = new object[]
    {
        null
    },
    validValuesFor = new object[]
    {
        null
    },
    classifications = new object[]
    {
        new
        {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new object[]
            {
                new
                {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new
            {
                key = new object(),
            },
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    guid = "<guid>",
});
Response response = await client.CreateGlossaryTermAsync(content, includeTermHierarchy: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateGlossaryTerms">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateGlossaryTerms (Azure.Core.RequestContent content, bool? includeTermHierarchy = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateGlossaryTerms(class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.CreateGlossaryTerms(Azure.Core.RequestContent,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateGlossaryTerms (content As RequestContent, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateGlossaryTerms : Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateGlossaryTerms : Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="purviewGlossaries.CreateGlossaryTerms (content, includeTermHierarchy, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create glossary terms in bulk.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              abbreviation: string,
              templateName: [AnyObject],
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              antonyms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              createTime: number,
              createdBy: string,
              updateTime: number,
              updatedBy: string,
              status: "Draft" | "Approved" | "Alert" | "Expired",
              resources: [
                {
                  displayName: string,
                  url: string
                }
              ],
              contacts: Dictionary&lt;string, ContactBasic[]&gt;,
              attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
              assignedEntities: [
                {
                  guid: string,
                  typeName: string,
                  uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
                  displayText: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  relationshipType: string,
                  relationshipAttributes: {
                    attributes: Dictionary&lt;string, AnyObject&gt;,
                    typeName: string,
                    lastModifiedTS: string
                  },
                  relationshipGuid: string,
                  relationshipStatus: "ACTIVE" | "DELETED"
                }
              ],
              categories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  relationGuid: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER"
                }
              ],
              classifies: [AtlasRelatedTermHeader],
              examples: [string],
              isA: [AtlasRelatedTermHeader],
              preferredTerms: [AtlasRelatedTermHeader],
              preferredToTerms: [AtlasRelatedTermHeader],
              replacedBy: [AtlasRelatedTermHeader],
              replacementTerms: [AtlasRelatedTermHeader],
              seeAlso: [AtlasRelatedTermHeader],
              synonyms: [AtlasRelatedTermHeader],
              translatedTerms: [AtlasRelatedTermHeader],
              translationTerms: [AtlasRelatedTermHeader],
              usage: string,
              validValues: [AtlasRelatedTermHeader],
              validValuesFor: [AtlasRelatedTermHeader]
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              abbreviation: string,
              templateName: [AnyObject],
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              antonyms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              createTime: number,
              createdBy: string,
              updateTime: number,
              updatedBy: string,
              status: "Draft" | "Approved" | "Alert" | "Expired",
              resources: [
                {
                  displayName: string,
                  url: string
                }
              ],
              contacts: Dictionary&lt;string, ContactBasic[]&gt;,
              attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
              assignedEntities: [
                {
                  guid: string,
                  typeName: string,
                  uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
                  displayText: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  relationshipType: string,
                  relationshipAttributes: {
                    attributes: Dictionary&lt;string, AnyObject&gt;,
                    typeName: string,
                    lastModifiedTS: string
                  },
                  relationshipGuid: string,
                  relationshipStatus: "ACTIVE" | "DELETED"
                }
              ],
              categories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  relationGuid: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER"
                }
              ],
              classifies: [AtlasRelatedTermHeader],
              examples: [string],
              isA: [AtlasRelatedTermHeader],
              preferredTerms: [AtlasRelatedTermHeader],
              preferredToTerms: [AtlasRelatedTermHeader],
              replacedBy: [AtlasRelatedTermHeader],
              replacementTerms: [AtlasRelatedTermHeader],
              seeAlso: [AtlasRelatedTermHeader],
              synonyms: [AtlasRelatedTermHeader],
              translatedTerms: [AtlasRelatedTermHeader],
              translationTerms: [AtlasRelatedTermHeader],
              usage: string,
              validValues: [AtlasRelatedTermHeader],
              validValuesFor: [AtlasRelatedTermHeader]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateGlossaryTerms and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new object()
});
Response response = client.CreateGlossaryTerms(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call CreateGlossaryTerms with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        abbreviation = "<abbreviation>",
        templateName = new object[]
        {
            new object()
        },
        anchor = new
        {
            displayText = "<displayText>",
            glossaryGuid = "<glossaryGuid>",
            relationGuid = "<relationGuid>",
        },
        antonyms = new object[]
        {
            new
            {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        createTime = 123.45F,
        createdBy = "<createdBy>",
        updateTime = 123.45F,
        updatedBy = "<updatedBy>",
        status = "Draft",
        resources = new object[]
        {
            new
            {
                displayName = "<displayName>",
                url = "<url>",
            }
        },
        contacts = new
        {
            key = new object[]
            {
                new
                {
                    id = "<id>",
                    info = "<info>",
                }
            },
        },
        attributes = new
        {
            key = new
            {
                key = new object(),
            },
        },
        assignedEntities = new object[]
        {
            new
            {
                displayText = "<displayText>",
                entityStatus = "ACTIVE",
                relationshipType = "<relationshipType>",
                relationshipAttributes = new
                {
                    attributes = new
                    {
                        key = new object(),
                    },
                    typeName = "<typeName>",
                    lastModifiedTS = "<lastModifiedTS>",
                },
                relationshipGuid = "<relationshipGuid>",
                relationshipStatus = "ACTIVE",
                guid = "<guid>",
                typeName = "<typeName>",
                uniqueAttributes = new
                {
                    key = new object(),
                },
            }
        },
        categories = new object[]
        {
            new
            {
                categoryGuid = "<categoryGuid>",
                description = "<description>",
                displayText = "<displayText>",
                relationGuid = "<relationGuid>",
                status = "DRAFT",
            }
        },
        classifies = new object[]
        {
            null
        },
        examples = new object[]
        {
            "<examples>"
        },
        isA = new object[]
        {
            null
        },
        preferredTerms = new object[]
        {
            null
        },
        preferredToTerms = new object[]
        {
            null
        },
        replacedBy = new object[]
        {
            null
        },
        replacementTerms = new object[]
        {
            null
        },
        seeAlso = new object[]
        {
            null
        },
        synonyms = new object[]
        {
            null
        },
        translatedTerms = new object[]
        {
            null
        },
        translationTerms = new object[]
        {
            null
        },
        usage = "<usage>",
        validValues = new object[]
        {
            null
        },
        validValuesFor = new object[]
        {
            null
        },
        classifications = new object[]
        {
            new
            {
                entityGuid = "<entityGuid>",
                entityStatus = "ACTIVE",
                removePropagationsOnEntityDelete = true,
                validityPeriods = new object[]
                {
                    new
                    {
                        endTime = "<endTime>",
                        startTime = "<startTime>",
                        timeZone = "<timeZone>",
                    }
                },
                source = "<source>",
                sourceDetails = new
                {
                    key = new object(),
                },
                attributes = new
                {
                    key = new object(),
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            }
        },
        longDescription = "<longDescription>",
        name = "<name>",
        qualifiedName = "<qualifiedName>",
        shortDescription = "<shortDescription>",
        lastModifiedTS = "<lastModifiedTS>",
        guid = "<guid>",
    }
});
Response response = client.CreateGlossaryTerms(content, includeTermHierarchy: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("createTime").ToString());
Console.WriteLine(result[0].GetProperty("createdBy").ToString());
Console.WriteLine(result[0].GetProperty("updateTime").ToString());
Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("usage").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateGlossaryTermsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateGlossaryTermsAsync (Azure.Core.RequestContent content, bool? includeTermHierarchy = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateGlossaryTermsAsync(class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.CreateGlossaryTermsAsync(Azure.Core.RequestContent,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateGlossaryTermsAsync (content As RequestContent, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateGlossaryTermsAsync : Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateGlossaryTermsAsync : Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewGlossaries.CreateGlossaryTermsAsync (content, includeTermHierarchy, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create glossary terms in bulk.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              abbreviation: string,
              templateName: [AnyObject],
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              antonyms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              createTime: number,
              createdBy: string,
              updateTime: number,
              updatedBy: string,
              status: "Draft" | "Approved" | "Alert" | "Expired",
              resources: [
                {
                  displayName: string,
                  url: string
                }
              ],
              contacts: Dictionary&lt;string, ContactBasic[]&gt;,
              attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
              assignedEntities: [
                {
                  guid: string,
                  typeName: string,
                  uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
                  displayText: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  relationshipType: string,
                  relationshipAttributes: {
                    attributes: Dictionary&lt;string, AnyObject&gt;,
                    typeName: string,
                    lastModifiedTS: string
                  },
                  relationshipGuid: string,
                  relationshipStatus: "ACTIVE" | "DELETED"
                }
              ],
              categories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  relationGuid: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER"
                }
              ],
              classifies: [AtlasRelatedTermHeader],
              examples: [string],
              isA: [AtlasRelatedTermHeader],
              preferredTerms: [AtlasRelatedTermHeader],
              preferredToTerms: [AtlasRelatedTermHeader],
              replacedBy: [AtlasRelatedTermHeader],
              replacementTerms: [AtlasRelatedTermHeader],
              seeAlso: [AtlasRelatedTermHeader],
              synonyms: [AtlasRelatedTermHeader],
              translatedTerms: [AtlasRelatedTermHeader],
              translationTerms: [AtlasRelatedTermHeader],
              usage: string,
              validValues: [AtlasRelatedTermHeader],
              validValuesFor: [AtlasRelatedTermHeader]
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              abbreviation: string,
              templateName: [AnyObject],
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              antonyms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              createTime: number,
              createdBy: string,
              updateTime: number,
              updatedBy: string,
              status: "Draft" | "Approved" | "Alert" | "Expired",
              resources: [
                {
                  displayName: string,
                  url: string
                }
              ],
              contacts: Dictionary&lt;string, ContactBasic[]&gt;,
              attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
              assignedEntities: [
                {
                  guid: string,
                  typeName: string,
                  uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
                  displayText: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  relationshipType: string,
                  relationshipAttributes: {
                    attributes: Dictionary&lt;string, AnyObject&gt;,
                    typeName: string,
                    lastModifiedTS: string
                  },
                  relationshipGuid: string,
                  relationshipStatus: "ACTIVE" | "DELETED"
                }
              ],
              categories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  relationGuid: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER"
                }
              ],
              classifies: [AtlasRelatedTermHeader],
              examples: [string],
              isA: [AtlasRelatedTermHeader],
              preferredTerms: [AtlasRelatedTermHeader],
              preferredToTerms: [AtlasRelatedTermHeader],
              replacedBy: [AtlasRelatedTermHeader],
              replacementTerms: [AtlasRelatedTermHeader],
              seeAlso: [AtlasRelatedTermHeader],
              synonyms: [AtlasRelatedTermHeader],
              translatedTerms: [AtlasRelatedTermHeader],
              translationTerms: [AtlasRelatedTermHeader],
              usage: string,
              validValues: [AtlasRelatedTermHeader],
              validValuesFor: [AtlasRelatedTermHeader]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateGlossaryTermsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new object()
});
Response response = await client.CreateGlossaryTermsAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call CreateGlossaryTermsAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        abbreviation = "<abbreviation>",
        templateName = new object[]
        {
            new object()
        },
        anchor = new
        {
            displayText = "<displayText>",
            glossaryGuid = "<glossaryGuid>",
            relationGuid = "<relationGuid>",
        },
        antonyms = new object[]
        {
            new
            {
                description = "<description>",
                displayText = "<displayText>",
                expression = "<expression>",
                relationGuid = "<relationGuid>",
                source = "<source>",
                status = "DRAFT",
                steward = "<steward>",
                termGuid = "<termGuid>",
            }
        },
        createTime = 123.45F,
        createdBy = "<createdBy>",
        updateTime = 123.45F,
        updatedBy = "<updatedBy>",
        status = "Draft",
        resources = new object[]
        {
            new
            {
                displayName = "<displayName>",
                url = "<url>",
            }
        },
        contacts = new
        {
            key = new object[]
            {
                new
                {
                    id = "<id>",
                    info = "<info>",
                }
            },
        },
        attributes = new
        {
            key = new
            {
                key = new object(),
            },
        },
        assignedEntities = new object[]
        {
            new
            {
                displayText = "<displayText>",
                entityStatus = "ACTIVE",
                relationshipType = "<relationshipType>",
                relationshipAttributes = new
                {
                    attributes = new
                    {
                        key = new object(),
                    },
                    typeName = "<typeName>",
                    lastModifiedTS = "<lastModifiedTS>",
                },
                relationshipGuid = "<relationshipGuid>",
                relationshipStatus = "ACTIVE",
                guid = "<guid>",
                typeName = "<typeName>",
                uniqueAttributes = new
                {
                    key = new object(),
                },
            }
        },
        categories = new object[]
        {
            new
            {
                categoryGuid = "<categoryGuid>",
                description = "<description>",
                displayText = "<displayText>",
                relationGuid = "<relationGuid>",
                status = "DRAFT",
            }
        },
        classifies = new object[]
        {
            null
        },
        examples = new object[]
        {
            "<examples>"
        },
        isA = new object[]
        {
            null
        },
        preferredTerms = new object[]
        {
            null
        },
        preferredToTerms = new object[]
        {
            null
        },
        replacedBy = new object[]
        {
            null
        },
        replacementTerms = new object[]
        {
            null
        },
        seeAlso = new object[]
        {
            null
        },
        synonyms = new object[]
        {
            null
        },
        translatedTerms = new object[]
        {
            null
        },
        translationTerms = new object[]
        {
            null
        },
        usage = "<usage>",
        validValues = new object[]
        {
            null
        },
        validValuesFor = new object[]
        {
            null
        },
        classifications = new object[]
        {
            new
            {
                entityGuid = "<entityGuid>",
                entityStatus = "ACTIVE",
                removePropagationsOnEntityDelete = true,
                validityPeriods = new object[]
                {
                    new
                    {
                        endTime = "<endTime>",
                        startTime = "<startTime>",
                        timeZone = "<timeZone>",
                    }
                },
                source = "<source>",
                sourceDetails = new
                {
                    key = new object(),
                },
                attributes = new
                {
                    key = new object(),
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            }
        },
        longDescription = "<longDescription>",
        name = "<name>",
        qualifiedName = "<qualifiedName>",
        shortDescription = "<shortDescription>",
        lastModifiedTS = "<lastModifiedTS>",
        guid = "<guid>",
    }
});
Response response = await client.CreateGlossaryTermsAsync(content, includeTermHierarchy: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("createTime").ToString());
Console.WriteLine(result[0].GetProperty("createdBy").ToString());
Console.WriteLine(result[0].GetProperty("updateTime").ToString());
Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("usage").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteGlossary">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteGlossary (string glossaryGuid, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteGlossary(string glossaryGuid, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.DeleteGlossary(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteGlossary (glossaryGuid As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteGlossary : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteGlossary : string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewGlossaries.DeleteGlossary (glossaryGuid, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryGuid" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delete a glossary.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryGuid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteGlossary.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.DeleteGlossary("<glossaryGuid>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteGlossary with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.DeleteGlossary("<glossaryGuid>");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteGlossaryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteGlossaryAsync (string glossaryGuid, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteGlossaryAsync(string glossaryGuid, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.DeleteGlossaryAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteGlossaryAsync (glossaryGuid As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteGlossaryAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteGlossaryAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewGlossaries.DeleteGlossaryAsync (glossaryGuid, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryGuid" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delete a glossary.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryGuid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteGlossaryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.DeleteGlossaryAsync("<glossaryGuid>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteGlossaryAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.DeleteGlossaryAsync("<glossaryGuid>");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteGlossaryCategory">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteGlossaryCategory (string categoryGuid, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteGlossaryCategory(string categoryGuid, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.DeleteGlossaryCategory(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteGlossaryCategory (categoryGuid As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteGlossaryCategory : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteGlossaryCategory : string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewGlossaries.DeleteGlossaryCategory (categoryGuid, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryGuid" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="categoryGuid"> The globally unique identifier of the category. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delete a glossary category.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryGuid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="categoryGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteGlossaryCategory.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.DeleteGlossaryCategory("<categoryGuid>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteGlossaryCategory with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.DeleteGlossaryCategory("<categoryGuid>");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteGlossaryCategoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteGlossaryCategoryAsync (string categoryGuid, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteGlossaryCategoryAsync(string categoryGuid, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.DeleteGlossaryCategoryAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteGlossaryCategoryAsync (categoryGuid As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteGlossaryCategoryAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteGlossaryCategoryAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewGlossaries.DeleteGlossaryCategoryAsync (categoryGuid, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryGuid" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="categoryGuid"> The globally unique identifier of the category. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delete a glossary category.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryGuid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="categoryGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteGlossaryCategoryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.DeleteGlossaryCategoryAsync("<categoryGuid>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteGlossaryCategoryAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.DeleteGlossaryCategoryAsync("<categoryGuid>");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteGlossaryTerm">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteGlossaryTerm (string termGuid, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteGlossaryTerm(string termGuid, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.DeleteGlossaryTerm(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteGlossaryTerm (termGuid As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteGlossaryTerm : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteGlossaryTerm : string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewGlossaries.DeleteGlossaryTerm (termGuid, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termGuid" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="termGuid"> The globally unique identifier for glossary term. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delete a glossary term.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termGuid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteGlossaryTerm.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.DeleteGlossaryTerm("<termGuid>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteGlossaryTerm with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.DeleteGlossaryTerm("<termGuid>");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteGlossaryTermAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteGlossaryTermAsync (string termGuid, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteGlossaryTermAsync(string termGuid, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.DeleteGlossaryTermAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteGlossaryTermAsync (termGuid As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteGlossaryTermAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteGlossaryTermAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewGlossaries.DeleteGlossaryTermAsync (termGuid, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termGuid" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="termGuid"> The globally unique identifier for glossary term. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delete a glossary term.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termGuid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteGlossaryTermAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.DeleteGlossaryTermAsync("<termGuid>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteGlossaryTermAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.DeleteGlossaryTermAsync("<termGuid>");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteTermAssignmentFromEntities">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteTermAssignmentFromEntities (string termGuid, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteTermAssignmentFromEntities(string termGuid, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.DeleteTermAssignmentFromEntities(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteTermAssignmentFromEntities (termGuid As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteTermAssignmentFromEntities : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteTermAssignmentFromEntities : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="purviewGlossaries.DeleteTermAssignmentFromEntities (termGuid, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termGuid" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="termGuid"> The globally unique identifier for glossary term. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delete the term assignment for the given list of related objects.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              guid: string,
              typeName: string,
              uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
              displayText: string,
              entityStatus: "ACTIVE" | "DELETED",
              relationshipType: string,
              relationshipAttributes: {
                attributes: Dictionary&lt;string, AnyObject&gt;,
                typeName: string,
                lastModifiedTS: string
              },
              relationshipGuid: string,
              relationshipStatus: "ACTIVE" | "DELETED"
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termGuid" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteTermAssignmentFromEntities.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new object()
});
Response response = client.DeleteTermAssignmentFromEntities("<termGuid>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteTermAssignmentFromEntities with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        displayText = "<displayText>",
        entityStatus = "ACTIVE",
        relationshipType = "<relationshipType>",
        relationshipAttributes = new
        {
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        },
        relationshipGuid = "<relationshipGuid>",
        relationshipStatus = "ACTIVE",
        guid = "<guid>",
        typeName = "<typeName>",
        uniqueAttributes = new
        {
            key = new object(),
        },
    }
});
Response response = client.DeleteTermAssignmentFromEntities("<termGuid>", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteTermAssignmentFromEntitiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteTermAssignmentFromEntitiesAsync (string termGuid, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteTermAssignmentFromEntitiesAsync(string termGuid, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.DeleteTermAssignmentFromEntitiesAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteTermAssignmentFromEntitiesAsync (termGuid As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteTermAssignmentFromEntitiesAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteTermAssignmentFromEntitiesAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewGlossaries.DeleteTermAssignmentFromEntitiesAsync (termGuid, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termGuid" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="termGuid"> The globally unique identifier for glossary term. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delete the term assignment for the given list of related objects.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              guid: string,
              typeName: string,
              uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
              displayText: string,
              entityStatus: "ACTIVE" | "DELETED",
              relationshipType: string,
              relationshipAttributes: {
                attributes: Dictionary&lt;string, AnyObject&gt;,
                typeName: string,
                lastModifiedTS: string
              },
              relationshipGuid: string,
              relationshipStatus: "ACTIVE" | "DELETED"
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termGuid" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteTermAssignmentFromEntitiesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new object()
});
Response response = await client.DeleteTermAssignmentFromEntitiesAsync("<termGuid>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteTermAssignmentFromEntitiesAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        displayText = "<displayText>",
        entityStatus = "ACTIVE",
        relationshipType = "<relationshipType>",
        relationshipAttributes = new
        {
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        },
        relationshipGuid = "<relationshipGuid>",
        relationshipStatus = "ACTIVE",
        guid = "<guid>",
        typeName = "<typeName>",
        uniqueAttributes = new
        {
            key = new object(),
        },
    }
});
Response response = await client.DeleteTermAssignmentFromEntitiesAsync("<termGuid>", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ExportGlossaryTermsAsCsv">
      <MemberSignature Language="C#" Value="public virtual Azure.Response ExportGlossaryTermsAsCsv (string glossaryGuid, Azure.Core.RequestContent content, bool? includeTermHierarchy = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response ExportGlossaryTermsAsCsv(string glossaryGuid, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.ExportGlossaryTermsAsCsv(System.String,Azure.Core.RequestContent,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExportGlossaryTermsAsCsv (glossaryGuid As String, content As RequestContent, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member ExportGlossaryTermsAsCsv : string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.ExportGlossaryTermsAsCsv : string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="purviewGlossaries.ExportGlossaryTermsAsCsv (glossaryGuid, content, includeTermHierarchy, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryGuid" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Export Glossary Terms as csv file
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryGuid" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call ExportGlossaryTermsAsCsv and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    "<termGuids>"
});
Response response = client.ExportGlossaryTermsAsCsv("<glossaryGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call ExportGlossaryTermsAsCsv with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    "<termGuids>"
});
Response response = client.ExportGlossaryTermsAsCsv("<glossaryGuid>", content, includeTermHierarchy: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ExportGlossaryTermsAsCsvAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; ExportGlossaryTermsAsCsvAsync (string glossaryGuid, Azure.Core.RequestContent content, bool? includeTermHierarchy = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; ExportGlossaryTermsAsCsvAsync(string glossaryGuid, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.ExportGlossaryTermsAsCsvAsync(System.String,Azure.Core.RequestContent,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExportGlossaryTermsAsCsvAsync (glossaryGuid As String, content As RequestContent, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member ExportGlossaryTermsAsCsvAsync : string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.ExportGlossaryTermsAsCsvAsync : string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewGlossaries.ExportGlossaryTermsAsCsvAsync (glossaryGuid, content, includeTermHierarchy, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryGuid" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Export Glossary Terms as csv file
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryGuid" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call ExportGlossaryTermsAsCsvAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    "<termGuids>"
});
Response response = await client.ExportGlossaryTermsAsCsvAsync("<glossaryGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call ExportGlossaryTermsAsCsvAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    "<termGuids>"
});
Response response = await client.ExportGlossaryTermsAsCsvAsync("<glossaryGuid>", content, includeTermHierarchy: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCategoryTerms">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetCategoryTerms (string categoryGuid, int? limit = default, int? offset = default, string sort = default, Azure.RequestContext context = default);" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetCategoryTerms(string categoryGuid, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.GetCategoryTerms(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCategoryTerms (categoryGuid As String, Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional sort As String = Nothing, Optional context As RequestContext = Nothing) As Response" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="F#" Value="abstract member GetCategoryTerms : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetCategoryTerms : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewGlossaries.GetCategoryTerms (categoryGuid, limit, offset, sort, context)" />
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetCategoryTerms (string categoryGuid, int? limit, int? offset, string sort, Azure.RequestContext context);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCategoryTerms (categoryGuid As String, limit As Nullable(Of Integer), offset As Nullable(Of Integer), sort As String, context As RequestContext) As Response" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryGuid" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="categoryGuid"> The globally unique identifier of the category. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get all terms associated with the specific category.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              description: string,
              displayText: string,
              expression: string,
              relationGuid: string,
              source: string,
              status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
              steward: string,
              termGuid: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryGuid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="categoryGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetCategoryTerms and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetCategoryTerms("<categoryGuid>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetCategoryTerms with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetCategoryTerms("<categoryGuid>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("termGuid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCategoryTermsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetCategoryTermsAsync (string categoryGuid, int? limit = default, int? offset = default, string sort = default, Azure.RequestContext context = default);" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetCategoryTermsAsync(string categoryGuid, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.GetCategoryTermsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCategoryTermsAsync (categoryGuid As String, Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional sort As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="F#" Value="abstract member GetCategoryTermsAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetCategoryTermsAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewGlossaries.GetCategoryTermsAsync (categoryGuid, limit, offset, sort, context)" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetCategoryTermsAsync (string categoryGuid, int? limit, int? offset, string sort, Azure.RequestContext context);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCategoryTermsAsync (categoryGuid As String, limit As Nullable(Of Integer), offset As Nullable(Of Integer), sort As String, context As RequestContext) As Task(Of Response)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryGuid" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="categoryGuid"> The globally unique identifier of the category. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get all terms associated with the specific category.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              description: string,
              displayText: string,
              expression: string,
              relationGuid: string,
              source: string,
              status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
              steward: string,
              termGuid: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryGuid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="categoryGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetCategoryTermsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetCategoryTermsAsync("<categoryGuid>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetCategoryTermsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetCategoryTermsAsync("<categoryGuid>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("termGuid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetDetailedGlossary">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetDetailedGlossary (string glossaryGuid, bool? includeTermHierarchy = default, Azure.RequestContext context = default);" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetDetailedGlossary(string glossaryGuid, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.GetDetailedGlossary(System.String,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDetailedGlossary (glossaryGuid As String, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Response" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="F#" Value="abstract member GetDetailedGlossary : string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetDetailedGlossary : string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="purviewGlossaries.GetDetailedGlossary (glossaryGuid, includeTermHierarchy, context)" />
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetDetailedGlossary (string glossaryGuid, bool? includeTermHierarchy, Azure.RequestContext context);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDetailedGlossary (glossaryGuid As String, includeTermHierarchy As Nullable(Of Boolean), context As RequestContext) As Response" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryGuid" Type="System.String" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get a specific glossary with detailed information.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              categories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  parentCategoryGuid: string,
                  relationGuid: string
                }
              ],
              language: string,
              terms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              usage: string,
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;,
              termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryGuid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetDetailedGlossary and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetDetailedGlossary("<glossaryGuid>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetDetailedGlossary with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetDetailedGlossary("<glossaryGuid>", true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetDetailedGlossaryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetDetailedGlossaryAsync (string glossaryGuid, bool? includeTermHierarchy = default, Azure.RequestContext context = default);" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetDetailedGlossaryAsync(string glossaryGuid, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.GetDetailedGlossaryAsync(System.String,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDetailedGlossaryAsync (glossaryGuid As String, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="F#" Value="abstract member GetDetailedGlossaryAsync : string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetDetailedGlossaryAsync : string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewGlossaries.GetDetailedGlossaryAsync (glossaryGuid, includeTermHierarchy, context)" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetDetailedGlossaryAsync (string glossaryGuid, bool? includeTermHierarchy, Azure.RequestContext context);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDetailedGlossaryAsync (glossaryGuid As String, includeTermHierarchy As Nullable(Of Boolean), context As RequestContext) As Task(Of Response)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryGuid" Type="System.String" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get a specific glossary with detailed information.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              categories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  parentCategoryGuid: string,
                  relationGuid: string
                }
              ],
              language: string,
              terms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              usage: string,
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              categoryInfo: Dictionary&lt;string, AtlasGlossaryCategory&gt;,
              termInfo: Dictionary&lt;string, AtlasGlossaryTerm&gt;
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryGuid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetDetailedGlossaryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetDetailedGlossaryAsync("<glossaryGuid>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetDetailedGlossaryAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetDetailedGlossaryAsync("<glossaryGuid>", true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("categoryInfo").GetProperty("<key>").GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("termInfo").GetProperty("<key>").GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEntitiesAssignedWithTerm">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetEntitiesAssignedWithTerm (string termGuid, int? limit = default, int? offset = default, string sort = default, Azure.RequestContext context = default);" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetEntitiesAssignedWithTerm(string termGuid, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.GetEntitiesAssignedWithTerm(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntitiesAssignedWithTerm (termGuid As String, Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional sort As String = Nothing, Optional context As RequestContext = Nothing) As Response" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="F#" Value="abstract member GetEntitiesAssignedWithTerm : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetEntitiesAssignedWithTerm : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewGlossaries.GetEntitiesAssignedWithTerm (termGuid, limit, offset, sort, context)" />
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetEntitiesAssignedWithTerm (string termGuid, int? limit, int? offset, string sort, Azure.RequestContext context);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntitiesAssignedWithTerm (termGuid As String, limit As Nullable(Of Integer), offset As Nullable(Of Integer), sort As String, context As RequestContext) As Response" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termGuid" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="termGuid"> The globally unique identifier for glossary term. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get all related objects assigned with the specified term.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              guid: string,
              typeName: string,
              uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
              displayText: string,
              entityStatus: "ACTIVE" | "DELETED",
              relationshipType: string,
              relationshipAttributes: {
                attributes: Dictionary&lt;string, AnyObject&gt;,
                typeName: string,
                lastModifiedTS: string
              },
              relationshipGuid: string,
              relationshipStatus: "ACTIVE" | "DELETED"
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termGuid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetEntitiesAssignedWithTerm and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetEntitiesAssignedWithTerm("<termGuid>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetEntitiesAssignedWithTerm with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetEntitiesAssignedWithTerm("<termGuid>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEntitiesAssignedWithTermAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetEntitiesAssignedWithTermAsync (string termGuid, int? limit = default, int? offset = default, string sort = default, Azure.RequestContext context = default);" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetEntitiesAssignedWithTermAsync(string termGuid, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.GetEntitiesAssignedWithTermAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntitiesAssignedWithTermAsync (termGuid As String, Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional sort As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="F#" Value="abstract member GetEntitiesAssignedWithTermAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetEntitiesAssignedWithTermAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewGlossaries.GetEntitiesAssignedWithTermAsync (termGuid, limit, offset, sort, context)" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetEntitiesAssignedWithTermAsync (string termGuid, int? limit, int? offset, string sort, Azure.RequestContext context);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntitiesAssignedWithTermAsync (termGuid As String, limit As Nullable(Of Integer), offset As Nullable(Of Integer), sort As String, context As RequestContext) As Task(Of Response)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termGuid" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="termGuid"> The globally unique identifier for glossary term. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get all related objects assigned with the specified term.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              guid: string,
              typeName: string,
              uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
              displayText: string,
              entityStatus: "ACTIVE" | "DELETED",
              relationshipType: string,
              relationshipAttributes: {
                attributes: Dictionary&lt;string, AnyObject&gt;,
                typeName: string,
                lastModifiedTS: string
              },
              relationshipGuid: string,
              relationshipStatus: "ACTIVE" | "DELETED"
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termGuid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetEntitiesAssignedWithTermAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetEntitiesAssignedWithTermAsync("<termGuid>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetEntitiesAssignedWithTermAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetEntitiesAssignedWithTermAsync("<termGuid>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetGlossaries">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetGlossaries (int? limit = default, int? offset = default, string sort = default, bool? ignoreTermsAndCategories = default, Azure.RequestContext context = default);" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetGlossaries(valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, valuetype System.Nullable`1&lt;bool&gt; ignoreTermsAndCategories, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.GetGlossaries(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlossaries (Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional sort As String = Nothing, Optional ignoreTermsAndCategories As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Response" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="F#" Value="abstract member GetGlossaries : Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetGlossaries : Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="purviewGlossaries.GetGlossaries (limit, offset, sort, ignoreTermsAndCategories, context)" />
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetGlossaries (int? limit, int? offset, string sort, bool? ignoreTermsAndCategories, Azure.RequestContext context);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlossaries (limit As Nullable(Of Integer), offset As Nullable(Of Integer), sort As String, ignoreTermsAndCategories As Nullable(Of Boolean), context As RequestContext) As Response" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="ignoreTermsAndCategories" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="ignoreTermsAndCategories"> Whether ignore terms and categories. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get all glossaries registered with Atlas.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              categories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  parentCategoryGuid: string,
                  relationGuid: string
                }
              ],
              language: string,
              terms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              usage: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetGlossaries and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaries(null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetGlossaries with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaries(1234, 1234, "<sort>", true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("language").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("usage").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetGlossariesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetGlossariesAsync (int? limit = default, int? offset = default, string sort = default, bool? ignoreTermsAndCategories = default, Azure.RequestContext context = default);" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetGlossariesAsync(valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, valuetype System.Nullable`1&lt;bool&gt; ignoreTermsAndCategories, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.GetGlossariesAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlossariesAsync (Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional sort As String = Nothing, Optional ignoreTermsAndCategories As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="F#" Value="abstract member GetGlossariesAsync : Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetGlossariesAsync : Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewGlossaries.GetGlossariesAsync (limit, offset, sort, ignoreTermsAndCategories, context)" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetGlossariesAsync (int? limit, int? offset, string sort, bool? ignoreTermsAndCategories, Azure.RequestContext context);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlossariesAsync (limit As Nullable(Of Integer), offset As Nullable(Of Integer), sort As String, ignoreTermsAndCategories As Nullable(Of Boolean), context As RequestContext) As Task(Of Response)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="ignoreTermsAndCategories" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="ignoreTermsAndCategories"> Whether ignore terms and categories. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get all glossaries registered with Atlas.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              categories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  parentCategoryGuid: string,
                  relationGuid: string
                }
              ],
              language: string,
              terms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              usage: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetGlossariesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossariesAsync(null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetGlossariesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossariesAsync(1234, 1234, "<sort>", true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("language").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("usage").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetGlossary">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetGlossary (string glossaryGuid, Azure.RequestContext context = default);" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetGlossary(string glossaryGuid, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.GetGlossary(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlossary (glossaryGuid As String, Optional context As RequestContext = Nothing) As Response" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="F#" Value="abstract member GetGlossary : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetGlossary : string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewGlossaries.GetGlossary (glossaryGuid, context)" />
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetGlossary (string glossaryGuid, Azure.RequestContext context);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlossary (glossaryGuid As String, context As RequestContext) As Response" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryGuid" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get a specific Glossary by its GUID.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              categories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  parentCategoryGuid: string,
                  relationGuid: string
                }
              ],
              language: string,
              terms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              usage: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryGuid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetGlossary and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossary("<glossaryGuid>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetGlossary with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossary("<glossaryGuid>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetGlossaryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetGlossaryAsync (string glossaryGuid, Azure.RequestContext context = default);" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetGlossaryAsync(string glossaryGuid, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.GetGlossaryAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlossaryAsync (glossaryGuid As String, Optional context As RequestContext = Nothing) As Task(Of Response)" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="F#" Value="abstract member GetGlossaryAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetGlossaryAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewGlossaries.GetGlossaryAsync (glossaryGuid, context)" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetGlossaryAsync (string glossaryGuid, Azure.RequestContext context);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlossaryAsync (glossaryGuid As String, context As RequestContext) As Task(Of Response)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryGuid" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get a specific Glossary by its GUID.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              categories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  parentCategoryGuid: string,
                  relationGuid: string
                }
              ],
              language: string,
              terms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              usage: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryGuid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetGlossaryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryAsync("<glossaryGuid>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetGlossaryAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryAsync("<glossaryGuid>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetGlossaryCategories">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetGlossaryCategories (string glossaryGuid, int? limit = default, int? offset = default, string sort = default, Azure.RequestContext context = default);" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetGlossaryCategories(string glossaryGuid, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.GetGlossaryCategories(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlossaryCategories (glossaryGuid As String, Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional sort As String = Nothing, Optional context As RequestContext = Nothing) As Response" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="F#" Value="abstract member GetGlossaryCategories : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetGlossaryCategories : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewGlossaries.GetGlossaryCategories (glossaryGuid, limit, offset, sort, context)" />
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetGlossaryCategories (string glossaryGuid, int? limit, int? offset, string sort, Azure.RequestContext context);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlossaryCategories (glossaryGuid As String, limit As Nullable(Of Integer), offset As Nullable(Of Integer), sort As String, context As RequestContext) As Response" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryGuid" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get the categories belonging to a specific glossary.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              childrenCategories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  parentCategoryGuid: string,
                  relationGuid: string
                }
              ],
              parentCategory: AtlasRelatedCategoryHeader,
              terms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryGuid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetGlossaryCategories and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaryCategories("<glossaryGuid>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetGlossaryCategories with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaryCategories("<glossaryGuid>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetGlossaryCategoriesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetGlossaryCategoriesAsync (string glossaryGuid, int? limit = default, int? offset = default, string sort = default, Azure.RequestContext context = default);" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetGlossaryCategoriesAsync(string glossaryGuid, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.GetGlossaryCategoriesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlossaryCategoriesAsync (glossaryGuid As String, Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional sort As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="F#" Value="abstract member GetGlossaryCategoriesAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetGlossaryCategoriesAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewGlossaries.GetGlossaryCategoriesAsync (glossaryGuid, limit, offset, sort, context)" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetGlossaryCategoriesAsync (string glossaryGuid, int? limit, int? offset, string sort, Azure.RequestContext context);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlossaryCategoriesAsync (glossaryGuid As String, limit As Nullable(Of Integer), offset As Nullable(Of Integer), sort As String, context As RequestContext) As Task(Of Response)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryGuid" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get the categories belonging to a specific glossary.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              childrenCategories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  parentCategoryGuid: string,
                  relationGuid: string
                }
              ],
              parentCategory: AtlasRelatedCategoryHeader,
              terms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryGuid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetGlossaryCategoriesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryCategoriesAsync("<glossaryGuid>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetGlossaryCategoriesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryCategoriesAsync("<glossaryGuid>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetGlossaryCategoriesHeaders">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetGlossaryCategoriesHeaders (string glossaryGuid, int? limit = default, int? offset = default, string sort = default, Azure.RequestContext context = default);" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetGlossaryCategoriesHeaders(string glossaryGuid, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.GetGlossaryCategoriesHeaders(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlossaryCategoriesHeaders (glossaryGuid As String, Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional sort As String = Nothing, Optional context As RequestContext = Nothing) As Response" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="F#" Value="abstract member GetGlossaryCategoriesHeaders : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetGlossaryCategoriesHeaders : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewGlossaries.GetGlossaryCategoriesHeaders (glossaryGuid, limit, offset, sort, context)" />
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetGlossaryCategoriesHeaders (string glossaryGuid, int? limit, int? offset, string sort, Azure.RequestContext context);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlossaryCategoriesHeaders (glossaryGuid As String, limit As Nullable(Of Integer), offset As Nullable(Of Integer), sort As String, context As RequestContext) As Response" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryGuid" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get the category headers belonging to a specific glossary.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              categoryGuid: string,
              description: string,
              displayText: string,
              parentCategoryGuid: string,
              relationGuid: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryGuid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetGlossaryCategoriesHeaders and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaryCategoriesHeaders("<glossaryGuid>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetGlossaryCategoriesHeaders with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaryCategoriesHeaders("<glossaryGuid>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetGlossaryCategoriesHeadersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetGlossaryCategoriesHeadersAsync (string glossaryGuid, int? limit = default, int? offset = default, string sort = default, Azure.RequestContext context = default);" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetGlossaryCategoriesHeadersAsync(string glossaryGuid, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.GetGlossaryCategoriesHeadersAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlossaryCategoriesHeadersAsync (glossaryGuid As String, Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional sort As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="F#" Value="abstract member GetGlossaryCategoriesHeadersAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetGlossaryCategoriesHeadersAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewGlossaries.GetGlossaryCategoriesHeadersAsync (glossaryGuid, limit, offset, sort, context)" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetGlossaryCategoriesHeadersAsync (string glossaryGuid, int? limit, int? offset, string sort, Azure.RequestContext context);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlossaryCategoriesHeadersAsync (glossaryGuid As String, limit As Nullable(Of Integer), offset As Nullable(Of Integer), sort As String, context As RequestContext) As Task(Of Response)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryGuid" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get the category headers belonging to a specific glossary.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              categoryGuid: string,
              description: string,
              displayText: string,
              parentCategoryGuid: string,
              relationGuid: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryGuid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetGlossaryCategoriesHeadersAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryCategoriesHeadersAsync("<glossaryGuid>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetGlossaryCategoriesHeadersAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryCategoriesHeadersAsync("<glossaryGuid>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetGlossaryCategory">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetGlossaryCategory (string categoryGuid, Azure.RequestContext context = default);" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetGlossaryCategory(string categoryGuid, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.GetGlossaryCategory(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlossaryCategory (categoryGuid As String, Optional context As RequestContext = Nothing) As Response" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="F#" Value="abstract member GetGlossaryCategory : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetGlossaryCategory : string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewGlossaries.GetGlossaryCategory (categoryGuid, context)" />
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetGlossaryCategory (string categoryGuid, Azure.RequestContext context);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlossaryCategory (categoryGuid As String, context As RequestContext) As Response" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryGuid" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="categoryGuid"> The globally unique identifier of the category. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get specific glossary category by its GUID.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              childrenCategories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  parentCategoryGuid: string,
                  relationGuid: string
                }
              ],
              parentCategory: AtlasRelatedCategoryHeader,
              terms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryGuid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="categoryGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetGlossaryCategory and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaryCategory("<categoryGuid>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetGlossaryCategory with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaryCategory("<categoryGuid>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetGlossaryCategoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetGlossaryCategoryAsync (string categoryGuid, Azure.RequestContext context = default);" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetGlossaryCategoryAsync(string categoryGuid, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.GetGlossaryCategoryAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlossaryCategoryAsync (categoryGuid As String, Optional context As RequestContext = Nothing) As Task(Of Response)" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="F#" Value="abstract member GetGlossaryCategoryAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetGlossaryCategoryAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewGlossaries.GetGlossaryCategoryAsync (categoryGuid, context)" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetGlossaryCategoryAsync (string categoryGuid, Azure.RequestContext context);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlossaryCategoryAsync (categoryGuid As String, context As RequestContext) As Task(Of Response)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryGuid" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="categoryGuid"> The globally unique identifier of the category. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get specific glossary category by its GUID.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              childrenCategories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  parentCategoryGuid: string,
                  relationGuid: string
                }
              ],
              parentCategory: AtlasRelatedCategoryHeader,
              terms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryGuid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="categoryGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetGlossaryCategoryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryCategoryAsync("<categoryGuid>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetGlossaryCategoryAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryCategoryAsync("<categoryGuid>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetGlossaryTerm">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetGlossaryTerm (string termGuid, bool? includeTermHierarchy = default, System.Collections.Generic.IEnumerable&lt;string&gt; excludeRelationshipTypeList = default, Azure.RequestContext context = default);" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetGlossaryTerm(string termGuid, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, class System.Collections.Generic.IEnumerable`1&lt;string&gt; excludeRelationshipTypeList, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.GetGlossaryTerm(System.String,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlossaryTerm (termGuid As String, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional excludeRelationshipTypeList As IEnumerable(Of String) = Nothing, Optional context As RequestContext = Nothing) As Response" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="F#" Value="abstract member GetGlossaryTerm : string * Nullable&lt;bool&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetGlossaryTerm : string * Nullable&lt;bool&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="purviewGlossaries.GetGlossaryTerm (termGuid, includeTermHierarchy, excludeRelationshipTypeList, context)" />
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetGlossaryTerm (string termGuid, bool? includeTermHierarchy, System.Collections.Generic.IEnumerable&lt;string&gt; excludeRelationshipTypeList, Azure.RequestContext context);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlossaryTerm (termGuid As String, includeTermHierarchy As Nullable(Of Boolean), excludeRelationshipTypeList As IEnumerable(Of String), context As RequestContext) As Response" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termGuid" Type="System.String" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="excludeRelationshipTypeList" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="termGuid"> The globally unique identifier for glossary term. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="excludeRelationshipTypeList"> An array of relationship types which need to be excluded. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get a specific glossary term by its GUID.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              abbreviation: string,
              templateName: [AnyObject],
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              antonyms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              createTime: number,
              createdBy: string,
              updateTime: number,
              updatedBy: string,
              status: "Draft" | "Approved" | "Alert" | "Expired",
              resources: [
                {
                  displayName: string,
                  url: string
                }
              ],
              contacts: Dictionary&lt;string, ContactBasic[]&gt;,
              attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
              assignedEntities: [
                {
                  guid: string,
                  typeName: string,
                  uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
                  displayText: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  relationshipType: string,
                  relationshipAttributes: {
                    attributes: Dictionary&lt;string, AnyObject&gt;,
                    typeName: string,
                    lastModifiedTS: string
                  },
                  relationshipGuid: string,
                  relationshipStatus: "ACTIVE" | "DELETED"
                }
              ],
              categories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  relationGuid: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER"
                }
              ],
              classifies: [AtlasRelatedTermHeader],
              examples: [string],
              isA: [AtlasRelatedTermHeader],
              preferredTerms: [AtlasRelatedTermHeader],
              preferredToTerms: [AtlasRelatedTermHeader],
              replacedBy: [AtlasRelatedTermHeader],
              replacementTerms: [AtlasRelatedTermHeader],
              seeAlso: [AtlasRelatedTermHeader],
              synonyms: [AtlasRelatedTermHeader],
              translatedTerms: [AtlasRelatedTermHeader],
              translationTerms: [AtlasRelatedTermHeader],
              usage: string,
              validValues: [AtlasRelatedTermHeader],
              validValuesFor: [AtlasRelatedTermHeader]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termGuid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetGlossaryTerm and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaryTerm("<termGuid>", null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetGlossaryTerm with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaryTerm("<termGuid>", true, new string[] { "<excludeRelationshipTypeList>" }, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetGlossaryTermAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetGlossaryTermAsync (string termGuid, bool? includeTermHierarchy = default, System.Collections.Generic.IEnumerable&lt;string&gt; excludeRelationshipTypeList = default, Azure.RequestContext context = default);" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetGlossaryTermAsync(string termGuid, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, class System.Collections.Generic.IEnumerable`1&lt;string&gt; excludeRelationshipTypeList, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.GetGlossaryTermAsync(System.String,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlossaryTermAsync (termGuid As String, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional excludeRelationshipTypeList As IEnumerable(Of String) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="F#" Value="abstract member GetGlossaryTermAsync : string * Nullable&lt;bool&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetGlossaryTermAsync : string * Nullable&lt;bool&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewGlossaries.GetGlossaryTermAsync (termGuid, includeTermHierarchy, excludeRelationshipTypeList, context)" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetGlossaryTermAsync (string termGuid, bool? includeTermHierarchy, System.Collections.Generic.IEnumerable&lt;string&gt; excludeRelationshipTypeList, Azure.RequestContext context);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlossaryTermAsync (termGuid As String, includeTermHierarchy As Nullable(Of Boolean), excludeRelationshipTypeList As IEnumerable(Of String), context As RequestContext) As Task(Of Response)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termGuid" Type="System.String" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="excludeRelationshipTypeList" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="termGuid"> The globally unique identifier for glossary term. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="excludeRelationshipTypeList"> An array of relationship types which need to be excluded. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get a specific glossary term by its GUID.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              abbreviation: string,
              templateName: [AnyObject],
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              antonyms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              createTime: number,
              createdBy: string,
              updateTime: number,
              updatedBy: string,
              status: "Draft" | "Approved" | "Alert" | "Expired",
              resources: [
                {
                  displayName: string,
                  url: string
                }
              ],
              contacts: Dictionary&lt;string, ContactBasic[]&gt;,
              attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
              assignedEntities: [
                {
                  guid: string,
                  typeName: string,
                  uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
                  displayText: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  relationshipType: string,
                  relationshipAttributes: {
                    attributes: Dictionary&lt;string, AnyObject&gt;,
                    typeName: string,
                    lastModifiedTS: string
                  },
                  relationshipGuid: string,
                  relationshipStatus: "ACTIVE" | "DELETED"
                }
              ],
              categories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  relationGuid: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER"
                }
              ],
              classifies: [AtlasRelatedTermHeader],
              examples: [string],
              isA: [AtlasRelatedTermHeader],
              preferredTerms: [AtlasRelatedTermHeader],
              preferredToTerms: [AtlasRelatedTermHeader],
              replacedBy: [AtlasRelatedTermHeader],
              replacementTerms: [AtlasRelatedTermHeader],
              seeAlso: [AtlasRelatedTermHeader],
              synonyms: [AtlasRelatedTermHeader],
              translatedTerms: [AtlasRelatedTermHeader],
              translationTerms: [AtlasRelatedTermHeader],
              usage: string,
              validValues: [AtlasRelatedTermHeader],
              validValuesFor: [AtlasRelatedTermHeader]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termGuid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetGlossaryTermAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryTermAsync("<termGuid>", null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetGlossaryTermAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryTermAsync("<termGuid>", true, new string[] { "<excludeRelationshipTypeList>" }, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetGlossaryTermHeaders">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetGlossaryTermHeaders (string glossaryGuid, int? limit = default, int? offset = default, string sort = default, Azure.RequestContext context = default);" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetGlossaryTermHeaders(string glossaryGuid, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.GetGlossaryTermHeaders(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlossaryTermHeaders (glossaryGuid As String, Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional sort As String = Nothing, Optional context As RequestContext = Nothing) As Response" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="F#" Value="abstract member GetGlossaryTermHeaders : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetGlossaryTermHeaders : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewGlossaries.GetGlossaryTermHeaders (glossaryGuid, limit, offset, sort, context)" />
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetGlossaryTermHeaders (string glossaryGuid, int? limit, int? offset, string sort, Azure.RequestContext context);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlossaryTermHeaders (glossaryGuid As String, limit As Nullable(Of Integer), offset As Nullable(Of Integer), sort As String, context As RequestContext) As Response" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryGuid" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get term headers belonging to a specific glossary.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              description: string,
              displayText: string,
              expression: string,
              relationGuid: string,
              source: string,
              status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
              steward: string,
              termGuid: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryGuid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetGlossaryTermHeaders and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaryTermHeaders("<glossaryGuid>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetGlossaryTermHeaders with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaryTermHeaders("<glossaryGuid>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("termGuid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetGlossaryTermHeadersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetGlossaryTermHeadersAsync (string glossaryGuid, int? limit = default, int? offset = default, string sort = default, Azure.RequestContext context = default);" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetGlossaryTermHeadersAsync(string glossaryGuid, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.GetGlossaryTermHeadersAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlossaryTermHeadersAsync (glossaryGuid As String, Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional sort As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="F#" Value="abstract member GetGlossaryTermHeadersAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetGlossaryTermHeadersAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewGlossaries.GetGlossaryTermHeadersAsync (glossaryGuid, limit, offset, sort, context)" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetGlossaryTermHeadersAsync (string glossaryGuid, int? limit, int? offset, string sort, Azure.RequestContext context);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlossaryTermHeadersAsync (glossaryGuid As String, limit As Nullable(Of Integer), offset As Nullable(Of Integer), sort As String, context As RequestContext) As Task(Of Response)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryGuid" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get term headers belonging to a specific glossary.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              description: string,
              displayText: string,
              expression: string,
              relationGuid: string,
              source: string,
              status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
              steward: string,
              termGuid: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryGuid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetGlossaryTermHeadersAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryTermHeadersAsync("<glossaryGuid>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetGlossaryTermHeadersAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryTermHeadersAsync("<glossaryGuid>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("termGuid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetGlossaryTerms">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetGlossaryTerms (string glossaryGuid, bool? includeTermHierarchy = default, int? limit = default, int? offset = default, string sort = default, Azure.RequestContext context = default);" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetGlossaryTerms(string glossaryGuid, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.GetGlossaryTerms(System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlossaryTerms (glossaryGuid As String, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional sort As String = Nothing, Optional context As RequestContext = Nothing) As Response" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="F#" Value="abstract member GetGlossaryTerms : string * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetGlossaryTerms : string * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewGlossaries.GetGlossaryTerms (glossaryGuid, includeTermHierarchy, limit, offset, sort, context)" />
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetGlossaryTerms (string glossaryGuid, bool? includeTermHierarchy, int? limit, int? offset, string sort, Azure.RequestContext context);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlossaryTerms (glossaryGuid As String, includeTermHierarchy As Nullable(Of Boolean), limit As Nullable(Of Integer), offset As Nullable(Of Integer), sort As String, context As RequestContext) As Response" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryGuid" Type="System.String" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get terms belonging to a specific glossary.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              abbreviation: string,
              templateName: [AnyObject],
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              antonyms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              createTime: number,
              createdBy: string,
              updateTime: number,
              updatedBy: string,
              status: "Draft" | "Approved" | "Alert" | "Expired",
              resources: [
                {
                  displayName: string,
                  url: string
                }
              ],
              contacts: Dictionary&lt;string, ContactBasic[]&gt;,
              attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
              assignedEntities: [
                {
                  guid: string,
                  typeName: string,
                  uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
                  displayText: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  relationshipType: string,
                  relationshipAttributes: {
                    attributes: Dictionary&lt;string, AnyObject&gt;,
                    typeName: string,
                    lastModifiedTS: string
                  },
                  relationshipGuid: string,
                  relationshipStatus: "ACTIVE" | "DELETED"
                }
              ],
              categories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  relationGuid: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER"
                }
              ],
              classifies: [AtlasRelatedTermHeader],
              examples: [string],
              isA: [AtlasRelatedTermHeader],
              preferredTerms: [AtlasRelatedTermHeader],
              preferredToTerms: [AtlasRelatedTermHeader],
              replacedBy: [AtlasRelatedTermHeader],
              replacementTerms: [AtlasRelatedTermHeader],
              seeAlso: [AtlasRelatedTermHeader],
              synonyms: [AtlasRelatedTermHeader],
              translatedTerms: [AtlasRelatedTermHeader],
              translationTerms: [AtlasRelatedTermHeader],
              usage: string,
              validValues: [AtlasRelatedTermHeader],
              validValuesFor: [AtlasRelatedTermHeader]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryGuid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetGlossaryTerms and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaryTerms("<glossaryGuid>", null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetGlossaryTerms with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetGlossaryTerms("<glossaryGuid>", true, 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("createTime").ToString());
Console.WriteLine(result[0].GetProperty("createdBy").ToString());
Console.WriteLine(result[0].GetProperty("updateTime").ToString());
Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("usage").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetGlossaryTermsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetGlossaryTermsAsync (string glossaryGuid, bool? includeTermHierarchy = default, int? limit = default, int? offset = default, string sort = default, Azure.RequestContext context = default);" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetGlossaryTermsAsync(string glossaryGuid, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.GetGlossaryTermsAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlossaryTermsAsync (glossaryGuid As String, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional sort As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="F#" Value="abstract member GetGlossaryTermsAsync : string * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetGlossaryTermsAsync : string * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewGlossaries.GetGlossaryTermsAsync (glossaryGuid, includeTermHierarchy, limit, offset, sort, context)" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetGlossaryTermsAsync (string glossaryGuid, bool? includeTermHierarchy, int? limit, int? offset, string sort, Azure.RequestContext context);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlossaryTermsAsync (glossaryGuid As String, includeTermHierarchy As Nullable(Of Boolean), limit As Nullable(Of Integer), offset As Nullable(Of Integer), sort As String, context As RequestContext) As Task(Of Response)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryGuid" Type="System.String" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get terms belonging to a specific glossary.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              abbreviation: string,
              templateName: [AnyObject],
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              antonyms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              createTime: number,
              createdBy: string,
              updateTime: number,
              updatedBy: string,
              status: "Draft" | "Approved" | "Alert" | "Expired",
              resources: [
                {
                  displayName: string,
                  url: string
                }
              ],
              contacts: Dictionary&lt;string, ContactBasic[]&gt;,
              attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
              assignedEntities: [
                {
                  guid: string,
                  typeName: string,
                  uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
                  displayText: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  relationshipType: string,
                  relationshipAttributes: {
                    attributes: Dictionary&lt;string, AnyObject&gt;,
                    typeName: string,
                    lastModifiedTS: string
                  },
                  relationshipGuid: string,
                  relationshipStatus: "ACTIVE" | "DELETED"
                }
              ],
              categories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  relationGuid: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER"
                }
              ],
              classifies: [AtlasRelatedTermHeader],
              examples: [string],
              isA: [AtlasRelatedTermHeader],
              preferredTerms: [AtlasRelatedTermHeader],
              preferredToTerms: [AtlasRelatedTermHeader],
              replacedBy: [AtlasRelatedTermHeader],
              replacementTerms: [AtlasRelatedTermHeader],
              seeAlso: [AtlasRelatedTermHeader],
              synonyms: [AtlasRelatedTermHeader],
              translatedTerms: [AtlasRelatedTermHeader],
              translationTerms: [AtlasRelatedTermHeader],
              usage: string,
              validValues: [AtlasRelatedTermHeader],
              validValuesFor: [AtlasRelatedTermHeader]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryGuid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetGlossaryTermsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryTermsAsync("<glossaryGuid>", null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetGlossaryTermsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetGlossaryTermsAsync("<glossaryGuid>", true, 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("createTime").ToString());
Console.WriteLine(result[0].GetProperty("createdBy").ToString());
Console.WriteLine(result[0].GetProperty("updateTime").ToString());
Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("usage").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetImportCsvOperationStatus">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetImportCsvOperationStatus (string operationGuid, Azure.RequestContext context = default);" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetImportCsvOperationStatus(string operationGuid, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.GetImportCsvOperationStatus(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetImportCsvOperationStatus (operationGuid As String, Optional context As RequestContext = Nothing) As Response" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="F#" Value="abstract member GetImportCsvOperationStatus : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetImportCsvOperationStatus : string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewGlossaries.GetImportCsvOperationStatus (operationGuid, context)" />
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetImportCsvOperationStatus (string operationGuid, Azure.RequestContext context);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetImportCsvOperationStatus (operationGuid As String, context As RequestContext) As Response" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationGuid" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="operationGuid"> The globally unique identifier for async operation/job. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get the status of import csv operation
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              id: string,
              status: "NotStarted" | "Succeeded" | "Failed" | "Running",
              createTime: string,
              lastUpdateTime: string,
              properties: {
                importedTerms: string,
                totalTermsDetected: string
              },
              error: {
                errorCode: number,
                errorMessage: string
              }
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="operationGuid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="operationGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetImportCsvOperationStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetImportCsvOperationStatus("<operationGuid>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetImportCsvOperationStatus with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetImportCsvOperationStatus("<operationGuid>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("importedTerms").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("totalTermsDetected").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("errorMessage").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetImportCsvOperationStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetImportCsvOperationStatusAsync (string operationGuid, Azure.RequestContext context = default);" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetImportCsvOperationStatusAsync(string operationGuid, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.GetImportCsvOperationStatusAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetImportCsvOperationStatusAsync (operationGuid As String, Optional context As RequestContext = Nothing) As Task(Of Response)" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="F#" Value="abstract member GetImportCsvOperationStatusAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetImportCsvOperationStatusAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewGlossaries.GetImportCsvOperationStatusAsync (operationGuid, context)" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetImportCsvOperationStatusAsync (string operationGuid, Azure.RequestContext context);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetImportCsvOperationStatusAsync (operationGuid As String, context As RequestContext) As Task(Of Response)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationGuid" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="operationGuid"> The globally unique identifier for async operation/job. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get the status of import csv operation
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              id: string,
              status: "NotStarted" | "Succeeded" | "Failed" | "Running",
              createTime: string,
              lastUpdateTime: string,
              properties: {
                importedTerms: string,
                totalTermsDetected: string
              },
              error: {
                errorCode: number,
                errorMessage: string
              }
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="operationGuid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="operationGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetImportCsvOperationStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetImportCsvOperationStatusAsync("<operationGuid>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetImportCsvOperationStatusAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetImportCsvOperationStatusAsync("<operationGuid>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("importedTerms").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("totalTermsDetected").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("errorMessage").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetRelatedCategories">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetRelatedCategories (string categoryGuid, int? limit = default, int? offset = default, string sort = default, Azure.RequestContext context = default);" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetRelatedCategories(string categoryGuid, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.GetRelatedCategories(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRelatedCategories (categoryGuid As String, Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional sort As String = Nothing, Optional context As RequestContext = Nothing) As Response" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="F#" Value="abstract member GetRelatedCategories : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetRelatedCategories : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewGlossaries.GetRelatedCategories (categoryGuid, limit, offset, sort, context)" />
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetRelatedCategories (string categoryGuid, int? limit, int? offset, string sort, Azure.RequestContext context);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRelatedCategories (categoryGuid As String, limit As Nullable(Of Integer), offset As Nullable(Of Integer), sort As String, context As RequestContext) As Response" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryGuid" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="categoryGuid"> The globally unique identifier of the category. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get all related categories (parent and children). Limit, offset, and sort parameters are currently not being enabled and won't work even they are passed.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              categoryGuid: string,
              description: string,
              displayText: string,
              parentCategoryGuid: string,
              relationGuid: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryGuid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="categoryGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetRelatedCategories and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetRelatedCategories("<categoryGuid>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<key>")[0].ToString());
]]></code>
This sample shows how to call GetRelatedCategories with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetRelatedCategories("<categoryGuid>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("relationGuid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetRelatedCategoriesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetRelatedCategoriesAsync (string categoryGuid, int? limit = default, int? offset = default, string sort = default, Azure.RequestContext context = default);" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetRelatedCategoriesAsync(string categoryGuid, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.GetRelatedCategoriesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRelatedCategoriesAsync (categoryGuid As String, Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional sort As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="F#" Value="abstract member GetRelatedCategoriesAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetRelatedCategoriesAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewGlossaries.GetRelatedCategoriesAsync (categoryGuid, limit, offset, sort, context)" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetRelatedCategoriesAsync (string categoryGuid, int? limit, int? offset, string sort, Azure.RequestContext context);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRelatedCategoriesAsync (categoryGuid As String, limit As Nullable(Of Integer), offset As Nullable(Of Integer), sort As String, context As RequestContext) As Task(Of Response)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryGuid" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="categoryGuid"> The globally unique identifier of the category. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get all related categories (parent and children). Limit, offset, and sort parameters are currently not being enabled and won't work even they are passed.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              categoryGuid: string,
              description: string,
              displayText: string,
              parentCategoryGuid: string,
              relationGuid: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryGuid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="categoryGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetRelatedCategoriesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetRelatedCategoriesAsync("<categoryGuid>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<key>")[0].ToString());
]]></code>
This sample shows how to call GetRelatedCategoriesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetRelatedCategoriesAsync("<categoryGuid>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("relationGuid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetRelatedTerms">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetRelatedTerms (string termGuid, int? limit = default, int? offset = default, string sort = default, Azure.RequestContext context = default);" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetRelatedTerms(string termGuid, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.GetRelatedTerms(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRelatedTerms (termGuid As String, Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional sort As String = Nothing, Optional context As RequestContext = Nothing) As Response" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="F#" Value="abstract member GetRelatedTerms : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetRelatedTerms : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewGlossaries.GetRelatedTerms (termGuid, limit, offset, sort, context)" />
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetRelatedTerms (string termGuid, int? limit, int? offset, string sort, Azure.RequestContext context);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRelatedTerms (termGuid As String, limit As Nullable(Of Integer), offset As Nullable(Of Integer), sort As String, context As RequestContext) As Response" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termGuid" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="termGuid"> The globally unique identifier for glossary term. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get all related terms for a specific term by its GUID. Limit, offset, and sort parameters are currently not being enabled and won't work even they are passed.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              description: string,
              displayText: string,
              expression: string,
              relationGuid: string,
              source: string,
              status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
              steward: string,
              termGuid: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termGuid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetRelatedTerms and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetRelatedTerms("<termGuid>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<key>")[0].ToString());
]]></code>
This sample shows how to call GetRelatedTerms with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetRelatedTerms("<termGuid>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("termGuid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetRelatedTermsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetRelatedTermsAsync (string termGuid, int? limit = default, int? offset = default, string sort = default, Azure.RequestContext context = default);" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetRelatedTermsAsync(string termGuid, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.GetRelatedTermsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRelatedTermsAsync (termGuid As String, Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional sort As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="F#" Value="abstract member GetRelatedTermsAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetRelatedTermsAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewGlossaries.GetRelatedTermsAsync (termGuid, limit, offset, sort, context)" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetRelatedTermsAsync (string termGuid, int? limit, int? offset, string sort, Azure.RequestContext context);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRelatedTermsAsync (termGuid As String, limit As Nullable(Of Integer), offset As Nullable(Of Integer), sort As String, context As RequestContext) As Task(Of Response)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termGuid" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="termGuid"> The globally unique identifier for glossary term. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get all related terms for a specific term by its GUID. Limit, offset, and sort parameters are currently not being enabled and won't work even they are passed.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              description: string,
              displayText: string,
              expression: string,
              relationGuid: string,
              source: string,
              status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
              steward: string,
              termGuid: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termGuid" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetRelatedTermsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetRelatedTermsAsync("<termGuid>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<key>")[0].ToString());
]]></code>
This sample shows how to call GetRelatedTermsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetRelatedTermsAsync("<termGuid>", 1234, 1234, "<sort>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("<key>")[0].GetProperty("termGuid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTermsByGlossaryName">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetTermsByGlossaryName (string glossaryName, int? limit = default, int? offset = default, bool? includeTermHierarchy = default, Azure.RequestContext context = default);" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetTermsByGlossaryName(string glossaryName, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.GetTermsByGlossaryName(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTermsByGlossaryName (glossaryName As String, Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Response" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="F#" Value="abstract member GetTermsByGlossaryName : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetTermsByGlossaryName : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="purviewGlossaries.GetTermsByGlossaryName (glossaryName, limit, offset, includeTermHierarchy, context)" />
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetTermsByGlossaryName (string glossaryName, int? limit, int? offset, bool? includeTermHierarchy, Azure.RequestContext context);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTermsByGlossaryName (glossaryName As String, limit As Nullable(Of Integer), offset As Nullable(Of Integer), includeTermHierarchy As Nullable(Of Boolean), context As RequestContext) As Response" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryName" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryName"> The name of the glossary. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get terms by glossary name.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              abbreviation: string,
              templateName: [AnyObject],
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              antonyms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              createTime: number,
              createdBy: string,
              updateTime: number,
              updatedBy: string,
              status: "Draft" | "Approved" | "Alert" | "Expired",
              resources: [
                {
                  displayName: string,
                  url: string
                }
              ],
              contacts: Dictionary&lt;string, ContactBasic[]&gt;,
              attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
              assignedEntities: [
                {
                  guid: string,
                  typeName: string,
                  uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
                  displayText: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  relationshipType: string,
                  relationshipAttributes: {
                    attributes: Dictionary&lt;string, AnyObject&gt;,
                    typeName: string,
                    lastModifiedTS: string
                  },
                  relationshipGuid: string,
                  relationshipStatus: "ACTIVE" | "DELETED"
                }
              ],
              categories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  relationGuid: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER"
                }
              ],
              classifies: [AtlasRelatedTermHeader],
              examples: [string],
              isA: [AtlasRelatedTermHeader],
              preferredTerms: [AtlasRelatedTermHeader],
              preferredToTerms: [AtlasRelatedTermHeader],
              replacedBy: [AtlasRelatedTermHeader],
              replacementTerms: [AtlasRelatedTermHeader],
              seeAlso: [AtlasRelatedTermHeader],
              synonyms: [AtlasRelatedTermHeader],
              translatedTerms: [AtlasRelatedTermHeader],
              translationTerms: [AtlasRelatedTermHeader],
              usage: string,
              validValues: [AtlasRelatedTermHeader],
              validValuesFor: [AtlasRelatedTermHeader]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetTermsByGlossaryName and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetTermsByGlossaryName("<glossaryName>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetTermsByGlossaryName with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = client.GetTermsByGlossaryName("<glossaryName>", 1234, 1234, true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("createTime").ToString());
Console.WriteLine(result[0].GetProperty("createdBy").ToString());
Console.WriteLine(result[0].GetProperty("updateTime").ToString());
Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("usage").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTermsByGlossaryNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetTermsByGlossaryNameAsync (string glossaryName, int? limit = default, int? offset = default, bool? includeTermHierarchy = default, Azure.RequestContext context = default);" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetTermsByGlossaryNameAsync(string glossaryName, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.GetTermsByGlossaryNameAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTermsByGlossaryNameAsync (glossaryName As String, Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" FrameworkAlternate="azure-dotnet-legacy" />
      <MemberSignature Language="F#" Value="abstract member GetTermsByGlossaryNameAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetTermsByGlossaryNameAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewGlossaries.GetTermsByGlossaryNameAsync (glossaryName, limit, offset, includeTermHierarchy, context)" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetTermsByGlossaryNameAsync (string glossaryName, int? limit, int? offset, bool? includeTermHierarchy, Azure.RequestContext context);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTermsByGlossaryNameAsync (glossaryName As String, limit As Nullable(Of Integer), offset As Nullable(Of Integer), includeTermHierarchy As Nullable(Of Boolean), context As RequestContext) As Task(Of Response)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryName" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryName"> The name of the glossary. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get terms by glossary name.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              abbreviation: string,
              templateName: [AnyObject],
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              antonyms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              createTime: number,
              createdBy: string,
              updateTime: number,
              updatedBy: string,
              status: "Draft" | "Approved" | "Alert" | "Expired",
              resources: [
                {
                  displayName: string,
                  url: string
                }
              ],
              contacts: Dictionary&lt;string, ContactBasic[]&gt;,
              attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
              assignedEntities: [
                {
                  guid: string,
                  typeName: string,
                  uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
                  displayText: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  relationshipType: string,
                  relationshipAttributes: {
                    attributes: Dictionary&lt;string, AnyObject&gt;,
                    typeName: string,
                    lastModifiedTS: string
                  },
                  relationshipGuid: string,
                  relationshipStatus: "ACTIVE" | "DELETED"
                }
              ],
              categories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  relationGuid: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER"
                }
              ],
              classifies: [AtlasRelatedTermHeader],
              examples: [string],
              isA: [AtlasRelatedTermHeader],
              preferredTerms: [AtlasRelatedTermHeader],
              preferredToTerms: [AtlasRelatedTermHeader],
              replacedBy: [AtlasRelatedTermHeader],
              replacementTerms: [AtlasRelatedTermHeader],
              seeAlso: [AtlasRelatedTermHeader],
              synonyms: [AtlasRelatedTermHeader],
              translatedTerms: [AtlasRelatedTermHeader],
              translationTerms: [AtlasRelatedTermHeader],
              usage: string,
              validValues: [AtlasRelatedTermHeader],
              validValuesFor: [AtlasRelatedTermHeader]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetTermsByGlossaryNameAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetTermsByGlossaryNameAsync("<glossaryName>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetTermsByGlossaryNameAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

Response response = await client.GetTermsByGlossaryNameAsync("<glossaryName>", 1234, 1234, true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("abbreviation").ToString());
Console.WriteLine(result[0].GetProperty("templateName")[0].ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result[0].GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("createTime").ToString());
Console.WriteLine(result[0].GetProperty("createdBy").ToString());
Console.WriteLine(result[0].GetProperty("updateTime").ToString());
Console.WriteLine(result[0].GetProperty("updatedBy").ToString());
Console.WriteLine(result[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result[0].GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result[0].GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result[0].GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("examples")[0].ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("usage").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result[0].GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result[0].GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("longDescription").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result[0].GetProperty("shortDescription").ToString());
Console.WriteLine(result[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result[0].GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ImportGlossaryTermsViaCsv">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; ImportGlossaryTermsViaCsv (Azure.WaitUntil waitUntil, string glossaryGuid, Azure.Core.RequestContent content, bool? includeTermHierarchy = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; ImportGlossaryTermsViaCsv(valuetype Azure.WaitUntil waitUntil, string glossaryGuid, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.ImportGlossaryTermsViaCsv(Azure.WaitUntil,System.String,Azure.Core.RequestContent,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportGlossaryTermsViaCsv (waitUntil As WaitUntil, glossaryGuid As String, content As RequestContent, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member ImportGlossaryTermsViaCsv : Azure.WaitUntil * string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.ImportGlossaryTermsViaCsv : Azure.WaitUntil * string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="purviewGlossaries.ImportGlossaryTermsViaCsv (waitUntil, glossaryGuid, content, includeTermHierarchy, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" Index="0" FrameworkAlternate="azure-dotnet-legacy" />
        <Parameter Name="glossaryGuid" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet-legacy" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" Index="2" FrameworkAlternate="azure-dotnet-legacy" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="azure-dotnet-legacy" />
        <Parameter Name="context" Type="Azure.RequestContext" Index="4" FrameworkAlternate="azure-dotnet-legacy" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Import Glossary Terms from local csv file. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              id: string,
              status: "NotStarted" | "Succeeded" | "Failed" | "Running",
              createTime: string,
              lastUpdateTime: string,
              properties: {
                importedTerms: string,
                totalTermsDetected: string
              },
              error: {
                errorCode: number,
                errorMessage: string
              }
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryGuid" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryGuid" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="ImportGlossaryTermsViaCsv">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; ImportGlossaryTermsViaCsv (Azure.WaitUntil waitUntil, string glossaryGuid, Azure.Core.RequestContent content, string contentType, bool? includeTermHierarchy = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; ImportGlossaryTermsViaCsv(valuetype Azure.WaitUntil waitUntil, string glossaryGuid, class Azure.Core.RequestContent content, string contentType, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.ImportGlossaryTermsViaCsv(Azure.WaitUntil,System.String,Azure.Core.RequestContent,System.String,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportGlossaryTermsViaCsv (waitUntil As WaitUntil, glossaryGuid As String, content As RequestContent, contentType As String, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member ImportGlossaryTermsViaCsv : Azure.WaitUntil * string * Azure.Core.RequestContent * string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.ImportGlossaryTermsViaCsv : Azure.WaitUntil * string * Azure.Core.RequestContent * string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="purviewGlossaries.ImportGlossaryTermsViaCsv (waitUntil, glossaryGuid, content, contentType, includeTermHierarchy, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="glossaryGuid" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" Index="2" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="contentType" Type="System.String" Index="3" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" Index="4" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="context" Type="Azure.RequestContext" Index="5" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="contentType"> Body Parameter content-type. Allowed values: "multipart/form-data". </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Import Glossary Terms from local csv file
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryGuid" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call ImportGlossaryTermsViaCsv and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
Operation<BinaryData> operation = client.ImportGlossaryTermsViaCsv(WaitUntil.Completed, "<glossaryGuid>", content, "multipart/form-data");
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call ImportGlossaryTermsViaCsv with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
Operation<BinaryData> operation = client.ImportGlossaryTermsViaCsv(WaitUntil.Completed, "<glossaryGuid>", content, "multipart/form-data", includeTermHierarchy: true);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("importedTerms").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("totalTermsDetected").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("errorMessage").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ImportGlossaryTermsViaCsvAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; ImportGlossaryTermsViaCsvAsync (Azure.WaitUntil waitUntil, string glossaryGuid, Azure.Core.RequestContent content, bool? includeTermHierarchy = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; ImportGlossaryTermsViaCsvAsync(valuetype Azure.WaitUntil waitUntil, string glossaryGuid, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.ImportGlossaryTermsViaCsvAsync(Azure.WaitUntil,System.String,Azure.Core.RequestContent,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportGlossaryTermsViaCsvAsync (waitUntil As WaitUntil, glossaryGuid As String, content As RequestContent, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member ImportGlossaryTermsViaCsvAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.ImportGlossaryTermsViaCsvAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="purviewGlossaries.ImportGlossaryTermsViaCsvAsync (waitUntil, glossaryGuid, content, includeTermHierarchy, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" Index="0" FrameworkAlternate="azure-dotnet-legacy" />
        <Parameter Name="glossaryGuid" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet-legacy" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" Index="2" FrameworkAlternate="azure-dotnet-legacy" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="azure-dotnet-legacy" />
        <Parameter Name="context" Type="Azure.RequestContext" Index="4" FrameworkAlternate="azure-dotnet-legacy" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Import Glossary Terms from local csv file. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              id: string,
              status: "NotStarted" | "Succeeded" | "Failed" | "Running",
              createTime: string,
              lastUpdateTime: string,
              properties: {
                importedTerms: string,
                totalTermsDetected: string
              },
              error: {
                errorCode: number,
                errorMessage: string
              }
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryGuid" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryGuid" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="ImportGlossaryTermsViaCsvAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; ImportGlossaryTermsViaCsvAsync (Azure.WaitUntil waitUntil, string glossaryGuid, Azure.Core.RequestContent content, string contentType, bool? includeTermHierarchy = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; ImportGlossaryTermsViaCsvAsync(valuetype Azure.WaitUntil waitUntil, string glossaryGuid, class Azure.Core.RequestContent content, string contentType, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.ImportGlossaryTermsViaCsvAsync(Azure.WaitUntil,System.String,Azure.Core.RequestContent,System.String,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportGlossaryTermsViaCsvAsync (waitUntil As WaitUntil, glossaryGuid As String, content As RequestContent, contentType As String, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member ImportGlossaryTermsViaCsvAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.ImportGlossaryTermsViaCsvAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="purviewGlossaries.ImportGlossaryTermsViaCsvAsync (waitUntil, glossaryGuid, content, contentType, includeTermHierarchy, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="glossaryGuid" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" Index="2" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="contentType" Type="System.String" Index="3" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" Index="4" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="context" Type="Azure.RequestContext" Index="5" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="contentType"> Body Parameter content-type. Allowed values: "multipart/form-data". </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Import Glossary Terms from local csv file
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryGuid" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call ImportGlossaryTermsViaCsvAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
Operation<BinaryData> operation = await client.ImportGlossaryTermsViaCsvAsync(WaitUntil.Completed, "<glossaryGuid>", content, "multipart/form-data");
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call ImportGlossaryTermsViaCsvAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
Operation<BinaryData> operation = await client.ImportGlossaryTermsViaCsvAsync(WaitUntil.Completed, "<glossaryGuid>", content, "multipart/form-data", includeTermHierarchy: true);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("importedTerms").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("totalTermsDetected").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("errorMessage").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ImportGlossaryTermsViaCsvByGlossaryName">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; ImportGlossaryTermsViaCsvByGlossaryName (Azure.WaitUntil waitUntil, string glossaryName, Azure.Core.RequestContent content, bool? includeTermHierarchy = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; ImportGlossaryTermsViaCsvByGlossaryName(valuetype Azure.WaitUntil waitUntil, string glossaryName, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.ImportGlossaryTermsViaCsvByGlossaryName(Azure.WaitUntil,System.String,Azure.Core.RequestContent,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportGlossaryTermsViaCsvByGlossaryName (waitUntil As WaitUntil, glossaryName As String, content As RequestContent, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member ImportGlossaryTermsViaCsvByGlossaryName : Azure.WaitUntil * string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.ImportGlossaryTermsViaCsvByGlossaryName : Azure.WaitUntil * string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="purviewGlossaries.ImportGlossaryTermsViaCsvByGlossaryName (waitUntil, glossaryName, content, includeTermHierarchy, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" Index="0" FrameworkAlternate="azure-dotnet-legacy" />
        <Parameter Name="glossaryName" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet-legacy" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" Index="2" FrameworkAlternate="azure-dotnet-legacy" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="azure-dotnet-legacy" />
        <Parameter Name="context" Type="Azure.RequestContext" Index="4" FrameworkAlternate="azure-dotnet-legacy" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="glossaryName"> The name of the glossary. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Import Glossary Terms from local csv file by glossaryName. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              id: string,
              status: "NotStarted" | "Succeeded" | "Failed" | "Running",
              createTime: string,
              lastUpdateTime: string,
              properties: {
                importedTerms: string,
                totalTermsDetected: string
              },
              error: {
                errorCode: number,
                errorMessage: string
              }
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="ImportGlossaryTermsViaCsvByGlossaryName">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; ImportGlossaryTermsViaCsvByGlossaryName (Azure.WaitUntil waitUntil, string glossaryName, Azure.Core.RequestContent content, string contentType, bool? includeTermHierarchy = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; ImportGlossaryTermsViaCsvByGlossaryName(valuetype Azure.WaitUntil waitUntil, string glossaryName, class Azure.Core.RequestContent content, string contentType, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.ImportGlossaryTermsViaCsvByGlossaryName(Azure.WaitUntil,System.String,Azure.Core.RequestContent,System.String,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportGlossaryTermsViaCsvByGlossaryName (waitUntil As WaitUntil, glossaryName As String, content As RequestContent, contentType As String, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member ImportGlossaryTermsViaCsvByGlossaryName : Azure.WaitUntil * string * Azure.Core.RequestContent * string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.ImportGlossaryTermsViaCsvByGlossaryName : Azure.WaitUntil * string * Azure.Core.RequestContent * string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="purviewGlossaries.ImportGlossaryTermsViaCsvByGlossaryName (waitUntil, glossaryName, content, contentType, includeTermHierarchy, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="glossaryName" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" Index="2" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="contentType" Type="System.String" Index="3" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" Index="4" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="context" Type="Azure.RequestContext" Index="5" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="glossaryName"> The name of the glossary. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="contentType"> Body Parameter content-type. Allowed values: "multipart/form-data". </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Import Glossary Terms from local csv file by glossaryName
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call ImportGlossaryTermsViaCsvByGlossaryName and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
Operation<BinaryData> operation = client.ImportGlossaryTermsViaCsvByGlossaryName(WaitUntil.Completed, "<glossaryName>", content, "multipart/form-data");
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call ImportGlossaryTermsViaCsvByGlossaryName with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
Operation<BinaryData> operation = client.ImportGlossaryTermsViaCsvByGlossaryName(WaitUntil.Completed, "<glossaryName>", content, "multipart/form-data", includeTermHierarchy: true);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("importedTerms").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("totalTermsDetected").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("errorMessage").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ImportGlossaryTermsViaCsvByGlossaryNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; ImportGlossaryTermsViaCsvByGlossaryNameAsync (Azure.WaitUntil waitUntil, string glossaryName, Azure.Core.RequestContent content, bool? includeTermHierarchy = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; ImportGlossaryTermsViaCsvByGlossaryNameAsync(valuetype Azure.WaitUntil waitUntil, string glossaryName, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.ImportGlossaryTermsViaCsvByGlossaryNameAsync(Azure.WaitUntil,System.String,Azure.Core.RequestContent,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportGlossaryTermsViaCsvByGlossaryNameAsync (waitUntil As WaitUntil, glossaryName As String, content As RequestContent, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member ImportGlossaryTermsViaCsvByGlossaryNameAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.ImportGlossaryTermsViaCsvByGlossaryNameAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="purviewGlossaries.ImportGlossaryTermsViaCsvByGlossaryNameAsync (waitUntil, glossaryName, content, includeTermHierarchy, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" Index="0" FrameworkAlternate="azure-dotnet-legacy" />
        <Parameter Name="glossaryName" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet-legacy" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" Index="2" FrameworkAlternate="azure-dotnet-legacy" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="azure-dotnet-legacy" />
        <Parameter Name="context" Type="Azure.RequestContext" Index="4" FrameworkAlternate="azure-dotnet-legacy" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="glossaryName"> The name of the glossary. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Import Glossary Terms from local csv file by glossaryName. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              id: string,
              status: "NotStarted" | "Succeeded" | "Failed" | "Running",
              createTime: string,
              lastUpdateTime: string,
              properties: {
                importedTerms: string,
                totalTermsDetected: string
              },
              error: {
                errorCode: number,
                errorMessage: string
              }
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="ImportGlossaryTermsViaCsvByGlossaryNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; ImportGlossaryTermsViaCsvByGlossaryNameAsync (Azure.WaitUntil waitUntil, string glossaryName, Azure.Core.RequestContent content, string contentType, bool? includeTermHierarchy = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; ImportGlossaryTermsViaCsvByGlossaryNameAsync(valuetype Azure.WaitUntil waitUntil, string glossaryName, class Azure.Core.RequestContent content, string contentType, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.ImportGlossaryTermsViaCsvByGlossaryNameAsync(Azure.WaitUntil,System.String,Azure.Core.RequestContent,System.String,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportGlossaryTermsViaCsvByGlossaryNameAsync (waitUntil As WaitUntil, glossaryName As String, content As RequestContent, contentType As String, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member ImportGlossaryTermsViaCsvByGlossaryNameAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.ImportGlossaryTermsViaCsvByGlossaryNameAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="purviewGlossaries.ImportGlossaryTermsViaCsvByGlossaryNameAsync (waitUntil, glossaryName, content, contentType, includeTermHierarchy, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="glossaryName" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" Index="2" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="contentType" Type="System.String" Index="3" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" Index="4" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="context" Type="Azure.RequestContext" Index="5" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="glossaryName"> The name of the glossary. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="contentType"> Body Parameter content-type. Allowed values: "multipart/form-data". </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Import Glossary Terms from local csv file by glossaryName
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call ImportGlossaryTermsViaCsvByGlossaryNameAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
Operation<BinaryData> operation = await client.ImportGlossaryTermsViaCsvByGlossaryNameAsync(WaitUntil.Completed, "<glossaryName>", content, "multipart/form-data");
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call ImportGlossaryTermsViaCsvByGlossaryNameAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
Operation<BinaryData> operation = await client.ImportGlossaryTermsViaCsvByGlossaryNameAsync(WaitUntil.Completed, "<glossaryName>", content, "multipart/form-data", includeTermHierarchy: true);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("importedTerms").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("totalTermsDetected").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("errorMessage").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="PartialUpdateGlossary">
      <MemberSignature Language="C#" Value="public virtual Azure.Response PartialUpdateGlossary (string glossaryGuid, Azure.Core.RequestContent content, bool? includeTermHierarchy = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response PartialUpdateGlossary(string glossaryGuid, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.PartialUpdateGlossary(System.String,Azure.Core.RequestContent,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PartialUpdateGlossary (glossaryGuid As String, content As RequestContent, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member PartialUpdateGlossary : string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.PartialUpdateGlossary : string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="purviewGlossaries.PartialUpdateGlossary (glossaryGuid, content, includeTermHierarchy, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryGuid" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Update the glossary partially. Some properties such as qualifiedName are not allowed to be updated.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              categories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  parentCategoryGuid: string,
                  relationGuid: string
                }
              ],
              language: string,
              terms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              usage: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryGuid" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call PartialUpdateGlossary and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    key = "<partialUpdates>",
});
Response response = client.PartialUpdateGlossary("<glossaryGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PartialUpdateGlossary with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    key = "<partialUpdates>",
});
Response response = client.PartialUpdateGlossary("<glossaryGuid>", content, includeTermHierarchy: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="PartialUpdateGlossaryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; PartialUpdateGlossaryAsync (string glossaryGuid, Azure.Core.RequestContent content, bool? includeTermHierarchy = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; PartialUpdateGlossaryAsync(string glossaryGuid, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.PartialUpdateGlossaryAsync(System.String,Azure.Core.RequestContent,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PartialUpdateGlossaryAsync (glossaryGuid As String, content As RequestContent, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member PartialUpdateGlossaryAsync : string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.PartialUpdateGlossaryAsync : string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewGlossaries.PartialUpdateGlossaryAsync (glossaryGuid, content, includeTermHierarchy, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryGuid" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Update the glossary partially. Some properties such as qualifiedName are not allowed to be updated.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              categories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  parentCategoryGuid: string,
                  relationGuid: string
                }
              ],
              language: string,
              terms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              usage: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryGuid" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call PartialUpdateGlossaryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    key = "<partialUpdates>",
});
Response response = await client.PartialUpdateGlossaryAsync("<glossaryGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PartialUpdateGlossaryAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    key = "<partialUpdates>",
});
Response response = await client.PartialUpdateGlossaryAsync("<glossaryGuid>", content, includeTermHierarchy: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="PartialUpdateGlossaryCategory">
      <MemberSignature Language="C#" Value="public virtual Azure.Response PartialUpdateGlossaryCategory (string categoryGuid, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response PartialUpdateGlossaryCategory(string categoryGuid, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.PartialUpdateGlossaryCategory(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PartialUpdateGlossaryCategory (categoryGuid As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member PartialUpdateGlossaryCategory : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.PartialUpdateGlossaryCategory : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="purviewGlossaries.PartialUpdateGlossaryCategory (categoryGuid, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryGuid" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="categoryGuid"> The globally unique identifier of the category. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Update the glossary category partially.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              childrenCategories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  parentCategoryGuid: string,
                  relationGuid: string
                }
              ],
              parentCategory: AtlasRelatedCategoryHeader,
              terms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryGuid" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="categoryGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call PartialUpdateGlossaryCategory and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    key = "<partialUpdates>",
});
Response response = client.PartialUpdateGlossaryCategory("<categoryGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PartialUpdateGlossaryCategory with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    key = "<partialUpdates>",
});
Response response = client.PartialUpdateGlossaryCategory("<categoryGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="PartialUpdateGlossaryCategoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; PartialUpdateGlossaryCategoryAsync (string categoryGuid, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; PartialUpdateGlossaryCategoryAsync(string categoryGuid, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.PartialUpdateGlossaryCategoryAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PartialUpdateGlossaryCategoryAsync (categoryGuid As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member PartialUpdateGlossaryCategoryAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.PartialUpdateGlossaryCategoryAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewGlossaries.PartialUpdateGlossaryCategoryAsync (categoryGuid, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryGuid" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="categoryGuid"> The globally unique identifier of the category. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Update the glossary category partially.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              childrenCategories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  parentCategoryGuid: string,
                  relationGuid: string
                }
              ],
              parentCategory: AtlasRelatedCategoryHeader,
              terms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryGuid" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="categoryGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call PartialUpdateGlossaryCategoryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    key = "<partialUpdates>",
});
Response response = await client.PartialUpdateGlossaryCategoryAsync("<categoryGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PartialUpdateGlossaryCategoryAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    key = "<partialUpdates>",
});
Response response = await client.PartialUpdateGlossaryCategoryAsync("<categoryGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="PartialUpdateGlossaryTerm">
      <MemberSignature Language="C#" Value="public virtual Azure.Response PartialUpdateGlossaryTerm (string termGuid, Azure.Core.RequestContent content, bool? includeTermHierarchy = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response PartialUpdateGlossaryTerm(string termGuid, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.PartialUpdateGlossaryTerm(System.String,Azure.Core.RequestContent,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PartialUpdateGlossaryTerm (termGuid As String, content As RequestContent, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member PartialUpdateGlossaryTerm : string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.PartialUpdateGlossaryTerm : string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="purviewGlossaries.PartialUpdateGlossaryTerm (termGuid, content, includeTermHierarchy, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termGuid" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="termGuid"> The globally unique identifier for glossary term. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Update the glossary term partially.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              abbreviation: string,
              templateName: [AnyObject],
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              antonyms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              createTime: number,
              createdBy: string,
              updateTime: number,
              updatedBy: string,
              status: "Draft" | "Approved" | "Alert" | "Expired",
              resources: [
                {
                  displayName: string,
                  url: string
                }
              ],
              contacts: Dictionary&lt;string, ContactBasic[]&gt;,
              attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
              assignedEntities: [
                {
                  guid: string,
                  typeName: string,
                  uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
                  displayText: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  relationshipType: string,
                  relationshipAttributes: {
                    attributes: Dictionary&lt;string, AnyObject&gt;,
                    typeName: string,
                    lastModifiedTS: string
                  },
                  relationshipGuid: string,
                  relationshipStatus: "ACTIVE" | "DELETED"
                }
              ],
              categories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  relationGuid: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER"
                }
              ],
              classifies: [AtlasRelatedTermHeader],
              examples: [string],
              isA: [AtlasRelatedTermHeader],
              preferredTerms: [AtlasRelatedTermHeader],
              preferredToTerms: [AtlasRelatedTermHeader],
              replacedBy: [AtlasRelatedTermHeader],
              replacementTerms: [AtlasRelatedTermHeader],
              seeAlso: [AtlasRelatedTermHeader],
              synonyms: [AtlasRelatedTermHeader],
              translatedTerms: [AtlasRelatedTermHeader],
              translationTerms: [AtlasRelatedTermHeader],
              usage: string,
              validValues: [AtlasRelatedTermHeader],
              validValuesFor: [AtlasRelatedTermHeader]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termGuid" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call PartialUpdateGlossaryTerm and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    key = "<partialUpdates>",
});
Response response = client.PartialUpdateGlossaryTerm("<termGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PartialUpdateGlossaryTerm with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    key = "<partialUpdates>",
});
Response response = client.PartialUpdateGlossaryTerm("<termGuid>", content, includeTermHierarchy: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="PartialUpdateGlossaryTermAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; PartialUpdateGlossaryTermAsync (string termGuid, Azure.Core.RequestContent content, bool? includeTermHierarchy = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; PartialUpdateGlossaryTermAsync(string termGuid, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.PartialUpdateGlossaryTermAsync(System.String,Azure.Core.RequestContent,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PartialUpdateGlossaryTermAsync (termGuid As String, content As RequestContent, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member PartialUpdateGlossaryTermAsync : string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.PartialUpdateGlossaryTermAsync : string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewGlossaries.PartialUpdateGlossaryTermAsync (termGuid, content, includeTermHierarchy, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termGuid" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="termGuid"> The globally unique identifier for glossary term. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Update the glossary term partially.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              abbreviation: string,
              templateName: [AnyObject],
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              antonyms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              createTime: number,
              createdBy: string,
              updateTime: number,
              updatedBy: string,
              status: "Draft" | "Approved" | "Alert" | "Expired",
              resources: [
                {
                  displayName: string,
                  url: string
                }
              ],
              contacts: Dictionary&lt;string, ContactBasic[]&gt;,
              attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
              assignedEntities: [
                {
                  guid: string,
                  typeName: string,
                  uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
                  displayText: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  relationshipType: string,
                  relationshipAttributes: {
                    attributes: Dictionary&lt;string, AnyObject&gt;,
                    typeName: string,
                    lastModifiedTS: string
                  },
                  relationshipGuid: string,
                  relationshipStatus: "ACTIVE" | "DELETED"
                }
              ],
              categories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  relationGuid: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER"
                }
              ],
              classifies: [AtlasRelatedTermHeader],
              examples: [string],
              isA: [AtlasRelatedTermHeader],
              preferredTerms: [AtlasRelatedTermHeader],
              preferredToTerms: [AtlasRelatedTermHeader],
              replacedBy: [AtlasRelatedTermHeader],
              replacementTerms: [AtlasRelatedTermHeader],
              seeAlso: [AtlasRelatedTermHeader],
              synonyms: [AtlasRelatedTermHeader],
              translatedTerms: [AtlasRelatedTermHeader],
              translationTerms: [AtlasRelatedTermHeader],
              usage: string,
              validValues: [AtlasRelatedTermHeader],
              validValuesFor: [AtlasRelatedTermHeader]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termGuid" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call PartialUpdateGlossaryTermAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    key = "<partialUpdates>",
});
Response response = await client.PartialUpdateGlossaryTermAsync("<termGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call PartialUpdateGlossaryTermAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    key = "<partialUpdates>",
});
Response response = await client.PartialUpdateGlossaryTermAsync("<termGuid>", content, includeTermHierarchy: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Analytics.Purview.Catalog.PurviewGlossaries.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Analytics.Purview.Catalog.PurviewGlossaries.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTermAssignmentFromEntities">
      <MemberSignature Language="C#" Value="public virtual Azure.Response RemoveTermAssignmentFromEntities (string termGuid, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response RemoveTermAssignmentFromEntities(string termGuid, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.RemoveTermAssignmentFromEntities(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveTermAssignmentFromEntities (termGuid As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member RemoveTermAssignmentFromEntities : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.RemoveTermAssignmentFromEntities : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="purviewGlossaries.RemoveTermAssignmentFromEntities (termGuid, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termGuid" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="termGuid"> The globally unique identifier for glossary term. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delete the term assignment for the given list of related objects.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              guid: string,
              typeName: string,
              uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
              displayText: string,
              entityStatus: "ACTIVE" | "DELETED",
              relationshipType: string,
              relationshipAttributes: {
                attributes: Dictionary&lt;string, AnyObject&gt;,
                typeName: string,
                lastModifiedTS: string
              },
              relationshipGuid: string,
              relationshipStatus: "ACTIVE" | "DELETED"
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termGuid" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call RemoveTermAssignmentFromEntities.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new object()
});
Response response = client.RemoveTermAssignmentFromEntities("<termGuid>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call RemoveTermAssignmentFromEntities with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        displayText = "<displayText>",
        entityStatus = "ACTIVE",
        relationshipType = "<relationshipType>",
        relationshipAttributes = new
        {
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        },
        relationshipGuid = "<relationshipGuid>",
        relationshipStatus = "ACTIVE",
        guid = "<guid>",
        typeName = "<typeName>",
        uniqueAttributes = new
        {
            key = new object(),
        },
    }
});
Response response = client.RemoveTermAssignmentFromEntities("<termGuid>", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="RemoveTermAssignmentFromEntitiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; RemoveTermAssignmentFromEntitiesAsync (string termGuid, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; RemoveTermAssignmentFromEntitiesAsync(string termGuid, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.RemoveTermAssignmentFromEntitiesAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveTermAssignmentFromEntitiesAsync (termGuid As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member RemoveTermAssignmentFromEntitiesAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.RemoveTermAssignmentFromEntitiesAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewGlossaries.RemoveTermAssignmentFromEntitiesAsync (termGuid, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termGuid" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="termGuid"> The globally unique identifier for glossary term. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delete the term assignment for the given list of related objects.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              guid: string,
              typeName: string,
              uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
              displayText: string,
              entityStatus: "ACTIVE" | "DELETED",
              relationshipType: string,
              relationshipAttributes: {
                attributes: Dictionary&lt;string, AnyObject&gt;,
                typeName: string,
                lastModifiedTS: string
              },
              relationshipGuid: string,
              relationshipStatus: "ACTIVE" | "DELETED"
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termGuid" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call RemoveTermAssignmentFromEntitiesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new object()
});
Response response = await client.RemoveTermAssignmentFromEntitiesAsync("<termGuid>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call RemoveTermAssignmentFromEntitiesAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        displayText = "<displayText>",
        entityStatus = "ACTIVE",
        relationshipType = "<relationshipType>",
        relationshipAttributes = new
        {
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        },
        relationshipGuid = "<relationshipGuid>",
        relationshipStatus = "ACTIVE",
        guid = "<guid>",
        typeName = "<typeName>",
        uniqueAttributes = new
        {
            key = new object(),
        },
    }
});
Response response = await client.RemoveTermAssignmentFromEntitiesAsync("<termGuid>", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdateGlossary">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateGlossary (string glossaryGuid, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateGlossary(string glossaryGuid, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.UpdateGlossary(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateGlossary (glossaryGuid As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateGlossary : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.UpdateGlossary : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="purviewGlossaries.UpdateGlossary (glossaryGuid, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryGuid" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Update the given glossary.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              categories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  parentCategoryGuid: string,
                  relationGuid: string
                }
              ],
              language: string,
              terms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              usage: string
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              categories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  parentCategoryGuid: string,
                  relationGuid: string
                }
              ],
              language: string,
              terms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              usage: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryGuid" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call UpdateGlossary and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object());
Response response = client.UpdateGlossary("<glossaryGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UpdateGlossary with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    categories = new object[]
    {
        new
        {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
    language = "<language>",
    terms = new object[]
    {
        new
        {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    usage = "<usage>",
    classifications = new object[]
    {
        new
        {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new object[]
            {
                new
                {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new
            {
                key = new object(),
            },
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    guid = "<guid>",
});
Response response = client.UpdateGlossary("<glossaryGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdateGlossaryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateGlossaryAsync (string glossaryGuid, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateGlossaryAsync(string glossaryGuid, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.UpdateGlossaryAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateGlossaryAsync (glossaryGuid As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateGlossaryAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateGlossaryAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewGlossaries.UpdateGlossaryAsync (glossaryGuid, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryGuid" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryGuid"> The globally unique identifier for glossary. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Update the given glossary.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              categories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  parentCategoryGuid: string,
                  relationGuid: string
                }
              ],
              language: string,
              terms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              usage: string
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              categories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  parentCategoryGuid: string,
                  relationGuid: string
                }
              ],
              language: string,
              terms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              usage: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryGuid" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call UpdateGlossaryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object());
Response response = await client.UpdateGlossaryAsync("<glossaryGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UpdateGlossaryAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    categories = new object[]
    {
        new
        {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
    language = "<language>",
    terms = new object[]
    {
        new
        {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    usage = "<usage>",
    classifications = new object[]
    {
        new
        {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new object[]
            {
                new
                {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new
            {
                key = new object(),
            },
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    guid = "<guid>",
});
Response response = await client.UpdateGlossaryAsync("<glossaryGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("language").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdateGlossaryCategory">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateGlossaryCategory (string categoryGuid, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateGlossaryCategory(string categoryGuid, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.UpdateGlossaryCategory(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateGlossaryCategory (categoryGuid As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateGlossaryCategory : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.UpdateGlossaryCategory : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="purviewGlossaries.UpdateGlossaryCategory (categoryGuid, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryGuid" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="categoryGuid"> The globally unique identifier of the category. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Update the given glossary category by its GUID.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              childrenCategories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  parentCategoryGuid: string,
                  relationGuid: string
                }
              ],
              parentCategory: AtlasRelatedCategoryHeader,
              terms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ]
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              childrenCategories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  parentCategoryGuid: string,
                  relationGuid: string
                }
              ],
              parentCategory: AtlasRelatedCategoryHeader,
              terms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryGuid" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="categoryGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call UpdateGlossaryCategory and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object());
Response response = client.UpdateGlossaryCategory("<categoryGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UpdateGlossaryCategory with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    anchor = new
    {
        displayText = "<displayText>",
        glossaryGuid = "<glossaryGuid>",
        relationGuid = "<relationGuid>",
    },
    childrenCategories = new object[]
    {
        new
        {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
    terms = new object[]
    {
        new
        {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    classifications = new object[]
    {
        new
        {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new object[]
            {
                new
                {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new
            {
                key = new object(),
            },
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    guid = "<guid>",
});
Response response = client.UpdateGlossaryCategory("<categoryGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdateGlossaryCategoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateGlossaryCategoryAsync (string categoryGuid, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateGlossaryCategoryAsync(string categoryGuid, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.UpdateGlossaryCategoryAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateGlossaryCategoryAsync (categoryGuid As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateGlossaryCategoryAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateGlossaryCategoryAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewGlossaries.UpdateGlossaryCategoryAsync (categoryGuid, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryGuid" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="categoryGuid"> The globally unique identifier of the category. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Update the given glossary category by its GUID.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              childrenCategories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  parentCategoryGuid: string,
                  relationGuid: string
                }
              ],
              parentCategory: AtlasRelatedCategoryHeader,
              terms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ]
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              childrenCategories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  parentCategoryGuid: string,
                  relationGuid: string
                }
              ],
              parentCategory: AtlasRelatedCategoryHeader,
              terms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryGuid" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="categoryGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call UpdateGlossaryCategoryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object());
Response response = await client.UpdateGlossaryCategoryAsync("<categoryGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UpdateGlossaryCategoryAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    anchor = new
    {
        displayText = "<displayText>",
        glossaryGuid = "<glossaryGuid>",
        relationGuid = "<relationGuid>",
    },
    childrenCategories = new object[]
    {
        new
        {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            parentCategoryGuid = "<parentCategoryGuid>",
            relationGuid = "<relationGuid>",
        }
    },
    terms = new object[]
    {
        new
        {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    classifications = new object[]
    {
        new
        {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new object[]
            {
                new
                {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new
            {
                key = new object(),
            },
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    guid = "<guid>",
});
Response response = await client.UpdateGlossaryCategoryAsync("<categoryGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("childrenCategories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("parentCategoryGuid").ToString());
Console.WriteLine(result.GetProperty("parentCategory").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("terms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdateGlossaryTerm">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateGlossaryTerm (string termGuid, Azure.Core.RequestContent content, bool? includeTermHierarchy = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateGlossaryTerm(string termGuid, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.UpdateGlossaryTerm(System.String,Azure.Core.RequestContent,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateGlossaryTerm (termGuid As String, content As RequestContent, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateGlossaryTerm : string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.UpdateGlossaryTerm : string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="purviewGlossaries.UpdateGlossaryTerm (termGuid, content, includeTermHierarchy, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termGuid" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="termGuid"> The globally unique identifier for glossary term. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Update the given glossary term by its GUID.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              abbreviation: string,
              templateName: [AnyObject],
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              antonyms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              createTime: number,
              createdBy: string,
              updateTime: number,
              updatedBy: string,
              status: "Draft" | "Approved" | "Alert" | "Expired",
              resources: [
                {
                  displayName: string,
                  url: string
                }
              ],
              contacts: Dictionary&lt;string, ContactBasic[]&gt;,
              attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
              assignedEntities: [
                {
                  guid: string,
                  typeName: string,
                  uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
                  displayText: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  relationshipType: string,
                  relationshipAttributes: {
                    attributes: Dictionary&lt;string, AnyObject&gt;,
                    typeName: string,
                    lastModifiedTS: string
                  },
                  relationshipGuid: string,
                  relationshipStatus: "ACTIVE" | "DELETED"
                }
              ],
              categories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  relationGuid: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER"
                }
              ],
              classifies: [AtlasRelatedTermHeader],
              examples: [string],
              isA: [AtlasRelatedTermHeader],
              preferredTerms: [AtlasRelatedTermHeader],
              preferredToTerms: [AtlasRelatedTermHeader],
              replacedBy: [AtlasRelatedTermHeader],
              replacementTerms: [AtlasRelatedTermHeader],
              seeAlso: [AtlasRelatedTermHeader],
              synonyms: [AtlasRelatedTermHeader],
              translatedTerms: [AtlasRelatedTermHeader],
              translationTerms: [AtlasRelatedTermHeader],
              usage: string,
              validValues: [AtlasRelatedTermHeader],
              validValuesFor: [AtlasRelatedTermHeader]
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              abbreviation: string,
              templateName: [AnyObject],
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              antonyms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              createTime: number,
              createdBy: string,
              updateTime: number,
              updatedBy: string,
              status: "Draft" | "Approved" | "Alert" | "Expired",
              resources: [
                {
                  displayName: string,
                  url: string
                }
              ],
              contacts: Dictionary&lt;string, ContactBasic[]&gt;,
              attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
              assignedEntities: [
                {
                  guid: string,
                  typeName: string,
                  uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
                  displayText: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  relationshipType: string,
                  relationshipAttributes: {
                    attributes: Dictionary&lt;string, AnyObject&gt;,
                    typeName: string,
                    lastModifiedTS: string
                  },
                  relationshipGuid: string,
                  relationshipStatus: "ACTIVE" | "DELETED"
                }
              ],
              categories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  relationGuid: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER"
                }
              ],
              classifies: [AtlasRelatedTermHeader],
              examples: [string],
              isA: [AtlasRelatedTermHeader],
              preferredTerms: [AtlasRelatedTermHeader],
              preferredToTerms: [AtlasRelatedTermHeader],
              replacedBy: [AtlasRelatedTermHeader],
              replacementTerms: [AtlasRelatedTermHeader],
              seeAlso: [AtlasRelatedTermHeader],
              synonyms: [AtlasRelatedTermHeader],
              translatedTerms: [AtlasRelatedTermHeader],
              translationTerms: [AtlasRelatedTermHeader],
              usage: string,
              validValues: [AtlasRelatedTermHeader],
              validValuesFor: [AtlasRelatedTermHeader]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termGuid" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call UpdateGlossaryTerm and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object());
Response response = client.UpdateGlossaryTerm("<termGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UpdateGlossaryTerm with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    abbreviation = "<abbreviation>",
    templateName = new object[]
    {
        new object()
    },
    anchor = new
    {
        displayText = "<displayText>",
        glossaryGuid = "<glossaryGuid>",
        relationGuid = "<relationGuid>",
    },
    antonyms = new object[]
    {
        new
        {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    createTime = 123.45F,
    createdBy = "<createdBy>",
    updateTime = 123.45F,
    updatedBy = "<updatedBy>",
    status = "Draft",
    resources = new object[]
    {
        new
        {
            displayName = "<displayName>",
            url = "<url>",
        }
    },
    contacts = new
    {
        key = new object[]
        {
            new
            {
                id = "<id>",
                info = "<info>",
            }
        },
    },
    attributes = new
    {
        key = new
        {
            key = new object(),
        },
    },
    assignedEntities = new object[]
    {
        new
        {
            displayText = "<displayText>",
            entityStatus = "ACTIVE",
            relationshipType = "<relationshipType>",
            relationshipAttributes = new
            {
                attributes = new
                {
                    key = new object(),
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            },
            relationshipGuid = "<relationshipGuid>",
            relationshipStatus = "ACTIVE",
            guid = "<guid>",
            typeName = "<typeName>",
            uniqueAttributes = new
            {
                key = new object(),
            },
        }
    },
    categories = new object[]
    {
        new
        {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            relationGuid = "<relationGuid>",
            status = "DRAFT",
        }
    },
    classifies = new object[]
    {
        null
    },
    examples = new object[]
    {
        "<examples>"
    },
    isA = new object[]
    {
        null
    },
    preferredTerms = new object[]
    {
        null
    },
    preferredToTerms = new object[]
    {
        null
    },
    replacedBy = new object[]
    {
        null
    },
    replacementTerms = new object[]
    {
        null
    },
    seeAlso = new object[]
    {
        null
    },
    synonyms = new object[]
    {
        null
    },
    translatedTerms = new object[]
    {
        null
    },
    translationTerms = new object[]
    {
        null
    },
    usage = "<usage>",
    validValues = new object[]
    {
        null
    },
    validValuesFor = new object[]
    {
        null
    },
    classifications = new object[]
    {
        new
        {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new object[]
            {
                new
                {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new
            {
                key = new object(),
            },
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    guid = "<guid>",
});
Response response = client.UpdateGlossaryTerm("<termGuid>", content, includeTermHierarchy: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdateGlossaryTermAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateGlossaryTermAsync (string termGuid, Azure.Core.RequestContent content, bool? includeTermHierarchy = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateGlossaryTermAsync(string termGuid, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.UpdateGlossaryTermAsync(System.String,Azure.Core.RequestContent,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateGlossaryTermAsync (termGuid As String, content As RequestContent, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateGlossaryTermAsync : string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateGlossaryTermAsync : string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewGlossaries.UpdateGlossaryTermAsync (termGuid, content, includeTermHierarchy, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Catalog</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termGuid" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="termGuid"> The globally unique identifier for glossary term. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Update the given glossary term by its GUID.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              abbreviation: string,
              templateName: [AnyObject],
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              antonyms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              createTime: number,
              createdBy: string,
              updateTime: number,
              updatedBy: string,
              status: "Draft" | "Approved" | "Alert" | "Expired",
              resources: [
                {
                  displayName: string,
                  url: string
                }
              ],
              contacts: Dictionary&lt;string, ContactBasic[]&gt;,
              attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
              assignedEntities: [
                {
                  guid: string,
                  typeName: string,
                  uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
                  displayText: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  relationshipType: string,
                  relationshipAttributes: {
                    attributes: Dictionary&lt;string, AnyObject&gt;,
                    typeName: string,
                    lastModifiedTS: string
                  },
                  relationshipGuid: string,
                  relationshipStatus: "ACTIVE" | "DELETED"
                }
              ],
              categories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  relationGuid: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER"
                }
              ],
              classifies: [AtlasRelatedTermHeader],
              examples: [string],
              isA: [AtlasRelatedTermHeader],
              preferredTerms: [AtlasRelatedTermHeader],
              preferredToTerms: [AtlasRelatedTermHeader],
              replacedBy: [AtlasRelatedTermHeader],
              replacementTerms: [AtlasRelatedTermHeader],
              seeAlso: [AtlasRelatedTermHeader],
              synonyms: [AtlasRelatedTermHeader],
              translatedTerms: [AtlasRelatedTermHeader],
              translationTerms: [AtlasRelatedTermHeader],
              usage: string,
              validValues: [AtlasRelatedTermHeader],
              validValuesFor: [AtlasRelatedTermHeader]
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              classifications: [
                {
                  attributes: Dictionary&lt;string, AnyObject&gt;,
                  typeName: string,
                  lastModifiedTS: string,
                  entityGuid: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  removePropagationsOnEntityDelete: boolean,
                  validityPeriods: [
                    {
                      endTime: string,
                      startTime: string,
                      timeZone: string
                    }
                  ],
                  source: string,
                  sourceDetails: Dictionary&lt;string, AnyObject&gt;
                }
              ],
              longDescription: string,
              name: string,
              qualifiedName: string,
              shortDescription: string,
              lastModifiedTS: string,
              guid: string,
              abbreviation: string,
              templateName: [AnyObject],
              anchor: {
                displayText: string,
                glossaryGuid: string,
                relationGuid: string
              },
              antonyms: [
                {
                  description: string,
                  displayText: string,
                  expression: string,
                  relationGuid: string,
                  source: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER",
                  steward: string,
                  termGuid: string
                }
              ],
              createTime: number,
              createdBy: string,
              updateTime: number,
              updatedBy: string,
              status: "Draft" | "Approved" | "Alert" | "Expired",
              resources: [
                {
                  displayName: string,
                  url: string
                }
              ],
              contacts: Dictionary&lt;string, ContactBasic[]&gt;,
              attributes: Dictionary&lt;string, Dictionary&lt;string, AnyObject&gt;&gt;,
              assignedEntities: [
                {
                  guid: string,
                  typeName: string,
                  uniqueAttributes: Dictionary&lt;string, AnyObject&gt;,
                  displayText: string,
                  entityStatus: "ACTIVE" | "DELETED",
                  relationshipType: string,
                  relationshipAttributes: {
                    attributes: Dictionary&lt;string, AnyObject&gt;,
                    typeName: string,
                    lastModifiedTS: string
                  },
                  relationshipGuid: string,
                  relationshipStatus: "ACTIVE" | "DELETED"
                }
              ],
              categories: [
                {
                  categoryGuid: string,
                  description: string,
                  displayText: string,
                  relationGuid: string,
                  status: "DRAFT" | "ACTIVE" | "DEPRECATED" | "OBSOLETE" | "OTHER"
                }
              ],
              classifies: [AtlasRelatedTermHeader],
              examples: [string],
              isA: [AtlasRelatedTermHeader],
              preferredTerms: [AtlasRelatedTermHeader],
              preferredToTerms: [AtlasRelatedTermHeader],
              replacedBy: [AtlasRelatedTermHeader],
              replacementTerms: [AtlasRelatedTermHeader],
              seeAlso: [AtlasRelatedTermHeader],
              synonyms: [AtlasRelatedTermHeader],
              translatedTerms: [AtlasRelatedTermHeader],
              translationTerms: [AtlasRelatedTermHeader],
              usage: string,
              validValues: [AtlasRelatedTermHeader],
              validValuesFor: [AtlasRelatedTermHeader]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              requestId: string,
              errorCode: string,
              errorMessage: string
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termGuid" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termGuid" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call UpdateGlossaryTermAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new object());
Response response = await client.UpdateGlossaryTermAsync("<termGuid>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call UpdateGlossaryTermAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
PurviewGlossaries client = new PurviewCatalogClient(endpoint, credential).GetPurviewGlossariesClient();

using RequestContent content = RequestContent.Create(new
{
    abbreviation = "<abbreviation>",
    templateName = new object[]
    {
        new object()
    },
    anchor = new
    {
        displayText = "<displayText>",
        glossaryGuid = "<glossaryGuid>",
        relationGuid = "<relationGuid>",
    },
    antonyms = new object[]
    {
        new
        {
            description = "<description>",
            displayText = "<displayText>",
            expression = "<expression>",
            relationGuid = "<relationGuid>",
            source = "<source>",
            status = "DRAFT",
            steward = "<steward>",
            termGuid = "<termGuid>",
        }
    },
    createTime = 123.45F,
    createdBy = "<createdBy>",
    updateTime = 123.45F,
    updatedBy = "<updatedBy>",
    status = "Draft",
    resources = new object[]
    {
        new
        {
            displayName = "<displayName>",
            url = "<url>",
        }
    },
    contacts = new
    {
        key = new object[]
        {
            new
            {
                id = "<id>",
                info = "<info>",
            }
        },
    },
    attributes = new
    {
        key = new
        {
            key = new object(),
        },
    },
    assignedEntities = new object[]
    {
        new
        {
            displayText = "<displayText>",
            entityStatus = "ACTIVE",
            relationshipType = "<relationshipType>",
            relationshipAttributes = new
            {
                attributes = new
                {
                    key = new object(),
                },
                typeName = "<typeName>",
                lastModifiedTS = "<lastModifiedTS>",
            },
            relationshipGuid = "<relationshipGuid>",
            relationshipStatus = "ACTIVE",
            guid = "<guid>",
            typeName = "<typeName>",
            uniqueAttributes = new
            {
                key = new object(),
            },
        }
    },
    categories = new object[]
    {
        new
        {
            categoryGuid = "<categoryGuid>",
            description = "<description>",
            displayText = "<displayText>",
            relationGuid = "<relationGuid>",
            status = "DRAFT",
        }
    },
    classifies = new object[]
    {
        null
    },
    examples = new object[]
    {
        "<examples>"
    },
    isA = new object[]
    {
        null
    },
    preferredTerms = new object[]
    {
        null
    },
    preferredToTerms = new object[]
    {
        null
    },
    replacedBy = new object[]
    {
        null
    },
    replacementTerms = new object[]
    {
        null
    },
    seeAlso = new object[]
    {
        null
    },
    synonyms = new object[]
    {
        null
    },
    translatedTerms = new object[]
    {
        null
    },
    translationTerms = new object[]
    {
        null
    },
    usage = "<usage>",
    validValues = new object[]
    {
        null
    },
    validValuesFor = new object[]
    {
        null
    },
    classifications = new object[]
    {
        new
        {
            entityGuid = "<entityGuid>",
            entityStatus = "ACTIVE",
            removePropagationsOnEntityDelete = true,
            validityPeriods = new object[]
            {
                new
                {
                    endTime = "<endTime>",
                    startTime = "<startTime>",
                    timeZone = "<timeZone>",
                }
            },
            source = "<source>",
            sourceDetails = new
            {
                key = new object(),
            },
            attributes = new
            {
                key = new object(),
            },
            typeName = "<typeName>",
            lastModifiedTS = "<lastModifiedTS>",
        }
    },
    longDescription = "<longDescription>",
    name = "<name>",
    qualifiedName = "<qualifiedName>",
    shortDescription = "<shortDescription>",
    lastModifiedTS = "<lastModifiedTS>",
    guid = "<guid>",
});
Response response = await client.UpdateGlossaryTermAsync("<termGuid>", content, includeTermHierarchy: true);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("abbreviation").ToString());
Console.WriteLine(result.GetProperty("templateName")[0].ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("glossaryGuid").ToString());
Console.WriteLine(result.GetProperty("anchor").GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("antonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("resources")[0].GetProperty("url").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("contacts").GetProperty("<key>")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("attributes").GetProperty("<key>").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipType").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipAttributes").GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipGuid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("relationshipStatus").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("assignedEntities")[0].GetProperty("uniqueAttributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("categoryGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("categories")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("classifies")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("examples")[0].ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("isA")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("preferredToTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacedBy")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("replacementTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("seeAlso")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("synonyms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translatedTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("translationTerms")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("usage").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValues")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("displayText").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("expression").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("relationGuid").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("steward").ToString());
Console.WriteLine(result.GetProperty("validValuesFor")[0].GetProperty("termGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityGuid").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("entityStatus").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("removePropagationsOnEntityDelete").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("validityPeriods")[0].GetProperty("timeZone").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("sourceDetails").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("attributes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("typeName").ToString());
Console.WriteLine(result.GetProperty("classifications")[0].GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("longDescription").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("shortDescription").ToString());
Console.WriteLine(result.GetProperty("lastModifiedTS").ToString());
Console.WriteLine(result.GetProperty("guid").ToString());
]]></code></example>
      </Docs>
    </Member>
  </Members>
</Type>
