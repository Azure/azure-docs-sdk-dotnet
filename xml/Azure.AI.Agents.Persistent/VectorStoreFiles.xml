<Type Name="VectorStoreFiles" FullName="Azure.AI.Agents.Persistent.VectorStoreFiles">
  <TypeSignature Language="C#" Value="public class VectorStoreFiles" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit VectorStoreFiles extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.AI.Agents.Persistent.VectorStoreFiles" />
  <TypeSignature Language="VB.NET" Value="Public Class VectorStoreFiles" />
  <TypeSignature Language="F#" Value="type VectorStoreFiles = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A collection of vector-store file operations under
            `/vector_stores/{vectorStoreId}/files`.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected VectorStoreFiles ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.VectorStoreFiles.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of VectorStoreFiles for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateVectorStoreFile">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateVectorStoreFile (string vectorStoreId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateVectorStoreFile(string vectorStoreId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.VectorStoreFiles.CreateVectorStoreFile(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateVectorStoreFile (vectorStoreId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateVectorStoreFile : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateVectorStoreFile : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="vectorStoreFiles.CreateVectorStoreFile (vectorStoreId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create a vector store file by attaching a file to a vector store.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Agents.Persistent.VectorStoreFiles.CreateVectorStoreFile(System.String,System.String,Azure.AI.Agents.Persistent.VectorStoreDataSource,Azure.AI.Agents.Persistent.VectorStoreChunkingStrategyRequest,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateVectorStoreFile">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFile&gt; CreateVectorStoreFile (string vectorStoreId, string fileId = default, Azure.AI.Agents.Persistent.VectorStoreDataSource dataSource = default, Azure.AI.Agents.Persistent.VectorStoreChunkingStrategyRequest chunkingStrategy = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.VectorStoreFile&gt; CreateVectorStoreFile(string vectorStoreId, string fileId, class Azure.AI.Agents.Persistent.VectorStoreDataSource dataSource, class Azure.AI.Agents.Persistent.VectorStoreChunkingStrategyRequest chunkingStrategy, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.VectorStoreFiles.CreateVectorStoreFile(System.String,System.String,Azure.AI.Agents.Persistent.VectorStoreDataSource,Azure.AI.Agents.Persistent.VectorStoreChunkingStrategyRequest,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateVectorStoreFile (vectorStoreId As String, Optional fileId As String = Nothing, Optional dataSource As VectorStoreDataSource = Nothing, Optional chunkingStrategy As VectorStoreChunkingStrategyRequest = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of VectorStoreFile)" />
      <MemberSignature Language="F#" Value="abstract member CreateVectorStoreFile : string * string * Azure.AI.Agents.Persistent.VectorStoreDataSource * Azure.AI.Agents.Persistent.VectorStoreChunkingStrategyRequest * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFile&gt;&#xA;override this.CreateVectorStoreFile : string * string * Azure.AI.Agents.Persistent.VectorStoreDataSource * Azure.AI.Agents.Persistent.VectorStoreChunkingStrategyRequest * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFile&gt;" Usage="vectorStoreFiles.CreateVectorStoreFile (vectorStoreId, fileId, dataSource, chunkingStrategy, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFile&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="fileId" Type="System.String" />
        <Parameter Name="dataSource" Type="Azure.AI.Agents.Persistent.VectorStoreDataSource" />
        <Parameter Name="chunkingStrategy" Type="Azure.AI.Agents.Persistent.VectorStoreChunkingStrategyRequest" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="fileId"> Identifier of the file. </param>
        <param name="dataSource"> Azure asset ID. </param>
        <param name="chunkingStrategy"> The chunking strategy used to chunk the file. If not set, uses the auto strategy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Create a vector store file by attaching a file to a vector store. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateVectorStoreFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateVectorStoreFileAsync (string vectorStoreId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateVectorStoreFileAsync(string vectorStoreId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.VectorStoreFiles.CreateVectorStoreFileAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateVectorStoreFileAsync (vectorStoreId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateVectorStoreFileAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateVectorStoreFileAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="vectorStoreFiles.CreateVectorStoreFileAsync (vectorStoreId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create a vector store file by attaching a file to a vector store.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Agents.Persistent.VectorStoreFiles.CreateVectorStoreFileAsync(System.String,System.String,Azure.AI.Agents.Persistent.VectorStoreDataSource,Azure.AI.Agents.Persistent.VectorStoreChunkingStrategyRequest,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateVectorStoreFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFile&gt;&gt; CreateVectorStoreFileAsync (string vectorStoreId, string fileId = default, Azure.AI.Agents.Persistent.VectorStoreDataSource dataSource = default, Azure.AI.Agents.Persistent.VectorStoreChunkingStrategyRequest chunkingStrategy = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.VectorStoreFile&gt;&gt; CreateVectorStoreFileAsync(string vectorStoreId, string fileId, class Azure.AI.Agents.Persistent.VectorStoreDataSource dataSource, class Azure.AI.Agents.Persistent.VectorStoreChunkingStrategyRequest chunkingStrategy, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.VectorStoreFiles.CreateVectorStoreFileAsync(System.String,System.String,Azure.AI.Agents.Persistent.VectorStoreDataSource,Azure.AI.Agents.Persistent.VectorStoreChunkingStrategyRequest,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateVectorStoreFileAsync (vectorStoreId As String, Optional fileId As String = Nothing, Optional dataSource As VectorStoreDataSource = Nothing, Optional chunkingStrategy As VectorStoreChunkingStrategyRequest = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of VectorStoreFile))" />
      <MemberSignature Language="F#" Value="abstract member CreateVectorStoreFileAsync : string * string * Azure.AI.Agents.Persistent.VectorStoreDataSource * Azure.AI.Agents.Persistent.VectorStoreChunkingStrategyRequest * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFile&gt;&gt;&#xA;override this.CreateVectorStoreFileAsync : string * string * Azure.AI.Agents.Persistent.VectorStoreDataSource * Azure.AI.Agents.Persistent.VectorStoreChunkingStrategyRequest * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFile&gt;&gt;" Usage="vectorStoreFiles.CreateVectorStoreFileAsync (vectorStoreId, fileId, dataSource, chunkingStrategy, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFile&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="fileId" Type="System.String" />
        <Parameter Name="dataSource" Type="Azure.AI.Agents.Persistent.VectorStoreDataSource" />
        <Parameter Name="chunkingStrategy" Type="Azure.AI.Agents.Persistent.VectorStoreChunkingStrategyRequest" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="fileId"> Identifier of the file. </param>
        <param name="dataSource"> Azure asset ID. </param>
        <param name="chunkingStrategy"> The chunking strategy used to chunk the file. If not set, uses the auto strategy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Create a vector store file by attaching a file to a vector store. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteVectorStoreFile">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteVectorStoreFile (string vectorStoreId, string fileId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteVectorStoreFile(string vectorStoreId, string fileId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.VectorStoreFiles.DeleteVectorStoreFile(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteVectorStoreFile (vectorStoreId As String, fileId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteVectorStoreFile : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteVectorStoreFile : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="vectorStoreFiles.DeleteVectorStoreFile (vectorStoreId, fileId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="fileId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="fileId"> Identifier of the file. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes a vector store file. This removes the file‐to‐store link (does not delete the file itself).
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Agents.Persistent.VectorStoreFiles.DeleteVectorStoreFile(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="fileId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="fileId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteVectorStoreFile">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFileDeletionStatus&gt; DeleteVectorStoreFile (string vectorStoreId, string fileId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.VectorStoreFileDeletionStatus&gt; DeleteVectorStoreFile(string vectorStoreId, string fileId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.VectorStoreFiles.DeleteVectorStoreFile(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteVectorStoreFile (vectorStoreId As String, fileId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of VectorStoreFileDeletionStatus)" />
      <MemberSignature Language="F#" Value="abstract member DeleteVectorStoreFile : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFileDeletionStatus&gt;&#xA;override this.DeleteVectorStoreFile : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFileDeletionStatus&gt;" Usage="vectorStoreFiles.DeleteVectorStoreFile (vectorStoreId, fileId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFileDeletionStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="fileId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="fileId"> Identifier of the file. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Deletes a vector store file. This removes the file‐to‐store link (does not delete the file itself). </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="fileId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="fileId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteVectorStoreFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteVectorStoreFileAsync (string vectorStoreId, string fileId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteVectorStoreFileAsync(string vectorStoreId, string fileId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.VectorStoreFiles.DeleteVectorStoreFileAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteVectorStoreFileAsync (vectorStoreId As String, fileId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteVectorStoreFileAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteVectorStoreFileAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="vectorStoreFiles.DeleteVectorStoreFileAsync (vectorStoreId, fileId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="fileId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="fileId"> Identifier of the file. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes a vector store file. This removes the file‐to‐store link (does not delete the file itself).
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Agents.Persistent.VectorStoreFiles.DeleteVectorStoreFileAsync(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="fileId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="fileId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteVectorStoreFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFileDeletionStatus&gt;&gt; DeleteVectorStoreFileAsync (string vectorStoreId, string fileId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.VectorStoreFileDeletionStatus&gt;&gt; DeleteVectorStoreFileAsync(string vectorStoreId, string fileId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.VectorStoreFiles.DeleteVectorStoreFileAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteVectorStoreFileAsync (vectorStoreId As String, fileId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of VectorStoreFileDeletionStatus))" />
      <MemberSignature Language="F#" Value="abstract member DeleteVectorStoreFileAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFileDeletionStatus&gt;&gt;&#xA;override this.DeleteVectorStoreFileAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFileDeletionStatus&gt;&gt;" Usage="vectorStoreFiles.DeleteVectorStoreFileAsync (vectorStoreId, fileId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFileDeletionStatus&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="fileId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="fileId"> Identifier of the file. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Deletes a vector store file. This removes the file‐to‐store link (does not delete the file itself). </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="fileId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="fileId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVectorStoreFile">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetVectorStoreFile (string vectorStoreId, string fileId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetVectorStoreFile(string vectorStoreId, string fileId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.VectorStoreFiles.GetVectorStoreFile(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVectorStoreFile (vectorStoreId As String, fileId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetVectorStoreFile : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetVectorStoreFile : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="vectorStoreFiles.GetVectorStoreFile (vectorStoreId, fileId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="fileId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="fileId"> Identifier of the file. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves a vector store file.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Agents.Persistent.VectorStoreFiles.GetVectorStoreFile(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="fileId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="fileId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVectorStoreFile">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFile&gt; GetVectorStoreFile (string vectorStoreId, string fileId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.VectorStoreFile&gt; GetVectorStoreFile(string vectorStoreId, string fileId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.VectorStoreFiles.GetVectorStoreFile(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVectorStoreFile (vectorStoreId As String, fileId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of VectorStoreFile)" />
      <MemberSignature Language="F#" Value="abstract member GetVectorStoreFile : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFile&gt;&#xA;override this.GetVectorStoreFile : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFile&gt;" Usage="vectorStoreFiles.GetVectorStoreFile (vectorStoreId, fileId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFile&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="fileId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="fileId"> Identifier of the file. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves a vector store file. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="fileId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="fileId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVectorStoreFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetVectorStoreFileAsync (string vectorStoreId, string fileId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetVectorStoreFileAsync(string vectorStoreId, string fileId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.VectorStoreFiles.GetVectorStoreFileAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVectorStoreFileAsync (vectorStoreId As String, fileId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetVectorStoreFileAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetVectorStoreFileAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="vectorStoreFiles.GetVectorStoreFileAsync (vectorStoreId, fileId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="fileId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="fileId"> Identifier of the file. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves a vector store file.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Agents.Persistent.VectorStoreFiles.GetVectorStoreFileAsync(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="fileId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="fileId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVectorStoreFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFile&gt;&gt; GetVectorStoreFileAsync (string vectorStoreId, string fileId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.VectorStoreFile&gt;&gt; GetVectorStoreFileAsync(string vectorStoreId, string fileId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.VectorStoreFiles.GetVectorStoreFileAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVectorStoreFileAsync (vectorStoreId As String, fileId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of VectorStoreFile))" />
      <MemberSignature Language="F#" Value="abstract member GetVectorStoreFileAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFile&gt;&gt;&#xA;override this.GetVectorStoreFileAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFile&gt;&gt;" Usage="vectorStoreFiles.GetVectorStoreFileAsync (vectorStoreId, fileId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFile&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="fileId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="fileId"> Identifier of the file. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves a vector store file. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="fileId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="fileId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVectorStoreFiles">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.AI.Agents.Persistent.VectorStoreFile&gt; GetVectorStoreFiles (string vectorStoreId, Azure.AI.Agents.Persistent.VectorStoreFileStatusFilter? filter = default, int? limit = default, Azure.AI.Agents.Persistent.ListSortOrder? order = default, string after = default, string before = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.AI.Agents.Persistent.VectorStoreFile&gt; GetVectorStoreFiles(string vectorStoreId, valuetype System.Nullable`1&lt;valuetype Azure.AI.Agents.Persistent.VectorStoreFileStatusFilter&gt; filter, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;valuetype Azure.AI.Agents.Persistent.ListSortOrder&gt; order, string after, string before, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.VectorStoreFiles.GetVectorStoreFiles(System.String,System.Nullable{Azure.AI.Agents.Persistent.VectorStoreFileStatusFilter},System.Nullable{System.Int32},System.Nullable{Azure.AI.Agents.Persistent.ListSortOrder},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVectorStoreFiles (vectorStoreId As String, Optional filter As Nullable(Of VectorStoreFileStatusFilter) = Nothing, Optional limit As Nullable(Of Integer) = Nothing, Optional order As Nullable(Of ListSortOrder) = Nothing, Optional after As String = Nothing, Optional before As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of VectorStoreFile)" />
      <MemberSignature Language="F#" Value="abstract member GetVectorStoreFiles : string * Nullable&lt;Azure.AI.Agents.Persistent.VectorStoreFileStatusFilter&gt; * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Agents.Persistent.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.AI.Agents.Persistent.VectorStoreFile&gt;&#xA;override this.GetVectorStoreFiles : string * Nullable&lt;Azure.AI.Agents.Persistent.VectorStoreFileStatusFilter&gt; * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Agents.Persistent.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.AI.Agents.Persistent.VectorStoreFile&gt;" Usage="vectorStoreFiles.GetVectorStoreFiles (vectorStoreId, filter, limit, order, after, before, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.AI.Agents.Persistent.VectorStoreFile&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="filter" Type="System.Nullable&lt;Azure.AI.Agents.Persistent.VectorStoreFileStatusFilter&gt;" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="order" Type="System.Nullable&lt;Azure.AI.Agents.Persistent.ListSortOrder&gt;" />
        <Parameter Name="after" Type="System.String" />
        <Parameter Name="before" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="filter"> Filter by file status. </param>
        <param name="limit"> A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        <param name="order"> Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order. </param>
        <param name="after"> A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. </param>
        <param name="before"> A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Returns a list of vector store files. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVectorStoreFilesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.AI.Agents.Persistent.VectorStoreFile&gt; GetVectorStoreFilesAsync (string vectorStoreId, Azure.AI.Agents.Persistent.VectorStoreFileStatusFilter? filter = default, int? limit = default, Azure.AI.Agents.Persistent.ListSortOrder? order = default, string after = default, string before = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.AI.Agents.Persistent.VectorStoreFile&gt; GetVectorStoreFilesAsync(string vectorStoreId, valuetype System.Nullable`1&lt;valuetype Azure.AI.Agents.Persistent.VectorStoreFileStatusFilter&gt; filter, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;valuetype Azure.AI.Agents.Persistent.ListSortOrder&gt; order, string after, string before, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.VectorStoreFiles.GetVectorStoreFilesAsync(System.String,System.Nullable{Azure.AI.Agents.Persistent.VectorStoreFileStatusFilter},System.Nullable{System.Int32},System.Nullable{Azure.AI.Agents.Persistent.ListSortOrder},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVectorStoreFilesAsync (vectorStoreId As String, Optional filter As Nullable(Of VectorStoreFileStatusFilter) = Nothing, Optional limit As Nullable(Of Integer) = Nothing, Optional order As Nullable(Of ListSortOrder) = Nothing, Optional after As String = Nothing, Optional before As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of VectorStoreFile)" />
      <MemberSignature Language="F#" Value="abstract member GetVectorStoreFilesAsync : string * Nullable&lt;Azure.AI.Agents.Persistent.VectorStoreFileStatusFilter&gt; * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Agents.Persistent.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.AI.Agents.Persistent.VectorStoreFile&gt;&#xA;override this.GetVectorStoreFilesAsync : string * Nullable&lt;Azure.AI.Agents.Persistent.VectorStoreFileStatusFilter&gt; * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Agents.Persistent.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.AI.Agents.Persistent.VectorStoreFile&gt;" Usage="vectorStoreFiles.GetVectorStoreFilesAsync (vectorStoreId, filter, limit, order, after, before, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.AI.Agents.Persistent.VectorStoreFile&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="filter" Type="System.Nullable&lt;Azure.AI.Agents.Persistent.VectorStoreFileStatusFilter&gt;" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="order" Type="System.Nullable&lt;Azure.AI.Agents.Persistent.ListSortOrder&gt;" />
        <Parameter Name="after" Type="System.String" />
        <Parameter Name="before" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="filter"> Filter by file status. </param>
        <param name="limit"> A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        <param name="order"> Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order. </param>
        <param name="after"> A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. </param>
        <param name="before"> A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Returns a list of vector store files. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.AI.Agents.Persistent.VectorStoreFiles.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.AI.Agents.Persistent.VectorStoreFiles.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
