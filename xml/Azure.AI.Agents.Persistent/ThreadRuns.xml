<Type Name="ThreadRuns" FullName="Azure.AI.Agents.Persistent.ThreadRuns">
  <TypeSignature Language="C#" Value="public class ThreadRuns" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ThreadRuns extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.AI.Agents.Persistent.ThreadRuns" />
  <TypeSignature Language="VB.NET" Value="Public Class ThreadRuns" />
  <TypeSignature Language="F#" Value="type ThreadRuns = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> A collection of run operations under `/threads/{threadId}/runs`. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ThreadRuns ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadRuns.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of ThreadRuns for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CancelRun (string threadId, string runId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CancelRun(string threadId, string runId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadRuns.CancelRun(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CancelRun (threadId As String, runId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member CancelRun : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CancelRun : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="threadRuns.CancelRun (threadId, runId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Identifier of the run. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Cancels a run of an in‐progress thread.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Agents.Persistent.ThreadRuns.CancelRun(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="runId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CancelRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt; CancelRun (string threadId, string runId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.ThreadRun&gt; CancelRun(string threadId, string runId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadRuns.CancelRun(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CancelRun (threadId As String, runId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ThreadRun)" />
      <MemberSignature Language="F#" Value="abstract member CancelRun : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;&#xA;override this.CancelRun : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;" Usage="threadRuns.CancelRun (threadId, runId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Identifier of the run. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Cancels a run of an in‐progress thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="runId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="CancelRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CancelRunAsync (string threadId, string runId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CancelRunAsync(string threadId, string runId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadRuns.CancelRunAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CancelRunAsync (threadId As String, runId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CancelRunAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CancelRunAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="threadRuns.CancelRunAsync (threadId, runId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Identifier of the run. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Cancels a run of an in‐progress thread.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Agents.Persistent.ThreadRuns.CancelRunAsync(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="runId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CancelRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;&gt; CancelRunAsync (string threadId, string runId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.ThreadRun&gt;&gt; CancelRunAsync(string threadId, string runId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadRuns.CancelRunAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CancelRunAsync (threadId As String, runId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ThreadRun))" />
      <MemberSignature Language="F#" Value="abstract member CancelRunAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;&gt;&#xA;override this.CancelRunAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;&gt;" Usage="threadRuns.CancelRunAsync (threadId, runId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Identifier of the run. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Cancels a run of an in‐progress thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="runId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt; CreateRun (Azure.AI.Agents.Persistent.PersistentAgentThread thread, Azure.AI.Agents.Persistent.PersistentAgent agent, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.ThreadRun&gt; CreateRun(class Azure.AI.Agents.Persistent.PersistentAgentThread thread, class Azure.AI.Agents.Persistent.PersistentAgent agent, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadRuns.CreateRun(Azure.AI.Agents.Persistent.PersistentAgentThread,Azure.AI.Agents.Persistent.PersistentAgent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateRun (thread As PersistentAgentThread, agent As PersistentAgent, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ThreadRun)" />
      <MemberSignature Language="F#" Value="abstract member CreateRun : Azure.AI.Agents.Persistent.PersistentAgentThread * Azure.AI.Agents.Persistent.PersistentAgent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;&#xA;override this.CreateRun : Azure.AI.Agents.Persistent.PersistentAgentThread * Azure.AI.Agents.Persistent.PersistentAgent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;" Usage="threadRuns.CreateRun (thread, agent, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thread" Type="Azure.AI.Agents.Persistent.PersistentAgentThread" />
        <Parameter Name="agent" Type="Azure.AI.Agents.Persistent.PersistentAgent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="thread"> The thread that should be run. </param>
        <param name="agent"> The agent that should run the thread. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Creates a new run of the specified thread using a specified agent.
            </summary>
        <returns> A new <see cref="T:Azure.AI.Agents.Persistent.ThreadRun" /> instance. </returns>
        <remarks>
            This method will create the run with default configuration.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateRun (string threadId, Azure.Core.RequestContent content, System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.RunAdditionalFieldList&gt; include = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateRun(string threadId, class Azure.Core.RequestContent content, class System.Collections.Generic.IEnumerable`1&lt;valuetype Azure.AI.Agents.Persistent.RunAdditionalFieldList&gt; include, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadRuns.CreateRun(System.String,Azure.Core.RequestContent,System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.RunAdditionalFieldList},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateRun (threadId As String, content As RequestContent, Optional include As IEnumerable(Of RunAdditionalFieldList) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateRun : string * Azure.Core.RequestContent * seq&lt;Azure.AI.Agents.Persistent.RunAdditionalFieldList&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateRun : string * Azure.Core.RequestContent * seq&lt;Azure.AI.Agents.Persistent.RunAdditionalFieldList&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="threadRuns.CreateRun (threadId, content, include, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="include" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.RunAdditionalFieldList&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="include">
            A list of additional fields to include in the response.
            Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content`
            to fetch the file search result content.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates a new run for an agent thread.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Agents.Persistent.ThreadRuns.CreateRun(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.ThreadMessageOptions},System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.ToolDefinition},System.Nullable{System.Boolean},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.AI.Agents.Persistent.TruncationObject,System.BinaryData,System.BinaryData,System.Nullable{System.Boolean},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.RunAdditionalFieldList},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt; CreateRun (string threadId, string assistantId, string overrideModelName = default, string overrideInstructions = default, string additionalInstructions = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.ThreadMessageOptions&gt; additionalMessages = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.ToolDefinition&gt; overrideTools = default, bool? stream = default, float? temperature = default, float? topP = default, int? maxPromptTokens = default, int? maxCompletionTokens = default, Azure.AI.Agents.Persistent.TruncationObject truncationStrategy = default, BinaryData toolChoice = default, BinaryData responseFormat = default, bool? parallelToolCalls = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.RunAdditionalFieldList&gt; include = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.ThreadRun&gt; CreateRun(string threadId, string assistantId, string overrideModelName, string overrideInstructions, string additionalInstructions, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Agents.Persistent.ThreadMessageOptions&gt; additionalMessages, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Agents.Persistent.ToolDefinition&gt; overrideTools, valuetype System.Nullable`1&lt;bool&gt; stream, valuetype System.Nullable`1&lt;float32&gt; temperature, valuetype System.Nullable`1&lt;float32&gt; topP, valuetype System.Nullable`1&lt;int32&gt; maxPromptTokens, valuetype System.Nullable`1&lt;int32&gt; maxCompletionTokens, class Azure.AI.Agents.Persistent.TruncationObject truncationStrategy, class System.BinaryData toolChoice, class System.BinaryData responseFormat, valuetype System.Nullable`1&lt;bool&gt; parallelToolCalls, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, class System.Collections.Generic.IEnumerable`1&lt;valuetype Azure.AI.Agents.Persistent.RunAdditionalFieldList&gt; include, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadRuns.CreateRun(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.ThreadMessageOptions},System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.ToolDefinition},System.Nullable{System.Boolean},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.AI.Agents.Persistent.TruncationObject,System.BinaryData,System.BinaryData,System.Nullable{System.Boolean},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.RunAdditionalFieldList},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateRun (threadId As String, assistantId As String, Optional overrideModelName As String = Nothing, Optional overrideInstructions As String = Nothing, Optional additionalInstructions As String = Nothing, Optional additionalMessages As IEnumerable(Of ThreadMessageOptions) = Nothing, Optional overrideTools As IEnumerable(Of ToolDefinition) = Nothing, Optional stream As Nullable(Of Boolean) = Nothing, Optional temperature As Nullable(Of Single) = Nothing, Optional topP As Nullable(Of Single) = Nothing, Optional maxPromptTokens As Nullable(Of Integer) = Nothing, Optional maxCompletionTokens As Nullable(Of Integer) = Nothing, Optional truncationStrategy As TruncationObject = Nothing, Optional toolChoice As BinaryData = Nothing, Optional responseFormat As BinaryData = Nothing, Optional parallelToolCalls As Nullable(Of Boolean) = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional include As IEnumerable(Of RunAdditionalFieldList) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ThreadRun)" />
      <MemberSignature Language="F#" Value="abstract member CreateRun : string * string * string * string * string * seq&lt;Azure.AI.Agents.Persistent.ThreadMessageOptions&gt; * seq&lt;Azure.AI.Agents.Persistent.ToolDefinition&gt; * Nullable&lt;bool&gt; * Nullable&lt;single&gt; * Nullable&lt;single&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.AI.Agents.Persistent.TruncationObject * BinaryData * BinaryData * Nullable&lt;bool&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * seq&lt;Azure.AI.Agents.Persistent.RunAdditionalFieldList&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;&#xA;override this.CreateRun : string * string * string * string * string * seq&lt;Azure.AI.Agents.Persistent.ThreadMessageOptions&gt; * seq&lt;Azure.AI.Agents.Persistent.ToolDefinition&gt; * Nullable&lt;bool&gt; * Nullable&lt;single&gt; * Nullable&lt;single&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.AI.Agents.Persistent.TruncationObject * BinaryData * BinaryData * Nullable&lt;bool&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * seq&lt;Azure.AI.Agents.Persistent.RunAdditionalFieldList&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;" Usage="threadRuns.CreateRun (threadId, assistantId, overrideModelName, overrideInstructions, additionalInstructions, additionalMessages, overrideTools, stream, temperature, topP, maxPromptTokens, maxCompletionTokens, truncationStrategy, toolChoice, responseFormat, parallelToolCalls, metadata, include, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="assistantId" Type="System.String" />
        <Parameter Name="overrideModelName" Type="System.String" />
        <Parameter Name="overrideInstructions" Type="System.String" />
        <Parameter Name="additionalInstructions" Type="System.String" />
        <Parameter Name="additionalMessages" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.ThreadMessageOptions&gt;" />
        <Parameter Name="overrideTools" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.ToolDefinition&gt;" />
        <Parameter Name="stream" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="temperature" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="topP" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="maxPromptTokens" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxCompletionTokens" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="truncationStrategy" Type="Azure.AI.Agents.Persistent.TruncationObject" />
        <Parameter Name="toolChoice" Type="System.BinaryData" />
        <Parameter Name="responseFormat" Type="System.BinaryData" />
        <Parameter Name="parallelToolCalls" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="include" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.RunAdditionalFieldList&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="assistantId"> The ID of the agent that should run the thread. </param>
        <param name="overrideModelName"> The overridden model name that the agent should use to run the thread. </param>
        <param name="overrideInstructions"> The overridden system instructions that the agent should use to run the thread. </param>
        <param name="additionalInstructions">
             Additional instructions to append at the end of the instructions for the run. This is useful for modifying the behavior
             on a per-run basis without overriding other instructions.
             </param>
        <param name="additionalMessages"> Adds additional messages to the thread before creating the run. </param>
        <param name="overrideTools"> The overridden list of enabled tools that the agent should use to run the thread. </param>
        <param name="stream">
             If `true`, returns a stream of events that happen during the Run as server-sent events,
             terminating when the Run enters a terminal state with a `data: [DONE]` message.
             </param>
        <param name="temperature">
             What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output
             more random, while lower values like 0.2 will make it more focused and deterministic.
             </param>
        <param name="topP">
             An alternative to sampling with temperature, called nucleus sampling, where the model
             considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens
             comprising the top 10% probability mass are considered.
            
             We generally recommend altering this or temperature but not both.
             </param>
        <param name="maxPromptTokens">
             The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only
             the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified,
             the run will end with status `incomplete`. See `incomplete_details` for more info.
             </param>
        <param name="maxCompletionTokens">
             The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort
             to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of
             completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
             </param>
        <param name="truncationStrategy"> The strategy to use for dropping messages as the context windows moves forward. </param>
        <param name="toolChoice"> Controls whether or not and which tool is called by the model. </param>
        <param name="responseFormat"> Specifies the format that the model must output. </param>
        <param name="parallelToolCalls"> If `true` functions will run in parallel during tool use. </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="include">
             A list of additional fields to include in the response.
             Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content`
             to fetch the file search result content.
             </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a new run for an agent thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="assistantId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;&gt; CreateRunAsync (Azure.AI.Agents.Persistent.PersistentAgentThread thread, Azure.AI.Agents.Persistent.PersistentAgent agent, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.ThreadRun&gt;&gt; CreateRunAsync(class Azure.AI.Agents.Persistent.PersistentAgentThread thread, class Azure.AI.Agents.Persistent.PersistentAgent agent, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadRuns.CreateRunAsync(Azure.AI.Agents.Persistent.PersistentAgentThread,Azure.AI.Agents.Persistent.PersistentAgent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateRunAsync (thread As PersistentAgentThread, agent As PersistentAgent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ThreadRun))" />
      <MemberSignature Language="F#" Value="abstract member CreateRunAsync : Azure.AI.Agents.Persistent.PersistentAgentThread * Azure.AI.Agents.Persistent.PersistentAgent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;&gt;&#xA;override this.CreateRunAsync : Azure.AI.Agents.Persistent.PersistentAgentThread * Azure.AI.Agents.Persistent.PersistentAgent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;&gt;" Usage="threadRuns.CreateRunAsync (thread, agent, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thread" Type="Azure.AI.Agents.Persistent.PersistentAgentThread" />
        <Parameter Name="agent" Type="Azure.AI.Agents.Persistent.PersistentAgent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="thread"> The thread that should be run. </param>
        <param name="agent"> The agent that should run the thread. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Creates a new run of the specified thread using a specified agent.
            </summary>
        <returns> A new <see cref="T:Azure.AI.Agents.Persistent.ThreadRun" /> instance. </returns>
        <remarks>
            This method will create the run with default configuration.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateRunAsync (string threadId, Azure.Core.RequestContent content, System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.RunAdditionalFieldList&gt; include = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateRunAsync(string threadId, class Azure.Core.RequestContent content, class System.Collections.Generic.IEnumerable`1&lt;valuetype Azure.AI.Agents.Persistent.RunAdditionalFieldList&gt; include, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadRuns.CreateRunAsync(System.String,Azure.Core.RequestContent,System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.RunAdditionalFieldList},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateRunAsync (threadId As String, content As RequestContent, Optional include As IEnumerable(Of RunAdditionalFieldList) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateRunAsync : string * Azure.Core.RequestContent * seq&lt;Azure.AI.Agents.Persistent.RunAdditionalFieldList&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateRunAsync : string * Azure.Core.RequestContent * seq&lt;Azure.AI.Agents.Persistent.RunAdditionalFieldList&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="threadRuns.CreateRunAsync (threadId, content, include, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="include" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.RunAdditionalFieldList&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="include">
            A list of additional fields to include in the response.
            Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content`
            to fetch the file search result content.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates a new run for an agent thread.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Agents.Persistent.ThreadRuns.CreateRunAsync(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.ThreadMessageOptions},System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.ToolDefinition},System.Nullable{System.Boolean},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.AI.Agents.Persistent.TruncationObject,System.BinaryData,System.BinaryData,System.Nullable{System.Boolean},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.RunAdditionalFieldList},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;&gt; CreateRunAsync (string threadId, string assistantId, string overrideModelName = default, string overrideInstructions = default, string additionalInstructions = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.ThreadMessageOptions&gt; additionalMessages = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.ToolDefinition&gt; overrideTools = default, bool? stream = default, float? temperature = default, float? topP = default, int? maxPromptTokens = default, int? maxCompletionTokens = default, Azure.AI.Agents.Persistent.TruncationObject truncationStrategy = default, BinaryData toolChoice = default, BinaryData responseFormat = default, bool? parallelToolCalls = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.RunAdditionalFieldList&gt; include = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.ThreadRun&gt;&gt; CreateRunAsync(string threadId, string assistantId, string overrideModelName, string overrideInstructions, string additionalInstructions, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Agents.Persistent.ThreadMessageOptions&gt; additionalMessages, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Agents.Persistent.ToolDefinition&gt; overrideTools, valuetype System.Nullable`1&lt;bool&gt; stream, valuetype System.Nullable`1&lt;float32&gt; temperature, valuetype System.Nullable`1&lt;float32&gt; topP, valuetype System.Nullable`1&lt;int32&gt; maxPromptTokens, valuetype System.Nullable`1&lt;int32&gt; maxCompletionTokens, class Azure.AI.Agents.Persistent.TruncationObject truncationStrategy, class System.BinaryData toolChoice, class System.BinaryData responseFormat, valuetype System.Nullable`1&lt;bool&gt; parallelToolCalls, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, class System.Collections.Generic.IEnumerable`1&lt;valuetype Azure.AI.Agents.Persistent.RunAdditionalFieldList&gt; include, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadRuns.CreateRunAsync(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.ThreadMessageOptions},System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.ToolDefinition},System.Nullable{System.Boolean},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.AI.Agents.Persistent.TruncationObject,System.BinaryData,System.BinaryData,System.Nullable{System.Boolean},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.RunAdditionalFieldList},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateRunAsync (threadId As String, assistantId As String, Optional overrideModelName As String = Nothing, Optional overrideInstructions As String = Nothing, Optional additionalInstructions As String = Nothing, Optional additionalMessages As IEnumerable(Of ThreadMessageOptions) = Nothing, Optional overrideTools As IEnumerable(Of ToolDefinition) = Nothing, Optional stream As Nullable(Of Boolean) = Nothing, Optional temperature As Nullable(Of Single) = Nothing, Optional topP As Nullable(Of Single) = Nothing, Optional maxPromptTokens As Nullable(Of Integer) = Nothing, Optional maxCompletionTokens As Nullable(Of Integer) = Nothing, Optional truncationStrategy As TruncationObject = Nothing, Optional toolChoice As BinaryData = Nothing, Optional responseFormat As BinaryData = Nothing, Optional parallelToolCalls As Nullable(Of Boolean) = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional include As IEnumerable(Of RunAdditionalFieldList) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ThreadRun))" />
      <MemberSignature Language="F#" Value="abstract member CreateRunAsync : string * string * string * string * string * seq&lt;Azure.AI.Agents.Persistent.ThreadMessageOptions&gt; * seq&lt;Azure.AI.Agents.Persistent.ToolDefinition&gt; * Nullable&lt;bool&gt; * Nullable&lt;single&gt; * Nullable&lt;single&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.AI.Agents.Persistent.TruncationObject * BinaryData * BinaryData * Nullable&lt;bool&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * seq&lt;Azure.AI.Agents.Persistent.RunAdditionalFieldList&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;&gt;&#xA;override this.CreateRunAsync : string * string * string * string * string * seq&lt;Azure.AI.Agents.Persistent.ThreadMessageOptions&gt; * seq&lt;Azure.AI.Agents.Persistent.ToolDefinition&gt; * Nullable&lt;bool&gt; * Nullable&lt;single&gt; * Nullable&lt;single&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.AI.Agents.Persistent.TruncationObject * BinaryData * BinaryData * Nullable&lt;bool&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * seq&lt;Azure.AI.Agents.Persistent.RunAdditionalFieldList&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;&gt;" Usage="threadRuns.CreateRunAsync (threadId, assistantId, overrideModelName, overrideInstructions, additionalInstructions, additionalMessages, overrideTools, stream, temperature, topP, maxPromptTokens, maxCompletionTokens, truncationStrategy, toolChoice, responseFormat, parallelToolCalls, metadata, include, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="assistantId" Type="System.String" />
        <Parameter Name="overrideModelName" Type="System.String" />
        <Parameter Name="overrideInstructions" Type="System.String" />
        <Parameter Name="additionalInstructions" Type="System.String" />
        <Parameter Name="additionalMessages" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.ThreadMessageOptions&gt;" />
        <Parameter Name="overrideTools" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.ToolDefinition&gt;" />
        <Parameter Name="stream" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="temperature" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="topP" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="maxPromptTokens" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxCompletionTokens" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="truncationStrategy" Type="Azure.AI.Agents.Persistent.TruncationObject" />
        <Parameter Name="toolChoice" Type="System.BinaryData" />
        <Parameter Name="responseFormat" Type="System.BinaryData" />
        <Parameter Name="parallelToolCalls" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="include" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.RunAdditionalFieldList&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="assistantId"> The ID of the agent that should run the thread. </param>
        <param name="overrideModelName"> The overridden model name that the agent should use to run the thread. </param>
        <param name="overrideInstructions"> The overridden system instructions that the agent should use to run the thread. </param>
        <param name="additionalInstructions">
             Additional instructions to append at the end of the instructions for the run. This is useful for modifying the behavior
             on a per-run basis without overriding other instructions.
             </param>
        <param name="additionalMessages"> Adds additional messages to the thread before creating the run. </param>
        <param name="overrideTools"> The overridden list of enabled tools that the agent should use to run the thread. </param>
        <param name="stream">
             If `true`, returns a stream of events that happen during the Run as server-sent events,
             terminating when the Run enters a terminal state with a `data: [DONE]` message.
             </param>
        <param name="temperature">
             What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output
             more random, while lower values like 0.2 will make it more focused and deterministic.
             </param>
        <param name="topP">
             An alternative to sampling with temperature, called nucleus sampling, where the model
             considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens
             comprising the top 10% probability mass are considered.
            
             We generally recommend altering this or temperature but not both.
             </param>
        <param name="maxPromptTokens">
             The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only
             the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified,
             the run will end with status `incomplete`. See `incomplete_details` for more info.
             </param>
        <param name="maxCompletionTokens">
             The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort
             to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of
             completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
             </param>
        <param name="truncationStrategy"> The strategy to use for dropping messages as the context windows moves forward. </param>
        <param name="toolChoice"> Controls whether or not and which tool is called by the model. </param>
        <param name="responseFormat"> Specifies the format that the model must output. </param>
        <param name="parallelToolCalls"> If `true` functions will run in parallel during tool use. </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="include">
             A list of additional fields to include in the response.
             Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content`
             to fetch the file search result content.
             </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a new run for an agent thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="assistantId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateRunStreaming">
      <MemberSignature Language="C#" Value="public virtual System.ClientModel.CollectionResult&lt;Azure.AI.Agents.Persistent.StreamingUpdate&gt; CreateRunStreaming (string threadId, string agentId, string overrideModelName = default, string overrideInstructions = default, string additionalInstructions = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.ThreadMessageOptions&gt; additionalMessages = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.ToolDefinition&gt; overrideTools = default, float? temperature = default, float? topP = default, int? maxPromptTokens = default, int? maxCompletionTokens = default, Azure.AI.Agents.Persistent.TruncationObject truncationStrategy = default, BinaryData toolChoice = default, BinaryData responseFormat = default, bool? parallelToolCalls = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ClientModel.CollectionResult`1&lt;class Azure.AI.Agents.Persistent.StreamingUpdate&gt; CreateRunStreaming(string threadId, string agentId, string overrideModelName, string overrideInstructions, string additionalInstructions, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Agents.Persistent.ThreadMessageOptions&gt; additionalMessages, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Agents.Persistent.ToolDefinition&gt; overrideTools, valuetype System.Nullable`1&lt;float32&gt; temperature, valuetype System.Nullable`1&lt;float32&gt; topP, valuetype System.Nullable`1&lt;int32&gt; maxPromptTokens, valuetype System.Nullable`1&lt;int32&gt; maxCompletionTokens, class Azure.AI.Agents.Persistent.TruncationObject truncationStrategy, class System.BinaryData toolChoice, class System.BinaryData responseFormat, valuetype System.Nullable`1&lt;bool&gt; parallelToolCalls, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadRuns.CreateRunStreaming(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.ThreadMessageOptions},System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.ToolDefinition},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.AI.Agents.Persistent.TruncationObject,System.BinaryData,System.BinaryData,System.Nullable{System.Boolean},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateRunStreaming (threadId As String, agentId As String, Optional overrideModelName As String = Nothing, Optional overrideInstructions As String = Nothing, Optional additionalInstructions As String = Nothing, Optional additionalMessages As IEnumerable(Of ThreadMessageOptions) = Nothing, Optional overrideTools As IEnumerable(Of ToolDefinition) = Nothing, Optional temperature As Nullable(Of Single) = Nothing, Optional topP As Nullable(Of Single) = Nothing, Optional maxPromptTokens As Nullable(Of Integer) = Nothing, Optional maxCompletionTokens As Nullable(Of Integer) = Nothing, Optional truncationStrategy As TruncationObject = Nothing, Optional toolChoice As BinaryData = Nothing, Optional responseFormat As BinaryData = Nothing, Optional parallelToolCalls As Nullable(Of Boolean) = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As CollectionResult(Of StreamingUpdate)" />
      <MemberSignature Language="F#" Value="abstract member CreateRunStreaming : string * string * string * string * string * seq&lt;Azure.AI.Agents.Persistent.ThreadMessageOptions&gt; * seq&lt;Azure.AI.Agents.Persistent.ToolDefinition&gt; * Nullable&lt;single&gt; * Nullable&lt;single&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.AI.Agents.Persistent.TruncationObject * BinaryData * BinaryData * Nullable&lt;bool&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.ClientModel.CollectionResult&lt;Azure.AI.Agents.Persistent.StreamingUpdate&gt;&#xA;override this.CreateRunStreaming : string * string * string * string * string * seq&lt;Azure.AI.Agents.Persistent.ThreadMessageOptions&gt; * seq&lt;Azure.AI.Agents.Persistent.ToolDefinition&gt; * Nullable&lt;single&gt; * Nullable&lt;single&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.AI.Agents.Persistent.TruncationObject * BinaryData * BinaryData * Nullable&lt;bool&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.ClientModel.CollectionResult&lt;Azure.AI.Agents.Persistent.StreamingUpdate&gt;" Usage="threadRuns.CreateRunStreaming (threadId, agentId, overrideModelName, overrideInstructions, additionalInstructions, additionalMessages, overrideTools, temperature, topP, maxPromptTokens, maxCompletionTokens, truncationStrategy, toolChoice, responseFormat, parallelToolCalls, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ClientModel.CollectionResult&lt;Azure.AI.Agents.Persistent.StreamingUpdate&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="agentId" Type="System.String" />
        <Parameter Name="overrideModelName" Type="System.String" />
        <Parameter Name="overrideInstructions" Type="System.String" />
        <Parameter Name="additionalInstructions" Type="System.String" />
        <Parameter Name="additionalMessages" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.ThreadMessageOptions&gt;" />
        <Parameter Name="overrideTools" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.ToolDefinition&gt;" />
        <Parameter Name="temperature" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="topP" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="maxPromptTokens" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxCompletionTokens" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="truncationStrategy" Type="Azure.AI.Agents.Persistent.TruncationObject" />
        <Parameter Name="toolChoice" Type="System.BinaryData" />
        <Parameter Name="responseFormat" Type="System.BinaryData" />
        <Parameter Name="parallelToolCalls" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="agentId"> The ID of the agent that should run the thread. </param>
        <param name="overrideModelName"> The overridden model name that the agent should use to run the thread. </param>
        <param name="overrideInstructions"> The overridden system instructions that the agent should use to run the thread. </param>
        <param name="additionalInstructions">
             Additional instructions to append at the end of the instructions for the run. This is useful for modifying the behavior
             on a per-run basis without overriding other instructions.
             </param>
        <param name="additionalMessages"> Adds additional messages to the thread before creating the run. </param>
        <param name="overrideTools"> The overridden list of enabled tools that the agent should use to run the thread. </param>
        <param name="temperature">
             What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output
             more random, while lower values like 0.2 will make it more focused and deterministic.
             </param>
        <param name="topP">
             An alternative to sampling with temperature, called nucleus sampling, where the model
             considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens
             comprising the top 10% probability mass are considered.
            
             We generally recommend altering this or temperature but not both.
             </param>
        <param name="maxPromptTokens">
             The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only
             the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified,
             the run will end with status `incomplete`. See `incomplete_details` for more info.
             </param>
        <param name="maxCompletionTokens">
             The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort
             to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of
             completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
             </param>
        <param name="truncationStrategy"> The strategy to use for dropping messages as the context windows moves forward. </param>
        <param name="toolChoice"> Controls whether or not and which tool is called by the model. </param>
        <param name="responseFormat"> Specifies the format that the model must output. </param>
        <param name="parallelToolCalls"> If `true` functions will run in parallel during tool use. </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
             Begins a new streaming <see cref="T:Azure.AI.Agents.Persistent.ThreadRun" /> that evaluates a <see cref="T:Azure.AI.Agents.Persistent.PersistentAgentThread" /> using a specified
             <see cref="T:Azure.AI.Agents.Persistent.PersistentAgent" />.
             </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="agentId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateRunStreamingAsync">
      <MemberSignature Language="C#" Value="public virtual System.ClientModel.AsyncCollectionResult&lt;Azure.AI.Agents.Persistent.StreamingUpdate&gt; CreateRunStreamingAsync (string threadId, string agentId, string overrideModelName = default, string overrideInstructions = default, string additionalInstructions = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.ThreadMessageOptions&gt; additionalMessages = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.ToolDefinition&gt; overrideTools = default, float? temperature = default, float? topP = default, int? maxPromptTokens = default, int? maxCompletionTokens = default, Azure.AI.Agents.Persistent.TruncationObject truncationStrategy = default, BinaryData toolChoice = default, BinaryData responseFormat = default, bool? parallelToolCalls = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ClientModel.AsyncCollectionResult`1&lt;class Azure.AI.Agents.Persistent.StreamingUpdate&gt; CreateRunStreamingAsync(string threadId, string agentId, string overrideModelName, string overrideInstructions, string additionalInstructions, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Agents.Persistent.ThreadMessageOptions&gt; additionalMessages, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Agents.Persistent.ToolDefinition&gt; overrideTools, valuetype System.Nullable`1&lt;float32&gt; temperature, valuetype System.Nullable`1&lt;float32&gt; topP, valuetype System.Nullable`1&lt;int32&gt; maxPromptTokens, valuetype System.Nullable`1&lt;int32&gt; maxCompletionTokens, class Azure.AI.Agents.Persistent.TruncationObject truncationStrategy, class System.BinaryData toolChoice, class System.BinaryData responseFormat, valuetype System.Nullable`1&lt;bool&gt; parallelToolCalls, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadRuns.CreateRunStreamingAsync(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.ThreadMessageOptions},System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.ToolDefinition},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.AI.Agents.Persistent.TruncationObject,System.BinaryData,System.BinaryData,System.Nullable{System.Boolean},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateRunStreamingAsync (threadId As String, agentId As String, Optional overrideModelName As String = Nothing, Optional overrideInstructions As String = Nothing, Optional additionalInstructions As String = Nothing, Optional additionalMessages As IEnumerable(Of ThreadMessageOptions) = Nothing, Optional overrideTools As IEnumerable(Of ToolDefinition) = Nothing, Optional temperature As Nullable(Of Single) = Nothing, Optional topP As Nullable(Of Single) = Nothing, Optional maxPromptTokens As Nullable(Of Integer) = Nothing, Optional maxCompletionTokens As Nullable(Of Integer) = Nothing, Optional truncationStrategy As TruncationObject = Nothing, Optional toolChoice As BinaryData = Nothing, Optional responseFormat As BinaryData = Nothing, Optional parallelToolCalls As Nullable(Of Boolean) = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncCollectionResult(Of StreamingUpdate)" />
      <MemberSignature Language="F#" Value="abstract member CreateRunStreamingAsync : string * string * string * string * string * seq&lt;Azure.AI.Agents.Persistent.ThreadMessageOptions&gt; * seq&lt;Azure.AI.Agents.Persistent.ToolDefinition&gt; * Nullable&lt;single&gt; * Nullable&lt;single&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.AI.Agents.Persistent.TruncationObject * BinaryData * BinaryData * Nullable&lt;bool&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.ClientModel.AsyncCollectionResult&lt;Azure.AI.Agents.Persistent.StreamingUpdate&gt;&#xA;override this.CreateRunStreamingAsync : string * string * string * string * string * seq&lt;Azure.AI.Agents.Persistent.ThreadMessageOptions&gt; * seq&lt;Azure.AI.Agents.Persistent.ToolDefinition&gt; * Nullable&lt;single&gt; * Nullable&lt;single&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.AI.Agents.Persistent.TruncationObject * BinaryData * BinaryData * Nullable&lt;bool&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.ClientModel.AsyncCollectionResult&lt;Azure.AI.Agents.Persistent.StreamingUpdate&gt;" Usage="threadRuns.CreateRunStreamingAsync (threadId, agentId, overrideModelName, overrideInstructions, additionalInstructions, additionalMessages, overrideTools, temperature, topP, maxPromptTokens, maxCompletionTokens, truncationStrategy, toolChoice, responseFormat, parallelToolCalls, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ClientModel.AsyncCollectionResult&lt;Azure.AI.Agents.Persistent.StreamingUpdate&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="agentId" Type="System.String" />
        <Parameter Name="overrideModelName" Type="System.String" />
        <Parameter Name="overrideInstructions" Type="System.String" />
        <Parameter Name="additionalInstructions" Type="System.String" />
        <Parameter Name="additionalMessages" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.ThreadMessageOptions&gt;" />
        <Parameter Name="overrideTools" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.ToolDefinition&gt;" />
        <Parameter Name="temperature" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="topP" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="maxPromptTokens" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxCompletionTokens" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="truncationStrategy" Type="Azure.AI.Agents.Persistent.TruncationObject" />
        <Parameter Name="toolChoice" Type="System.BinaryData" />
        <Parameter Name="responseFormat" Type="System.BinaryData" />
        <Parameter Name="parallelToolCalls" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="agentId"> The ID of the agent that should run the thread. </param>
        <param name="overrideModelName"> The overridden model name that the agent should use to run the thread. </param>
        <param name="overrideInstructions"> The overridden system instructions that the agent should use to run the thread. </param>
        <param name="additionalInstructions">
             Additional instructions to append at the end of the instructions for the run. This is useful for modifying the behavior
             on a per-run basis without overriding other instructions.
             </param>
        <param name="additionalMessages"> Adds additional messages to the thread before creating the run. </param>
        <param name="overrideTools"> The overridden list of enabled tools that the agent should use to run the thread. </param>
        <param name="temperature">
             What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output
             more random, while lower values like 0.2 will make it more focused and deterministic.
             </param>
        <param name="topP">
             An alternative to sampling with temperature, called nucleus sampling, where the model
             considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens
             comprising the top 10% probability mass are considered.
            
             We generally recommend altering this or temperature but not both.
             </param>
        <param name="maxPromptTokens">
             The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only
             the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified,
             the run will end with status `incomplete`. See `incomplete_details` for more info.
             </param>
        <param name="maxCompletionTokens">
             The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort
             to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of
             completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
             </param>
        <param name="truncationStrategy"> The strategy to use for dropping messages as the context windows moves forward. </param>
        <param name="toolChoice"> Controls whether or not and which tool is called by the model. </param>
        <param name="responseFormat"> Specifies the format that the model must output. </param>
        <param name="parallelToolCalls"> If `true` functions will run in parallel during tool use. </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
             Begins a new streaming <see cref="T:Azure.AI.Agents.Persistent.ThreadRun" /> that evaluates a <see cref="T:Azure.AI.Agents.Persistent.PersistentAgentThread" /> using a specified
             <see cref="T:Azure.AI.Agents.Persistent.PersistentAgent" />.
             </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="agentId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetRun (string threadId, string runId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetRun(string threadId, string runId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadRuns.GetRun(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRun (threadId As String, runId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetRun : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetRun : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="threadRuns.GetRun (threadId, runId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Identifier of the run. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets an existing run from an existing thread.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Agents.Persistent.ThreadRuns.GetRun(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="runId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt; GetRun (string threadId, string runId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.ThreadRun&gt; GetRun(string threadId, string runId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadRuns.GetRun(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRun (threadId As String, runId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ThreadRun)" />
      <MemberSignature Language="F#" Value="abstract member GetRun : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;&#xA;override this.GetRun : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;" Usage="threadRuns.GetRun (threadId, runId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Identifier of the run. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets an existing run from an existing thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="runId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetRunAsync (string threadId, string runId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetRunAsync(string threadId, string runId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadRuns.GetRunAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRunAsync (threadId As String, runId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetRunAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetRunAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="threadRuns.GetRunAsync (threadId, runId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Identifier of the run. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets an existing run from an existing thread.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Agents.Persistent.ThreadRuns.GetRunAsync(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="runId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;&gt; GetRunAsync (string threadId, string runId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.ThreadRun&gt;&gt; GetRunAsync(string threadId, string runId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadRuns.GetRunAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRunAsync (threadId As String, runId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ThreadRun))" />
      <MemberSignature Language="F#" Value="abstract member GetRunAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;&gt;&#xA;override this.GetRunAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;&gt;" Usage="threadRuns.GetRunAsync (threadId, runId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Identifier of the run. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets an existing run from an existing thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="runId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRuns">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.AI.Agents.Persistent.ThreadRun&gt; GetRuns (string threadId, int? limit = default, Azure.AI.Agents.Persistent.ListSortOrder? order = default, string after = default, string before = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.AI.Agents.Persistent.ThreadRun&gt; GetRuns(string threadId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;valuetype Azure.AI.Agents.Persistent.ListSortOrder&gt; order, string after, string before, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadRuns.GetRuns(System.String,System.Nullable{System.Int32},System.Nullable{Azure.AI.Agents.Persistent.ListSortOrder},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRuns (threadId As String, Optional limit As Nullable(Of Integer) = Nothing, Optional order As Nullable(Of ListSortOrder) = Nothing, Optional after As String = Nothing, Optional before As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of ThreadRun)" />
      <MemberSignature Language="F#" Value="abstract member GetRuns : string * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Agents.Persistent.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;&#xA;override this.GetRuns : string * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Agents.Persistent.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;" Usage="threadRuns.GetRuns (threadId, limit, order, after, before, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="order" Type="System.Nullable&lt;Azure.AI.Agents.Persistent.ListSortOrder&gt;" />
        <Parameter Name="after" Type="System.String" />
        <Parameter Name="before" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="limit"> A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        <param name="order"> Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order. </param>
        <param name="after"> A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. </param>
        <param name="before"> A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets a list of runs for a specified thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRunsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.AI.Agents.Persistent.ThreadRun&gt; GetRunsAsync (string threadId, int? limit = default, Azure.AI.Agents.Persistent.ListSortOrder? order = default, string after = default, string before = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.AI.Agents.Persistent.ThreadRun&gt; GetRunsAsync(string threadId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;valuetype Azure.AI.Agents.Persistent.ListSortOrder&gt; order, string after, string before, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadRuns.GetRunsAsync(System.String,System.Nullable{System.Int32},System.Nullable{Azure.AI.Agents.Persistent.ListSortOrder},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRunsAsync (threadId As String, Optional limit As Nullable(Of Integer) = Nothing, Optional order As Nullable(Of ListSortOrder) = Nothing, Optional after As String = Nothing, Optional before As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of ThreadRun)" />
      <MemberSignature Language="F#" Value="abstract member GetRunsAsync : string * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Agents.Persistent.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;&#xA;override this.GetRunsAsync : string * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Agents.Persistent.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;" Usage="threadRuns.GetRunsAsync (threadId, limit, order, after, before, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="order" Type="System.Nullable&lt;Azure.AI.Agents.Persistent.ListSortOrder&gt;" />
        <Parameter Name="after" Type="System.String" />
        <Parameter Name="before" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="limit"> A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        <param name="order"> Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order. </param>
        <param name="after"> A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. </param>
        <param name="before"> A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets a list of runs for a specified thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.AI.Agents.Persistent.ThreadRuns.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.AI.Agents.Persistent.ThreadRuns.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubmitToolOutputsToRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt; SubmitToolOutputsToRun (Azure.AI.Agents.Persistent.ThreadRun run, System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.ToolOutput&gt; toolOutputs, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.ThreadRun&gt; SubmitToolOutputsToRun(class Azure.AI.Agents.Persistent.ThreadRun run, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Agents.Persistent.ToolOutput&gt; toolOutputs, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadRuns.SubmitToolOutputsToRun(Azure.AI.Agents.Persistent.ThreadRun,System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.ToolOutput},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SubmitToolOutputsToRun (run As ThreadRun, toolOutputs As IEnumerable(Of ToolOutput), Optional cancellationToken As CancellationToken = Nothing) As Response(Of ThreadRun)" />
      <MemberSignature Language="F#" Value="abstract member SubmitToolOutputsToRun : Azure.AI.Agents.Persistent.ThreadRun * seq&lt;Azure.AI.Agents.Persistent.ToolOutput&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;&#xA;override this.SubmitToolOutputsToRun : Azure.AI.Agents.Persistent.ThreadRun * seq&lt;Azure.AI.Agents.Persistent.ToolOutput&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;" Usage="threadRuns.SubmitToolOutputsToRun (run, toolOutputs, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="run" Type="Azure.AI.Agents.Persistent.ThreadRun" />
        <Parameter Name="toolOutputs" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.ToolOutput&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="run"> The <see cref="T:Azure.AI.Agents.Persistent.ThreadRun" /> that the tool outputs should be submitted to. </param>
        <param name="toolOutputs"> The list of tool call outputs to provide as part of an output submission to an agent thread run. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Submits outputs from tool calls as requested by a run with a status of 'requires_action' with required_action.type of 'submit_tool_outputs'. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="run" />  is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="SubmitToolOutputsToRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Response SubmitToolOutputsToRun (string threadId, string runId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response SubmitToolOutputsToRun(string threadId, string runId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadRuns.SubmitToolOutputsToRun(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SubmitToolOutputsToRun (threadId As String, runId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member SubmitToolOutputsToRun : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.SubmitToolOutputsToRun : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="threadRuns.SubmitToolOutputsToRun (threadId, runId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Identifier of the run. </param>
        <param name="content"> Serialized json contents. </param>
        <param name="context"> Options that can be used to control the request. </param>
        <summary> Submits outputs from tools as requested by tool calls in a stream. Stream updates that need submitted tool outputs will have a status of 'RunStatus.RequiresAction'. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" />, <paramref name="runId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="SubmitToolOutputsToRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;&gt; SubmitToolOutputsToRunAsync (Azure.AI.Agents.Persistent.ThreadRun run, System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.ToolOutput&gt; toolOutputs, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.ThreadRun&gt;&gt; SubmitToolOutputsToRunAsync(class Azure.AI.Agents.Persistent.ThreadRun run, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Agents.Persistent.ToolOutput&gt; toolOutputs, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadRuns.SubmitToolOutputsToRunAsync(Azure.AI.Agents.Persistent.ThreadRun,System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.ToolOutput},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SubmitToolOutputsToRunAsync (run As ThreadRun, toolOutputs As IEnumerable(Of ToolOutput), Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ThreadRun))" />
      <MemberSignature Language="F#" Value="abstract member SubmitToolOutputsToRunAsync : Azure.AI.Agents.Persistent.ThreadRun * seq&lt;Azure.AI.Agents.Persistent.ToolOutput&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;&gt;&#xA;override this.SubmitToolOutputsToRunAsync : Azure.AI.Agents.Persistent.ThreadRun * seq&lt;Azure.AI.Agents.Persistent.ToolOutput&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;&gt;" Usage="threadRuns.SubmitToolOutputsToRunAsync (run, toolOutputs, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="run" Type="Azure.AI.Agents.Persistent.ThreadRun" />
        <Parameter Name="toolOutputs" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.ToolOutput&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="run"> The <see cref="T:Azure.AI.Agents.Persistent.ThreadRun" /> that the tool outputs should be submitted to. </param>
        <param name="toolOutputs"> The list of tool call outputs to provide as part of an output submission to an agent thread run. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Submits outputs from tool calls as requested by a run with a status of 'requires_action' with required_action.type of 'submit_tool_outputs'. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="run" />  is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="SubmitToolOutputsToRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; SubmitToolOutputsToRunAsync (string threadId, string runId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; SubmitToolOutputsToRunAsync(string threadId, string runId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadRuns.SubmitToolOutputsToRunAsync(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SubmitToolOutputsToRunAsync (threadId As String, runId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member SubmitToolOutputsToRunAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.SubmitToolOutputsToRunAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="threadRuns.SubmitToolOutputsToRunAsync (threadId, runId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Identifier of the run. </param>
        <param name="content"> Serialized json contents. </param>
        <param name="context"> Options that can be used to control the request. </param>
        <summary> Submits outputs from tools as requested by tool calls in a stream. Stream updates that need submitted tool outputs will have a status of 'RunStatus.RequiresAction'. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" />, <paramref name="runId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="SubmitToolOutputsToStream">
      <MemberSignature Language="C#" Value="public virtual System.ClientModel.CollectionResult&lt;Azure.AI.Agents.Persistent.StreamingUpdate&gt; SubmitToolOutputsToStream (Azure.AI.Agents.Persistent.ThreadRun run, System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.ToolOutput&gt; toolOutputs, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ClientModel.CollectionResult`1&lt;class Azure.AI.Agents.Persistent.StreamingUpdate&gt; SubmitToolOutputsToStream(class Azure.AI.Agents.Persistent.ThreadRun run, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Agents.Persistent.ToolOutput&gt; toolOutputs, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadRuns.SubmitToolOutputsToStream(Azure.AI.Agents.Persistent.ThreadRun,System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.ToolOutput},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SubmitToolOutputsToStream (run As ThreadRun, toolOutputs As IEnumerable(Of ToolOutput), Optional cancellationToken As CancellationToken = Nothing) As CollectionResult(Of StreamingUpdate)" />
      <MemberSignature Language="F#" Value="abstract member SubmitToolOutputsToStream : Azure.AI.Agents.Persistent.ThreadRun * seq&lt;Azure.AI.Agents.Persistent.ToolOutput&gt; * System.Threading.CancellationToken -&gt; System.ClientModel.CollectionResult&lt;Azure.AI.Agents.Persistent.StreamingUpdate&gt;&#xA;override this.SubmitToolOutputsToStream : Azure.AI.Agents.Persistent.ThreadRun * seq&lt;Azure.AI.Agents.Persistent.ToolOutput&gt; * System.Threading.CancellationToken -&gt; System.ClientModel.CollectionResult&lt;Azure.AI.Agents.Persistent.StreamingUpdate&gt;" Usage="threadRuns.SubmitToolOutputsToStream (run, toolOutputs, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ClientModel.CollectionResult&lt;Azure.AI.Agents.Persistent.StreamingUpdate&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="run" Type="Azure.AI.Agents.Persistent.ThreadRun" />
        <Parameter Name="toolOutputs" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.ToolOutput&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="run"> The <see cref="T:Azure.AI.Agents.Persistent.ThreadRun" /> that the tool outputs should be submitted to. </param>
        <param name="toolOutputs"> A list of tools for which the outputs are being submitted. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Submits outputs from tools as requested by tool calls in a stream. Stream updates that need submitted tool outputs will have a status of 'RunStatus.RequiresAction'. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="run" /> or <paramref name="toolOutputs" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="SubmitToolOutputsToStreamAsync">
      <MemberSignature Language="C#" Value="public virtual System.ClientModel.AsyncCollectionResult&lt;Azure.AI.Agents.Persistent.StreamingUpdate&gt; SubmitToolOutputsToStreamAsync (Azure.AI.Agents.Persistent.ThreadRun run, System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.ToolOutput&gt; toolOutputs, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ClientModel.AsyncCollectionResult`1&lt;class Azure.AI.Agents.Persistent.StreamingUpdate&gt; SubmitToolOutputsToStreamAsync(class Azure.AI.Agents.Persistent.ThreadRun run, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Agents.Persistent.ToolOutput&gt; toolOutputs, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadRuns.SubmitToolOutputsToStreamAsync(Azure.AI.Agents.Persistent.ThreadRun,System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.ToolOutput},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SubmitToolOutputsToStreamAsync (run As ThreadRun, toolOutputs As IEnumerable(Of ToolOutput), Optional cancellationToken As CancellationToken = Nothing) As AsyncCollectionResult(Of StreamingUpdate)" />
      <MemberSignature Language="F#" Value="abstract member SubmitToolOutputsToStreamAsync : Azure.AI.Agents.Persistent.ThreadRun * seq&lt;Azure.AI.Agents.Persistent.ToolOutput&gt; * System.Threading.CancellationToken -&gt; System.ClientModel.AsyncCollectionResult&lt;Azure.AI.Agents.Persistent.StreamingUpdate&gt;&#xA;override this.SubmitToolOutputsToStreamAsync : Azure.AI.Agents.Persistent.ThreadRun * seq&lt;Azure.AI.Agents.Persistent.ToolOutput&gt; * System.Threading.CancellationToken -&gt; System.ClientModel.AsyncCollectionResult&lt;Azure.AI.Agents.Persistent.StreamingUpdate&gt;" Usage="threadRuns.SubmitToolOutputsToStreamAsync (run, toolOutputs, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ClientModel.AsyncCollectionResult&lt;Azure.AI.Agents.Persistent.StreamingUpdate&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="run" Type="Azure.AI.Agents.Persistent.ThreadRun" />
        <Parameter Name="toolOutputs" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.ToolOutput&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="run"> The <see cref="T:Azure.AI.Agents.Persistent.ThreadRun" /> that the tool outputs should be submitted to. </param>
        <param name="toolOutputs"> A list of tools for which the outputs are being submitted. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Submits outputs from tools as requested by tool calls in a stream. Stream updates that need submitted tool outputs will have a status of 'RunStatus.RequiresAction'. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="run" /> or <paramref name="toolOutputs" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateRun (string threadId, string runId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateRun(string threadId, string runId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadRuns.UpdateRun(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateRun (threadId As String, runId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateRun : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.UpdateRun : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="threadRuns.UpdateRun (threadId, runId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Identifier of the run. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Modifies an existing thread run.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Agents.Persistent.ThreadRuns.UpdateRun(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" />, <paramref name="runId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt; UpdateRun (string threadId, string runId, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.ThreadRun&gt; UpdateRun(string threadId, string runId, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadRuns.UpdateRun(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateRun (threadId As String, runId As String, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ThreadRun)" />
      <MemberSignature Language="F#" Value="abstract member UpdateRun : string * string * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;&#xA;override this.UpdateRun : string * string * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;" Usage="threadRuns.UpdateRun (threadId, runId, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Identifier of the run. </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Modifies an existing thread run. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="runId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateRunAsync (string threadId, string runId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateRunAsync(string threadId, string runId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadRuns.UpdateRunAsync(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateRunAsync (threadId As String, runId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateRunAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateRunAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="threadRuns.UpdateRunAsync (threadId, runId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Identifier of the run. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Modifies an existing thread run.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Agents.Persistent.ThreadRuns.UpdateRunAsync(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" />, <paramref name="runId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;&gt; UpdateRunAsync (string threadId, string runId, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.ThreadRun&gt;&gt; UpdateRunAsync(string threadId, string runId, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadRuns.UpdateRunAsync(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateRunAsync (threadId As String, runId As String, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ThreadRun))" />
      <MemberSignature Language="F#" Value="abstract member UpdateRunAsync : string * string * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;&gt;&#xA;override this.UpdateRunAsync : string * string * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;&gt;" Usage="threadRuns.UpdateRunAsync (threadId, runId, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.ThreadRun&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Identifier of the run. </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Modifies an existing thread run. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="runId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
