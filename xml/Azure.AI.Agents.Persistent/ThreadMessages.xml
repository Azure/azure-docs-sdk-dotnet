<Type Name="ThreadMessages" FullName="Azure.AI.Agents.Persistent.ThreadMessages">
  <TypeSignature Language="C#" Value="public class ThreadMessages" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ThreadMessages extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.AI.Agents.Persistent.ThreadMessages" />
  <TypeSignature Language="VB.NET" Value="Public Class ThreadMessages" />
  <TypeSignature Language="F#" Value="type ThreadMessages = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> A collection of message operations under `/threads/{threadId}/messages`. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ThreadMessages ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadMessages.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of ThreadMessages for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMessage">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateMessage (string threadId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateMessage(string threadId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadMessages.CreateMessage(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateMessage (threadId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateMessage : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateMessage : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="threadMessages.CreateMessage (threadId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates a new message on a specified thread.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Agents.Persistent.ThreadMessages.CreateMessage(System.String,Azure.AI.Agents.Persistent.MessageRole,System.BinaryData,System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.MessageAttachment},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateMessage">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt; CreateMessage (string threadId, Azure.AI.Agents.Persistent.MessageRole role, BinaryData content, System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.MessageAttachment&gt; attachments = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.PersistentThreadMessage&gt; CreateMessage(string threadId, valuetype Azure.AI.Agents.Persistent.MessageRole role, class System.BinaryData content, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Agents.Persistent.MessageAttachment&gt; attachments, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadMessages.CreateMessage(System.String,Azure.AI.Agents.Persistent.MessageRole,System.BinaryData,System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.MessageAttachment},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateMessage (threadId As String, role As MessageRole, content As BinaryData, Optional attachments As IEnumerable(Of MessageAttachment) = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of PersistentThreadMessage)" />
      <MemberSignature Language="F#" Value="abstract member CreateMessage : string * Azure.AI.Agents.Persistent.MessageRole * BinaryData * seq&lt;Azure.AI.Agents.Persistent.MessageAttachment&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;&#xA;override this.CreateMessage : string * Azure.AI.Agents.Persistent.MessageRole * BinaryData * seq&lt;Azure.AI.Agents.Persistent.MessageAttachment&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;" Usage="threadMessages.CreateMessage (threadId, role, content, attachments, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="role" Type="Azure.AI.Agents.Persistent.MessageRole" />
        <Parameter Name="content" Type="System.BinaryData" />
        <Parameter Name="attachments" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.MessageAttachment&gt;" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="role">
            The role of the entity that is creating the message. Allowed values include:
            `user`, which indicates the message is sent by an actual user (and should be
            used in most cases to represent user-generated messages), and `assistant`,
            which indicates the message is generated by the agent (use this value to insert
            messages from the agent into the conversation).
            </param>
        <param name="content">
            The content of the initial message. This may be a basic string (if you only
            need text) or an array of typed content blocks (for example, text, image_file,
            image_url, and so on).
            </param>
        <param name="attachments"> A list of files attached to the message, and the tools they should be added to. </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a new message on a specified thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateMessage">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt; CreateMessage (string threadId, Azure.AI.Agents.Persistent.MessageRole role, System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.MessageInputContentBlock&gt; contentBlocks, System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.MessageAttachment&gt; attachments = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.PersistentThreadMessage&gt; CreateMessage(string threadId, valuetype Azure.AI.Agents.Persistent.MessageRole role, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Agents.Persistent.MessageInputContentBlock&gt; contentBlocks, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Agents.Persistent.MessageAttachment&gt; attachments, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadMessages.CreateMessage(System.String,Azure.AI.Agents.Persistent.MessageRole,System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.MessageInputContentBlock},System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.MessageAttachment},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateMessage (threadId As String, role As MessageRole, contentBlocks As IEnumerable(Of MessageInputContentBlock), Optional attachments As IEnumerable(Of MessageAttachment) = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of PersistentThreadMessage)" />
      <MemberSignature Language="F#" Value="abstract member CreateMessage : string * Azure.AI.Agents.Persistent.MessageRole * seq&lt;Azure.AI.Agents.Persistent.MessageInputContentBlock&gt; * seq&lt;Azure.AI.Agents.Persistent.MessageAttachment&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;&#xA;override this.CreateMessage : string * Azure.AI.Agents.Persistent.MessageRole * seq&lt;Azure.AI.Agents.Persistent.MessageInputContentBlock&gt; * seq&lt;Azure.AI.Agents.Persistent.MessageAttachment&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;" Usage="threadMessages.CreateMessage (threadId, role, contentBlocks, attachments, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="role" Type="Azure.AI.Agents.Persistent.MessageRole" />
        <Parameter Name="contentBlocks" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.MessageInputContentBlock&gt;" />
        <Parameter Name="attachments" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.MessageAttachment&gt;" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId">Identifier of the thread.</param>
        <param name="role">
            The role of the entity creating the message. For instance:
            - <c>MessageRole.User</c>: an actual user message
            - <c>MessageRole.Agent</c>: an agent-generated response.
            </param>
        <param name="contentBlocks">
            A collection of specialized content blocks (e.g. <see cref="T:Azure.AI.Agents.Persistent.MessageInputTextBlock" />,
            <see cref="T:Azure.AI.Agents.Persistent.MessageInputImageUriBlock" />, <see cref="T:Azure.AI.Agents.Persistent.MessageInputImageFileBlock" />, etc.).
            </param>
        <param name="attachments">An optional list of files attached to the message.</param>
        <param name="metadata">Optional metadata as key/value pairs.</param>
        <param name="cancellationToken">The cancellation token.</param>
        <summary>
            Synchronous variant of <see cref="M:Azure.AI.Agents.Persistent.ThreadMessages.CreateMessageAsync(System.String,Azure.AI.Agents.Persistent.MessageRole,System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.MessageInputContentBlock},System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.MessageAttachment},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />.
            Creates a new message using multiple structured content blocks.
            </summary>
        <returns>A <see cref="T:Azure.AI.Agents.Persistent.PersistentThreadMessage" /> encapsulating the newly created message.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="threadId" /> is null or empty, or if <paramref name="contentBlocks" /> is null.
            </exception>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="threadId" /> is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateMessage">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt; CreateMessage (string threadId, Azure.AI.Agents.Persistent.MessageRole role, string content, System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.MessageAttachment&gt; attachments = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.PersistentThreadMessage&gt; CreateMessage(string threadId, valuetype Azure.AI.Agents.Persistent.MessageRole role, string content, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Agents.Persistent.MessageAttachment&gt; attachments, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadMessages.CreateMessage(System.String,Azure.AI.Agents.Persistent.MessageRole,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.MessageAttachment},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateMessage (threadId As String, role As MessageRole, content As String, Optional attachments As IEnumerable(Of MessageAttachment) = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of PersistentThreadMessage)" />
      <MemberSignature Language="F#" Value="abstract member CreateMessage : string * Azure.AI.Agents.Persistent.MessageRole * string * seq&lt;Azure.AI.Agents.Persistent.MessageAttachment&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;&#xA;override this.CreateMessage : string * Azure.AI.Agents.Persistent.MessageRole * string * seq&lt;Azure.AI.Agents.Persistent.MessageAttachment&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;" Usage="threadMessages.CreateMessage (threadId, role, content, attachments, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="role" Type="Azure.AI.Agents.Persistent.MessageRole" />
        <Parameter Name="content" Type="System.String" />
        <Parameter Name="attachments" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.MessageAttachment&gt;" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId">Identifier of the thread.</param>
        <param name="role">
            The role of the entity that is creating the message. Allowed values include:
            - <c>user</c>: Indicates the message is sent by an actual user.
            - <c>assistant</c>: Indicates the message is generated by the agent.
            </param>
        <param name="content">The plain text content of the message.</param>
        <param name="attachments">An optional list of files attached to the message.</param>
        <param name="metadata">Optional metadata as key/value pairs.</param>
        <param name="cancellationToken">The cancellation token.</param>
        <summary>
            Synchronous variant of <see cref="M:Azure.AI.Agents.Persistent.ThreadMessages.CreateMessageAsync(System.String,Azure.AI.Agents.Persistent.MessageRole,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.MessageAttachment},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />.
            </summary>
        <returns>The newly created <see cref="T:Azure.AI.Agents.Persistent.PersistentThreadMessage" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="threadId" /> or <paramref name="content" /> is null.</exception>
        <exception cref="T:System.ArgumentException">Thrown when <paramref name="threadId" /> is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateMessageAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateMessageAsync (string threadId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateMessageAsync(string threadId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadMessages.CreateMessageAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateMessageAsync (threadId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateMessageAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateMessageAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="threadMessages.CreateMessageAsync (threadId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates a new message on a specified thread.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Agents.Persistent.ThreadMessages.CreateMessageAsync(System.String,Azure.AI.Agents.Persistent.MessageRole,System.BinaryData,System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.MessageAttachment},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateMessageAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;&gt; CreateMessageAsync (string threadId, Azure.AI.Agents.Persistent.MessageRole role, BinaryData content, System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.MessageAttachment&gt; attachments = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;&gt; CreateMessageAsync(string threadId, valuetype Azure.AI.Agents.Persistent.MessageRole role, class System.BinaryData content, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Agents.Persistent.MessageAttachment&gt; attachments, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadMessages.CreateMessageAsync(System.String,Azure.AI.Agents.Persistent.MessageRole,System.BinaryData,System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.MessageAttachment},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateMessageAsync (threadId As String, role As MessageRole, content As BinaryData, Optional attachments As IEnumerable(Of MessageAttachment) = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of PersistentThreadMessage))" />
      <MemberSignature Language="F#" Value="abstract member CreateMessageAsync : string * Azure.AI.Agents.Persistent.MessageRole * BinaryData * seq&lt;Azure.AI.Agents.Persistent.MessageAttachment&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;&gt;&#xA;override this.CreateMessageAsync : string * Azure.AI.Agents.Persistent.MessageRole * BinaryData * seq&lt;Azure.AI.Agents.Persistent.MessageAttachment&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;&gt;" Usage="threadMessages.CreateMessageAsync (threadId, role, content, attachments, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="role" Type="Azure.AI.Agents.Persistent.MessageRole" />
        <Parameter Name="content" Type="System.BinaryData" />
        <Parameter Name="attachments" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.MessageAttachment&gt;" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="role">
            The role of the entity that is creating the message. Allowed values include:
            `user`, which indicates the message is sent by an actual user (and should be
            used in most cases to represent user-generated messages), and `assistant`,
            which indicates the message is generated by the agent (use this value to insert
            messages from the agent into the conversation).
            </param>
        <param name="content">
            The content of the initial message. This may be a basic string (if you only
            need text) or an array of typed content blocks (for example, text, image_file,
            image_url, and so on).
            </param>
        <param name="attachments"> A list of files attached to the message, and the tools they should be added to. </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a new message on a specified thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateMessageAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;&gt; CreateMessageAsync (string threadId, Azure.AI.Agents.Persistent.MessageRole role, System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.MessageInputContentBlock&gt; contentBlocks, System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.MessageAttachment&gt; attachments = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;&gt; CreateMessageAsync(string threadId, valuetype Azure.AI.Agents.Persistent.MessageRole role, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Agents.Persistent.MessageInputContentBlock&gt; contentBlocks, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Agents.Persistent.MessageAttachment&gt; attachments, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadMessages.CreateMessageAsync(System.String,Azure.AI.Agents.Persistent.MessageRole,System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.MessageInputContentBlock},System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.MessageAttachment},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateMessageAsync (threadId As String, role As MessageRole, contentBlocks As IEnumerable(Of MessageInputContentBlock), Optional attachments As IEnumerable(Of MessageAttachment) = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of PersistentThreadMessage))" />
      <MemberSignature Language="F#" Value="abstract member CreateMessageAsync : string * Azure.AI.Agents.Persistent.MessageRole * seq&lt;Azure.AI.Agents.Persistent.MessageInputContentBlock&gt; * seq&lt;Azure.AI.Agents.Persistent.MessageAttachment&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;&gt;&#xA;override this.CreateMessageAsync : string * Azure.AI.Agents.Persistent.MessageRole * seq&lt;Azure.AI.Agents.Persistent.MessageInputContentBlock&gt; * seq&lt;Azure.AI.Agents.Persistent.MessageAttachment&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;&gt;" Usage="threadMessages.CreateMessageAsync (threadId, role, contentBlocks, attachments, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="role" Type="Azure.AI.Agents.Persistent.MessageRole" />
        <Parameter Name="contentBlocks" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.MessageInputContentBlock&gt;" />
        <Parameter Name="attachments" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.MessageAttachment&gt;" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId">Identifier of the thread.</param>
        <param name="role">
            The role of the entity creating the message. For instance:
            - <c>MessageRole.User</c>: an actual user message
            - <c>MessageRole.Agent</c>: an agent-generated response
            </param>
        <param name="contentBlocks">
            A collection of specialized content blocks (e.g. <see cref="T:Azure.AI.Agents.Persistent.MessageInputTextBlock" />,
            <see cref="T:Azure.AI.Agents.Persistent.MessageInputImageUriBlock" />, <see cref="T:Azure.AI.Agents.Persistent.MessageInputImageFileBlock" />, etc.).
            </param>
        <param name="attachments">An optional list of files attached to the message.</param>
        <param name="metadata">Optional metadata as key/value pairs.</param>
        <param name="cancellationToken">The cancellation token.</param>
        <summary>
            Creates a new message on a specified thread using a collection of content blocks,
            such as text or image references.
            </summary>
        <returns>A <see cref="T:Azure.AI.Agents.Persistent.PersistentThreadMessage" /> encapsulating the newly created message.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="threadId" /> is null or empty, or if <paramref name="contentBlocks" /> is null.
            </exception>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="threadId" /> is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateMessageAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;&gt; CreateMessageAsync (string threadId, Azure.AI.Agents.Persistent.MessageRole role, string content, System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.MessageAttachment&gt; attachments = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;&gt; CreateMessageAsync(string threadId, valuetype Azure.AI.Agents.Persistent.MessageRole role, string content, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Agents.Persistent.MessageAttachment&gt; attachments, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadMessages.CreateMessageAsync(System.String,Azure.AI.Agents.Persistent.MessageRole,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.MessageAttachment},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateMessageAsync (threadId As String, role As MessageRole, content As String, Optional attachments As IEnumerable(Of MessageAttachment) = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of PersistentThreadMessage))" />
      <MemberSignature Language="F#" Value="abstract member CreateMessageAsync : string * Azure.AI.Agents.Persistent.MessageRole * string * seq&lt;Azure.AI.Agents.Persistent.MessageAttachment&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;&gt;&#xA;override this.CreateMessageAsync : string * Azure.AI.Agents.Persistent.MessageRole * string * seq&lt;Azure.AI.Agents.Persistent.MessageAttachment&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;&gt;" Usage="threadMessages.CreateMessageAsync (threadId, role, content, attachments, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="role" Type="Azure.AI.Agents.Persistent.MessageRole" />
        <Parameter Name="content" Type="System.String" />
        <Parameter Name="attachments" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.MessageAttachment&gt;" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId">Identifier of the thread.</param>
        <param name="role">
            The role of the entity that is creating the message. Allowed values include:
            - <c>user</c>: Indicates the message is sent by an actual user.
            - <c>assistant</c>: Indicates the message is generated by the agent.
            </param>
        <param name="content">The plain text content of the message.</param>
        <param name="attachments">An optional list of files attached to the message.</param>
        <param name="metadata">Optional metadata as key/value pairs.</param>
        <param name="cancellationToken">The cancellation token.</param>
        <summary>
            Creates a new message on a specified thread, accepting a simple textual content string.
            This API overload matches the original user experience of providing a plain string.
            </summary>
        <returns>The newly created <see cref="T:Azure.AI.Agents.Persistent.PersistentThreadMessage" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="threadId" /> or <paramref name="content" /> is null.</exception>
        <exception cref="T:System.ArgumentException">Thrown when <paramref name="threadId" /> is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetMessage">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetMessage (string threadId, string messageId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetMessage(string threadId, string messageId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadMessages.GetMessage(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMessage (threadId As String, messageId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetMessage : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetMessage : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="threadMessages.GetMessage (threadId, messageId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="messageId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="messageId"> Identifier of the message. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves an existing message.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Agents.Persistent.ThreadMessages.GetMessage(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="messageId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="messageId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMessage">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt; GetMessage (string threadId, string messageId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.PersistentThreadMessage&gt; GetMessage(string threadId, string messageId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadMessages.GetMessage(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMessage (threadId As String, messageId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of PersistentThreadMessage)" />
      <MemberSignature Language="F#" Value="abstract member GetMessage : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;&#xA;override this.GetMessage : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;" Usage="threadMessages.GetMessage (threadId, messageId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="messageId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="messageId"> Identifier of the message. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves an existing message. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="messageId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="messageId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMessageAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetMessageAsync (string threadId, string messageId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetMessageAsync(string threadId, string messageId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadMessages.GetMessageAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMessageAsync (threadId As String, messageId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetMessageAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetMessageAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="threadMessages.GetMessageAsync (threadId, messageId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="messageId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="messageId"> Identifier of the message. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves an existing message.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Agents.Persistent.ThreadMessages.GetMessageAsync(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="messageId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="messageId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMessageAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;&gt; GetMessageAsync (string threadId, string messageId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;&gt; GetMessageAsync(string threadId, string messageId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadMessages.GetMessageAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMessageAsync (threadId As String, messageId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of PersistentThreadMessage))" />
      <MemberSignature Language="F#" Value="abstract member GetMessageAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;&gt;&#xA;override this.GetMessageAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;&gt;" Usage="threadMessages.GetMessageAsync (threadId, messageId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="messageId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="messageId"> Identifier of the message. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves an existing message. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="messageId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="messageId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMessages">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt; GetMessages (string threadId, string runId = default, int? limit = default, Azure.AI.Agents.Persistent.ListSortOrder? order = default, string after = default, string before = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.AI.Agents.Persistent.PersistentThreadMessage&gt; GetMessages(string threadId, string runId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;valuetype Azure.AI.Agents.Persistent.ListSortOrder&gt; order, string after, string before, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadMessages.GetMessages(System.String,System.String,System.Nullable{System.Int32},System.Nullable{Azure.AI.Agents.Persistent.ListSortOrder},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMessages (threadId As String, Optional runId As String = Nothing, Optional limit As Nullable(Of Integer) = Nothing, Optional order As Nullable(Of ListSortOrder) = Nothing, Optional after As String = Nothing, Optional before As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of PersistentThreadMessage)" />
      <MemberSignature Language="F#" Value="abstract member GetMessages : string * string * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Agents.Persistent.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;&#xA;override this.GetMessages : string * string * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Agents.Persistent.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;" Usage="threadMessages.GetMessages (threadId, runId, limit, order, after, before, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="order" Type="System.Nullable&lt;Azure.AI.Agents.Persistent.ListSortOrder&gt;" />
        <Parameter Name="after" Type="System.String" />
        <Parameter Name="before" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Filter messages by the run ID that generated them. </param>
        <param name="limit"> A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        <param name="order"> Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order. </param>
        <param name="after"> A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. </param>
        <param name="before"> A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets a list of messages that exist on a thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMessagesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt; GetMessagesAsync (string threadId, string runId = default, int? limit = default, Azure.AI.Agents.Persistent.ListSortOrder? order = default, string after = default, string before = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.AI.Agents.Persistent.PersistentThreadMessage&gt; GetMessagesAsync(string threadId, string runId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;valuetype Azure.AI.Agents.Persistent.ListSortOrder&gt; order, string after, string before, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadMessages.GetMessagesAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{Azure.AI.Agents.Persistent.ListSortOrder},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMessagesAsync (threadId As String, Optional runId As String = Nothing, Optional limit As Nullable(Of Integer) = Nothing, Optional order As Nullable(Of ListSortOrder) = Nothing, Optional after As String = Nothing, Optional before As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of PersistentThreadMessage)" />
      <MemberSignature Language="F#" Value="abstract member GetMessagesAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Agents.Persistent.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;&#xA;override this.GetMessagesAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Agents.Persistent.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;" Usage="threadMessages.GetMessagesAsync (threadId, runId, limit, order, after, before, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="order" Type="System.Nullable&lt;Azure.AI.Agents.Persistent.ListSortOrder&gt;" />
        <Parameter Name="after" Type="System.String" />
        <Parameter Name="before" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Filter messages by the run ID that generated them. </param>
        <param name="limit"> A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        <param name="order"> Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order. </param>
        <param name="after"> A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. </param>
        <param name="before"> A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets a list of messages that exist on a thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.AI.Agents.Persistent.ThreadMessages.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.AI.Agents.Persistent.ThreadMessages.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateMessage">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateMessage (string threadId, string messageId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateMessage(string threadId, string messageId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadMessages.UpdateMessage(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateMessage (threadId As String, messageId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateMessage : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.UpdateMessage : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="threadMessages.UpdateMessage (threadId, messageId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="messageId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="messageId"> Identifier of the message. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Modifies an existing message on an existing thread.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Agents.Persistent.ThreadMessages.UpdateMessage(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" />, <paramref name="messageId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="messageId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateMessage">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt; UpdateMessage (string threadId, string messageId, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.PersistentThreadMessage&gt; UpdateMessage(string threadId, string messageId, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadMessages.UpdateMessage(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateMessage (threadId As String, messageId As String, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of PersistentThreadMessage)" />
      <MemberSignature Language="F#" Value="abstract member UpdateMessage : string * string * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;&#xA;override this.UpdateMessage : string * string * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;" Usage="threadMessages.UpdateMessage (threadId, messageId, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="messageId" Type="System.String" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="messageId"> Identifier of the message. </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Modifies an existing message on an existing thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="messageId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="messageId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateMessageAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateMessageAsync (string threadId, string messageId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateMessageAsync(string threadId, string messageId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadMessages.UpdateMessageAsync(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateMessageAsync (threadId As String, messageId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateMessageAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateMessageAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="threadMessages.UpdateMessageAsync (threadId, messageId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="messageId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="messageId"> Identifier of the message. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Modifies an existing message on an existing thread.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Agents.Persistent.ThreadMessages.UpdateMessageAsync(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" />, <paramref name="messageId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="messageId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateMessageAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;&gt; UpdateMessageAsync (string threadId, string messageId, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;&gt; UpdateMessageAsync(string threadId, string messageId, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.ThreadMessages.UpdateMessageAsync(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateMessageAsync (threadId As String, messageId As String, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of PersistentThreadMessage))" />
      <MemberSignature Language="F#" Value="abstract member UpdateMessageAsync : string * string * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;&gt;&#xA;override this.UpdateMessageAsync : string * string * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;&gt;" Usage="threadMessages.UpdateMessageAsync (threadId, messageId, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentThreadMessage&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="messageId" Type="System.String" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="messageId"> Identifier of the message. </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Modifies an existing message on an existing thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="messageId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="messageId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
