<Type Name="VectorStoreFileBatches" FullName="Azure.AI.Agents.Persistent.VectorStoreFileBatches">
  <TypeSignature Language="C#" Value="public class VectorStoreFileBatches" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit VectorStoreFileBatches extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.AI.Agents.Persistent.VectorStoreFileBatches" />
  <TypeSignature Language="VB.NET" Value="Public Class VectorStoreFileBatches" />
  <TypeSignature Language="F#" Value="type VectorStoreFileBatches = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A collection of file-batch operations under
            `/vector_stores/{vectorStoreId}/file_batches`.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected VectorStoreFileBatches ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.VectorStoreFileBatches.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of VectorStoreFileBatches for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelVectorStoreFileBatch">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CancelVectorStoreFileBatch (string vectorStoreId, string batchId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CancelVectorStoreFileBatch(string vectorStoreId, string batchId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.VectorStoreFileBatches.CancelVectorStoreFileBatch(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CancelVectorStoreFileBatch (vectorStoreId As String, batchId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member CancelVectorStoreFileBatch : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CancelVectorStoreFileBatch : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="vectorStoreFileBatches.CancelVectorStoreFileBatch (vectorStoreId, batchId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="batchId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="batchId"> Identifier of the file batch. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Agents.Persistent.VectorStoreFileBatches.CancelVectorStoreFileBatch(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CancelVectorStoreFileBatch">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFileBatch&gt; CancelVectorStoreFileBatch (string vectorStoreId, string batchId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.VectorStoreFileBatch&gt; CancelVectorStoreFileBatch(string vectorStoreId, string batchId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.VectorStoreFileBatches.CancelVectorStoreFileBatch(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CancelVectorStoreFileBatch (vectorStoreId As String, batchId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of VectorStoreFileBatch)" />
      <MemberSignature Language="F#" Value="abstract member CancelVectorStoreFileBatch : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFileBatch&gt;&#xA;override this.CancelVectorStoreFileBatch : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFileBatch&gt;" Usage="vectorStoreFileBatches.CancelVectorStoreFileBatch (vectorStoreId, batchId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFileBatch&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="batchId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="batchId"> Identifier of the file batch. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="CancelVectorStoreFileBatchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CancelVectorStoreFileBatchAsync (string vectorStoreId, string batchId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CancelVectorStoreFileBatchAsync(string vectorStoreId, string batchId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.VectorStoreFileBatches.CancelVectorStoreFileBatchAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CancelVectorStoreFileBatchAsync (vectorStoreId As String, batchId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CancelVectorStoreFileBatchAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CancelVectorStoreFileBatchAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="vectorStoreFileBatches.CancelVectorStoreFileBatchAsync (vectorStoreId, batchId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="batchId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="batchId"> Identifier of the file batch. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Agents.Persistent.VectorStoreFileBatches.CancelVectorStoreFileBatchAsync(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CancelVectorStoreFileBatchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFileBatch&gt;&gt; CancelVectorStoreFileBatchAsync (string vectorStoreId, string batchId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.VectorStoreFileBatch&gt;&gt; CancelVectorStoreFileBatchAsync(string vectorStoreId, string batchId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.VectorStoreFileBatches.CancelVectorStoreFileBatchAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CancelVectorStoreFileBatchAsync (vectorStoreId As String, batchId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of VectorStoreFileBatch))" />
      <MemberSignature Language="F#" Value="abstract member CancelVectorStoreFileBatchAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFileBatch&gt;&gt;&#xA;override this.CancelVectorStoreFileBatchAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFileBatch&gt;&gt;" Usage="vectorStoreFileBatches.CancelVectorStoreFileBatchAsync (vectorStoreId, batchId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFileBatch&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="batchId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="batchId"> Identifier of the file batch. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateVectorStoreFileBatch">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateVectorStoreFileBatch (string vectorStoreId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateVectorStoreFileBatch(string vectorStoreId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.VectorStoreFileBatches.CreateVectorStoreFileBatch(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateVectorStoreFileBatch (vectorStoreId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateVectorStoreFileBatch : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateVectorStoreFileBatch : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="vectorStoreFileBatches.CreateVectorStoreFileBatch (vectorStoreId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create a vector store file batch.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Agents.Persistent.VectorStoreFileBatches.CreateVectorStoreFileBatch(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.VectorStoreDataSource},Azure.AI.Agents.Persistent.VectorStoreChunkingStrategyRequest,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateVectorStoreFileBatch">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFileBatch&gt; CreateVectorStoreFileBatch (string vectorStoreId, System.Collections.Generic.IEnumerable&lt;string&gt; fileIds = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.VectorStoreDataSource&gt; dataSources = default, Azure.AI.Agents.Persistent.VectorStoreChunkingStrategyRequest chunkingStrategy = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.VectorStoreFileBatch&gt; CreateVectorStoreFileBatch(string vectorStoreId, class System.Collections.Generic.IEnumerable`1&lt;string&gt; fileIds, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Agents.Persistent.VectorStoreDataSource&gt; dataSources, class Azure.AI.Agents.Persistent.VectorStoreChunkingStrategyRequest chunkingStrategy, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.VectorStoreFileBatches.CreateVectorStoreFileBatch(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.VectorStoreDataSource},Azure.AI.Agents.Persistent.VectorStoreChunkingStrategyRequest,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateVectorStoreFileBatch (vectorStoreId As String, Optional fileIds As IEnumerable(Of String) = Nothing, Optional dataSources As IEnumerable(Of VectorStoreDataSource) = Nothing, Optional chunkingStrategy As VectorStoreChunkingStrategyRequest = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of VectorStoreFileBatch)" />
      <MemberSignature Language="F#" Value="abstract member CreateVectorStoreFileBatch : string * seq&lt;string&gt; * seq&lt;Azure.AI.Agents.Persistent.VectorStoreDataSource&gt; * Azure.AI.Agents.Persistent.VectorStoreChunkingStrategyRequest * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFileBatch&gt;&#xA;override this.CreateVectorStoreFileBatch : string * seq&lt;string&gt; * seq&lt;Azure.AI.Agents.Persistent.VectorStoreDataSource&gt; * Azure.AI.Agents.Persistent.VectorStoreChunkingStrategyRequest * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFileBatch&gt;" Usage="vectorStoreFileBatches.CreateVectorStoreFileBatch (vectorStoreId, fileIds, dataSources, chunkingStrategy, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFileBatch&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="fileIds" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="dataSources" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.VectorStoreDataSource&gt;" />
        <Parameter Name="chunkingStrategy" Type="Azure.AI.Agents.Persistent.VectorStoreChunkingStrategyRequest" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="fileIds"> List of file identifiers. </param>
        <param name="dataSources"> List of Azure assets. </param>
        <param name="chunkingStrategy"> The chunking strategy used to chunk the file(s). If not set, will use the auto strategy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Create a vector store file batch. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateVectorStoreFileBatchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateVectorStoreFileBatchAsync (string vectorStoreId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateVectorStoreFileBatchAsync(string vectorStoreId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.VectorStoreFileBatches.CreateVectorStoreFileBatchAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateVectorStoreFileBatchAsync (vectorStoreId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateVectorStoreFileBatchAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateVectorStoreFileBatchAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="vectorStoreFileBatches.CreateVectorStoreFileBatchAsync (vectorStoreId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create a vector store file batch.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Agents.Persistent.VectorStoreFileBatches.CreateVectorStoreFileBatchAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.VectorStoreDataSource},Azure.AI.Agents.Persistent.VectorStoreChunkingStrategyRequest,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateVectorStoreFileBatchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFileBatch&gt;&gt; CreateVectorStoreFileBatchAsync (string vectorStoreId, System.Collections.Generic.IEnumerable&lt;string&gt; fileIds = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.VectorStoreDataSource&gt; dataSources = default, Azure.AI.Agents.Persistent.VectorStoreChunkingStrategyRequest chunkingStrategy = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.VectorStoreFileBatch&gt;&gt; CreateVectorStoreFileBatchAsync(string vectorStoreId, class System.Collections.Generic.IEnumerable`1&lt;string&gt; fileIds, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Agents.Persistent.VectorStoreDataSource&gt; dataSources, class Azure.AI.Agents.Persistent.VectorStoreChunkingStrategyRequest chunkingStrategy, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.VectorStoreFileBatches.CreateVectorStoreFileBatchAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.VectorStoreDataSource},Azure.AI.Agents.Persistent.VectorStoreChunkingStrategyRequest,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateVectorStoreFileBatchAsync (vectorStoreId As String, Optional fileIds As IEnumerable(Of String) = Nothing, Optional dataSources As IEnumerable(Of VectorStoreDataSource) = Nothing, Optional chunkingStrategy As VectorStoreChunkingStrategyRequest = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of VectorStoreFileBatch))" />
      <MemberSignature Language="F#" Value="abstract member CreateVectorStoreFileBatchAsync : string * seq&lt;string&gt; * seq&lt;Azure.AI.Agents.Persistent.VectorStoreDataSource&gt; * Azure.AI.Agents.Persistent.VectorStoreChunkingStrategyRequest * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFileBatch&gt;&gt;&#xA;override this.CreateVectorStoreFileBatchAsync : string * seq&lt;string&gt; * seq&lt;Azure.AI.Agents.Persistent.VectorStoreDataSource&gt; * Azure.AI.Agents.Persistent.VectorStoreChunkingStrategyRequest * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFileBatch&gt;&gt;" Usage="vectorStoreFileBatches.CreateVectorStoreFileBatchAsync (vectorStoreId, fileIds, dataSources, chunkingStrategy, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFileBatch&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="fileIds" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="dataSources" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.VectorStoreDataSource&gt;" />
        <Parameter Name="chunkingStrategy" Type="Azure.AI.Agents.Persistent.VectorStoreChunkingStrategyRequest" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="fileIds"> List of file identifiers. </param>
        <param name="dataSources"> List of Azure assets. </param>
        <param name="chunkingStrategy"> The chunking strategy used to chunk the file(s). If not set, will use the auto strategy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Create a vector store file batch. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVectorStoreFileBatch">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetVectorStoreFileBatch (string vectorStoreId, string batchId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetVectorStoreFileBatch(string vectorStoreId, string batchId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.VectorStoreFileBatches.GetVectorStoreFileBatch(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVectorStoreFileBatch (vectorStoreId As String, batchId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetVectorStoreFileBatch : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetVectorStoreFileBatch : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="vectorStoreFileBatches.GetVectorStoreFileBatch (vectorStoreId, batchId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="batchId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="batchId"> Identifier of the file batch. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieve a vector store file batch.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Agents.Persistent.VectorStoreFileBatches.GetVectorStoreFileBatch(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVectorStoreFileBatch">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFileBatch&gt; GetVectorStoreFileBatch (string vectorStoreId, string batchId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.VectorStoreFileBatch&gt; GetVectorStoreFileBatch(string vectorStoreId, string batchId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.VectorStoreFileBatches.GetVectorStoreFileBatch(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVectorStoreFileBatch (vectorStoreId As String, batchId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of VectorStoreFileBatch)" />
      <MemberSignature Language="F#" Value="abstract member GetVectorStoreFileBatch : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFileBatch&gt;&#xA;override this.GetVectorStoreFileBatch : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFileBatch&gt;" Usage="vectorStoreFileBatches.GetVectorStoreFileBatch (vectorStoreId, batchId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFileBatch&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="batchId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="batchId"> Identifier of the file batch. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieve a vector store file batch. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVectorStoreFileBatchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetVectorStoreFileBatchAsync (string vectorStoreId, string batchId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetVectorStoreFileBatchAsync(string vectorStoreId, string batchId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.VectorStoreFileBatches.GetVectorStoreFileBatchAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVectorStoreFileBatchAsync (vectorStoreId As String, batchId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetVectorStoreFileBatchAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetVectorStoreFileBatchAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="vectorStoreFileBatches.GetVectorStoreFileBatchAsync (vectorStoreId, batchId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="batchId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="batchId"> Identifier of the file batch. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieve a vector store file batch.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Agents.Persistent.VectorStoreFileBatches.GetVectorStoreFileBatchAsync(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVectorStoreFileBatchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFileBatch&gt;&gt; GetVectorStoreFileBatchAsync (string vectorStoreId, string batchId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.VectorStoreFileBatch&gt;&gt; GetVectorStoreFileBatchAsync(string vectorStoreId, string batchId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.VectorStoreFileBatches.GetVectorStoreFileBatchAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVectorStoreFileBatchAsync (vectorStoreId As String, batchId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of VectorStoreFileBatch))" />
      <MemberSignature Language="F#" Value="abstract member GetVectorStoreFileBatchAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFileBatch&gt;&gt;&#xA;override this.GetVectorStoreFileBatchAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFileBatch&gt;&gt;" Usage="vectorStoreFileBatches.GetVectorStoreFileBatchAsync (vectorStoreId, batchId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.VectorStoreFileBatch&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="batchId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="batchId"> Identifier of the file batch. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieve a vector store file batch. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVectorStoreFileBatchFiles">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.AI.Agents.Persistent.VectorStoreFile&gt; GetVectorStoreFileBatchFiles (string vectorStoreId, string batchId, Azure.AI.Agents.Persistent.VectorStoreFileStatusFilter? filter = default, int? limit = default, Azure.AI.Agents.Persistent.ListSortOrder? order = default, string after = default, string before = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.AI.Agents.Persistent.VectorStoreFile&gt; GetVectorStoreFileBatchFiles(string vectorStoreId, string batchId, valuetype System.Nullable`1&lt;valuetype Azure.AI.Agents.Persistent.VectorStoreFileStatusFilter&gt; filter, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;valuetype Azure.AI.Agents.Persistent.ListSortOrder&gt; order, string after, string before, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.VectorStoreFileBatches.GetVectorStoreFileBatchFiles(System.String,System.String,System.Nullable{Azure.AI.Agents.Persistent.VectorStoreFileStatusFilter},System.Nullable{System.Int32},System.Nullable{Azure.AI.Agents.Persistent.ListSortOrder},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVectorStoreFileBatchFiles (vectorStoreId As String, batchId As String, Optional filter As Nullable(Of VectorStoreFileStatusFilter) = Nothing, Optional limit As Nullable(Of Integer) = Nothing, Optional order As Nullable(Of ListSortOrder) = Nothing, Optional after As String = Nothing, Optional before As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of VectorStoreFile)" />
      <MemberSignature Language="F#" Value="abstract member GetVectorStoreFileBatchFiles : string * string * Nullable&lt;Azure.AI.Agents.Persistent.VectorStoreFileStatusFilter&gt; * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Agents.Persistent.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.AI.Agents.Persistent.VectorStoreFile&gt;&#xA;override this.GetVectorStoreFileBatchFiles : string * string * Nullable&lt;Azure.AI.Agents.Persistent.VectorStoreFileStatusFilter&gt; * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Agents.Persistent.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.AI.Agents.Persistent.VectorStoreFile&gt;" Usage="vectorStoreFileBatches.GetVectorStoreFileBatchFiles (vectorStoreId, batchId, filter, limit, order, after, before, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.AI.Agents.Persistent.VectorStoreFile&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="batchId" Type="System.String" />
        <Parameter Name="filter" Type="System.Nullable&lt;Azure.AI.Agents.Persistent.VectorStoreFileStatusFilter&gt;" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="order" Type="System.Nullable&lt;Azure.AI.Agents.Persistent.ListSortOrder&gt;" />
        <Parameter Name="after" Type="System.String" />
        <Parameter Name="before" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="batchId"> Identifier of the file batch. </param>
        <param name="filter"> Filter by file status. </param>
        <param name="limit"> A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        <param name="order"> Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order. </param>
        <param name="after"> A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. </param>
        <param name="before"> A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Returns a list of vector store files in a batch. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVectorStoreFileBatchFilesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.AI.Agents.Persistent.VectorStoreFile&gt; GetVectorStoreFileBatchFilesAsync (string vectorStoreId, string batchId, Azure.AI.Agents.Persistent.VectorStoreFileStatusFilter? filter = default, int? limit = default, Azure.AI.Agents.Persistent.ListSortOrder? order = default, string after = default, string before = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.AI.Agents.Persistent.VectorStoreFile&gt; GetVectorStoreFileBatchFilesAsync(string vectorStoreId, string batchId, valuetype System.Nullable`1&lt;valuetype Azure.AI.Agents.Persistent.VectorStoreFileStatusFilter&gt; filter, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;valuetype Azure.AI.Agents.Persistent.ListSortOrder&gt; order, string after, string before, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.VectorStoreFileBatches.GetVectorStoreFileBatchFilesAsync(System.String,System.String,System.Nullable{Azure.AI.Agents.Persistent.VectorStoreFileStatusFilter},System.Nullable{System.Int32},System.Nullable{Azure.AI.Agents.Persistent.ListSortOrder},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVectorStoreFileBatchFilesAsync (vectorStoreId As String, batchId As String, Optional filter As Nullable(Of VectorStoreFileStatusFilter) = Nothing, Optional limit As Nullable(Of Integer) = Nothing, Optional order As Nullable(Of ListSortOrder) = Nothing, Optional after As String = Nothing, Optional before As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of VectorStoreFile)" />
      <MemberSignature Language="F#" Value="abstract member GetVectorStoreFileBatchFilesAsync : string * string * Nullable&lt;Azure.AI.Agents.Persistent.VectorStoreFileStatusFilter&gt; * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Agents.Persistent.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.AI.Agents.Persistent.VectorStoreFile&gt;&#xA;override this.GetVectorStoreFileBatchFilesAsync : string * string * Nullable&lt;Azure.AI.Agents.Persistent.VectorStoreFileStatusFilter&gt; * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Agents.Persistent.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.AI.Agents.Persistent.VectorStoreFile&gt;" Usage="vectorStoreFileBatches.GetVectorStoreFileBatchFilesAsync (vectorStoreId, batchId, filter, limit, order, after, before, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.AI.Agents.Persistent.VectorStoreFile&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="batchId" Type="System.String" />
        <Parameter Name="filter" Type="System.Nullable&lt;Azure.AI.Agents.Persistent.VectorStoreFileStatusFilter&gt;" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="order" Type="System.Nullable&lt;Azure.AI.Agents.Persistent.ListSortOrder&gt;" />
        <Parameter Name="after" Type="System.String" />
        <Parameter Name="before" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="batchId"> Identifier of the file batch. </param>
        <param name="filter"> Filter by file status. </param>
        <param name="limit"> A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        <param name="order"> Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order. </param>
        <param name="after"> A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. </param>
        <param name="before"> A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Returns a list of vector store files in a batch. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.AI.Agents.Persistent.VectorStoreFileBatches.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.AI.Agents.Persistent.VectorStoreFileBatches.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
