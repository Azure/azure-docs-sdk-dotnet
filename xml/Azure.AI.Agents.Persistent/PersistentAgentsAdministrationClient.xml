<Type Name="PersistentAgentsAdministrationClient" FullName="Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient">
  <TypeSignature Language="C#" Value="public class PersistentAgentsAdministrationClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PersistentAgentsAdministrationClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient" />
  <TypeSignature Language="VB.NET" Value="Public Class PersistentAgentsAdministrationClient" />
  <TypeSignature Language="F#" Value="type PersistentAgentsAdministrationClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The PersistentAgentsAdministration service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PersistentAgentsAdministrationClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of PersistentAgentsAdministrationClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PersistentAgentsAdministrationClient (string endpoint, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string endpoint, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient.#ctor(System.String,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As String, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient : string * Azure.Core.TokenCredential -&gt; Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient" Usage="new Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.String" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The Azure AI Foundry project endpoint, in the form `https://&lt;aiservices-id&gt;.services.ai.azure.com/api/projects/&lt;project-name&gt;`</param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of AzureAIClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
        <exception cref="T:System.ArgumentException"> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PersistentAgentsAdministrationClient (Uri endpoint, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient.#ctor(System.Uri,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient : Uri * Azure.Core.TokenCredential -&gt; Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient" Usage="new Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint"> Project endpoint in the form of: https://&lt;aiservices-id&gt;.services.ai.azure.com/api/projects/&lt;project-name&gt;. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of PersistentAgentsAdministrationClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PersistentAgentsAdministrationClient (string endpoint, Azure.Core.TokenCredential credential, Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string endpoint, class Azure.Core.TokenCredential credential, class Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient.#ctor(System.String,Azure.Core.TokenCredential,Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As String, credential As TokenCredential, options As PersistentAgentsAdministrationClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient : string * Azure.Core.TokenCredential * Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClientOptions -&gt; Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient" Usage="new Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.String" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The Azure AI Foundry project endpoint, in the form `https://&lt;aiservices-id&gt;.services.ai.azure.com/api/projects/&lt;project-name&gt;`</param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of AzureAIClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" />, or <paramref name="credential" /> is null. </exception>
        <exception cref="T:System.ArgumentException"> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PersistentAgentsAdministrationClient (Uri endpoint, Azure.Core.TokenCredential credential, Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential, class Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential, options As PersistentAgentsAdministrationClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient : Uri * Azure.Core.TokenCredential * Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClientOptions -&gt; Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient" Usage="new Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> Project endpoint in the form of: https://&lt;aiservices-id&gt;.services.ai.azure.com/api/projects/&lt;project-name&gt;. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of PersistentAgentsAdministrationClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateAgent">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateAgent (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateAgent(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient.CreateAgent(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateAgent (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateAgent : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateAgent : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="persistentAgentsAdministrationClient.CreateAgent (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates a new agent.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient.CreateAgent(System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.ToolDefinition},Azure.AI.Agents.Persistent.ToolResources,System.Nullable{System.Single},System.Nullable{System.Single},System.BinaryData,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateAgent">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentAgent&gt; CreateAgent (string model, string name = default, string description = default, string instructions = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.ToolDefinition&gt; tools = default, Azure.AI.Agents.Persistent.ToolResources toolResources = default, float? temperature = default, float? topP = default, BinaryData responseFormat = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.PersistentAgent&gt; CreateAgent(string model, string name, string description, string instructions, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Agents.Persistent.ToolDefinition&gt; tools, class Azure.AI.Agents.Persistent.ToolResources toolResources, valuetype System.Nullable`1&lt;float32&gt; temperature, valuetype System.Nullable`1&lt;float32&gt; topP, class System.BinaryData responseFormat, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient.CreateAgent(System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.ToolDefinition},Azure.AI.Agents.Persistent.ToolResources,System.Nullable{System.Single},System.Nullable{System.Single},System.BinaryData,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateAgent (model As String, Optional name As String = Nothing, Optional description As String = Nothing, Optional instructions As String = Nothing, Optional tools As IEnumerable(Of ToolDefinition) = Nothing, Optional toolResources As ToolResources = Nothing, Optional temperature As Nullable(Of Single) = Nothing, Optional topP As Nullable(Of Single) = Nothing, Optional responseFormat As BinaryData = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of PersistentAgent)" />
      <MemberSignature Language="F#" Value="abstract member CreateAgent : string * string * string * string * seq&lt;Azure.AI.Agents.Persistent.ToolDefinition&gt; * Azure.AI.Agents.Persistent.ToolResources * Nullable&lt;single&gt; * Nullable&lt;single&gt; * BinaryData * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentAgent&gt;&#xA;override this.CreateAgent : string * string * string * string * seq&lt;Azure.AI.Agents.Persistent.ToolDefinition&gt; * Azure.AI.Agents.Persistent.ToolResources * Nullable&lt;single&gt; * Nullable&lt;single&gt; * BinaryData * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentAgent&gt;" Usage="persistentAgentsAdministrationClient.CreateAgent (model, name, description, instructions, tools, toolResources, temperature, topP, responseFormat, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentAgent&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="description" Type="System.String" />
        <Parameter Name="instructions" Type="System.String" />
        <Parameter Name="tools" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.ToolDefinition&gt;" />
        <Parameter Name="toolResources" Type="Azure.AI.Agents.Persistent.ToolResources" />
        <Parameter Name="temperature" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="topP" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="responseFormat" Type="System.BinaryData" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="model"> The ID of the model to use. </param>
        <param name="name"> The name of the new agent. </param>
        <param name="description"> The description of the new agent. </param>
        <param name="instructions"> The system instructions for the new agent to use. </param>
        <param name="tools"> The collection of tools to enable for the new agent. </param>
        <param name="toolResources">
             A set of resources that are used by the agent's tools. The resources are specific to the type of tool. For example, the `code_interpreter`
             tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
             </param>
        <param name="temperature">
             What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random,
             while lower values like 0.2 will make it more focused and deterministic.
             </param>
        <param name="topP">
             An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.
             So 0.1 means only the tokens comprising the top 10% probability mass are considered.
            
             We generally recommend altering this or temperature but not both.
             </param>
        <param name="responseFormat"> The response format of the tool calls used by this agent. </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a new agent. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="model" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateAgentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateAgentAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateAgentAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient.CreateAgentAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateAgentAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateAgentAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateAgentAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="persistentAgentsAdministrationClient.CreateAgentAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates a new agent.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient.CreateAgentAsync(System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.ToolDefinition},Azure.AI.Agents.Persistent.ToolResources,System.Nullable{System.Single},System.Nullable{System.Single},System.BinaryData,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateAgentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentAgent&gt;&gt; CreateAgentAsync (string model, string name = default, string description = default, string instructions = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.ToolDefinition&gt; tools = default, Azure.AI.Agents.Persistent.ToolResources toolResources = default, float? temperature = default, float? topP = default, BinaryData responseFormat = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.PersistentAgent&gt;&gt; CreateAgentAsync(string model, string name, string description, string instructions, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Agents.Persistent.ToolDefinition&gt; tools, class Azure.AI.Agents.Persistent.ToolResources toolResources, valuetype System.Nullable`1&lt;float32&gt; temperature, valuetype System.Nullable`1&lt;float32&gt; topP, class System.BinaryData responseFormat, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient.CreateAgentAsync(System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.ToolDefinition},Azure.AI.Agents.Persistent.ToolResources,System.Nullable{System.Single},System.Nullable{System.Single},System.BinaryData,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateAgentAsync (model As String, Optional name As String = Nothing, Optional description As String = Nothing, Optional instructions As String = Nothing, Optional tools As IEnumerable(Of ToolDefinition) = Nothing, Optional toolResources As ToolResources = Nothing, Optional temperature As Nullable(Of Single) = Nothing, Optional topP As Nullable(Of Single) = Nothing, Optional responseFormat As BinaryData = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of PersistentAgent))" />
      <MemberSignature Language="F#" Value="abstract member CreateAgentAsync : string * string * string * string * seq&lt;Azure.AI.Agents.Persistent.ToolDefinition&gt; * Azure.AI.Agents.Persistent.ToolResources * Nullable&lt;single&gt; * Nullable&lt;single&gt; * BinaryData * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentAgent&gt;&gt;&#xA;override this.CreateAgentAsync : string * string * string * string * seq&lt;Azure.AI.Agents.Persistent.ToolDefinition&gt; * Azure.AI.Agents.Persistent.ToolResources * Nullable&lt;single&gt; * Nullable&lt;single&gt; * BinaryData * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentAgent&gt;&gt;" Usage="persistentAgentsAdministrationClient.CreateAgentAsync (model, name, description, instructions, tools, toolResources, temperature, topP, responseFormat, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentAgent&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="description" Type="System.String" />
        <Parameter Name="instructions" Type="System.String" />
        <Parameter Name="tools" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.ToolDefinition&gt;" />
        <Parameter Name="toolResources" Type="Azure.AI.Agents.Persistent.ToolResources" />
        <Parameter Name="temperature" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="topP" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="responseFormat" Type="System.BinaryData" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="model"> The ID of the model to use. </param>
        <param name="name"> The name of the new agent. </param>
        <param name="description"> The description of the new agent. </param>
        <param name="instructions"> The system instructions for the new agent to use. </param>
        <param name="tools"> The collection of tools to enable for the new agent. </param>
        <param name="toolResources">
             A set of resources that are used by the agent's tools. The resources are specific to the type of tool. For example, the `code_interpreter`
             tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
             </param>
        <param name="temperature">
             What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random,
             while lower values like 0.2 will make it more focused and deterministic.
             </param>
        <param name="topP">
             An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.
             So 0.1 means only the tokens comprising the top 10% probability mass are considered.
            
             We generally recommend altering this or temperature but not both.
             </param>
        <param name="responseFormat"> The response format of the tool calls used by this agent. </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a new agent. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="model" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAgent">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;bool&gt; DeleteAgent (string agentId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;bool&gt; DeleteAgent(string agentId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient.DeleteAgent(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteAgent (agentId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAgent : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;bool&gt;&#xA;override this.DeleteAgent : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;bool&gt;" Usage="persistentAgentsAdministrationClient.DeleteAgent (agentId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="agentId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="agentId"> The ID of the agent to delete. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Deletes an agent. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="agentId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="agentId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAgentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt; DeleteAgentAsync (string agentId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;bool&gt;&gt; DeleteAgentAsync(string agentId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient.DeleteAgentAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteAgentAsync (agentId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of Boolean))" />
      <MemberSignature Language="F#" Value="abstract member DeleteAgentAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt;&#xA;override this.DeleteAgentAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt;" Usage="persistentAgentsAdministrationClient.DeleteAgentAsync (agentId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Boolean&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="agentId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="agentId"> The ID of the agent to delete. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Deletes an agent. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="agentId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="agentId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAgent">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetAgent (string agentId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetAgent(string agentId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient.GetAgent(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAgent (agentId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetAgent : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetAgent : string * Azure.RequestContext -&gt; Azure.Response" Usage="persistentAgentsAdministrationClient.GetAgent (agentId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="agentId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="agentId"> Identifier of the agent. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves an existing agent.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient.GetAgent(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="agentId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="agentId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAgent">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentAgent&gt; GetAgent (string assistantId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.PersistentAgent&gt; GetAgent(string assistantId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient.GetAgent(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAgent (assistantId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of PersistentAgent)" />
      <MemberSignature Language="F#" Value="abstract member GetAgent : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentAgent&gt;&#xA;override this.GetAgent : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentAgent&gt;" Usage="persistentAgentsAdministrationClient.GetAgent (assistantId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentAgent&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assistantId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="assistantId"> Identifier of the agent. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves an existing agent. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assistantId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="assistantId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAgentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetAgentAsync (string agentId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetAgentAsync(string agentId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient.GetAgentAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAgentAsync (agentId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetAgentAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetAgentAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="persistentAgentsAdministrationClient.GetAgentAsync (agentId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="agentId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="agentId"> Identifier of the agent. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves an existing agent.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient.GetAgentAsync(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="agentId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="agentId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAgentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentAgent&gt;&gt; GetAgentAsync (string assistantId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.PersistentAgent&gt;&gt; GetAgentAsync(string assistantId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient.GetAgentAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAgentAsync (assistantId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of PersistentAgent))" />
      <MemberSignature Language="F#" Value="abstract member GetAgentAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentAgent&gt;&gt;&#xA;override this.GetAgentAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentAgent&gt;&gt;" Usage="persistentAgentsAdministrationClient.GetAgentAsync (assistantId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentAgent&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assistantId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="assistantId"> Identifier of the agent. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves an existing agent. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assistantId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="assistantId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAgents">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.AI.Agents.Persistent.PersistentAgent&gt; GetAgents (int? limit = default, Azure.AI.Agents.Persistent.ListSortOrder? order = default, string after = default, string before = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.AI.Agents.Persistent.PersistentAgent&gt; GetAgents(valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;valuetype Azure.AI.Agents.Persistent.ListSortOrder&gt; order, string after, string before, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient.GetAgents(System.Nullable{System.Int32},System.Nullable{Azure.AI.Agents.Persistent.ListSortOrder},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAgents (Optional limit As Nullable(Of Integer) = Nothing, Optional order As Nullable(Of ListSortOrder) = Nothing, Optional after As String = Nothing, Optional before As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of PersistentAgent)" />
      <MemberSignature Language="F#" Value="abstract member GetAgents : Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Agents.Persistent.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.AI.Agents.Persistent.PersistentAgent&gt;&#xA;override this.GetAgents : Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Agents.Persistent.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.AI.Agents.Persistent.PersistentAgent&gt;" Usage="persistentAgentsAdministrationClient.GetAgents (limit, order, after, before, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.AI.Agents.Persistent.PersistentAgent&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="order" Type="System.Nullable&lt;Azure.AI.Agents.Persistent.ListSortOrder&gt;" />
        <Parameter Name="after" Type="System.String" />
        <Parameter Name="before" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="limit"> A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        <param name="order"> Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order. </param>
        <param name="after"> A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. </param>
        <param name="before"> A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets a list of agents that were previously created. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAgentsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.AI.Agents.Persistent.PersistentAgent&gt; GetAgentsAsync (int? limit = default, Azure.AI.Agents.Persistent.ListSortOrder? order = default, string after = default, string before = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.AI.Agents.Persistent.PersistentAgent&gt; GetAgentsAsync(valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;valuetype Azure.AI.Agents.Persistent.ListSortOrder&gt; order, string after, string before, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient.GetAgentsAsync(System.Nullable{System.Int32},System.Nullable{Azure.AI.Agents.Persistent.ListSortOrder},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAgentsAsync (Optional limit As Nullable(Of Integer) = Nothing, Optional order As Nullable(Of ListSortOrder) = Nothing, Optional after As String = Nothing, Optional before As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of PersistentAgent)" />
      <MemberSignature Language="F#" Value="abstract member GetAgentsAsync : Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Agents.Persistent.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.AI.Agents.Persistent.PersistentAgent&gt;&#xA;override this.GetAgentsAsync : Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Agents.Persistent.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.AI.Agents.Persistent.PersistentAgent&gt;" Usage="persistentAgentsAdministrationClient.GetAgentsAsync (limit, order, after, before, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.AI.Agents.Persistent.PersistentAgent&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="order" Type="System.Nullable&lt;Azure.AI.Agents.Persistent.ListSortOrder&gt;" />
        <Parameter Name="after" Type="System.String" />
        <Parameter Name="before" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="limit"> A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        <param name="order"> Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order. </param>
        <param name="after"> A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. </param>
        <param name="before"> A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets a list of agents that were previously created. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateAgent">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateAgent (string assistantId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateAgent(string assistantId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient.UpdateAgent(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateAgent (assistantId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateAgent : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.UpdateAgent : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="persistentAgentsAdministrationClient.UpdateAgent (assistantId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assistantId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="assistantId"> The ID of the agent to modify. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Modifies an existing agent.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient.UpdateAgent(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.ToolDefinition},Azure.AI.Agents.Persistent.ToolResources,System.Nullable{System.Single},System.Nullable{System.Single},System.BinaryData,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assistantId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="assistantId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateAgent">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentAgent&gt; UpdateAgent (string assistantId, string model = default, string name = default, string description = default, string instructions = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.ToolDefinition&gt; tools = default, Azure.AI.Agents.Persistent.ToolResources toolResources = default, float? temperature = default, float? topP = default, BinaryData responseFormat = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.PersistentAgent&gt; UpdateAgent(string assistantId, string model, string name, string description, string instructions, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Agents.Persistent.ToolDefinition&gt; tools, class Azure.AI.Agents.Persistent.ToolResources toolResources, valuetype System.Nullable`1&lt;float32&gt; temperature, valuetype System.Nullable`1&lt;float32&gt; topP, class System.BinaryData responseFormat, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient.UpdateAgent(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.ToolDefinition},Azure.AI.Agents.Persistent.ToolResources,System.Nullable{System.Single},System.Nullable{System.Single},System.BinaryData,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateAgent (assistantId As String, Optional model As String = Nothing, Optional name As String = Nothing, Optional description As String = Nothing, Optional instructions As String = Nothing, Optional tools As IEnumerable(Of ToolDefinition) = Nothing, Optional toolResources As ToolResources = Nothing, Optional temperature As Nullable(Of Single) = Nothing, Optional topP As Nullable(Of Single) = Nothing, Optional responseFormat As BinaryData = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of PersistentAgent)" />
      <MemberSignature Language="F#" Value="abstract member UpdateAgent : string * string * string * string * string * seq&lt;Azure.AI.Agents.Persistent.ToolDefinition&gt; * Azure.AI.Agents.Persistent.ToolResources * Nullable&lt;single&gt; * Nullable&lt;single&gt; * BinaryData * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentAgent&gt;&#xA;override this.UpdateAgent : string * string * string * string * string * seq&lt;Azure.AI.Agents.Persistent.ToolDefinition&gt; * Azure.AI.Agents.Persistent.ToolResources * Nullable&lt;single&gt; * Nullable&lt;single&gt; * BinaryData * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentAgent&gt;" Usage="persistentAgentsAdministrationClient.UpdateAgent (assistantId, model, name, description, instructions, tools, toolResources, temperature, topP, responseFormat, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentAgent&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assistantId" Type="System.String" />
        <Parameter Name="model" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="description" Type="System.String" />
        <Parameter Name="instructions" Type="System.String" />
        <Parameter Name="tools" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.ToolDefinition&gt;" />
        <Parameter Name="toolResources" Type="Azure.AI.Agents.Persistent.ToolResources" />
        <Parameter Name="temperature" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="topP" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="responseFormat" Type="System.BinaryData" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="assistantId"> The ID of the agent to modify. </param>
        <param name="model"> The ID of the model to use. </param>
        <param name="name"> The modified name for the agent to use. </param>
        <param name="description"> The modified description for the agent to use. </param>
        <param name="instructions"> The modified system instructions for the new agent to use. </param>
        <param name="tools"> The modified collection of tools to enable for the agent. </param>
        <param name="toolResources">
             A set of resources that are used by the agent's tools. The resources are specific to the type of tool. For example,
             the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
             </param>
        <param name="temperature">
             What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random,
             while lower values like 0.2 will make it more focused and deterministic.
             </param>
        <param name="topP">
             An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.
             So 0.1 means only the tokens comprising the top 10% probability mass are considered.
            
             We generally recommend altering this or temperature but not both.
             </param>
        <param name="responseFormat"> The response format of the tool calls used by this agent. </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Modifies an existing agent. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assistantId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="assistantId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateAgentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateAgentAsync (string assistantId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateAgentAsync(string assistantId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient.UpdateAgentAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateAgentAsync (assistantId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateAgentAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateAgentAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="persistentAgentsAdministrationClient.UpdateAgentAsync (assistantId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assistantId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="assistantId"> The ID of the agent to modify. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Modifies an existing agent.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient.UpdateAgentAsync(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.ToolDefinition},Azure.AI.Agents.Persistent.ToolResources,System.Nullable{System.Single},System.Nullable{System.Single},System.BinaryData,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assistantId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="assistantId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateAgentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentAgent&gt;&gt; UpdateAgentAsync (string assistantId, string model = default, string name = default, string description = default, string instructions = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.ToolDefinition&gt; tools = default, Azure.AI.Agents.Persistent.ToolResources toolResources = default, float? temperature = default, float? topP = default, BinaryData responseFormat = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Agents.Persistent.PersistentAgent&gt;&gt; UpdateAgentAsync(string assistantId, string model, string name, string description, string instructions, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Agents.Persistent.ToolDefinition&gt; tools, class Azure.AI.Agents.Persistent.ToolResources toolResources, valuetype System.Nullable`1&lt;float32&gt; temperature, valuetype System.Nullable`1&lt;float32&gt; topP, class System.BinaryData responseFormat, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Agents.Persistent.PersistentAgentsAdministrationClient.UpdateAgentAsync(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Agents.Persistent.ToolDefinition},Azure.AI.Agents.Persistent.ToolResources,System.Nullable{System.Single},System.Nullable{System.Single},System.BinaryData,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateAgentAsync (assistantId As String, Optional model As String = Nothing, Optional name As String = Nothing, Optional description As String = Nothing, Optional instructions As String = Nothing, Optional tools As IEnumerable(Of ToolDefinition) = Nothing, Optional toolResources As ToolResources = Nothing, Optional temperature As Nullable(Of Single) = Nothing, Optional topP As Nullable(Of Single) = Nothing, Optional responseFormat As BinaryData = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of PersistentAgent))" />
      <MemberSignature Language="F#" Value="abstract member UpdateAgentAsync : string * string * string * string * string * seq&lt;Azure.AI.Agents.Persistent.ToolDefinition&gt; * Azure.AI.Agents.Persistent.ToolResources * Nullable&lt;single&gt; * Nullable&lt;single&gt; * BinaryData * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentAgent&gt;&gt;&#xA;override this.UpdateAgentAsync : string * string * string * string * string * seq&lt;Azure.AI.Agents.Persistent.ToolDefinition&gt; * Azure.AI.Agents.Persistent.ToolResources * Nullable&lt;single&gt; * Nullable&lt;single&gt; * BinaryData * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentAgent&gt;&gt;" Usage="persistentAgentsAdministrationClient.UpdateAgentAsync (assistantId, model, name, description, instructions, tools, toolResources, temperature, topP, responseFormat, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Agents.Persistent</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Agents.Persistent.PersistentAgent&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assistantId" Type="System.String" />
        <Parameter Name="model" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="description" Type="System.String" />
        <Parameter Name="instructions" Type="System.String" />
        <Parameter Name="tools" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Agents.Persistent.ToolDefinition&gt;" />
        <Parameter Name="toolResources" Type="Azure.AI.Agents.Persistent.ToolResources" />
        <Parameter Name="temperature" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="topP" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="responseFormat" Type="System.BinaryData" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="assistantId"> The ID of the agent to modify. </param>
        <param name="model"> The ID of the model to use. </param>
        <param name="name"> The modified name for the agent to use. </param>
        <param name="description"> The modified description for the agent to use. </param>
        <param name="instructions"> The modified system instructions for the new agent to use. </param>
        <param name="tools"> The modified collection of tools to enable for the agent. </param>
        <param name="toolResources">
             A set of resources that are used by the agent's tools. The resources are specific to the type of tool. For example,
             the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
             </param>
        <param name="temperature">
             What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random,
             while lower values like 0.2 will make it more focused and deterministic.
             </param>
        <param name="topP">
             An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.
             So 0.1 means only the tokens comprising the top 10% probability mass are considered.
            
             We generally recommend altering this or temperature but not both.
             </param>
        <param name="responseFormat"> The response format of the tool calls used by this agent. </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Modifies an existing agent. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assistantId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="assistantId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
