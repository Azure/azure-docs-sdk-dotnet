<Type Name="PurviewWorkflowServiceClient" FullName="Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient">
  <TypeSignature Language="C#" Value="public class PurviewWorkflowServiceClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PurviewWorkflowServiceClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient" />
  <TypeSignature Language="VB.NET" Value="Public Class PurviewWorkflowServiceClient" />
  <TypeSignature Language="F#" Value="type PurviewWorkflowServiceClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The PurviewWorkflowService service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PurviewWorkflowServiceClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of PurviewWorkflowServiceClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PurviewWorkflowServiceClient (Uri endpoint, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.#ctor(System.Uri,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient : Uri * Azure.Core.TokenCredential -&gt; Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient" Usage="new Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The account endpoint of your Purview account. Example: https://{accountName}.purview.azure.com/. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of PurviewWorkflowServiceClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PurviewWorkflowServiceClient (Uri endpoint, Azure.Core.TokenCredential credential, Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential, class Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential, options As PurviewWorkflowServiceClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient : Uri * Azure.Core.TokenCredential * Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClientOptions -&gt; Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient" Usage="new Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The account endpoint of your Purview account. Example: https://{accountName}.purview.azure.com/. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of PurviewWorkflowServiceClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ApproveApprovalTask">
      <MemberSignature Language="C#" Value="public virtual Azure.Response ApproveApprovalTask (Guid taskId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response ApproveApprovalTask(valuetype System.Guid taskId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.ApproveApprovalTask(System.Guid,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ApproveApprovalTask (taskId As Guid, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member ApproveApprovalTask : Guid * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.ApproveApprovalTask : Guid * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="purviewWorkflowServiceClient.ApproveApprovalTask (taskId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="taskId" Type="System.Guid" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="taskId"> The task id. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Approve an approval task.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>ApprovalResponseComment</c>:
<code>{
  comment: string, # Optional. The comment of approving or rejecting an approval request.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call ApproveApprovalTask with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {};

Response response = client.ApproveApprovalTask(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call ApproveApprovalTask with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    comment = "<comment>",
};

Response response = client.ApproveApprovalTask(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ApproveApprovalTaskAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; ApproveApprovalTaskAsync (Guid taskId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; ApproveApprovalTaskAsync(valuetype System.Guid taskId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.ApproveApprovalTaskAsync(System.Guid,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ApproveApprovalTaskAsync (taskId As Guid, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member ApproveApprovalTaskAsync : Guid * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.ApproveApprovalTaskAsync : Guid * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewWorkflowServiceClient.ApproveApprovalTaskAsync (taskId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="taskId" Type="System.Guid" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="taskId"> The task id. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Approve an approval task.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>ApprovalResponseComment</c>:
<code>{
  comment: string, # Optional. The comment of approving or rejecting an approval request.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call ApproveApprovalTaskAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {};

Response response = await client.ApproveApprovalTaskAsync(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call ApproveApprovalTaskAsync with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    comment = "<comment>",
};

Response response = await client.ApproveApprovalTaskAsync(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CancelWorkflowRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CancelWorkflowRun (Guid workflowRunId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CancelWorkflowRun(valuetype System.Guid workflowRunId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.CancelWorkflowRun(System.Guid,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CancelWorkflowRun (workflowRunId As Guid, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CancelWorkflowRun : Guid * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CancelWorkflowRun : Guid * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="purviewWorkflowServiceClient.CancelWorkflowRun (workflowRunId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowRunId" Type="System.Guid" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="workflowRunId"> The workflow run id. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Cancel a workflow run.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>WorkflowRunCancelRequest</c>:
<code>{
  comment: string, # Optional. The comment of canceling a workflow run.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CancelWorkflowRun with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {};

Response response = client.CancelWorkflowRun(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CancelWorkflowRun with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    comment = "<comment>",
};

Response response = client.CancelWorkflowRun(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CancelWorkflowRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CancelWorkflowRunAsync (Guid workflowRunId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CancelWorkflowRunAsync(valuetype System.Guid workflowRunId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.CancelWorkflowRunAsync(System.Guid,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CancelWorkflowRunAsync (workflowRunId As Guid, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CancelWorkflowRunAsync : Guid * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CancelWorkflowRunAsync : Guid * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewWorkflowServiceClient.CancelWorkflowRunAsync (workflowRunId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowRunId" Type="System.Guid" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="workflowRunId"> The workflow run id. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Cancel a workflow run.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>WorkflowRunCancelRequest</c>:
<code>{
  comment: string, # Optional. The comment of canceling a workflow run.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CancelWorkflowRunAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {};

Response response = await client.CancelWorkflowRunAsync(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CancelWorkflowRunAsync with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    comment = "<comment>",
};

Response response = await client.CancelWorkflowRunAsync(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateOrReplaceWorkflow">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateOrReplaceWorkflow (Guid workflowId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateOrReplaceWorkflow(valuetype System.Guid workflowId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.CreateOrReplaceWorkflow(System.Guid,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrReplaceWorkflow (workflowId As Guid, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateOrReplaceWorkflow : Guid * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateOrReplaceWorkflow : Guid * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="purviewWorkflowServiceClient.CreateOrReplaceWorkflow (workflowId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowId" Type="System.Guid" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="workflowId"> The workflow id. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create or replace a workflow.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>WorkflowCreateOrUpdateCommand</c>:
<code>{
  triggers: [
    {
      type: "when_term_creation_is_requested" | "when_term_deletion_is_requested" | "when_term_update_is_requested" | "when_terms_import_is_requested" | "when_data_access_grant_is_requested" | "when_asset_update_is_requested", # Required.
      underGlossaryHierarchy: string, # Optional. Glossary term hierarchy path.
      underCollection: string, # Optional. The collection name.
      underGlossary: string, # Optional. The glossary guid.
    }
  ], # Required. It describes under what condition a workflow will run.  
  name: string, # Required. The workflow name.
  isEnabled: boolean, # Required. Whether the workflow enabled or not.
  description: string, # Required. Description of a workflow.
  actionDag: AnyObject, # Optional. The action DAG(Directed Acyclic Graph), it defines actual flow.
}
</code>

Response Body:

Schema for <c>Workflow</c>:
<code>{
  actionDag: AnyObject, # Required. The action DAG(Directed Acyclic Graph), it defines steps to be executed in a workflow run and their order.
  id: Guid, # Required. The id of workflow.
  triggers: [
    {
      type: "when_term_creation_is_requested" | "when_term_deletion_is_requested" | "when_term_update_is_requested" | "when_terms_import_is_requested" | "when_data_access_grant_is_requested" | "when_asset_update_is_requested", # Required.
      underGlossaryHierarchy: string, # Optional. Glossary term hierarchy path.
      underCollection: string, # Optional. The collection name.
      underGlossary: string, # Optional. The glossary guid.
    }
  ], # Required. It describes under what condition a workflow will run.  
  createdTime: string (ISO 8601 Format), # Optional. The created time of workflow.
  createdBy: string, # Optional. The person who created the workflow.
  lastUpdateTime: string (ISO 8601 Format), # Optional. The last update time.
  updatedBy: string, # Optional. The person who updated the workflow.
  name: string, # Required. The name of a workflow.
  isEnabled: boolean, # Required. Whether the workflow is enabled or not.
  description: string, # Required. Description of a workflow.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateOrReplaceWorkflow with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    triggers = new[] {
        new {
            type = "when_term_creation_is_requested",
        }
    },
    name = "<name>",
    isEnabled = true,
    description = "<description>",
};

Response response = client.CreateOrReplaceWorkflow(Guid.NewGuid(), RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("actionDag").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
]]></code>
This sample shows how to call CreateOrReplaceWorkflow with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    triggers = new[] {
        new {
            type = "when_term_creation_is_requested",
            underGlossaryHierarchy = "<underGlossaryHierarchy>",
            underCollection = "<underCollection>",
            underGlossary = "<underGlossary>",
        }
    },
    name = "<name>",
    isEnabled = true,
    description = "<description>",
    actionDag = new {},
};

Response response = client.CreateOrReplaceWorkflow(Guid.NewGuid(), RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("actionDag").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossaryHierarchy").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underCollection").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossary").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateOrReplaceWorkflowAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateOrReplaceWorkflowAsync (Guid workflowId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateOrReplaceWorkflowAsync(valuetype System.Guid workflowId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.CreateOrReplaceWorkflowAsync(System.Guid,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrReplaceWorkflowAsync (workflowId As Guid, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateOrReplaceWorkflowAsync : Guid * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateOrReplaceWorkflowAsync : Guid * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewWorkflowServiceClient.CreateOrReplaceWorkflowAsync (workflowId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowId" Type="System.Guid" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="workflowId"> The workflow id. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create or replace a workflow.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>WorkflowCreateOrUpdateCommand</c>:
<code>{
  triggers: [
    {
      type: "when_term_creation_is_requested" | "when_term_deletion_is_requested" | "when_term_update_is_requested" | "when_terms_import_is_requested" | "when_data_access_grant_is_requested" | "when_asset_update_is_requested", # Required.
      underGlossaryHierarchy: string, # Optional. Glossary term hierarchy path.
      underCollection: string, # Optional. The collection name.
      underGlossary: string, # Optional. The glossary guid.
    }
  ], # Required. It describes under what condition a workflow will run.  
  name: string, # Required. The workflow name.
  isEnabled: boolean, # Required. Whether the workflow enabled or not.
  description: string, # Required. Description of a workflow.
  actionDag: AnyObject, # Optional. The action DAG(Directed Acyclic Graph), it defines actual flow.
}
</code>

Response Body:

Schema for <c>Workflow</c>:
<code>{
  actionDag: AnyObject, # Required. The action DAG(Directed Acyclic Graph), it defines steps to be executed in a workflow run and their order.
  id: Guid, # Required. The id of workflow.
  triggers: [
    {
      type: "when_term_creation_is_requested" | "when_term_deletion_is_requested" | "when_term_update_is_requested" | "when_terms_import_is_requested" | "when_data_access_grant_is_requested" | "when_asset_update_is_requested", # Required.
      underGlossaryHierarchy: string, # Optional. Glossary term hierarchy path.
      underCollection: string, # Optional. The collection name.
      underGlossary: string, # Optional. The glossary guid.
    }
  ], # Required. It describes under what condition a workflow will run.  
  createdTime: string (ISO 8601 Format), # Optional. The created time of workflow.
  createdBy: string, # Optional. The person who created the workflow.
  lastUpdateTime: string (ISO 8601 Format), # Optional. The last update time.
  updatedBy: string, # Optional. The person who updated the workflow.
  name: string, # Required. The name of a workflow.
  isEnabled: boolean, # Required. Whether the workflow is enabled or not.
  description: string, # Required. Description of a workflow.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateOrReplaceWorkflowAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    triggers = new[] {
        new {
            type = "when_term_creation_is_requested",
        }
    },
    name = "<name>",
    isEnabled = true,
    description = "<description>",
};

Response response = await client.CreateOrReplaceWorkflowAsync(Guid.NewGuid(), RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("actionDag").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
]]></code>
This sample shows how to call CreateOrReplaceWorkflowAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    triggers = new[] {
        new {
            type = "when_term_creation_is_requested",
            underGlossaryHierarchy = "<underGlossaryHierarchy>",
            underCollection = "<underCollection>",
            underGlossary = "<underGlossary>",
        }
    },
    name = "<name>",
    isEnabled = true,
    description = "<description>",
    actionDag = new {},
};

Response response = await client.CreateOrReplaceWorkflowAsync(Guid.NewGuid(), RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("actionDag").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossaryHierarchy").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underCollection").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossary").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteWorkflow">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteWorkflow (Guid workflowId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteWorkflow(valuetype System.Guid workflowId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.DeleteWorkflow(System.Guid,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteWorkflow (workflowId As Guid, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteWorkflow : Guid * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteWorkflow : Guid * Azure.RequestContext -&gt; Azure.Response" Usage="purviewWorkflowServiceClient.DeleteWorkflow (workflowId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowId" Type="System.Guid" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="workflowId"> The workflow id. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delete a workflow.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteWorkflow with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

Response response = client.DeleteWorkflow(Guid.NewGuid());
Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteWorkflowAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteWorkflowAsync (Guid workflowId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteWorkflowAsync(valuetype System.Guid workflowId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.DeleteWorkflowAsync(System.Guid,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteWorkflowAsync (workflowId As Guid, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteWorkflowAsync : Guid * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteWorkflowAsync : Guid * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewWorkflowServiceClient.DeleteWorkflowAsync (workflowId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowId" Type="System.Guid" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="workflowId"> The workflow id. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delete a workflow.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteWorkflowAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

Response response = await client.DeleteWorkflowAsync(Guid.NewGuid());
Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflow">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetWorkflow (Guid workflowId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetWorkflow(valuetype System.Guid workflowId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.GetWorkflow(System.Guid,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetWorkflow (workflowId As Guid, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetWorkflow : Guid * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetWorkflow : Guid * Azure.RequestContext -&gt; Azure.Response" Usage="purviewWorkflowServiceClient.GetWorkflow (workflowId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowId" Type="System.Guid" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="workflowId"> The workflow id. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get a specific workflow.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Workflow</c>:
<code>{
  actionDag: AnyObject, # Required. The action DAG(Directed Acyclic Graph), it defines steps to be executed in a workflow run and their order.
  id: Guid, # Required. The id of workflow.
  triggers: [
    {
      type: "when_term_creation_is_requested" | "when_term_deletion_is_requested" | "when_term_update_is_requested" | "when_terms_import_is_requested" | "when_data_access_grant_is_requested" | "when_asset_update_is_requested", # Required.
      underGlossaryHierarchy: string, # Optional. Glossary term hierarchy path.
      underCollection: string, # Optional. The collection name.
      underGlossary: string, # Optional. The glossary guid.
    }
  ], # Required. It describes under what condition a workflow will run.  
  createdTime: string (ISO 8601 Format), # Optional. The created time of workflow.
  createdBy: string, # Optional. The person who created the workflow.
  lastUpdateTime: string (ISO 8601 Format), # Optional. The last update time.
  updatedBy: string, # Optional. The person who updated the workflow.
  name: string, # Required. The name of a workflow.
  isEnabled: boolean, # Required. Whether the workflow is enabled or not.
  description: string, # Required. Description of a workflow.
}
</code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetWorkflow with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

Response response = client.GetWorkflow(Guid.NewGuid(), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("actionDag").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossaryHierarchy").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underCollection").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossary").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetWorkflowAsync (Guid workflowId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetWorkflowAsync(valuetype System.Guid workflowId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.GetWorkflowAsync(System.Guid,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetWorkflowAsync (workflowId As Guid, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetWorkflowAsync : Guid * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetWorkflowAsync : Guid * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewWorkflowServiceClient.GetWorkflowAsync (workflowId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowId" Type="System.Guid" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="workflowId"> The workflow id. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get a specific workflow.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Workflow</c>:
<code>{
  actionDag: AnyObject, # Required. The action DAG(Directed Acyclic Graph), it defines steps to be executed in a workflow run and their order.
  id: Guid, # Required. The id of workflow.
  triggers: [
    {
      type: "when_term_creation_is_requested" | "when_term_deletion_is_requested" | "when_term_update_is_requested" | "when_terms_import_is_requested" | "when_data_access_grant_is_requested" | "when_asset_update_is_requested", # Required.
      underGlossaryHierarchy: string, # Optional. Glossary term hierarchy path.
      underCollection: string, # Optional. The collection name.
      underGlossary: string, # Optional. The glossary guid.
    }
  ], # Required. It describes under what condition a workflow will run.  
  createdTime: string (ISO 8601 Format), # Optional. The created time of workflow.
  createdBy: string, # Optional. The person who created the workflow.
  lastUpdateTime: string (ISO 8601 Format), # Optional. The last update time.
  updatedBy: string, # Optional. The person who updated the workflow.
  name: string, # Required. The name of a workflow.
  isEnabled: boolean, # Required. Whether the workflow is enabled or not.
  description: string, # Required. Description of a workflow.
}
</code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetWorkflowAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

Response response = await client.GetWorkflowAsync(Guid.NewGuid(), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("actionDag").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossaryHierarchy").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underCollection").ToString());
Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossary").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
Console.WriteLine(result.GetProperty("updatedBy").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("isEnabled").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetWorkflowRun (Guid workflowRunId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetWorkflowRun(valuetype System.Guid workflowRunId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.GetWorkflowRun(System.Guid,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetWorkflowRun (workflowRunId As Guid, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetWorkflowRun : Guid * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetWorkflowRun : Guid * Azure.RequestContext -&gt; Azure.Response" Usage="purviewWorkflowServiceClient.GetWorkflowRun (workflowRunId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowRunId" Type="System.Guid" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="workflowRunId"> The workflow run id. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get a workflow run.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>WorkflowRun</c>:
<code>{
  id: Guid, # Optional. The workflow run id.
  workflowId: Guid, # Optional. The workflow id.
  startTime: string (ISO 8601 Format), # Optional. Workflow run start time.
  requestor: Guid, # Optional. The person who submitted the user request.
  userRequestId: Guid, # Optional. The user request id.
  runPayload: {
    type: "CreateTerm" | "UpdateTerm" | "DeleteTerm" | "ImportTerms" | "UpdateAsset" | "GrantDataAccess", # Required. The workflow run payload type.
    targetValue: string, # Required. The target value which need involve workflow to update.
    payload: AnyObject, # Required. The payload of each operation which user want to submit.
  }, # Optional. The input of a workflow run. Align with operation in user request. 
  status: "NotStarted" | "InProgress" | "Failed" | "Completed" | "Canceling" | "CancellationFailed" | "Canceled", # Optional. The status.
  endTime: string (ISO 8601 Format), # Optional. The time of workflow run completed.
  cancelTime: string (ISO 8601 Format), # Optional. The time of workflow run be canceled.
  cancelComment: string, # Optional. The comment when cancel a workflow run.
  actionDag: AnyObject, # Required. The action DAG(Directed Acyclic Graph), it defines actual flow.
  detail: {
    runInput: AnyObject, # Required. Built-in variables starts with @runInput. Its properties are determined by trigger type at workflow run time. 
    actions: AnyObject, # Required. Any object
  }, # Required. It refers to the "detail" property of a workflow run object, which contains run context and runtime information of actions.
}
</code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetWorkflowRun with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

Response response = client.GetWorkflowRun(Guid.NewGuid(), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("workflowId").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("requestor").ToString());
Console.WriteLine(result.GetProperty("userRequestId").ToString());
Console.WriteLine(result.GetProperty("runPayload").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("runPayload").GetProperty("targetValue").ToString());
Console.WriteLine(result.GetProperty("runPayload").GetProperty("payload").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("cancelTime").ToString());
Console.WriteLine(result.GetProperty("cancelComment").ToString());
Console.WriteLine(result.GetProperty("actionDag").ToString());
Console.WriteLine(result.GetProperty("detail").GetProperty("runInput").ToString());
Console.WriteLine(result.GetProperty("detail").GetProperty("actions").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetWorkflowRunAsync (Guid workflowRunId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetWorkflowRunAsync(valuetype System.Guid workflowRunId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.GetWorkflowRunAsync(System.Guid,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetWorkflowRunAsync (workflowRunId As Guid, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetWorkflowRunAsync : Guid * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetWorkflowRunAsync : Guid * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewWorkflowServiceClient.GetWorkflowRunAsync (workflowRunId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowRunId" Type="System.Guid" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="workflowRunId"> The workflow run id. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get a workflow run.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>WorkflowRun</c>:
<code>{
  id: Guid, # Optional. The workflow run id.
  workflowId: Guid, # Optional. The workflow id.
  startTime: string (ISO 8601 Format), # Optional. Workflow run start time.
  requestor: Guid, # Optional. The person who submitted the user request.
  userRequestId: Guid, # Optional. The user request id.
  runPayload: {
    type: "CreateTerm" | "UpdateTerm" | "DeleteTerm" | "ImportTerms" | "UpdateAsset" | "GrantDataAccess", # Required. The workflow run payload type.
    targetValue: string, # Required. The target value which need involve workflow to update.
    payload: AnyObject, # Required. The payload of each operation which user want to submit.
  }, # Optional. The input of a workflow run. Align with operation in user request. 
  status: "NotStarted" | "InProgress" | "Failed" | "Completed" | "Canceling" | "CancellationFailed" | "Canceled", # Optional. The status.
  endTime: string (ISO 8601 Format), # Optional. The time of workflow run completed.
  cancelTime: string (ISO 8601 Format), # Optional. The time of workflow run be canceled.
  cancelComment: string, # Optional. The comment when cancel a workflow run.
  actionDag: AnyObject, # Required. The action DAG(Directed Acyclic Graph), it defines actual flow.
  detail: {
    runInput: AnyObject, # Required. Built-in variables starts with @runInput. Its properties are determined by trigger type at workflow run time. 
    actions: AnyObject, # Required. Any object
  }, # Required. It refers to the "detail" property of a workflow run object, which contains run context and runtime information of actions.
}
</code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetWorkflowRunAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

Response response = await client.GetWorkflowRunAsync(Guid.NewGuid(), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("workflowId").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("requestor").ToString());
Console.WriteLine(result.GetProperty("userRequestId").ToString());
Console.WriteLine(result.GetProperty("runPayload").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("runPayload").GetProperty("targetValue").ToString());
Console.WriteLine(result.GetProperty("runPayload").GetProperty("payload").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("cancelTime").ToString());
Console.WriteLine(result.GetProperty("cancelComment").ToString());
Console.WriteLine(result.GetProperty("actionDag").ToString());
Console.WriteLine(result.GetProperty("detail").GetProperty("runInput").ToString());
Console.WriteLine(result.GetProperty("detail").GetProperty("actions").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowRuns">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetWorkflowRuns (string timeWindow, string orderby, System.Collections.Generic.IEnumerable&lt;string&gt; runStatuses, System.Collections.Generic.IEnumerable&lt;string&gt; workflowIds, int? maxpagesize, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetWorkflowRuns(string timeWindow, string orderby, class System.Collections.Generic.IEnumerable`1&lt;string&gt; runStatuses, class System.Collections.Generic.IEnumerable`1&lt;string&gt; workflowIds, valuetype System.Nullable`1&lt;int32&gt; maxpagesize, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.GetWorkflowRuns(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetWorkflowRuns (timeWindow As String, orderby As String, runStatuses As IEnumerable(Of String), workflowIds As IEnumerable(Of String), maxpagesize As Nullable(Of Integer), context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetWorkflowRuns : string * string * seq&lt;string&gt; * seq&lt;string&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetWorkflowRuns : string * string * seq&lt;string&gt; * seq&lt;string&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="purviewWorkflowServiceClient.GetWorkflowRuns (timeWindow, orderby, runStatuses, workflowIds, maxpagesize, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeWindow" Type="System.String" />
        <Parameter Name="orderby" Type="System.String" />
        <Parameter Name="runStatuses" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="workflowIds" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="timeWindow"> Time window of filtering items. Allowed values: "1d" | "7d" | "30d" | "90d". </param>
        <param name="orderby"> The key word which used to sort the results. Allowed values: "status desc" | "status asc" | "requestor desc" | "requestor asc" | "startTime desc" | "startTime asc" | "createdTime desc" | "createdTime asc". </param>
        <param name="runStatuses"> Filter workflow runs by workflow run status. </param>
        <param name="workflowIds"> Filter items by workflow id list. </param>
        <param name="maxpagesize"> The maximum page size to get the items at one time. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] List workflow runs.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>WorkflowRunListValue</c>:
<code>{
  id: Guid, # Required. The workflow run id.
  workflowId: Guid, # Required. The workflow id.
  startTime: string (ISO 8601 Format), # Required. Workflow run start time.
  requestor: Guid, # Required. The person who submitted the user request.
  userRequestId: Guid, # Optional. The user request id.
  runPayload: {
    type: "CreateTerm" | "UpdateTerm" | "DeleteTerm" | "ImportTerms" | "UpdateAsset" | "GrantDataAccess", # Required. The workflow run payload type.
    targetValue: string, # Required. The target value which need involve workflow to update.
  }, # Required. The input of a workflow run. Align with operation in user request. 
  status: "NotStarted" | "InProgress" | "Failed" | "Completed" | "Canceling" | "CancellationFailed" | "Canceled", # Required. The status.
  endTime: string (ISO 8601 Format), # Optional. The time of workflow run completed.
  cancelTime: string (ISO 8601 Format), # Optional. The time of workflow run be canceled.
  cancelComment: string, # Optional. The comment when cancel a workflow run.
}
</code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetWorkflowRuns with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

foreach (var item in client.GetWorkflowRuns("<timeWindow>", "<orderby>", new String[]{"<runStatuses>"}, new String[]{"<workflowIds>"}, 1234, new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("workflowId").ToString());
    Console.WriteLine(result.GetProperty("startTime").ToString());
    Console.WriteLine(result.GetProperty("requestor").ToString());
    Console.WriteLine(result.GetProperty("userRequestId").ToString());
    Console.WriteLine(result.GetProperty("runPayload").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("runPayload").GetProperty("targetValue").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("endTime").ToString());
    Console.WriteLine(result.GetProperty("cancelTime").ToString());
    Console.WriteLine(result.GetProperty("cancelComment").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowRunsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetWorkflowRunsAsync (string timeWindow, string orderby, System.Collections.Generic.IEnumerable&lt;string&gt; runStatuses, System.Collections.Generic.IEnumerable&lt;string&gt; workflowIds, int? maxpagesize, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetWorkflowRunsAsync(string timeWindow, string orderby, class System.Collections.Generic.IEnumerable`1&lt;string&gt; runStatuses, class System.Collections.Generic.IEnumerable`1&lt;string&gt; workflowIds, valuetype System.Nullable`1&lt;int32&gt; maxpagesize, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.GetWorkflowRunsAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetWorkflowRunsAsync (timeWindow As String, orderby As String, runStatuses As IEnumerable(Of String), workflowIds As IEnumerable(Of String), maxpagesize As Nullable(Of Integer), context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetWorkflowRunsAsync : string * string * seq&lt;string&gt; * seq&lt;string&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetWorkflowRunsAsync : string * string * seq&lt;string&gt; * seq&lt;string&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="purviewWorkflowServiceClient.GetWorkflowRunsAsync (timeWindow, orderby, runStatuses, workflowIds, maxpagesize, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeWindow" Type="System.String" />
        <Parameter Name="orderby" Type="System.String" />
        <Parameter Name="runStatuses" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="workflowIds" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="timeWindow"> Time window of filtering items. Allowed values: "1d" | "7d" | "30d" | "90d". </param>
        <param name="orderby"> The key word which used to sort the results. Allowed values: "status desc" | "status asc" | "requestor desc" | "requestor asc" | "startTime desc" | "startTime asc" | "createdTime desc" | "createdTime asc". </param>
        <param name="runStatuses"> Filter workflow runs by workflow run status. </param>
        <param name="workflowIds"> Filter items by workflow id list. </param>
        <param name="maxpagesize"> The maximum page size to get the items at one time. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] List workflow runs.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>WorkflowRunListValue</c>:
<code>{
  id: Guid, # Required. The workflow run id.
  workflowId: Guid, # Required. The workflow id.
  startTime: string (ISO 8601 Format), # Required. Workflow run start time.
  requestor: Guid, # Required. The person who submitted the user request.
  userRequestId: Guid, # Optional. The user request id.
  runPayload: {
    type: "CreateTerm" | "UpdateTerm" | "DeleteTerm" | "ImportTerms" | "UpdateAsset" | "GrantDataAccess", # Required. The workflow run payload type.
    targetValue: string, # Required. The target value which need involve workflow to update.
  }, # Required. The input of a workflow run. Align with operation in user request. 
  status: "NotStarted" | "InProgress" | "Failed" | "Completed" | "Canceling" | "CancellationFailed" | "Canceled", # Required. The status.
  endTime: string (ISO 8601 Format), # Optional. The time of workflow run completed.
  cancelTime: string (ISO 8601 Format), # Optional. The time of workflow run be canceled.
  cancelComment: string, # Optional. The comment when cancel a workflow run.
}
</code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetWorkflowRunsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

await foreach (var item in client.GetWorkflowRunsAsync("<timeWindow>", "<orderby>", new String[]{"<runStatuses>"}, new String[]{"<workflowIds>"}, 1234, new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("workflowId").ToString());
    Console.WriteLine(result.GetProperty("startTime").ToString());
    Console.WriteLine(result.GetProperty("requestor").ToString());
    Console.WriteLine(result.GetProperty("userRequestId").ToString());
    Console.WriteLine(result.GetProperty("runPayload").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("runPayload").GetProperty("targetValue").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("endTime").ToString());
    Console.WriteLine(result.GetProperty("cancelTime").ToString());
    Console.WriteLine(result.GetProperty("cancelComment").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflows">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetWorkflows (Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetWorkflows(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.GetWorkflows(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetWorkflows (context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetWorkflows : Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetWorkflows : Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="purviewWorkflowServiceClient.GetWorkflows context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] List all workflows.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>WorkflowMetadataListValue</c>:
<code>{
  id: Guid, # Required. The id of workflow.
  triggers: [
    {
      type: "when_term_creation_is_requested" | "when_term_deletion_is_requested" | "when_term_update_is_requested" | "when_terms_import_is_requested" | "when_data_access_grant_is_requested" | "when_asset_update_is_requested", # Required.
      underGlossaryHierarchy: string, # Optional. Glossary term hierarchy path.
      underCollection: string, # Optional. The collection name.
      underGlossary: string, # Optional. The glossary guid.
    }
  ], # Required. It describes under what condition a workflow will run.  
  createdTime: string (ISO 8601 Format), # Optional. The created time of workflow.
  createdBy: string, # Optional. The person who created the workflow.
  lastUpdateTime: string (ISO 8601 Format), # Optional. The last update time.
  updatedBy: string, # Optional. The person who updated the workflow.
  name: string, # Required. The name of a workflow.
  isEnabled: boolean, # Required. Whether the workflow is enabled or not.
  description: string, # Required. Description of a workflow.
}
</code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetWorkflows with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

foreach (var item in client.GetWorkflows(new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossaryHierarchy").ToString());
    Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underCollection").ToString());
    Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossary").ToString());
    Console.WriteLine(result.GetProperty("createdTime").ToString());
    Console.WriteLine(result.GetProperty("createdBy").ToString());
    Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
    Console.WriteLine(result.GetProperty("updatedBy").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("isEnabled").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetWorkflowsAsync (Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetWorkflowsAsync(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.GetWorkflowsAsync(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetWorkflowsAsync (context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetWorkflowsAsync : Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetWorkflowsAsync : Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="purviewWorkflowServiceClient.GetWorkflowsAsync context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] List all workflows.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>WorkflowMetadataListValue</c>:
<code>{
  id: Guid, # Required. The id of workflow.
  triggers: [
    {
      type: "when_term_creation_is_requested" | "when_term_deletion_is_requested" | "when_term_update_is_requested" | "when_terms_import_is_requested" | "when_data_access_grant_is_requested" | "when_asset_update_is_requested", # Required.
      underGlossaryHierarchy: string, # Optional. Glossary term hierarchy path.
      underCollection: string, # Optional. The collection name.
      underGlossary: string, # Optional. The glossary guid.
    }
  ], # Required. It describes under what condition a workflow will run.  
  createdTime: string (ISO 8601 Format), # Optional. The created time of workflow.
  createdBy: string, # Optional. The person who created the workflow.
  lastUpdateTime: string (ISO 8601 Format), # Optional. The last update time.
  updatedBy: string, # Optional. The person who updated the workflow.
  name: string, # Required. The name of a workflow.
  isEnabled: boolean, # Required. Whether the workflow is enabled or not.
  description: string, # Required. Description of a workflow.
}
</code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetWorkflowsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

await foreach (var item in client.GetWorkflowsAsync(new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossaryHierarchy").ToString());
    Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underCollection").ToString());
    Console.WriteLine(result.GetProperty("triggers")[0].GetProperty("underGlossary").ToString());
    Console.WriteLine(result.GetProperty("createdTime").ToString());
    Console.WriteLine(result.GetProperty("createdBy").ToString());
    Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
    Console.WriteLine(result.GetProperty("updatedBy").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("isEnabled").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowTask">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetWorkflowTask (Guid taskId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetWorkflowTask(valuetype System.Guid taskId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.GetWorkflowTask(System.Guid,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetWorkflowTask (taskId As Guid, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetWorkflowTask : Guid * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetWorkflowTask : Guid * Azure.RequestContext -&gt; Azure.Response" Usage="purviewWorkflowServiceClient.GetWorkflowTask (taskId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="taskId" Type="System.Guid" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="taskId"> The task id. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get a workflow task.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
<details><summary>Approval</summary>Schema for <c>Approval</c>:
<code>{
  approvalDetail: {
    approvalType: "PendingOnAny" | "PendingOnAll", # Required. The approval type of an approval task.
    status: "Pending" | "Approved" | "Rejected" | "Canceled", # Required. The status of an approval task.
    approvers: Dictionary&lt;string, ApproverResponse&gt;, # Required. The list of approvers with reply.
  }, # Optional. The approval task details
  type: Approval, # Required. The workflow task type.
  id: Guid, # Required. The workflow task id.
  title: string, # Optional. The workflow task title.
  workflowRunId: Guid, # Required. The workflow run id.
  workflowId: Guid, # Required. The workflow id.
  requestor: Guid, # Required. The person who submitted the user request.
  createdTime: string (ISO 8601 Format), # Required. The created time.
  lastUpdateTime: string (ISO 8601 Format), # Required. The last update time.
  payload: {
    type: "CreateTerm" | "UpdateTerm" | "DeleteTerm" | "ImportTerms" | "UpdateAsset" | "GrantDataAccess", # Required. The task payload type.
    targetValue: string, # Required. The target value of entity which user want to involve workflow to update.
    payload: AnyObject, # Optional. The payload of the task.
  }, # Required. Info and material that helps assignees to take action.
  reminderInfo: {
    lastRemindTime: string (ISO 8601 Format), # Optional. The last update time.
    nextRemindTime: string (ISO 8601 Format), # Required. The next remind time.
    reminderSettings: AnyObject, # Required. The reminder settings.
  }, # Optional. Info of task reminder.
  expiryInfo: {
    lastExpiryNotificationTime: string (ISO 8601 Format), # Optional. The last expiry notification time.
    nextExpiryNotificationTime: string (ISO 8601 Format), # Required. The next expiry notification time.
    expiryTime: string (ISO 8601 Format), # Required. The expiry time.
    expirySettings: {
      expireAfter: AnyObject, # Required. The time of expiry.
      notifyOnExpiration: [Guid], # Optional.
    }, # Required.
  }, # Optional. Info of task expiry.
}
</code></details><details><summary>~+ 1 more JSON objects</summary><details><summary>SimpleTask</summary>Schema for <c>SimpleTask</c>:
<code>{
  taskDetail: {
    taskBody: string, # Required. The simple task body.
    assignedTo: [Guid], # Required. The users or groups were assigned the simple task.
    status: "NotStarted" | "InProgress" | "Completed" | "Canceled", # Required. Simple task status.
    changeHistory: [AnyObject], # Required.
  }, # Optional. Workflow simple task details.
  type: SimpleTask, # Required. The workflow task type.
  id: Guid, # Required. The workflow task id.
  title: string, # Optional. The workflow task title.
  workflowRunId: Guid, # Required. The workflow run id.
  workflowId: Guid, # Required. The workflow id.
  requestor: Guid, # Required. The person who submitted the user request.
  createdTime: string (ISO 8601 Format), # Required. The created time.
  lastUpdateTime: string (ISO 8601 Format), # Required. The last update time.
  payload: {
    type: "CreateTerm" | "UpdateTerm" | "DeleteTerm" | "ImportTerms" | "UpdateAsset" | "GrantDataAccess", # Required. The task payload type.
    targetValue: string, # Required. The target value of entity which user want to involve workflow to update.
    payload: AnyObject, # Optional. The payload of the task.
  }, # Required. Info and material that helps assignees to take action.
  reminderInfo: {
    lastRemindTime: string (ISO 8601 Format), # Optional. The last update time.
    nextRemindTime: string (ISO 8601 Format), # Required. The next remind time.
    reminderSettings: AnyObject, # Required. The reminder settings.
  }, # Optional. Info of task reminder.
  expiryInfo: {
    lastExpiryNotificationTime: string (ISO 8601 Format), # Optional. The last expiry notification time.
    nextExpiryNotificationTime: string (ISO 8601 Format), # Required. The next expiry notification time.
    expiryTime: string (ISO 8601 Format), # Required. The expiry time.
    expirySettings: {
      expireAfter: AnyObject, # Required. The time of expiry.
      notifyOnExpiration: [Guid], # Optional.
    }, # Required.
  }, # Optional. Info of task expiry.
}
</code></details></details></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetWorkflowTask with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

Response response = client.GetWorkflowTask(Guid.NewGuid(), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("title").ToString());
Console.WriteLine(result.GetProperty("workflowRunId").ToString());
Console.WriteLine(result.GetProperty("workflowId").ToString());
Console.WriteLine(result.GetProperty("requestor").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
Console.WriteLine(result.GetProperty("payload").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("payload").GetProperty("targetValue").ToString());
Console.WriteLine(result.GetProperty("payload").GetProperty("payload").ToString());
Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("lastRemindTime").ToString());
Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("nextRemindTime").ToString());
Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("reminderSettings").ToString());
Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("lastExpiryNotificationTime").ToString());
Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("nextExpiryNotificationTime").ToString());
Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expiryTime").ToString());
Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expirySettings").GetProperty("expireAfter").ToString());
Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expirySettings").GetProperty("notifyOnExpiration")[0].ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowTaskAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetWorkflowTaskAsync (Guid taskId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetWorkflowTaskAsync(valuetype System.Guid taskId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.GetWorkflowTaskAsync(System.Guid,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetWorkflowTaskAsync (taskId As Guid, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetWorkflowTaskAsync : Guid * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetWorkflowTaskAsync : Guid * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewWorkflowServiceClient.GetWorkflowTaskAsync (taskId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="taskId" Type="System.Guid" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="taskId"> The task id. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get a workflow task.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
<details><summary>Approval</summary>Schema for <c>Approval</c>:
<code>{
  approvalDetail: {
    approvalType: "PendingOnAny" | "PendingOnAll", # Required. The approval type of an approval task.
    status: "Pending" | "Approved" | "Rejected" | "Canceled", # Required. The status of an approval task.
    approvers: Dictionary&lt;string, ApproverResponse&gt;, # Required. The list of approvers with reply.
  }, # Optional. The approval task details
  type: Approval, # Required. The workflow task type.
  id: Guid, # Required. The workflow task id.
  title: string, # Optional. The workflow task title.
  workflowRunId: Guid, # Required. The workflow run id.
  workflowId: Guid, # Required. The workflow id.
  requestor: Guid, # Required. The person who submitted the user request.
  createdTime: string (ISO 8601 Format), # Required. The created time.
  lastUpdateTime: string (ISO 8601 Format), # Required. The last update time.
  payload: {
    type: "CreateTerm" | "UpdateTerm" | "DeleteTerm" | "ImportTerms" | "UpdateAsset" | "GrantDataAccess", # Required. The task payload type.
    targetValue: string, # Required. The target value of entity which user want to involve workflow to update.
    payload: AnyObject, # Optional. The payload of the task.
  }, # Required. Info and material that helps assignees to take action.
  reminderInfo: {
    lastRemindTime: string (ISO 8601 Format), # Optional. The last update time.
    nextRemindTime: string (ISO 8601 Format), # Required. The next remind time.
    reminderSettings: AnyObject, # Required. The reminder settings.
  }, # Optional. Info of task reminder.
  expiryInfo: {
    lastExpiryNotificationTime: string (ISO 8601 Format), # Optional. The last expiry notification time.
    nextExpiryNotificationTime: string (ISO 8601 Format), # Required. The next expiry notification time.
    expiryTime: string (ISO 8601 Format), # Required. The expiry time.
    expirySettings: {
      expireAfter: AnyObject, # Required. The time of expiry.
      notifyOnExpiration: [Guid], # Optional.
    }, # Required.
  }, # Optional. Info of task expiry.
}
</code></details><details><summary>~+ 1 more JSON objects</summary><details><summary>SimpleTask</summary>Schema for <c>SimpleTask</c>:
<code>{
  taskDetail: {
    taskBody: string, # Required. The simple task body.
    assignedTo: [Guid], # Required. The users or groups were assigned the simple task.
    status: "NotStarted" | "InProgress" | "Completed" | "Canceled", # Required. Simple task status.
    changeHistory: [AnyObject], # Required.
  }, # Optional. Workflow simple task details.
  type: SimpleTask, # Required. The workflow task type.
  id: Guid, # Required. The workflow task id.
  title: string, # Optional. The workflow task title.
  workflowRunId: Guid, # Required. The workflow run id.
  workflowId: Guid, # Required. The workflow id.
  requestor: Guid, # Required. The person who submitted the user request.
  createdTime: string (ISO 8601 Format), # Required. The created time.
  lastUpdateTime: string (ISO 8601 Format), # Required. The last update time.
  payload: {
    type: "CreateTerm" | "UpdateTerm" | "DeleteTerm" | "ImportTerms" | "UpdateAsset" | "GrantDataAccess", # Required. The task payload type.
    targetValue: string, # Required. The target value of entity which user want to involve workflow to update.
    payload: AnyObject, # Optional. The payload of the task.
  }, # Required. Info and material that helps assignees to take action.
  reminderInfo: {
    lastRemindTime: string (ISO 8601 Format), # Optional. The last update time.
    nextRemindTime: string (ISO 8601 Format), # Required. The next remind time.
    reminderSettings: AnyObject, # Required. The reminder settings.
  }, # Optional. Info of task reminder.
  expiryInfo: {
    lastExpiryNotificationTime: string (ISO 8601 Format), # Optional. The last expiry notification time.
    nextExpiryNotificationTime: string (ISO 8601 Format), # Required. The next expiry notification time.
    expiryTime: string (ISO 8601 Format), # Required. The expiry time.
    expirySettings: {
      expireAfter: AnyObject, # Required. The time of expiry.
      notifyOnExpiration: [Guid], # Optional.
    }, # Required.
  }, # Optional. Info of task expiry.
}
</code></details></details></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetWorkflowTaskAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

Response response = await client.GetWorkflowTaskAsync(Guid.NewGuid(), new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("title").ToString());
Console.WriteLine(result.GetProperty("workflowRunId").ToString());
Console.WriteLine(result.GetProperty("workflowId").ToString());
Console.WriteLine(result.GetProperty("requestor").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
Console.WriteLine(result.GetProperty("payload").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("payload").GetProperty("targetValue").ToString());
Console.WriteLine(result.GetProperty("payload").GetProperty("payload").ToString());
Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("lastRemindTime").ToString());
Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("nextRemindTime").ToString());
Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("reminderSettings").ToString());
Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("lastExpiryNotificationTime").ToString());
Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("nextExpiryNotificationTime").ToString());
Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expiryTime").ToString());
Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expirySettings").GetProperty("expireAfter").ToString());
Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expirySettings").GetProperty("notifyOnExpiration")[0].ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowTasks">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetWorkflowTasks (string viewMode, System.Collections.Generic.IEnumerable&lt;string&gt; workflowIds, string timeWindow, int? maxpagesize, string orderby, System.Collections.Generic.IEnumerable&lt;string&gt; taskTypes, System.Collections.Generic.IEnumerable&lt;string&gt; taskStatuses, string workflowNameKeyword, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetWorkflowTasks(string viewMode, class System.Collections.Generic.IEnumerable`1&lt;string&gt; workflowIds, string timeWindow, valuetype System.Nullable`1&lt;int32&gt; maxpagesize, string orderby, class System.Collections.Generic.IEnumerable`1&lt;string&gt; taskTypes, class System.Collections.Generic.IEnumerable`1&lt;string&gt; taskStatuses, string workflowNameKeyword, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.GetWorkflowTasks(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetWorkflowTasks (viewMode As String, workflowIds As IEnumerable(Of String), timeWindow As String, maxpagesize As Nullable(Of Integer), orderby As String, taskTypes As IEnumerable(Of String), taskStatuses As IEnumerable(Of String), workflowNameKeyword As String, context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetWorkflowTasks : string * seq&lt;string&gt; * string * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetWorkflowTasks : string * seq&lt;string&gt; * string * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="purviewWorkflowServiceClient.GetWorkflowTasks (viewMode, workflowIds, timeWindow, maxpagesize, orderby, taskTypes, taskStatuses, workflowNameKeyword, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewMode" Type="System.String" />
        <Parameter Name="workflowIds" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="timeWindow" Type="System.String" />
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="orderby" Type="System.String" />
        <Parameter Name="taskTypes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="taskStatuses" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="workflowNameKeyword" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="viewMode"> To filter user's sent, received or history workflow tasks. </param>
        <param name="workflowIds"> Filter items by workflow id list. </param>
        <param name="timeWindow"> Time window of filtering items. Allowed values: "1d" | "7d" | "30d" | "90d". </param>
        <param name="maxpagesize"> The maximum page size to get the items at one time. </param>
        <param name="orderby"> The key word which used to sort the results. Allowed values: "status desc" | "status asc" | "requestor desc" | "requestor asc" | "startTime desc" | "startTime asc" | "createdTime desc" | "createdTime asc". </param>
        <param name="taskTypes"> Filter items by workflow task type. </param>
        <param name="taskStatuses"> Filter workflow tasks by status. </param>
        <param name="workflowNameKeyword"> The key word which could used to filter workflow item with related workflow. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get all workflow tasks.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>TasksListValue</c>:
<code>{
  type: "Approval" | "SimpleTask" | "approval" | "simpleTask", # Required. The workflow task type.
  id: Guid, # Required. The workflow task id.
  title: string, # Optional. The workflow task title.
  workflowRunId: Guid, # Required. The workflow run id.
  workflowId: Guid, # Required. The workflow id.
  requestor: Guid, # Required. The person who submitted the user request.
  createdTime: string (ISO 8601 Format), # Required. The created time.
  lastUpdateTime: string (ISO 8601 Format), # Required. The last update time.
  payload: {
    type: "CreateTerm" | "UpdateTerm" | "DeleteTerm" | "ImportTerms" | "UpdateAsset" | "GrantDataAccess", # Required. The task payload type.
    targetValue: string, # Required. The target value of entity which user want to involve workflow to update.
    payload: AnyObject, # Optional. The payload of the task.
  }, # Required. Info and material that helps assignees to take action.
  reminderInfo: {
    lastRemindTime: string (ISO 8601 Format), # Optional. The last update time.
    nextRemindTime: string (ISO 8601 Format), # Required. The next remind time.
    reminderSettings: AnyObject, # Required. The reminder settings.
  }, # Optional. Info of task reminder.
  expiryInfo: {
    lastExpiryNotificationTime: string (ISO 8601 Format), # Optional. The last expiry notification time.
    nextExpiryNotificationTime: string (ISO 8601 Format), # Required. The next expiry notification time.
    expiryTime: string (ISO 8601 Format), # Required. The expiry time.
    expirySettings: {
      expireAfter: AnyObject, # Required. The time of expiry.
      notifyOnExpiration: [Guid], # Optional.
    }, # Required.
  }, # Optional. Info of task expiry.
}
</code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetWorkflowTasks with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

foreach (var item in client.GetWorkflowTasks("<viewMode>", new String[]{"<workflowIds>"}, "<timeWindow>", 1234, "<orderby>", new String[]{"<taskTypes>"}, new String[]{"<taskStatuses>"}, "<workflowNameKeyword>", new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("title").ToString());
    Console.WriteLine(result.GetProperty("workflowRunId").ToString());
    Console.WriteLine(result.GetProperty("workflowId").ToString());
    Console.WriteLine(result.GetProperty("requestor").ToString());
    Console.WriteLine(result.GetProperty("createdTime").ToString());
    Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
    Console.WriteLine(result.GetProperty("payload").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("payload").GetProperty("targetValue").ToString());
    Console.WriteLine(result.GetProperty("payload").GetProperty("payload").ToString());
    Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("lastRemindTime").ToString());
    Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("nextRemindTime").ToString());
    Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("reminderSettings").ToString());
    Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("lastExpiryNotificationTime").ToString());
    Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("nextExpiryNotificationTime").ToString());
    Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expiryTime").ToString());
    Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expirySettings").GetProperty("expireAfter").ToString());
    Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expirySettings").GetProperty("notifyOnExpiration")[0].ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflowTasksAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetWorkflowTasksAsync (string viewMode, System.Collections.Generic.IEnumerable&lt;string&gt; workflowIds, string timeWindow, int? maxpagesize, string orderby, System.Collections.Generic.IEnumerable&lt;string&gt; taskTypes, System.Collections.Generic.IEnumerable&lt;string&gt; taskStatuses, string workflowNameKeyword, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetWorkflowTasksAsync(string viewMode, class System.Collections.Generic.IEnumerable`1&lt;string&gt; workflowIds, string timeWindow, valuetype System.Nullable`1&lt;int32&gt; maxpagesize, string orderby, class System.Collections.Generic.IEnumerable`1&lt;string&gt; taskTypes, class System.Collections.Generic.IEnumerable`1&lt;string&gt; taskStatuses, string workflowNameKeyword, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.GetWorkflowTasksAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetWorkflowTasksAsync (viewMode As String, workflowIds As IEnumerable(Of String), timeWindow As String, maxpagesize As Nullable(Of Integer), orderby As String, taskTypes As IEnumerable(Of String), taskStatuses As IEnumerable(Of String), workflowNameKeyword As String, context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetWorkflowTasksAsync : string * seq&lt;string&gt; * string * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetWorkflowTasksAsync : string * seq&lt;string&gt; * string * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="purviewWorkflowServiceClient.GetWorkflowTasksAsync (viewMode, workflowIds, timeWindow, maxpagesize, orderby, taskTypes, taskStatuses, workflowNameKeyword, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewMode" Type="System.String" />
        <Parameter Name="workflowIds" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="timeWindow" Type="System.String" />
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="orderby" Type="System.String" />
        <Parameter Name="taskTypes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="taskStatuses" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="workflowNameKeyword" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="viewMode"> To filter user's sent, received or history workflow tasks. </param>
        <param name="workflowIds"> Filter items by workflow id list. </param>
        <param name="timeWindow"> Time window of filtering items. Allowed values: "1d" | "7d" | "30d" | "90d". </param>
        <param name="maxpagesize"> The maximum page size to get the items at one time. </param>
        <param name="orderby"> The key word which used to sort the results. Allowed values: "status desc" | "status asc" | "requestor desc" | "requestor asc" | "startTime desc" | "startTime asc" | "createdTime desc" | "createdTime asc". </param>
        <param name="taskTypes"> Filter items by workflow task type. </param>
        <param name="taskStatuses"> Filter workflow tasks by status. </param>
        <param name="workflowNameKeyword"> The key word which could used to filter workflow item with related workflow. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get all workflow tasks.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>TasksListValue</c>:
<code>{
  type: "Approval" | "SimpleTask" | "approval" | "simpleTask", # Required. The workflow task type.
  id: Guid, # Required. The workflow task id.
  title: string, # Optional. The workflow task title.
  workflowRunId: Guid, # Required. The workflow run id.
  workflowId: Guid, # Required. The workflow id.
  requestor: Guid, # Required. The person who submitted the user request.
  createdTime: string (ISO 8601 Format), # Required. The created time.
  lastUpdateTime: string (ISO 8601 Format), # Required. The last update time.
  payload: {
    type: "CreateTerm" | "UpdateTerm" | "DeleteTerm" | "ImportTerms" | "UpdateAsset" | "GrantDataAccess", # Required. The task payload type.
    targetValue: string, # Required. The target value of entity which user want to involve workflow to update.
    payload: AnyObject, # Optional. The payload of the task.
  }, # Required. Info and material that helps assignees to take action.
  reminderInfo: {
    lastRemindTime: string (ISO 8601 Format), # Optional. The last update time.
    nextRemindTime: string (ISO 8601 Format), # Required. The next remind time.
    reminderSettings: AnyObject, # Required. The reminder settings.
  }, # Optional. Info of task reminder.
  expiryInfo: {
    lastExpiryNotificationTime: string (ISO 8601 Format), # Optional. The last expiry notification time.
    nextExpiryNotificationTime: string (ISO 8601 Format), # Required. The next expiry notification time.
    expiryTime: string (ISO 8601 Format), # Required. The expiry time.
    expirySettings: {
      expireAfter: AnyObject, # Required. The time of expiry.
      notifyOnExpiration: [Guid], # Optional.
    }, # Required.
  }, # Optional. Info of task expiry.
}
</code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetWorkflowTasksAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

await foreach (var item in client.GetWorkflowTasksAsync("<viewMode>", new String[]{"<workflowIds>"}, "<timeWindow>", 1234, "<orderby>", new String[]{"<taskTypes>"}, new String[]{"<taskStatuses>"}, "<workflowNameKeyword>", new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("title").ToString());
    Console.WriteLine(result.GetProperty("workflowRunId").ToString());
    Console.WriteLine(result.GetProperty("workflowId").ToString());
    Console.WriteLine(result.GetProperty("requestor").ToString());
    Console.WriteLine(result.GetProperty("createdTime").ToString());
    Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
    Console.WriteLine(result.GetProperty("payload").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("payload").GetProperty("targetValue").ToString());
    Console.WriteLine(result.GetProperty("payload").GetProperty("payload").ToString());
    Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("lastRemindTime").ToString());
    Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("nextRemindTime").ToString());
    Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("reminderSettings").ToString());
    Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("lastExpiryNotificationTime").ToString());
    Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("nextExpiryNotificationTime").ToString());
    Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expiryTime").ToString());
    Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expirySettings").GetProperty("expireAfter").ToString());
    Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expirySettings").GetProperty("notifyOnExpiration")[0].ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReassignWorkflowTask">
      <MemberSignature Language="C#" Value="public virtual Azure.Response ReassignWorkflowTask (Guid taskId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response ReassignWorkflowTask(valuetype System.Guid taskId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.ReassignWorkflowTask(System.Guid,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReassignWorkflowTask (taskId As Guid, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member ReassignWorkflowTask : Guid * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.ReassignWorkflowTask : Guid * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="purviewWorkflowServiceClient.ReassignWorkflowTask (taskId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="taskId" Type="System.Guid" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="taskId"> The task id. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Reassign a workflow task.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>ReassignCommand</c>:
<code>{
  reassignments: [
    {
      reassignFrom: Guid, # Required. Reassign a workflow task from a user or a group.
      reassignTo: Guid, # Required. Reassign a workflow task to a user or a group.
    }
  ], # Optional. The request body of reassigning a workflow task.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call ReassignWorkflowTask with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {};

Response response = client.ReassignWorkflowTask(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call ReassignWorkflowTask with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    reassignments = new[] {
        new {
            reassignFrom = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            reassignTo = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
        }
    },
};

Response response = client.ReassignWorkflowTask(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReassignWorkflowTaskAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; ReassignWorkflowTaskAsync (Guid taskId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; ReassignWorkflowTaskAsync(valuetype System.Guid taskId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.ReassignWorkflowTaskAsync(System.Guid,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReassignWorkflowTaskAsync (taskId As Guid, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member ReassignWorkflowTaskAsync : Guid * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.ReassignWorkflowTaskAsync : Guid * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewWorkflowServiceClient.ReassignWorkflowTaskAsync (taskId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="taskId" Type="System.Guid" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="taskId"> The task id. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Reassign a workflow task.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>ReassignCommand</c>:
<code>{
  reassignments: [
    {
      reassignFrom: Guid, # Required. Reassign a workflow task from a user or a group.
      reassignTo: Guid, # Required. Reassign a workflow task to a user or a group.
    }
  ], # Optional. The request body of reassigning a workflow task.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call ReassignWorkflowTaskAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {};

Response response = await client.ReassignWorkflowTaskAsync(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call ReassignWorkflowTaskAsync with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    reassignments = new[] {
        new {
            reassignFrom = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
            reassignTo = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
        }
    },
};

Response response = await client.ReassignWorkflowTaskAsync(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="RejectApprovalTask">
      <MemberSignature Language="C#" Value="public virtual Azure.Response RejectApprovalTask (Guid taskId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response RejectApprovalTask(valuetype System.Guid taskId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.RejectApprovalTask(System.Guid,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RejectApprovalTask (taskId As Guid, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member RejectApprovalTask : Guid * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.RejectApprovalTask : Guid * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="purviewWorkflowServiceClient.RejectApprovalTask (taskId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="taskId" Type="System.Guid" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="taskId"> The task id. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Reject an approval task.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>ApprovalResponseComment</c>:
<code>{
  comment: string, # Optional. The comment of approving or rejecting an approval request.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call RejectApprovalTask with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {};

Response response = client.RejectApprovalTask(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call RejectApprovalTask with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    comment = "<comment>",
};

Response response = client.RejectApprovalTask(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="RejectApprovalTaskAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; RejectApprovalTaskAsync (Guid taskId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; RejectApprovalTaskAsync(valuetype System.Guid taskId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.RejectApprovalTaskAsync(System.Guid,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RejectApprovalTaskAsync (taskId As Guid, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member RejectApprovalTaskAsync : Guid * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.RejectApprovalTaskAsync : Guid * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewWorkflowServiceClient.RejectApprovalTaskAsync (taskId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="taskId" Type="System.Guid" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="taskId"> The task id. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Reject an approval task.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>ApprovalResponseComment</c>:
<code>{
  comment: string, # Optional. The comment of approving or rejecting an approval request.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call RejectApprovalTaskAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {};

Response response = await client.RejectApprovalTaskAsync(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call RejectApprovalTaskAsync with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    comment = "<comment>",
};

Response response = await client.RejectApprovalTaskAsync(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="SubmitUserRequests">
      <MemberSignature Language="C#" Value="public virtual Azure.Response SubmitUserRequests (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response SubmitUserRequests(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.SubmitUserRequests(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SubmitUserRequests (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member SubmitUserRequests : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.SubmitUserRequests : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="purviewWorkflowServiceClient.SubmitUserRequests (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Submit a user request for requestor, a user  request describes user ask to do operation(s) on Purview. If any workflow's trigger matches with an operation in request, a run of the workflow is created.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>UserRequestPayload</c>:
<code>{
  operations: [
    {
      type: "CreateTerm" | "UpdateTerm" | "DeleteTerm" | "ImportTerms" | "UpdateAsset" | "GrantDataAccess", # Required. The operation type.
      payload: AnyObject, # Required. The payload of each operation which user want to submit.
    }
  ], # Required. The list of operations user want to submit, each operation matches one Purview API call and will do the operation directly.
  comment: string, # Optional. The comment when submit a user request.
}
</code>

Response Body:

Schema for <c>UserRequestResponse</c>:
<code>{
  requestId: Guid, # Required. The user request id.
  requestor: Guid, # Required. The person who submitted the user request.
  operations: [
    {
      type: "CreateTerm" | "UpdateTerm" | "DeleteTerm" | "ImportTerms" | "UpdateAsset" | "GrantDataAccess", # Required. The operation type.
      payload: AnyObject, # Required. The payload of each operation which user want to submit.
      workflowRunIds: [Guid], # Optional.
    }
  ], # Required. The list of operations user want to submit, each operation matches one Purview API call and will do the operation directly.
  comment: string, # Optional. The comment when submit a user request.
  status: "NotStarted" | "InProgress" | "Failed" | "Completed" | "Canceling" | "CancellationFailed" | "Canceled", # Required. The status.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call SubmitUserRequests with required request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    operations = new[] {
        new {
            type = "CreateTerm",
            payload = new {},
        }
    },
};

Response response = client.SubmitUserRequests(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requestId").ToString());
Console.WriteLine(result.GetProperty("requestor").ToString());
Console.WriteLine(result.GetProperty("operations")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("operations")[0].GetProperty("payload").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call SubmitUserRequests with all request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    operations = new[] {
        new {
            type = "CreateTerm",
            payload = new {},
        }
    },
    comment = "<comment>",
};

Response response = client.SubmitUserRequests(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requestId").ToString());
Console.WriteLine(result.GetProperty("requestor").ToString());
Console.WriteLine(result.GetProperty("operations")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("operations")[0].GetProperty("payload").ToString());
Console.WriteLine(result.GetProperty("operations")[0].GetProperty("workflowRunIds")[0].ToString());
Console.WriteLine(result.GetProperty("comment").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="SubmitUserRequestsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; SubmitUserRequestsAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; SubmitUserRequestsAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.SubmitUserRequestsAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SubmitUserRequestsAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member SubmitUserRequestsAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.SubmitUserRequestsAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewWorkflowServiceClient.SubmitUserRequestsAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Submit a user request for requestor, a user  request describes user ask to do operation(s) on Purview. If any workflow's trigger matches with an operation in request, a run of the workflow is created.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>UserRequestPayload</c>:
<code>{
  operations: [
    {
      type: "CreateTerm" | "UpdateTerm" | "DeleteTerm" | "ImportTerms" | "UpdateAsset" | "GrantDataAccess", # Required. The operation type.
      payload: AnyObject, # Required. The payload of each operation which user want to submit.
    }
  ], # Required. The list of operations user want to submit, each operation matches one Purview API call and will do the operation directly.
  comment: string, # Optional. The comment when submit a user request.
}
</code>

Response Body:

Schema for <c>UserRequestResponse</c>:
<code>{
  requestId: Guid, # Required. The user request id.
  requestor: Guid, # Required. The person who submitted the user request.
  operations: [
    {
      type: "CreateTerm" | "UpdateTerm" | "DeleteTerm" | "ImportTerms" | "UpdateAsset" | "GrantDataAccess", # Required. The operation type.
      payload: AnyObject, # Required. The payload of each operation which user want to submit.
      workflowRunIds: [Guid], # Optional.
    }
  ], # Required. The list of operations user want to submit, each operation matches one Purview API call and will do the operation directly.
  comment: string, # Optional. The comment when submit a user request.
  status: "NotStarted" | "InProgress" | "Failed" | "Completed" | "Canceling" | "CancellationFailed" | "Canceled", # Required. The status.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call SubmitUserRequestsAsync with required request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    operations = new[] {
        new {
            type = "CreateTerm",
            payload = new {},
        }
    },
};

Response response = await client.SubmitUserRequestsAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requestId").ToString());
Console.WriteLine(result.GetProperty("requestor").ToString());
Console.WriteLine(result.GetProperty("operations")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("operations")[0].GetProperty("payload").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call SubmitUserRequestsAsync with all request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    operations = new[] {
        new {
            type = "CreateTerm",
            payload = new {},
        }
    },
    comment = "<comment>",
};

Response response = await client.SubmitUserRequestsAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("requestId").ToString());
Console.WriteLine(result.GetProperty("requestor").ToString());
Console.WriteLine(result.GetProperty("operations")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("operations")[0].GetProperty("payload").ToString());
Console.WriteLine(result.GetProperty("operations")[0].GetProperty("workflowRunIds")[0].ToString());
Console.WriteLine(result.GetProperty("comment").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdateTaskStatus">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateTaskStatus (Guid taskId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateTaskStatus(valuetype System.Guid taskId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.UpdateTaskStatus(System.Guid,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateTaskStatus (taskId As Guid, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateTaskStatus : Guid * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.UpdateTaskStatus : Guid * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="purviewWorkflowServiceClient.UpdateTaskStatus (taskId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="taskId" Type="System.Guid" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="taskId"> The task id. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Update the status of a workflow task request.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>TaskUpdateCommand</c>:
<code>{
  newStatus: "NotStarted" | "InProgress" | "Completed" | "Canceled", # Required. The new status will be used to update the task.
  comment: string, # Optional. The comment when update a task.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call UpdateTaskStatus with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    newStatus = "NotStarted",
};

Response response = client.UpdateTaskStatus(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdateTaskStatus with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    newStatus = "NotStarted",
    comment = "<comment>",
};

Response response = client.UpdateTaskStatus(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdateTaskStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateTaskStatusAsync (Guid taskId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateTaskStatusAsync(valuetype System.Guid taskId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.UpdateTaskStatusAsync(System.Guid,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateTaskStatusAsync (taskId As Guid, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateTaskStatusAsync : Guid * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateTaskStatusAsync : Guid * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewWorkflowServiceClient.UpdateTaskStatusAsync (taskId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Workflows</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="taskId" Type="System.Guid" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="taskId"> The task id. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Update the status of a workflow task request.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>TaskUpdateCommand</c>:
<code>{
  newStatus: "NotStarted" | "InProgress" | "Completed" | "Canceled", # Required. The new status will be used to update the task.
  comment: string, # Optional. The comment when update a task.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call UpdateTaskStatusAsync with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    newStatus = "NotStarted",
};

Response response = await client.UpdateTaskStatusAsync(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call UpdateTaskStatusAsync with all parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new PurviewWorkflowServiceClient(endpoint, credential);

var data = new {
    newStatus = "NotStarted",
    comment = "<comment>",
};

Response response = await client.UpdateTaskStatusAsync(Guid.NewGuid(), RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
  </Members>
</Type>
