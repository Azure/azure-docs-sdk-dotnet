<Type Name="DurableOrchestrationClientBase" FullName="Microsoft.Azure.WebJobs.DurableOrchestrationClientBase">
  <TypeSignature Language="C#" Value="public abstract class DurableOrchestrationClientBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DurableOrchestrationClientBase extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.WebJobs.DurableOrchestrationClientBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DurableOrchestrationClientBase" />
  <TypeSignature Language="F#" Value="type DurableOrchestrationClientBase = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Abstract base class for <see cref="T:Microsoft.Azure.WebJobs.DurableOrchestrationClient" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DurableOrchestrationClientBase ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationClientBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCheckStatusResponse">
      <MemberSignature Language="C#" Value="public abstract System.Net.Http.HttpResponseMessage CreateCheckStatusResponse (System.Net.Http.HttpRequestMessage request, string instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Net.Http.HttpResponseMessage CreateCheckStatusResponse(class System.Net.Http.HttpRequestMessage request, string instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationClientBase.CreateCheckStatusResponse(System.Net.Http.HttpRequestMessage,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateCheckStatusResponse (request As HttpRequestMessage, instanceId As String) As HttpResponseMessage" />
      <MemberSignature Language="F#" Value="abstract member CreateCheckStatusResponse : System.Net.Http.HttpRequestMessage * string -&gt; System.Net.Http.HttpResponseMessage" Usage="durableOrchestrationClientBase.CreateCheckStatusResponse (request, instanceId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="instanceId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="request">The HTTP request that triggered the current orchestration instance.</param>
        <param name="instanceId">The ID of the orchestration instance to check.</param>
        <summary>
            Creates an HTTP response that is useful for checking the status of the specified instance.
            </summary>
        <returns>An HTTP 202 response with a Location header and a payload containing instance control URLs.</returns>
        <remarks>
            The payload of the returned <see cref="T:System.Net.Http.HttpResponseMessage" /> contains HTTP API URLs that can
            be used to query the status of the orchestration, raise events to the orchestration, or
            terminate the orchestration.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateHttpManagementPayload">
      <MemberSignature Language="C#" Value="public abstract Microsoft.Azure.WebJobs.Extensions.DurableTask.HttpManagementPayload CreateHttpManagementPayload (string instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.WebJobs.Extensions.DurableTask.HttpManagementPayload CreateHttpManagementPayload(string instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationClientBase.CreateHttpManagementPayload(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateHttpManagementPayload (instanceId As String) As HttpManagementPayload" />
      <MemberSignature Language="F#" Value="abstract member CreateHttpManagementPayload : string -&gt; Microsoft.Azure.WebJobs.Extensions.DurableTask.HttpManagementPayload" Usage="durableOrchestrationClientBase.CreateHttpManagementPayload instanceId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.WebJobs.Extensions.DurableTask.HttpManagementPayload</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="instanceId">The ID of the orchestration instance to check.</param>
        <summary>
            Creates a <see cref="T:Microsoft.Azure.WebJobs.Extensions.DurableTask.HttpManagementPayload" /> object that contains status, terminate and send external event HTTP endpoints.
            </summary>
        <returns>Instance of the <see cref="T:Microsoft.Azure.WebJobs.Extensions.DurableTask.HttpManagementPayload" /> class.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.DurableOrchestrationStatus&gt; GetStatusAsync (string instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.WebJobs.DurableOrchestrationStatus&gt; GetStatusAsync(string instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationClientBase.GetStatusAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetStatusAsync (instanceId As String) As Task(Of DurableOrchestrationStatus)" />
      <MemberSignature Language="F#" Value="abstract member GetStatusAsync : string -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.DurableOrchestrationStatus&gt;&#xA;override this.GetStatusAsync : string -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.DurableOrchestrationStatus&gt;" Usage="durableOrchestrationClientBase.GetStatusAsync instanceId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.DurableOrchestrationStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="instanceId">The ID of the orchestration instance to query.</param>
        <summary>
            Gets the status of the specified orchestration instance.
            </summary>
        <returns>Returns a task which completes when the status has been fetched.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStatusAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;Microsoft.Azure.WebJobs.DurableOrchestrationStatus&gt;&gt; GetStatusAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IList`1&lt;class Microsoft.Azure.WebJobs.DurableOrchestrationStatus&gt;&gt; GetStatusAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationClientBase.GetStatusAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetStatusAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of DurableOrchestrationStatus))" />
      <MemberSignature Language="F#" Value="abstract member GetStatusAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;Microsoft.Azure.WebJobs.DurableOrchestrationStatus&gt;&gt;" Usage="durableOrchestrationClientBase.GetStatusAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;Microsoft.Azure.WebJobs.DurableOrchestrationStatus&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">Cancellation token that can be used to cancel the status query operation.</param>
        <summary>
            Gets all the status of the orchestration instances.
            </summary>
        <returns>Returns orchestration status for all instances.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.DurableOrchestrationStatus&gt; GetStatusAsync (string instanceId, bool showHistory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.WebJobs.DurableOrchestrationStatus&gt; GetStatusAsync(string instanceId, bool showHistory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationClientBase.GetStatusAsync(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetStatusAsync (instanceId As String, showHistory As Boolean) As Task(Of DurableOrchestrationStatus)" />
      <MemberSignature Language="F#" Value="abstract member GetStatusAsync : string * bool -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.DurableOrchestrationStatus&gt;&#xA;override this.GetStatusAsync : string * bool -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.DurableOrchestrationStatus&gt;" Usage="durableOrchestrationClientBase.GetStatusAsync (instanceId, showHistory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.DurableOrchestrationStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.String" />
        <Parameter Name="showHistory" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="instanceId">The ID of the orchestration instance to query.</param>
        <param name="showHistory">Boolean marker for including execution history in the response.</param>
        <summary>
            Gets the status of the specified orchestration instance.
            </summary>
        <returns>Returns a task which completes when the status has been fetched.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStatusAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;Microsoft.Azure.WebJobs.DurableOrchestrationStatus&gt;&gt; GetStatusAsync (DateTime createdTimeFrom, DateTime? createdTimeTo, System.Collections.Generic.IEnumerable&lt;Microsoft.Azure.WebJobs.OrchestrationRuntimeStatus&gt; runtimeStatus, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IList`1&lt;class Microsoft.Azure.WebJobs.DurableOrchestrationStatus&gt;&gt; GetStatusAsync(valuetype System.DateTime createdTimeFrom, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; createdTimeTo, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.Azure.WebJobs.OrchestrationRuntimeStatus&gt; runtimeStatus, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationClientBase.GetStatusAsync(System.DateTime,System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{Microsoft.Azure.WebJobs.OrchestrationRuntimeStatus},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetStatusAsync (createdTimeFrom As DateTime, createdTimeTo As Nullable(Of DateTime), runtimeStatus As IEnumerable(Of OrchestrationRuntimeStatus), Optional cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of DurableOrchestrationStatus))" />
      <MemberSignature Language="F#" Value="abstract member GetStatusAsync : DateTime * Nullable&lt;DateTime&gt; * seq&lt;Microsoft.Azure.WebJobs.OrchestrationRuntimeStatus&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;Microsoft.Azure.WebJobs.DurableOrchestrationStatus&gt;&gt;" Usage="durableOrchestrationClientBase.GetStatusAsync (createdTimeFrom, createdTimeTo, runtimeStatus, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;Microsoft.Azure.WebJobs.DurableOrchestrationStatus&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="createdTimeFrom" Type="System.DateTime" />
        <Parameter Name="createdTimeTo" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="runtimeStatus" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Azure.WebJobs.OrchestrationRuntimeStatus&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="createdTimeFrom">Return orchestration instances which were created after this DateTime.</param>
        <param name="createdTimeTo">Return orchestration instances which were created before this DateTime.</param>
        <param name="runtimeStatus">Return orchestration instances which matches the runtimeStatus.</param>
        <param name="cancellationToken">Cancellation token that can be used to cancel the status query operation.</param>
        <summary>
            Gets the status of all orchestration instances that match the specified conditions.
            </summary>
        <returns>Returns orchestration status for all instances.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStatusAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.DurableOrchestrationStatus&gt; GetStatusAsync (string instanceId, bool showHistory, bool showHistoryOutput, bool showInput = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.WebJobs.DurableOrchestrationStatus&gt; GetStatusAsync(string instanceId, bool showHistory, bool showHistoryOutput, bool showInput) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationClientBase.GetStatusAsync(System.String,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetStatusAsync (instanceId As String, showHistory As Boolean, showHistoryOutput As Boolean, Optional showInput As Boolean = true) As Task(Of DurableOrchestrationStatus)" />
      <MemberSignature Language="F#" Value="abstract member GetStatusAsync : string * bool * bool * bool -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.DurableOrchestrationStatus&gt;" Usage="durableOrchestrationClientBase.GetStatusAsync (instanceId, showHistory, showHistoryOutput, showInput)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.DurableOrchestrationStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.String" />
        <Parameter Name="showHistory" Type="System.Boolean" />
        <Parameter Name="showHistoryOutput" Type="System.Boolean" />
        <Parameter Name="showInput" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="instanceId">The ID of the orchestration instance to query.</param>
        <param name="showHistory">Boolean marker for including execution history in the response.</param>
        <param name="showHistoryOutput">Boolean marker for including input and output in the execution history response.</param>
        <param name="showInput">If set, fetch and return the input for the orchestration instance.</param>
        <summary>
            Gets the status of the specified orchestration instance.
            </summary>
        <returns>Returns a task which completes when the status has been fetched.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStatusAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.OrchestrationStatusQueryResult&gt; GetStatusAsync (DateTime createdTimeFrom, DateTime? createdTimeTo, System.Collections.Generic.IEnumerable&lt;Microsoft.Azure.WebJobs.OrchestrationRuntimeStatus&gt; runtimeStatus, int pageSize, string continuationToken, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.WebJobs.Extensions.DurableTask.OrchestrationStatusQueryResult&gt; GetStatusAsync(valuetype System.DateTime createdTimeFrom, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; createdTimeTo, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.Azure.WebJobs.OrchestrationRuntimeStatus&gt; runtimeStatus, int32 pageSize, string continuationToken, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationClientBase.GetStatusAsync(System.DateTime,System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{Microsoft.Azure.WebJobs.OrchestrationRuntimeStatus},System.Int32,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetStatusAsync (createdTimeFrom As DateTime, createdTimeTo As Nullable(Of DateTime), runtimeStatus As IEnumerable(Of OrchestrationRuntimeStatus), pageSize As Integer, continuationToken As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of OrchestrationStatusQueryResult)" />
      <MemberSignature Language="F#" Value="abstract member GetStatusAsync : DateTime * Nullable&lt;DateTime&gt; * seq&lt;Microsoft.Azure.WebJobs.OrchestrationRuntimeStatus&gt; * int * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.OrchestrationStatusQueryResult&gt;" Usage="durableOrchestrationClientBase.GetStatusAsync (createdTimeFrom, createdTimeTo, runtimeStatus, pageSize, continuationToken, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.OrchestrationStatusQueryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="createdTimeFrom" Type="System.DateTime" />
        <Parameter Name="createdTimeTo" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="runtimeStatus" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Azure.WebJobs.OrchestrationRuntimeStatus&gt;" />
        <Parameter Name="pageSize" Type="System.Int32" />
        <Parameter Name="continuationToken" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="createdTimeFrom">Return orchestration instances which were created after this DateTime.</param>
        <param name="createdTimeTo">Return orchestration instances which were created before this DateTime.</param>
        <param name="runtimeStatus">Return orchestration instances which matches the runtimeStatus.</param>
        <param name="pageSize">Number of records per one request.</param>
        <param name="continuationToken">ContinuationToken of the pager.</param>
        <param name="cancellationToken">Cancellation token that can be used to cancel the status query operation.</param>
        <summary>
            Gets the status of all orchestration instances with paging that match the specified conditions.
            </summary>
        <returns>Returns each page of orchestration status for all instances and continuation token of next page.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PurgeInstanceHistoryAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.PurgeHistoryResult&gt; PurgeInstanceHistoryAsync (string instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.WebJobs.PurgeHistoryResult&gt; PurgeInstanceHistoryAsync(string instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationClientBase.PurgeInstanceHistoryAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function PurgeInstanceHistoryAsync (instanceId As String) As Task(Of PurgeHistoryResult)" />
      <MemberSignature Language="F#" Value="abstract member PurgeInstanceHistoryAsync : string -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.PurgeHistoryResult&gt;" Usage="durableOrchestrationClientBase.PurgeInstanceHistoryAsync instanceId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.PurgeHistoryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="instanceId">The ID of the orchestration instance to purge.</param>
        <summary>
            Purge the history for a concrete instance.
            </summary>
        <returns>Returns an instance of <see cref="T:Microsoft.Azure.WebJobs.PurgeHistoryResult" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PurgeInstanceHistoryAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.PurgeHistoryResult&gt; PurgeInstanceHistoryAsync (DateTime createdTimeFrom, DateTime? createdTimeTo, System.Collections.Generic.IEnumerable&lt;DurableTask.Core.OrchestrationStatus&gt; runtimeStatus);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.WebJobs.PurgeHistoryResult&gt; PurgeInstanceHistoryAsync(valuetype System.DateTime createdTimeFrom, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; createdTimeTo, class System.Collections.Generic.IEnumerable`1&lt;valuetype DurableTask.Core.OrchestrationStatus&gt; runtimeStatus) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationClientBase.PurgeInstanceHistoryAsync(System.DateTime,System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{DurableTask.Core.OrchestrationStatus})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function PurgeInstanceHistoryAsync (createdTimeFrom As DateTime, createdTimeTo As Nullable(Of DateTime), runtimeStatus As IEnumerable(Of OrchestrationStatus)) As Task(Of PurgeHistoryResult)" />
      <MemberSignature Language="F#" Value="abstract member PurgeInstanceHistoryAsync : DateTime * Nullable&lt;DateTime&gt; * seq&lt;DurableTask.Core.OrchestrationStatus&gt; -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.PurgeHistoryResult&gt;" Usage="durableOrchestrationClientBase.PurgeInstanceHistoryAsync (createdTimeFrom, createdTimeTo, runtimeStatus)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.PurgeHistoryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="createdTimeFrom" Type="System.DateTime" />
        <Parameter Name="createdTimeTo" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="runtimeStatus" Type="System.Collections.Generic.IEnumerable&lt;DurableTask.Core.OrchestrationStatus&gt;" />
      </Parameters>
      <Docs>
        <param name="createdTimeFrom">Start creation time for querying instances for purging.</param>
        <param name="createdTimeTo">End creation time for querying instances for purging.</param>
        <param name="runtimeStatus">List of runtime status for querying instances for purging. Only Completed, Terminated, or Failed will be processed.</param>
        <summary>
            Purge the orchestration history for instances that match the conditions.
            </summary>
        <returns>Returns an instance of <see cref="T:Microsoft.Azure.WebJobs.PurgeHistoryResult" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEventAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task RaiseEventAsync (string instanceId, string eventName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task RaiseEventAsync(string instanceId, string eventName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationClientBase.RaiseEventAsync(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RaiseEventAsync (instanceId As String, eventName As String) As Task" />
      <MemberSignature Language="F#" Value="abstract member RaiseEventAsync : string * string -&gt; System.Threading.Tasks.Task&#xA;override this.RaiseEventAsync : string * string -&gt; System.Threading.Tasks.Task" Usage="durableOrchestrationClientBase.RaiseEventAsync (instanceId, eventName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.String" />
        <Parameter Name="eventName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="instanceId">The ID of the orchestration instance that will handle the event.</param>
        <param name="eventName">The name of the event.</param>
        <summary>
            Sends an event notification message to a waiting orchestration instance.
            </summary>
        <returns>A task that completes when the event notification message has been enqueued.</returns>
        <remarks>
          <para>
            In order to handle the event, the target orchestration instance must be waiting for an
            event named <paramref name="eventName" /> using the
            <see cref="M:Microsoft.Azure.WebJobs.DurableOrchestrationContext.WaitForExternalEvent``1(System.String)" /> API.
            </para>
          <para>
            If the specified instance is not found or not running, this operation will have no effect.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEventAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task RaiseEventAsync (string instanceId, string eventName, object eventData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task RaiseEventAsync(string instanceId, string eventName, object eventData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationClientBase.RaiseEventAsync(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function RaiseEventAsync (instanceId As String, eventName As String, eventData As Object) As Task" />
      <MemberSignature Language="F#" Value="abstract member RaiseEventAsync : string * string * obj -&gt; System.Threading.Tasks.Task" Usage="durableOrchestrationClientBase.RaiseEventAsync (instanceId, eventName, eventData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.String" />
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventData" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceId">The ID of the orchestration instance that will handle the event.</param>
        <param name="eventName">The name of the event.</param>
        <param name="eventData">The JSON-serializeable data associated with the event.</param>
        <summary>
            Sends an event notification message to a waiting orchestration instance.
            </summary>
        <returns>A task that completes when the event notification message has been enqueued.</returns>
        <remarks>
          <para>
            In order to handle the event, the target orchestration instance must be waiting for an
            event named <paramref name="eventName" /> using the
            <see cref="M:Microsoft.Azure.WebJobs.DurableOrchestrationContext.WaitForExternalEvent``1(System.String)" /> API.
            </para>
          <para>
            If the specified instance is not found or not running, this operation will have no effect.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEventAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task RaiseEventAsync (string taskHubName, string instanceId, string eventName, object eventData, string connectionName = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task RaiseEventAsync(string taskHubName, string instanceId, string eventName, object eventData, string connectionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationClientBase.RaiseEventAsync(System.String,System.String,System.String,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function RaiseEventAsync (taskHubName As String, instanceId As String, eventName As String, eventData As Object, Optional connectionName As String = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member RaiseEventAsync : string * string * string * obj * string -&gt; System.Threading.Tasks.Task" Usage="durableOrchestrationClientBase.RaiseEventAsync (taskHubName, instanceId, eventName, eventData, connectionName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="taskHubName" Type="System.String" />
        <Parameter Name="instanceId" Type="System.String" />
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventData" Type="System.Object" />
        <Parameter Name="connectionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="taskHubName">The TaskHubName of the orchestration that will handle the event.</param>
        <param name="instanceId">The ID of the orchestration instance that will handle the event.</param>
        <param name="eventName">The name of the event.</param>
        <param name="eventData">The JSON-serializeable data associated with the event.</param>
        <param name="connectionName">The name of the connection string associated with <paramref name="taskHubName" />.</param>
        <summary>
            Sends an event notification message to a waiting orchestration instance.
            </summary>
        <returns>A task that completes when the event notification message has been enqueued.</returns>
        <remarks>
          <para>
            In order to handle the event, the target orchestration instance must be waiting for an
            event named <paramref name="eventName" /> using the
            <see cref="M:Microsoft.Azure.WebJobs.DurableOrchestrationContext.WaitForExternalEvent``1(System.String)" /> API.
            </para>
          <para>
            If the specified instance is not found or not running, this operation will have no effect.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RewindAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task RewindAsync (string instanceId, string reason);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task RewindAsync(string instanceId, string reason) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationClientBase.RewindAsync(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function RewindAsync (instanceId As String, reason As String) As Task" />
      <MemberSignature Language="F#" Value="abstract member RewindAsync : string * string -&gt; System.Threading.Tasks.Task" Usage="durableOrchestrationClientBase.RewindAsync (instanceId, reason)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.String" />
        <Parameter Name="reason" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="instanceId">The ID of the orchestration instance to rewind.</param>
        <param name="reason">The reason for rewinding the orchestration instance.</param>
        <summary>
            Rewinds the specified failed orchestration instance with a reason.
            </summary>
        <returns>A task that completes when the rewind message is enqueued.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartNewAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; StartNewAsync (string orchestratorFunctionName, object input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; StartNewAsync(string orchestratorFunctionName, object input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationClientBase.StartNewAsync(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StartNewAsync (orchestratorFunctionName As String, input As Object) As Task(Of String)" />
      <MemberSignature Language="F#" Value="abstract member StartNewAsync : string * obj -&gt; System.Threading.Tasks.Task&lt;string&gt;&#xA;override this.StartNewAsync : string * obj -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="durableOrchestrationClientBase.StartNewAsync (orchestratorFunctionName, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orchestratorFunctionName" Type="System.String" />
        <Parameter Name="input" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="orchestratorFunctionName">The name of the orchestrator function to start.</param>
        <param name="input">JSON-serializeable input value for the orchestrator function.</param>
        <summary>
            Starts a new execution of the specified orchestrator function.
            </summary>
        <returns>A task that completes when the orchestration is started.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            The specified function does not exist, is disabled, or is not an orchestrator function.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="StartNewAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;string&gt; StartNewAsync (string orchestratorFunctionName, string instanceId, object input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; StartNewAsync(string orchestratorFunctionName, string instanceId, object input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationClientBase.StartNewAsync(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function StartNewAsync (orchestratorFunctionName As String, instanceId As String, input As Object) As Task(Of String)" />
      <MemberSignature Language="F#" Value="abstract member StartNewAsync : string * string * obj -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="durableOrchestrationClientBase.StartNewAsync (orchestratorFunctionName, instanceId, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orchestratorFunctionName" Type="System.String" />
        <Parameter Name="instanceId" Type="System.String" />
        <Parameter Name="input" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="orchestratorFunctionName">The name of the orchestrator function to start.</param>
        <param name="instanceId">The ID to use for the new orchestration instance.</param>
        <param name="input">JSON-serializeable input value for the orchestrator function.</param>
        <summary>
            Starts a new instance of the specified orchestrator function.
            </summary>
        <returns>A task that completes when the orchestration is started.</returns>
        <remarks>
            If an orchestration instance with the specified ID already exists, the existing instance
            will be silently replaced by this new instance.
            </remarks>
        <exception cref="T:System.ArgumentException">
            The specified function does not exist, is disabled, or is not an orchestrator function.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="TaskHubName">
      <MemberSignature Language="C#" Value="public abstract string TaskHubName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TaskHubName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.WebJobs.DurableOrchestrationClientBase.TaskHubName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property TaskHubName As String" />
      <MemberSignature Language="F#" Value="member this.TaskHubName : string" Usage="Microsoft.Azure.WebJobs.DurableOrchestrationClientBase.TaskHubName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the name of the task hub configured on this client instance.
            </summary>
        <value>
            The name of the task hub.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TerminateAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task TerminateAsync (string instanceId, string reason);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task TerminateAsync(string instanceId, string reason) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationClientBase.TerminateAsync(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function TerminateAsync (instanceId As String, reason As String) As Task" />
      <MemberSignature Language="F#" Value="abstract member TerminateAsync : string * string -&gt; System.Threading.Tasks.Task" Usage="durableOrchestrationClientBase.TerminateAsync (instanceId, reason)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.String" />
        <Parameter Name="reason" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="instanceId">The ID of the orchestration instance to terminate.</param>
        <param name="reason">The reason for terminating the orchestration instance.</param>
        <summary>
            Terminates a running orchestration instance.
            </summary>
        <returns>A task that completes when the terminate message is enqueued.</returns>
        <remarks>
            Terminating an orchestration instance has no effect on any in-flight activity function executions
            or sub-orchestrations that were started by the current orchestration instance.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitForCompletionOrCreateCheckStatusResponseAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; WaitForCompletionOrCreateCheckStatusResponseAsync (System.Net.Http.HttpRequestMessage request, string instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; WaitForCompletionOrCreateCheckStatusResponseAsync(class System.Net.Http.HttpRequestMessage request, string instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationClientBase.WaitForCompletionOrCreateCheckStatusResponseAsync(System.Net.Http.HttpRequestMessage,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitForCompletionOrCreateCheckStatusResponseAsync (request As HttpRequestMessage, instanceId As String) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="F#" Value="abstract member WaitForCompletionOrCreateCheckStatusResponseAsync : System.Net.Http.HttpRequestMessage * string -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;&#xA;override this.WaitForCompletionOrCreateCheckStatusResponseAsync : System.Net.Http.HttpRequestMessage * string -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="durableOrchestrationClientBase.WaitForCompletionOrCreateCheckStatusResponseAsync (request, instanceId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="instanceId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="request">The HTTP request that triggered the current function.</param>
        <param name="instanceId">The unique ID of the instance to check.</param>
        <summary>
            Creates an HTTP response which either contains a payload of management URLs for a non-completed instance
            or contains the payload containing the output of the completed orchestration.
            </summary>
        <returns>An HTTP response which may include a 202 and location header or a 200 with the durable function output in the response body.</returns>
        <remarks>
            If the orchestration instance completes within the default 10 second timeout, then the HTTP response payload will
            contain the output of the orchestration instance formatted as JSON. However, if the orchestration does not
            complete within this timeout, then the HTTP response will be identical to that of the
            <see cref="M:Microsoft.Azure.WebJobs.DurableOrchestrationClientBase.CreateCheckStatusResponse(System.Net.Http.HttpRequestMessage,System.String)" /> API.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitForCompletionOrCreateCheckStatusResponseAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; WaitForCompletionOrCreateCheckStatusResponseAsync (System.Net.Http.HttpRequestMessage request, string instanceId, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; WaitForCompletionOrCreateCheckStatusResponseAsync(class System.Net.Http.HttpRequestMessage request, string instanceId, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationClientBase.WaitForCompletionOrCreateCheckStatusResponseAsync(System.Net.Http.HttpRequestMessage,System.String,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WaitForCompletionOrCreateCheckStatusResponseAsync (request As HttpRequestMessage, instanceId As String, timeout As TimeSpan) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="F#" Value="abstract member WaitForCompletionOrCreateCheckStatusResponseAsync : System.Net.Http.HttpRequestMessage * string * TimeSpan -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;&#xA;override this.WaitForCompletionOrCreateCheckStatusResponseAsync : System.Net.Http.HttpRequestMessage * string * TimeSpan -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="durableOrchestrationClientBase.WaitForCompletionOrCreateCheckStatusResponseAsync (request, instanceId, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="instanceId" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="request">The HTTP request that triggered the current function.</param>
        <param name="instanceId">The unique ID of the instance to check.</param>
        <param name="timeout">Total allowed timeout for output from the durable function. The default value is 10 seconds.</param>
        <summary>
            Creates an HTTP response which either contains a payload of management URLs for a non-completed instance
            or contains the payload containing the output of the completed orchestration.
            </summary>
        <returns>An HTTP response which may include a 202 and location header or a 200 with the durable function output in the response body.</returns>
        <remarks>
            If the orchestration instance completes within the specified timeout, then the HTTP response payload will
            contain the output of the orchestration instance formatted as JSON. However, if the orchestration does not
            complete within the specified timeout, then the HTTP response will be identical to that of the
            <see cref="M:Microsoft.Azure.WebJobs.DurableOrchestrationClientBase.CreateCheckStatusResponse(System.Net.Http.HttpRequestMessage,System.String)" /> API.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitForCompletionOrCreateCheckStatusResponseAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; WaitForCompletionOrCreateCheckStatusResponseAsync (System.Net.Http.HttpRequestMessage request, string instanceId, TimeSpan timeout, TimeSpan retryInterval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; WaitForCompletionOrCreateCheckStatusResponseAsync(class System.Net.Http.HttpRequestMessage request, string instanceId, valuetype System.TimeSpan timeout, valuetype System.TimeSpan retryInterval) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.DurableOrchestrationClientBase.WaitForCompletionOrCreateCheckStatusResponseAsync(System.Net.Http.HttpRequestMessage,System.String,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function WaitForCompletionOrCreateCheckStatusResponseAsync (request As HttpRequestMessage, instanceId As String, timeout As TimeSpan, retryInterval As TimeSpan) As Task(Of HttpResponseMessage)" />
      <MemberSignature Language="F#" Value="abstract member WaitForCompletionOrCreateCheckStatusResponseAsync : System.Net.Http.HttpRequestMessage * string * TimeSpan * TimeSpan -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="durableOrchestrationClientBase.WaitForCompletionOrCreateCheckStatusResponseAsync (request, instanceId, timeout, retryInterval)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="instanceId" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="retryInterval" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="request">The HTTP request that triggered the current function.</param>
        <param name="instanceId">The unique ID of the instance to check.</param>
        <param name="timeout">Total allowed timeout for output from the durable function. The default value is 10 seconds.</param>
        <param name="retryInterval">The timeout between checks for output from the durable function. The default value is 1 second.</param>
        <summary>
            Creates an HTTP response which either contains a payload of management URLs for a non-completed instance
            or contains the payload containing the output of the completed orchestration.
            </summary>
        <returns>An HTTP response which may include a 202 and location header or a 200 with the durable function output in the response body.</returns>
        <remarks>
            If the orchestration instance completes within the specified timeout, then the HTTP response payload will
            contain the output of the orchestration instance formatted as JSON. However, if the orchestration does not
            complete within the specified timeout, then the HTTP response will be identical to that of the
            <see cref="M:Microsoft.Azure.WebJobs.DurableOrchestrationClientBase.CreateCheckStatusResponse(System.Net.Http.HttpRequestMessage,System.String)" /> API.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
