<Type Name="Query" FullName="Microsoft.Azure.Devices.Provisioning.Service.Query">
  <TypeSignature Language="C#" Value="public class Query : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Query extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Devices.Provisioning.Service.Query" />
  <TypeSignature Language="VB.NET" Value="Public Class Query&#xA;Implements IDisposable" />
  <TypeSignature Language="F#" Value="type Query = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Devices.Provisioning.Service</AssemblyName>
    <AssemblyVersion>1.3.0.0</AssemblyVersion>
    <AssemblyVersion>1.3.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
             The query iterator.
             </summary>
    <remarks>
             The <see cref="T:Microsoft.Azure.Devices.Provisioning.Service.Query" /> iterator is the result of the query factory for
             <list type="bullet"><item><b>IndividualEnrollment:</b><see cref="M:Microsoft.Azure.Devices.Provisioning.Service.ProvisioningServiceClient.CreateIndividualEnrollmentQuery(Microsoft.Azure.Devices.Provisioning.Service.QuerySpecification,System.Int32)" /></item><item><b>EnrollmentGroup:</b><see cref="M:Microsoft.Azure.Devices.Provisioning.Service.ProvisioningServiceClient.CreateEnrollmentGroupQuery(Microsoft.Azure.Devices.Provisioning.Service.QuerySpecification,System.Int32)" /></item><item><b>RegistrationStatus:</b><see cref="M:Microsoft.Azure.Devices.Provisioning.Service.ProvisioningServiceClient.CreateEnrollmentGroupRegistrationStateQuery(Microsoft.Azure.Devices.Provisioning.Service.QuerySpecification,System.String,System.Int32)" /></item></list>
             On all cases, the <see cref="T:Microsoft.Azure.Devices.Provisioning.Service.QuerySpecification" /> contains a SQL query that must follow the
                 Query Language for the Device Provisioning Service.
            
             Optionally, an <code>Integer</code> with the <b>page size</b>, can determine the maximum number of the items in the
                 <see cref="T:Microsoft.Azure.Devices.Provisioning.Service.QueryResult" /> returned by the <see cref="M:Microsoft.Azure.Devices.Provisioning.Service.Query.NextAsync" />. It must be any positive integer, and if it 
                 contains 0, the Device Provisioning Service will ignore it and use a standard page size.
            
             You can use this Object as a standard iterator, just using the <code>HasNext</code> and <code>NextAsync</code> in a
                 <code>while</code> loop, up to the point where the <code>HasNext</code> contains <code>false</code>. But, keep 
                 in mind that the <see cref="T:Microsoft.Azure.Devices.Provisioning.Service.QueryResult" /> can contain a empty list, even if the <code>HasNext</code> contained 
                 <code>true</code>. For example, image that you have 10 IndividualEnrollment in the Device Provisioning Service 
                 and you created new query with the <code>PageSize</code> equals 5. In the first iteration, <code>HasNext</code> 
                 will contains <code>true</code>, and the first <code>NextAsync</code> will return a <code>QueryResult</code> with 
                 5 items. After, your code will check the <code>HasNext</code>, which will contains <code>true</code> again. Now, 
                 before you get the next page, somebody deletes all the IndividualEnrollment. What happened, when you call the 
                 <code>NextAsync</code>, it will return a valid <code>QueryResult</code>, but the <see cref="P:Microsoft.Azure.Devices.Provisioning.Service.QueryResult.Items" /> 
                 will contain an empty list.
            
             Besides the <code>Items</code>, the <code>QueryResult</code> contains the <see cref="P:Microsoft.Azure.Devices.Provisioning.Service.QueryResult.ContinuationToken" />.
                 You can also store a query context (QuerySpecification + ContinuationToken) and restart it in the future, from
                 the point where you stopped. Just recreating the query with the same <see cref="T:Microsoft.Azure.Devices.Provisioning.Service.QuerySpecification" /> and calling
                 the <see cref="M:Microsoft.Azure.Devices.Provisioning.Service.Query.NextAsync(System.String)" /> passing the stored <code>ContinuationToken</code>.
             </remarks>
  </Docs>
  <Members>
    <Member MemberName="ContinuationToken">
      <MemberSignature Language="C#" Value="public string ContinuationToken { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContinuationToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Devices.Provisioning.Service.Query.ContinuationToken" />
      <MemberSignature Language="VB.NET" Value="Public Property ContinuationToken As String" />
      <MemberSignature Language="F#" Value="member this.ContinuationToken : string with get, set" Usage="Microsoft.Azure.Devices.Provisioning.Service.Query.ContinuationToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Devices.Provisioning.Service</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Getter and setter for the ContinuationToken.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Devices.Provisioning.Service.Query.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="query.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Devices.Provisioning.Service</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Dispose the HTTP resources.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Devices.Provisioning.Service.Query.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="query.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Devices.Provisioning.Service</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        <summary>
            Releases the unmanaged resources used by the Component and optionally releases the managed resources.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasNext">
      <MemberSignature Language="C#" Value="public bool HasNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Devices.Provisioning.Service.Query.HasNext" />
      <MemberSignature Language="VB.NET" Value="Public Function HasNext () As Boolean" />
      <MemberSignature Language="F#" Value="member this.HasNext : unit -&gt; bool" Usage="query.HasNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Devices.Provisioning.Service</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Getter for has next
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Contains <code>true</code> if the query is not finished in the Device Provisioning Service, and another
                iteration with <see cref="M:Microsoft.Azure.Devices.Provisioning.Service.Query.NextAsync" /> may return more items. Call <see cref="M:Microsoft.Azure.Devices.Provisioning.Service.Query.NextAsync" /> after 
                a <code>true</code><code>HasNext</code> will result in a <see cref="T:Microsoft.Azure.Devices.Provisioning.Service.QueryResult" /> that can or 
                cannot contains elements. But call <see cref="M:Microsoft.Azure.Devices.Provisioning.Service.Query.NextAsync" /> after a <code>false</code><code>HasNext</code> 
                will result in a exception.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Devices.Provisioning.Service.QueryResult&gt; NextAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Devices.Provisioning.Service.QueryResult&gt; NextAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Devices.Provisioning.Service.Query.NextAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function NextAsync () As Task(Of QueryResult)" />
      <MemberSignature Language="F#" Value="member this.NextAsync : unit -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Devices.Provisioning.Service.QueryResult&gt;" Usage="query.NextAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Devices.Provisioning.Service</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Devices.Provisioning.Service.QueryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Return the next page of result for the query.
            </summary>
        <returns>The <see cref="T:Microsoft.Azure.Devices.Provisioning.Service.QueryResult" /> with the next page of items for the query.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException">if the query does no have more pages to return.</exception>
      </Docs>
    </Member>
    <Member MemberName="NextAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Devices.Provisioning.Service.QueryResult&gt; NextAsync (string continuationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Devices.Provisioning.Service.QueryResult&gt; NextAsync(string continuationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Devices.Provisioning.Service.Query.NextAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function NextAsync (continuationToken As String) As Task(Of QueryResult)" />
      <MemberSignature Language="F#" Value="member this.NextAsync : string -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Devices.Provisioning.Service.QueryResult&gt;" Usage="query.NextAsync continuationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Devices.Provisioning.Service</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Devices.Provisioning.Service.QueryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationToken" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="continuationToken">the <code>String</code> with the previous continuationToken. It cannot be <code>null</code> or empty.</param>
        <summary>
            Return the next page of result for the query using a new continuationToken.
            </summary>
        <returns>The <see cref="T:Microsoft.Azure.Devices.Provisioning.Service.QueryResult" /> with the next page of items for the query.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException">if the query does no have more pages to return.</exception>
      </Docs>
    </Member>
    <Member MemberName="PageSize">
      <MemberSignature Language="C#" Value="public int PageSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PageSize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Devices.Provisioning.Service.Query.PageSize" />
      <MemberSignature Language="VB.NET" Value="Public Property PageSize As Integer" />
      <MemberSignature Language="F#" Value="member this.PageSize : int with get, set" Usage="Microsoft.Azure.Devices.Provisioning.Service.Query.PageSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Devices.Provisioning.Service</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Getter and setter for PageSize.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>