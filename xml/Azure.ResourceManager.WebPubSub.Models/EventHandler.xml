<Type Name="EventHandler" FullName="Azure.ResourceManager.WebPubSub.Models.EventHandler">
  <TypeSignature Language="C#" Value="public class EventHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventHandler extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.WebPubSub.Models.EventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Class EventHandler" />
  <TypeSignature Language="F#" Value="type EventHandler = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.WebPubSub</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> Properties of event handler. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventHandler (string urlTemplate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string urlTemplate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.WebPubSub.Models.EventHandler.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (urlTemplate As String)" />
      <MemberSignature Language="F#" Value="new Azure.ResourceManager.WebPubSub.Models.EventHandler : string -&gt; Azure.ResourceManager.WebPubSub.Models.EventHandler" Usage="new Azure.ResourceManager.WebPubSub.Models.EventHandler urlTemplate" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.WebPubSub</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="urlTemplate" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="urlTemplate">
            Gets or sets the EventHandler URL template. You can use a predefined parameter {hub} and {event} inside the template, the value of the EventHandler URL is dynamically calculated when the client request comes in.
            For example, UrlTemplate can be `http://example.com/api/{hub}/{event}`. The host part can't contains parameters.
            </param>
        <summary> Initializes a new instance of EventHandler. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="urlTemplate" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Auth">
      <MemberSignature Language="C#" Value="public Azure.ResourceManager.WebPubSub.Models.UpstreamAuthSettings Auth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.ResourceManager.WebPubSub.Models.UpstreamAuthSettings Auth" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.WebPubSub.Models.EventHandler.Auth" />
      <MemberSignature Language="VB.NET" Value="Public Property Auth As UpstreamAuthSettings" />
      <MemberSignature Language="F#" Value="member this.Auth : Azure.ResourceManager.WebPubSub.Models.UpstreamAuthSettings with get, set" Usage="Azure.ResourceManager.WebPubSub.Models.EventHandler.Auth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.WebPubSub</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.WebPubSub.Models.UpstreamAuthSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets or sets the auth settings for an event handler. If not set, no auth is used. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SystemEvents">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;string&gt; SystemEvents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;string&gt; SystemEvents" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.WebPubSub.Models.EventHandler.SystemEvents" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SystemEvents As IList(Of String)" />
      <MemberSignature Language="F#" Value="member this.SystemEvents : System.Collections.Generic.IList&lt;string&gt;" Usage="Azure.ResourceManager.WebPubSub.Models.EventHandler.SystemEvents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.WebPubSub</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets ot sets the list of system events. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlTemplate">
      <MemberSignature Language="C#" Value="public string UrlTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UrlTemplate" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.WebPubSub.Models.EventHandler.UrlTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Property UrlTemplate As String" />
      <MemberSignature Language="F#" Value="member this.UrlTemplate : string with get, set" Usage="Azure.ResourceManager.WebPubSub.Models.EventHandler.UrlTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.WebPubSub</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the EventHandler URL template. You can use a predefined parameter {hub} and {event} inside the template, the value of the EventHandler URL is dynamically calculated when the client request comes in.
            For example, UrlTemplate can be `http://example.com/api/{hub}/{event}`. The host part can't contains parameters.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserEventPattern">
      <MemberSignature Language="C#" Value="public string UserEventPattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UserEventPattern" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.WebPubSub.Models.EventHandler.UserEventPattern" />
      <MemberSignature Language="VB.NET" Value="Public Property UserEventPattern As String" />
      <MemberSignature Language="F#" Value="member this.UserEventPattern : string with get, set" Usage="Azure.ResourceManager.WebPubSub.Models.EventHandler.UserEventPattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.WebPubSub</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the matching pattern for event names.
            There are 3 kind of patterns supported:
                1. "*", it to matches any event name
                2. Combine multiple events with ",", for example "event1,event2", it matches event "event1" and "event2"
                3. The single event name, for example, "event1", it matches "event1"
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
