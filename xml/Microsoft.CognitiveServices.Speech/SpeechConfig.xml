<Type Name="SpeechConfig" FullName="Microsoft.CognitiveServices.Speech.SpeechConfig">
  <TypeSignature Language="C#" Value="public class SpeechConfig" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SpeechConfig extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CognitiveServices.Speech.SpeechConfig" />
  <TypeSignature Language="VB.NET" Value="Public Class SpeechConfig" />
  <TypeSignature Language="F#" Value="type SpeechConfig = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
    <AssemblyVersion>1.16.0.28</AssemblyVersion>
    <AssemblyVersion>1.17.0.28</AssemblyVersion>
    <AssemblyVersion>1.18.0.28</AssemblyVersion>
    <AssemblyVersion>1.19.0.28</AssemblyVersion>
    <AssemblyVersion>1.20.0.28</AssemblyVersion>
    <AssemblyVersion>1.21.0.28</AssemblyVersion>
    <AssemblyVersion>1.22.0.28</AssemblyVersion>
    <AssemblyVersion>1.23.0.28</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
             Information about your subscription, including your key and region, endpoint, host, or authorization token.
             </summary>
    <remarks>
             Calls to the Speech service require a **SpeechConfig** object.
            
             There are a few ways that you can initialize a SpeechConfig:
             * Using <see cref="M:Microsoft.CognitiveServices.Speech.SpeechConfig.FromSubscription(System.String,System.String)" />: pass in a key and the associated region.
             * Using <see cref="M:Microsoft.CognitiveServices.Speech.SpeechConfig.FromEndpoint(System.Uri,System.String)" />: pass in a Speech service endpoint. A key or authorization token is optional.
             * Using <see cref="M:Microsoft.CognitiveServices.Speech.SpeechConfig.FromHost(System.Uri,System.String)" />: pass in a host address. A key or authorization token is optional.
            
             See also: [Get started with speech-to-text](/azure/cognitive-services/speech-service/get-started-speech-to-text)
             </remarks>
  </Docs>
  <Members>
    <Member MemberName="AuthorizationToken">
      <MemberSignature Language="C#" Value="public string AuthorizationToken { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AuthorizationToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CognitiveServices.Speech.SpeechConfig.AuthorizationToken" />
      <MemberSignature Language="VB.NET" Value="Public Property AuthorizationToken As String" />
      <MemberSignature Language="F#" Value="member this.AuthorizationToken : string with get, set" Usage="Microsoft.CognitiveServices.Speech.SpeechConfig.AuthorizationToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>1.16.0.28</AssemblyVersion>
        <AssemblyVersion>1.17.0.28</AssemblyVersion>
        <AssemblyVersion>1.18.0.28</AssemblyVersion>
        <AssemblyVersion>1.19.0.28</AssemblyVersion>
        <AssemblyVersion>1.20.0.28</AssemblyVersion>
        <AssemblyVersion>1.21.0.28</AssemblyVersion>
        <AssemblyVersion>1.22.0.28</AssemblyVersion>
        <AssemblyVersion>1.23.0.28</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the authorization token.
            </summary>
        <value>To be added.</value>
        <remarks>
            You must assure that the authorization token is valid. Before the authorization token
            expires, you need to refresh it by calling this setter with a new valid token.
            Configuration values are copied when creating a new recognizer, so the new token value will not apply to recognizers that have already been created.
            For recognizers that have been created before, you need to set the authorization token of the corresponding recognizer
            to refresh the token. Otherwise, the recognizers will trigger errors during recognition.
            Changed in 1.3.0
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableAudioLogging">
      <MemberSignature Language="C#" Value="public void EnableAudioLogging ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnableAudioLogging() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.SpeechConfig.EnableAudioLogging" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnableAudioLogging ()" />
      <MemberSignature Language="F#" Value="member this.EnableAudioLogging : unit -&gt; unit" Usage="speechConfig.EnableAudioLogging " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>1.16.0.28</AssemblyVersion>
        <AssemblyVersion>1.17.0.28</AssemblyVersion>
        <AssemblyVersion>1.18.0.28</AssemblyVersion>
        <AssemblyVersion>1.19.0.28</AssemblyVersion>
        <AssemblyVersion>1.20.0.28</AssemblyVersion>
        <AssemblyVersion>1.21.0.28</AssemblyVersion>
        <AssemblyVersion>1.22.0.28</AssemblyVersion>
        <AssemblyVersion>1.23.0.28</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Enable audio logging in service.
            Audio logging writes log information and diagnostics to a local file.
            Added in 1.5.0
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableDictation">
      <MemberSignature Language="C#" Value="public void EnableDictation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnableDictation() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.SpeechConfig.EnableDictation" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnableDictation ()" />
      <MemberSignature Language="F#" Value="member this.EnableDictation : unit -&gt; unit" Usage="speechConfig.EnableDictation " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>1.16.0.28</AssemblyVersion>
        <AssemblyVersion>1.17.0.28</AssemblyVersion>
        <AssemblyVersion>1.18.0.28</AssemblyVersion>
        <AssemblyVersion>1.19.0.28</AssemblyVersion>
        <AssemblyVersion>1.20.0.28</AssemblyVersion>
        <AssemblyVersion>1.21.0.28</AssemblyVersion>
        <AssemblyVersion>1.22.0.28</AssemblyVersion>
        <AssemblyVersion>1.23.0.28</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Enable dictation during continuous recognition.
            Added in 1.5.0
            </summary>
        <remarks>
            With dictation enabled, word descriptions of sentence structures are understood.
            For example, ending a statement by saying "question mark" adds a question mark to the sentence when dictation is enabled.
            Only supported for continuous recognition.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndpointId">
      <MemberSignature Language="C#" Value="public string EndpointId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EndpointId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CognitiveServices.Speech.SpeechConfig.EndpointId" />
      <MemberSignature Language="VB.NET" Value="Public Property EndpointId As String" />
      <MemberSignature Language="F#" Value="member this.EndpointId : string with get, set" Usage="Microsoft.CognitiveServices.Speech.SpeechConfig.EndpointId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>1.16.0.28</AssemblyVersion>
        <AssemblyVersion>1.17.0.28</AssemblyVersion>
        <AssemblyVersion>1.18.0.28</AssemblyVersion>
        <AssemblyVersion>1.19.0.28</AssemblyVersion>
        <AssemblyVersion>1.20.0.28</AssemblyVersion>
        <AssemblyVersion>1.21.0.28</AssemblyVersion>
        <AssemblyVersion>1.22.0.28</AssemblyVersion>
        <AssemblyVersion>1.23.0.28</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the endpoint ID of a custom speech model to use for speech recognition, or a custom voice model for speech synthesis.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromAuthorizationToken">
      <MemberSignature Language="C#" Value="public static Microsoft.CognitiveServices.Speech.SpeechConfig FromAuthorizationToken (string authorizationToken, string region);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CognitiveServices.Speech.SpeechConfig FromAuthorizationToken(string authorizationToken, string region) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.SpeechConfig.FromAuthorizationToken(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromAuthorizationToken (authorizationToken As String, region As String) As SpeechConfig" />
      <MemberSignature Language="F#" Value="static member FromAuthorizationToken : string * string -&gt; Microsoft.CognitiveServices.Speech.SpeechConfig" Usage="Microsoft.CognitiveServices.Speech.SpeechConfig.FromAuthorizationToken (authorizationToken, region)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>1.16.0.28</AssemblyVersion>
        <AssemblyVersion>1.17.0.28</AssemblyVersion>
        <AssemblyVersion>1.18.0.28</AssemblyVersion>
        <AssemblyVersion>1.19.0.28</AssemblyVersion>
        <AssemblyVersion>1.20.0.28</AssemblyVersion>
        <AssemblyVersion>1.21.0.28</AssemblyVersion>
        <AssemblyVersion>1.22.0.28</AssemblyVersion>
        <AssemblyVersion>1.23.0.28</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CognitiveServices.Speech.SpeechConfig</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authorizationToken" Type="System.String" />
        <Parameter Name="region" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="authorizationToken">The authorization token.</param>
        <param name="region">Region identifier for the authorization token.</param>
        <summary>
            Creates an instance of the speech config with specified authorization token and region.
            </summary>
        <returns>A speech config instance.</returns>
        <remarks>
            The caller needs to ensure that the authorization token is valid. Before the authorization token
            expires, the caller needs to refresh it by calling this setter with a new valid token.
            As configuration values are copied when creating a new recognizer, the new token value will not apply to recognizers that have already been created.
            For recognizers that have been created before, you need to set authorization token of the corresponding recognizer
            to refresh the token. Otherwise, the recognizers will encounter errors during recognition.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromEndpoint">
      <MemberSignature Language="C#" Value="public static Microsoft.CognitiveServices.Speech.SpeechConfig FromEndpoint (Uri endpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CognitiveServices.Speech.SpeechConfig FromEndpoint(class System.Uri endpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.SpeechConfig.FromEndpoint(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromEndpoint (endpoint As Uri) As SpeechConfig" />
      <MemberSignature Language="F#" Value="static member FromEndpoint : Uri -&gt; Microsoft.CognitiveServices.Speech.SpeechConfig" Usage="Microsoft.CognitiveServices.Speech.SpeechConfig.FromEndpoint endpoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>1.16.0.28</AssemblyVersion>
        <AssemblyVersion>1.17.0.28</AssemblyVersion>
        <AssemblyVersion>1.18.0.28</AssemblyVersion>
        <AssemblyVersion>1.19.0.28</AssemblyVersion>
        <AssemblyVersion>1.20.0.28</AssemblyVersion>
        <AssemblyVersion>1.21.0.28</AssemblyVersion>
        <AssemblyVersion>1.22.0.28</AssemblyVersion>
        <AssemblyVersion>1.23.0.28</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CognitiveServices.Speech.SpeechConfig</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="endpoint">The service endpoint to connect to.</param>
        <summary>
            Creates an instance of the speech config with specified endpoint. Added in 1.5.0
            </summary>
        <returns>A speech config instance.</returns>
        <remarks>
            * This method is only used for a non-standard resource path or parameter overrides. To change the host name with standard resource paths, use **FromHost** instead.
            * The query parameters specified in the endpoint URI are not changed, even if they are set by any other APIs.
              For example, if the recognition language is defined in URI as query parameter "language=de-DE", and the property SpeechRecognitionLanguage is set to "en-US", the language setting in URI takes precedence, and the effective language is "de-DE".
              Only the parameters that are not specified in the endpoint URI can be set by other APIs.
            * If the endpoint requires a subscription key for authentication, use FromEndpoint(System.Uri, string) to pass the subscription key as parameter.
              To use an authorization token with FromEndpoint, use this method to create a SpeechConfig instance, and then set the AuthorizationToken property on the created SpeechConfig instance.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromEndpoint">
      <MemberSignature Language="C#" Value="public static Microsoft.CognitiveServices.Speech.SpeechConfig FromEndpoint (Uri endpoint, string subscriptionKey);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CognitiveServices.Speech.SpeechConfig FromEndpoint(class System.Uri endpoint, string subscriptionKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.SpeechConfig.FromEndpoint(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromEndpoint (endpoint As Uri, subscriptionKey As String) As SpeechConfig" />
      <MemberSignature Language="F#" Value="static member FromEndpoint : Uri * string -&gt; Microsoft.CognitiveServices.Speech.SpeechConfig" Usage="Microsoft.CognitiveServices.Speech.SpeechConfig.FromEndpoint (endpoint, subscriptionKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>1.16.0.28</AssemblyVersion>
        <AssemblyVersion>1.17.0.28</AssemblyVersion>
        <AssemblyVersion>1.18.0.28</AssemblyVersion>
        <AssemblyVersion>1.19.0.28</AssemblyVersion>
        <AssemblyVersion>1.20.0.28</AssemblyVersion>
        <AssemblyVersion>1.21.0.28</AssemblyVersion>
        <AssemblyVersion>1.22.0.28</AssemblyVersion>
        <AssemblyVersion>1.23.0.28</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CognitiveServices.Speech.SpeechConfig</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="subscriptionKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="endpoint">The service endpoint to connect to.</param>
        <param name="subscriptionKey">The subscription key. To create or find your key and region, see [Find keys and region](/azure/cognitive-services/speech-service/overview#find-keys-and-region).</param>
        <summary>
            Creates an instance of SpeechConfig with a custom endpoint and subscription key.
            </summary>
        <returns>A speech config instance.</returns>
        <remarks>
            * This method is only used for a non-standard resource path or parameter overrides. To change the host name with standard resource paths, use **FromHost** instead.
            * The query parameters specified in the endpoint URI are not changed, even if they are set by any other API call.
              For example, if the recognition language is defined in the URI query parameter as "language=de-DE", and the property SpeechRecognitionLanguage is set to "en-US", the language set in the URI takes precedence, and "de-DE" remains the expected language.
              Since parameters included in the endpoint URI take priority, only parameters that are not specified in the endpoint URI can be set by other APIs.
            * To use an authorization token with FromEndpoint, use FromEndpoint(System.Uri), and then set the AuthorizationToken property on the new SpeechConfig instance.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromHost">
      <MemberSignature Language="C#" Value="public static Microsoft.CognitiveServices.Speech.SpeechConfig FromHost (Uri host);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CognitiveServices.Speech.SpeechConfig FromHost(class System.Uri host) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.SpeechConfig.FromHost(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHost (host As Uri) As SpeechConfig" />
      <MemberSignature Language="F#" Value="static member FromHost : Uri -&gt; Microsoft.CognitiveServices.Speech.SpeechConfig" Usage="Microsoft.CognitiveServices.Speech.SpeechConfig.FromHost host" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>1.16.0.28</AssemblyVersion>
        <AssemblyVersion>1.17.0.28</AssemblyVersion>
        <AssemblyVersion>1.18.0.28</AssemblyVersion>
        <AssemblyVersion>1.19.0.28</AssemblyVersion>
        <AssemblyVersion>1.20.0.28</AssemblyVersion>
        <AssemblyVersion>1.21.0.28</AssemblyVersion>
        <AssemblyVersion>1.22.0.28</AssemblyVersion>
        <AssemblyVersion>1.23.0.28</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CognitiveServices.Speech.SpeechConfig</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="host">The service host to connect to. Format is "protocol://host:port" where ":port" is optional.</param>
        <summary>
             Creates an instance of the speech config with specified host.
             This method is intended only for users who use a non-default service host. Standard resource path will be assumed.
             For services with a non-standard resource path or no path at all, use FromEndpoint instead. Added in 1.
             </summary>
        <returns>A speech config instance.</returns>
        <remarks>
             * Query parameters are not allowed in the host URI and must be set by other APIs.
             * If the host requires a subscription key for authentication, use <see cref="M:Microsoft.CognitiveServices.Speech.SpeechConfig.FromHost(System.Uri,System.String)" /> to pass the subscription key as parameter.
             * To use an authorization token with FromHost, use this method to create a SpeechConfig instance, and then set the AuthorizationToken property on the created SpeechConfig instance.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromHost">
      <MemberSignature Language="C#" Value="public static Microsoft.CognitiveServices.Speech.SpeechConfig FromHost (Uri host, string subscriptionKey);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CognitiveServices.Speech.SpeechConfig FromHost(class System.Uri host, string subscriptionKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.SpeechConfig.FromHost(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHost (host As Uri, subscriptionKey As String) As SpeechConfig" />
      <MemberSignature Language="F#" Value="static member FromHost : Uri * string -&gt; Microsoft.CognitiveServices.Speech.SpeechConfig" Usage="Microsoft.CognitiveServices.Speech.SpeechConfig.FromHost (host, subscriptionKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>1.16.0.28</AssemblyVersion>
        <AssemblyVersion>1.17.0.28</AssemblyVersion>
        <AssemblyVersion>1.18.0.28</AssemblyVersion>
        <AssemblyVersion>1.19.0.28</AssemblyVersion>
        <AssemblyVersion>1.20.0.28</AssemblyVersion>
        <AssemblyVersion>1.21.0.28</AssemblyVersion>
        <AssemblyVersion>1.22.0.28</AssemblyVersion>
        <AssemblyVersion>1.23.0.28</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CognitiveServices.Speech.SpeechConfig</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.Uri" />
        <Parameter Name="subscriptionKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="host">The service host to connect to. Format is "protocol://host:port" where ":port" is optional.</param>
        <param name="subscriptionKey">The subscription key. To create or find your key and region, see [Find keys and region](/azure/cognitive-services/speech-service/overview#find-keys-and-region).</param>
        <summary>
            Creates a **SpeechConfig** instance with a specific host and subscription key.
            This method is intended only for users who use a non-default service host. Standard resource path will be assumed.
            For services with a non-standard resource path or no path at all, use **FromEndpoint** instead. Added in 1.8.0
            </summary>
        <returns>A speech config instance.</returns>
        <remarks>
            * Query parameters are not allowed in the host URI and must be set by other APIs.
            * To use an authorization token with **FromHost**, use **FromHost(System.Uri)**, and then set the **AuthorizationToken** property on the created **SpeechConfig** instance.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromSubscription">
      <MemberSignature Language="C#" Value="public static Microsoft.CognitiveServices.Speech.SpeechConfig FromSubscription (string subscriptionKey, string region);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CognitiveServices.Speech.SpeechConfig FromSubscription(string subscriptionKey, string region) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.SpeechConfig.FromSubscription(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromSubscription (subscriptionKey As String, region As String) As SpeechConfig" />
      <MemberSignature Language="F#" Value="static member FromSubscription : string * string -&gt; Microsoft.CognitiveServices.Speech.SpeechConfig" Usage="Microsoft.CognitiveServices.Speech.SpeechConfig.FromSubscription (subscriptionKey, region)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>1.16.0.28</AssemblyVersion>
        <AssemblyVersion>1.17.0.28</AssemblyVersion>
        <AssemblyVersion>1.18.0.28</AssemblyVersion>
        <AssemblyVersion>1.19.0.28</AssemblyVersion>
        <AssemblyVersion>1.20.0.28</AssemblyVersion>
        <AssemblyVersion>1.21.0.28</AssemblyVersion>
        <AssemblyVersion>1.22.0.28</AssemblyVersion>
        <AssemblyVersion>1.23.0.28</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CognitiveServices.Speech.SpeechConfig</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionKey" Type="System.String" />
        <Parameter Name="region" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="subscriptionKey">The subscription key. To create or find your key and region, see [Find keys and region](/azure/cognitive-services/speech-service/overview#find-keys-and-region).</param>
        <param name="region">Region identifier for the subscription key.</param>
        <summary>
             Creates an instance of speech configuration with specified subscription key and region.
            
             See also: [Get started with speech-to-text](/azure/cognitive-services/speech-service/get-started-speech-to-text?tabs=script%2Cwindowsinstall&amp;pivots=programming-language-csharp)
             </summary>
        <returns>A speech config instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public string GetProperty (Microsoft.CognitiveServices.Speech.PropertyId id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetProperty(valuetype Microsoft.CognitiveServices.Speech.PropertyId id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.SpeechConfig.GetProperty(Microsoft.CognitiveServices.Speech.PropertyId)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (id As PropertyId) As String" />
      <MemberSignature Language="F#" Value="member this.GetProperty : Microsoft.CognitiveServices.Speech.PropertyId -&gt; string" Usage="speechConfig.GetProperty id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>1.16.0.28</AssemblyVersion>
        <AssemblyVersion>1.17.0.28</AssemblyVersion>
        <AssemblyVersion>1.18.0.28</AssemblyVersion>
        <AssemblyVersion>1.19.0.28</AssemblyVersion>
        <AssemblyVersion>1.20.0.28</AssemblyVersion>
        <AssemblyVersion>1.21.0.28</AssemblyVersion>
        <AssemblyVersion>1.22.0.28</AssemblyVersion>
        <AssemblyVersion>1.23.0.28</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Microsoft.CognitiveServices.Speech.PropertyId" />
      </Parameters>
      <Docs>
        <param name="id">PropertyId of the property</param>
        <summary>
            Searches for the property named with this <see cref="T:Microsoft.CognitiveServices.Speech.PropertyId" /> enumeration.
            Added in 1.3.0
            </summary>
        <returns>Value of the property</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public string GetProperty (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetProperty(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.SpeechConfig.GetProperty(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String) As String" />
      <MemberSignature Language="F#" Value="member this.GetProperty : string -&gt; string" Usage="speechConfig.GetProperty name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>1.16.0.28</AssemblyVersion>
        <AssemblyVersion>1.17.0.28</AssemblyVersion>
        <AssemblyVersion>1.18.0.28</AssemblyVersion>
        <AssemblyVersion>1.19.0.28</AssemblyVersion>
        <AssemblyVersion>1.20.0.28</AssemblyVersion>
        <AssemblyVersion>1.21.0.28</AssemblyVersion>
        <AssemblyVersion>1.22.0.28</AssemblyVersion>
        <AssemblyVersion>1.23.0.28</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Name of the property</param>
        <summary>
            Searches for the property that has this string name.
            </summary>
        <returns>Value of the property</returns>
        <remarks>
            A small number of properties are stored using string names.
            In most cases, you will use <see cref="M:Microsoft.CognitiveServices.Speech.PropertyCollection.GetProperty(Microsoft.CognitiveServices.Speech.PropertyId)" /> instead of this method.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputFormat">
      <MemberSignature Language="C#" Value="public Microsoft.CognitiveServices.Speech.OutputFormat OutputFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.CognitiveServices.Speech.OutputFormat OutputFormat" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CognitiveServices.Speech.SpeechConfig.OutputFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property OutputFormat As OutputFormat" />
      <MemberSignature Language="F#" Value="member this.OutputFormat : Microsoft.CognitiveServices.Speech.OutputFormat with get, set" Usage="Microsoft.CognitiveServices.Speech.SpeechConfig.OutputFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>1.16.0.28</AssemblyVersion>
        <AssemblyVersion>1.17.0.28</AssemblyVersion>
        <AssemblyVersion>1.18.0.28</AssemblyVersion>
        <AssemblyVersion>1.19.0.28</AssemblyVersion>
        <AssemblyVersion>1.20.0.28</AssemblyVersion>
        <AssemblyVersion>1.21.0.28</AssemblyVersion>
        <AssemblyVersion>1.22.0.28</AssemblyVersion>
        <AssemblyVersion>1.23.0.28</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CognitiveServices.Speech.OutputFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets or sets the speech recognition output format: simple or detailed.
             </summary>
        <value>To be added.</value>
        <remarks>
             This output format is for speech recognition results. Use <see cref="P:Microsoft.CognitiveServices.Speech.SpeechConfig.SpeechSynthesisOutputFormat" />
             and <see cref="M:Microsoft.CognitiveServices.Speech.SpeechConfig.SetSpeechSynthesisOutputFormat(Microsoft.CognitiveServices.Speech.SpeechSynthesisOutputFormat)" /> to get/set synthesized audio output format.
            
             See also: [Customize audio format](/azure/cognitive-services/speech-service/get-started-text-to-speech#customize-audio-format)
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Region">
      <MemberSignature Language="C#" Value="public string Region { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Region" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CognitiveServices.Speech.SpeechConfig.Region" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Region As String" />
      <MemberSignature Language="F#" Value="member this.Region : string" Usage="Microsoft.CognitiveServices.Speech.SpeechConfig.Region" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>1.16.0.28</AssemblyVersion>
        <AssemblyVersion>1.17.0.28</AssemblyVersion>
        <AssemblyVersion>1.18.0.28</AssemblyVersion>
        <AssemblyVersion>1.19.0.28</AssemblyVersion>
        <AssemblyVersion>1.20.0.28</AssemblyVersion>
        <AssemblyVersion>1.21.0.28</AssemblyVersion>
        <AssemblyVersion>1.22.0.28</AssemblyVersion>
        <AssemblyVersion>1.23.0.28</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Region.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestWordLevelTimestamps">
      <MemberSignature Language="C#" Value="public void RequestWordLevelTimestamps ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestWordLevelTimestamps() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.SpeechConfig.RequestWordLevelTimestamps" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestWordLevelTimestamps ()" />
      <MemberSignature Language="F#" Value="member this.RequestWordLevelTimestamps : unit -&gt; unit" Usage="speechConfig.RequestWordLevelTimestamps " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>1.16.0.28</AssemblyVersion>
        <AssemblyVersion>1.17.0.28</AssemblyVersion>
        <AssemblyVersion>1.18.0.28</AssemblyVersion>
        <AssemblyVersion>1.19.0.28</AssemblyVersion>
        <AssemblyVersion>1.20.0.28</AssemblyVersion>
        <AssemblyVersion>1.21.0.28</AssemblyVersion>
        <AssemblyVersion>1.22.0.28</AssemblyVersion>
        <AssemblyVersion>1.23.0.28</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Include word-level timestamps. When audio logging is enabled, this method adds
            time details about the start point and duration of each word to the log.
            Added in 1.5.0
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetProfanity">
      <MemberSignature Language="C#" Value="public void SetProfanity (Microsoft.CognitiveServices.Speech.ProfanityOption profanity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetProfanity(valuetype Microsoft.CognitiveServices.Speech.ProfanityOption profanity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.SpeechConfig.SetProfanity(Microsoft.CognitiveServices.Speech.ProfanityOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetProfanity (profanity As ProfanityOption)" />
      <MemberSignature Language="F#" Value="member this.SetProfanity : Microsoft.CognitiveServices.Speech.ProfanityOption -&gt; unit" Usage="speechConfig.SetProfanity profanity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>1.16.0.28</AssemblyVersion>
        <AssemblyVersion>1.17.0.28</AssemblyVersion>
        <AssemblyVersion>1.18.0.28</AssemblyVersion>
        <AssemblyVersion>1.19.0.28</AssemblyVersion>
        <AssemblyVersion>1.20.0.28</AssemblyVersion>
        <AssemblyVersion>1.21.0.28</AssemblyVersion>
        <AssemblyVersion>1.22.0.28</AssemblyVersion>
        <AssemblyVersion>1.23.0.28</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="profanity" Type="Microsoft.CognitiveServices.Speech.ProfanityOption" />
      </Parameters>
      <Docs>
        <param name="profanity">The profanity option to set.</param>
        <summary>
            Sets profanity option. The profanity option can remove profane words, or replace their letters with stars.
            Added in 1.5.0
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetProperty">
      <MemberSignature Language="C#" Value="public void SetProperty (Microsoft.CognitiveServices.Speech.PropertyId id, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetProperty(valuetype Microsoft.CognitiveServices.Speech.PropertyId id, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.SpeechConfig.SetProperty(Microsoft.CognitiveServices.Speech.PropertyId,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetProperty (id As PropertyId, value As String)" />
      <MemberSignature Language="F#" Value="member this.SetProperty : Microsoft.CognitiveServices.Speech.PropertyId * string -&gt; unit" Usage="speechConfig.SetProperty (id, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>1.16.0.28</AssemblyVersion>
        <AssemblyVersion>1.17.0.28</AssemblyVersion>
        <AssemblyVersion>1.18.0.28</AssemblyVersion>
        <AssemblyVersion>1.19.0.28</AssemblyVersion>
        <AssemblyVersion>1.20.0.28</AssemblyVersion>
        <AssemblyVersion>1.21.0.28</AssemblyVersion>
        <AssemblyVersion>1.22.0.28</AssemblyVersion>
        <AssemblyVersion>1.23.0.28</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Microsoft.CognitiveServices.Speech.PropertyId" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">PropertyId of the property</param>
        <param name="value">New value of the property</param>
        <summary>
            Sets the value of a property specified by a value in the <see cref="T:Microsoft.CognitiveServices.Speech.PropertyId" /> enumeration.
            Added in 1.3.0
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetProperty">
      <MemberSignature Language="C#" Value="public void SetProperty (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetProperty(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.SpeechConfig.SetProperty(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetProperty (name As String, value As String)" />
      <MemberSignature Language="F#" Value="member this.SetProperty : string * string -&gt; unit" Usage="speechConfig.SetProperty (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>1.16.0.28</AssemblyVersion>
        <AssemblyVersion>1.17.0.28</AssemblyVersion>
        <AssemblyVersion>1.18.0.28</AssemblyVersion>
        <AssemblyVersion>1.19.0.28</AssemblyVersion>
        <AssemblyVersion>1.20.0.28</AssemblyVersion>
        <AssemblyVersion>1.21.0.28</AssemblyVersion>
        <AssemblyVersion>1.22.0.28</AssemblyVersion>
        <AssemblyVersion>1.23.0.28</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Name of the property</param>
        <param name="value">Value of the property</param>
        <summary>
            Sets a property using a string name.
            </summary>
        <remarks>
            A small number of properties are stored using string names.
            In most cases, you will use **SetProperty(PropertyId, String)** instead of this method.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetProxy">
      <MemberSignature Language="C#" Value="public void SetProxy (string proxyHostName, int proxyPort);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetProxy(string proxyHostName, int32 proxyPort) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.SpeechConfig.SetProxy(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetProxy (proxyHostName As String, proxyPort As Integer)" />
      <MemberSignature Language="F#" Value="member this.SetProxy : string * int -&gt; unit" Usage="speechConfig.SetProxy (proxyHostName, proxyPort)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>1.16.0.28</AssemblyVersion>
        <AssemblyVersion>1.17.0.28</AssemblyVersion>
        <AssemblyVersion>1.18.0.28</AssemblyVersion>
        <AssemblyVersion>1.19.0.28</AssemblyVersion>
        <AssemblyVersion>1.20.0.28</AssemblyVersion>
        <AssemblyVersion>1.21.0.28</AssemblyVersion>
        <AssemblyVersion>1.22.0.28</AssemblyVersion>
        <AssemblyVersion>1.23.0.28</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="proxyHostName" Type="System.String" />
        <Parameter Name="proxyPort" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="proxyHostName">The host name of the proxy server.</param>
        <param name="proxyPort">The port number of the proxy server.</param>
        <summary>
            Configures proxy.
            Added in 1.3.0
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetProxy">
      <MemberSignature Language="C#" Value="public void SetProxy (string proxyHostName, int proxyPort, string proxyUserName, string proxyPassword);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetProxy(string proxyHostName, int32 proxyPort, string proxyUserName, string proxyPassword) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.SpeechConfig.SetProxy(System.String,System.Int32,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetProxy (proxyHostName As String, proxyPort As Integer, proxyUserName As String, proxyPassword As String)" />
      <MemberSignature Language="F#" Value="member this.SetProxy : string * int * string * string -&gt; unit" Usage="speechConfig.SetProxy (proxyHostName, proxyPort, proxyUserName, proxyPassword)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>1.16.0.28</AssemblyVersion>
        <AssemblyVersion>1.17.0.28</AssemblyVersion>
        <AssemblyVersion>1.18.0.28</AssemblyVersion>
        <AssemblyVersion>1.19.0.28</AssemblyVersion>
        <AssemblyVersion>1.20.0.28</AssemblyVersion>
        <AssemblyVersion>1.21.0.28</AssemblyVersion>
        <AssemblyVersion>1.22.0.28</AssemblyVersion>
        <AssemblyVersion>1.23.0.28</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="proxyHostName" Type="System.String" />
        <Parameter Name="proxyPort" Type="System.Int32" />
        <Parameter Name="proxyUserName" Type="System.String" />
        <Parameter Name="proxyPassword" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="proxyHostName">The host name of the proxy server, without the protocol scheme (http://)</param>
        <param name="proxyPort">The port number of the proxy server.</param>
        <param name="proxyUserName">The user name of the proxy server.</param>
        <param name="proxyPassword">The password of the proxy server.</param>
        <summary>
             Configures proxy with username-password pair.
             Added in 1.1.0
            
             Note: Proxy functionality is not available on macOS. This method will have no effect on the macOS platform.
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetServiceProperty">
      <MemberSignature Language="C#" Value="public void SetServiceProperty (string name, string value, Microsoft.CognitiveServices.Speech.ServicePropertyChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetServiceProperty(string name, string value, valuetype Microsoft.CognitiveServices.Speech.ServicePropertyChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.SpeechConfig.SetServiceProperty(System.String,System.String,Microsoft.CognitiveServices.Speech.ServicePropertyChannel)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetServiceProperty (name As String, value As String, channel As ServicePropertyChannel)" />
      <MemberSignature Language="F#" Value="member this.SetServiceProperty : string * string * Microsoft.CognitiveServices.Speech.ServicePropertyChannel -&gt; unit" Usage="speechConfig.SetServiceProperty (name, value, channel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>1.16.0.28</AssemblyVersion>
        <AssemblyVersion>1.17.0.28</AssemblyVersion>
        <AssemblyVersion>1.18.0.28</AssemblyVersion>
        <AssemblyVersion>1.19.0.28</AssemblyVersion>
        <AssemblyVersion>1.20.0.28</AssemblyVersion>
        <AssemblyVersion>1.21.0.28</AssemblyVersion>
        <AssemblyVersion>1.22.0.28</AssemblyVersion>
        <AssemblyVersion>1.23.0.28</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="channel" Type="Microsoft.CognitiveServices.Speech.ServicePropertyChannel" />
      </Parameters>
      <Docs>
        <param name="name">The property name.</param>
        <param name="value">The property value.</param>
        <param name="channel">The channel used to pass the specified property to service.</param>
        <summary>
            Enables preview of new service features.
            </summary>
        <remarks>
            Used to configure services that are in Preview, and are not yet Generally Available. 
            This method might appear in some samples of preview services.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSpeechSynthesisOutputFormat">
      <MemberSignature Language="C#" Value="public void SetSpeechSynthesisOutputFormat (Microsoft.CognitiveServices.Speech.SpeechSynthesisOutputFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSpeechSynthesisOutputFormat(valuetype Microsoft.CognitiveServices.Speech.SpeechSynthesisOutputFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.SpeechConfig.SetSpeechSynthesisOutputFormat(Microsoft.CognitiveServices.Speech.SpeechSynthesisOutputFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSpeechSynthesisOutputFormat (format As SpeechSynthesisOutputFormat)" />
      <MemberSignature Language="F#" Value="member this.SetSpeechSynthesisOutputFormat : Microsoft.CognitiveServices.Speech.SpeechSynthesisOutputFormat -&gt; unit" Usage="speechConfig.SetSpeechSynthesisOutputFormat format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>1.16.0.28</AssemblyVersion>
        <AssemblyVersion>1.17.0.28</AssemblyVersion>
        <AssemblyVersion>1.18.0.28</AssemblyVersion>
        <AssemblyVersion>1.19.0.28</AssemblyVersion>
        <AssemblyVersion>1.20.0.28</AssemblyVersion>
        <AssemblyVersion>1.21.0.28</AssemblyVersion>
        <AssemblyVersion>1.22.0.28</AssemblyVersion>
        <AssemblyVersion>1.23.0.28</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="Microsoft.CognitiveServices.Speech.SpeechSynthesisOutputFormat" />
      </Parameters>
      <Docs>
        <param name="format">The synthesis output format ID (e.g. Riff16Khz16BitMonoPcm).</param>
        <summary>
            Sets the speech synthesis output format.
            Added in 1.4.0
            </summary>
        <remarks>
            See also: [Customize audio format](/azure/cognitive-services/speech-service/get-started-text-to-speech#customize-audio-format)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeechRecognitionLanguage">
      <MemberSignature Language="C#" Value="public string SpeechRecognitionLanguage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SpeechRecognitionLanguage" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CognitiveServices.Speech.SpeechConfig.SpeechRecognitionLanguage" />
      <MemberSignature Language="VB.NET" Value="Public Property SpeechRecognitionLanguage As String" />
      <MemberSignature Language="F#" Value="member this.SpeechRecognitionLanguage : string with get, set" Usage="Microsoft.CognitiveServices.Speech.SpeechConfig.SpeechRecognitionLanguage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>1.16.0.28</AssemblyVersion>
        <AssemblyVersion>1.17.0.28</AssemblyVersion>
        <AssemblyVersion>1.18.0.28</AssemblyVersion>
        <AssemblyVersion>1.19.0.28</AssemblyVersion>
        <AssemblyVersion>1.20.0.28</AssemblyVersion>
        <AssemblyVersion>1.21.0.28</AssemblyVersion>
        <AssemblyVersion>1.22.0.28</AssemblyVersion>
        <AssemblyVersion>1.23.0.28</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Specifies the name of spoken language to be recognized, in BCP-47 format.
            </summary>
        <value>To be added.</value>
        <remarks>
            See BCP-47 locale values available to speech-to-text at [Speech-to-text](/azure/cognitive-services/speech-service/language-support#speech-to-text).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeechSynthesisLanguage">
      <MemberSignature Language="C#" Value="public string SpeechSynthesisLanguage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SpeechSynthesisLanguage" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CognitiveServices.Speech.SpeechConfig.SpeechSynthesisLanguage" />
      <MemberSignature Language="VB.NET" Value="Public Property SpeechSynthesisLanguage As String" />
      <MemberSignature Language="F#" Value="member this.SpeechSynthesisLanguage : string with get, set" Usage="Microsoft.CognitiveServices.Speech.SpeechConfig.SpeechSynthesisLanguage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>1.16.0.28</AssemblyVersion>
        <AssemblyVersion>1.17.0.28</AssemblyVersion>
        <AssemblyVersion>1.18.0.28</AssemblyVersion>
        <AssemblyVersion>1.19.0.28</AssemblyVersion>
        <AssemblyVersion>1.20.0.28</AssemblyVersion>
        <AssemblyVersion>1.21.0.28</AssemblyVersion>
        <AssemblyVersion>1.22.0.28</AssemblyVersion>
        <AssemblyVersion>1.23.0.28</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the speech synthesis language, e.g. en-US.
            Added in 1.4.0
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeechSynthesisOutputFormat">
      <MemberSignature Language="C#" Value="public string SpeechSynthesisOutputFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SpeechSynthesisOutputFormat" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CognitiveServices.Speech.SpeechConfig.SpeechSynthesisOutputFormat" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SpeechSynthesisOutputFormat As String" />
      <MemberSignature Language="F#" Value="member this.SpeechSynthesisOutputFormat : string" Usage="Microsoft.CognitiveServices.Speech.SpeechConfig.SpeechSynthesisOutputFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>1.16.0.28</AssemblyVersion>
        <AssemblyVersion>1.17.0.28</AssemblyVersion>
        <AssemblyVersion>1.18.0.28</AssemblyVersion>
        <AssemblyVersion>1.19.0.28</AssemblyVersion>
        <AssemblyVersion>1.20.0.28</AssemblyVersion>
        <AssemblyVersion>1.21.0.28</AssemblyVersion>
        <AssemblyVersion>1.22.0.28</AssemblyVersion>
        <AssemblyVersion>1.23.0.28</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets the output format of synthesized speech.
             Added in 1.4.0
            
             Example value: `riff-16khz-16bit-mono-pcm`
             </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeechSynthesisVoiceName">
      <MemberSignature Language="C#" Value="public string SpeechSynthesisVoiceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SpeechSynthesisVoiceName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CognitiveServices.Speech.SpeechConfig.SpeechSynthesisVoiceName" />
      <MemberSignature Language="VB.NET" Value="Public Property SpeechSynthesisVoiceName As String" />
      <MemberSignature Language="F#" Value="member this.SpeechSynthesisVoiceName : string with get, set" Usage="Microsoft.CognitiveServices.Speech.SpeechConfig.SpeechSynthesisVoiceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>1.16.0.28</AssemblyVersion>
        <AssemblyVersion>1.17.0.28</AssemblyVersion>
        <AssemblyVersion>1.18.0.28</AssemblyVersion>
        <AssemblyVersion>1.19.0.28</AssemblyVersion>
        <AssemblyVersion>1.20.0.28</AssemblyVersion>
        <AssemblyVersion>1.21.0.28</AssemblyVersion>
        <AssemblyVersion>1.22.0.28</AssemblyVersion>
        <AssemblyVersion>1.23.0.28</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the speech synthesis voice.
            Added in 1.4.0
            </summary>
        <value>To be added.</value>
        <remarks>
            See also: [Standard voices](/azure/cognitive-services/speech-service/language-support#text-to-speech)
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubscriptionKey">
      <MemberSignature Language="C#" Value="public string SubscriptionKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SubscriptionKey" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CognitiveServices.Speech.SpeechConfig.SubscriptionKey" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SubscriptionKey As String" />
      <MemberSignature Language="F#" Value="member this.SubscriptionKey : string" Usage="Microsoft.CognitiveServices.Speech.SpeechConfig.SubscriptionKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>1.16.0.28</AssemblyVersion>
        <AssemblyVersion>1.17.0.28</AssemblyVersion>
        <AssemblyVersion>1.18.0.28</AssemblyVersion>
        <AssemblyVersion>1.19.0.28</AssemblyVersion>
        <AssemblyVersion>1.20.0.28</AssemblyVersion>
        <AssemblyVersion>1.21.0.28</AssemblyVersion>
        <AssemblyVersion>1.22.0.28</AssemblyVersion>
        <AssemblyVersion>1.23.0.28</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Subscription key.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
