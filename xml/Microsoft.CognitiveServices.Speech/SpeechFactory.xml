<Type Name="SpeechFactory" FullName="Microsoft.CognitiveServices.Speech.SpeechFactory">
  <TypeSignature Language="C#" Value="public sealed class SpeechFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SpeechFactory extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.CognitiveServices.Speech.SpeechFactory" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SpeechFactory" />
  <TypeSignature Language="F#" Value="type SpeechFactory = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeechFactory sealed" />
  <TypeSignature Language="C++ CX" Value="public ref class SpeechFactory sealed" />
  <TypeSignature Language="C++ WINRT" Value="class SpeechFactory sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Factory methods to create recognizers.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AuthorizationToken">
      <MemberSignature Language="C#" Value="public string AuthorizationToken { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AuthorizationToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CognitiveServices.Speech.SpeechFactory.AuthorizationToken" />
      <MemberSignature Language="VB.NET" Value="Public Property AuthorizationToken As String" />
      <MemberSignature Language="F#" Value="member this.AuthorizationToken : string with get, set" Usage="Microsoft.CognitiveServices.Speech.SpeechFactory.AuthorizationToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AuthorizationToken { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Platform::String ^ AuthorizationToken { Platform::String ^ get(); void set(Platform::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets/sets the authorization token.
            If this is set, subscription key is ignored.
            User needs to make sure the provided authorization token is valid and not expired.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateIntentRecognizer">
      <MemberSignature Language="C#" Value="public Microsoft.CognitiveServices.Speech.Intent.IntentRecognizer CreateIntentRecognizer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CognitiveServices.Speech.Intent.IntentRecognizer CreateIntentRecognizer() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.SpeechFactory.CreateIntentRecognizer" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateIntentRecognizer () As IntentRecognizer" />
      <MemberSignature Language="F#" Value="member this.CreateIntentRecognizer : unit -&gt; Microsoft.CognitiveServices.Speech.Intent.IntentRecognizer" Usage="speechFactory.CreateIntentRecognizer " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CognitiveServices::Speech::Intent::IntentRecognizer ^ CreateIntentRecognizer();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Microsoft::CognitiveServices::Speech::Intent::IntentRecognizer ^ CreateIntentRecognizer();" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::CognitiveServices::Speech::Intent::IntentRecognizer CreateIntentRecognizer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CognitiveServices.Speech.Intent.IntentRecognizer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Creates an intent recognizer using the default microphone input.
            </summary>
        <returns>An intent recognizer instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateIntentRecognizerWithFileInput">
      <MemberSignature Language="C#" Value="public Microsoft.CognitiveServices.Speech.Intent.IntentRecognizer CreateIntentRecognizerWithFileInput (string audioFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CognitiveServices.Speech.Intent.IntentRecognizer CreateIntentRecognizerWithFileInput(string audioFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.SpeechFactory.CreateIntentRecognizerWithFileInput(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateIntentRecognizerWithFileInput (audioFile As String) As IntentRecognizer" />
      <MemberSignature Language="F#" Value="member this.CreateIntentRecognizerWithFileInput : string -&gt; Microsoft.CognitiveServices.Speech.Intent.IntentRecognizer" Usage="speechFactory.CreateIntentRecognizerWithFileInput audioFile" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CognitiveServices::Speech::Intent::IntentRecognizer ^ CreateIntentRecognizerWithFileInput(System::String ^ audioFile);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Microsoft::CognitiveServices::Speech::Intent::IntentRecognizer ^ CreateIntentRecognizerWithFileInput(Platform::String ^ audioFile);" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::CognitiveServices::Speech::Intent::IntentRecognizer CreateIntentRecognizerWithFileInput(std::wstring const &amp; audioFile);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CognitiveServices.Speech.Intent.IntentRecognizer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioFile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="audioFile">Specifies the audio input file. Currently, only WAV / PCM with 16-bit samples, 16 KHz sample rate, and a single channel (Mono) is supported.</param>
        <summary>
            Creates an intent recognizer using the specified file as audio input.
            </summary>
        <returns>An intent recognizer instance</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSpeechRecognizer">
      <MemberSignature Language="C#" Value="public Microsoft.CognitiveServices.Speech.SpeechRecognizer CreateSpeechRecognizer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CognitiveServices.Speech.SpeechRecognizer CreateSpeechRecognizer() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.SpeechFactory.CreateSpeechRecognizer" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateSpeechRecognizer () As SpeechRecognizer" />
      <MemberSignature Language="F#" Value="member this.CreateSpeechRecognizer : unit -&gt; Microsoft.CognitiveServices.Speech.SpeechRecognizer" Usage="speechFactory.CreateSpeechRecognizer " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CognitiveServices::Speech::SpeechRecognizer ^ CreateSpeechRecognizer();" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Microsoft::CognitiveServices::Speech::SpeechRecognizer ^ CreateSpeechRecognizer();" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::CognitiveServices::Speech::SpeechRecognizer CreateSpeechRecognizer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CognitiveServices.Speech.SpeechRecognizer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Creates a speech recognizer, using the default microphone input.
            </summary>
        <returns>A speech recognizer instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSpeechRecognizer">
      <MemberSignature Language="C#" Value="public Microsoft.CognitiveServices.Speech.SpeechRecognizer CreateSpeechRecognizer (string language);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CognitiveServices.Speech.SpeechRecognizer CreateSpeechRecognizer(string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.SpeechFactory.CreateSpeechRecognizer(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateSpeechRecognizer (language As String) As SpeechRecognizer" />
      <MemberSignature Language="F#" Value="member this.CreateSpeechRecognizer : string -&gt; Microsoft.CognitiveServices.Speech.SpeechRecognizer" Usage="speechFactory.CreateSpeechRecognizer language" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CognitiveServices::Speech::SpeechRecognizer ^ CreateSpeechRecognizer(System::String ^ language);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Microsoft::CognitiveServices::Speech::SpeechRecognizer ^ CreateSpeechRecognizer(Platform::String ^ language);" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::CognitiveServices::Speech::SpeechRecognizer CreateSpeechRecognizer(std::wstring const &amp; language);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CognitiveServices.Speech.SpeechRecognizer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="language">Specifies the name of spoken language to be recognized in BCP-47 format.</param>
        <summary>
            Creates a speech recognizer using the default microphone input.
            </summary>
        <returns>A speech recognizer instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSpeechRecognizerWithFileInput">
      <MemberSignature Language="C#" Value="public Microsoft.CognitiveServices.Speech.SpeechRecognizer CreateSpeechRecognizerWithFileInput (string audioFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CognitiveServices.Speech.SpeechRecognizer CreateSpeechRecognizerWithFileInput(string audioFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.SpeechFactory.CreateSpeechRecognizerWithFileInput(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateSpeechRecognizerWithFileInput (audioFile As String) As SpeechRecognizer" />
      <MemberSignature Language="F#" Value="member this.CreateSpeechRecognizerWithFileInput : string -&gt; Microsoft.CognitiveServices.Speech.SpeechRecognizer" Usage="speechFactory.CreateSpeechRecognizerWithFileInput audioFile" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CognitiveServices::Speech::SpeechRecognizer ^ CreateSpeechRecognizerWithFileInput(System::String ^ audioFile);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Microsoft::CognitiveServices::Speech::SpeechRecognizer ^ CreateSpeechRecognizerWithFileInput(Platform::String ^ audioFile);" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::CognitiveServices::Speech::SpeechRecognizer CreateSpeechRecognizerWithFileInput(std::wstring const &amp; audioFile);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CognitiveServices.Speech.SpeechRecognizer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioFile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="audioFile">Specifies the audio input file. Currently, only WAV / PCM with 16-bit samples, 16 KHz sample rate, and a single channel (Mono) is supported.</param>
        <summary>
            Creates a speech recognizer using the specified file as audio input.
            </summary>
        <returns>A speech recognizer instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSpeechRecognizerWithFileInput">
      <MemberSignature Language="C#" Value="public Microsoft.CognitiveServices.Speech.SpeechRecognizer CreateSpeechRecognizerWithFileInput (string audioFile, string language);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CognitiveServices.Speech.SpeechRecognizer CreateSpeechRecognizerWithFileInput(string audioFile, string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.SpeechFactory.CreateSpeechRecognizerWithFileInput(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateSpeechRecognizerWithFileInput (audioFile As String, language As String) As SpeechRecognizer" />
      <MemberSignature Language="F#" Value="member this.CreateSpeechRecognizerWithFileInput : string * string -&gt; Microsoft.CognitiveServices.Speech.SpeechRecognizer" Usage="speechFactory.CreateSpeechRecognizerWithFileInput (audioFile, language)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CognitiveServices::Speech::SpeechRecognizer ^ CreateSpeechRecognizerWithFileInput(System::String ^ audioFile, System::String ^ language);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; Microsoft::CognitiveServices::Speech::SpeechRecognizer ^ CreateSpeechRecognizerWithFileInput(Platform::String ^ audioFile, Platform::String ^ language);" />
      <MemberSignature Language="C++ WINRT" Value="Microsoft::CognitiveServices::Speech::SpeechRecognizer CreateSpeechRecognizerWithFileInput(std::wstring const &amp; audioFile, std::wstring const &amp; language);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CognitiveServices.Speech.SpeechRecognizer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioFile" Type="System.String" />
        <Parameter Name="language" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="audioFile">Specifies the audio input file. Currently, only WAV / PCM with 16-bit samples, 16 KHz sample rate, and a single channel (Mono) is supported.</param>
        <param name="language">Specifies the name of spoken language to be recognized in BCP-47 format.</param>
        <summary>
            Creates a speech recognizer using the specified file as audio input.
            </summary>
        <returns>A speech recognizer instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTranslationRecognizer">
      <MemberSignature Language="C#" Value="public Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer CreateTranslationRecognizer (string sourceLanguage, System.Collections.Generic.IEnumerable&lt;string&gt; targetLanguages);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer CreateTranslationRecognizer(string sourceLanguage, class System.Collections.Generic.IEnumerable`1&lt;string&gt; targetLanguages) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.SpeechFactory.CreateTranslationRecognizer(System.String,System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateTranslationRecognizer (sourceLanguage As String, targetLanguages As IEnumerable(Of String)) As TranslationRecognizer" />
      <MemberSignature Language="F#" Value="member this.CreateTranslationRecognizer : string * seq&lt;string&gt; -&gt; Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer" Usage="speechFactory.CreateTranslationRecognizer (sourceLanguage, targetLanguages)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CognitiveServices::Speech::Translation::TranslationRecognizer ^ CreateTranslationRecognizer(System::String ^ sourceLanguage, System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ targetLanguages);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceLanguage" Type="System.String" />
        <Parameter Name="targetLanguages" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="sourceLanguage">The spoken language that needs to be translated.</param>
        <param name="targetLanguages">The target languages of translation.</param>
        <summary>
            Creates a translation recognizer using the default microphone input.
            </summary>
        <returns>A translation recognizer instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTranslationRecognizer">
      <MemberSignature Language="C#" Value="public Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer CreateTranslationRecognizer (string sourceLanguage, System.Collections.Generic.IEnumerable&lt;string&gt; targetLanguages, string voice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer CreateTranslationRecognizer(string sourceLanguage, class System.Collections.Generic.IEnumerable`1&lt;string&gt; targetLanguages, string voice) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.SpeechFactory.CreateTranslationRecognizer(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateTranslationRecognizer (sourceLanguage As String, targetLanguages As IEnumerable(Of String), voice As String) As TranslationRecognizer" />
      <MemberSignature Language="F#" Value="member this.CreateTranslationRecognizer : string * seq&lt;string&gt; * string -&gt; Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer" Usage="speechFactory.CreateTranslationRecognizer (sourceLanguage, targetLanguages, voice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CognitiveServices::Speech::Translation::TranslationRecognizer ^ CreateTranslationRecognizer(System::String ^ sourceLanguage, System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ targetLanguages, System::String ^ voice);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceLanguage" Type="System.String" />
        <Parameter Name="targetLanguages" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="voice" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceLanguage">The spoken language that needs to be translated.</param>
        <param name="targetLanguages">The target languages of translation.</param>
        <param name="voice">Specifies the name of voice tag if a synthesized audio output is desired.</param>
        <summary>
            Creates a translation recognizer using the default microphone input.
            </summary>
        <returns>A translation recognizer instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTranslationRecognizerWithFileInput">
      <MemberSignature Language="C#" Value="public Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer CreateTranslationRecognizerWithFileInput (string audioFile, string sourceLanguage, System.Collections.Generic.IEnumerable&lt;string&gt; targetLanguages);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer CreateTranslationRecognizerWithFileInput(string audioFile, string sourceLanguage, class System.Collections.Generic.IEnumerable`1&lt;string&gt; targetLanguages) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.SpeechFactory.CreateTranslationRecognizerWithFileInput(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateTranslationRecognizerWithFileInput (audioFile As String, sourceLanguage As String, targetLanguages As IEnumerable(Of String)) As TranslationRecognizer" />
      <MemberSignature Language="F#" Value="member this.CreateTranslationRecognizerWithFileInput : string * string * seq&lt;string&gt; -&gt; Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer" Usage="speechFactory.CreateTranslationRecognizerWithFileInput (audioFile, sourceLanguage, targetLanguages)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CognitiveServices::Speech::Translation::TranslationRecognizer ^ CreateTranslationRecognizerWithFileInput(System::String ^ audioFile, System::String ^ sourceLanguage, System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ targetLanguages);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioFile" Type="System.String" />
        <Parameter Name="sourceLanguage" Type="System.String" />
        <Parameter Name="targetLanguages" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="audioFile">Specifies the audio input file. Currently, only WAV / PCM with 16-bit samples, 16 KHz sample rate, and a single channel (Mono) is supported.</param>
        <param name="sourceLanguage">The spoken language that needs to be translated.</param>
        <param name="targetLanguages">The target languages of translation.</param>
        <summary>
            Creates a translation recognizer using the specified file as audio input.
            </summary>
        <returns>A translation recognizer instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTranslationRecognizerWithFileInput">
      <MemberSignature Language="C#" Value="public Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer CreateTranslationRecognizerWithFileInput (string audioFile, string sourceLanguage, System.Collections.Generic.IEnumerable&lt;string&gt; targetLanguages, string voice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer CreateTranslationRecognizerWithFileInput(string audioFile, string sourceLanguage, class System.Collections.Generic.IEnumerable`1&lt;string&gt; targetLanguages, string voice) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.SpeechFactory.CreateTranslationRecognizerWithFileInput(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateTranslationRecognizerWithFileInput (audioFile As String, sourceLanguage As String, targetLanguages As IEnumerable(Of String), voice As String) As TranslationRecognizer" />
      <MemberSignature Language="F#" Value="member this.CreateTranslationRecognizerWithFileInput : string * string * seq&lt;string&gt; * string -&gt; Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer" Usage="speechFactory.CreateTranslationRecognizerWithFileInput (audioFile, sourceLanguage, targetLanguages, voice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::CognitiveServices::Speech::Translation::TranslationRecognizer ^ CreateTranslationRecognizerWithFileInput(System::String ^ audioFile, System::String ^ sourceLanguage, System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ targetLanguages, System::String ^ voice);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CognitiveServices.Speech.Translation.TranslationRecognizer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioFile" Type="System.String" />
        <Parameter Name="sourceLanguage" Type="System.String" />
        <Parameter Name="targetLanguages" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="voice" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="audioFile">Specifies the audio input file. Currently, only WAV / PCM with 16-bit samples, 16 KHz sample rate, and a single channel (Mono) is supported.</param>
        <param name="sourceLanguage">The spoken language that needs to be translated.</param>
        <param name="targetLanguages">The target languages of translation.</param>
        <param name="voice">Specifies the name of voice tag if a synthesized audio output is desired.</param>
        <summary>
            Creates a translation recognizer using the specified file as audio input.
            </summary>
        <returns>A translation recognizer instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndpointURL">
      <MemberSignature Language="C#" Value="public Uri EndpointURL { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri EndpointURL" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CognitiveServices.Speech.SpeechFactory.EndpointURL" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EndpointURL As Uri" />
      <MemberSignature Language="F#" Value="member this.EndpointURL : Uri" Usage="Microsoft.CognitiveServices.Speech.SpeechFactory.EndpointURL" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ EndpointURL { Uri ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets/Sets the service endpoint when connecting to the service.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromEndPoint">
      <MemberSignature Language="C#" Value="public static Microsoft.CognitiveServices.Speech.SpeechFactory FromEndPoint (Uri endpoint, string subscriptionKey);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CognitiveServices.Speech.SpeechFactory FromEndPoint(class System.Uri endpoint, string subscriptionKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.SpeechFactory.FromEndPoint(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromEndPoint (endpoint As Uri, subscriptionKey As String) As SpeechFactory" />
      <MemberSignature Language="F#" Value="static member FromEndPoint : Uri * string -&gt; Microsoft.CognitiveServices.Speech.SpeechFactory" Usage="Microsoft.CognitiveServices.Speech.SpeechFactory.FromEndPoint (endpoint, subscriptionKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CognitiveServices::Speech::SpeechFactory ^ FromEndPoint(Uri ^ endpoint, System::String ^ subscriptionKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CognitiveServices.Speech.SpeechFactory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="subscriptionKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="endpoint">The service endpoint to connect to.</param>
        <param name="subscriptionKey">The subscription key.</param>
        <summary>
            Creates an instance of the speech factory with specified endpoint and subscription key (optional).
            </summary>
        <returns>A speech factory instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromSubscription">
      <MemberSignature Language="C#" Value="public static Microsoft.CognitiveServices.Speech.SpeechFactory FromSubscription (string subscriptionKey, string region);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.CognitiveServices.Speech.SpeechFactory FromSubscription(string subscriptionKey, string region) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.CognitiveServices.Speech.SpeechFactory.FromSubscription(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromSubscription (subscriptionKey As String, region As String) As SpeechFactory" />
      <MemberSignature Language="F#" Value="static member FromSubscription : string * string -&gt; Microsoft.CognitiveServices.Speech.SpeechFactory" Usage="Microsoft.CognitiveServices.Speech.SpeechFactory.FromSubscription (subscriptionKey, region)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::CognitiveServices::Speech::SpeechFactory ^ FromSubscription(System::String ^ subscriptionKey, System::String ^ region);" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; static Microsoft::CognitiveServices::Speech::SpeechFactory ^ FromSubscription(Platform::String ^ subscriptionKey, Platform::String ^ region);" />
      <MemberSignature Language="C++ WINRT" Value=" static Microsoft::CognitiveServices::Speech::SpeechFactory FromSubscription(std::wstring const &amp; subscriptionKey, std::wstring const &amp; region);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CognitiveServices.Speech.SpeechFactory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionKey" Type="System.String" />
        <Parameter Name="region" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="subscriptionKey">The subscription key.</param>
        <param name="region">The region name.</param>
        <summary>
            Creates an instance of the speech factory with specified subscription key and region (optional).
            </summary>
        <returns>A speech factory instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameters">
      <MemberSignature Language="C#" Value="public Microsoft.CognitiveServices.Speech.IFactoryParameters Parameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.CognitiveServices.Speech.IFactoryParameters Parameters" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CognitiveServices.Speech.SpeechFactory.Parameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parameters As IFactoryParameters" />
      <MemberSignature Language="F#" Value="member this.Parameters : Microsoft.CognitiveServices.Speech.IFactoryParameters" Usage="Microsoft.CognitiveServices.Speech.SpeechFactory.Parameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::CognitiveServices::Speech::IFactoryParameters ^ Parameters { Microsoft::CognitiveServices::Speech::IFactoryParameters ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Microsoft::CognitiveServices::Speech::IFactoryParameters ^ Parameters { Microsoft::CognitiveServices::Speech::IFactoryParameters ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.CognitiveServices.Speech.IFactoryParameters</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The collection of parameters and their values defined for this <see cref="T:Microsoft.CognitiveServices.Speech.SpeechFactory" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Region">
      <MemberSignature Language="C#" Value="public string Region { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Region" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CognitiveServices.Speech.SpeechFactory.Region" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Region As String" />
      <MemberSignature Language="F#" Value="member this.Region : string" Usage="Microsoft.CognitiveServices.Speech.SpeechFactory.Region" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Region { System::String ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Platform::String ^ Region { Platform::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets/sets the region name of the service to be connected.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubscriptionKey">
      <MemberSignature Language="C#" Value="public string SubscriptionKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SubscriptionKey" />
      <MemberSignature Language="DocId" Value="P:Microsoft.CognitiveServices.Speech.SpeechFactory.SubscriptionKey" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SubscriptionKey As String" />
      <MemberSignature Language="F#" Value="member this.SubscriptionKey : string" Usage="Microsoft.CognitiveServices.Speech.SpeechFactory.SubscriptionKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SubscriptionKey { System::String ^ get(); };" />
      <MemberSignature Language="C++ CX" Value="public:&#xA; property Platform::String ^ SubscriptionKey { Platform::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.CognitiveServices.Speech.csharp</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets/sets the subscription key.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>