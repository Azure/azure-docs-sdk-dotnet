<Type Name="IStateSerializer&lt;T&gt;" FullName="Microsoft.ServiceFabric.Data.IStateSerializer&lt;T&gt;">
  <TypeSignature Language="C#" Value="public interface IStateSerializer&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IStateSerializer`1&lt;T&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ServiceFabric.Data.IStateSerializer`1" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">Type to serialize and deserialize.</typeparam>
    <summary>
             Represents a custom serializer for type <typeparamref name="T" />.
             </summary>
    <remarks>
             Use <see cref="M:Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer``1(Microsoft.ServiceFabric.Data.IStateSerializer{``0})" /> to register a custom serializer.
             </remarks>
    <example>
             In this example, implementation of the Read and Write overloads simply call their counterpart overloads.
             The currentValue and baseValue parameters are not set by the platform and should be ignored.
             <code>
             class Order
             {
                 public byte Warehouse { get; set; }
                 public short District { get; set; }
                 public int Customer { get; set; }
                 public long OrderNumber { get; set; }
             }
            
             class OrderSerializer : IStateSerializer&lt;Order&gt;
             {
                 void Write(Order value, BinaryWriter writer)
                 {
                     writer.Write(value.Warehouse);
                     writer.Write(value.District);
                     writer.Write(value.Customer);
                     writer.Write(value.OrderNumber);
                 }
            
                 Order Read(BinaryReader reader)
                 {
                     Order value = new Order();
            
                     value.Warehouse = reader.ReadByte();
                     value.District = reader.ReadInt16();
                     value.Customer = reader.ReadInt32();
                     value.OrderNumber = reader.ReadInt64();
            
                     return value;
                 }
            
                 void Write(Order currentValue, Order newValue, BinaryWriter writer)
                 {
                     this.Write(newValue, writer);
                 }
            
                 Order Read(Order baseValue, BinaryReader reader)
                 {
                     return this.Read(reader);
                 }
             }
             </code></example>
    <example>
             In this example, implementation of the Read and Write overloads simply call their counterpart overloads.
             The currentValue and baseValue parameters are not set by the platform and should be ignored.
             <code>
             class Order
             {
                 public byte Warehouse { get; set; }
                 public short District { get; set; }
                 public int Customer { get; set; }
                 public long OrderNumber { get; set; }
             }
            
             class OrderSerializer : IStateSerializer&lt;Order&gt;
             {
                 void Write(Order value, BinaryWriter writer)
                 {
                     writer.Write(value.Warehouse);
                     writer.Write(value.District);
                     writer.Write(value.Customer);
                     writer.Write(value.OrderNumber);
                 }
            
                 Order Read(BinaryReader reader)
                 {
                     Order value = new Order();
            
                     value.Warehouse = reader.ReadByte();
                     value.District = reader.ReadInt16();
                     value.Customer = reader.ReadInt32();
                     value.OrderNumber = reader.ReadInt64();
            
                     return value;
                 }
            
                 void Write(Order currentValue, Order newValue, BinaryWriter writer)
                 {
                     this.Write(newValue, writer);
                 }
            
                 Order Read(Order baseValue, BinaryReader reader)
                 {
                     return this.Read(reader);
                 }
             }
             </code></example>
    <example>
             In this example, implementation of the Read and Write overloads simply call their counterpart overloads.
             The currentValue and baseValue parameters are not set by the platform and should be ignored.
             <code>
             class Order
             {
                 public byte Warehouse { get; set; }
                 public short District { get; set; }
                 public int Customer { get; set; }
                 public long OrderNumber { get; set; }
             }
            
             class OrderSerializer : IStateSerializer&lt;Order&gt;
             {
                 void Write(Order value, BinaryWriter writer)
                 {
                     writer.Write(value.Warehouse);
                     writer.Write(value.District);
                     writer.Write(value.Customer);
                     writer.Write(value.OrderNumber);
                 }
            
                 Order Read(BinaryReader reader)
                 {
                     Order value = new Order();
            
                     value.Warehouse = reader.ReadByte();
                     value.District = reader.ReadInt16();
                     value.Customer = reader.ReadInt32();
                     value.OrderNumber = reader.ReadInt64();
            
                     return value;
                 }
            
                 void Write(Order currentValue, Order newValue, BinaryWriter writer)
                 {
                     this.Write(newValue, writer);
                 }
            
                 Order Read(Order baseValue, BinaryReader reader)
                 {
                     return this.Read(reader);
                 }
             }
             </code></example>
    <example>
             In this example, implementation of the Read and Write overloads simply call their counterpart overloads.
             The currentValue and baseValue parameters are not set by the platform and should be ignored.
             <code>
             class Order
             {
                 public byte Warehouse { get; set; }
                 public short District { get; set; }
                 public int Customer { get; set; }
                 public long OrderNumber { get; set; }
             }
            
             class OrderSerializer : IStateSerializer&lt;Order&gt;
             {
                 void Write(Order value, BinaryWriter writer)
                 {
                     writer.Write(value.Warehouse);
                     writer.Write(value.District);
                     writer.Write(value.Customer);
                     writer.Write(value.OrderNumber);
                 }
            
                 Order Read(BinaryReader reader)
                 {
                     Order value = new Order();
            
                     value.Warehouse = reader.ReadByte();
                     value.District = reader.ReadInt16();
                     value.Customer = reader.ReadInt32();
                     value.OrderNumber = reader.ReadInt64();
            
                     return value;
                 }
            
                 void Write(Order currentValue, Order newValue, BinaryWriter writer)
                 {
                     this.Write(newValue, writer);
                 }
            
                 Order Read(Order baseValue, BinaryReader reader)
                 {
                     return this.Read(reader);
                 }
             }
             </code></example>
    <example>
             In this example, implementation of the Read and Write overloads simply call their counterpart overloads.
             The currentValue and baseValue parameters are not set by the platform and should be ignored.
             <code>
             class Order
             {
                 public byte Warehouse { get; set; }
                 public short District { get; set; }
                 public int Customer { get; set; }
                 public long OrderNumber { get; set; }
             }
            
             class OrderSerializer : IStateSerializer&lt;Order&gt;
             {
                 void Write(Order value, BinaryWriter writer)
                 {
                     writer.Write(value.Warehouse);
                     writer.Write(value.District);
                     writer.Write(value.Customer);
                     writer.Write(value.OrderNumber);
                 }
            
                 Order Read(BinaryReader reader)
                 {
                     Order value = new Order();
            
                     value.Warehouse = reader.ReadByte();
                     value.District = reader.ReadInt16();
                     value.Customer = reader.ReadInt32();
                     value.OrderNumber = reader.ReadInt64();
            
                     return value;
                 }
            
                 void Write(Order currentValue, Order newValue, BinaryWriter writer)
                 {
                     this.Write(newValue, writer);
                 }
            
                 Order Read(Order baseValue, BinaryReader reader)
                 {
                     return this.Read(reader);
                 }
             }
             </code></example>
    <example>
             In this example, implementation of the Read and Write overloads simply call their counterpart overloads.
             The currentValue and baseValue parameters are not set by the platform and should be ignored.
             <code>
             class Order
             {
                 public byte Warehouse { get; set; }
                 public short District { get; set; }
                 public int Customer { get; set; }
                 public long OrderNumber { get; set; }
             }
            
             class OrderSerializer : IStateSerializer&lt;Order&gt;
             {
                 void Write(Order value, BinaryWriter writer)
                 {
                     writer.Write(value.Warehouse);
                     writer.Write(value.District);
                     writer.Write(value.Customer);
                     writer.Write(value.OrderNumber);
                 }
            
                 Order Read(BinaryReader reader)
                 {
                     Order value = new Order();
            
                     value.Warehouse = reader.ReadByte();
                     value.District = reader.ReadInt16();
                     value.Customer = reader.ReadInt32();
                     value.OrderNumber = reader.ReadInt64();
            
                     return value;
                 }
            
                 void Write(Order currentValue, Order newValue, BinaryWriter writer)
                 {
                     this.Write(newValue, writer);
                 }
            
                 Order Read(Order baseValue, BinaryReader reader)
                 {
                     return this.Read(reader);
                 }
             }
             </code></example>
  </Docs>
  <Members>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public T Read (System.IO.BinaryReader binaryReader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !T Read(class System.IO.BinaryReader binaryReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.IStateSerializer`1.Read(System.IO.BinaryReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryReader" Type="System.IO.BinaryReader" />
      </Parameters>
      <Docs>
        <param name="binaryReader">The <see cref="T:System.IO.BinaryReader" /> to deserialize from.</param>
        <summary>
            Deserializes from the given <see cref="T:System.IO.BinaryReader" /> to <typeparamref name="T" />.
            </summary>
        <returns>The deserialized value.</returns>
        <remarks>
            When accessing the <see cref="T:System.IO.BinaryReader" /> base stream, care must be taken when moving the position in the stream.
            Reading must begin at the current stream position and end at the current position plus the length of your data.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public T Read (T baseValue, System.IO.BinaryReader binaryReader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !T Read(!T baseValue, class System.IO.BinaryReader binaryReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.IStateSerializer`1.Read(`0,System.IO.BinaryReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseValue" Type="T" />
        <Parameter Name="binaryReader" Type="System.IO.BinaryReader" />
      </Parameters>
      <Docs>
        <param name="baseValue">The base value for the deserialization.</param>
        <param name="binaryReader">The <see cref="T:System.IO.BinaryReader" /> to deserialize from.</param>
        <summary>
            Deserializes from the given <see cref="T:System.IO.BinaryReader" /> to <typeparamref name="T" />.
            </summary>
        <returns>The deserialized value.</returns>
        <remarks>
            When accessing the <see cref="T:System.IO.BinaryReader" /> base stream, care must be taken when moving the position in the stream.
            Reading must begin at the current stream position and end at the current position plus the length of your data.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (T value, System.IO.BinaryWriter binaryWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(!T value, class System.IO.BinaryWriter binaryWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.IStateSerializer`1.Write(`0,System.IO.BinaryWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
        <Parameter Name="binaryWriter" Type="System.IO.BinaryWriter" />
      </Parameters>
      <Docs>
        <param name="value">The value to serialize.</param>
        <param name="binaryWriter">The <see cref="T:System.IO.BinaryWriter" /> to serialize to.</param>
        <summary>
            Serializes a value and writes it to the given <see cref="T:System.IO.BinaryWriter" />.
            </summary>
        <remarks>
            When accessing the <see cref="T:System.IO.BinaryWriter" /> base stream, care must be taken when moving the position in the stream.
            Writing must begin at the current stream position and end at the current position plus the length of your data.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (T baseValue, T targetValue, System.IO.BinaryWriter binaryWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(!T baseValue, !T targetValue, class System.IO.BinaryWriter binaryWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.IStateSerializer`1.Write(`0,`0,System.IO.BinaryWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseValue" Type="T" />
        <Parameter Name="targetValue" Type="T" />
        <Parameter Name="binaryWriter" Type="System.IO.BinaryWriter" />
      </Parameters>
      <Docs>
        <param name="baseValue">The base value for the serialization.</param>
        <param name="targetValue">The value to serialize.</param>
        <param name="binaryWriter">The <see cref="T:System.IO.BinaryWriter" /> to serialize to.</param>
        <summary>
            Serializes an object and writes it to the given <see cref="T:System.IO.BinaryWriter" />.
            </summary>
        <remarks>
            When accessing the <see cref="T:System.IO.BinaryWriter" /> base stream, care must be taken when moving the position in the stream.
            Writing must begin at the current stream position and end at the current position plus the length of your data.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>