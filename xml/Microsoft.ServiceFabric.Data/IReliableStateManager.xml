<Type Name="IReliableStateManager" FullName="Microsoft.ServiceFabric.Data.IReliableStateManager">
  <TypeSignature Language="C#" Value="public interface IReliableStateManager : Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;Microsoft.ServiceFabric.Data.IReliableState&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IReliableStateManager implements class Microsoft.ServiceFabric.Data.IAsyncEnumerable`1&lt;class Microsoft.ServiceFabric.Data.IReliableState&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ServiceFabric.Data.IReliableStateManager" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;Microsoft.ServiceFabric.Data.IReliableState&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Manages all <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> for a service replica.
            Each replica in a service has its own state manager and thus its own set of <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateTransaction">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceFabric.Data.ITransaction CreateTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ServiceFabric.Data.ITransaction CreateTransaction() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.IReliableStateManager.CreateTransaction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceFabric.Data.ITransaction</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Create and start a new transaction that can be used to group operations to be performed atomically.
            </summary>
        <returns>A new transaction.</returns>
        <remarks>
            Operations are added to the transaction by passing the <see cref="T:Microsoft.ServiceFabric.Data.ITransaction" /> object in to reliable state methods.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAddAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;T&gt; GetOrAddAsync&lt;T&gt; (string name) where T : Microsoft.ServiceFabric.Data.IReliableState;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!T&gt; GetOrAddAsync&lt;(class Microsoft.ServiceFabric.Data.IReliableState) T&gt;(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>Microsoft.ServiceFabric.Data.IReliableState</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">
            When specifying the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> type, you may ask for either a class type or an interface type.
            <para>
            If specifying a class type, the system will attempt to return an instance of that type. 
            If an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.
            </para><para>
            If specifying an interface type, the manager will attempt to resolve the interface to a concrete type.
            If type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).
            If type mapping is not specified by the user this method will select the default implementation for the interface given.
            If the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type
            is invalid, this method will throw ArgumentException.
            </para></typeparam>
        <param name="name">
            The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" />. This name must be unique in this <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager" />
            across <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> types, including unrelated types.
            </param>
        <summary>
            Gets an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> of the given type <typeparamref name="T" /> and with the given name if it exists, or creates one
            and returns it if it doesn't already exist.
            </summary>
        <returns>Task that represents the asynchronous operation. The task result is the reliable state instance.</returns>
        <remarks>
            This is an atomic operation. When an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> needs to be created, it will either complete and return successfully
            or it will not be created.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null.</exception>
        <exception cref="T:System.ArgumentException">An instance of the type <typeparamref name="T" /> cannot be created, or the existing <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> instance is not of type <typeparamref name="T" />.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">Thrown when the <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager" /> is not in  <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable State Manager is closed.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The operation has been internally faulted by the system. Retry the operation</exception>
      </Docs>
    </Member>
    <Member MemberName="GetOrAddAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;T&gt; GetOrAddAsync&lt;T&gt; (Uri name) where T : Microsoft.ServiceFabric.Data.IReliableState;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!T&gt; GetOrAddAsync&lt;(class Microsoft.ServiceFabric.Data.IReliableState) T&gt;(class System.Uri name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>Microsoft.ServiceFabric.Data.IReliableState</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="name" Type="System.Uri" />
      </Parameters>
      <Docs>
        <typeparam name="T">
            When specifying the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> type, you may ask for either a class type or an interface type.
            <para>
            If specifying a class type, the system will attempt to return an instance of that type. 
            If an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.
            </para><para>
            If specifying an interface type, the manager will attempt to resolve the interface to a concrete type.
            If type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).
            If type mapping is not specified by the user this method will select the default implementation for the interface given.
            If the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type
            is invalid, this method will throw ArgumentException.
            </para></typeparam>
        <param name="name">
            The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" />. This name must be unique in this <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager" />
            across <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> types, including unrelated types.
            </param>
        <summary>
            Gets an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> of the given type <typeparamref name="T" /> and with the given name if it exists, or creates one
            and returns it if it doesn't already exist.
            </summary>
        <returns>Task that represents the asynchronous operation. The task result is the reliable state instance.</returns>
        <remarks>
            This is an atomic operation. When an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> needs to be created, it will either complete and return successfully
            or it will not be created.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null.</exception>
        <exception cref="T:System.ArgumentException">An instance of the type <typeparamref name="T" /> cannot be created, or the existing <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> instance is not of type <typeparamref name="T" />.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">Thrown when the <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager" /> is not in  <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable State Manager is closed.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The operation has been internally faulted by the system. Retry the operation</exception>
      </Docs>
    </Member>
    <Member MemberName="GetOrAddAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;T&gt; GetOrAddAsync&lt;T&gt; (Microsoft.ServiceFabric.Data.ITransaction tx, string name) where T : Microsoft.ServiceFabric.Data.IReliableState;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!T&gt; GetOrAddAsync&lt;(class Microsoft.ServiceFabric.Data.IReliableState) T&gt;(class Microsoft.ServiceFabric.Data.ITransaction tx, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>Microsoft.ServiceFabric.Data.IReliableState</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">
            When specifying the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> type, you may ask for either a class type or an interface type.
            <para>
            If specifying a class type, the system will attempt to return an instance of that type. 
            If an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.
            </para><para>
            If specifying an interface type, the manager will attempt to resolve the interface to a concrete type.
            If type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).
            If type mapping is not specified by the user this method will select the default implementation for the interface given.
            If the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type
            is invalid, this method will throw ArgumentException.
            </para></typeparam>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="name">
            The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" />. This name must be unique in this <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager" />
            across <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> types, including unrelated types.
            </param>
        <summary>
            Gets an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> of the given type <typeparamref name="T" /> and with the given name if it exists, or creates one
            and returns it if it doesn't already exist.
            </summary>
        <returns>Task that represents the asynchronous operation. The task result is the reliable state instance.</returns>
        <remarks>
            This is an atomic operation. When an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> needs to be created, it will either complete and return successfully
            or it will not be created. If this method throws an exception, the transaction must be aborted.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="name" /> is null.</exception>
        <exception cref="T:System.ArgumentException">An instance of the type <typeparamref name="T" /> cannot be created, or the existing <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> instance is not of type <typeparamref name="T" />.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">Thrown when the <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager" /> is not in  <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable State Manager is closed.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="GetOrAddAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;T&gt; GetOrAddAsync&lt;T&gt; (Microsoft.ServiceFabric.Data.ITransaction tx, Uri name) where T : Microsoft.ServiceFabric.Data.IReliableState;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!T&gt; GetOrAddAsync&lt;(class Microsoft.ServiceFabric.Data.IReliableState) T&gt;(class Microsoft.ServiceFabric.Data.ITransaction tx, class System.Uri name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>Microsoft.ServiceFabric.Data.IReliableState</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="name" Type="System.Uri" />
      </Parameters>
      <Docs>
        <typeparam name="T">
            When specifying the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> type, you may ask for either a class type or an interface type.
            <para>
            If specifying a class type, the system will attempt to return an instance of that type. 
            If an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.
            </para><para>
            If specifying an interface type, the manager will attempt to resolve the interface to a concrete type.
            If type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).
            If type mapping is not specified by the user this method will select the default implementation for the interface given.
            If the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type
            is invalid, this method will throw ArgumentException.
            </para></typeparam>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="name">
            The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" />. This name must be unique in this <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager" />
            across <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> types, including unrelated types.
            </param>
        <summary>
            Gets an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> of the given type <typeparamref name="T" /> and with the given name if it exists, or creates one
            and returns it if it doesn't already exist.
            </summary>
        <returns>Task that represents the asynchronous operation. The task result is the reliable state instance.</returns>
        <remarks>
            This is an atomic operation. When an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> needs to be created, it will either complete and return successfully
            or it will not be created. If this method throws an exception, the transaction must be aborted.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="name" /> is null.</exception>
        <exception cref="T:System.ArgumentException">An instance of the type <typeparamref name="T" /> cannot be created, or the existing <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> instance is not of type <typeparamref name="T" />.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">Thrown when the <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager" /> is not in  <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable State Manager is closed.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="GetOrAddAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;T&gt; GetOrAddAsync&lt;T&gt; (string name, TimeSpan timeout) where T : Microsoft.ServiceFabric.Data.IReliableState;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!T&gt; GetOrAddAsync&lt;(class Microsoft.ServiceFabric.Data.IReliableState) T&gt;(string name, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.String,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>Microsoft.ServiceFabric.Data.IReliableState</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="T">
            When specifying the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> type, you may ask for either a class type or an interface type.
            <para>
            If specifying a class type, the system will attempt to return an instance of that type. 
            If an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.
            </para><para>
            If specifying an interface type, the manager will attempt to resolve the interface to a concrete type.
            If type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).
            If type mapping is not specified by the user this method will select the default implementation for the interface given.
            If the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type
            is invalid, this method will throw ArgumentException.
            </para></typeparam>
        <param name="name">
            The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" />. This name must be unique in this <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager" />
            across <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> types, including unrelated types.
            </param>
        <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
        <summary>
            Gets an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> of the given type <typeparamref name="T" /> and with the given name if it exists, or creates one
            and returns it if it doesn't already exist.
            </summary>
        <returns>Task that represents the asynchronous operation. The task result is the reliable state instance.</returns>
        <remarks>
            This is an atomic operation. When an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> needs to be created, it will either complete and return successfully
            or it will not be created.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null.</exception>
        <exception cref="T:System.ArgumentException">An instance of the type <typeparamref name="T" /> cannot be created, or the existing <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> instance is not of type <typeparamref name="T" />, or <paramref name="timeout" /> is negative.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">Thrown when the <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager" /> is not in  <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable State Manager is closed.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The operation has been internally faulted by the system. Retry the operation</exception>
      </Docs>
    </Member>
    <Member MemberName="GetOrAddAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;T&gt; GetOrAddAsync&lt;T&gt; (Uri name, TimeSpan timeout) where T : Microsoft.ServiceFabric.Data.IReliableState;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!T&gt; GetOrAddAsync&lt;(class Microsoft.ServiceFabric.Data.IReliableState) T&gt;(class System.Uri name, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.Uri,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>Microsoft.ServiceFabric.Data.IReliableState</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="name" Type="System.Uri" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="T">
            When specifying the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> type, you may ask for either a class type or an interface type.
            <para>
            If specifying a class type, the system will attempt to return an instance of that type. 
            If an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.
            </para><para>
            If specifying an interface type, the manager will attempt to resolve the interface to a concrete type.
            If type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).
            If type mapping is not specified by the user this method will select the default implementation for the interface given.
            If the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type
            is invalid, this method will throw ArgumentException.
            </para></typeparam>
        <param name="name">
            The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" />. This name must be unique in this <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager" />
            across <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> types, including unrelated types.
            </param>
        <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
        <summary>
            Gets an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> of the given type <typeparamref name="T" /> and with the given name if it exists, or creates one
            and returns it if it doesn't already exist.
            </summary>
        <returns>Task that represents the asynchronous operation. The task result is the reliable state instance.</returns>
        <remarks>
            This is an atomic operation. When an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> needs to be created, it will either complete and return successfully
            or it will not be created.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null.</exception>
        <exception cref="T:System.ArgumentException">An instance of the type <typeparamref name="T" /> cannot be created, or the existing <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> instance is not of type <typeparamref name="T" />, or <paramref name="timeout" /> is negative.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">Thrown when the <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager" /> is not in  <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable State Manager is closed.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The operation has been internally faulted by the system. Retry the operation</exception>
      </Docs>
    </Member>
    <Member MemberName="GetOrAddAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;T&gt; GetOrAddAsync&lt;T&gt; (Microsoft.ServiceFabric.Data.ITransaction tx, string name, TimeSpan timeout) where T : Microsoft.ServiceFabric.Data.IReliableState;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!T&gt; GetOrAddAsync&lt;(class Microsoft.ServiceFabric.Data.IReliableState) T&gt;(class Microsoft.ServiceFabric.Data.ITransaction tx, string name, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.String,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>Microsoft.ServiceFabric.Data.IReliableState</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="T">
            When specifying the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> type, you may ask for either a class type or an interface type.
            <para>
            If specifying a class type, the system will attempt to return an instance of that type. 
            If an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.
            </para><para>
            If specifying an interface type, the manager will attempt to resolve the interface to a concrete type.
            If type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).
            If type mapping is not specified by the user this method will select the default implementation for the interface given.
            If the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type
            is invalid, this method will throw ArgumentException.
            </para></typeparam>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="name">
            The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" />. This name must be unique in this <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager" />
            across <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> types, including unrelated types.
            </param>
        <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
        <summary>
            Gets an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> of the given type <typeparamref name="T" /> and with the given name if it exists, or creates one
            and returns it if it doesn't already exist.
            </summary>
        <returns>Task that represents the asynchronous operation. The task result is the reliable state instance.</returns>
        <remarks>
            This is an atomic operation. When an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> needs to be created, it will either complete and return successfully
            or it will not be created. If this method throws an exception, the transaction must be aborted.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="name" /> is null.</exception>
        <exception cref="T:System.ArgumentException">An instance of the type <typeparamref name="T" /> cannot be created, or the existing <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> instance is not of type <typeparamref name="T" />, or <paramref name="timeout" /> is negative.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">Thrown when the <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager" /> is not in  <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable State Manager is closed.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="GetOrAddAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;T&gt; GetOrAddAsync&lt;T&gt; (Microsoft.ServiceFabric.Data.ITransaction tx, Uri name, TimeSpan timeout) where T : Microsoft.ServiceFabric.Data.IReliableState;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!T&gt; GetOrAddAsync&lt;(class Microsoft.ServiceFabric.Data.IReliableState) T&gt;(class Microsoft.ServiceFabric.Data.ITransaction tx, class System.Uri name, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.Uri,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>Microsoft.ServiceFabric.Data.IReliableState</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="name" Type="System.Uri" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="T">
            When specifying the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> type, you may ask for either a class type or an interface type.
            <para>
            If specifying a class type, the system will attempt to return an instance of that type. 
            If an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.
            </para><para>
            If specifying an interface type, the manager will attempt to resolve the interface to a concrete type.
            If type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).
            If type mapping is not specified by the user this method will select the default implementation for the interface given.
            If the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type
            is invalid, this method will throw ArgumentException.
            </para></typeparam>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="name">
            The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" />. This name must be unique in this <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager" />
            across <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> types, including unrelated types.
            </param>
        <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
        <summary>
            Gets an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> of the given type <typeparamref name="T" /> and with the given name if it exists, or creates one
            and returns it if it doesn't already exist.
            </summary>
        <returns>Task that represents the asynchronous operation. The task result is the reliable state instance.</returns>
        <remarks>
            This is an atomic operation. When an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> needs to be created, it will either complete and return successfully
            or it will not be created. If this method throws an exception, the transaction must be aborted.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="name" /> is null.</exception>
        <exception cref="T:System.ArgumentException">An instance of the type <typeparamref name="T" /> cannot be created, or the existing <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> instance is not of type <typeparamref name="T" />, or <paramref name="timeout" /> is negative.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">Thrown when the <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager" /> is not in  <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable State Manager is closed.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task RemoveAsync (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task RemoveAsync(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> to remove.</param>
        <summary>
            Removes the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> with the given name from this state manager. The state is
            permanently removed from persistent storage and all replicas.
            </summary>
        <returns>Task that represents the asynchronous remove operation.</returns>
        <remarks>
            This is an atomic operation. The <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> will be successfully removed along with all state
            or be left in-tact.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null.</exception>
        <exception cref="T:System.ArgumentException">An <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> with the given name does not exist.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">Thrown when the <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager" /> is not in  <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable State Manager is closed.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The operation has been internally faulted by the system. Retry the operation</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task RemoveAsync (Uri name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task RemoveAsync(class System.Uri name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="name">The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> to remove.</param>
        <summary>
            Removes the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> with the given name from this state manager. The state is
            permanently removed from persistent storage and all replicas.
            </summary>
        <returns>Task that represents the asynchronous remove operation.</returns>
        <remarks>
            This is an atomic operation. The <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> will be successfully removed along with all state
            or be left in-tact.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null.</exception>
        <exception cref="T:System.ArgumentException">An <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> with the given name does not exist.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">Thrown when the <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager" /> is not in  <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable State Manager is closed.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The operation has been internally faulted by the system. Retry the operation</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task RemoveAsync (Microsoft.ServiceFabric.Data.ITransaction tx, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task RemoveAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="name">The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> to remove.</param>
        <summary>
            Removes the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> with the given name from this state manager. The state is
            permanently removed from persistent storage and all replicas when the transaction is committed.
            </summary>
        <returns>Task that represents the asynchronous remove operation.</returns>
        <remarks>
            This is an atomic operation. The <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> will be successfully removed along with all state
            or be left in-tact. If this method throws an exception, the transaction must be aborted.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="name" /> is null.</exception>
        <exception cref="T:System.ArgumentException">An <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> with the given name does not exist.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">Thrown when the <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager" /> is not in  <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable State Manager is closed.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task RemoveAsync (Microsoft.ServiceFabric.Data.ITransaction tx, Uri name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task RemoveAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, class System.Uri name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="name" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="name">The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> to remove.</param>
        <summary>
            Removes the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> with the given name from this state manager. The state is
            permanently removed from persistent storage and all replicas when the transaction is committed.
            </summary>
        <returns>Task that represents the asynchronous remove operation.</returns>
        <remarks>
            This is an atomic operation. The <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> will be successfully removed along with all state
            or be left in-tact. If this method throws an exception, the transaction must be aborted.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="name" /> is null.</exception>
        <exception cref="T:System.ArgumentException">An <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> with the given name does not exist.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">Thrown when the <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager" /> is not in  <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable State Manager is closed.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task RemoveAsync (string name, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task RemoveAsync(string name, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.String,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="name">The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> to remove.</param>
        <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
        <summary>
            Removes the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> with the given name from this state manager. The state is
            permanently removed from persistent storage and all replicas.
            </summary>
        <returns>Task that represents the asynchronous remove operation.</returns>
        <remarks>
            This is an atomic operation. The <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> will be successfully removed along with all state
            or be left in-tact.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null.</exception>
        <exception cref="T:System.ArgumentException">An <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> with the given name does not exist, or <paramref name="timeout" /> is negative.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">Thrown when the <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager" /> is not in  <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable State Manager is closed.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The operation has been internally faulted by the system. Retry the operation</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task RemoveAsync (Uri name, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task RemoveAsync(class System.Uri name, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.Uri,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Uri" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="name">The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> to remove.</param>
        <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
        <summary>
            Removes the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> with the given name from this state manager. The state is
            permanently removed from persistent storage and all replicas.
            </summary>
        <returns>Task that represents the asynchronous remove operation.</returns>
        <remarks>
            This is an atomic operation. The <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> will be successfully removed along with all state
            or be left in-tact.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null.</exception>
        <exception cref="T:System.ArgumentException">An <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> with the given name does not exist, or <paramref name="timeout" /> is negative.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">Thrown when the <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager" /> is not in  <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable State Manager is closed.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The operation has been internally faulted by the system. Retry the operation</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task RemoveAsync (Microsoft.ServiceFabric.Data.ITransaction tx, string name, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task RemoveAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, string name, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.String,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="name">The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> to remove.</param>
        <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
        <summary>
            Removes the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> with the given name from this state manager. The state is
            permanently removed from persistent storage and all replicas when the transaction is committed.
            </summary>
        <returns>Task that represents the asynchronous remove operation.</returns>
        <remarks>
            This is an atomic operation. The <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> will be successfully removed along with all state
            or be left in-tact. If this method throws an exception, the transaction must be aborted.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="name" /> is null.</exception>
        <exception cref="T:System.ArgumentException">An <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> with the given name does not exist, or <paramref name="timeout" /> is negative.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">Thrown when the <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager" /> is not in  <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable State Manager is closed.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task RemoveAsync (Microsoft.ServiceFabric.Data.ITransaction tx, Uri name, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task RemoveAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, class System.Uri name, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Uri,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="name" Type="System.Uri" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="name">The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> to remove.</param>
        <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
        <summary>
            Removes the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> with the given name from this state manager. The state is
            permanently removed from persistent storage and all replicas when the transaction is committed.
            </summary>
        <returns>Task that represents the asynchronous remove operation.</returns>
        <remarks>
            This is an atomic operation. The <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> will be successfully removed along with all state
            or be left in-tact. If this method throws an exception, the transaction must be aborted.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="name" /> is null.</exception>
        <exception cref="T:System.ArgumentException">An <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> with the given name does not exist, or <paramref name="timeout" /> is negative.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">Thrown when the <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager" /> is not in  <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable State Manager is closed.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="StateManagerChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedEventArgs&gt; StateManagerChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedEventArgs&gt; StateManagerChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.ServiceFabric.Data.IReliableStateManager.StateManagerChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Occurs when State Manager's state changes.
            For example, creation or delete of reliable state or rebuild of the reliable state manager.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransactionChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Microsoft.ServiceFabric.Data.Notifications.NotifyTransactionChangedEventArgs&gt; TransactionChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Microsoft.ServiceFabric.Data.Notifications.NotifyTransactionChangedEventArgs&gt; TransactionChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.ServiceFabric.Data.IReliableStateManager.TransactionChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Microsoft.ServiceFabric.Data.Notifications.NotifyTransactionChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Occurs when a transaction's state changes.
            For example, commit of a transaction.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAddStateSerializer&lt;T&gt;">
      <MemberSignature Language="C#" Value="public bool TryAddStateSerializer&lt;T&gt; (Microsoft.ServiceFabric.Data.IStateSerializer&lt;T&gt; stateSerializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryAddStateSerializer&lt;T&gt;(class Microsoft.ServiceFabric.Data.IStateSerializer`1&lt;!!T&gt; stateSerializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer``1(Microsoft.ServiceFabric.Data.IStateSerializer{``0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="stateSerializer" Type="Microsoft.ServiceFabric.Data.IStateSerializer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">Type that will be serialized and deserialized.</typeparam>
        <param name="stateSerializer">
            The state serializer to be added.
            </param>
        <summary>
            Registers a custom serializer for all reliable collections.
            </summary>
        <returns>
            True if the custom serializer was added.
            False if a custom serializer for the given type already exists.
            </returns>
        <remarks>
          <para>
            When a reliable collection needs to serialize an object, it asks the state manager for a serializer for the given type.
            The state manager will first check if there is a custom serializer registered for the input type. If not, it will check if one of the built-in
            serializers can serialize the type. The state manager has built-in serializers for the following types: guid, bool, byte, sbyte, char, decimal, double,
            float, int, uint, long, ulong, short, ushort and string. If not, it will use <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.
            </para>
          <para>
            Serializers must be infinitely forwards and backwards compatible. For the types that are using built-in serializers, Service Fabric ensures
            forwards and backwards compatibility. However, if a custom serializer is added for a type with a built-in serializer, the custom serializer
            must be compatible with the built-in serialization format for that type.
            </para>
          <para>
            This method should be called from the constructor of the Stateful Service. 
            This ensures that the Reliable Collections have the necessary serializers before recovery of the persisted state begins.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;T&gt;&gt; TryGetAsync&lt;T&gt; (string name) where T : Microsoft.ServiceFabric.Data.IReliableState;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Microsoft.ServiceFabric.Data.ConditionalValue`1&lt;!!T&gt;&gt; TryGetAsync&lt;(class Microsoft.ServiceFabric.Data.IReliableState) T&gt;(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync``1(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>Microsoft.ServiceFabric.Data.IReliableState</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">
            When specifying the type, you may ask for either a concrete type or an interface type. The retrieved object will
            be cast to the given type.
            </typeparam>
        <param name="name">
            The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" />. This name must be unique in this <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager" />
            across <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> types, including unrelated types.
            </param>
        <summary>
            Attempts to get an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> of the given type <typeparamref name="T" /> and with the given name.
            </summary>
        <returns>Task that represents the asynchronous operation. The task result is a tuple indicating whether the reliable state was found, and if so the instance.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null.</exception>
        <exception cref="T:System.ArgumentException">The <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> instance is not convertible to type <typeparamref name="T" />.</exception>
        <exception cref="T:System.Fabric.FabricNotReadableException">
            Exception indicates that the State Manager cannot retrive a reliable collection.
            <see cref="T:System.Fabric.FabricNotReadableException" /> can be thrown in all <see cref="T:System.Fabric.ReplicaRole" />s.
            For example, when a <see cref="F:System.Fabric.ReplicaRole.Primary" /> or <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" /> looses <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus" />.</exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable State Manager is closed.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The operation has been internally faulted by the system. Retry the operation</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;T&gt;&gt; TryGetAsync&lt;T&gt; (Uri name) where T : Microsoft.ServiceFabric.Data.IReliableState;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Microsoft.ServiceFabric.Data.ConditionalValue`1&lt;!!T&gt;&gt; TryGetAsync&lt;(class Microsoft.ServiceFabric.Data.IReliableState) T&gt;(class System.Uri name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync``1(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>Microsoft.ServiceFabric.Data.IReliableState</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="name" Type="System.Uri" />
      </Parameters>
      <Docs>
        <typeparam name="T">
            When specifying the type, you may ask for either a concrete type or an interface type. The retrieved object will
            be cast to the given type.
            </typeparam>
        <param name="name">
            The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" />. This name must be unique in this <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager" />
            across <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> types, including unrelated types.
            </param>
        <summary>
            Attempts to get an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> of the given type <typeparamref name="T" /> and with the given name.
            </summary>
        <returns>Task that represents the asynchronous operation. The task result is a tuple indicating whether the reliable state was found, and if so the instance.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null.</exception>
        <exception cref="T:System.ArgumentException">The <see cref="T:Microsoft.ServiceFabric.Data.IReliableState" /> instance is not convertible to type <typeparamref name="T" />.</exception>
        <exception cref="T:System.Fabric.FabricNotReadableException">
            Exception indicates that the State Manager cannot retrive a reliable collection.
            <see cref="T:System.Fabric.FabricNotReadableException" /> can be thrown in all <see cref="T:System.Fabric.ReplicaRole" />s.
            For example, when a <see cref="F:System.Fabric.ReplicaRole.Primary" /> or <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" /> looses <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus" />.</exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable State Manager is closed.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The operation has been internally faulted by the system. Retry the operation</exception>
      </Docs>
    </Member>
  </Members>
</Type>